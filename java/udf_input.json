[{content: "package com.company.product;\n\nimport static java.util.Arrays.asList;\nimport static java.util.Collections.synchronizedList;\nimport static org.apache.commons.collections.BagUtils.*; // We ignore wildcard static imports to simplify the code\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.*; // We ignore wildcard static imports to simplify the code\n\nimport org.apache.commons.collections.Bag;\nimport org.apache.commons.collections.SortedBag;\nimport org.apache.commons.collections.bag.TreeBag;\nimport org.apache.commons.lang.StringUtils;\n\npublic class Demo {\n\npublic static boolean method(String value) {\nif (StringUtils.isAllUpperCase(value)) {\nreturn true;\n} else if (true) {\nfor (String sub : StringUtils.split(value)) {\nList<String> fields = Arrays.asList(StringUtils.split(value + \"\"));\nBag treeBag = unmodifiableBag(new TreeBag(fields));\nreturn treeBag.contains(\"comma\");\n}\n}\nthrow new IllegalArgumentException(value);\n}\n\npublic static void main(String[] args) {\nList<String> list = new ArrayList<>();\nSet<String> set = new HashSet<String>();\nSet<? extends List<?>> concurrentSet = new CopyOnWriteArraySet<LinkedList<String>>();\nList<Integer> integers = asList(1, 2, 3);\nSet<Double> doubles = Collections.synchronizedSet(new HashSet<Double>());\nList<Float> floats = synchronizedList(new LinkedList<Float>());\n\nif (floats.size() > doubles.toArray(new Double[] {}).length) {\nfloat first = floats.get(0);\nSystem.out.println(\"Print \" + first);\n}\nif (floats.isEmpty() || integers.size() < Integer.MAX_VALUE) {\nmethod(\"innerCall\");\n}\nIterator<String> it = list.iterator();\nwhile (it.hasNext()) {\nString v = it.next();\nNumber d = (Number) Integer.valueOf(v);\n}\n}\n\n}\n\n"}]
