{"id":"cf5c8365567871860650afd7e40de0a1d4a49a2e","size":"2404","content":"/*_##########################################################################\n  _##\n  _##  Copyright (C) 2015  Pcap4J.org\n  _##\n  _##########################################################################\n*/\n\npackage org.pcap4j.core;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport com.sun.jna.Native;\nimport com.sun.jna.NativeLibrary;\nimport com.sun.jna.NativeLong;\nimport com.sun.jna.Pointer;\nimport com.sun.jna.Structure;\n\n/**\n * @author Kaito Yamada\n * @since pcap4j 1.6.2\n */\nfinal class NativePacketDllMappings {\n\n  static final String LIB_NAME\n    = System.getProperty(\n        NativePacketDllMappings.class.getPackage().getName() + \".packetLibName\",\n        \"Packet\"\n      );\n\n  static final int PACKET_OID_DATA_SIZE;\n\n  static {\n    Native.register(\n      NativePacketDllMappings.class,\n      NativeLibrary.getInstance(LIB_NAME)\n    );\n\n    PACKET_OID_DATA_SIZE = new PACKET_OID_DATA().size();\n  }\n\n  // LPADAPTER PacketOpenAdapter(PCHAR AdapterNameWA)\n  static native Pointer PacketOpenAdapter(String AdapterNameWA);\n\n  // BOOLEAN PacketRequest(LPADAPTER  AdapterObject,BOOLEAN Set,PPACKET_OID_DATA  OidData)\n  static native int PacketRequest(Pointer AdapterObject, int Set, PACKET_OID_DATA OidData);\n\n  // VOID PacketCloseAdapter(LPADAPTER lpAdapter)\n  static native void PacketCloseAdapter(Pointer lpAdapter);\n\n  private NativePacketDllMappings() {}\n\n  // struct _PACKET_OID_DATA {\n  //     ULONG Oid;       ///< OID code. See the Microsoft DDK documentation or the file ntddndis.h\n  //                      ///< for a complete list of valid codes.\n  //     ULONG Length;    ///< Length of the data field\n  //     UCHAR Data[1];   ///< variable-lenght field that contains the information passed to or received\n  //                      ///< from the adapter.\n  // };\n  public static class PACKET_OID_DATA extends Structure {\n\n    public NativeLong Oid; // ULONG\n    public NativeLong Length; // ULONG\n    public byte[] Data = new byte[6]; // UCHAR\n\n    public PACKET_OID_DATA() {}\n\n    public PACKET_OID_DATA(Pointer p) {\n      super(p);\n      read();\n    }\n\n    public static\n    class ByReference\n    extends PACKET_OID_DATA implements Structure.ByReference {}\n\n    @Override\n    protected List<String> getFieldOrder() {\n      List<String> list = new ArrayList<String>();\n      list.add(\"Oid\");\n      list.add(\"Length\");\n      list.add(\"Data\");\n      return list;\n    }\n\n  }\n\n}\n","binary":"false","copies":"2","sample_repo_name":"kaitoy/pcap4j","sample_ref":"refs/heads/v1","sample_path":"pcap4j-core/src/main/java/org/pcap4j/core/NativePacketDllMappings.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2e544385242e8c877e89a93826e561c1571a8002","size":"7723","content":"/*_##########################################################################\n  _##\n  _##  Copyright (C) 2014  Pcap4J.org\n  _##\n  _##########################################################################\n*/\n\npackage org.pcap4j.packet;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.pcap4j.packet.namednumber.Ssh2MessageNumber;\nimport org.pcap4j.util.ByteArrays;\n\n/**\n * @author Kaito Yamada\n * @since pcap4j 1.0.1\n */\npublic final class Ssh2KexDhReplyPacket extends AbstractPacket {\n\n  /**\n   *\n   */\n  private static final long serialVersionUID = 6507040765944406940L;\n\n  private final Ssh2KexDhReplyHeader header;\n\n  /**\n   * A static factory method.\n   * This method validates the arguments by {@link ByteArrays#validateBounds(byte[], int, int)},\n   * which may throw exceptions undocumented here.\n   *\n   * @param rawData rawData\n   * @param offset offset\n   * @param length length\n   * @return a new Ssh2KexDhReplyPacket object.\n   * @throws IllegalRawDataException if parsing the raw data fails.\n   */\n  public static Ssh2KexDhReplyPacket newPacket(\n    byte[] rawData, int offset, int length\n  ) throws IllegalRawDataException {\n    ByteArrays.validateBounds(rawData, offset, length);\n    return new Ssh2KexDhReplyPacket(rawData, offset, length);\n  }\n\n  private Ssh2KexDhReplyPacket(\n    byte[] rawData, int offset, int length\n  ) throws IllegalRawDataException {\n    this.header = new Ssh2KexDhReplyHeader(rawData, offset, length);\n  }\n\n  private Ssh2KexDhReplyPacket(Builder builder) {\n    if (\n         builder == null\n      || builder.k_s == null\n      || builder.f == null\n      || builder.signatureOfH == null\n    ) {\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"builder: \").append(builder)\n        .append(\" builder.k_s: \").append(builder.k_s)\n        .append(\" builder.f: \").append(builder.f)\n        .append(\" builder.signatureOfH: \").append(builder.signatureOfH);\n      throw new NullPointerException(sb.toString());\n    }\n\n    this.header = new Ssh2KexDhReplyHeader(builder);\n  }\n\n  @Override\n  public Ssh2KexDhReplyHeader getHeader() {\n    return header;\n  }\n\n  @Override\n  public Builder getBuilder() {\n    return new Builder(this);\n  }\n\n  /**\n   *\n   * @author Kaito Yamada\n   * @since pcap4j 1.0.1\n   */\n  public static final class Builder extends AbstractBuilder {\n\n    private Ssh2String k_s;\n    private Ssh2MpInt f;\n    private Ssh2String signatureOfH;\n\n    /**\n     *\n     */\n    public Builder() {}\n\n    private Builder(Ssh2KexDhReplyPacket packet) {\n      this.k_s = packet.header.k_s;\n      this.f = packet.header.f;\n      this.signatureOfH = packet.header.signatureOfH;\n    }\n\n    /**\n     *\n     * @param k_s k_s\n     * @return this Builder object for method chaining.\n     */\n    public Builder k_s(Ssh2String k_s) {\n      this.k_s = k_s;\n      return this;\n    }\n\n    /**\n     *\n     * @param f f\n     * @return this Builder object for method chaining.\n     */\n    public Builder f(Ssh2MpInt f) {\n      this.f = f;\n      return this;\n    }\n\n    /**\n     *\n     * @param signatureOfH signatureOfH\n     * @return this Builder object for method chaining.\n     */\n    public Builder signatureOfH(Ssh2String signatureOfH) {\n      this.signatureOfH = signatureOfH;\n      return this;\n    }\n\n    @Override\n    public Ssh2KexDhReplyPacket build() {\n      return new Ssh2KexDhReplyPacket(this);\n    }\n\n  }\n\n  /**\n   *\n   * @author Kaito Yamada\n   * @version pcap4j 1.0.1\n   */\n  public static final class Ssh2KexDhReplyHeader extends AbstractHeader {\n\n    /*\n     * http://tools.ietf.org/html/rfc4253\n     *\n     * byte      SSH_MSG_KEXDH_REPLY\n     * string    server public host key and certificates (K_S)\n     * mpint     f\n     * string    signature of H\n     */\n\n    /**\n     *\n     */\n    private static final long serialVersionUID = 4008432145902117221L;\n\n    private final Ssh2MessageNumber messageNumber = Ssh2MessageNumber.SSH_MSG_KEXDH_REPLY;\n    private final Ssh2String k_s;\n    private final Ssh2MpInt f;\n    private final Ssh2String signatureOfH;\n\n    private Ssh2KexDhReplyHeader(\n      byte[] rawData, int offset, int length\n    ) throws IllegalRawDataException {\n      if (length < 13) {\n        StringBuilder sb = new StringBuilder(80);\n        sb.append(\"The data is too short to build an SSH2 KEX DH reply header. data: \")\n          .append(new String(rawData))\n          .append(\", offset: \")\n          .append(offset)\n          .append(\", length: \")\n          .append(length);\n        throw new IllegalRawDataException(sb.toString());\n      }\n      if (\n        !Ssh2MessageNumber.getInstance(rawData[offset])\n          .equals(Ssh2MessageNumber.SSH_MSG_KEXDH_REPLY)\n      ) {\n        StringBuilder sb = new StringBuilder(120);\n        sb.append(\"The data is not an SSH2 KEX DH reply message. data: \")\n          .append(new String(rawData))\n          .append(\", offset: \")\n          .append(offset)\n          .append(\", length: \")\n          .append(length);\n        throw new IllegalRawDataException(sb.toString());\n      }\n\n      int currentOffset = 1 + offset;\n      int remainingLength = length - 1;\n      this.k_s = new Ssh2String(rawData, currentOffset, remainingLength);\n      currentOffset += k_s.length();\n      remainingLength -= k_s.length();\n      this.f = new Ssh2MpInt(rawData, currentOffset, remainingLength);\n      currentOffset += f.length();\n      remainingLength -= f.length();\n      this.signatureOfH = new Ssh2String(rawData, currentOffset, remainingLength);\n    }\n\n    private Ssh2KexDhReplyHeader(Builder builder) {\n      this.k_s = builder.k_s;\n      this.f = builder.f;\n      this.signatureOfH = builder.signatureOfH;\n    }\n\n    /**\n     *\n     * @return messageNumber\n     */\n    public Ssh2MessageNumber getMessageNumber() {\n      return messageNumber;\n    }\n\n    /**\n     *\n     * @return K_S\n     */\n    public Ssh2String getK_s() {\n      return k_s;\n    }\n\n    /**\n     *\n     * @return f\n     */\n    public Ssh2MpInt getF() {\n      return f;\n    }\n\n    /**\n     *\n     * @return signature of H\n     */\n    public Ssh2String getSignatureOfH() {\n      return signatureOfH;\n    }\n\n    @Override\n    protected List<byte[]> getRawFields() {\n      List<byte[]> rawFields = new ArrayList<byte[]>();\n      rawFields.add(new byte[] {messageNumber.value()});\n      rawFields.add(k_s.getRawData());\n      rawFields.add(f.getRawData());\n      rawFields.add(signatureOfH.getRawData());\n      return rawFields;\n    }\n\n    @Override\n    protected int calcLength() { return getRawData().length; }\n\n    @Override\n    protected String buildString() {\n      StringBuilder sb = new StringBuilder();\n      String ls = System.getProperty(\"line.separator\");\n\n      sb.append(\"[SSH2 KEX DH reply Header (\")\n        .append(length())\n        .append(\" bytes)]\")\n        .append(ls);\n      sb.append(\"  Message Number: \")\n        .append(messageNumber)\n        .append(ls);\n      sb.append(\"  K_S: \")\n        .append(k_s)\n        .append(ls);\n      sb.append(\"  f: \")\n        .append(f)\n        .append(ls);\n      sb.append(\"  signature of H: \")\n        .append(signatureOfH)\n        .append(ls);\n\n      return sb.toString();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      if (obj == this) { return true; }\n      if (!this.getClass().isInstance(obj)) { return false; }\n\n      Ssh2KexDhReplyHeader other = (Ssh2KexDhReplyHeader)obj;\n      return\n           k_s.equals(other.k_s)\n        && f.equals(other.f)\n        && signatureOfH.equals(other.signatureOfH);\n    }\n\n    @Override\n    protected int calcHashCode() {\n      int result = 17;\n      result = 31 * result + k_s.hashCode();\n      result = 31 * result + f.hashCode();\n      result = 31 * result + signatureOfH.hashCode();\n      return result;\n    }\n\n  }\n\n}\n","binary":"false","copies":"4","sample_repo_name":"kaitoy/pcap4j","sample_ref":"refs/heads/v1","sample_path":"pcap4j-core/src/main/java/org/pcap4j/packet/Ssh2KexDhReplyPacket.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5cc016414e67d12ee7d1f1bfa2f2abda7a6eae66","size":"5290","content":"package org.pcap4j.packet;\n\nimport static org.junit.Assert.*;\nimport java.net.Inet4Address;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.pcap4j.packet.IcmpV4TimestampReplyPacket.IcmpV4TimestampReplyHeader;\nimport org.pcap4j.packet.namednumber.EtherType;\nimport org.pcap4j.packet.namednumber.IcmpV4Code;\nimport org.pcap4j.packet.namednumber.IcmpV4Type;\nimport org.pcap4j.packet.namednumber.IpNumber;\nimport org.pcap4j.packet.namednumber.IpVersion;\nimport org.pcap4j.util.MacAddress;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@SuppressWarnings(\"javadoc\")\npublic class IcmpV4TimestampReplyPacketTest extends AbstractPacketTest {\n\n  private static final Logger logger\n    = LoggerFactory.getLogger(IcmpV4TimestampReplyPacketTest.class);\n\n  private final IcmpV4TimestampReplyPacket packet;\n  private final short identifier;\n  private final short sequenceNumber;\n  private final int originateTimestamp;\n  private final int receiveTimestamp;\n  private final int transmitTimestamp;\n\n  public IcmpV4TimestampReplyPacketTest() {\n    this.identifier = (short)1234;\n    this.sequenceNumber = (short)4321;\n    this.originateTimestamp = 10;\n    this.receiveTimestamp = 200;\n    this.transmitTimestamp = 3000;\n\n    IcmpV4TimestampReplyPacket.Builder b\n      = new IcmpV4TimestampReplyPacket.Builder();\n    b.identifier(identifier)\n     .sequenceNumber(sequenceNumber)\n     .originateTimestamp(originateTimestamp)\n     .receiveTimestamp(receiveTimestamp)\n     .transmitTimestamp(transmitTimestamp);\n    this.packet = b.build();\n  }\n\n  @Override\n  protected Packet getPacket() {\n    return packet;\n  }\n\n  @Override\n  protected Packet getWholePacket() throws UnknownHostException {\n    IcmpV4CommonPacket.Builder icmpV4b = new IcmpV4CommonPacket.Builder();\n    icmpV4b.type(IcmpV4Type.TIMESTAMP_REPLY)\n           .code(IcmpV4Code.NO_CODE)\n           .payloadBuilder(new SimpleBuilder(packet))\n           .correctChecksumAtBuild(true);\n\n    IpV4Packet.Builder ipv4b = new IpV4Packet.Builder();\n    ipv4b.version(IpVersion.IPV4)\n         .tos(IpV4Rfc1349Tos.newInstance((byte)0))\n         .identification((short)100)\n         .ttl((byte)100)\n         .protocol(IpNumber.ICMPV4)\n         .srcAddr(\n            (Inet4Address)InetAddress.getByAddress(\n              new byte[] { (byte)192, (byte)0, (byte)2, (byte)1 }\n            )\n          )\n        .dstAddr(\n           (Inet4Address)InetAddress.getByAddress(\n             new byte[] { (byte)192, (byte)0, (byte)2, (byte)2 }\n           )\n         )\n        .payloadBuilder(icmpV4b)\n        .correctChecksumAtBuild(true)\n        .correctLengthAtBuild(true);\n\n    EthernetPacket.Builder eb = new EthernetPacket.Builder();\n    eb.dstAddr(MacAddress.getByName(\"fe:00:00:00:00:02\"))\n      .srcAddr(MacAddress.getByName(\"fe:00:00:00:00:01\"))\n      .type(EtherType.IPV4)\n      .payloadBuilder(ipv4b)\n      .paddingAtBuild(true);\n    return eb.build();\n  }\n\n  @BeforeClass\n  public static void setUpBeforeClass() throws Exception {\n    logger.info(\n      \"########## \" + IcmpV4TimestampReplyPacketTest.class.getSimpleName() + \" START ##########\"\n    );\n  }\n\n  @AfterClass\n  public static void tearDownAfterClass() throws Exception {\n  }\n\n  @Test\n  public void testNewPacket() {\n    try {\n      IcmpV4TimestampReplyPacket p\n        = IcmpV4TimestampReplyPacket\n            .newPacket(packet.getRawData(), 0, packet.getRawData().length);\n      assertEquals(packet, p);\n    } catch (IllegalRawDataException e) {\n      throw new AssertionError(e);\n    }\n  }\n\n  @Test\n  public void testGetHeader() {\n    IcmpV4TimestampReplyHeader h = packet.getHeader();\n    assertEquals(identifier, h.getIdentifier());\n    assertEquals(sequenceNumber, h.getSequenceNumber());\n    assertEquals(originateTimestamp, h.getOriginateTimestamp());\n    assertEquals(receiveTimestamp, h.getReceiveTimestamp());\n    assertEquals(transmitTimestamp, h.getTransmitTimestamp());\n\n    IcmpV4TimestampReplyPacket.Builder b = packet.getBuilder();\n    IcmpV4TimestampReplyPacket p;\n\n    b.identifier((short)0);\n    b.sequenceNumber((short)0);\n    p = b.build();\n    assertEquals((short)0, (short)p.getHeader().getIdentifierAsInt());\n    assertEquals((short)0, (short)p.getHeader().getSequenceNumberAsInt());\n\n    b.identifier((short)10000);\n    b.sequenceNumber((short)10000);\n    p = b.build();\n    assertEquals((short)10000, (short)p.getHeader().getIdentifierAsInt());\n    assertEquals((short)10000, (short)p.getHeader().getSequenceNumberAsInt());\n\n    b.identifier((short)32767);\n    b.sequenceNumber((short)32767);\n    p = b.build();\n    assertEquals((short)32767, (short)p.getHeader().getIdentifierAsInt());\n    assertEquals((short)32767, (short)p.getHeader().getSequenceNumberAsInt());\n\n    b.identifier((short)-1);\n    b.sequenceNumber((short)-1);\n    p = b.build();\n    assertEquals((short)-1, (short)p.getHeader().getIdentifierAsInt());\n    assertEquals((short)-1, (short)p.getHeader().getSequenceNumberAsInt());\n\n    b.identifier((short)-32768);\n    b.sequenceNumber((short)-32768);\n    p = b.build();\n    assertEquals((short)-32768, (short)p.getHeader().getIdentifierAsInt());\n    assertEquals((short)-32768, (short)p.getHeader().getSequenceNumberAsInt());\n  }\n\n}\n","binary":"false","copies":"4","sample_repo_name":"kaitoy/pcap4j","sample_ref":"refs/heads/v1","sample_path":"pcap4j-packettest/src/test/java/org/pcap4j/packet/IcmpV4TimestampReplyPacketTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"fee79007abcda333c34c2547db658cbb2b6d43dc","size":"2535","content":"package butterknife;\n\nimport com.google.testing.compile.JavaFileObjects;\n\nimport org.junit.Test;\n\nimport javax.tools.JavaFileObject;\n\nimport butterknife.compiler.ButterKnifeProcessor;\n\nimport static com.google.common.truth.Truth.assertAbout;\nimport static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;\n\npublic class BindIntTest {\n  @Test public void simple() {\n    JavaFileObject source = JavaFileObjects.forSourceString(\"test.Test\", \"\"\n        + \"package test;\\n\"\n        + \"import android.app.Activity;\\n\"\n        + \"import butterknife.BindInt;\\n\"\n        + \"public class Test extends Activity {\\n\"\n        + \"  @BindInt(B.integer.one) int one;\\n\"\n        + \"}\"\n    );\n\n    JavaFileObject expectedSource = JavaFileObjects.forSourceString(\"test/Test$$ViewBinder\", \"\"\n        + \"package test;\\n\"\n        + \"import android.content.res.Resources;\\n\"\n        + \"import butterknife.Unbinder;\\n\"\n        + \"import butterknife.internal.Finder;\\n\"\n        + \"import butterknife.internal.ViewBinder;\\n\"\n        + \"import java.lang.Object;\\n\"\n        + \"import java.lang.Override;\\n\"\n        + \"import java.lang.SuppressWarnings;\\n\"\n        + \"public class Test$$ViewBinder<T extends Test> implements ViewBinder<T> {\\n\"\n        + \"  @Override\\n\"\n        + \"  public Unbinder bind(Finder finder, T target, Object source) {\\n\"\n        + \"    Resources res = finder.getContext(source).getResources();\\n\"\n        + \"    bindToTarget(target, res);\\n\"\n        + \"    return Unbinder.EMPTY;\\n\"\n        + \"  }\\n\"\n        + \"  @SuppressWarnings(\\\"ResourceType\\\")\\n\"\n        + \"  protected static void bindToTarget(Test target, Resources res) {\\n\"\n        + \"    target.one = res.getInteger(test.R.integer.one);\\n\"\n        + \"  }\\n\"\n        + \"}\"\n    );\n\n    assertAbout(javaSource()).that(source)\n        .processedWith(new ButterKnifeProcessor())\n        .compilesWithoutError()\n        .and()\n        .generatesSources(expectedSource);\n  }\n\n  @Test public void typeMustBeInt() {\n    JavaFileObject source = JavaFileObjects.forSourceString(\"test.Test\", \"\"\n        + \"package test;\\n\"\n        + \"import android.app.Activity;\\n\"\n        + \"import butterknife.BindInt;\\n\"\n        + \"public class Test extends Activity {\\n\"\n        + \"  @BindInt(B.integer.one) String one;\\n\"\n        + \"}\"\n    );\n\n    assertAbout(javaSource()).that(source)\n        .processedWith(new ButterKnifeProcessor())\n        .failsToCompile()\n        .withErrorContaining(\"@BindInt field type must be 'int'. (test.Test.one)\")\n        .in(source).onLine(5);\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"oguzbabaoglu/butterfork","sample_ref":"refs/heads/v2","sample_path":"butterfork-compiler/src/test/java/butterknife/BindIntTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9cdc825306d52a8f218f2fb583e943bf42ad6f2e","size":"3613","content":"/**\n * Copyright (c) 2002-2016 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.neo4j.driver.internal.summary;\n\nimport org.junit.Test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.neo4j.driver.internal.value.IntegerValue;\nimport org.neo4j.driver.internal.value.ListValue;\nimport org.neo4j.driver.internal.value.MapValue;\nimport org.neo4j.driver.internal.value.StringValue;\nimport org.neo4j.driver.v1.summary.ProfiledPlan;\nimport org.neo4j.driver.v1.Value;\n\nimport static java.util.Arrays.asList;\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.CoreMatchers.hasItem;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.contains;\nimport static org.hamcrest.Matchers.empty;\n\npublic class InternalProfiledPlanTest\n{\n\n    @Test\n    public void shouldHandlePlanWithNoChildren()\n    {\n        // GIVEN\n        Value value = new MapValue( createPlanMap() );\n\n        // WHEN\n        ProfiledPlan plan = InternalProfiledPlan.PROFILED_PLAN_FROM_VALUE.apply( value );\n\n        // THEN\n        assertThat( plan.dbHits(), equalTo( 42L ) );\n        assertThat( plan.records(), equalTo( 1337L ) );\n        assertThat( plan.operatorType(), equalTo( \"AwesomeOperator\" ) );\n        assertThat( plan.identifiers(), equalTo( asList( \"n1\", \"n2\" ) ) );\n        assertThat( plan.arguments().values(), hasItem( new StringValue( \"CYPHER 1337\" ) ) );\n        assertThat( plan.children(), empty() );\n    }\n\n    @Test\n    public void shouldHandlePlanWithChildren()\n    {\n        // GIVEN\n        Map<String,Value> planMap = createPlanMap();\n        planMap.put( \"children\", new ListValue( new MapValue( createPlanMap() ), new MapValue( createPlanMap() ) ) );\n        Value value = new MapValue( planMap );\n\n        // WHEN\n        ProfiledPlan plan = InternalProfiledPlan.PROFILED_PLAN_FROM_VALUE.apply( value );\n\n        // THEN\n        for ( ProfiledPlan child : plan.children() )\n        {\n            assertThat( child.dbHits(), equalTo( 42L ) );\n            assertThat( child.records(), equalTo( 1337L ) );\n            assertThat( child.operatorType(), equalTo( \"AwesomeOperator\" ) );\n            assertThat( child.identifiers(), equalTo( asList( \"n1\", \"n2\" ) ) );\n            assertThat( child.arguments().values(), hasItem( new StringValue( \"CYPHER 1337\" ) ) );\n            assertThat( child.children(), empty() );\n        }\n    }\n\n    private Map<String,Value> createPlanMap()\n    {\n        Map<String,Value> map = new HashMap<>();\n        map.put( \"operatorType\", new StringValue( \"AwesomeOperator\" ) );\n        map.put( \"rows\", new IntegerValue( 1337L ) );\n        map.put( \"dbHits\", new IntegerValue( 42 ) );\n        map.put( \"identifiers\", new ListValue( new StringValue( \"n1\" ), new StringValue( \"n2\" ) ) );\n        Map<String,Value> args = new HashMap<>();\n        args.put( \"version\", new StringValue( \"CYPHER 1337\" ) );\n        map.put( \"args\", new MapValue( args ) );\n        return map;\n    }\n\n\n}\n","binary":"false","copies":"1","sample_repo_name":"neo4j/neo4j-java-driver","sample_ref":"refs/heads/1.1","sample_path":"driver/src/test/java/org/neo4j/driver/internal/summary/InternalProfiledPlanTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7752471428bccd94bb50b3689d7ce11011c2e266","size":"1045","content":"/**\n * Copyright (c) 2002-2016 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *\n * This file is part of Neo4j.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.neo4j.driver.v1.util;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Lists\n{\n\n    public static <T> List<T> asList( Iterable<T> iterable )\n    {\n        List<T> list = new ArrayList<>();\n        for ( T item : iterable )\n        {\n            list.add( item );\n        }\n        return list;\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"neo4j/neo4j-java-driver","sample_ref":"refs/heads/1.1","sample_path":"driver/src/test/java/org/neo4j/driver/v1/util/Lists.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"77cc930ab1b25367ccdd3f4a6438052eaa0ecf59","size":"392","content":"package de.lessvoid.nifty.examples.lwjgl.scroll;\n\nimport de.lessvoid.nifty.examples.lwjgl.NiftyExampleLoaderLWJGL;\nimport de.lessvoid.nifty.examples.scroll.ScrollDemoStartScreen;\n\n/**\n * @author Aaron Mahan &lt;aaron@forerunnergames.com&gt;\n */\npublic class ScrollDemoMain {\n  public static void main(final String[] args) {\n    NiftyExampleLoaderLWJGL.run(new ScrollDemoStartScreen());\n  }\n}\n","binary":"false","copies":"7","sample_repo_name":"nifty-gui/nifty-gui","sample_ref":"refs/heads/1.4","sample_path":"nifty-examples-lwjgl/src/main/java/de/lessvoid/nifty/examples/lwjgl/scroll/ScrollDemoMain.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"15a54aa8cad83a30697e1710b67da0abe2d440b7","size":"355","content":"package de.lessvoid.nifty.render.io;\n\nimport javax.annotation.Nonnull;\n\n/**\n * @author Aaron Mahan &lt;aaron@forerunnergames.com&gt;\n */\npublic class ImageLoaderFactory {\n  public static ImageLoader createImageLoader(@Nonnull final String imageFilename) {\n    return imageFilename.endsWith(\".tga\") ? new TGAImageLoader() : new DefaultImageLoader();\n  }\n}\n","binary":"false","copies":"9","sample_repo_name":"nifty-gui/nifty-gui","sample_ref":"refs/heads/1.4","sample_path":"nifty-core/src/main/java/de/lessvoid/nifty/render/io/ImageLoaderFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"697c390ee96b3e89bddc8b523b50ad0096272854","size":"5248","content":"/*\n * Copyright (c) 2013, OpenCloudDB/MyCAT and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software;Designed and Developed mainly by many Chinese\n * opensource volunteers. you can redistribute it and/or modify it under the\n * terms of the GNU General Public License version 2 only, as published by the\n * Free Software Foundation.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Any questions about this component can be directed to it's project Web address\n * https://code.google.com/p/opencloudb/.\n *\n */\npackage io.mycat.config.model;\n\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport io.mycat.backend.datasource.PhysicalDBPool;\n\n/**\n * Datahost is a group of DB servers which is synchronized with each other\n *\n * @author wuzhih\n *\n */\npublic class DataHostConfig {\n\tpublic static final int NOT_SWITCH_DS = -1;\n\tpublic static final int DEFAULT_SWITCH_DS = 1;\n\tpublic static final int SYN_STATUS_SWITCH_DS = 2;\n\tpublic static final int CLUSTER_STATUS_SWITCH_DS = 3;\n    private static final Pattern pattern = Pattern.compile(\"\\\\s*show\\\\s+slave\\\\s+status\\\\s*\",Pattern.CASE_INSENSITIVE);\n    private static final Pattern patternCluster = Pattern.compile(\"\\\\s*show\\\\s+status\\\\s+like\\\\s+'wsrep%'\",Pattern.CASE_INSENSITIVE);\n\tprivate String name;\n\tprivate int maxCon = SystemConfig.DEFAULT_POOL_SIZE;\n\tprivate int minCon = 10;\n\tprivate int balance = PhysicalDBPool.BALANCE_NONE;\n\tprivate int writeType = PhysicalDBPool.WRITE_ONLYONE_NODE;\n\tprivate final String dbType;\n\tprivate final String dbDriver;\n\tprivate final DBHostConfig[] writeHosts;\n\tprivate final Map<Integer, DBHostConfig[]> readHosts;\n\tprivate String hearbeatSQL;\n    private boolean isShowSlaveSql=false;\n    private boolean isShowClusterSql=false;\n\tprivate String connectionInitSql;\n    private int slaveThreshold = -1;\n\tprivate final int switchType;\n\tprivate String filters=\"mergeStat\";\n\tprivate long logTime=300000;\n\tprivate boolean tempReadHostAvailable = false;  //\u5982\u679c\u5199\u670d\u52a1\u6302\u6389, \u4e34\u65f6\u8bfb\u670d\u52a1\u662f\u5426\u7ee7\u7eed\u53ef\u7528\n\n\tpublic DataHostConfig(String name, String dbType, String dbDriver,\n\t\t\tDBHostConfig[] writeHosts, Map<Integer, DBHostConfig[]> readHosts,int switchType,int slaveThreshold, boolean tempReadHostAvailable) {\n\t\tsuper();\n\t\tthis.name = name;\n\t\tthis.dbType = dbType;\n\t\tthis.dbDriver = dbDriver;\n\t\tthis.writeHosts = writeHosts;\n\t\tthis.readHosts = readHosts;\n\t\tthis.switchType=switchType;\n\t\tthis.slaveThreshold=slaveThreshold;\n\t\tthis.tempReadHostAvailable = tempReadHostAvailable;\n\t}\n\t\n\tpublic boolean isTempReadHostAvailable() {\n\t\treturn this.tempReadHostAvailable;\n\t}\n\n\tpublic int getSlaveThreshold() {\n\t\treturn slaveThreshold;\n\t}\n\n\tpublic void setSlaveThreshold(int slaveThreshold) {\n\t\tthis.slaveThreshold = slaveThreshold;\n\t}\n\n\tpublic int getSwitchType() {\n\t\treturn switchType;\n\t}\n\n\tpublic String getConnectionInitSql()\n\t{\n\t\treturn connectionInitSql;\n\t}\n\n\tpublic void setConnectionInitSql(String connectionInitSql)\n\t{\n\t\tthis.connectionInitSql = connectionInitSql;\n\t}\n\n\tpublic int getWriteType() {\n\t\treturn writeType;\n\t}\n\n\tpublic void setWriteType(int writeType) {\n\t\tthis.writeType = writeType;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n    public boolean isShowSlaveSql()\n    {\n        return isShowSlaveSql;\n    }\n\n    public int getMaxCon() {\n\t\treturn maxCon;\n\t}\n\n\tpublic void setMaxCon(int maxCon) {\n\t\tthis.maxCon = maxCon;\n\t}\n\n\tpublic int getMinCon() {\n\t\treturn minCon;\n\t}\n\n\tpublic void setMinCon(int minCon) {\n\t\tthis.minCon = minCon;\n\t}\n\n\tpublic int getBalance() {\n\t\treturn balance;\n\t}\n\n\tpublic void setBalance(int balance) {\n\t\tthis.balance = balance;\n\t}\n\n\tpublic String getDbType() {\n\t\treturn dbType;\n\t}\n\n\tpublic String getDbDriver() {\n\t\treturn dbDriver;\n\t}\n\n\tpublic DBHostConfig[] getWriteHosts() {\n\t\treturn writeHosts;\n\t}\n\n\tpublic Map<Integer, DBHostConfig[]> getReadHosts() {\n\t\treturn readHosts;\n\t}\n\n\tpublic String getHearbeatSQL() {\n\t\treturn hearbeatSQL;\n\t}\n\n\tpublic void setHearbeatSQL(String heartbeatSQL) {\n\t\tthis.hearbeatSQL = heartbeatSQL;\n        Matcher matcher = pattern.matcher(heartbeatSQL);\n        if (matcher.find())\n        {\n            isShowSlaveSql=true;\n        }\n        Matcher matcher2 = patternCluster.matcher(heartbeatSQL);\n        if (matcher2.find())\n        {\n        \tisShowClusterSql=true;\n        }\n\t}\n\n\tpublic String getFilters() {\n\t\treturn filters;\n\t}\n\n\tpublic void setFilters(String filters) {\n\t\tthis.filters = filters;\n\t}\n\n\tpublic long getLogTime() {\n\t\treturn logTime;\n\t}\n\n\tpublic boolean isShowClusterSql() {\n\t\treturn this.isShowClusterSql;\n\t}\n\n\tpublic void setLogTime(long logTime) {\n\t\tthis.logTime = logTime;\n\t}\n}","binary":"false","copies":"1","sample_repo_name":"MyCATApache/Mycat-Server","sample_ref":"refs/heads/1.6","sample_path":"src/main/java/io/mycat/config/model/DataHostConfig.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1f9e3dcfaa431e85dd9c75ecd24ff788d2f4d65c","size":"21040","content":"package train.common.api;\n\nimport buildcraft.api.tools.IToolWrench;\nimport cpw.mods.fml.common.FMLCommonHandler;\nimport mods.railcraft.api.carts.IMinecart;\nimport mods.railcraft.api.carts.IRoutableCart;\nimport net.minecraft.entity.item.EntityMinecart;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.entity.player.EntityPlayerMP;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.nbt.NBTTagCompound;\nimport net.minecraft.server.MinecraftServer;\nimport net.minecraft.util.ChatComponentText;\nimport net.minecraft.util.DamageSource;\nimport net.minecraft.world.ChunkCoordIntPair;\nimport net.minecraft.world.World;\nimport net.minecraftforge.common.ForgeChunkManager;\nimport net.minecraftforge.common.ForgeChunkManager.Ticket;\nimport net.minecraftforge.common.ForgeChunkManager.Type;\nimport train.common.Traincraft;\nimport train.common.core.handlers.*;\nimport train.common.core.network.PacketSetTrainLockedToClient;\nimport train.common.items.ItemChunkLoaderActivator;\nimport train.common.items.ItemRollingStock;\nimport train.common.library.EnumTrains;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic abstract class AbstractTrains extends EntityMinecart implements IMinecart, IRoutableCart {\n\n\t/**\n\t * The color of the current rollingstock -1 if default\n\t */\n\tprotected int color;\n\t/** Railcraft integration */\n\tprivate float trainSpeed = 1.2f;\n\tpublic boolean isAttached = false;\n\tpublic boolean isAttaching = false;\n\tpublic int ID;\n\tpublic static int numberOfTrains;\n\tpublic EntityPlayer playerEntity;\n\tpublic double Link1;\n\tpublic double Link2;\n\tprotected boolean linked = false;\n\tpublic EntityRollingStock cartLinked1;\n\tpublic EntityRollingStock cartLinked2;\n\tpublic int clearLinkTimer = 0;\n\t//private Set chunks;\n\tprivate Ticket chunkTicket;\n\tprivate boolean chunkLoadErrorDisplayed = false;\n\tprivate boolean chunkLoadMsgDisplayed = false;\n\tprotected float renderYaw;\n\tprotected float renderPitch;\n\tpublic TrainHandler train;\n\tprotected int oldChunkCoordX;\n\tprotected int oldChunkCoordZ;\n\tprivate ArrayList<ChunkCoordIntPair> oldChunks = new ArrayList<ChunkCoordIntPair>();\n\tprivate boolean chunkForced = false;\n\tpublic boolean shouldChunkLoad = true;\n\t/**\n\t * A reference to EnumTrains containing all spec for this specific train\n\t */\n\tprotected EnumTrains trainSpec;\n\n\t/**\n\t * The name of the train based on the item name\n\t */\n\tpublic String trainName = \"\";\n\tpublic double accelerate = 0.7D;\n\tpublic double brake = 0.96D;\n\t/**\n\t * determines the mass of the carts from 0 to 10 it's then multiplied by 10\n\t * to pretend this is [tons]\n\t */\n\tpublic double mass = 1;\n\t/**\n\t * the default mass, not affected by weight of items/liquids\n\t */\n\tpublic double defaultMass = 1;\n\t/**\n\t * the power of locomotives, 0 for carts\n\t */\n\tpublic int power = 0;\n\t/**\n\t * Whether this train is locked and can only be used by the Owner\n\t */\n\tpublic boolean locked = false;\n\t/**\n\t * The owner of the train: The user who spawned it\n\t */\n\tpublic String trainOwner = \"\";\n\n\tpublic String getTrainOwner() {\n\t\treturn trainOwner;\n\t}\n\n\tpublic void setTrainOwner(String trainOwner) {\n\t\tthis.trainOwner = trainOwner;\n\t}\n\n\t/**\n\t * The creator of the train\n\t */\n\tpublic String trainCreator = \"\";\n\n\t/**\n\t * The type of the train: steam tender diesel electric freight flat tank\n\t * passenger work special\n\t */\n\tpublic String trainType = \"\";\n\n\t/**\n\t * player who destroyed the train\n\t */\n\tprotected String trainDestroyer = \"\";\n\n\t/**\n\t * unique ID for a train. ID is create when item is created. This allows to\n\t * track a train not only in his entity form\n\t */\n\tpublic int uniqueID = -1;\n\t/**\n\t * supposed to store the last ID given;\n\t */\n\tpublic static int uniqueIDs = 1;\n\n\t/**\n\t * The distance this train has traveled\n\t */\n\tpublic double trainDistanceTraveled = 0;\n\n\tpublic String destination = \"\";\n\n\t/**\n\t * Registers all possible color textures\n\t */\n\tpublic ArrayList<Integer> acceptedColors;\n\n\tprotected RollingStockStatsEventHandler statsEventHandler;\n\n\tpublic AbstractTrains(World world) {\n\t\tsuper(world);\n\t\trenderDistanceWeight = 2.0D;\n\t\tstatsEventHandler = new RollingStockStatsEventHandler(this);\n\t\tcolor = -1;\n\t\tdataWatcher.addObject(12, color);\n\t\tacceptedColors = new ArrayList();\n\t\tif (!world.isRemote) ID = ++numberOfTrains;\n\t\tdataWatcher.addObject(5, ID);\n\t\tdataWatcher.addObject(6, trainType);\n\t\tdataWatcher.addObject(7, trainOwner);\n\t\tdataWatcher.addObject(8, trainDestroyer);\n\t\tdataWatcher.addObject(9, trainName);\n\t\tdataWatcher.addObject(10, numberOfTrains);\n\t\tdataWatcher.addObject(11, uniqueID);\n\t\tdataWatcher.addObject(13, trainCreator);\n\t\tif(!ConfigHandler.CHUNK_LOADING)shouldChunkLoad=false;\n\t\tthis.setFlag(7, shouldChunkLoad);\n\t\t\n\t\tfor (EnumTrains trains : EnumTrains.values()) {\n\t\t\tif (trains.getEntityClass().equals(this.getClass())) {\n\t\t\t\tthis.setDefaultMass(trains.getMass());\n\t\t\t\ttrainSpec = trains;\n\t\t\t\tif (trains.getColors() != null) {\n\t\t\t\t\tfor (int i = 0; i < trains.getColors().length; i++) {\n\t\t\t\t\t\tthis.acceptedColors.add(this.getColorFromString(trains.getColors()[i]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.setSize((float) trainSpec.getWidth(), (float) trainSpec.getHeight());\n\t\t\t\tthis.setMinecartName(trainSpec.name());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic AbstractTrains(World world, double x, double y, double z){\n\t\tthis(world);\n\t\tthis.setPosition(x, y, z);\n\t}\n\n\tpublic abstract boolean isLocomotive();\n\n\tpublic abstract boolean isPassenger();\n\n\tpublic abstract boolean isFreightCart();\n\n\tpublic abstract boolean isFreightOrPassenger();\n\n\tpublic abstract boolean isBuilder();\n\n\tpublic abstract boolean isTender();\n\n\tpublic abstract boolean isWorkCart();\n\n\tpublic abstract boolean isElectricTrain();\n\n\tpublic abstract boolean isLinked();\n\n\tprotected abstract boolean canOverheat();\n\n\tprotected abstract int getOverheatTime();\n\n\tpublic abstract float getLinkageDistance(EntityMinecart cart);\n\n\t//public abstract int getID();\n\n\tpublic abstract boolean canBeAdjusted(EntityMinecart cart2);\n\n\tpublic abstract float getOptimalDistance(EntityMinecart cart2);\n\n\tpublic abstract List<ItemStack> getItemsDropped();\n\t\n\tpublic int getUniqueTrainID(){\n\t\treturn uniqueID;\n\t}\n\n\t@Override\n\tpublic void onUpdate() {\n\t\tsuper.onUpdate();\n\t\t//if(this instanceof Locomotive)System.out.println(\"I'm alive. Remote: \" + worldObj.isRemote);\n\t\tif (!worldObj.isRemote && this.uniqueID == -1) {\n\t\t\tif (FMLCommonHandler.instance().getMinecraftServerInstance() != null) {\n\t\t\t\tTraincraftSaveHandler.createFile(FMLCommonHandler.instance().getMinecraftServerInstance());\n\t\t\t\tint readID = TraincraftSaveHandler.readInt(FMLCommonHandler.instance().getMinecraftServerInstance(), \"numberOfTrains:\");\n\t\t\t\tint newID = setNewUniqueID(readID);\n\t\t\t\tTraincraftSaveHandler.writeValue(FMLCommonHandler.instance().getMinecraftServerInstance(), \"numberOfTrains:\", \"\" + newID);\n\t\t\t\tstatsEventHandler.trainPlace(newID, this.trainName, this.trainType, this.trainOwner, this.trainOwner, (int) posX + \";\" + (int) posY + \";\" + (int) posZ);\n\t\t\t\t//System.out.println(\"Train is missing an ID, adding new one for \"+this.trainName+\" \"+this.uniqueID);\n\t\t\t}\n\t\t}\n\t\tshouldChunkLoad = getFlag(7);\n\t\tstatsEventHandler.trainDistance();\n\t\tif (shouldChunkLoad){\n\t\t\tif (!worldObj.isRemote) {\n\t\t\t\tif (chunkTicket == null) {\n\t\t\t\t\tchunkTicket = ForgeChunkManager.requestTicket(Traincraft.instance, worldObj, Type.NORMAL);\n\t\t\t\t\tchunkForced = false;\n\t\t\t\t}\n\t\t\t\tif (chunkTicket == null) {\n\t\t\t\t\tif (playerEntity != null && !this.chunkLoadErrorDisplayed) {\n\t\t\t\t\t\tchunkLoadErrorDisplayed = true;\n\t\t\t\t\t\tFMLCommonHandler.instance().getMinecraftServerInstance().getConfigurationManager().sendChatMsg(new ChatComponentText(String.format(\"[TRAINCRAFT] The locomotive at %d, %d, %d will not load chunk because there are no more chunkloaders available\", (int)posX, (int)posY, (int)posZ)));\n\t\t\t\t\t}\n\t\t\t\t\tchunkForced = false;\n\t\t\t\t}\n\t\t\t\telse if(!chunkForced){\n\t\t\t\t\tchunkTicket.getModData().setInteger(\"locoID\", this.ID);\n\t\t\t\t\tForgeChunkManager.forceChunk(chunkTicket, new ChunkCoordIntPair((int) posX >> 4, (int) posZ >> 4));\n\t\t\t\t\tforceChunkLoading(chunkTicket);\n\t\t\t\t\tchunkForced = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/*\n\t\t * if (worldObj.isRemote) { if (this.getFlag(6)) { if (this.chunks !=\n\t\t * null) { Iterator var3 = this.chunks.iterator(); while\n\t\t * (var3.hasNext()) { ChunkCoordIntPair var4 = (ChunkCoordIntPair)\n\t\t * var3.next(); int x = var4.getCenterXPos(); int z =\n\t\t * var4.getCenterZPosition();\n\t\t * this.worldObj.spawnParticle(\"mobSpellAmbient\", x, posY, z, 0, 0, 0);\n\t\t * for (int i = 0; i < 10; i++) { this.worldObj.spawnParticle(\"portal\",\n\t\t * x + (this.rand.nextDouble() - 0.5D) * (double) 8, this.posY +\n\t\t * this.rand.nextDouble() * (double) 6 - 0.25D, z +\n\t\t * (this.rand.nextDouble() - 0.5D) * (double) 8, (this.rand.nextDouble()\n\t\t * - 0.5D) * 2.0D, -this.rand.nextDouble(), (this.rand.nextDouble() -\n\t\t * 0.5D) * 2.0D); } } } else { this.setupChunks(this.chunkCoordX,\n\t\t * this.chunkCoordZ); } } } else if (!ConfigHandler.CHUNK_LOADING) {\n\t\t * this.releaseTicket(); } else { if (this.ticket == null) {\n\t\t * this.requestTicket(); } }\n\t\t */\n\t}\n\t@Override\n\tpublic void setDead() {\n\t\tForgeChunkManager.releaseTicket(chunkTicket);\n\t}\n\t\n\tpublic Ticket getChunkTicket(){\n\t\treturn this.chunkTicket;\n\t}\n\t\n\tpublic void forceChunkLoading(Ticket ticket) {\n\t\tif (chunkTicket == null) {\n\t\t\tchunkTicket = ticket;\n\t\t}\n\t\t\n\t\t//System.out.println(\"chunk \" + this);\n\t\tArrayList<ChunkCoordIntPair> chunks = new ArrayList<ChunkCoordIntPair>();\n\t\tChunkCoordIntPair locoChunk = new ChunkCoordIntPair((int)chunkCoordX, (int)chunkCoordZ);\n\t\tchunks.add(locoChunk);\n\t\tForgeChunkManager.forceChunk(ticket, locoChunk);\n\t\t\n\t\tChunkCoordIntPair oldChunk = new ChunkCoordIntPair(oldChunkCoordX, oldChunkCoordZ);\n\t\toldChunks.add(oldChunk);\n\t\t\n\t\tfor (int i = 0; i < oldChunks.size(); i++) {\n\t\t\tForgeChunkManager.unforceChunk(chunkTicket, oldChunks.get(i));\n\t\t\toldChunks.clear();\n\t\t}\n\t\t\n\t\tif (train != null && train.getTrains().size() > 1 && this instanceof Locomotive) {\n\t\t\tfor (int i = 0; i < train.getTrains().size(); i++) {\n\t\t\t\tif (train.getTrains().get(i) != null && !train.getTrains().get(i).equals(this)){\n\t\t\t\t\tint pX = (int)train.getTrains().get(i).chunkCoordX;\n\t\t\t\t\tint pZ = (int)train.getTrains().get(i).chunkCoordZ;\n\t\t\t\t\tint oldPX = (int)train.getTrains().get(i).oldChunkCoordX;\n\t\t\t\t\tint oldPZ = (int)train.getTrains().get(i).oldChunkCoordZ;\n\t\t\t\t\tChunkCoordIntPair chunk = new ChunkCoordIntPair(pX, pZ);\n\t\t\t\t\tForgeChunkManager.forceChunk(ticket, chunk);\n\t\t\t\t\tchunks.add(chunk);\n\t\t\t\t\tChunkCoordIntPair oldChunkRemote = new ChunkCoordIntPair(oldPX, oldPZ);\n\t\t\t\t\toldChunks.add(oldChunkRemote);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.playerEntity != null && !this.chunkLoadMsgDisplayed) {\n\t\t\tthis.chunkLoadMsgDisplayed = true;\n\t\t\tFMLCommonHandler.instance().getMinecraftServerInstance().getConfigurationManager().sendChatMsg(new ChatComponentText(String.format(\"[TRAINCRAFT] The locomotive at %d %d %d will keep chunks loaded for herself and %d carts\", (int)posX, (int)posY, (int)posZ, chunks.size()-1)));\n\t\t}\n\t\toldChunkCoordX = this.chunkCoordX;\n\t\toldChunkCoordZ = this.chunkCoordZ;\n\t}\n\tpublic int setNewUniqueID(int numberOfTrains) {\n\t\tif (numberOfTrains <= 0) {\n\t\t\tnumberOfTrains = uniqueIDs++;\n\t\t}\n\t\telse {\n\t\t\tuniqueIDs = numberOfTrains++;\n\t\t}\n\t\tthis.uniqueID = numberOfTrains;\n\t\tgetEntityData().setInteger(\"uniqueID\", numberOfTrains);\n\t\t//System.out.println(\"setting new ID \"+uniqueID);\n\t\treturn numberOfTrains;\n\t}\n\n\t@Override\n\tpublic boolean interactFirst(EntityPlayer entityplayer) {\n\t\tItemStack itemstack = entityplayer.inventory.getCurrentItem();\n\t\tif (!worldObj.isRemote && ConfigHandler.CHUNK_LOADING && (this instanceof Locomotive) ) {\n\t\t\tif (itemstack != null && itemstack.getItem() instanceof ItemChunkLoaderActivator) {\n\t\t\t\tthis.playerEntity = entityplayer;\n\t\t\t\tif (getFlag(7)) {\n\t\t\t\t\tthis.setFlag(7, false);\n\t\t\t\t\tentityplayer.addChatMessage(new ChatComponentText(\"Stop loading chunks\"));\n\t\t\t\t\tForgeChunkManager.releaseTicket(chunkTicket);\n\t\t\t\t\tchunkForced = false;\n\t\t\t\t\tchunkTicket = null;\n\t\t\t\t}\n\t\t\t\telse if (!getFlag(7)) {\n\t\t\t\t\tthis.setFlag(7, true);\n\t\t\t\t\tentityplayer.addChatMessage(new ChatComponentText(\"Start loading chunks\"));\n\t\t\t\t}\n\t\t\t\titemstack.damageItem(1, entityplayer);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * set the color of the rollingstock\n\t * \n\t * @see ItemRollingStock\n\t * @param color\n\t */\n\tpublic void setColor(int color) {\n\t\tdataWatcher.updateObject(12, color);\n\t}\n\n\tpublic void setRenderYaw(float yaw) {\n\t\tthis.renderYaw = yaw;\n\t}\n\n\tpublic void setRenderPitch(float pitch) {\n\t\tthis.renderPitch = pitch;\n\t}\n\n\tpublic int getColor() {\n\t\treturn dataWatcher.getWatchableObjectInt(12);\n\t}\n\n\t@Override\n\tprotected void writeEntityToNBT(NBTTagCompound nbttagcompound) {\n\t\t//super.writeEntityToNBT(nbttagcompound);\n\t\tnbttagcompound.setInteger(\"color\", getColor());\n\t\tnbttagcompound.setBoolean(\"chunkLoadingState\", getFlag(7));\n\t\tnbttagcompound.setDouble(\"trainDistanceTraveled\", trainDistanceTraveled);\n\t\tnbttagcompound.setString(\"theOwner\", trainOwner);\n\t\tnbttagcompound.setBoolean(\"Locked\", locked);\n\t\tnbttagcompound.setString(\"theCreator\", trainCreator);\n\t\tnbttagcompound.setString(\"theName\", trainName);\n\t\tnbttagcompound.setString(\"theType\", trainType);\n\t\tnbttagcompound.setInteger(\"uniqueID\", uniqueID);\n\t\t//nbttagcompound.setInteger(\"uniqueIDs\",uniqueIDs);\n\t\t\n\t\tnbttagcompound.setInteger(\"numberOfTrains\", this.numberOfTrains);\n\t\tnbttagcompound.setInteger(\"ID\", this.ID);\n\t\tnbttagcompound.setBoolean(\"isAttached\", this.isAttached);\n\t\tnbttagcompound.setBoolean(\"linked\", this.linked);\n\t\tnbttagcompound.setDouble(\"motionX\", motionX);\n\t\tnbttagcompound.setDouble(\"motionZ\", motionZ);\n\t\tnbttagcompound.setDouble(\"Link1\", Link1);\n\t\tnbttagcompound.setDouble(\"Link2\", Link2);\n\t}\n\n\t@Override\n\tprotected void readEntityFromNBT(NBTTagCompound nbttagcompound) {\n\t\t//super.readEntityFromNBT(nbttagcompound);\n\t\tsetColor(nbttagcompound.getInteger(\"color\"));\n\t\tsetFlag(7, nbttagcompound.getBoolean(\"chunkLoadingState\"));\n\t\ttrainDistanceTraveled = nbttagcompound.getDouble(\"trainDistanceTraveled\");\n\t\ttrainOwner = nbttagcompound.getString(\"theOwner\");\n\t\tlocked = nbttagcompound.getBoolean(\"Locked\");\n\t\tsetFlag(8, locked);\n\t\ttrainCreator = nbttagcompound.getString(\"theCreator\");\n\t\ttrainName = nbttagcompound.getString(\"theName\");\n\t\ttrainType = nbttagcompound.getString(\"theType\");\n\t\tuniqueID = nbttagcompound.getInteger(\"uniqueID\");\n\t\t//uniqueIDs = nbttagcompound.getInteger(\"uniqueIDs\");\n\t\t((EntityRollingStock) this).setInformation(trainType, trainOwner, trainCreator, trainName, uniqueID);\n\t\t\n\t\tID = nbttagcompound.getInteger(\"ID\");\n\t\tnumberOfTrains = nbttagcompound.getInteger(\"numberOfTrains\");\n\t\tisAttached = nbttagcompound.getBoolean(\"isAttached\");\n\t\tlinked = nbttagcompound.getBoolean(\"linked\");\n\t\t//motionX = nbttagcompound.getDouble(\"motionX\");\n\t\t//motionZ = nbttagcompound.getDouble(\"motionZ\");\n\t\tLink1 = nbttagcompound.getDouble(\"Link1\");\n\t\tLink2 = nbttagcompound.getDouble(\"Link2\");\n\t}\n\n\tpublic static String getColorAsString(int i) {\n\t\tswitch (i) {\n\t\tcase 0:\n\t\t\treturn \"Black\";\n\t\tcase 1:\n\t\t\treturn \"Red\";\n\t\tcase 2:\n\t\t\treturn \"Green\";\n\t\tcase 3:\n\t\t\treturn \"Brown\";\n\t\tcase 4:\n\t\t\treturn \"Blue\";\n\t\tcase 5:\n\t\t\treturn \"Purple\";\n\t\tcase 6:\n\t\t\treturn \"Cyan\";\n\t\tcase 7:\n\t\t\treturn \"LightGrey\";\n\t\tcase 8:\n\t\t\treturn \"Grey\";\n\t\tcase 13:\n\t\t\treturn \"Magenta\";\n\t\tcase 10:\n\t\t\treturn \"LightGreen\";\n\t\tcase 11:\n\t\t\treturn \"Yellow\";\n\t\tcase 12:\n\t\t\treturn \"LightBlue\";\n\t\tcase 9:\n\t\t\treturn \"Pink\";\n\t\tcase 14:\n\t\t\treturn \"Orange\";\n\t\tcase 15:\n\t\t\treturn \"White\";\n\t\tcase 100:\n\t\t\treturn \"Empty\";\n\t\tcase 101:\n\t\t\treturn \"Full\";\n\t\tdefault:\n\t\t\treturn \"\" + i;\n\t\t}\n\t}\n\n\tpublic String getColorAsString() {\n\t\tswitch (getColor()) {\n\t\tcase 0:\n\t\t\treturn \"Black\";\n\t\tcase 1:\n\t\t\treturn \"Red\";\n\t\tcase 2:\n\t\t\treturn \"Green\";\n\t\tcase 3:\n\t\t\treturn \"Brown\";\n\t\tcase 4:\n\t\t\treturn \"Blue\";\n\t\tcase 5:\n\t\t\treturn \"Purple\";\n\t\tcase 6:\n\t\t\treturn \"Cyan\";\n\t\tcase 7:\n\t\t\treturn \"LightGrey\";\n\t\tcase 8:\n\t\t\treturn \"Grey\";\n\t\tcase 13:\n\t\t\treturn \"Magenta\";\n\t\tcase 10:\n\t\t\treturn \"LightGreen\";\n\t\tcase 11:\n\t\t\treturn \"Yellow\";\n\t\tcase 12:\n\t\t\treturn \"LightBlue\";\n\t\tcase 9:\n\t\t\treturn \"Pink\";\n\t\tcase 14:\n\t\t\treturn \"Orange\";\n\t\tcase 15:\n\t\t\treturn \"White\";\n\t\tcase 100:\n\t\t\treturn \"Empty\";\n\t\tcase 101:\n\t\t\treturn \"Full\";\n\t\tdefault:\n\t\t\treturn \"\" + getColor();\n\t\t}\n\t}\n\n\tpublic static int getColorFromString(String color) {\n\t\tif (color.equals(\"Black\")) return 0;\n\t\tif (color.equals(\"Red\")) return 1;\n\t\tif (color.equals(\"Green\")) return 2;\n\t\tif (color.equals(\"Brown\")) return 3;\n\t\tif (color.equals(\"Blue\")) return 4;\n\t\tif (color.equals(\"Purple\")) return 5;\n\t\tif (color.equals(\"Cyan\")) return 6;\n\t\tif (color.equals(\"LightGrey\")) return 7;\n\t\tif (color.equals(\"Grey\")) return 8;\n\t\tif (color.equals(\"Magenta\")) return 13;\n\t\tif (color.equals(\"LightGreen\")) return 10;\n\t\tif (color.equals(\"Yellow\")) return 11;\n\t\tif (color.equals(\"LightBlue\")) return 12;\n\t\tif (color.equals(\"Pink\")) return 9;\n\t\tif (color.equals(\"Orange\")) return 14;\n\t\tif (color.equals(\"White\")) return 15;\n\t\tif (color.equals(\"Empty\")) return 100;\n\t\tif (color.equals(\"Full\")) return 101;\n\t\treturn -1;\n\t}\n\n\tpublic void dropCartAsItem() {\n\t\tfor (ItemStack item : getItemsDropped()) {\n\t\t\tsetUniqueIDToItem(item);\n\t\t\tentityDropItem(item, 0);\n\t\t}\n\t}\n\n\tprotected void setUniqueIDToItem(ItemStack stack) {\n\t\tNBTTagCompound var3 = stack.getTagCompound();\n\t\tif (var3 == null) {\n\t\t\tvar3 = new NBTTagCompound();\n\t\t\tstack.setTagCompound(var3);\n\t\t}\n\t\tif (this.uniqueID != -1) stack.getTagCompound().setInteger(\"uniqueID\", this.uniqueID);\n\t\tif (this.trainCreator != null && this.trainCreator.length() > 0) stack.getTagCompound().setString(\"trainCreator\", this.trainCreator);\n\t\tif (this.getColor() != -1) stack.getTagCompound().setInteger(\"trainColor\", this.getColor());\n\t}\n\n\tprotected void setDefaultMass(double def) {\n\t\tthis.mass = def;\n\t\tthis.defaultMass = def;\n\t}\n\n\tprotected double getDefaultMass() {\n\t\treturn defaultMass;\n\t}\n\n\t/**\n\t * Lock packet\n\t */\n\tpublic void setTrainLockedFromPacket(boolean set) {\n\t\t//System.out.println(worldObj.isRemote+\" \"+set);\n\t\tlocked = set;\n\t}\n\n\t/**\n\t * Lock packet and owner\n\t */\n\tpublic void setTrainLockedFromPacket(boolean set, String owner) {\n\t\tlocked = set;\n\t\ttrainOwner = owner;\n\t}\n\n\t/**\n\t * Lock packet\n\t */\n\tpublic boolean getTrainLockedFromPacket() {\n\t\treturn locked;\n\t}\n\n\tpublic void sendTrainLockedPacket(EntityPlayer entity, boolean locked) {\n\t\tTraincraft.modChannel.sendToServer(new PacketSetTrainLockedToClient(locked, this));\n\t}\n\n\t/** Locking for passengers, flat, caboose, jukebox,workcart */\n\tprotected boolean lockThisCart(ItemStack itemstack, EntityPlayer entityplayer) {\n\t\tif (itemstack != null && itemstack.getItem() instanceof IToolWrench) {\n\t\t\tif (entityplayer.getDisplayName().equals(this.trainOwner)) {\n\t\t\t\tif (locked) {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tentityplayer.addChatMessage(new ChatComponentText(\"unlocked\"));\n\t\t\t\t}\n\t\t\t\telse if (!locked) {\n\t\t\t\t\tlocked = true;\n\t\t\t\t\tentityplayer.addChatMessage(new ChatComponentText(\"locked\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tentityplayer.addChatMessage(new ChatComponentText(\"You are not the owner!\"));\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected boolean canBeRiddenWhileLocked(AbstractTrains train) {\n\t\treturn (train instanceof Locomotive) || (train instanceof IPassenger) || (train instanceof AbstractWorkCart);\n\t}\n\n\tprotected boolean canBeDestroyedByPlayer(DamageSource damagesource) {\n\t\tif (this.getTrainLockedFromPacket()) {\n\t\t\tif (damagesource.getEntity() instanceof EntityPlayer) {\n\t\t\t\tif ((damagesource.getEntity() instanceof EntityPlayerMP) && MinecraftServer.getServer() != null && MinecraftServer.getServer().getConfigurationManager() != null && MinecraftServer.getServer().getConfigurationManager().func_152596_g(((EntityPlayer) damagesource.getEntity()).getGameProfile()) && ((EntityPlayer) damagesource.getEntity()).inventory.getCurrentItem() != null && ((EntityPlayer) damagesource.getEntity()).inventory.getCurrentItem().getItem() instanceof IToolWrench) {\n\n\t\t\t\t\t((EntityPlayer) damagesource.getEntity()).addChatMessage(new ChatComponentText(\"Removing the train using OP permission\"));\n\t\t\t\t}\n\t\t\t\telse if (!((EntityPlayer) damagesource.getEntity()).getDisplayName().toLowerCase().equals(this.trainOwner.toLowerCase())) {\n\t\t\t\t\t((EntityPlayer) damagesource.getEntity()).addChatMessage(new ChatComponentText(\"You are not the owner!\"));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/** Railcraft routing integration */\n\t@Override\n\tpublic boolean doesCartMatchFilter(ItemStack stack, EntityMinecart cart) {\n\t\tif (stack == null || cart == null) { return false; }\n\t\tItemStack cartItem = cart.getCartItem();\n\t\treturn cartItem != null && stack.isItemEqual(cartItem);\n\t}\n\n\t@Override\n\tpublic String getDestination() {\n\t\tif (destination == null) return \"\";\n\t\treturn destination;\n\t}\n\n\t/**\n\t * Only locomotives can receive a destination from a track. It is then\n\t * transmitted to attached carts\n\t */\n\t@Override\n\tpublic boolean setDestination(ItemStack ticket) {\n\t\treturn false;\n\t}\n\n\tpublic static String getTicketDestination(ItemStack ticket) {\n\t\tif ((ticket == null)) { return \"\"; }\n\t\tNBTTagCompound nbt = ticket.getTagCompound();\n\t\tif (nbt == null) { return \"\"; }\n\t\treturn nbt.getString(\"dest\");\n\t}\n}","binary":"false","copies":"1","sample_repo_name":"EternalBlueFlame/Traincraft-5","sample_ref":"refs/heads/1.7","sample_path":"src/main/java/train/common/api/AbstractTrains.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"055e1459ee8b41b9a457adedf62336807c176107","size":"4363","content":"package pl.asie.charset.audio.note;\n\nimport net.minecraft.block.material.Material;\nimport net.minecraft.block.state.IBlockState;\nimport net.minecraft.nbt.NBTTagCompound;\nimport net.minecraft.tileentity.TileEntity;\nimport net.minecraft.util.ResourceLocation;\nimport net.minecraft.util.SoundCategory;\nimport net.minecraft.util.SoundEvent;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.util.EnumFacing;\n\nimport net.minecraftforge.common.capabilities.Capability;\n\nimport pl.asie.charset.api.wires.IBundledReceiver;\nimport pl.asie.charset.audio.ModCharsetAudio;\nimport pl.asie.charset.lib.Capabilities;\n\npublic class TileIronNote extends TileEntity {\n\tprivate class RedstoneCommunications implements IBundledReceiver {\n\t\tprivate final EnumFacing side;\n\n\t\tRedstoneCommunications(EnumFacing side) {\n\t\t\tthis.side = side;\n\t\t}\n\n\t\t@Override\n\t\tpublic void onBundledInputChange() {\n\t\t\tonBundledInputChanged(side);\n\t\t}\n\t}\n\n\tpublic static final int MIN_NOTE = 0;\n\tpublic static final int MAX_NOTE = 24;\n\n\tprivate static final String[] INSTRUMENTS = {\"harp\", \"bd\", \"snare\", \"hat\", \"bassattack\"};\n\tprivate final RedstoneCommunications[] COMMS = new RedstoneCommunications[6];\n\tprivate byte[] lastInput = new byte[16];\n\n\tpublic TileIronNote() {\n\t\tfor (int i = 0; i < 6; i++) {\n\t\t\tCOMMS[i] = new RedstoneCommunications(EnumFacing.getFront(i));\n\t\t}\n\t}\n\n\tprivate String getInstrument(int id) {\n\t\tif (id < 0 || id >= INSTRUMENTS.length) {\n\t\t\tid = 0;\n\t\t}\n\n\t\treturn INSTRUMENTS[id];\n\t}\n\n\tprotected boolean canPlayNote() {\n\t\treturn worldObj.isAirBlock(pos.up());\n\t}\n\n\tpublic int getInstrumentID() {\n\t\tMaterial material = worldObj.getBlockState(pos.down()).getMaterial();\n\t\tif (material == Material.ROCK) return 1;\n\t\telse if (material == Material.SAND) return 2;\n\t\telse if (material == Material.GLASS) return 3;\n\t\telse if (material == Material.WOOD) return 4;\n\t\telse return 0;\n\t}\n\n\tprotected void playNote(int note, int instrument) {\n\t\tif (instrument >= 0 && instrument <= 4) {\n\t\t\tnet.minecraftforge.event.world.NoteBlockEvent.Play e = new net.minecraftforge.event.world.NoteBlockEvent.Play(\n\t\t\t\t\tworldObj, pos, worldObj.getBlockState(pos), note, instrument);\n\t\t\tif (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(e)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinstrument = e.getInstrument().ordinal();\n\t\t\tnote = e.getVanillaNoteId();\n\t\t}\n\t\tif (note < 0) {\n\t\t\tnote = 0;\n\t\t}\n\t\tif (note > 24) {\n\t\t\tnote = 24;\n\t\t}\n\t\tfloat f = (float) Math.pow(2.0D, (double) (note - 12) / 12.0D);\n\t\tworldObj.playSound((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, new SoundEvent(new ResourceLocation(\"note.\" + this.getInstrument(instrument))), SoundCategory.BLOCKS, 3.0F, f, true);\n\t\tModCharsetAudio.packet.sendToAllAround(new PacketNoteParticle(this, note), this, 32);\n\t}\n\n\t@Override\n\tpublic void readFromNBT(NBTTagCompound compound) {\n\t\tsuper.readFromNBT(compound);\n\t\tlastInput = compound.getByteArray(\"lastInput\");\n\t\tif (lastInput == null || lastInput.length != 16) {\n\t\t\tlastInput = new byte[16];\n\t\t}\n\t}\n\n\t@Override\n\tpublic NBTTagCompound writeToNBT(NBTTagCompound compound) {\n\t\tsuper.writeToNBT(compound);\n\t\tcompound.setByteArray(\"lastInput\", lastInput);\n\t\treturn compound;\n\t}\n\n\tprivate void onBundledInputChanged(EnumFacing face) {\n\t\tif (!canPlayNote()) {\n\t\t\treturn;\n\t\t}\n\n\t\tBlockPos pos = getPos().offset(face);\n\t\tTileEntity tileEntity = worldObj.getTileEntity(pos);\n\n\t\tif (tileEntity != null && tileEntity.hasCapability(Capabilities.BUNDLED_EMITTER, face.getOpposite())) {\n\t\t\tbyte[] input = tileEntity.getCapability(Capabilities.BUNDLED_EMITTER, face.getOpposite()).getBundledSignal();\n\n\t\t\tif (input == null) {\n\t\t\t\tinput = new byte[16];\n\t\t\t}\n\n\t\t\tfor (int i = 0; i < 16; i++) {\n\t\t\t\tif (lastInput[i] != input[i] && input[i] > 0) {\n\t\t\t\t\tplayNote(i, getInstrumentID());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastInput = input.clone();\n\t\t} else {\n\t\t\tlastInput = new byte[16];\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean hasCapability(Capability<?> capability, EnumFacing facing) {\n\t\tif (capability == Capabilities.BUNDLED_RECEIVER) {\n\t\t\treturn facing != null;\n\t\t} else {\n\t\t\treturn super.hasCapability(capability, facing);\n\t\t}\n\t}\n\n\t@Override\n\tpublic <T> T getCapability(Capability<T> capability, EnumFacing facing) {\n\t\tif (capability == Capabilities.BUNDLED_RECEIVER && facing != null) {\n\t\t\treturn (T) COMMS[facing.ordinal()];\n\t\t} else {\n\t\t\treturn super.getCapability(capability, facing);\n\t\t}\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"asiekierka/CharsetMC","sample_ref":"refs/heads/1.9","sample_path":"src/main/java/pl/asie/charset/audio/note/TileIronNote.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f6ca781d1b4237d04e10b08569c377066de19fe6","size":"4499","content":"/**\n * Copyright 2014 Netflix, Inc.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage rx.plugins;\n\nimport rx.*;\nimport rx.annotations.Beta;\nimport rx.exceptions.Exceptions;\n\n/**\n * Abstract class for defining error handling logic in addition to the normal\n * {@link Subscriber#onError(Throwable)} behavior.\n * <p>\n * For example, all {@code Exception}s can be logged using this handler even if\n * {@link Subscriber#onError(Throwable)} is ignored or not provided when an {@link Observable} is subscribed to.\n * <p>\n * This plugin is also responsible for augmenting rendering of {@code OnErrorThrowable.OnNextValue}.\n * <p>\n * See {@link RxJavaPlugins} or the RxJava GitHub Wiki for information on configuring plugins: <a\n * href=\"https://github.com/ReactiveX/RxJava/wiki/Plugins\">https://github.com/ReactiveX/RxJava/wiki/Plugins</a>.\n */\npublic abstract class RxJavaErrorHandler { // NOPMD \n\n    protected static final String ERROR_IN_RENDERING_SUFFIX = \".errorRendering\";\n\n    /**\n     * Receives all {@code Exception}s from an {@link Observable} passed to\n     * {@link Subscriber#onError(Throwable)}.\n     * <p>\n     * This should <em>never</em> throw an {@code Exception}. Make sure to try/catch({@code Throwable}) all code\n     * inside this method implementation.\n     * \n     * @param e\n     *            the {@code Exception}\n     */\n    @Deprecated\n    public void handleError(Throwable e) {\n        // do nothing by default\n    }\n\n    /**\n     * Receives items causing {@code OnErrorThrowable.OnNextValue} and gives a chance to choose the String\n     * representation of the item in the {@code OnNextValue} stacktrace rendering. Returns {@code null} if this\n     * type of item is not managed and should use default rendering.\n     * <p>\n     * Note that primitive types are always rendered as their {@code toString()} value.\n     * <p>\n     * If a {@code Throwable} is caught when rendering, this will fallback to the item's classname suffixed by\n     * {@code ERROR_IN_RENDERING_SUFFIX}.\n     *\n     * @param item the last emitted item, that caused the exception wrapped in\n     *             {@code OnErrorThrowable.OnNextValue}\n     * @return a short {@link String} representation of the item if one is known for its type, or null for\n     *         default\n     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the\n     *        release number)\n     */\n    @Beta\n    public final String handleOnNextValueRendering(Object item) {\n\n        try {\n            return render(item);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } catch (Throwable t) {\n            Exceptions.throwIfFatal(t);\n        }\n        return item.getClass().getName() + ERROR_IN_RENDERING_SUFFIX;\n    }\n\n    /**\n     * Override this method to provide rendering for specific types other than primitive types and null.\n     * <p>\n     * For performance and overhead reasons, this should should limit to a safe production of a short\n     * {@code String} (as large renderings will bloat up the stacktrace). Prefer to try/catch({@code Throwable})\n     * all code inside this method implementation.\n     * <p>\n     * If a {@code Throwable} is caught when rendering, this will fallback to the item's classname suffixed by\n     * {@value #ERROR_IN_RENDERING_SUFFIX}.\n     *\n     * @param item the last emitted item, that caused the exception wrapped in\n     *             {@code OnErrorThrowable.OnNextValue}\n     * @return a short {@link String} representation of the item if one is known for its type, or null for\n     *         default\n     * @throws InterruptedException if the rendering thread is interrupted\n     * @since (if this graduates from Experimental/Beta to supported, replace this parenthetical with the\n     *        release number)\n     */\n    @Beta\n    protected String render (Object item) throws InterruptedException {\n        //do nothing by default\n        return null;\n    }\n\n}\n","binary":"false","copies":"2","sample_repo_name":"ReactiveX/RxJava","sample_ref":"refs/heads/1.x","sample_path":"src/main/java/rx/plugins/RxJavaErrorHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7942214b0c8f7423d02d199cdc25b4ce38e15174","size":"9238","content":"/**\n * Copyright 2014 Netflix, Inc.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage rx.internal.operators;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport org.junit.Test;\n\nimport rx.Observable;\nimport rx.Observable.OnSubscribe;\nimport rx.Observable.Operator;\nimport rx.Observer;\nimport rx.Producer;\nimport rx.Scheduler;\nimport rx.Subscriber;\nimport rx.Subscription;\nimport rx.functions.Action0;\nimport rx.observers.TestSubscriber;\nimport rx.schedulers.Schedulers;\n\npublic class OperatorSubscribeOnTest {\n\n    @Test(timeout = 2000)\n    public void testIssue813() throws InterruptedException {\n        // https://github.com/ReactiveX/RxJava/issues/813\n        final CountDownLatch scheduled = new CountDownLatch(1);\n        final CountDownLatch latch = new CountDownLatch(1);\n        final CountDownLatch doneLatch = new CountDownLatch(1);\n\n        TestSubscriber<Integer> observer = new TestSubscriber<Integer>();\n\n        final Subscription subscription = Observable\n                .create(new Observable.OnSubscribe<Integer>() {\n                    @Override\n                    public void call(\n                            final Subscriber<? super Integer> subscriber) {\n                        scheduled.countDown();\n                        try {\n                            try {\n                                latch.await();\n                            } catch (InterruptedException e) {\n                                // this means we were unsubscribed (Scheduler shut down and interrupts)\n                                // ... but we'll pretend we are like many Observables that ignore interrupts\n                            }\n\n                            subscriber.onCompleted();\n                        } catch (Throwable e) {\n                            subscriber.onError(e);\n                        } finally {\n                            doneLatch.countDown();\n                        }\n                    }\n                }).subscribeOn(Schedulers.computation()).subscribe(observer);\n\n        // wait for scheduling\n        scheduled.await();\n        // trigger unsubscribe\n        subscription.unsubscribe();\n        latch.countDown();\n        doneLatch.await();\n        assertEquals(0, observer.getOnErrorEvents().size());\n        assertEquals(1, observer.getCompletions());\n    }\n\n    @Test\n    public void testThrownErrorHandling() {\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        Observable.create(new OnSubscribe<String>() {\n\n            @Override\n            public void call(Subscriber<? super String> s) {\n                throw new RuntimeException(\"fail\");\n            }\n\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n        ts.awaitTerminalEvent(1000, TimeUnit.MILLISECONDS);\n        ts.assertTerminalEvent();\n    }\n\n    @Test\n    public void testOnError() {\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        Observable.create(new OnSubscribe<String>() {\n\n            @Override\n            public void call(Subscriber<? super String> s) {\n                s.onError(new RuntimeException(\"fail\"));\n            }\n\n        }).subscribeOn(Schedulers.computation()).subscribe(ts);\n        ts.awaitTerminalEvent(1000, TimeUnit.MILLISECONDS);\n        ts.assertTerminalEvent();\n    }\n\n    public static class SlowScheduler extends Scheduler {\n        final Scheduler actual;\n        final long delay;\n        final TimeUnit unit;\n\n        public SlowScheduler() {\n            this(Schedulers.computation(), 2, TimeUnit.SECONDS);\n        }\n\n        public SlowScheduler(Scheduler actual, long delay, TimeUnit unit) {\n            this.actual = actual;\n            this.delay = delay;\n            this.unit = unit;\n        }\n\n        @Override\n        public Worker createWorker() {\n            return new SlowInner(actual.createWorker());\n        }\n\n        final class SlowInner extends Worker {\n\n            private final Scheduler.Worker actualInner;\n\n            private SlowInner(Worker actual) {\n                this.actualInner = actual;\n            }\n\n            @Override\n            public void unsubscribe() {\n                actualInner.unsubscribe();\n            }\n\n            @Override\n            public boolean isUnsubscribed() {\n                return actualInner.isUnsubscribed();\n            }\n\n            @Override\n            public Subscription schedule(final Action0 action) {\n                return actualInner.schedule(action, delay, unit);\n            }\n\n            @Override\n            public Subscription schedule(final Action0 action, final long delayTime, final TimeUnit delayUnit) {\n                TimeUnit common = delayUnit.compareTo(unit) < 0 ? delayUnit : unit;\n                long t = common.convert(delayTime, delayUnit) + common.convert(delay, unit);\n                return actualInner.schedule(action, t, common);\n            }\n\n        }\n\n    }\n\n    @Test(timeout = 5000)\n    public void testUnsubscribeInfiniteStream() throws InterruptedException {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        final AtomicInteger count = new AtomicInteger();\n        Observable.create(new OnSubscribe<Integer>() {\n\n            @Override\n            public void call(Subscriber<? super Integer> sub) {\n                for (int i = 1; !sub.isUnsubscribed(); i++) {\n                    count.incrementAndGet();\n                    sub.onNext(i);\n                }\n            }\n\n        }).subscribeOn(Schedulers.newThread()).take(10).subscribe(ts);\n\n        ts.awaitTerminalEventAndUnsubscribeOnTimeout(1000, TimeUnit.MILLISECONDS);\n        Thread.sleep(200); // give time for the loop to continue\n        ts.assertReceivedOnNext(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        assertEquals(10, count.get());\n    }\n\n    @Test\n    public void testBackpressureReschedulesCorrectly() throws InterruptedException {\n        final CountDownLatch latch = new CountDownLatch(10);\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>(new Observer<Integer>() {\n\n            @Override\n            public void onCompleted() {\n            }\n\n            @Override\n            public void onError(Throwable e) {\n            }\n\n            @Override\n            public void onNext(Integer t) {\n                latch.countDown();\n            }\n\n        });\n        ts.requestMore(10);\n        Observable.range(1, 10000000).subscribeOn(Schedulers.newThread()).take(20).subscribe(ts);\n        latch.await();\n        Thread t = ts.getLastSeenThread();\n        System.out.println(\"First schedule: \" + t);\n        assertTrue(t.getName().startsWith(\"Rx\"));\n        ts.requestMore(10);\n        ts.awaitTerminalEvent();\n        System.out.println(\"After reschedule: \" + ts.getLastSeenThread());\n        assertEquals(t, ts.getLastSeenThread());\n    }\n\n    @Test\n    public void testSetProducerSynchronousRequest() {\n        TestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n        Observable.just(1, 2, 3).lift(new Operator<Integer, Integer>() {\n\n            @Override\n            public Subscriber<? super Integer> call(final Subscriber<? super Integer> child) {\n                final AtomicLong requested = new AtomicLong();\n                child.setProducer(new Producer() {\n\n                    @Override\n                    public void request(long n) {\n                        if (!requested.compareAndSet(0, n)) {\n                            child.onError(new RuntimeException(\"Expected to receive request before onNext but didn't\"));\n                        }\n                    }\n\n                });\n                Subscriber<Integer> parent = new Subscriber<Integer>() {\n\n                    @Override\n                    public void onCompleted() {\n                        child.onCompleted();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        child.onError(e);\n                    }\n\n                    @Override\n                    public void onNext(Integer t) {\n                        if (requested.compareAndSet(0, -99)) {\n                            child.onError(new RuntimeException(\"Got values before requested\"));\n                        }\n                    }\n                };\n\n                child.add(parent);\n\n                return parent;\n            }\n\n        }).subscribeOn(Schedulers.newThread()).subscribe(ts);\n        ts.awaitTerminalEvent();\n        ts.assertNoErrors();\n    }\n\n}\n","binary":"false","copies":"2","sample_repo_name":"ReactiveX/RxJava","sample_ref":"refs/heads/1.x","sample_path":"src/test/java/rx/internal/operators/OperatorSubscribeOnTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3e8afcea00f375a672105701d98ca8b66d1a7fc8","size":"3753","content":"/**\n * Copyright 2014 Netflix, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage rx.internal.operators;\n\nimport rx.Observable;\nimport rx.Producer;\nimport rx.Observable.Operator;\nimport rx.Subscriber;\nimport rx.exceptions.Exceptions;\nimport rx.plugins.RxJavaPlugins;\n\n/**\n * Instruct an Observable to pass control to another Observable rather than invoking\n * <code>onError</code> if it encounters an error.\n * <p>\n * <img width=\"640\" src=\"https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/onErrorResumeNext.png\" alt=\"\">\n * <p>\n * By default, when an Observable encounters an error that prevents it from emitting the expected item to its\n * Observer, the Observable invokes its Observer's {@code onError} method, and then quits without invoking any\n * more of its Observer's methods. The {@code onErrorResumeNext} operation changes this behavior. If you pass\n * an Observable ({@code resumeSequence}) to {@code onErrorResumeNext}, if the source Observable encounters an\n * error, instead of invoking its Observer's {@code onError} method, it will instead relinquish control to this\n * new Observable, which will invoke the Observer's {@code onNext} method if it is able to do so. In such a\n * case, because no Observable necessarily invokes {@code onError}, the Observer may never know that an error\n * happened.\n * <p>\n * You can use this to prevent errors from propagating or to supply fallback data should errors be\n * encountered.\n * \n * @param <T> the value type\n */\npublic final class OperatorOnErrorResumeNextViaObservable<T> implements Operator<T, T> {\n    final Observable<? extends T> resumeSequence;\n\n    public OperatorOnErrorResumeNextViaObservable(Observable<? extends T> resumeSequence) {\n        this.resumeSequence = resumeSequence;\n    }\n\n    @Override\n    public Subscriber<? super T> call(final Subscriber<? super T> child) {\n        // shared subscription won't work here\n        Subscriber<T> s = new Subscriber<T>() {\n            \n            private boolean done = false;\n            \n            @Override\n            public void onNext(T t) {\n                if (done) {\n                    return;\n                }\n                child.onNext(t);\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                if (done) {\n                    Exceptions.throwIfFatal(e);\n                    return;\n                }\n                done = true;\n                RxJavaPlugins.getInstance().getErrorHandler().handleError(e);\n                unsubscribe();\n                resumeSequence.unsafeSubscribe(child);\n            }\n\n            @Override\n            public void onCompleted() {\n                if (done) {\n                    return;\n                }\n                done = true;\n                child.onCompleted();\n            }\n            \n            @Override\n            public void setProducer(final Producer producer) {\n                child.setProducer(new Producer() {\n                    @Override\n                    public void request(long n) {\n                        producer.request(n);\n                    }\n                });\n            }\n            \n        };\n        child.add(s);\n        \n        return s;\n    }\n    \n}\n","binary":"false","copies":"107","sample_repo_name":"JakeWharton/RxJava","sample_ref":"refs/heads/1.x","sample_path":"src/main/java/rx/internal/operators/OperatorOnErrorResumeNextViaObservable.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1951cbb5fc5863030702a9f5fe595611d9cc2a88","size":"45","content":"package org.example;\n\npublic class Test1 {\n}\n","binary":"false","copies":"13","sample_repo_name":"ensime/ensime-server","sample_ref":"refs/heads/2.0","sample_path":"testing/simple/src/main/java/org/example/Test1.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b56a4a548de30570a8fad0cc4fd0675b41d7f9c8","size":"16540","content":"/*\n *      Copyright (C) 2012-2015 DataStax Inc.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.datastax.driver.core.schemabuilder;\n\nimport java.util.*;\n\nimport static java.util.Map.Entry;\n\nimport com.google.common.base.Joiner;\nimport com.google.common.base.Objects;\nimport com.google.common.base.Optional;\nimport com.google.common.collect.Lists;\n\nimport com.datastax.driver.core.DataType;\n\n/**\n * A built CREATE TABLE statement.\n */\npublic class Create extends AbstractCreateStatement<Create> {\n\n    private String tableName;\n    private Map<String, ColumnType> partitionColumns = new LinkedHashMap<String, ColumnType>();\n    private Map<String, ColumnType> clusteringColumns = new LinkedHashMap<String, ColumnType>();\n    private Map<String, ColumnType> staticColumns = new LinkedHashMap<String, ColumnType>();\n\n    Create(String keyspaceName, String tableName) {\n        validateNotEmpty(keyspaceName, \"Keyspace name\");\n        validateNotEmpty(tableName, \"Table name\");\n        validateNotKeyWord(keyspaceName, String.format(\"The keyspace name '%s' is not allowed because it is a reserved keyword\", keyspaceName));\n        validateNotKeyWord(tableName, String.format(\"The table name '%s' is not allowed because it is a reserved keyword\", tableName));\n        this.tableName = tableName;\n        this.keyspaceName = Optional.fromNullable(keyspaceName);\n    }\n\n    Create(String tableName) {\n        validateNotEmpty(tableName, \"Table name\");\n        validateNotKeyWord(tableName, String.format(\"The table name '%s' is not allowed because it is a reserved keyword\", tableName));\n        this.tableName = tableName;\n    }\n\n    /**\n     * Add a partition key column definition to this CREATE TABLE statement.\n     * <p>\n     * This includes the column declaration (you don't need an additional {@code addColumn} call).\n     * <p>\n     * Partition key columns are added in the order of their declaration.\n     *\n     * @param columnName the name of the partition key column to be added.\n     * @param dataType the data type of the partition key column to be added.\n     * @return this CREATE statement.\n     */\n    public Create addPartitionKey(String columnName, DataType dataType) {\n        validateNotEmpty(columnName, \"Partition key name\");\n        validateNotNull(dataType, \"Partition key type\");\n        validateNotKeyWord(columnName, String.format(\"The partition key name '%s' is not allowed because it is a reserved keyword\", columnName));\n        partitionColumns.put(columnName, new NativeColumnType(dataType));\n        return this;\n    }\n\n    /**\n     * Add a partition key column definition to this CREATE TABLE statement, when its type contains a UDT.\n     * <p>\n     * This includes the column declaration (you don't need an additional {@code addColumn} call).\n     * <p>\n     * Partition key columns are added in the order of their declaration.\n     *\n     * @param columnName the name of the partition key column to be added.\n     * @param udtType the UDT type of the partition key column to be added. Use {@link SchemaBuilder#frozen(String)} or {@link SchemaBuilder#udtLiteral(String)}.\n     * @return this CREATE statement.\n     */\n    public Create addUDTPartitionKey(String columnName, UDTType udtType) {\n        validateNotEmpty(columnName, \"Clustering key name\");\n        validateNotNull(udtType, \"UDT partition key type\");\n        validateNotKeyWord(columnName, String.format(\"The partition key name '%s' is not allowed because it is a reserved keyword\", columnName));\n        partitionColumns.put(columnName, udtType);\n        return this;\n    }\n\n    /**\n     * Add a clustering column definition to this CREATE TABLE statement.\n     * <p>\n     * This includes the column declaration (you don't need an additional {@code addColumn} call).\n     * <p>\n     * Clustering columns are added in the order of their declaration.\n     *\n     * @param columnName the name of the clustering column to be added.\n     * @param dataType the data type of the clustering column to be added.\n     * @return this CREATE statement.\n     */\n    public Create addClusteringColumn(String columnName, DataType dataType) {\n        validateNotEmpty(columnName, \"Clustering column name\");\n        validateNotNull(dataType, \"Clustering column type\");\n        validateNotKeyWord(columnName, String.format(\"The clustering column name '%s' is not allowed because it is a reserved keyword\", columnName));\n        clusteringColumns.put(columnName, new NativeColumnType(dataType));\n        return this;\n    }\n\n    /**\n     * Add a clustering column definition to this CREATE TABLE statement, when its type contains a UDT.\n     * <p>\n     * This includes the column declaration (you don't need an additional {@code addColumn} call).\n     * <p>\n     * Clustering columns are added in the order of their declaration.\n     *\n     * @param columnName the name of the clustering column to be added.\n     * @param udtType the UDT type of the clustering column to be added. Use {@link SchemaBuilder#frozen(String)} or {@link SchemaBuilder#udtLiteral(String)}.\n     * @return this CREATE statement.\n     */\n    public Create addUDTClusteringColumn(String columnName, UDTType udtType) {\n        validateNotEmpty(columnName, \"Clustering column name\");\n        validateNotNull(udtType, \"UDT clustering column type\");\n        validateNotKeyWord(columnName, String.format(\"The clustering column name '%s' is not allowed because it is a reserved keyword\", columnName));\n        clusteringColumns.put(columnName, udtType);\n        return this;\n    }\n\n    /**\n     * Add a static column definition to this CREATE TABLE statement.\n     *\n     * @param columnName the name of the column to be added.\n     * @param dataType the data type of the column to be added.\n     * @return this CREATE statement.\n     */\n    public Create addStaticColumn(String columnName, DataType dataType) {\n        validateNotEmpty(columnName, \"Column name\");\n        validateNotNull(dataType, \"Column type\");\n        validateNotKeyWord(columnName, String.format(\"The static column name '%s' is not allowed because it is a reserved keyword\", columnName));\n        staticColumns.put(columnName, new NativeColumnType(dataType));\n        return this;\n    }\n\n    /**\n     * Add a static column definition to this CREATE TABLE statement, when its type contains a UDT.\n     *\n     * @param columnName the name of the column to be added.\n     * @param udtType the UDT type of the column to be added. Use {@link SchemaBuilder#frozen(String)} or {@link SchemaBuilder#udtLiteral(String)}.\n     * @return this CREATE statement.\n     */\n    public Create addUDTStaticColumn(String columnName, UDTType udtType) {\n        validateNotEmpty(tableName, \"Column name\");\n        validateNotNull(udtType, \"Column UDT type\");\n        validateNotKeyWord(columnName, String.format(\"The static column name '%s' is not allowed because it is a reserved keyword\", columnName));\n        staticColumns.put(columnName, udtType);\n        return this;\n    }\n\n    /**\n     * Add options for this CREATE TABLE statement.\n     *\n     * @return the options of this CREATE TABLE statement.\n     */\n    public Options withOptions() {\n        return new Options(this);\n    }\n\n    /**\n     * The table options of a CREATE TABLE statement.\n     */\n    public static class Options extends TableOptions<Options> {\n\n        private final Create create;\n\n        private Options(Create create) {\n            super(create.asStatementStart());\n            this.create = create;\n        }\n\n        private List<ClusteringOrder> clusteringOrderKeys = Lists.newArrayList();\n\n        private boolean compactStorage;\n\n        /**\n         * Add a clustering order for this table.\n         * <p>\n         * To define the order on multiple columns, call this method repeatedly. The columns will be declared in the call order.\n         *\n         * @param columnName the clustering column name.\n         * @param direction the clustering direction (DESC/ASC).\n         * @return this {@code Options} object.\n         */\n        public Options clusteringOrder(String columnName, SchemaBuilder.Direction direction) {\n            if (!create.clusteringColumns.containsKey(columnName)) {\n                throw new IllegalArgumentException(String.format(\"Clustering key '%s' is unknown. Did you forget to declare it first?\", columnName));\n            }\n            clusteringOrderKeys.add(new ClusteringOrder(columnName, direction));\n            return this;\n        }\n\n        /**\n         * Enable the compact storage option for the table.\n         *\n         * @return this {@code Options} object.\n         */\n        public Options compactStorage() {\n            this.compactStorage = true;\n            return this;\n        }\n\n        private static class ClusteringOrder {\n            private final String clusteringColumnName;\n            private final SchemaBuilder.Direction direction;\n\n            ClusteringOrder(String clusteringColumnName, SchemaBuilder.Direction direction) {\n                validateNotEmpty(clusteringColumnName, \"Column name for clustering order\");\n                this.clusteringColumnName = clusteringColumnName;\n                this.direction = direction;\n            }\n\n            public String getClusteringColumnName() {\n                return clusteringColumnName;\n            }\n\n            public String toStatement() {\n                return clusteringColumnName + \" \" + direction.name();\n            }\n\n            @Override\n            public String toString() {\n                return toStatement();\n            }\n\n            @Override\n            public boolean equals(Object o) {\n                if (this == o) {\n                    return true;\n                }\n                if (o instanceof ClusteringOrder) {\n                    ClusteringOrder that = (ClusteringOrder)o;\n                    return Objects.equal(this.clusteringColumnName, that.clusteringColumnName) && Objects.equal(this.direction, that.direction);\n                }\n                return false;\n            }\n\n            @Override\n            public int hashCode() {\n                return Objects.hashCode(clusteringColumnName, direction);\n            }\n        }\n\n        @Override\n        protected void addSpecificOptions(List<String> options) {\n            if (!clusteringOrderKeys.isEmpty()) {\n                options.add(\"CLUSTERING ORDER BY(\" + Joiner.on(\", \").join(clusteringOrderKeys) + \")\");\n            }\n\n            if (compactStorage) {\n                if (!create.staticColumns.isEmpty()) {\n                    throw new IllegalStateException(String.format(\"Cannot create table '%s' with compact storage and static columns '%s'\", create.tableName, create.staticColumns.keySet()));\n                }\n                options.add(\"COMPACT STORAGE\");\n            }\n        }\n    }\n\n    @Override\n    public String buildInternal() {\n        if (partitionColumns.size() < 1) {\n            throw new IllegalStateException(String.format(\"There should be at least one partition key defined for the table '%s'\", tableName));\n        }\n\n        validateColumnsDeclaration();\n\n        StringBuilder createStatement = new StringBuilder(STATEMENT_START).append(\"CREATE TABLE\");\n        if (ifNotExists) {\n            createStatement.append(\" IF NOT EXISTS\");\n        }\n        createStatement.append(\" \");\n        if (keyspaceName.isPresent()) {\n            createStatement.append(keyspaceName.get()).append(\".\");\n        }\n        createStatement.append(tableName);\n\n        List<String> allColumns = new ArrayList<String>();\n        List<String> partitionKeyColumns = new ArrayList<String>();\n        List<String> clusteringKeyColumns = new ArrayList<String>();\n\n        for (Entry<String, ColumnType> entry : partitionColumns.entrySet()) {\n            allColumns.add(entry.getKey() + \" \" + entry.getValue().asCQLString());\n            partitionKeyColumns.add(entry.getKey());\n        }\n\n        for (Entry<String, ColumnType> entry : clusteringColumns.entrySet()) {\n            allColumns.add(entry.getKey() + \" \" + entry.getValue().asCQLString());\n            clusteringKeyColumns.add(entry.getKey());\n        }\n\n        for (Entry<String, ColumnType> entry : staticColumns.entrySet()) {\n            allColumns.add(entry.getKey() + \" \" + entry.getValue().asCQLString() + \" static\");\n        }\n\n        for (Entry<String, ColumnType> entry : simpleColumns.entrySet()) {\n            allColumns.add(buildColumnType(entry));\n        }\n\n        String partitionKeyPart = partitionKeyColumns.size() == 1 ?\n            partitionKeyColumns.get(0)\n            : \"(\" + Joiner.on(\", \").join(partitionKeyColumns) + \")\";\n\n        String primaryKeyPart = clusteringKeyColumns.size() == 0 ?\n            partitionKeyPart\n            : partitionKeyPart + \", \" + Joiner.on(\", \").join(clusteringKeyColumns);\n\n        createStatement.append(\"(\").append(COLUMN_FORMATTING);\n        createStatement.append(Joiner.on(\",\" + COLUMN_FORMATTING).join(allColumns));\n        createStatement.append(\",\" + COLUMN_FORMATTING).append(\"PRIMARY KEY\");\n        createStatement.append(\"(\").append(primaryKeyPart).append(\")\");\n        createStatement.append(\")\");\n\n        return createStatement.toString();\n    }\n\n    private void validateColumnsDeclaration() {\n\n        final Collection partitionAndClusteringColumns = this.intersection(partitionColumns.keySet(), clusteringColumns.keySet());\n        final Collection partitionAndSimpleColumns = this.intersection(partitionColumns.keySet(), simpleColumns.keySet());\n        final Collection clusteringAndSimpleColumns = this.intersection(clusteringColumns.keySet(), simpleColumns.keySet());\n        final Collection partitionAndStaticColumns = this.intersection(partitionColumns.keySet(), staticColumns.keySet());\n        final Collection clusteringAndStaticColumns = this.intersection(clusteringColumns.keySet(), staticColumns.keySet());\n        final Collection simpleAndStaticColumns = this.intersection(simpleColumns.keySet(), staticColumns.keySet());\n\n        if (!partitionAndClusteringColumns.isEmpty()) {\n            throw new IllegalStateException(String.format(\"The '%s' columns can not be declared as partition keys and clustering keys at the same time\", partitionAndClusteringColumns));\n        }\n\n        if (!partitionAndSimpleColumns.isEmpty()) {\n            throw new IllegalStateException(String.format(\"The '%s' columns can not be declared as partition keys and simple columns at the same time\", partitionAndSimpleColumns));\n        }\n\n        if (!clusteringAndSimpleColumns.isEmpty()) {\n            throw new IllegalStateException(String.format(\"The '%s' columns can not be declared as clustering keys and simple columns at the same time\", clusteringAndSimpleColumns));\n        }\n\n        if (!partitionAndStaticColumns.isEmpty()) {\n            throw new IllegalStateException(String.format(\"The '%s' columns can not be declared as partition keys and static columns at the same time\", partitionAndStaticColumns));\n        }\n\n        if (!clusteringAndStaticColumns.isEmpty()) {\n            throw new IllegalStateException(String.format(\"The '%s' columns can not be declared as clustering keys and static columns at the same time\", clusteringAndStaticColumns));\n        }\n\n        if (!simpleAndStaticColumns.isEmpty()) {\n            throw new IllegalStateException(String.format(\"The '%s' columns can not be declared as simple columns and static columns at the same time\", simpleAndStaticColumns));\n        }\n\n        if (!staticColumns.isEmpty() && clusteringColumns.isEmpty()) {\n            throw new IllegalStateException(String.format(\"The table '%s' cannot declare static columns '%s' without clustering columns\", tableName, staticColumns.keySet()));\n        }\n    }\n\n    private <T> Collection<T> intersection(Collection<T> col1, Collection<T> col2) {\n        Set<T> set = new HashSet<T>();\n\n        for (T t : col1) {\n            if (col2.contains(t)) {\n                set.add(t);\n            }\n        }\n        return set;\n    }\n}\n","binary":"false","copies":"18","sample_repo_name":"codefollower/Cassandra-Java-Driver-Research","sample_ref":"refs/heads/2.1","sample_path":"driver-core/src/main/java/com/datastax/driver/core/schemabuilder/Create.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"bafc0eb8831b5e3a412c174abb9fc7bb3071d983","size":"15439","content":"/*\n *      Copyright (C) 2012-2015 DataStax Inc.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.datastax.driver.core.schemabuilder;\n\nimport com.datastax.driver.core.CCMTestsSupport;\nimport com.datastax.driver.core.DataType;\nimport com.datastax.driver.core.ResultSet;\nimport com.datastax.driver.core.Row;\nimport com.datastax.driver.core.schemabuilder.TableOptions.CompactionOptions.DateTieredCompactionStrategyOptions.TimeStampResolution;\nimport com.datastax.driver.core.utils.CassandraVersion;\nimport org.testng.annotations.Test;\n\nimport java.util.Iterator;\n\nimport static com.datastax.driver.core.schemabuilder.SchemaBuilder.*;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.fail;\n\npublic class SchemaBuilderIT extends CCMTestsSupport {\n\n    @Test(groups = \"short\")\n    @CassandraVersion(major = 2.1, minor = 2)\n    public void should_modify_table_metadata() {\n        // Create a table\n        session().execute(SchemaBuilder.createTable(\"ks\", \"TableMetadata\")\n                        .addPartitionKey(\"a\", DataType.cint())\n                        .addPartitionKey(\"b\", DataType.cint())\n                        .addClusteringColumn(\"c\", DataType.cint())\n                        .addClusteringColumn(\"d\", DataType.cint())\n                        .withOptions()\n                        .compactStorage()\n        );\n\n        // Modify the table metadata\n        session().execute(SchemaBuilder.alterTable(\"TableMetadata\")\n                .withOptions()\n                .defaultTimeToLive(1337)\n                .bloomFilterFPChance(0.42)\n                .caching(SchemaBuilder.KeyCaching.ALL, rows(1))\n                .gcGraceSeconds(1234567890)\n                .minIndexInterval(6)\n                .indexInterval(7)\n                .maxIndexInterval(8)\n                .comment(\"Useful comment\")\n                .readRepairChance(0.123456)\n                .speculativeRetry(percentile(50))\n                .dcLocalReadRepairChance(0.84)\n                .memtableFlushPeriodInMillis(1234567890)\n                .compactionOptions(dateTieredStrategy()\n                        .baseTimeSeconds(1)\n                        .minThreshold(2)\n                        .maxThreshold(3)\n                        .maxSSTableAgeDays(4)\n                        .timestampResolution(TimeStampResolution.MILLISECONDS))\n                .compressionOptions(snappy()));\n\n        // Retrieve the metadata from Cassandra\n        ResultSet rows = session().execute(\"SELECT \"\n                + \"bloom_filter_fp_chance, \"\n                + \"caching, \"\n                + \"cf_id, \"\n                + \"column_aliases, \"\n                + \"comment, \"\n                + \"compaction_strategy_class, \"\n                + \"compaction_strategy_options, \"\n                + \"comparator, \"\n                + \"compression_parameters, \"\n                + \"default_time_to_live, \"\n                + \"default_validator, \"\n                + \"dropped_columns, \"\n                + \"gc_grace_seconds, \"\n                + \"index_interval, \"\n                + \"is_dense, \"\n                + \"key_aliases, \"\n                + \"key_validator, \"\n                + \"local_read_repair_chance, \"\n                + \"max_compaction_threshold, \"\n                + \"max_index_interval, \"\n                + \"memtable_flush_period_in_ms, \"\n                + \"min_compaction_threshold, \"\n                + \"min_index_interval, \"\n                + \"read_repair_chance, \"\n                + \"speculative_retry, \"\n                + \"subcomparator, \"\n                + \"type, \"\n                + \"value_alias \"\n                + \"FROM system.schema_columnfamilies \"\n                + \"WHERE keyspace_name='ks' AND columnfamily_name='tablemetadata'\");\n        for (Row row : rows) {\n            // There should be only one row\n            // Verify that every property we modified is correctly set\n            assertThat(row.getDouble(\"bloom_filter_fp_chance\")).isEqualTo(0.42);\n            assertThat(row.getString(\"caching\")).isEqualTo(\"{\\\"keys\\\":\\\"ALL\\\", \\\"rows_per_partition\\\":\\\"1\\\"}\");\n            assertThat(row.getUUID(\"cf_id\")).isNotNull();\n            assertThat(row.getString(\"column_aliases\")).isEqualTo(\"[\\\"c\\\",\\\"d\\\"]\");\n            assertThat(row.getString(\"comment\")).isEqualTo(\"Useful comment\");\n            assertThat(row.getString(\"compaction_strategy_class\"))\n                    .isEqualTo(\"org.apache.cassandra.db.compaction.DateTieredCompactionStrategy\");\n            assertThat(row.getString(\"compaction_strategy_options\")).isEqualTo(\n                    \"{\\\"base_time_seconds\\\":\\\"1\\\",\\\"timestamp_resolution\\\":\\\"MILLISECONDS\\\",\\\"max_sstable_age_days\\\":\\\"4\\\",\\\"min_threshold\\\":\\\"2\\\",\\\"max_threshold\\\":\\\"3\\\"}\");\n            assertThat(row.getString(\"compression_parameters\"))\n                    .isEqualTo(\"{\\\"sstable_compression\\\":\\\"org.apache.cassandra.io.compress.SnappyCompressor\\\"}\");\n            assertThat(row.getInt(\"default_time_to_live\")).isEqualTo(1337);\n            assertThat(row.getInt(\"gc_grace_seconds\")).isEqualTo(1234567890);\n            assertThat(row.getInt(\"min_index_interval\")).isEqualTo(6);\n            assertThat(row.getInt(\"max_index_interval\")).isEqualTo(8);\n            assertThat(row.getString(\"key_aliases\")).isEqualTo(\"[\\\"a\\\",\\\"b\\\"]\");\n            assertThat(row.getDouble(\"local_read_repair_chance\")).isEqualTo(0.84);\n            assertThat(row.getInt(\"max_compaction_threshold\")).isEqualTo(3);\n            assertThat(row.getInt(\"memtable_flush_period_in_ms\")).isEqualTo(1234567890);\n            assertThat(row.getInt(\"min_compaction_threshold\")).isEqualTo(2);\n            assertThat(row.getDouble(\"read_repair_chance\")).isEqualTo(0.123456);\n            assertThat(row.getString(\"speculative_retry\")).isEqualTo(\"50.0PERCENTILE\");\n        }\n    }\n\n    @Test(groups = \"short\")\n    @CassandraVersion(major = 2.1)\n    public void should_create_a_table_and_a_udt() {\n        // Create a UDT and a table\n        session().execute(SchemaBuilder.createType(\"MyUDT\")\n                        .ifNotExists()\n                        .addColumn(\"x\", DataType.cint())\n        );\n        UDTType myUDT = UDTType.frozen(\"MyUDT\");\n        session().execute(SchemaBuilder.createTable(\"ks\", \"CreateTable\")\n                        .ifNotExists()\n                        .addPartitionKey(\"a\", DataType.cint())\n                        .addUDTPartitionKey(\"b\", myUDT)\n                        .addClusteringColumn(\"c\", DataType.ascii())\n                        .addUDTClusteringColumn(\"d\", myUDT)\n                        .addUDTColumn(\"e\", myUDT)\n                        .addStaticColumn(\"f\", DataType.bigint())\n                        .addUDTStaticColumn(\"g\", myUDT)\n                        .addUDTListColumn(\"h\", myUDT)\n                        .addUDTMapColumn(\"i\", DataType.cboolean(), myUDT)\n                        .addUDTMapColumn(\"j\", myUDT, DataType.cboolean())\n                        .addUDTSetColumn(\"k\", myUDT)\n        );\n\n        // Check columns a to k\n        ResultSet rows = session().execute(\n                \"SELECT column_name, type, validator \"\n                        + \"FROM system.schema_columns \"\n                        + \"WHERE keyspace_name='ks' AND columnfamily_name='createtable'\");\n        Iterator<Row> iterator = rows.iterator();\n        verifyNextColumnDefinition(iterator, \"a\", \"partition_key\", \"org.apache.cassandra.db.marshal.Int32Type\");\n        verifyNextColumnDefinition(iterator, \"b\", \"partition_key\", \"org.apache.cassandra.db.marshal.UserType\");\n        verifyNextColumnDefinition(iterator, \"c\", \"clustering_key\", \"org.apache.cassandra.db.marshal.AsciiType\");\n        verifyNextColumnDefinition(iterator, \"d\", \"clustering_key\", \"org.apache.cassandra.db.marshal.UserType\");\n        verifyNextColumnDefinition(iterator, \"e\", \"regular\", \"org.apache.cassandra.db.marshal.UserType\");\n        verifyNextColumnDefinition(iterator, \"f\", \"static\", \"org.apache.cassandra.db.marshal.LongType\");\n        verifyNextColumnDefinition(iterator, \"g\", \"static\", \"org.apache.cassandra.db.marshal.UserType\");\n        verifyNextColumnDefinition(iterator, \"h\", \"regular\", \"org.apache.cassandra.db.marshal.ListType\"\n                , \"org.apache.cassandra.db.marshal.UserType\");\n        verifyNextColumnDefinition(iterator, \"i\", \"regular\", \"org.apache.cassandra.db.marshal.MapType\"\n                , \"org.apache.cassandra.db.marshal.BooleanType\", \"org.apache.cassandra.db.marshal.UserType\");\n        verifyNextColumnDefinition(iterator, \"j\", \"regular\", \"org.apache.cassandra.db.marshal.MapType\"\n                , \"org.apache.cassandra.db.marshal.UserType\", \"org.apache.cassandra.db.marshal.BooleanType\");\n        verifyNextColumnDefinition(iterator, \"k\", \"regular\", \"org.apache.cassandra.db.marshal.SetType\"\n                , \"org.apache.cassandra.db.marshal.UserType\");\n    }\n\n    @Test(groups = \"short\")\n    public void should_add_and_drop_a_column() {\n        // Create a table, add a column to it with an alter table statement and delete that column\n        session().execute(SchemaBuilder.createTable(\"ks\", \"DropColumn\")\n                        .ifNotExists()\n                        .addPartitionKey(\"a\", DataType.cint())\n        );\n\n        // Add and then drop a column\n        session().execute(SchemaBuilder.alterTable(\"ks\", \"DropColumn\")\n                        .addColumn(\"b\")\n                        .type(DataType.cint())\n        );\n        session().execute(SchemaBuilder.alterTable(\"ks\", \"DropColumn\")\n                        .dropColumn(\"b\")\n        );\n\n        // Check that only column a exist\n        ResultSet rows = session().execute(\n                \"SELECT column_name, type, validator \"\n                        + \"FROM system.schema_columns \"\n                        + \"WHERE keyspace_name='ks' AND columnfamily_name='dropcolumn'\");\n        Iterator<Row> iterator = rows.iterator();\n        verifyNextColumnDefinition(iterator, \"a\", \"partition_key\", \"org.apache.cassandra.db.marshal.Int32Type\");\n        assertThat(iterator.hasNext()).isFalse();\n    }\n\n    private void verifyNextColumnDefinition(Iterator<Row> rowIterator, String columnName, String type,\n                                            String... validatorFragments) {\n        Row rowA = rowIterator.next();\n        assertThat(rowA.getString(\"column_name\")).isEqualTo(columnName);\n        assertThat(rowA.getString(\"type\")).isEqualTo(type);\n        for (String validatorFragment : validatorFragments) {\n            assertThat(rowA.getString(\"validator\")).contains(validatorFragment);\n        }\n    }\n\n    @Test(groups = \"short\")\n    public void should_drop_a_table() {\n        // Create a table\n        session().execute(SchemaBuilder.createTable(\"ks\", \"DropTable\")\n                        .addPartitionKey(\"a\", DataType.cint())\n        );\n\n        // Drop the table\n        session().execute(SchemaBuilder.dropTable(\"ks\", \"DropTable\"));\n        session().execute(SchemaBuilder.dropTable(\"DropTable\").ifExists());\n\n        ResultSet rows = session().execute(\n                \"SELECT columnfamily_name \"\n                        + \"FROM system.schema_columnfamilies \"\n                        + \"WHERE keyspace_name='ks' AND columnfamily_name='droptable'\");\n        if (rows.iterator().hasNext()) {\n            fail(\"This table should have been deleted\");\n        }\n    }\n\n    @Test(groups = \"short\")\n    public void should_create_an_index() {\n        // Create a table\n        session().execute(SchemaBuilder.createTable(\"ks\", \"CreateIndex\")\n                        .addPartitionKey(\"a\", DataType.cint())\n                        .addClusteringColumn(\"b\", DataType.cint())\n                        .addColumn(\"c\", DataType.map(DataType.cint(), DataType.cint()))\n        );\n\n        // Create an index on a regular column of the table\n        session().execute(SchemaBuilder.createIndex(\"ks_Index\")\n                        .onTable(\"ks\", \"CreateIndex\")\n                        .andColumn(\"b\")\n        );\n        session().execute(SchemaBuilder.createIndex(\"ks_IndexOnMap\")\n                        .onTable(\"ks\", \"CreateIndex\")\n                        .andKeysOfColumn(\"c\")\n        );\n\n        // Verify that the indexes exist on the right columns\n        ResultSet rows = session().execute(\n                \"SELECT column_name, index_name, index_options, index_type, component_index \"\n                        + \"FROM system.schema_columns \"\n                        + \"WHERE keyspace_name='ks' \"\n                        + \"AND columnfamily_name='createindex' \"\n                        + \"AND column_name IN ('b', 'c')\");\n        Iterator<Row> iterator = rows.iterator();\n        verifyNextIndexDefinition(iterator, \"ks_Index\", \"{}\", \"COMPOSITES\", 0);\n        verifyNextIndexDefinition(iterator, \"ks_IndexOnMap\", \"{\\\"index_keys\\\":\\\"\\\"}\", \"COMPOSITES\", 1);\n        assertThat(iterator.hasNext()).isFalse();\n    }\n\n    private void verifyNextIndexDefinition(Iterator<Row> iterator, String name, String options, String type,\n                                           int index) {\n        Row nextIndex = iterator.next();\n        assertThat(nextIndex.getString(\"index_name\")).isEqualTo(name);\n        assertThat(nextIndex.getString(\"index_options\")).isEqualTo(options);\n        assertThat(nextIndex.getString(\"index_type\")).isEqualTo(type);\n        assertThat(nextIndex.getInt(\"component_index\")).isEqualTo(index);\n    }\n\n    @Test(groups = \"short\")\n    public void should_drop_an_index() {\n        // Create a table\n        session().execute(SchemaBuilder.createTable(\"ks\", \"DropIndex\")\n                        .addPartitionKey(\"a\", DataType.cint())\n                        .addClusteringColumn(\"b\", DataType.cint())\n        );\n\n        // Create an index\n        // Note: we have to pick a lower-case name because Cassandra uses the CamelCase index name at creation\n        // but a lowercase index name at deletion\n        // See : https://issues.apache.org/jira/browse/CASSANDRA-8365\n        session().execute(SchemaBuilder.createIndex(\"ks_index\")\n                        .onTable(\"ks\", \"DropIndex\")\n                        .andColumn(\"b\")\n        );\n\n        // Verify that the PK index and the secondary indexes both exist\n        assertThat(numberOfIndexedColumns()).isEqualTo(1);\n\n        // Delete the index\n        session().execute(SchemaBuilder.dropIndex(\"ks\", \"ks_index\"));\n\n        // Verify that only the PK index exists\n        assertThat(numberOfIndexedColumns()).isEqualTo(0);\n    }\n\n    private int numberOfIndexedColumns() {\n        ResultSet columns = session().execute(\n                \"SELECT * \"\n                        + \"FROM system.schema_columns \"\n                        + \"WHERE keyspace_name='ks' \"\n                        + \"AND columnfamily_name='dropindex' \");\n        int count = 0;\n        for (Row column : columns) {\n            if (column.getString(\"index_name\") != null)\n                count += 1;\n        }\n        return count;\n    }\n}\n","binary":"false","copies":"2","sample_repo_name":"datastax/java-driver","sample_ref":"refs/heads/3.0","sample_path":"driver-core/src/test/java/com/datastax/driver/core/schemabuilder/SchemaBuilderIT.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7dfc9d8ce49f4e6c70a5ba9f9a1015e35e224675","size":"16756","content":"/*\n *      Copyright (C) 2012-2015 DataStax Inc.\n *\n *   Licensed under the Apache License, Version 2.0 (the \"License\");\n *   you may not use this file except in compliance with the License.\n *   You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *   Unless required by applicable law or agreed to in writing, software\n *   distributed under the License is distributed on an \"AS IS\" BASIS,\n *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *   See the License for the specific language governing permissions and\n *   limitations under the License.\n */\npackage com.datastax.driver.core;\n\nimport com.datastax.driver.core.exceptions.DriverInternalError;\nimport com.datastax.driver.core.utils.Bytes;\nimport com.google.common.collect.ImmutableMap;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.*;\n\n/*\n * Parse data types from schema tables, for Cassandra 3.0 and above.\n * In these versions, data types appear as class names, like \"org.apache.cassandra.db.marshal.AsciiType\"\n * or \"org.apache.cassandra.db.marshal.TupleType(org.apache.cassandra.db.marshal.Int32Type,org.apache.cassandra.db.marshal.Int32Type)\".\n *\n * This is modified (and simplified) from Cassandra's TypeParser class to suit\n * our needs. In particular it's not very efficient, but it doesn't really matter\n * since it's rarely used and never in a critical path.\n *\n * Note that those methods all throw DriverInternalError when there is a parsing\n * problem because in theory we'll only parse class names coming from Cassandra and\n * so there shouldn't be anything wrong with them.\n */\nclass DataTypeClassNameParser {\n    private static final Logger logger = LoggerFactory.getLogger(DataTypeClassNameParser.class);\n\n    private static final String REVERSED_TYPE = \"org.apache.cassandra.db.marshal.ReversedType\";\n    private static final String FROZEN_TYPE = \"org.apache.cassandra.db.marshal.FrozenType\";\n    private static final String COMPOSITE_TYPE = \"org.apache.cassandra.db.marshal.CompositeType\";\n    private static final String COLLECTION_TYPE = \"org.apache.cassandra.db.marshal.ColumnToCollectionType\";\n    private static final String LIST_TYPE = \"org.apache.cassandra.db.marshal.ListType\";\n    private static final String SET_TYPE = \"org.apache.cassandra.db.marshal.SetType\";\n    private static final String MAP_TYPE = \"org.apache.cassandra.db.marshal.MapType\";\n    private static final String UDT_TYPE = \"org.apache.cassandra.db.marshal.UserType\";\n    private static final String TUPLE_TYPE = \"org.apache.cassandra.db.marshal.TupleType\";\n\n    private static ImmutableMap<String, DataType> cassTypeToDataType =\n            new ImmutableMap.Builder<String, DataType>()\n                    .put(\"org.apache.cassandra.db.marshal.AsciiType\", DataType.ascii())\n                    .put(\"org.apache.cassandra.db.marshal.LongType\", DataType.bigint())\n                    .put(\"org.apache.cassandra.db.marshal.BytesType\", DataType.blob())\n                    .put(\"org.apache.cassandra.db.marshal.BooleanType\", DataType.cboolean())\n                    .put(\"org.apache.cassandra.db.marshal.CounterColumnType\", DataType.counter())\n                    .put(\"org.apache.cassandra.db.marshal.DecimalType\", DataType.decimal())\n                    .put(\"org.apache.cassandra.db.marshal.DoubleType\", DataType.cdouble())\n                    .put(\"org.apache.cassandra.db.marshal.FloatType\", DataType.cfloat())\n                    .put(\"org.apache.cassandra.db.marshal.InetAddressType\", DataType.inet())\n                    .put(\"org.apache.cassandra.db.marshal.Int32Type\", DataType.cint())\n                    .put(\"org.apache.cassandra.db.marshal.UTF8Type\", DataType.text())\n                    .put(\"org.apache.cassandra.db.marshal.TimestampType\", DataType.timestamp())\n                    .put(\"org.apache.cassandra.db.marshal.SimpleDateType\", DataType.date())\n                    .put(\"org.apache.cassandra.db.marshal.TimeType\", DataType.time())\n                    .put(\"org.apache.cassandra.db.marshal.UUIDType\", DataType.uuid())\n                    .put(\"org.apache.cassandra.db.marshal.IntegerType\", DataType.varint())\n                    .put(\"org.apache.cassandra.db.marshal.TimeUUIDType\", DataType.timeuuid())\n                    .put(\"org.apache.cassandra.db.marshal.ByteType\", DataType.tinyint())\n                    .put(\"org.apache.cassandra.db.marshal.ShortType\", DataType.smallint())\n                    .build();\n\n    static DataType parseOne(String className, ProtocolVersion protocolVersion, CodecRegistry codecRegistry) {\n        boolean frozen = false;\n        if (isReversed(className)) {\n            // Just skip the ReversedType part, we don't care\n            className = getNestedClassName(className);\n        } else if (isFrozen(className)) {\n            frozen = true;\n            className = getNestedClassName(className);\n        }\n\n        Parser parser = new Parser(className, 0);\n        String next = parser.parseNextName();\n\n        if (next.startsWith(LIST_TYPE))\n            return DataType.list(parseOne(parser.getTypeParameters().get(0), protocolVersion, codecRegistry), frozen);\n\n        if (next.startsWith(SET_TYPE))\n            return DataType.set(parseOne(parser.getTypeParameters().get(0), protocolVersion, codecRegistry), frozen);\n\n        if (next.startsWith(MAP_TYPE)) {\n            List<String> params = parser.getTypeParameters();\n            return DataType.map(parseOne(params.get(0), protocolVersion, codecRegistry), parseOne(params.get(1), protocolVersion, codecRegistry), frozen);\n        }\n\n        if (frozen)\n            logger.warn(\"Got o.a.c.db.marshal.FrozenType for something else than a collection, \"\n                    + \"this driver version might be too old for your version of Cassandra\");\n\n        if (isUserType(next)) {\n            ++parser.idx; // skipping '('\n\n            String keyspace = parser.readOne();\n            parser.skipBlankAndComma();\n            String typeName = TypeCodec.varchar().deserialize(Bytes.fromHexString(\"0x\" + parser.readOne()), protocolVersion);\n            parser.skipBlankAndComma();\n            Map<String, String> rawFields = parser.getNameAndTypeParameters();\n            List<UserType.Field> fields = new ArrayList<UserType.Field>(rawFields.size());\n            for (Map.Entry<String, String> entry : rawFields.entrySet())\n                fields.add(new UserType.Field(entry.getKey(), parseOne(entry.getValue(), protocolVersion, codecRegistry)));\n            return new UserType(keyspace, typeName, fields, protocolVersion, codecRegistry);\n        }\n\n        if (isTupleType(next)) {\n            List<String> rawTypes = parser.getTypeParameters();\n            List<DataType> types = new ArrayList<DataType>(rawTypes.size());\n            for (String rawType : rawTypes) {\n                types.add(parseOne(rawType, protocolVersion, codecRegistry));\n            }\n            return new TupleType(types, protocolVersion, codecRegistry);\n        }\n\n        DataType type = cassTypeToDataType.get(next);\n        return type == null ? DataType.custom(className) : type;\n    }\n\n    public static boolean isReversed(String className) {\n        return className.startsWith(REVERSED_TYPE);\n    }\n\n    public static boolean isFrozen(String className) {\n        return className.startsWith(FROZEN_TYPE);\n    }\n\n    private static String getNestedClassName(String className) {\n        Parser p = new Parser(className, 0);\n        p.parseNextName();\n        List<String> l = p.getTypeParameters();\n        if (l.size() != 1)\n            throw new IllegalStateException();\n        className = l.get(0);\n        return className;\n    }\n\n    public static boolean isUserType(String className) {\n        return className.startsWith(UDT_TYPE);\n    }\n\n    public static boolean isTupleType(String className) {\n        return className.startsWith(TUPLE_TYPE);\n    }\n\n    private static boolean isComposite(String className) {\n        return className.startsWith(COMPOSITE_TYPE);\n    }\n\n    private static boolean isCollection(String className) {\n        return className.startsWith(COLLECTION_TYPE);\n    }\n\n    static ParseResult parseWithComposite(String className, ProtocolVersion protocolVersion, CodecRegistry codecRegistry) {\n        Parser parser = new Parser(className, 0);\n\n        String next = parser.parseNextName();\n        if (!isComposite(next))\n            return new ParseResult(parseOne(className, protocolVersion, codecRegistry), isReversed(next));\n\n        List<String> subClassNames = parser.getTypeParameters();\n        int count = subClassNames.size();\n        String last = subClassNames.get(count - 1);\n        Map<String, DataType> collections = new HashMap<String, DataType>();\n        if (isCollection(last)) {\n            count--;\n            Parser collectionParser = new Parser(last, 0);\n            collectionParser.parseNextName(); // skips columnToCollectionType\n            Map<String, String> params = collectionParser.getCollectionsParameters();\n            for (Map.Entry<String, String> entry : params.entrySet())\n                collections.put(entry.getKey(), parseOne(entry.getValue(), protocolVersion, codecRegistry));\n        }\n\n        List<DataType> types = new ArrayList<DataType>(count);\n        List<Boolean> reversed = new ArrayList<Boolean>(count);\n        for (int i = 0; i < count; i++) {\n            types.add(parseOne(subClassNames.get(i), protocolVersion, codecRegistry));\n            reversed.add(isReversed(subClassNames.get(i)));\n        }\n\n        return new ParseResult(true, types, reversed, collections);\n    }\n\n    static class ParseResult {\n        public final boolean isComposite;\n        public final List<DataType> types;\n        public final List<Boolean> reversed;\n        public final Map<String, DataType> collections;\n\n        private ParseResult(DataType type, boolean reversed) {\n            this(false,\n                    Collections.<DataType>singletonList(type),\n                    Collections.<Boolean>singletonList(reversed),\n                    Collections.<String, DataType>emptyMap());\n        }\n\n        private ParseResult(boolean isComposite, List<DataType> types, List<Boolean> reversed, Map<String, DataType> collections) {\n            this.isComposite = isComposite;\n            this.types = types;\n            this.reversed = reversed;\n            this.collections = collections;\n        }\n    }\n\n    private static class Parser {\n\n        private final String str;\n        private int idx;\n\n        private Parser(String str, int idx) {\n            this.str = str;\n            this.idx = idx;\n        }\n\n        public String parseNextName() {\n            skipBlank();\n            return readNextIdentifier();\n        }\n\n        public String readOne() {\n            String name = parseNextName();\n            String args = readRawArguments();\n            return name + args;\n        }\n\n        // Assumes we have just read a class name and read it's potential arguments\n        // blindly. I.e. it assume that either parsing is done or that we're on a '('\n        // and this reads everything up until the corresponding closing ')'. It\n        // returns everything read, including the enclosing parenthesis.\n        private String readRawArguments() {\n            skipBlank();\n\n            if (isEOS() || str.charAt(idx) == ')' || str.charAt(idx) == ',')\n                return \"\";\n\n            if (str.charAt(idx) != '(')\n                throw new IllegalStateException(String.format(\"Expecting char %d of %s to be '(' but '%c' found\", idx, str, str.charAt(idx)));\n\n            int i = idx;\n            int open = 1;\n            while (open > 0) {\n                ++idx;\n\n                if (isEOS())\n                    throw new IllegalStateException(\"Non closed parenthesis\");\n\n                if (str.charAt(idx) == '(') {\n                    open++;\n                } else if (str.charAt(idx) == ')') {\n                    open--;\n                }\n            }\n            // we've stopped at the last closing ')' so move past that\n            ++idx;\n            return str.substring(i, idx);\n        }\n\n        public List<String> getTypeParameters() {\n            List<String> list = new ArrayList<String>();\n\n            if (isEOS())\n                return list;\n\n            if (str.charAt(idx) != '(')\n                throw new IllegalStateException();\n\n            ++idx; // skipping '('\n\n            while (skipBlankAndComma()) {\n                if (str.charAt(idx) == ')') {\n                    ++idx;\n                    return list;\n                }\n\n                try {\n                    list.add(readOne());\n                } catch (DriverInternalError e) {\n                    DriverInternalError ex = new DriverInternalError(String.format(\"Exception while parsing '%s' around char %d\", str, idx));\n                    ex.initCause(e);\n                    throw ex;\n                }\n            }\n            throw new DriverInternalError(String.format(\"Syntax error parsing '%s' at char %d: unexpected end of string\", str, idx));\n        }\n\n        public Map<String, String> getCollectionsParameters() {\n            if (isEOS())\n                return Collections.<String, String>emptyMap();\n\n            if (str.charAt(idx) != '(')\n                throw new IllegalStateException();\n\n            ++idx; // skipping '('\n\n            return getNameAndTypeParameters();\n        }\n\n        // Must be at the start of the first parameter to read\n        public Map<String, String> getNameAndTypeParameters() {\n            // The order of the hashmap matters for UDT\n            Map<String, String> map = new LinkedHashMap<String, String>();\n\n            while (skipBlankAndComma()) {\n                if (str.charAt(idx) == ')') {\n                    ++idx;\n                    return map;\n                }\n\n                String bbHex = readNextIdentifier();\n                String name = null;\n                try {\n                    name = TypeCodec.varchar().deserialize(Bytes.fromHexString(\"0x\" + bbHex), ProtocolVersion.NEWEST_SUPPORTED);\n                } catch (NumberFormatException e) {\n                    throwSyntaxError(e.getMessage());\n                }\n\n                skipBlank();\n                if (str.charAt(idx) != ':')\n                    throwSyntaxError(\"expecting ':' token\");\n\n                ++idx;\n                skipBlank();\n                try {\n                    map.put(name, readOne());\n                } catch (DriverInternalError e) {\n                    DriverInternalError ex = new DriverInternalError(String.format(\"Exception while parsing '%s' around char %d\", str, idx));\n                    ex.initCause(e);\n                    throw ex;\n                }\n            }\n            throw new DriverInternalError(String.format(\"Syntax error parsing '%s' at char %d: unexpected end of string\", str, idx));\n        }\n\n        private void throwSyntaxError(String msg) {\n            throw new DriverInternalError(String.format(\"Syntax error parsing '%s' at char %d: %s\", str, idx, msg));\n        }\n\n        private boolean isEOS() {\n            return isEOS(str, idx);\n        }\n\n        private static boolean isEOS(String str, int i) {\n            return i >= str.length();\n        }\n\n        private void skipBlank() {\n            idx = skipBlank(str, idx);\n        }\n\n        private static int skipBlank(String str, int i) {\n            while (!isEOS(str, i) && ParseUtils.isBlank(str.charAt(i)))\n                ++i;\n\n            return i;\n        }\n\n        // skip all blank and at best one comma, return true if there not EOS\n        private boolean skipBlankAndComma() {\n            boolean commaFound = false;\n            while (!isEOS()) {\n                int c = str.charAt(idx);\n                if (c == ',') {\n                    if (commaFound)\n                        return true;\n                    else\n                        commaFound = true;\n                } else if (!ParseUtils.isBlank(c)) {\n                    return true;\n                }\n                ++idx;\n            }\n            return false;\n        }\n\n        // left idx positioned on the character stopping the read\n        public String readNextIdentifier() {\n            int i = idx;\n            while (!isEOS() && ParseUtils.isIdentifierChar(str.charAt(idx)))\n                ++idx;\n\n            return str.substring(i, idx);\n        }\n\n        public char readNextChar() {\n            skipBlank();\n            return str.charAt(idx++);\n        }\n\n        @Override\n        public String toString() {\n            return str.substring(0, idx) + \"[\" + (idx == str.length() ? \"\" : str.charAt(idx)) + \"]\" + str.substring(idx + 1);\n        }\n    }\n}\n","binary":"false","copies":"2","sample_repo_name":"datastax/java-driver","sample_ref":"refs/heads/3.0","sample_path":"driver-core/src/main/java/com/datastax/driver/core/DataTypeClassNameParser.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0a77cede71e8b86a9b632aae9b1247e7e005e90b","size":"6612","content":"/*******************************************************************************\n * Copyright (c) 2012-2016 Codenvy, S.A.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Codenvy, S.A. - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.che.ide.actions;\n\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Lists;\nimport com.google.gwt.core.client.Callback;\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\n\nimport org.eclipse.che.api.analytics.client.logger.AnalyticsEventLogger;\nimport org.eclipse.che.api.promises.client.Operation;\nimport org.eclipse.che.api.promises.client.OperationException;\nimport org.eclipse.che.api.promises.client.Promise;\nimport org.eclipse.che.api.promises.client.callback.CallbackPromiseHelper;\nimport org.eclipse.che.commons.annotation.Nullable;\nimport org.eclipse.che.ide.CoreLocalizationConstant;\nimport org.eclipse.che.ide.Resources;\nimport org.eclipse.che.ide.api.action.Action;\nimport org.eclipse.che.ide.api.action.ActionEvent;\nimport org.eclipse.che.ide.api.action.PromisableAction;\nimport org.eclipse.che.ide.api.app.AppContext;\nimport org.eclipse.che.ide.api.selection.Selection;\nimport org.eclipse.che.ide.api.selection.SelectionAgent;\nimport org.eclipse.che.ide.part.explorer.project.ProjectExplorerPresenter;\nimport org.eclipse.che.ide.project.node.ResourceBasedNode;\nimport org.eclipse.che.ide.project.node.remove.DeleteNodeHandler;\n\nimport java.util.List;\n\nimport static org.eclipse.che.api.promises.client.callback.CallbackPromiseHelper.createFromCallback;\n\n/**\n * Action for deleting an item which is selected in 'Project Explorer'.\n *\n * @author Artem Zatsarynnyy\n * @author Vlad Zhukovskyi\n */\n@Singleton\npublic class DeleteItemAction extends Action implements PromisableAction {\n    private final AnalyticsEventLogger     eventLogger;\n    private final SelectionAgent           selectionAgent;\n    private final DeleteNodeHandler        deleteNodeHandler;\n    private final AppContext               appContext;\n    private final ProjectExplorerPresenter projectExplorer;\n\n    private Callback<Void, Throwable> actionCompletedCallBack;\n\n    @Inject\n    public DeleteItemAction(final Resources resources,\n                            final AnalyticsEventLogger eventLogger,\n                            final SelectionAgent selectionAgent,\n                            final DeleteNodeHandler deleteNodeHandler,\n                            final CoreLocalizationConstant localization,\n                            final AppContext appContext,\n                            final ProjectExplorerPresenter projectExplorer) {\n        super(localization.deleteItemActionText(), localization.deleteItemActionDescription(), null, resources.delete());\n        this.selectionAgent = selectionAgent;\n        this.eventLogger = eventLogger;\n        this.deleteNodeHandler = deleteNodeHandler;\n        this.appContext = appContext;\n        this.projectExplorer = projectExplorer;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        eventLogger.log(this);\n\n        final Selection<?> selection = selectionAgent.getSelection();\n\n        if (selection == null || selection.isEmpty()) {\n            throw new IllegalStateException(\"Nodes weren't found in the selection agent\");\n        }\n\n        if (Iterables.all(selection.getAllElements(), isResourceBasedNode())) {\n            final List<ResourceBasedNode<?>> nodes = Lists.newArrayList(Iterables.transform(selection.getAllElements(), castNode()));\n            deleteNodeHandler.deleteAll(nodes, true).then(synchronizeProjectView()).then(actionComplete());\n        }\n    }\n\n    private Operation<Void> synchronizeProjectView() {\n        return new Operation<Void>() {\n            @Override\n            public void apply(Void arg) throws OperationException {\n                projectExplorer.reloadChildren();\n            }\n        };\n    }\n\n    private Operation<Void> actionComplete() {\n        return new Operation<Void>() {\n            @Override\n            public void apply(Void arg) throws OperationException {\n                if (actionCompletedCallBack != null) {\n                    actionCompletedCallBack.onSuccess(null);\n                }\n            }\n        };\n    }\n\n    private Predicate<Object> isResourceBasedNode() {\n        return new Predicate<Object>() {\n            @Override\n            public boolean apply(@Nullable Object node) {\n                return node instanceof ResourceBasedNode;\n            }\n        };\n    }\n\n    private com.google.common.base.Function<Object, ResourceBasedNode<?>> castNode() {\n        return new com.google.common.base.Function<Object, ResourceBasedNode<?>>() {\n            @Nullable\n            @Override\n            public ResourceBasedNode<?> apply(Object o) {\n                if (o instanceof ResourceBasedNode<?>) {\n                    return (ResourceBasedNode<?>)o;\n                }\n\n                throw new IllegalArgumentException(\"Node isn't resource based\");\n            }\n        };\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public void update(ActionEvent e) {\n        if ((appContext.getCurrentProject() == null && !appContext.getCurrentUser().isUserPermanent()) ||\n            (appContext.getCurrentProject() != null && appContext.getCurrentProject().isReadOnly())) {\n            e.getPresentation().setVisible(true);\n            e.getPresentation().setEnabled(false);\n            return;\n        }\n\n        final Selection<?> selection = selectionAgent.getSelection();\n\n        if (selection == null || selection.isEmpty()) {\n            e.getPresentation().setEnabled(false);\n            return;\n        }\n\n        boolean enable = Iterables.all(selection.getAllElements(), isResourceBasedNode());\n\n        e.getPresentation().setEnabled(enable);\n    }\n\n    @Override\n    public Promise<Void> promise(final ActionEvent event) {\n        final CallbackPromiseHelper.Call<Void, Throwable> call = new CallbackPromiseHelper.Call<Void, Throwable>() {\n            @Override\n            public void makeCall(Callback<Void, Throwable> callback) {\n                actionCompletedCallBack = callback;\n                actionPerformed(event);\n            }\n        };\n\n        return createFromCallback(call);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"codenvy/che-core","sample_ref":"refs/heads/3.x","sample_path":"ide/che-core-ide-app/src/main/java/org/eclipse/che/ide/actions/DeleteItemAction.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"38a5964f23ba761658cb2f743cc2669b2deb9c44","size":"1531","content":"/*******************************************************************************\n * Copyright (c) 2012-2016 Codenvy, S.A.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Codenvy, S.A. - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.che.ide.util;\n\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * @author Vitaly Parfonov\n */\npublic class CollectionUtils {\n\n\n    /**\n     * Look up giving map for giving value collect pick all suitable keys\n     * @param map\n     * @param value\n     * @return ste of keys mapped to the giving value\n     */\n    public static <T, E> Set<T> getKeysByValue(Map<T, E> map, E value) {\n        Set<T> keys = new HashSet<T>();\n        for (Map.Entry<T, E> entry : map.entrySet()) {\n            if (value.equals(entry.getValue())) {\n                keys.add(entry.getKey());\n            }\n        }\n        return keys;\n    }\n\n\n    /**\n     *\n     * @param map\n     * @param value\n     * @return\n     */\n    public static <T, E> T getKeyByValue(Map<T, E> map, E value) {\n        for (Map.Entry<T, E> entry : map.entrySet()) {\n            if (value.equals(entry.getValue())) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"codenvy/che-core","sample_ref":"refs/heads/3.x","sample_path":"commons/che-core-commons-gwt/src/main/java/org/eclipse/che/ide/util/CollectionUtils.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6b965b85931c0986860f450e666290215041a402","size":"5352","content":"/*******************************************************************************\n * Copyright (c) 2012-2016 Codenvy, S.A.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Codenvy, S.A. - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.che.api.factory;\n\n/**\n * Message constants for factory builder.\n */\npublic class FactoryConstants {\n    public static final String INVALID_PARAMETER_MESSAGE =\n            \"Passed in an invalid parameter. You either provided a non-valid parameter, or that parameter is not \" +\n            \"accepted for this Factory version. For more information, please visit \" +\n            \"http://docs.codenvy.com/user/project-lifecycle/#configuration-reference\";\n\n    public static final String INVALID_VERSION_MESSAGE =\n            \"You have provided an inaccurate or deprecated Factory Version. For more information, \" +\n            \"please visit http://docs.codenvy.com/user/project-lifecycle/#configuration-reference\";\n\n    public static final String UNPARSABLE_FACTORY_MESSAGE =\n            \"We cannot parse the provided factory. For more information, please visit http://docs.codenvy\" +\n            \".com/user/project-lifecycle/#configuration-reference\";\n\n    public static final String MISSING_MANDATORY_MESSAGE =\n            \"You are missing a mandatory parameter.  For more information, please visit http://docs.codenvy\" +\n            \".com/user/project-lifecycle/#configuration-reference\";\n\n    /* Used in factory servlet*/\n    public static final String ILLEGAL_HOSTNAME_MESSAGE =\n            \"This Factory has its access restricted by certain hostname. Your client does not match the specified \" +\n            \"policy. Please contact the owner of this Factory for more information.\";\n\n    public static final String PARAMETRIZED_INVALID_PARAMETER_MESSAGE =\n            \"You have provided an invalid parameter %s for this version of Factory parameters %s. For more \" +\n            \"information, please visit http://docs.codenvy.com/user/project-lifecycle/#configuration-reference\";\n\n    public static final String PARAMETRIZED_ILLEGAL_ACCOUNTID_PARAMETER_MESSAGE =\n            \"You do not have a valid accountId. You could have provided the wrong value, your subscription has expired, \" +\n            \"or you do not have a valid subscription account. \" +\n            \"Please contact info@codenvy.com with any questions. \\n\" +\n            \"accountId Submitted: %s\";\n\n    /* Used in factory servlet*/\n    public static final String PARAMETRIZED_ILLEGAL_TRACKED_PARAMETER_MESSAGE =\n            \"You do not have a valid accountId. Your Factory configuration has a parameter that can only be used with a \" +\n            \"Tracked Factory subscription. You could have provided the wrong value, \" +\n            \"your subscription has expired, or you do not have a valid subscription account. \" +\n            \"Please contact info@codenvy.com with any questions. \\n\" +\n            \"accountId Submitted: %s \\n\" +\n            \"Invalid Parameter Name: %s\";\n\n    public static final String INVALID_VALIDSINCE_MESSAGE = \"Valid Since date cannot occur before the current date.\";\n\n    public static final String INVALID_VALIDUNTIL_MESSAGE = \"Valid Until date cannot occur before the current date.\";\n\n    public static final String INVALID_VALIDSINCEUNTIL_MESSAGE = \"Valid Until date should occur after the Valid Since date.\";\n\n    public static final String INVALID_ACTION_SECTION = \"The action %s is not allowed in this IDE event section.\";\n\n    public static final String INVALID_OPENFILE_ACTION = \"The openFile action requires 'file' property to be set.\";\n\n    public static final String INVALID_FIND_REPLACE_ACTION = \"The findReplace action requires 'in', \" +\n                                                             \"'find' and 'replace' properties to be set.\";\n\n    public static final String INVALID_WELCOME_PAGE_ACTION = \"The openWelcomePage action requires 'nonAuthenticatedContentUrl', \" +\n                                                             \"'authenticatedContentUrl' properties to be set.\";\n\n    public static final String ILLEGAL_REQUIRE_AUTHENTICATION_FOR_NAMED_WORKSPACE_MESSAGE =\n            \"This factory was improperly configured. The parameter 'workspace.type=named' requires 'policies.requireAuthentication=true'.\";\n\n    public static final String ILLEGAL_FACTORY_BY_VALIDSINCE_MESSAGE =\n            \"This Factory is not yet valid due to time restrictions applied by its owner. Please, \" +\n            \"contact owner for more information.\";\n\n    public static final String ILLEGAL_FACTORY_BY_VALIDUNTIL_MESSAGE =\n            \"This Factory has expired due to time restrictions applied by its owner. Please, \" +\n            \"contact owner for more information.\";\n\n    public static final String PARAMETRIZED_ILLEGAL_PARAMETER_VALUE_MESSAGE =\n            \"The parameter %s has a value submitted %s with a value that is unexpected. For more information, \" +\n            \"please visit http://docs.codenvy.com/user/project-lifecycle/#configuration-reference\";\n\n    private FactoryConstants() {\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"codenvy/che-core","sample_ref":"refs/heads/3.x","sample_path":"platform-api/che-core-api-factory/src/main/java/org/eclipse/che/api/factory/FactoryConstants.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0ccf390ecaafd9a862d9d5e5004fea89791b08f4","size":"1661","content":"/*******************************************************************************\n * Copyright (c) 2012-2016 Codenvy, S.A.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Codenvy, S.A. - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.che.ide.projectimport.zip;\n\nimport org.eclipse.che.api.project.shared.dto.ImportProject;\nimport org.eclipse.che.ide.api.project.wizard.ImportWizardRegistrar;\nimport org.eclipse.che.ide.api.wizard.WizardPage;\nimport com.google.inject.Inject;\nimport com.google.inject.Provider;\n\nimport javax.validation.constraints.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.eclipse.che.api.project.shared.Constants.ZIP_IMPORTER_ID;\n\n/**\n * Provides information for registering ZIP importer into import wizard.\n *\n * @author Artem Zatsarynnyy\n */\npublic class ZipImportWizardRegistrar implements ImportWizardRegistrar {\n    private final List<Provider<? extends WizardPage<ImportProject>>> wizardPages;\n\n    @Inject\n    public ZipImportWizardRegistrar(Provider<ZipImporterPagePresenter> provider) {\n        wizardPages = new ArrayList<>();\n        wizardPages.add(provider);\n    }\n\n    @NotNull\n    public String getImporterId() {\n        return ZIP_IMPORTER_ID;\n    }\n\n    @NotNull\n    public List<Provider<? extends WizardPage<ImportProject>>> getWizardPages() {\n        return wizardPages;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"codenvy/che-core","sample_ref":"refs/heads/3.x","sample_path":"ide/che-core-ide-app/src/main/java/org/eclipse/che/ide/projectimport/zip/ZipImportWizardRegistrar.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e063a2f3e78e1473e60dd959fa398cb313553f73","size":"3084","content":"/*******************************************************************************\n * Copyright (c) 2012-2016 Codenvy, S.A.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Codenvy, S.A. - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.che.ide.jseditor.client.annotation;\n\nimport elemental.dom.Element;\nimport elemental.html.LIElement;\n\nimport org.eclipse.che.ide.ui.Tooltip;\nimport org.eclipse.che.ide.ui.Tooltip.Builder;\nimport org.eclipse.che.ide.ui.Tooltip.TooltipPositionerBuilder;\nimport org.eclipse.che.ide.ui.Tooltip.TooltipRenderer;\nimport org.eclipse.che.ide.ui.menu.PositionController;\nimport org.eclipse.che.ide.ui.menu.PositionController.Positioner;\nimport org.eclipse.che.ide.ui.menu.PositionController.PositionerBuilder;\nimport org.eclipse.che.ide.util.dom.Elements;\n\n/**\n * Factory for a tooltip that shows list of messages.\n */\npublic final class ListTooltipFactory {\n\n    private ListTooltipFactory() {\n    }\n\n    /** Static factory method for creating a list tooltip. */\n    public static Tooltip create(final Element targetElement,\n                                 final String header,\n                                 final PositionController.VerticalAlign vAlign,\n                                 final PositionController.HorizontalAlign hAlign,\n                                 final String... tooltipText) {\n        final PositionerBuilder positionrBuilder = new TooltipPositionerBuilder()\n                                                                                 .setVerticalAlign(vAlign)\n                                                                                 .setHorizontalAlign(hAlign);\n        final Positioner positioner = positionrBuilder.buildAnchorPositioner(targetElement);\n        final Builder builder = new Builder(targetElement, positioner);\n        builder.setTooltipRenderer(new ListRenderer(header, tooltipText));\n\n        return builder.build();\n    }\n\n    private static class ListRenderer implements TooltipRenderer {\n        private final String header;\n        private final String[] tooltipText;\n\n        ListRenderer(final String header, final String... tooltipText) {\n            this.tooltipText = tooltipText;\n            this.header = header;\n        }\n\n        @Override\n        public Element renderDom() {\n            final Element content = Elements.createSpanElement();\n            content.setInnerText(header);\n            final Element list = Elements.createUListElement();\n            for (final String tooltip : tooltipText) {\n                final LIElement item = Elements.createLiElement();\n                item.appendChild(Elements.createTextNode(tooltip));\n                list.appendChild(item);\n            }\n            content.appendChild(list);\n            return content;\n        }\n    }\n}\n","binary":"false","copies":"4","sample_repo_name":"codenvy/che-core","sample_ref":"refs/heads/3.x","sample_path":"ide/che-core-ide-jseditor/src/main/java/org/eclipse/che/ide/jseditor/client/annotation/ListTooltipFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"20a11413ee869f483a88fac908c5daf71dc3172c","size":"1811","content":"// Copyright 2005 The Apache Software Foundation\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\npackage org.apache.tapestry;\r\n\r\nimport java.io.Serializable;\r\n\r\nimport javax.servlet.http.HttpSessionBindingEvent;\r\nimport javax.servlet.http.HttpSessionBindingListener;\r\n\r\n/**\r\n * Base implementation of {@link org.apache.tapestry.SessionStoreOptimized}. Subclasses should\r\n * invoke {@link #markSessionStoreNeeded()} any time internal state changed.\r\n * \r\n * @author Howard M. Lewis Ship\r\n * @since 4.0\r\n */\r\npublic class BaseSessionStoreOptimized implements SessionStoreOptimized, Serializable,\r\n        HttpSessionBindingListener\r\n{\r\n    private static final long serialVersionUID = -2786704444616789831L;\r\n\r\n    private transient boolean _dirty;\r\n\r\n    /**\r\n     * Clears the dirty flag.\r\n     */\r\n    public void valueBound(HttpSessionBindingEvent event)\r\n    {\r\n        _dirty = false;\r\n    }\r\n\r\n    /**\r\n     * Does nothing.\r\n     */\r\n    public void valueUnbound(HttpSessionBindingEvent event)\r\n    {\r\n    }\r\n\r\n    /**\r\n     * Sets the dirty flag.\r\n     */\r\n    protected void markSessionStoreNeeded()\r\n    {\r\n        _dirty = true;\r\n    }\r\n\r\n    /**\r\n     * Returns the dirty flag.\r\n     */\r\n    public boolean isStoreToSessionNeeded()\r\n    {\r\n        return _dirty;\r\n    }\r\n\r\n}\r\n","binary":"false","copies":"2","sample_repo_name":"apache/tapestry4","sample_ref":"refs/heads/4.0","sample_path":"framework/src/java/org/apache/tapestry/BaseSessionStoreOptimized.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0e378347106315e53cb318f6f32af6756fd30eb8","size":"2503","content":"/*\n * Copyright 2012 The Netty Project\n *\n * The Netty Project licenses this file to you under the Apache License,\n * version 2.0 (the \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at:\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\npackage io.netty.buffer;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\n/**\n * Tests duplicated channel buffers\n */\npublic class DuplicatedByteBufTest extends AbstractByteBufTest {\n\n    @Override\n    protected ByteBuf newBuffer(int length) {\n        ByteBuf wrapped = Unpooled.buffer(length);\n        ByteBuf buffer = new DuplicatedByteBuf(wrapped);\n        assertEquals(wrapped.writerIndex(), buffer.writerIndex());\n        assertEquals(wrapped.readerIndex(), buffer.readerIndex());\n        return buffer;\n    }\n\n    @Test(expected = NullPointerException.class)\n    public void shouldNotAllowNullInConstructor() {\n        new DuplicatedByteBuf(null);\n    }\n\n    // See https://github.com/netty/netty/issues/1800\n    @Test\n    public void testIncreaseCapacityWrapped() {\n        ByteBuf buffer = newBuffer(8);\n        ByteBuf wrapped = buffer.unwrap();\n        wrapped.writeByte(0);\n        wrapped.readerIndex(wrapped.readerIndex() + 1);\n        buffer.writerIndex(buffer.writerIndex() + 1);\n        wrapped.capacity(wrapped.capacity() * 2);\n\n        assertEquals((byte) 0, buffer.readByte());\n    }\n\n    @Test\n    public void testMarksInitialized() {\n        ByteBuf wrapped = Unpooled.buffer(8);\n        try {\n            wrapped.writerIndex(6);\n            wrapped.readerIndex(1);\n            ByteBuf duplicate = new DuplicatedByteBuf(wrapped);\n\n            // Test writer mark\n            duplicate.writerIndex(duplicate.writerIndex() + 1);\n            duplicate.resetWriterIndex();\n            assertEquals(wrapped.writerIndex(), duplicate.writerIndex());\n\n            // Test reader mark\n            duplicate.readerIndex(duplicate.readerIndex() + 1);\n            duplicate.resetReaderIndex();\n            assertEquals(wrapped.readerIndex(), duplicate.readerIndex());\n        } finally {\n            wrapped.release();\n        }\n    }\n}\n","binary":"false","copies":"7","sample_repo_name":"netty/netty","sample_ref":"refs/heads/4.1","sample_path":"buffer/src/test/java/io/netty/buffer/DuplicatedByteBufTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f0f600cf8a219624f08bea572a53ea4f464e8752","size":"22695","content":"/*\n * Copyright 2012 The Netty Project\n *\n * The Netty Project licenses this file to you under the Apache License,\n * version 2.0 (the \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at:\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\npackage io.netty.util;\n\nimport org.junit.Test;\n\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport static org.junit.Assert.*;\n\npublic class NetUtilTest {\n\n    private static final class TestMap extends HashMap<String, String> {\n        private static final long serialVersionUID = -298642816998608473L;\n\n        TestMap(String... values) {\n            for (int i = 0; i < values.length; i += 2) {\n                String key = values[i];\n                String value = values[i + 1];\n                put(key, value);\n            }\n        }\n    }\n\n    private static final Map<String, String> validIpV4Hosts = new TestMap(\n            \"192.168.1.0\",    \"c0a80100\",\n            \"10.255.255.254\", \"0afffffe\",\n            \"172.18.5.4\",     \"ac120504\",\n            \"0.0.0.0\",        \"00000000\",\n            \"127.0.0.1\",      \"7f000001\");\n\n    private static final Map<String, String> invalidIpV4Hosts = new TestMap(\n            \"1.256.3.4\",     null,\n            \"256.0.0.1\",     null,\n            \"1.1.1.1.1\",     null,\n            \"x.255.255.255\", null,\n            \"0.1:0.0\",       null,\n            \"0.1.0.0:\",      null,\n            \"127.0.0.\",      null,\n            \"1.2..4\",        null,\n            \"192.0.1\",       null,\n            \"192.0.1.1.1\",   null,\n            \"192.0.1.a\",     null,\n            \"19a.0.1.1\",     null,\n            \"a.0.1.1\",       null,\n            \".0.1.1\",        null,\n            \"...\",           null);\n\n    private static final Map<String, String> validIpV6Hosts = new TestMap(\n            \"::ffff:5.6.7.8\",                            \"00000000000000000000ffff05060708\",\n            \"fdf8:f53b:82e4::53\",                        \"fdf8f53b82e400000000000000000053\",\n            \"fe80::200:5aee:feaa:20a2\",                  \"fe8000000000000002005aeefeaa20a2\",\n            \"2001::1\",                                   \"20010000000000000000000000000001\",\n            \"2001:0000:4136:e378:8000:63bf:3fff:fdd2\",   \"200100004136e378800063bf3ffffdd2\",\n            \"2001:0002:6c::430\",                         \"20010002006c00000000000000000430\",\n            \"2001:10:240:ab::a\",                         \"20010010024000ab000000000000000a\",\n            \"2002:cb0a:3cdd:1::1\",                       \"2002cb0a3cdd00010000000000000001\",\n            \"2001:db8:8:4::2\",                           \"20010db8000800040000000000000002\",\n            \"ff01:0:0:0:0:0:0:2\",                        \"ff010000000000000000000000000002\",\n            \"[fdf8:f53b:82e4::53]\",                      \"fdf8f53b82e400000000000000000053\",\n            \"[fe80::200:5aee:feaa:20a2]\",                \"fe8000000000000002005aeefeaa20a2\",\n            \"[2001::1]\",                                 \"20010000000000000000000000000001\",\n            \"[2001:0000:4136:e378:8000:63bf:3fff:fdd2]\", \"200100004136e378800063bf3ffffdd2\",\n            \"0:1:2:3:4:5:6:789a\",                        \"0000000100020003000400050006789a\",\n            \"0:1:2:3::f\",                                \"0000000100020003000000000000000f\",\n            \"0:0:0:0:0:0:10.0.0.1\",                      \"0000000000000000000000000a000001\",\n            \"::ffff:192.168.0.1\",                        \"00000000000000000000ffffc0a80001\",\n            // Test if various interface names after the percent sign are recognized.\n            \"[::1%1]\",                                   \"00000000000000000000000000000001\",\n            \"[::1%eth0]\",                                \"00000000000000000000000000000001\",\n            \"[::1%%]\",                                   \"00000000000000000000000000000001\",\n            \"::1%1\",                                     \"00000000000000000000000000000001\",\n            \"::1%eth0\",                                  \"00000000000000000000000000000001\",\n            \"::1%%\",                                     \"00000000000000000000000000000001\");\n\n    private static final Map<String, String> invalidIpV6Hosts = new TestMap(\n            // Test method with garbage.\n            \"Obvious Garbage\",          null,\n            // Test method with preferred style, too many :\n            \"0:1:2:3:4:5:6:7:8\",        null,\n            // Test method with preferred style, not enough :\n            \"0:1:2:3:4:5:6\",            null,\n            // Test method with preferred style, bad digits.\n            \"0:1:2:3:4:5:6:x\",          null,\n            // Test method with preferred style, adjacent :\n            \"0:1:2:3:4:5:6::7\",         null,\n            // Too many : separators trailing\n            \"0:1:2:3:4:5:6:7::\",        null,\n            // Too many : separators leading\n            \"::0:1:2:3:4:5:6:7\",        null,\n            // Too many : separators trailing\n            \"1:2:3:4:5:6:7:\",           null,\n            // Too many : separators leading\n            \":1:2:3:4:5:6:7\",           null,\n            // Too many : separators leading 0\n            \"0::1:2:3:4:5:6:7\",         null,\n            // Test method with preferred style, too many digits.\n            \"0:1:2:3:4:5:6:789abcdef\",  null,\n            // Test method with compressed style, bad digits.\n            \"0:1:2:3::x\",               null,\n            // Test method with compressed style, too many adjacent :\n            \"0:1:2:::3\",                null,\n            // Test method with compressed style, too many digits.\n            \"0:1:2:3::abcde\",           null,\n            // Test method with preferred style, too many :\n            \"0:1:2:3:4:5:6:7:8\",        null,\n            // Test method with compressed style, not enough :\n            \"0:1\",                      null,\n            // Test method with ipv4 style, bad ipv6 digits.\n            \"0:0:0:0:0:x:10.0.0.1\",     null,\n            // Test method with ipv4 style, bad ipv4 digits.\n            \"0:0:0:0:0:0:10.0.0.x\",     null,\n            // Test method with ipv4 style, adjacent :\n            \"0:0:0:0:0::0:10.0.0.1\",    null,\n            // Test method with ipv4 style, too many ipv6 digits.\n            \"0:0:0:0:0:00000:10.0.0.1\", null,\n            // Test method with ipv4 style, too many :\n            \"0:0:0:0:0:0:0:10.0.0.1\",   null,\n            // Test method with ipv4 style, not enough :\n            \"0:0:0:0:0:10.0.0.1\",       null,\n            // Test method with ipv4 style, too many .\n            \"0:0:0:0:0:0:10.0.0.0.1\",   null,\n            // Test method with ipv4 style, not enough .\n            \"0:0:0:0:0:0:10.0.1\",       null,\n            // Test method with ipv4 style, adjacent .\n            \"0:0:0:0:0:0:10..0.0.1\",    null,\n            // Test method with ipv4 style, leading .\n            \"0:0:0:0:0:0:.0.0.1\",       null,\n            // Test method with ipv4 style, leading .\n            \"0:0:0:0:0:0:.10.0.0.1\",    null,\n            // Test method with ipv4 style, trailing .\n            \"0:0:0:0:0:0:10.0.0.\",      null,\n            // Test method with ipv4 style, trailing .\n            \"0:0:0:0:0:0:10.0.0.1.\",    null,\n            // Test method with compressed ipv4 style, bad ipv6 digits.\n            \"::fffx:192.168.0.1\",       null,\n            // Test method with compressed ipv4 style, bad ipv4 digits.\n            \"::ffff:192.168.0.x\",       null,\n            // Test method with compressed ipv4 style, too many adjacent :\n            \":::ffff:192.168.0.1\",      null,\n            // Test method with compressed ipv4 style, too many ipv6 digits.\n            \"::fffff:192.168.0.1\",      null,\n            // Test method with compressed ipv4 style, too many ipv4 digits.\n            \"::ffff:1923.168.0.1\",      null,\n            // Test method with compressed ipv4 style, not enough :\n            \":ffff:192.168.0.1\",        null,\n            // Test method with compressed ipv4 style, too many .\n            \"::ffff:192.168.0.1.2\",     null,\n            // Test method with compressed ipv4 style, not enough .\n            \"::ffff:192.168.0\",         null,\n            // Test method with compressed ipv4 style, adjacent .\n            \"::ffff:192.168..0.1\",      null,\n            // Test method, garbage.\n            \"absolute, and utter garbage\", null,\n            // Test method, bad ipv6 digits.\n            \"x:0:0:0:0:0:10.0.0.1\",     null,\n            // Test method, bad ipv4 digits.\n            \"0:0:0:0:0:0:x.0.0.1\",      null,\n            // Test method, too many ipv6 digits.\n            \"00000:0:0:0:0:0:10.0.0.1\", null,\n            // Test method, too many ipv4 digits.\n            \"0:0:0:0:0:0:10.0.0.1000\",  null,\n            // Test method, too many :\n            \"0:0:0:0:0:0:0:10.0.0.1\",   null,\n            // Test method, not enough :\n            \"0:0:0:0:0:10.0.0.1\",       null,\n            // Test method, out of order trailing :\n            \"0:0:0:0:0:10.0.0.1:\",      null,\n            // Test method, out of order leading :\n            \":0:0:0:0:0:10.0.0.1\",      null,\n            // Test method, out of order leading :\n            \"0:0:0:0::10.0.0.1:\",       null,\n            // Test method, out of order trailing :\n            \":0:0:0:0::10.0.0.1\",       null,\n            // Test method, too many .\n            \"0:0:0:0:0:0:10.0.0.0.1\",   null,\n            // Test method, not enough .\n            \"0:0:0:0:0:0:10.0.1\",       null,\n            // Test method, adjacent .\n            \"0:0:0:0:0:0:10.0.0..1\",    null,\n            // Double compression symbol\n            \"::0::\",                    null,\n            // Empty contents\n            \"\",                         null,\n            // Trailing : (max number of : = 8)\n            \"2001:0:4136:e378:8000:63bf:3fff:fdd2:\", null,\n            // Leading : (max number of : = 8)\n            \":aaaa:bbbb:cccc:dddd:eeee:ffff:1111:2222\", null,\n            // Invalid character\n            \"1234:2345:3456:4567:5678:6789::X890\", null,\n            // Trailing . in IPv4\n            \"::ffff:255.255.255.255.\",  null,\n            // To many characters in IPv4\n            \"::ffff:0.0.1111.0\",        null,\n            // Test method, adjacent .\n            \"::ffff:0.0..0\",            null,\n            // Not enough IPv4 entries trailing .\n            \"::ffff:127.0.0.\",          null,\n            // Not enough IPv4 entries no trailing .\n            \"::ffff:1.2.4\",             null,\n            // Extra IPv4 entry\n            \"::ffff:192.168.0.1.255\",   null,\n            // Not enough IPv6 content\n            \":ffff:192.168.0.1.255\",    null,\n            // Intermixed IPv4 and IPv6 symbols\n            \"::ffff:255.255:255.255.\",  null);\n\n    private static final Map<byte[], String> ipv6ToAddressStrings = new HashMap<byte[], String>() {\n        private static final long serialVersionUID = 2999763170377573184L;\n        {\n            // From the RFC 5952 http://tools.ietf.org/html/rfc5952#section-4\n            put(new byte[] {\n                        32, 1, 13, -72,\n                        0, 0, 0, 0,\n                        0, 0, 0, 0,\n                        0, 0, 0, 1\n                },\n                \"2001:db8::1\");\n            put(new byte[] {\n                        32, 1, 13, -72,\n                        0, 0, 0, 0,\n                        0, 0, 0, 0,\n                        0, 2, 0, 1\n                },\n                \"2001:db8::2:1\");\n            put(new byte[] {\n                        32, 1, 13, -72,\n                        0, 0, 0, 1,\n                        0, 1, 0, 1,\n                        0, 1, 0, 1\n                },\n                \"2001:db8:0:1:1:1:1:1\");\n\n            // Other examples\n            put(new byte[] {\n                        32, 1, 13, -72,\n                        0, 0, 0, 0,\n                        0, 0, 0, 0,\n                        0, 2, 0, 1\n                },\n                \"2001:db8::2:1\");\n            put(new byte[] {\n                        32, 1, 0, 0,\n                        0, 0, 0, 1,\n                        0, 0, 0, 0,\n                        0, 0, 0, 1\n                },\n                \"2001:0:0:1::1\");\n            put(new byte[] {\n                        32, 1, 13, -72,\n                        0, 0, 0, 0,\n                        0, 1, 0, 0,\n                        0, 0, 0, 1\n                },\n                \"2001:db8::1:0:0:1\");\n            put(new byte[] {\n                        32, 1, 13, -72,\n                        0, 0, 0, 0,\n                        0, 1, 0, 0,\n                        0, 0, 0, 0\n                },\n                \"2001:db8:0:0:1::\");\n            put(new byte[] {\n                        32, 1, 13, -72,\n                        0, 0, 0, 0,\n                        0, 0, 0, 0,\n                        0, 2, 0, 0\n                },\n                \"2001:db8::2:0\");\n            put(new byte[] {\n                        0, 0, 0, 0,\n                        0, 0, 0, 0,\n                        0, 0, 0, 0,\n                        0, 0, 0, 1\n                },\n                \"::1\");\n            put(new byte[] {\n                        0, 0, 0, 0,\n                        0, 0, 0, 1,\n                        0, 0, 0, 0,\n                        0, 0, 0, 1\n                },\n                \"::1:0:0:0:1\");\n            put(new byte[] {\n                        0, 0, 0, 0,\n                        1, 0, 0, 1,\n                        0, 0, 0, 0,\n                        1, 0, 0, 0\n                },\n                \"::100:1:0:0:100:0\");\n            put(new byte[] {\n                        32, 1, 0, 0,\n                        65, 54, -29, 120,\n                        -128, 0, 99, -65,\n                        63, -1, -3, -46\n                },\n                \"2001:0:4136:e378:8000:63bf:3fff:fdd2\");\n            put(new byte[] {\n                        -86, -86, -69, -69,\n                        -52, -52, -35, -35,\n                        -18, -18, -1, -1,\n                        17, 17, 34, 34\n                },\n                \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:2222\");\n            put(new byte[] {\n                        0, 0, 0, 0,\n                        0, 0, 0, 0,\n                        0, 0, 0, 0,\n                        0, 0, 0, 0\n                },\n                \"::\");\n        }\n    };\n\n    private static final Map<String, String> ipv4MappedToIPv6AddressStrings = new TestMap(\n            // IPv4 addresses\n            \"255.255.255.255\", \"::ffff:255.255.255.255\",\n            \"0.0.0.0\", \"::ffff:0.0.0.0\",\n            \"127.0.0.1\", \"::ffff:127.0.0.1\",\n            \"1.2.3.4\", \"::ffff:1.2.3.4\",\n            \"192.168.0.1\", \"::ffff:192.168.0.1\",\n\n            // IPv6 addresses\n            // Fully specified\n            \"2001:0:4136:e378:8000:63bf:3fff:fdd2\", \"2001:0:4136:e378:8000:63bf:3fff:fdd2\",\n            \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:2222\", \"aaaa:bbbb:cccc:dddd:eeee:ffff:1111:2222\",\n            \"0:0:0:0:0:0:0:0\", \"::\",\n            \"0:0:0:0:0:0:0:1\", \"::1\",\n\n            // Compressing at the beginning\n            \"::1:0:0:0:1\", \"::1:0:0:0:1\",\n            \"::1:ffff:ffff\", \"::1:ffff:ffff\",\n            \"::\", \"::\",\n            \"::1\", \"::1\",\n            \"::ffff\", \"::ffff\",\n            \"::ffff:0\", \"::ffff:0\",\n            \"::ffff:ffff\", \"::ffff:ffff\",\n            \"::0987:9876:8765\", \"::987:9876:8765\",\n            \"::0987:9876:8765:7654\", \"::987:9876:8765:7654\",\n            \"::0987:9876:8765:7654:6543\", \"::987:9876:8765:7654:6543\",\n            \"::0987:9876:8765:7654:6543:5432\", \"::987:9876:8765:7654:6543:5432\",\n            // Note the compression is removed (rfc 5952 section 4.2.2)\n            \"::0987:9876:8765:7654:6543:5432:3210\", \"0:987:9876:8765:7654:6543:5432:3210\",\n\n            // Compressing at the end\n            // Note the compression is removed (rfc 5952 section 4.2.2)\n            \"2001:db8:abcd:bcde:cdef:def1:ef12::\", \"2001:db8:abcd:bcde:cdef:def1:ef12:0\",\n            \"2001:db8:abcd:bcde:cdef:def1::\", \"2001:db8:abcd:bcde:cdef:def1::\",\n            \"2001:db8:abcd:bcde:cdef::\", \"2001:db8:abcd:bcde:cdef::\",\n            \"2001:db8:abcd:bcde::\", \"2001:db8:abcd:bcde::\",\n            \"2001:db8:abcd::\", \"2001:db8:abcd::\",\n            \"2001:1234::\", \"2001:1234::\",\n            \"2001::\", \"2001::\",\n            \"0::\", \"::\",\n\n            // Compressing in the middle\n            \"1234:2345::7890\", \"1234:2345::7890\",\n            \"1234::2345:7890\", \"1234::2345:7890\",\n            \"1234:2345:3456::7890\", \"1234:2345:3456::7890\",\n            \"1234:2345::3456:7890\", \"1234:2345::3456:7890\",\n            \"1234::2345:3456:7890\", \"1234::2345:3456:7890\",\n            \"1234:2345:3456:4567::7890\", \"1234:2345:3456:4567::7890\",\n            \"1234:2345:3456::4567:7890\", \"1234:2345:3456::4567:7890\",\n            \"1234:2345::3456:4567:7890\", \"1234:2345::3456:4567:7890\",\n            \"1234::2345:3456:4567:7890\", \"1234::2345:3456:4567:7890\",\n            \"1234:2345:3456:4567:5678::7890\", \"1234:2345:3456:4567:5678::7890\",\n            \"1234:2345:3456:4567::5678:7890\", \"1234:2345:3456:4567::5678:7890\",\n            \"1234:2345:3456::4567:5678:7890\", \"1234:2345:3456::4567:5678:7890\",\n            \"1234:2345::3456:4567:5678:7890\", \"1234:2345::3456:4567:5678:7890\",\n            \"1234::2345:3456:4567:5678:7890\", \"1234::2345:3456:4567:5678:7890\",\n            // Note the compression is removed (rfc 5952 section 4.2.2)\n            \"1234:2345:3456:4567:5678:6789::7890\", \"1234:2345:3456:4567:5678:6789:0:7890\",\n            // Note the compression is removed (rfc 5952 section 4.2.2)\n            \"1234:2345:3456:4567:5678::6789:7890\", \"1234:2345:3456:4567:5678:0:6789:7890\",\n            // Note the compression is removed (rfc 5952 section 4.2.2)\n            \"1234:2345:3456:4567::5678:6789:7890\", \"1234:2345:3456:4567:0:5678:6789:7890\",\n            // Note the compression is removed (rfc 5952 section 4.2.2)\n            \"1234:2345:3456::4567:5678:6789:7890\", \"1234:2345:3456:0:4567:5678:6789:7890\",\n            // Note the compression is removed (rfc 5952 section 4.2.2)\n            \"1234:2345::3456:4567:5678:6789:7890\", \"1234:2345:0:3456:4567:5678:6789:7890\",\n            // Note the compression is removed (rfc 5952 section 4.2.2)\n            \"1234::2345:3456:4567:5678:6789:7890\", \"1234:0:2345:3456:4567:5678:6789:7890\",\n\n            // IPv4 mapped addresses\n            \"::ffff:255.255.255.255\", \"::ffff:255.255.255.255\",\n            \"::ffff:0.0.0.0\", \"::ffff:0.0.0.0\",\n            \"::ffff:127.0.0.1\", \"::ffff:127.0.0.1\",\n            \"::ffff:1.2.3.4\", \"::ffff:1.2.3.4\",\n            \"::ffff:192.168.0.1\", \"::ffff:192.168.0.1\");\n\n    @Test\n    public void testLocalhost() {\n        assertNotNull(NetUtil.LOCALHOST);\n    }\n\n    @Test\n    public void testLoopback() {\n        assertNotNull(NetUtil.LOOPBACK_IF);\n    }\n\n    @Test\n    public void testIsValidIpV4Address() {\n        for (String host : validIpV4Hosts.keySet()) {\n            assertTrue(NetUtil.isValidIpV4Address(host));\n        }\n        for (String host : invalidIpV4Hosts.keySet()) {\n            assertFalse(NetUtil.isValidIpV4Address(host));\n        }\n    }\n\n    @Test\n    public void testIsValidIpV6Address() {\n        for (String host : validIpV6Hosts.keySet()) {\n            assertTrue(NetUtil.isValidIpV6Address(host));\n        }\n        for (String host : invalidIpV6Hosts.keySet()) {\n            assertFalse(NetUtil.isValidIpV6Address(host));\n        }\n    }\n\n    @Test\n    public void testCreateByteArrayFromIpAddressString() {\n        for (Entry<String, String> e : validIpV4Hosts.entrySet()) {\n            assertHexDumpEquals(e.getValue(), NetUtil.createByteArrayFromIpAddressString(e.getKey()));\n        }\n        for (Entry<String, String> e : invalidIpV4Hosts.entrySet()) {\n            assertHexDumpEquals(e.getValue(), NetUtil.createByteArrayFromIpAddressString(e.getKey()));\n        }\n        for (Entry<String, String> e : validIpV6Hosts.entrySet()) {\n            assertHexDumpEquals(e.getValue(), NetUtil.createByteArrayFromIpAddressString(e.getKey()));\n        }\n        for (Entry<String, String> e : invalidIpV6Hosts.entrySet()) {\n            assertHexDumpEquals(e.getValue(), NetUtil.createByteArrayFromIpAddressString(e.getKey()));\n        }\n    }\n\n    @Test\n    public void testIp6AddressToString() throws UnknownHostException {\n        for (Entry<byte[], String> testEntry : ipv6ToAddressStrings.entrySet()) {\n            assertEquals(testEntry.getValue(), NetUtil.toAddressString(InetAddress.getByAddress(testEntry.getKey())));\n        }\n    }\n\n    @Test\n    public void testIp4AddressToString() throws UnknownHostException {\n        for (Entry<String, String> e : validIpV4Hosts.entrySet()) {\n            assertEquals(e.getKey(), NetUtil.toAddressString(InetAddress.getByAddress(unhex(e.getValue()))));\n        }\n    }\n\n    @Test\n    public void testIpv4MappedIp6GetByName() {\n        for (Entry<String, String> testEntry : ipv4MappedToIPv6AddressStrings.entrySet()) {\n            assertEquals(\n                    testEntry.getValue(),\n                    NetUtil.toAddressString(NetUtil.getByName(testEntry.getKey(), true), true));\n        }\n    }\n\n    @Test\n    public void testinvalidIpv4MappedIp6GetByName() {\n        for (String testEntry : invalidIpV4Hosts.keySet()) {\n            assertNull(NetUtil.getByName(testEntry, true));\n        }\n\n        for (String testEntry : invalidIpV6Hosts.keySet()) {\n            assertNull(NetUtil.getByName(testEntry, true));\n        }\n    }\n\n    private static void assertHexDumpEquals(String expected, byte[] actual) {\n        assertEquals(expected, hex(actual));\n    }\n\n    private static String hex(byte[] value) {\n        if (value == null) {\n            return null;\n        }\n\n        StringBuilder buf = new StringBuilder(value.length << 1);\n        for (byte b: value) {\n            String hex = Integer.toHexString(b & 0xFF);\n            if (hex.length() == 1) {\n                buf.append('0');\n            }\n            buf.append(hex);\n        }\n        return buf.toString();\n    }\n\n    private static byte[] unhex(String value) {\n        if (value == null) {\n            return null;\n        }\n\n        byte[] buf = new byte[value.length() >>> 1];\n        for (int i = 0; i < buf.length; i ++) {\n            buf[i] = (byte) Integer.parseInt(value.substring(i << 1, i + 1 << 1), 16);\n        }\n\n        return buf;\n    }\n}\n","binary":"false","copies":"183","sample_repo_name":"netty/netty","sample_ref":"refs/heads/4.1","sample_path":"common/src/test/java/io/netty/util/NetUtilTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6c1cdca7ccfb8c86751e3ae23ebdb9529ea86243","size":"4222","content":"/*\n * Copyright 2012 The Netty Project\n *\n * The Netty Project licenses this file to you under the Apache License,\n * version 2.0 (the \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at:\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\npackage io.netty.handler.codec;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.embedded.EmbeddedChannel;\nimport io.netty.util.CharsetUtil;\nimport io.netty.util.ReferenceCountUtil;\nimport org.junit.Test;\n\nimport java.nio.charset.Charset;\n\nimport static io.netty.util.ReferenceCountUtil.releaseLater;\nimport static org.junit.Assert.*;\n\npublic class DelimiterBasedFrameDecoderTest {\n\n    @Test\n    public void testMultipleLinesStrippedDelimiters() {\n        EmbeddedChannel ch = new EmbeddedChannel(new DelimiterBasedFrameDecoder(8192, true,\n                Delimiters.lineDelimiter()));\n        ch.writeInbound(Unpooled.copiedBuffer(\"TestLine\\r\\ng\\r\\n\", Charset.defaultCharset()));\n        assertEquals(\"TestLine\", releaseLater((ByteBuf) ch.readInbound()).toString(Charset.defaultCharset()));\n        assertEquals(\"g\", releaseLater((ByteBuf) ch.readInbound()).toString(Charset.defaultCharset()));\n        assertNull(ch.readInbound());\n        ch.finish();\n    }\n\n    @Test\n    public void testIncompleteLinesStrippedDelimiters() {\n        EmbeddedChannel ch = new EmbeddedChannel(new DelimiterBasedFrameDecoder(8192, true,\n                Delimiters.lineDelimiter()));\n        ch.writeInbound(Unpooled.copiedBuffer(\"Test\", Charset.defaultCharset()));\n        assertNull(ch.readInbound());\n        ch.writeInbound(Unpooled.copiedBuffer(\"Line\\r\\ng\\r\\n\", Charset.defaultCharset()));\n        assertEquals(\"TestLine\", releaseLater((ByteBuf) ch.readInbound()).toString(Charset.defaultCharset()));\n        assertEquals(\"g\", releaseLater((ByteBuf) ch.readInbound()).toString(Charset.defaultCharset()));\n        assertNull(ch.readInbound());\n        ch.finish();\n    }\n\n    @Test\n    public void testMultipleLines() {\n        EmbeddedChannel ch = new EmbeddedChannel(new DelimiterBasedFrameDecoder(8192, false,\n                Delimiters.lineDelimiter()));\n        ch.writeInbound(Unpooled.copiedBuffer(\"TestLine\\r\\ng\\r\\n\", Charset.defaultCharset()));\n        assertEquals(\"TestLine\\r\\n\", releaseLater((ByteBuf) ch.readInbound()).toString(Charset.defaultCharset()));\n        assertEquals(\"g\\r\\n\", releaseLater((ByteBuf) ch.readInbound()).toString(Charset.defaultCharset()));\n        assertNull(ch.readInbound());\n        ch.finish();\n    }\n\n    @Test\n    public void testIncompleteLines() {\n        EmbeddedChannel ch = new EmbeddedChannel(new DelimiterBasedFrameDecoder(8192, false,\n                Delimiters.lineDelimiter()));\n        ch.writeInbound(Unpooled.copiedBuffer(\"Test\", Charset.defaultCharset()));\n        assertNull(ch.readInbound());\n        ch.writeInbound(Unpooled.copiedBuffer(\"Line\\r\\ng\\r\\n\", Charset.defaultCharset()));\n        assertEquals(\"TestLine\\r\\n\", releaseLater((ByteBuf) ch.readInbound()).toString(Charset.defaultCharset()));\n        assertEquals(\"g\\r\\n\", releaseLater((ByteBuf) ch.readInbound()).toString(Charset.defaultCharset()));\n        assertNull(ch.readInbound());\n        ch.finish();\n    }\n\n    @Test\n    public void testDecode() throws Exception {\n        EmbeddedChannel ch = new EmbeddedChannel(\n                new DelimiterBasedFrameDecoder(8192, true, Delimiters.lineDelimiter()));\n\n        ch.writeInbound(Unpooled.copiedBuffer(\"first\\r\\nsecond\\nthird\", CharsetUtil.US_ASCII));\n        assertEquals(\"first\", releaseLater((ByteBuf) ch.readInbound()).toString(CharsetUtil.US_ASCII));\n        assertEquals(\"second\", releaseLater((ByteBuf) ch.readInbound()).toString(CharsetUtil.US_ASCII));\n        assertNull(ch.readInbound());\n        ch.finish();\n\n        ReferenceCountUtil.release(ch.readInbound());\n    }\n}\n","binary":"false","copies":"200","sample_repo_name":"netty/netty","sample_ref":"refs/heads/4.1","sample_path":"codec/src/test/java/io/netty/handler/codec/DelimiterBasedFrameDecoderTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e25ffbfb9c7e5bab1ce2cd929a6bc3d8fa845691","size":"2454","content":"// Copyright 2006, 2007 The Apache Software Foundation\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage org.apache.tapestry5.corelib.components;\n\nimport org.apache.tapestry5.MarkupWriter;\nimport org.apache.tapestry5.internal.test.InternalBaseTestCase;\nimport org.apache.tapestry5.services.Heartbeat;\nimport org.easymock.EasyMock;\nimport org.testng.annotations.Test;\n\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class LoopTest extends InternalBaseTestCase\n{\n    @Test\n    public void non_empty_iterator()\n    {\n        Heartbeat hb = mockHeartbeat();\n        MarkupWriter writer = mockMarkupWriter();\n\n        // Really hard to test the exact timing of all this; it will have to\n        // be \"proven\" by integration tests.\n\n        hb.begin();\n        EasyMock.expectLastCall().times(3);\n\n        hb.end();\n        EasyMock.expectLastCall().times(3);\n\n        replay();\n\n        Loop loop = new Loop();\n\n        loop.setHeartbeat(hb);\n\n        loop.setSource(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n\n        assertTrue(loop.setup());\n        assertEquals(loop.getIndex(), 0);\n\n        loop.begin(writer);\n        assertEquals(loop.getValue(), \"alpha\");\n        assertEquals(loop.getIndex(), 0);\n\n        assertFalse(loop.after(writer));\n        loop.begin(writer);\n        assertEquals(loop.getValue(), \"beta\");\n        assertEquals(loop.getIndex(), 1);\n\n        assertFalse(loop.after(writer));\n        loop.begin(writer);\n        assertEquals(loop.getValue(), \"gamma\");\n        assertEquals(loop.getIndex(), 2);\n\n        assertTrue(loop.after(writer));\n\n        verify();\n    }\n\n    @Test\n    public void iterator_is_null()\n    {\n        Loop loop = new Loop();\n\n        loop.setSource(null);\n\n        assertFalse(loop.setup());\n    }\n\n    @Test\n    public void iterator_is_empty()\n    {\n        Loop loop = new Loop();\n\n        loop.setSource(Collections.EMPTY_LIST);\n\n        assertFalse(loop.setup());\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"apache/tapestry5","sample_ref":"refs/heads/5.0","sample_path":"tapestry-core/src/test/java/org/apache/tapestry5/corelib/components/LoopTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"dc8c4fdc9edb60df979145911f8eeb2591eba637","size":"3204","content":"// Copyright 2006 The Apache Software Foundation\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//     http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\npackage org.apache.tapestry5.internal.util;\r\n\r\nimport static org.apache.tapestry5.ioc.internal.util.CollectionFactory.newMap;\r\nimport org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\nimport java.io.EOFException;\r\nimport java.io.InputStream;\r\nimport java.io.ObjectInputStream;\r\nimport java.io.ObjectOutputStream;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Tests for {@link Base64InputStream} and {@link Base64OutputStream}, etc.\r\n */\r\npublic class Base64Tests extends Assert\r\n{\r\n    @SuppressWarnings(\"unchecked\")\r\n    @Test\r\n    public void round_trip_is_equal() throws Exception\r\n    {\r\n        Map input = newMap();\r\n\r\n        input.put(\"fred\", \"flintstone\");\r\n        input.put(\"barney\", \"rubble\");\r\n\r\n        Base64OutputStream bos = new Base64OutputStream();\r\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\r\n\r\n        oos.writeObject(input);\r\n\r\n        oos.close();\r\n\r\n        String base64 = bos.toBase64();\r\n\r\n        InputStream is = new Base64InputStream(base64);\r\n        ObjectInputStream ois = new ObjectInputStream(is);\r\n\r\n        Map output = (Map) ois.readObject();\r\n\r\n        assertEquals(output, input);\r\n        assertNotSame(output, input);\r\n    }\r\n\r\n    @Test\r\n    @SuppressWarnings(\"unchecked\")\r\n    public void round_trip_is_equal_via_object_wrappers() throws Exception\r\n    {\r\n        Map input = newMap();\r\n\r\n        input.put(\"fred\", \"flintstone\");\r\n        input.put(\"barney\", \"rubble\");\r\n\r\n        Base64ObjectOutputStream os = new Base64ObjectOutputStream();\r\n\r\n        os.writeObject(input);\r\n\r\n        os.close();\r\n\r\n        String base64 = os.toBase64();\r\n\r\n        ObjectInputStream ois = new Base64ObjectInputStream(base64);\r\n\r\n        Map output = (Map) ois.readObject();\r\n\r\n        assertEquals(output, input);\r\n        assertNotSame(output, input);\r\n    }\r\n\r\n    @Test\r\n    public void checks_for_eof() throws Exception\r\n    {\r\n        String[] values = { \"fred\", \"barney\", \"wilma\" };\r\n\r\n        Base64ObjectOutputStream os = new Base64ObjectOutputStream();\r\n\r\n        for (String value : values)\r\n            os.writeObject(value);\r\n\r\n        os.close();\r\n\r\n        String base64 = os.toBase64();\r\n\r\n        ObjectInputStream ois = new Base64ObjectInputStream(base64);\r\n\r\n        for (int i = 0; i < 3; i++)\r\n        {\r\n            String value = (String) ois.readObject();\r\n\r\n            assertEquals(value, values[i]);\r\n        }\r\n\r\n        try\r\n        {\r\n            ois.readObject();\r\n            fail(\"Unreachable.\");\r\n        }\r\n        catch (EOFException ex)\r\n        {\r\n            // Expected.\r\n        }\r\n\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"apache/tapestry5","sample_ref":"refs/heads/5.0","sample_path":"tapestry-core/src/test/java/org/apache/tapestry5/internal/util/Base64Tests.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a4d17840753199770f0953ccd5ce57be2d3a2347","size":"3181","content":"/*\n   Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n*/\n\npackage com.mysql.clusterj.core.spi;\n\nimport com.mysql.clusterj.core.CacheManager;\nimport com.mysql.clusterj.core.query.CandidateIndexImpl;\nimport com.mysql.clusterj.core.store.Column;\nimport com.mysql.clusterj.core.store.Db;\nimport com.mysql.clusterj.core.store.Operation;\nimport com.mysql.clusterj.core.store.PartitionKey;\nimport com.mysql.clusterj.core.store.ResultData;\nimport com.mysql.clusterj.core.store.Table;\n\nimport java.util.BitSet;\nimport java.util.Set;\n\n/** DomainTypeHandler is the interface that must be implemented to allow core\n * components to manage instances of a persistent class or interface.\n *\n */\npublic interface DomainTypeHandler<T> {\n\n    public CandidateIndexImpl[] createCandidateIndexes();\n\n    public String getName();\n\n    public Class<?> getOidClass();\n\n    public boolean isSupportedType();\n\n    public String getTableName();\n\n    public DomainFieldHandler getFieldHandler(String fieldName);\n\n    public Class<T> getProxyClass();\n\n    public T newInstance(Db db);\n\n    public ValueHandler getValueHandler(Object instance);\n\n    public T getInstance(ValueHandler handler);\n\n    public void objectMarkModified(ValueHandler handler, String fieldName);\n\n    public void objectSetValues(ResultData rs, ValueHandler handler);\n\n    public void objectSetKeys(Object keys, Object instance);\n\n    public void objectSetCacheManager(CacheManager cm, Object instance);\n\n    public void objectResetModified(ValueHandler handler);\n\n    public void operationGetValues(Operation op);\n\n    public void operationGetValues(Operation op, BitSet fields);\n\n    public void operationSetKeys(ValueHandler handler, Operation op);\n\n    public void operationSetNonPKValues(ValueHandler handler, Operation op);\n\n    public void operationSetModifiedValues(ValueHandler handler, Operation op);\n\n    public void operationSetModifiedNonPKValues(ValueHandler valueHandler, Operation op);\n\n    public ValueHandler createKeyValueHandler(Object keys, Db db);\n\n    public int[] getKeyFieldNumbers();\n\n    public Set<Column> getStoreColumns(BitSet fields);\n\n    public Table getStoreTable();\n\n    public PartitionKey createPartitionKey(ValueHandler handler);\n\n    public String[] getFieldNames();\n\n    public void operationSetValues(ValueHandler valueHandler, Operation op);\n\n    public void setUnsupported(String reason);\n\n    public T newInstance(ValueHandler valueHandler);\n\n    public T newInstance(ResultData resultData, Db db);\n\n}\n","binary":"false","copies":"42","sample_repo_name":"myblockchain/myblockchain","sample_ref":"refs/heads/5.7","sample_path":"storage/ndb/clusterj/clusterj-core/src/main/java/com/mysql/clusterj/core/spi/DomainTypeHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1492a871045bf0464f220de2e5756af291a84c3c","size":"10754","content":"package jfxtras.labs.icalendarfx.properties.component.relationship;\n\nimport java.net.URI;\nimport java.util.List;\n\nimport javafx.beans.property.ObjectProperty;\nimport javafx.beans.property.SimpleObjectProperty;\nimport jfxtras.labs.icalendarfx.parameters.CalendarUser;\nimport jfxtras.labs.icalendarfx.parameters.CalendarUser.CalendarUserType;\nimport jfxtras.labs.icalendarfx.parameters.Delegatees;\nimport jfxtras.labs.icalendarfx.parameters.Delegators;\nimport jfxtras.labs.icalendarfx.parameters.GroupMembership;\nimport jfxtras.labs.icalendarfx.parameters.ParameterType;\nimport jfxtras.labs.icalendarfx.parameters.ParticipationRole;\nimport jfxtras.labs.icalendarfx.parameters.ParticipationRole.ParticipationRoleType;\nimport jfxtras.labs.icalendarfx.parameters.ParticipationStatus;\nimport jfxtras.labs.icalendarfx.parameters.ParticipationStatus.ParticipationStatusType;\nimport jfxtras.labs.icalendarfx.parameters.RSVP;\nimport jfxtras.labs.icalendarfx.properties.PropertyAttendee;\n\n/**\n * Abstract class for Attendee and unknown properties\n * \n * @author David Bal\n *\n * @param <U> - subclass\n * @param <T> - property value type\n * @see Attendee\n * @see Organizer\n */\npublic abstract class PropertyBaseAttendee<T,U> extends PropertyBaseCalendarUser<T,U> implements PropertyAttendee<T>\n{\n    /**\n     * CUTYPE\n     * Calendar User Type\n     * RFC 5545, 3.2.3, page 16\n     * \n     * To identify the type of calendar user specified by the property.\n     * \n     * Example:\n     * ATTENDEE;CUTYPE=GROUP:mailto:ietf-calsch@example.org\n     */\n    @Override\n    public CalendarUser getCalendarUser() { return (calendarUser != null) ? calendarUser.get() : null; }\n    @Override\n    public ObjectProperty<CalendarUser> calendarUserProperty()\n    {\n        if (calendarUser == null)\n        {\n            calendarUser = new SimpleObjectProperty<>(this, ParameterType.CALENDAR_USER_TYPE.toString());\n        }\n        return calendarUser;\n    }\n    private ObjectProperty<CalendarUser> calendarUser;\n    @Override\n    public void setCalendarUser(CalendarUser calendarUser) { calendarUserProperty().set(calendarUser); }\n    public void setCalendarUser(String value) { setCalendarUser(CalendarUser.parse(value)); }\n    public U withCalendarUser(CalendarUser type) { setCalendarUser(type); return (U) this; }\n    public U withCalendarUser(CalendarUserType type) { setCalendarUser(new CalendarUser(type)); return (U) this; }\n    public U withCalendarUser(String content) { setCalendarUser(content); return (U) this; }    \n\n    /**\n     * DELEGATED-FROM\n     * Delegators\n     * RFC 5545, 3.2.4, page 17\n     * \n     * To specify the calendar users that have delegated their\n     *    participation to the calendar user specified by the property.\n     * \n     * Example:\n     * ATTENDEE;DELEGATED-FROM=\"mailto:jsmith@example.com\":mailto:\n     *  jdoe@example.com\n     */\n    @Override\n    public Delegators getDelegators() { return (delegators != null) ? delegators.get() : null; }\n    @Override\n    public ObjectProperty<Delegators> delegatorsProperty()\n    {\n        if (delegators == null)\n        {\n            delegators = new SimpleObjectProperty<>(this, ParameterType.DELEGATORS.toString());\n        }\n        return delegators;\n    }\n    private ObjectProperty<Delegators> delegators;\n    @Override\n    public void setDelegators(Delegators delegators) { delegatorsProperty().set(delegators); }\n    public void setDelegators(String content) { setDelegators(Delegators.parse(content)); }\n    public U withDelegators(Delegators delegators) { setDelegators(delegators); return (U) this; }\n    public U withDelegators(List<URI> delegators) { setDelegators(new Delegators(delegators)); return (U) this; }\n    public U withDelegators(String content) { setDelegators(content); return (U) this; }    \n\n    /**\n     * DELEGATED-TO\n     * Delegatees\n     * RFC 5545, 3.2.5, page 17\n     * \n     * To specify the calendar users to whom the calendar user\n     *    specified by the property has delegated participation.\n     * \n     * Example:\n     * ATTENDEE;DELEGATED-TO=\"mailto:jdoe@example.com\",\"mailto:jqpublic\n     *  @example.com\":mailto:jsmith@example.com\n     * \n     */\n    @Override\n    public Delegatees getDelegatees() { return (delegatees == null) ? null : delegatees.get(); }\n    @Override\n    public ObjectProperty<Delegatees> delegateesProperty()\n    {\n        if (delegatees == null)\n        {\n            delegatees = new SimpleObjectProperty<>(this, ParameterType.DELEGATEES.toString());\n        }\n        return delegatees;\n    }\n    private ObjectProperty<Delegatees> delegatees;\n    @Override\n    public void setDelegatees(Delegatees delegatees) { delegateesProperty().set(delegatees); }\n    public void setDelegatees(String content) { setDelegatees(Delegatees.parse(content)); }\n    public U withDelegatees(Delegatees delegatees) { setDelegatees(delegatees); return (U) this; }\n    public U withDelegatees(List<URI> values) { setDelegatees(new Delegatees(values)); return (U) this; }\n    public U withDelegatees(String content) { setDelegatees(content); return (U) this; }    \n\n    /**\n     * MEMBER\n     * Group or List Membership\n     * RFC 5545, 3.2.11, page 21\n     * \n     * To specify the group or list membership of the calendar user specified by the property.\n     * \n     * Example:\n     * ATTENDEE;MEMBER=\"mailto:projectA@example.com\",\"mailto:pr\n     *  ojectB@example.com\":mailto:janedoe@example.com\n     * \n     */\n    @Override\n    public GroupMembership getGroupMembership() { return (groupMembership == null) ? null : groupMembership.get(); }\n    @Override\n    public ObjectProperty<GroupMembership> groupMembershipProperty()\n    {\n        if (groupMembership == null)\n        {\n            groupMembership = new SimpleObjectProperty<>(this, ParameterType.GROUP_OR_LIST_MEMBERSHIP.toString());\n        }\n        return groupMembership;\n    }\n    private ObjectProperty<GroupMembership> groupMembership;\n    @Override\n    public void setGroupMembership(GroupMembership groupMembership) { groupMembershipProperty().set(groupMembership); }\n    public void setGroupMembership(String content) { setGroupMembership(GroupMembership.parse(content)); }\n    public U withGroupMembership(GroupMembership groupMembership) { setGroupMembership(groupMembership); return (U) this; }\n    public U withGroupMembership(List<URI> values) { setGroupMembership(new GroupMembership(values)); return (U) this; }\n    public U withGroupMembership(String content) { setGroupMembership(content); return (U) this; }    \n\n    /**\n     * RSVP\n     * RSVP Expectation\n     * RFC 5545, 3.2.17, page 26\n     * \n     * To specify whether there is an expectation of a favor of a reply from the calendar user specified by the property value.\n     * \n     * Example:\n     * ATTENDEE;RSVP=TRUE:mailto:jsmith@example.com\n     */\n    @Override\n    public RSVP getRSVP() { return (rsvp != null) ? rsvp.get() : null; }\n    @Override\n    public ObjectProperty<RSVP> rsvpProperty()\n    {\n        if (rsvp == null)\n        {\n            rsvp = new SimpleObjectProperty<>(this, ParameterType.RSVP_EXPECTATION.toString());\n        }\n        return rsvp;\n    }\n    private ObjectProperty<RSVP> rsvp;\n    @Override\n    public void setRSVP(RSVP rsvp) { rsvpProperty().set(rsvp); }\n    public void setRSVP(String content) { setRSVP(RSVP.parse(content)); }\n    public U withRSVP(RSVP type) { setRSVP(type); return (U) this; }\n    public U withRSVP(Boolean type) { setRSVP(new RSVP(type)); return (U) this; }\n    public U withRSVP(String content) { setRSVP(content); return (U) this; }   \n    \n    /**\n     * PARTSTAT\n     * Participation Status\n     * RFC 5545, 3.2.12, page 22\n     * \n     * To specify the participation role for the calendar user specified by the property.\n     * \n     * Example:\n     * ATTENDEE;PARTSTAT=DECLINED:mailto:jsmith@example.com\n     */\n    @Override\n    public ParticipationStatus getParticipationStatus() { return (participationStatus != null) ? participationStatus.get() : null; }\n    @Override\n    public ObjectProperty<ParticipationStatus> participationStatusProperty()\n    {\n        if (participationStatus == null)\n        {\n            participationStatus = new SimpleObjectProperty<>(this, ParameterType.PARTICIPATION_STATUS.toString());\n        }\n        return participationStatus;\n    }\n    private ObjectProperty<ParticipationStatus> participationStatus;\n    @Override\n    public void setParticipationStatus(ParticipationStatus participation) { participationStatusProperty().set(participation); }\n    public void setParticipationStatus(String content) { setParticipationStatus(new ParticipationStatus(content)); }\n    public U withParticipationStatus(ParticipationStatus type) { setParticipationStatus(type); return (U) this; }\n    public U withParticipationStatus(ParticipationStatusType type) { setParticipationStatus(new ParticipationStatus(type)); return (U) this; }\n    public U withParticipationStatus(String content) { setParticipationStatus(content); return (U) this; }  \n\n    /**\n     * ROLE\n     * Participation Role\n     * RFC 5545, 3.2.16, page 25\n     * \n     * To specify the participation role for the calendar user specified by the property.\n     * \n     * Example:\n     * ATTENDEE;ROLE=CHAIR:mailto:mrbig@example.com\n     */\n    @Override\n    public ParticipationRole getParticipationRole() { return (participationRole != null) ? participationRole.get() : null; }\n    @Override\n    public ObjectProperty<ParticipationRole> participationRoleProperty()\n    {\n        if (participationRole == null)\n        {\n            participationRole = new SimpleObjectProperty<>(this, ParameterType.PARTICIPATION_ROLE.toString());\n        }\n        return participationRole;\n    }\n    private ObjectProperty<ParticipationRole> participationRole;\n    @Override\n    public void setParticipationRole(ParticipationRole participationRole) { participationRoleProperty().set(participationRole); }\n    public void setParticipationRole(String content) { setParticipationRole(ParticipationRole.parse(content)); }\n    public U withParticipationRole(ParticipationRole type) { setParticipationRole(type); return (U) this; }\n    public U withParticipationRole(ParticipationRoleType type) { setParticipationRole(new ParticipationRole(type)); return (U) this; }\n    public U withParticipationRole(String content) { setParticipationRole(content); return (U) this; }  \n\n    /*\n     * CONSTRUCTORS\n     */\n    \n    public PropertyBaseAttendee(String contentLine)\n    {\n        super(contentLine);\n    }\n    \n    public PropertyBaseAttendee(T value)\n    {\n        super(value);\n    }\n    \n    public PropertyBaseAttendee(PropertyBaseAttendee<T,U> source)\n    {\n        super(source);\n    }\n    \n    protected PropertyBaseAttendee()\n    {\n        super();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"JFXtras/jfxtras-labs","sample_ref":"refs/heads/8.0","sample_path":"src/main/java/jfxtras/labs/icalendarfx/properties/component/relationship/PropertyBaseAttendee.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"cc7c1b22ccfdccf6916eeb23023b377eb1fd5221","size":"9172","content":"/**\n * LocalDateTimePicker.java\n *\n * Copyright (c) 2011-2016, JFXtras\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *     * Redistributions of source code must retain the above copyright\n *       notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *     * Neither the name of the organization nor the\n *       names of its contributors may be used to endorse or promote products\n *       derived from this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\npackage jfxtras.scene.control;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.Locale;\r\n\r\nimport javafx.beans.property.BooleanProperty;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleBooleanProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.scene.control.Control;\r\nimport javafx.scene.control.Skin;\r\nimport javafx.util.Callback;\r\nimport jfxtras.internal.scene.control.skin.LocalDateTimePickerSkin;\r\n\r\n/**\r\n * // These are used for the includes \n * :control: LocalDateTimePicker \n * :control_instance: LocalDateTimePicker \n * :calendar: localDateTime\n * :calendars: localDateTimes\n * :calendar_class: LocalDateTime\n * :calendars_class: LocalDateTimes\n * \n * = LocalDateTimePicker \n * LocalDatePicker is a control for selecting one LocalDateTime (JSR-310). \n * The name LocalDatePicker is because it uses Java's LocalDateTime (JSR-310) (as opposed to Date) in its API to do so.\n * \n *include::src/main/asciidoc/scene/control/CalendarPicker_properties.adoc[]\n * \r\n * == Callback\n *include::src/main/asciidoc/scene/control/CalendarPicker_callbacks.adoc[]\n */\r\npublic class LocalDateTimePicker extends Control\r\n{\r\n\t// ==================================================================================================================\r\n\t// CONSTRUCTOR\r\n\t\r\n\t/**\r\n\t * \r\n\t */\r\n\tpublic LocalDateTimePicker()\r\n\t{\r\n\t\tconstruct();\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @param localDateTime\r\n\t */\r\n\tpublic LocalDateTimePicker(LocalDateTime localDateTime)\r\n\t{\r\n\t\tconstruct();\r\n\t\tsetLocalDateTime(localDateTime);\r\n\t}\r\n\t\r\n\t/*\r\n\t * \r\n\t */\r\n\tprivate void construct()\r\n\t{\r\n\t}\r\n\r\n\t@Override public Skin createDefaultSkin() {\r\n\t\treturn new LocalDateTimePickerSkin(this);\r\n\t}\r\n\r\n\t// ==================================================================================================================\r\n\t// PROPERTIES\r\n\t\r\n\t/** LocalDateTime: */\r\n\tpublic ObjectProperty<LocalDateTime> localDateTimeProperty() { return localDateTimeObjectProperty; }\r\n\tprivate final ObjectProperty<LocalDateTime> localDateTimeObjectProperty = new SimpleObjectProperty<LocalDateTime>(this, \"localDateTime\");\r\n\tpublic LocalDateTime getLocalDateTime() { return localDateTimeObjectProperty.getValue(); }\r\n\tpublic void setLocalDateTime(LocalDateTime value) { localDateTimeObjectProperty.setValue(value); }\r\n\tpublic LocalDateTimePicker withLocalDateTime(LocalDateTime value) { setLocalDateTime(value); return this; }\r\n\t\r\n\t/** DisplayedLocalDateTime: */\r\n\tpublic ObjectProperty<LocalDateTime> displayedLocalDateTimeProperty() { return displayedLocalDateTimeObjectProperty; }\r\n\tprivate final ObjectProperty<LocalDateTime> displayedLocalDateTimeObjectProperty = new SimpleObjectProperty<LocalDateTime>(this, \"displayedLocalDateTime\", LocalDateTime.now());\r\n\tpublic LocalDateTime getDisplayedLocalDateTime() { return displayedLocalDateTimeObjectProperty.getValue(); }\r\n\tpublic void setDisplayedLocalDateTime(LocalDateTime value) { displayedLocalDateTimeObjectProperty.setValue(value); }\r\n\tpublic LocalDateTimePicker withDisplayedLocalDateTime(LocalDateTime value) { setDisplayedLocalDateTime(value); return this; }\r\n\r\n\t/** Locale: the locale is used to determine first-day-of-week, weekday labels, etc */\r\n\tpublic ObjectProperty<Locale> localeProperty() { return localeObjectProperty; }\r\n\tvolatile private ObjectProperty<Locale> localeObjectProperty = new SimpleObjectProperty<Locale>(this, \"locale\", Locale.getDefault());\r\n\tpublic Locale getLocale() { return localeObjectProperty.getValue(); }\r\n\tpublic void setLocale(Locale value) { localeObjectProperty.setValue(value); }\r\n\tpublic LocalDateTimePicker withLocale(Locale value) { setLocale(value); return this; } \r\n\r\n\t/** AllowNull: indicates if no selected date (resulting in null in the localDateTime property) is an allowed state. */\r\n    public BooleanProperty allowNullProperty() { return allowNullProperty; }\n    volatile private BooleanProperty allowNullProperty = new SimpleBooleanProperty(this, \"allowNull\", true);\r\n    public boolean getAllowNull() { return allowNullProperty.get(); }\r\n    public void setAllowNull(boolean allowNull) { allowNullProperty.set(allowNull); }\r\n    public LocalDateTimePicker withAllowNull(boolean value) { setAllowNull(value); return this; }\r\n\r\n\t/** HighlightedLocalDateTimes: a list of dates that are rendered with the highlight class added. This can then be styled using CSS. */\r\n\tpublic ObservableList<LocalDateTime> highlightedLocalDateTimes() { return highlightedLocalDateTimes; }\r\n\tprivate final ObservableList<LocalDateTime> highlightedLocalDateTimes =  javafx.collections.FXCollections.observableArrayList();\r\n\r\n\t/** DisabledLocalDateTimes: a list of dates that cannot be selected. */\r\n\tpublic ObservableList<LocalDateTime> disabledLocalDateTimes() { return disabledLocalDateTimes; }\r\n\tprivate final ObservableList<LocalDateTime> disabledLocalDateTimes =  javafx.collections.FXCollections.observableArrayList();\r\n\r\n\t/** localDateTimeRangeCallback: \r\n\t * This callback allows a developer to limit the amount of calendars put in any of the collections.\r\n\t * It is called just before a new range is being displayed, so the developer can change the values in the collections like highlighted or disabled. \r\n\t */\r\n\tpublic ObjectProperty<Callback<LocalDateTimeRange, Void>> LocalDateTimeRangeCallbackProperty() { return localDateTimeRangeCallbackObjectProperty; }\r\n\tfinal private ObjectProperty<Callback<LocalDateTimeRange, Void>> localDateTimeRangeCallbackObjectProperty = new SimpleObjectProperty<Callback<LocalDateTimeRange, Void>>(this, \"localDateTimeRangeCallback\", null);\r\n\tpublic Callback<LocalDateTimeRange, Void> getLocalDateTimeRangeCallback() { return this.localDateTimeRangeCallbackObjectProperty.getValue(); }\r\n\tpublic void setLocalDateTimeRangeCallback(Callback<LocalDateTimeRange, Void> value) { this.localDateTimeRangeCallbackObjectProperty.setValue(value); }\r\n\tpublic LocalDateTimePicker withLocalDateTimeRangeCallback(Callback<LocalDateTimeRange, Void> value) { setLocalDateTimeRangeCallback(value); return this; }\r\n\t\r\n\t/**\r\n\t * A Calendar range\r\n\t */\r\n\tstatic public class LocalDateTimeRange\r\n\t{\r\n\t\tpublic LocalDateTimeRange(LocalDateTime start, LocalDateTime end)\r\n\t\t{\r\n\t\t\tthis.start = start;\r\n\t\t\tthis.end = end;\r\n\t\t}\r\n\t\t\r\n\t\tpublic LocalDateTime getStartLocalDateTime() { return start; }\r\n\t\tfinal LocalDateTime start;\r\n\t\t\r\n\t\tpublic LocalDateTime getEndLocalDateTime() { return end; }\r\n\t\tfinal LocalDateTime end; \r\n\t}\r\n\r\n\t/** valueValidationCallback: \r\n\t * This callback allows a developer deny or accept a value just prior before it gets added.\r\n\t * Returning true will allow the value.\r\n\t */\r\n\tpublic ObjectProperty<Callback<LocalDateTime, Boolean>> valueValidationCallbackProperty() { return valueValidationCallbackObjectProperty; }\r\n\tfinal private ObjectProperty<Callback<LocalDateTime, Boolean>> valueValidationCallbackObjectProperty = new SimpleObjectProperty<Callback<LocalDateTime, Boolean>>(this, \"valueValidationCallback\", null);\r\n\tpublic Callback<LocalDateTime, Boolean> getValueValidationCallback() { return this.valueValidationCallbackObjectProperty.getValue(); }\r\n\tpublic void setValueValidationCallback(Callback<LocalDateTime, Boolean> value) { this.valueValidationCallbackObjectProperty.setValue(value); }\r\n\tpublic LocalDateTimePicker withValueValidationCallback(Callback<LocalDateTime, Boolean> value) { setValueValidationCallback(value); return this; }\r\n\r\n\t\r\n\t// ==================================================================================================================\r\n\t// SUPPORT\r\n\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"JFXtras/jfxtras","sample_ref":"refs/heads/8.0","sample_path":"jfxtras-controls/src/main/java/jfxtras/scene/control/LocalDateTimePicker.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"30441bfaf07f13df74cea2a423905a122509f3ba","size":"1231","content":"package jfxtras.labs.icalendarfx.properties.component.descriptive;\n\nimport jfxtras.labs.icalendarfx.components.VEvent;\nimport jfxtras.labs.icalendarfx.components.VTodo;\nimport jfxtras.labs.icalendarfx.properties.PropertyBaseAltText;\n\n/**\n * LOCATION\n * RFC 5545 iCalendar 3.8.1.7. page 87\n * \n * This property defines the intended venue for the activity defined by a calendar component.\n * \n * Example:\n * LOCATION;ALTREP=\"http://xyzcorp.com/conf-rooms/f123.vcf\":\n *  Conference Room - F123\\, Bldg. 002\n *\n * @author David Bal\n * \n * The property can be specified in following components:\n * @see VEvent\n * @see VTodo\n */\npublic class Location extends PropertyBaseAltText<String, Location>\n{    \n//    public Location(CharSequence contentLine)\n//    {\n//        super(contentLine);\n//    }\n    \n    public Location(Location source)\n    {\n        super(source);\n    }\n\n    public Location()\n    {\n        super();\n    }\n    \n    public static Location parse(String propertyContent)\n    {\n        if (propertyContent != null)\n        {\n            Location property = new Location();\n            property.parseContent(propertyContent);\n            return property;\n        } else\n        {\n            return null;\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"JFXtras/jfxtras-labs","sample_ref":"refs/heads/8.0","sample_path":"src/main/java/jfxtras/labs/icalendarfx/properties/component/descriptive/Location.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"986b341896d86cd4528e53c07505b1dcf0ecaa8c","size":"2681","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage io.milton.servlet;\n\nimport io.milton.http.Cookie;\n\n/**\n * Implementation of milton's cookie interface which just wraps a javax.servlet cookie\n *\n * The reference to the wrapped cookie is final, but the cookie itself is\n * mutable.\n *\n * @author brad\n */\npublic class ServletCookie implements Cookie {\n\n    private final javax.servlet.http.Cookie cookie;\n\n    public ServletCookie( javax.servlet.http.Cookie cookie ) {\n        this.cookie = cookie;\n    }\n\n    public javax.servlet.http.Cookie getWrappedCookie() {\n        return cookie;\n    }\n\n\n\n\t@Override\n    public int getVersion() {\n        return cookie.getVersion();\n    }\n\n\t@Override\n    public void setVersion( int version ) {\n        cookie.setVersion( version );\n    }\n\n\t@Override\n    public String getName() {\n        return cookie.getName();\n    }\n\n\t@Override\n    public String getValue() {\n        return cookie.getValue();\n    }\n\n\t@Override\n    public void setValue( String value ) {\n        cookie.setValue( value );\n    }\n\n\t@Override\n    public boolean getSecure() {\n        return cookie.getSecure();\n    }\n\n\t@Override\n    public void setSecure( boolean secure ) {\n        cookie.setSecure( secure );\n    }\n\n\t@Override\n    public int getExpiry() {\n        return cookie.getMaxAge();\n    }\n\n\t@Override\n    public void setExpiry( int expiry ) {\n        cookie.setMaxAge( expiry );\n    }\n\n\t@Override\n    public String getPath() {\n        return cookie.getPath();\n    }\n\n\t@Override\n    public void setPath( String path ) {\n        cookie.setPath( path );\n    }\n\n\t@Override\n    public String getDomain() {\n        return cookie.getDomain();\n    }\n\n\t@Override\n    public void setDomain( String domain ) {\n        cookie.setDomain( domain );\n    }\n\n\t@Override\n\tpublic void setHttpOnly(boolean b) {\n\t\tcookie.setHttpOnly(b);\n\t}\n\n\t@Override\n\tpublic boolean isHttpOnly() {\n\t\treturn cookie.isHttpOnly();\n\t}\n\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"skoulouzis/lobcder","sample_ref":"refs/heads/dev","sample_path":"milton2/milton-server-ce/src/main/java/io/milton/servlet/ServletCookie.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"79929d4de65377d30487b886d6538a4d1dc78dd7","size":"2097","content":"/*\n * Copyright 2016 Uwe Trottmann\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.battlelancer.seriesguide.thetvdbapi;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport com.battlelancer.seriesguide.BuildConfig;\nimport com.battlelancer.seriesguide.util.ServiceUtils;\nimport com.uwetrottmann.thetvdb.TheTvdb;\nimport okhttp3.OkHttpClient;\n\n/**\n * Extends {@link TheTvdb} to use our own caching OkHttp client and a preferences file to store the\n * current JSON web token long term. The token is currently valid 24 hours, so preserve it if the\n * app gets killed to avoid an additional login endpoint call.\n */\npublic class SgTheTvdb extends TheTvdb {\n\n    private static final String PREFERENCE_FILE = \"thetvdb-prefs\";\n    private static final String KEY_JSON_WEB_TOKEN = \"token\";\n\n    private final Context context;\n    private final SharedPreferences preferences;\n\n    public SgTheTvdb(Context context) {\n        super(BuildConfig.TVDB_API_KEY);\n        this.context = context.getApplicationContext();\n        this.preferences = context.getSharedPreferences(PREFERENCE_FILE, Context.MODE_PRIVATE);\n    }\n\n    @Override\n    public String jsonWebToken() {\n        return preferences.getString(KEY_JSON_WEB_TOKEN, null);\n    }\n\n    @Override\n    public void jsonWebToken(String value) {\n        preferences.edit()\n                .putString(KEY_JSON_WEB_TOKEN, value)\n                .apply();\n    }\n\n    @Override\n    protected synchronized OkHttpClient okHttpClient() {\n        return ServiceUtils.getCachingOkHttpClient(context);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"UweTrottmann/SeriesGuide","sample_ref":"refs/heads/dev","sample_path":"SeriesGuide/src/main/java/com/battlelancer/seriesguide/thetvdbapi/SgTheTvdb.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2f1e87a6f8af2734acbbbdcc7265e7a97639cd6c","size":"6450","content":"/*******************************************************************************\n * Copyright (c) 2014 OSSMETER Partners.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Yannis Korkontzelos - Implementation.\n *******************************************************************************/\npackage org.ossmeter.metricprovider.historic.newsgroups.responsetime;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.commons.lang.time.DurationFormatUtils;\nimport org.ossmeter.metricprovider.historic.newsgroups.responsetime.model.NewsgroupsResponseTimeHistoricMetric;\nimport org.ossmeter.metricprovider.trans.newsgroups.threadsrequestsreplies.ThreadsRequestsRepliesTransMetricProvider;\nimport org.ossmeter.metricprovider.trans.newsgroups.threadsrequestsreplies.model.NewsgroupsThreadsRequestsRepliesTransMetric;\nimport org.ossmeter.metricprovider.trans.newsgroups.threadsrequestsreplies.model.ThreadStatistics;\nimport org.ossmeter.platform.AbstractHistoricalMetricProvider;\nimport org.ossmeter.platform.Date;\nimport org.ossmeter.platform.IMetricProvider;\nimport org.ossmeter.platform.MetricProviderContext;\nimport org.ossmeter.platform.communicationchannel.nntp.NntpUtil;\nimport org.ossmeter.repository.model.CommunicationChannel;\nimport org.ossmeter.repository.model.Project;\nimport org.ossmeter.repository.model.cc.nntp.NntpNewsGroup;\nimport org.ossmeter.repository.model.sourceforge.Discussion;\n\nimport com.googlecode.pongo.runtime.Pongo;\n\npublic class ResponseTimeHistoricMetricProvider extends AbstractHistoricalMetricProvider{\n\n\tpublic final static String IDENTIFIER = \n\t\t\t\"org.ossmeter.metricprovider.historic.newsgroups.responsetime\";\n\n\tprotected MetricProviderContext context;\n\t\n\t/**\n\t * List of MPs that are used by this MP. These are MPs who have specified that \n\t * they 'provide' data for this MP.\n\t */\n\tprotected List<IMetricProvider> uses;\n\t\n\t@Override\n\tpublic String getIdentifier() {\n\t\treturn IDENTIFIER;\n\t}\n\t\n\t@Override\n\tpublic boolean appliesTo(Project project) {\n\t\tfor (CommunicationChannel communicationChannel: project.getCommunicationChannels()) {\n\t\t\tif (communicationChannel instanceof NntpNewsGroup) return true;\n\t\t\tif (communicationChannel instanceof Discussion) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Pongo measure(Project project) {\n//\t\tfinal long startTime = System.currentTimeMillis();\n\n\t\tif (uses.size()!=1) {\n\t\t\tSystem.err.println(\"Metric: dailyavgresponsetimepernewsgroup failed to retrieve \" + \n\t\t\t\t\t\t\t\t\"the transient metric it needs!\");\n\t\t\tSystem.exit(-1);\n\t\t}\n\n\t\tNewsgroupsThreadsRequestsRepliesTransMetric usedThreads = \n\t\t\t\t((ThreadsRequestsRepliesTransMetricProvider)uses.get(0)).adapt(context.getProjectDB(project));\n\n\t\tDate currentDate = context.getDate();\n\n\t\tlong sumOfDurations = 0,\n\t\t\t cumulativeSumOfDurations = 0;\n\t\tint threadsConsidered = 0,\n\t\t\tcumulativeThreadsConsidered = 0;\n\t\tString lastNewsgroupName = \"\";\n\t\t\n\t\tfor (ThreadStatistics thread: usedThreads.getThreads()) {\n\t\t\tlastNewsgroupName = thread.getNewsgroupName();\n\t\t\tif (thread.getAnswered()) {\n\t\t\t\tcumulativeSumOfDurations += thread.getResponseDurationSec();\n\t\t\t\tcumulativeThreadsConsidered++;\n\t\t\t\tjava.util.Date responseDate = NntpUtil.parseDate(thread.getResponseDate());\n\t\t\t\tif (currentDate.compareTo(responseDate)==0) {\n\t\t\t\t\tsumOfDurations += thread.getResponseDurationSec();\n\t\t\t\t\tthreadsConsidered++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tNewsgroupsResponseTimeHistoricMetric dailyAverageThreadResponseTime = new NewsgroupsResponseTimeHistoricMetric();\n\n\t\tdailyAverageThreadResponseTime.setNewsgroupName(lastNewsgroupName);\n\t\tdailyAverageThreadResponseTime.setThreadsConsidered(threadsConsidered);\n\t\tdailyAverageThreadResponseTime.setCumulativeThreadsConsidered(cumulativeThreadsConsidered);\n\n\t\tlong avgResponseTime = 0;\n\t\tif (threadsConsidered>0)\n\t\t\tavgResponseTime = computeAverageDuration(sumOfDurations, threadsConsidered);\n\t\tdailyAverageThreadResponseTime.setAvgResponseTime(avgResponseTime);\n\t\tString avgResponseTimeFormatted = format(avgResponseTime);\n\t\tdailyAverageThreadResponseTime.setAvgResponseTimeFormatted(avgResponseTimeFormatted);\n\n\t\tlong cumulativeAvgResponseTime = 0;\n\t\tif (cumulativeThreadsConsidered>0)\n\t\t\tcumulativeAvgResponseTime = computeAverageDuration(cumulativeSumOfDurations, cumulativeThreadsConsidered);\n\t\tdailyAverageThreadResponseTime.setCumulativeAvgResponseTime(cumulativeAvgResponseTime);\n\t\tString cumulativeAvgResponseTimeFormatted = format(cumulativeAvgResponseTime);\n\t\tdailyAverageThreadResponseTime.setCumulativeAvgResponseTimeFormatted(cumulativeAvgResponseTimeFormatted);\n\t\t\n\t\tif ( (threadsConsidered>0) || (cumulativeThreadsConsidered>0) ) {\n\t\t\t\n\t\t}\n\n//\t\tSystem.err.println(time(System.currentTimeMillis() - startTime) + \"\\tdaily_new\");\n\t\treturn dailyAverageThreadResponseTime;\n\t}\n\n\tprivate static final long SECONDS_DAY = 24 * 60 * 60;\n\n\tprivate long computeAverageDuration(long sumOfDurations, int threads) {\n\t\tif (threads>0)\n\t\t\treturn sumOfDurations/threads;\n\t\treturn 0;\n\t}\n\n\tprivate String format(long avgDuration) {\n\t\tString formatted = null;\n\t\tif (avgDuration>0) {\n\t\t\tint days = (int) (avgDuration / SECONDS_DAY);\n\t\t\tlong lessThanDay = (avgDuration % SECONDS_DAY);\n\t\t\tformatted = days + \":\" + \n\t\t\t\t\tDurationFormatUtils.formatDuration(lessThanDay*1000, \"HH:mm:ss:SS\");\n\t\t} else {\n\t\t\tformatted = 0 + \":\" + \n\t\t\t\t\tDurationFormatUtils.formatDuration(0, \"HH:mm:ss:SS\");\n\t\t}\n\t\treturn formatted;\n\t}\n\n\t@Override\n\tpublic void setUses(List<IMetricProvider> uses) {\n\t\tthis.uses = uses;\n\t}\n\t\n\t@Override\n\tpublic List<String> getIdentifiersOfUses() {\n\t\treturn Arrays.asList(ThreadsRequestsRepliesTransMetricProvider.class.getCanonicalName());\n\t}\n\n\t@Override\n\tpublic void setMetricProviderContext(MetricProviderContext context) {\n\t\tthis.context = context;\n\t}\n\n\t@Override\n\tpublic String getShortIdentifier() {\n\t\treturn \"avgresponsetimepernewsgroup\";\n\t}\n\n\t@Override\n\tpublic String getFriendlyName() {\n\t\treturn \"Average Thread Response Time Per Day Per Newsgroup\";\n\t}\n\n\t@Override\n\tpublic String getSummaryInformation() {\n\t\treturn \"This metric computes the average time in which the community \" +\n\t\t\t   \"responds to open threads per day for each newsgroup separately.\" + \n\t\t\t   \"Format: dd:HH:mm:ss:SS, where dd=days, HH:hours, mm=minutes, ss:seconds, SS=milliseconds.\";\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"ossmeter/ossmeter","sample_ref":"refs/heads/dev","sample_path":"metric-providers/org.ossmeter.metricprovider.historic.dailyavgresponsetimepernewsgroup/src/org/ossmeter/metricprovider/historic/newsgroups/responsetime/ResponseTimeHistoricMetricProvider.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c7d43546771e75d1f14203c0e4d82d948314f434","size":"35170","content":"/*\n * Copyright (c) 2010 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage com.google.api.client.http;\n\nimport com.google.api.client.util.Beta;\nimport com.google.api.client.util.IOUtils;\nimport com.google.api.client.util.LoggingStreamingContent;\nimport com.google.api.client.util.ObjectParser;\nimport com.google.api.client.util.Preconditions;\nimport com.google.api.client.util.Sleeper;\nimport com.google.api.client.util.StreamingContent;\nimport com.google.api.client.util.StringUtils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.FutureTask;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * HTTP request.\n *\n * <p>\n * Implementation is not thread-safe.\n * </p>\n *\n * @since 1.0\n * @author Yaniv Inbar\n */\npublic final class HttpRequest {\n\n  /**\n   * Current version of the Google API Client Library for Java.\n   *\n   * @since 1.8\n   */\n  public static final String VERSION = \"1.23.0-SNAPSHOT\";\n\n  /**\n   * User agent suffix for all requests.\n   *\n   * <p>\n   * Includes a {@code \"(gzip)\"} suffix in case the server -- as Google's servers may do -- checks\n   * the {@code User-Agent} header to try to detect if the client accepts gzip-encoded responses.\n   * </p>\n   *\n   * @since 1.4\n   */\n  public static final String USER_AGENT_SUFFIX = \"Google-HTTP-Java-Client/\" + VERSION + \" (gzip)\";\n\n  /**\n   * The default number of retries that will be allowed to execute before the request will be\n   * terminated.\n   *\n   * @see #getNumberOfRetries\n   * @since 1.22\n   */\n  public static final int DEFAULT_NUMBER_OF_RETRIES = 10;\n\n  /**\n   * HTTP request execute interceptor to intercept the start of {@link #execute()} (before executing\n   * the HTTP request) or {@code null} for none.\n   */\n  private HttpExecuteInterceptor executeInterceptor;\n\n  /** HTTP request headers. */\n  private HttpHeaders headers = new HttpHeaders();\n\n  /**\n   * HTTP response headers.\n   *\n   * <p>\n   * For example, this can be used if you want to use a subclass of {@link HttpHeaders} called\n   * MyHeaders to process the response:\n   * </p>\n   *\n   * <pre>\n  static String executeAndGetValueOfSomeCustomHeader(HttpRequest request) {\n    MyHeaders responseHeaders = new MyHeaders();\n    request.responseHeaders = responseHeaders;\n    HttpResponse response = request.execute();\n    return responseHeaders.someCustomHeader;\n  }\n   * </pre>\n   */\n  private HttpHeaders responseHeaders = new HttpHeaders();\n\n  /**\n   * The number of retries that will be allowed to execute before the request will be terminated or\n   * {@code 0} to not retry requests. Retries occur as a result of either\n   * {@link HttpUnsuccessfulResponseHandler} or {@link HttpIOExceptionHandler} which handles\n   * abnormal HTTP response or the I/O exception.\n   */\n  private int numRetries = DEFAULT_NUMBER_OF_RETRIES;\n\n  /**\n   * Determines the limit to the content size that will be logged during {@link #execute()}.\n   *\n   * <p>\n   * Content will only be logged if {@link #isLoggingEnabled} is {@code true}.\n   * </p>\n   *\n   * <p>\n   * If the content size is greater than this limit then it will not be logged.\n   * </p>\n   *\n   * <p>\n   * Can be set to {@code 0} to disable content logging. This is useful for example if content has\n   * sensitive data such as authentication information.\n   * </p>\n   *\n   * <p>\n   * Defaults to 16KB.\n   * </p>\n   */\n  private int contentLoggingLimit = 0x4000;\n\n  /** Determines whether logging should be enabled for this request. Defaults to {@code true}. */\n  private boolean loggingEnabled = true;\n\n  /** Determines whether logging in form of curl commands should be enabled for this request. */\n  private boolean curlLoggingEnabled = true;\n\n  /** HTTP request content or {@code null} for none. */\n  private HttpContent content;\n\n  /** HTTP transport. */\n  private final HttpTransport transport;\n\n  /** HTTP request method or {@code null} for none. */\n  private String requestMethod;\n\n  /** HTTP request URL. */\n  private GenericUrl url;\n\n  /** Timeout in milliseconds to establish a connection or {@code 0} for an infinite timeout. */\n  private int connectTimeout = 20 * 1000;\n\n  /**\n   * Timeout in milliseconds to read data from an established connection or {@code 0} for an\n   * infinite timeout.\n   */\n  private int readTimeout = 20 * 1000;\n\n  /** HTTP unsuccessful (non-2XX) response handler or {@code null} for none. */\n  private HttpUnsuccessfulResponseHandler unsuccessfulResponseHandler;\n\n  /** HTTP I/O exception handler or {@code null} for none. */\n  @Beta\n  private HttpIOExceptionHandler ioExceptionHandler;\n\n  /** HTTP response interceptor or {@code null} for none. */\n  private HttpResponseInterceptor responseInterceptor;\n\n  /** Parser used to parse responses. */\n  private ObjectParser objectParser;\n\n  /** HTTP content encoding or {@code null} for none. */\n  private HttpEncoding encoding;\n\n  /**\n   * The {@link BackOffPolicy} to use between retry attempts or {@code null} for none.\n   */\n  @Deprecated\n  @Beta\n  private BackOffPolicy backOffPolicy;\n\n  /** Whether to automatically follow redirects ({@code true} by default). */\n  private boolean followRedirects = true;\n\n  /**\n   * Whether to throw an exception at the end of {@link #execute()} on an HTTP error code (non-2XX)\n   * after all retries and response handlers have been exhausted ({@code true} by default).\n   */\n  private boolean throwExceptionOnExecuteError = true;\n\n  /**\n   * Whether to retry the request if an {@link IOException} is encountered in\n   * {@link LowLevelHttpRequest#execute()}.\n   */\n  @Deprecated\n  @Beta\n  private boolean retryOnExecuteIOException = false;\n\n  /**\n   * Whether to not add the suffix {@link #USER_AGENT_SUFFIX} to the User-Agent header.\n   *\n   * <p>\n   * It is {@code false} by default.\n   * </p>\n   */\n  private boolean suppressUserAgentSuffix;\n\n  /** Sleeper. */\n  private Sleeper sleeper = Sleeper.DEFAULT;\n\n  /**\n   * @param transport HTTP transport\n   * @param requestMethod HTTP request method or {@code null} for none\n   */\n  HttpRequest(HttpTransport transport, String requestMethod) {\n    this.transport = transport;\n    setRequestMethod(requestMethod);\n  }\n\n  /**\n   * Returns the HTTP transport.\n   *\n   * @since 1.5\n   */\n  public HttpTransport getTransport() {\n    return transport;\n  }\n\n  /**\n   * Returns the HTTP request method or {@code null} for none.\n   *\n   * @since 1.12\n   */\n  public String getRequestMethod() {\n    return requestMethod;\n  }\n\n  /**\n   * Sets the HTTP request method or {@code null} for none.\n   *\n   * @since 1.12\n   */\n  public HttpRequest setRequestMethod(String requestMethod) {\n    Preconditions.checkArgument(requestMethod == null || HttpMediaType.matchesToken(requestMethod));\n    this.requestMethod = requestMethod;\n    return this;\n  }\n\n  /**\n   * Returns the HTTP request URL.\n   *\n   * @since 1.5\n   */\n  public GenericUrl getUrl() {\n    return url;\n  }\n\n  /**\n   * Sets the HTTP request URL.\n   *\n   * @since 1.5\n   */\n  public HttpRequest setUrl(GenericUrl url) {\n    this.url = Preconditions.checkNotNull(url);\n    return this;\n  }\n\n  /**\n   * Returns the HTTP request content or {@code null} for none.\n   *\n   * @since 1.5\n   */\n  public HttpContent getContent() {\n    return content;\n  }\n\n  /**\n   * Sets the HTTP request content or {@code null} for none.\n   *\n   * @since 1.5\n   */\n  public HttpRequest setContent(HttpContent content) {\n    this.content = content;\n    return this;\n  }\n\n  /**\n   * Returns the HTTP content encoding or {@code null} for none.\n   *\n   * @since 1.14\n   */\n  public HttpEncoding getEncoding() {\n    return encoding;\n  }\n\n  /**\n   * Sets the HTTP content encoding or {@code null} for none.\n   *\n   * @since 1.14\n   */\n  public HttpRequest setEncoding(HttpEncoding encoding) {\n    this.encoding = encoding;\n    return this;\n  }\n\n  /**\n   * {@link Beta} <br/>\n   * Returns the {@link BackOffPolicy} to use between retry attempts or {@code null} for none.\n   *\n   * @since 1.7\n   * @deprecated (scheduled to be removed in 1.18).\n   *             {@link #setUnsuccessfulResponseHandler(HttpUnsuccessfulResponseHandler)} with a new\n   *             {@link HttpBackOffUnsuccessfulResponseHandler} instead.\n   */\n  @Deprecated\n  @Beta\n  public BackOffPolicy getBackOffPolicy() {\n    return backOffPolicy;\n  }\n\n  /**\n   * {@link Beta} <br/>\n   * Sets the {@link BackOffPolicy} to use between retry attempts or {@code null} for none.\n   *\n   * @since 1.7\n   * @deprecated (scheduled to be removed in 1.18). Use\n   *             {@link #setUnsuccessfulResponseHandler(HttpUnsuccessfulResponseHandler)} with a new\n   *             {@link HttpBackOffUnsuccessfulResponseHandler} instead.\n   */\n  @Deprecated\n  @Beta\n  public HttpRequest setBackOffPolicy(BackOffPolicy backOffPolicy) {\n    this.backOffPolicy = backOffPolicy;\n    return this;\n  }\n\n  /**\n   * Returns the limit to the content size that will be logged during {@link #execute()}.\n   *\n   * <p>\n   * If the content size is greater than this limit then it will not be logged.\n   * </p>\n   *\n   * <p>\n   * Content will only be logged if {@link #isLoggingEnabled} is {@code true}.\n   * </p>\n   *\n   * <p>\n   * Can be set to {@code 0} to disable content logging. This is useful for example if content has\n   * sensitive data such as authentication information.\n   * </p>\n   *\n   * <p>\n   * Defaults to 16KB.\n   * </p>\n   *\n   * @since 1.7\n   */\n  public int getContentLoggingLimit() {\n    return contentLoggingLimit;\n  }\n\n  /**\n   * Set the limit to the content size that will be logged during {@link #execute()}.\n   *\n   * <p>\n   * If the content size is greater than this limit then it will not be logged.\n   * </p>\n   *\n   * <p>\n   * Content will only be logged if {@link #isLoggingEnabled} is {@code true}.\n   * </p>\n   *\n   * <p>\n   * Can be set to {@code 0} to disable content logging. This is useful for example if content has\n   * sensitive data such as authentication information.\n   * </p>\n   *\n   * <p>\n   * Defaults to 16KB.\n   * </p>\n   *\n   * @since 1.7\n   */\n  public HttpRequest setContentLoggingLimit(int contentLoggingLimit) {\n    Preconditions.checkArgument(\n        contentLoggingLimit >= 0, \"The content logging limit must be non-negative.\");\n    this.contentLoggingLimit = contentLoggingLimit;\n    return this;\n  }\n\n  /**\n   * Returns whether logging should be enabled for this request.\n   *\n   * <p>\n   * Defaults to {@code true}.\n   * </p>\n   *\n   * @since 1.9\n   */\n  public boolean isLoggingEnabled() {\n    return loggingEnabled;\n  }\n\n  /**\n   * Sets whether logging should be enabled for this request.\n   *\n   * <p>\n   * Defaults to {@code true}.\n   * </p>\n   *\n   * @since 1.9\n   */\n  public HttpRequest setLoggingEnabled(boolean loggingEnabled) {\n    this.loggingEnabled = loggingEnabled;\n    return this;\n  }\n\n  /**\n   * Returns whether logging in form of curl commands is enabled for this request.\n   *\n   * @since 1.11\n   */\n  public boolean isCurlLoggingEnabled() {\n    return curlLoggingEnabled;\n  }\n\n  /**\n   * Sets whether logging in form of curl commands should be enabled for this request.\n   *\n   * <p>\n   * Defaults to {@code true}.\n   * </p>\n   *\n   * @since 1.11\n   */\n  public HttpRequest setCurlLoggingEnabled(boolean curlLoggingEnabled) {\n    this.curlLoggingEnabled = curlLoggingEnabled;\n    return this;\n  }\n\n  /**\n   * Returns the timeout in milliseconds to establish a connection or {@code 0} for an infinite\n   * timeout.\n   *\n   * @since 1.5\n   */\n  public int getConnectTimeout() {\n    return connectTimeout;\n  }\n\n  /**\n   * Sets the timeout in milliseconds to establish a connection or {@code 0} for an infinite\n   * timeout.\n   *\n   * <p>\n   * By default it is 20000 (20 seconds).\n   * </p>\n   *\n   * @since 1.5\n   */\n  public HttpRequest setConnectTimeout(int connectTimeout) {\n    Preconditions.checkArgument(connectTimeout >= 0);\n    this.connectTimeout = connectTimeout;\n    return this;\n  }\n\n  /**\n   * Returns the timeout in milliseconds to read data from an established connection or {@code 0}\n   * for an infinite timeout.\n   *\n   * <p>\n   * By default it is 20000 (20 seconds).\n   * </p>\n   *\n   * @since 1.5\n   */\n  public int getReadTimeout() {\n    return readTimeout;\n  }\n\n  /**\n   * Sets the timeout in milliseconds to read data from an established connection or {@code 0} for\n   * an infinite timeout.\n   *\n   * @since 1.5\n   */\n  public HttpRequest setReadTimeout(int readTimeout) {\n    Preconditions.checkArgument(readTimeout >= 0);\n    this.readTimeout = readTimeout;\n    return this;\n  }\n\n  /**\n   * Returns the HTTP request headers.\n   *\n   * @since 1.5\n   */\n  public HttpHeaders getHeaders() {\n    return headers;\n  }\n\n  /**\n   * Sets the HTTP request headers.\n   *\n   * <p>\n   * By default, this is a new unmodified instance of {@link HttpHeaders}.\n   * </p>\n   *\n   * @since 1.5\n   */\n  public HttpRequest setHeaders(HttpHeaders headers) {\n    this.headers = Preconditions.checkNotNull(headers);\n    return this;\n  }\n\n  /**\n   * Returns the HTTP response headers.\n   *\n   * @since 1.5\n   */\n  public HttpHeaders getResponseHeaders() {\n    return responseHeaders;\n  }\n\n  /**\n   * Sets the HTTP response headers.\n   *\n   * <p>\n   * By default, this is a new unmodified instance of {@link HttpHeaders}.\n   * </p>\n   *\n   * <p>\n   * For example, this can be used if you want to use a subclass of {@link HttpHeaders} called\n   * MyHeaders to process the response:\n   * </p>\n   *\n   * <pre>\n  static String executeAndGetValueOfSomeCustomHeader(HttpRequest request) {\n    MyHeaders responseHeaders = new MyHeaders();\n    request.responseHeaders = responseHeaders;\n    HttpResponse response = request.execute();\n    return responseHeaders.someCustomHeader;\n  }\n   * </pre>\n   *\n   * @since 1.5\n   */\n  public HttpRequest setResponseHeaders(HttpHeaders responseHeaders) {\n    this.responseHeaders = Preconditions.checkNotNull(responseHeaders);\n    return this;\n  }\n\n  /**\n   * Returns the HTTP request execute interceptor to intercept the start of {@link #execute()}\n   * (before executing the HTTP request) or {@code null} for none.\n   *\n   * @since 1.5\n   */\n  public HttpExecuteInterceptor getInterceptor() {\n    return executeInterceptor;\n  }\n\n  /**\n   * Sets the HTTP request execute interceptor to intercept the start of {@link #execute()} (before\n   * executing the HTTP request) or {@code null} for none.\n   *\n   * @since 1.5\n   */\n  public HttpRequest setInterceptor(HttpExecuteInterceptor interceptor) {\n    this.executeInterceptor = interceptor;\n    return this;\n  }\n\n  /**\n   * Returns the HTTP unsuccessful (non-2XX) response handler or {@code null} for none.\n   *\n   * @since 1.5\n   */\n  public HttpUnsuccessfulResponseHandler getUnsuccessfulResponseHandler() {\n    return unsuccessfulResponseHandler;\n  }\n\n  /**\n   * Sets the HTTP unsuccessful (non-2XX) response handler or {@code null} for none.\n   *\n   * @since 1.5\n   */\n  public HttpRequest setUnsuccessfulResponseHandler(\n      HttpUnsuccessfulResponseHandler unsuccessfulResponseHandler) {\n    this.unsuccessfulResponseHandler = unsuccessfulResponseHandler;\n    return this;\n  }\n\n  /**\n   * {@link Beta} <br/>\n   * Returns the HTTP I/O exception handler or {@code null} for none.\n   *\n   * @since 1.15\n   */\n  @Beta\n  public HttpIOExceptionHandler getIOExceptionHandler() {\n    return ioExceptionHandler;\n  }\n\n  /**\n   * {@link Beta} <br/>\n   * Sets the HTTP I/O exception handler or {@code null} for none.\n   *\n   * @since 1.15\n   */\n  @Beta\n  public HttpRequest setIOExceptionHandler(HttpIOExceptionHandler ioExceptionHandler) {\n    this.ioExceptionHandler = ioExceptionHandler;\n    return this;\n  }\n\n  /**\n   * Returns the HTTP response interceptor or {@code null} for none.\n   *\n   * @since 1.13\n   */\n  public HttpResponseInterceptor getResponseInterceptor() {\n    return responseInterceptor;\n  }\n\n  /**\n   * Sets the HTTP response interceptor or {@code null} for none.\n   *\n   * @since 1.13\n   */\n  public HttpRequest setResponseInterceptor(HttpResponseInterceptor responseInterceptor) {\n    this.responseInterceptor = responseInterceptor;\n    return this;\n  }\n\n  /**\n   * Returns the number of retries that will be allowed to execute before the request will be\n   * terminated or {@code 0} to not retry requests. Retries occur as a result of either\n   * {@link HttpUnsuccessfulResponseHandler} or {@link HttpIOExceptionHandler} which handles\n   * abnormal HTTP response or the I/O exception.\n   *\n   *\n   * @since 1.5\n   */\n  public int getNumberOfRetries() {\n    return numRetries;\n  }\n\n  /**\n   * Sets the number of retries that will be allowed to execute before the request will be\n   * terminated or {@code 0} to not retry requests. Retries occur as a result of either\n   * {@link HttpUnsuccessfulResponseHandler} or {@link HttpIOExceptionHandler} which handles\n   * abnormal HTTP response or the I/O exception.\n   *\n   * <p>\n   * The default value is {@link #DEFAULT_NUMBER_OF_RETRIES}.\n   * </p>\n   *\n   * @since 1.5\n   */\n  public HttpRequest setNumberOfRetries(int numRetries) {\n    Preconditions.checkArgument(numRetries >= 0);\n    this.numRetries = numRetries;\n    return this;\n  }\n\n  /**\n   * Sets the {@link ObjectParser} used to parse the response to this request or {@code null} for\n   * none.\n   *\n   * <p>\n   * This parser will be preferred over any registered HttpParser.\n   * </p>\n   *\n   * @since 1.10\n   */\n  public HttpRequest setParser(ObjectParser parser) {\n    this.objectParser = parser;\n    return this;\n  }\n\n  /**\n   * Returns the {@link ObjectParser} used to parse the response or {@code null} for none.\n   *\n   * @since 1.10\n   */\n  public final ObjectParser getParser() {\n    return objectParser;\n  }\n\n  /**\n   * Returns whether to follow redirects automatically.\n   *\n   * @since 1.6\n   */\n  public boolean getFollowRedirects() {\n    return followRedirects;\n  }\n\n  /**\n   * Sets whether to follow redirects automatically.\n   *\n   * <p>\n   * The default value is {@code true}.\n   * </p>\n   *\n   * @since 1.6\n   */\n  public HttpRequest setFollowRedirects(boolean followRedirects) {\n    this.followRedirects = followRedirects;\n    return this;\n  }\n\n  /**\n   * Returns whether to throw an exception at the end of {@link #execute()} on an HTTP error code\n   * (non-2XX) after all retries and response handlers have been exhausted.\n   *\n   * @since 1.7\n   */\n  public boolean getThrowExceptionOnExecuteError() {\n    return throwExceptionOnExecuteError;\n  }\n\n  /**\n   * Sets whether to throw an exception at the end of {@link #execute()} on a HTTP error code\n   * (non-2XX) after all retries and response handlers have been exhausted.\n   *\n   * <p>\n   * The default value is {@code true}.\n   * </p>\n   *\n   * @since 1.7\n   */\n  public HttpRequest setThrowExceptionOnExecuteError(boolean throwExceptionOnExecuteError) {\n    this.throwExceptionOnExecuteError = throwExceptionOnExecuteError;\n    return this;\n  }\n\n  /**\n   * {@link Beta} <br/>\n   * Returns whether to retry the request if an {@link IOException} is encountered in\n   * {@link LowLevelHttpRequest#execute()}.\n   *\n   * @since 1.9\n   * @deprecated (scheduled to be removed in 1.18) Use\n   *             {@link #setIOExceptionHandler(HttpIOExceptionHandler)} instead.\n   */\n  @Deprecated\n  @Beta\n  public boolean getRetryOnExecuteIOException() {\n    return retryOnExecuteIOException;\n  }\n\n  /**\n   * {@link Beta} <br/>\n   * Sets whether to retry the request if an {@link IOException} is encountered in\n   * {@link LowLevelHttpRequest#execute()}.\n   *\n   * <p>\n   * The default value is {@code false}.\n   * </p>\n   *\n   * @since 1.9\n   * @deprecated (scheduled to be removed in 1.18) Use\n   *             {@link #setIOExceptionHandler(HttpIOExceptionHandler)} instead.\n   */\n  @Deprecated\n  @Beta\n  public HttpRequest setRetryOnExecuteIOException(boolean retryOnExecuteIOException) {\n    this.retryOnExecuteIOException = retryOnExecuteIOException;\n    return this;\n  }\n\n  /**\n   * Returns whether to not add the suffix {@link #USER_AGENT_SUFFIX} to the User-Agent header.\n   *\n   * @since 1.11\n   */\n  public boolean getSuppressUserAgentSuffix() {\n    return suppressUserAgentSuffix;\n  }\n\n  /**\n   * Sets whether to not add the suffix {@link #USER_AGENT_SUFFIX} to the User-Agent header.\n   *\n   * <p>\n   * The default value is {@code false}.\n   * </p>\n   *\n   * @since 1.11\n   */\n  public HttpRequest setSuppressUserAgentSuffix(boolean suppressUserAgentSuffix) {\n    this.suppressUserAgentSuffix = suppressUserAgentSuffix;\n    return this;\n  }\n\n  /**\n   * Execute the HTTP request and returns the HTTP response.\n   *\n   * <p>\n   * Note that regardless of the returned status code, the HTTP response content has not been parsed\n   * yet, and must be parsed by the calling code.\n   * </p>\n   *\n   * <p>\n   * Note that when calling to this method twice or more, the state of this HTTP request object\n   * isn't cleared, so the request will continue where it was left. For example, the state of the\n   * {@link HttpUnsuccessfulResponseHandler} attached to this HTTP request will remain the same as\n   * it was left after last execute.\n   * </p>\n   *\n   * <p>\n   * Almost all details of the request and response are logged if {@link Level#CONFIG} is loggable.\n   * The only exception is the value of the {@code Authorization} header which is only logged if\n   * {@link Level#ALL} is loggable.\n   * </p>\n   *\n   * <p>\n   * Callers should call {@link HttpResponse#disconnect} when the returned HTTP response object is\n   * no longer needed. However, {@link HttpResponse#disconnect} does not have to be called if the\n   * response stream is properly closed. Example usage:\n   * </p>\n   *\n   * <pre>\n     HttpResponse response = request.execute();\n     try {\n       // process the HTTP response object\n     } finally {\n       response.disconnect();\n     }\n   * </pre>\n   *\n   * @return HTTP response for an HTTP success response (or HTTP error response if\n   *         {@link #getThrowExceptionOnExecuteError()} is {@code false})\n   * @throws HttpResponseException for an HTTP error response (only if\n   *         {@link #getThrowExceptionOnExecuteError()} is {@code true})\n   * @see HttpResponse#isSuccessStatusCode()\n   */\n  @SuppressWarnings(\"deprecation\")\n  public HttpResponse execute() throws IOException {\n    boolean retryRequest = false;\n    Preconditions.checkArgument(numRetries >= 0);\n    int retriesRemaining = numRetries;\n    if (backOffPolicy != null) {\n      // Reset the BackOffPolicy at the start of each execute.\n      backOffPolicy.reset();\n    }\n    HttpResponse response = null;\n    IOException executeException;\n\n    Preconditions.checkNotNull(requestMethod);\n    Preconditions.checkNotNull(url);\n\n    do {\n      // Cleanup any unneeded response from a previous iteration\n      if (response != null) {\n        response.ignore();\n      }\n\n      response = null;\n      executeException = null;\n\n      // run the interceptor\n      if (executeInterceptor != null) {\n        executeInterceptor.intercept(this);\n      }\n      // build low-level HTTP request\n      String urlString = url.build();\n      LowLevelHttpRequest lowLevelHttpRequest = transport.buildRequest(requestMethod, urlString);\n      Logger logger = HttpTransport.LOGGER;\n      boolean loggable = loggingEnabled && logger.isLoggable(Level.CONFIG);\n      StringBuilder logbuf = null;\n      StringBuilder curlbuf = null;\n      // log method and URL\n      if (loggable) {\n        logbuf = new StringBuilder();\n        logbuf.append(\"-------------- REQUEST  --------------\").append(StringUtils.LINE_SEPARATOR);\n        logbuf.append(requestMethod)\n            .append(' ').append(urlString).append(StringUtils.LINE_SEPARATOR);\n\n        // setup curl logging\n        if (curlLoggingEnabled) {\n          curlbuf = new StringBuilder(\"curl -v --compressed\");\n          if (!requestMethod.equals(HttpMethods.GET)) {\n            curlbuf.append(\" -X \").append(requestMethod);\n          }\n        }\n      }\n      // add to user agent\n      String originalUserAgent = headers.getUserAgent();\n      if (!suppressUserAgentSuffix) {\n        if (originalUserAgent == null) {\n          headers.setUserAgent(USER_AGENT_SUFFIX);\n        } else {\n          headers.setUserAgent(originalUserAgent + \" \" + USER_AGENT_SUFFIX);\n        }\n      }\n      // headers\n      HttpHeaders.serializeHeaders(headers, logbuf, curlbuf, logger, lowLevelHttpRequest);\n      if (!suppressUserAgentSuffix) {\n        // set the original user agent back so that retries do not keep appending to it\n        headers.setUserAgent(originalUserAgent);\n      }\n\n      // content\n      StreamingContent streamingContent = content;\n      final boolean contentRetrySupported = streamingContent == null || content.retrySupported();\n      if (streamingContent != null) {\n        final String contentEncoding;\n        final long contentLength;\n        final String contentType = content.getType();\n        // log content\n        if (loggable) {\n          streamingContent = new LoggingStreamingContent(\n              streamingContent, HttpTransport.LOGGER, Level.CONFIG, contentLoggingLimit);\n        }\n        // encoding\n        if (encoding == null) {\n          contentEncoding = null;\n          contentLength = content.getLength();\n        } else {\n          contentEncoding = encoding.getName();\n          streamingContent = new HttpEncodingStreamingContent(streamingContent, encoding);\n          contentLength = contentRetrySupported ? IOUtils.computeLength(streamingContent) : -1;\n        }\n        // append content headers to log buffer\n        if (loggable) {\n          if (contentType != null) {\n            String header = \"Content-Type: \" + contentType;\n            logbuf.append(header).append(StringUtils.LINE_SEPARATOR);\n            if (curlbuf != null) {\n              curlbuf.append(\" -H '\" + header + \"'\");\n            }\n          }\n          if (contentEncoding != null) {\n            String header = \"Content-Encoding: \" + contentEncoding;\n            logbuf.append(header).append(StringUtils.LINE_SEPARATOR);\n            if (curlbuf != null) {\n              curlbuf.append(\" -H '\" + header + \"'\");\n            }\n          }\n          if (contentLength >= 0) {\n            String header = \"Content-Length: \" + contentLength;\n            logbuf.append(header).append(StringUtils.LINE_SEPARATOR);\n            // do not log @ curl as the user will most likely manipulate the content\n          }\n        }\n        if (curlbuf != null) {\n          curlbuf.append(\" -d '@-'\");\n        }\n        // send content information to low-level HTTP request\n        lowLevelHttpRequest.setContentType(contentType);\n        lowLevelHttpRequest.setContentEncoding(contentEncoding);\n        lowLevelHttpRequest.setContentLength(contentLength);\n        lowLevelHttpRequest.setStreamingContent(streamingContent);\n      }\n      // log from buffer\n      if (loggable) {\n        logger.config(logbuf.toString());\n        if (curlbuf != null) {\n          curlbuf.append(\" -- '\");\n          curlbuf.append(urlString.replaceAll(\"\\'\", \"'\\\"'\\\"'\"));\n          curlbuf.append(\"'\");\n          if (streamingContent != null) {\n            curlbuf.append(\" << $$$\");\n          }\n          logger.config(curlbuf.toString());\n        }\n      }\n\n      // We need to make sure our content type can support retry\n      // null content is inherently able to be retried\n      retryRequest = contentRetrySupported && retriesRemaining > 0;\n\n      // execute\n      lowLevelHttpRequest.setTimeout(connectTimeout, readTimeout);\n      try {\n        LowLevelHttpResponse lowLevelHttpResponse = lowLevelHttpRequest.execute();\n        // Flag used to indicate if an exception is thrown before the response is constructed.\n        boolean responseConstructed = false;\n        try {\n          response = new HttpResponse(this, lowLevelHttpResponse);\n          responseConstructed = true;\n        } finally {\n          if (!responseConstructed) {\n            InputStream lowLevelContent = lowLevelHttpResponse.getContent();\n            if (lowLevelContent != null) {\n              lowLevelContent.close();\n            }\n          }\n        }\n      } catch (IOException e) {\n        if (!retryOnExecuteIOException && (ioExceptionHandler == null\n            || !ioExceptionHandler.handleIOException(this, retryRequest))) {\n          throw e;\n        }\n        // Save the exception in case the retries do not work and we need to re-throw it later.\n        executeException = e;\n        logger.log(Level.WARNING, \"exception thrown while executing request\", e);\n      }\n\n      // Flag used to indicate if an exception is thrown before the response has completed\n      // processing.\n      boolean responseProcessed = false;\n      try {\n        if (response != null && !response.isSuccessStatusCode()) {\n          boolean errorHandled = false;\n          if (unsuccessfulResponseHandler != null) {\n            // Even if we don't have the potential to retry, we might want to run the\n            // handler to fix conditions (like expired tokens) that might cause us\n            // trouble on our next request\n            errorHandled = unsuccessfulResponseHandler.handleResponse(this, response, retryRequest);\n          }\n          if (!errorHandled) {\n            if (handleRedirect(response.getStatusCode(), response.getHeaders())) {\n              // The unsuccessful request's error could not be handled and it is a redirect request.\n              errorHandled = true;\n            } else if (retryRequest && backOffPolicy != null\n                && backOffPolicy.isBackOffRequired(response.getStatusCode())) {\n              // The unsuccessful request's error could not be handled and should be backed off\n              // before retrying\n              long backOffTime = backOffPolicy.getNextBackOffMillis();\n              if (backOffTime != BackOffPolicy.STOP) {\n                try {\n                  sleeper.sleep(backOffTime);\n                } catch (InterruptedException exception) {\n                  // ignore\n                }\n                errorHandled = true;\n              }\n            }\n          }\n          // A retry is required if the error was successfully handled or if it is a redirect\n          // request or if the back off policy determined a retry is necessary.\n          retryRequest &= errorHandled;\n          // need to close the response stream before retrying a request\n          if (retryRequest) {\n            response.ignore();\n          }\n        } else {\n          // Retry is not required for a successful status code unless the response is null.\n          retryRequest &= (response == null);\n        }\n        // Once there are no more retries remaining, this will be -1\n        // Count redirects as retries, we want a finite limit of redirects.\n        retriesRemaining--;\n\n        responseProcessed = true;\n      } finally {\n        if (response != null && !responseProcessed) {\n          response.disconnect();\n        }\n      }\n    } while (retryRequest);\n\n    if (response == null) {\n      // Retries did not help resolve the execute exception, re-throw it.\n      throw executeException;\n    }\n    // response interceptor\n    if (responseInterceptor != null) {\n      responseInterceptor.interceptResponse(response);\n    }\n    // throw an exception if unsuccessful response\n    if (throwExceptionOnExecuteError && !response.isSuccessStatusCode()) {\n      try {\n        throw new HttpResponseException(response);\n      } finally {\n        response.disconnect();\n      }\n    }\n    return response;\n  }\n\n  /**\n   * {@link Beta} <br/>\n   * Executes this request asynchronously in a single separate thread using the supplied executor.\n   *\n   * @param executor executor to run the asynchronous request\n   * @return future for accessing the HTTP response\n   * @since 1.13\n   */\n  @Beta\n  public Future<HttpResponse> executeAsync(Executor executor) {\n    FutureTask<HttpResponse> future = new FutureTask<HttpResponse>(new Callable<HttpResponse>() {\n\n      public HttpResponse call() throws Exception {\n        return execute();\n      }\n    });\n    executor.execute(future);\n    return future;\n  }\n\n  /**\n   * {@link Beta} <br/>\n   * Executes this request asynchronously using {@link #executeAsync(Executor)} in a single separate\n   * thread using {@link Executors#newSingleThreadExecutor()}.\n   *\n   * @return A future for accessing the results of the asynchronous request.\n   * @since 1.13\n   */\n  @Beta\n  public Future<HttpResponse> executeAsync() {\n    return executeAsync(Executors.newSingleThreadExecutor());\n  }\n\n  /**\n   * Sets up this request object to handle the necessary redirect if redirects are turned on, it is\n   * a redirect status code and the header has a location.\n   *\n   * <p>\n   * When the status code is {@code 303} the method on the request is changed to a GET as per the\n   * RFC2616 specification. On a redirect, it also removes the {@code \"Authorization\"} and all\n   * {@code \"If-*\"} request headers.\n   * </p>\n   *\n   * <p>\n   * Upgrade warning: When handling a status code of 303, {@link #handleRedirect(int, HttpHeaders)}\n   * now correctly removes any content from the body of the new request, as GET requests should not\n   * have content. It did not do this in prior version 1.16.\n   * </p>\n   *\n   * @return whether the redirect was successful\n   * @since 1.11\n   */\n  public boolean handleRedirect(int statusCode, HttpHeaders responseHeaders) {\n    String redirectLocation = responseHeaders.getLocation();\n    if (getFollowRedirects() && HttpStatusCodes.isRedirect(statusCode)\n        && redirectLocation != null) {\n      // resolve the redirect location relative to the current location\n      setUrl(new GenericUrl(url.toURL(redirectLocation)));\n      // on 303 change method to GET\n      if (statusCode == HttpStatusCodes.STATUS_CODE_SEE_OTHER) {\n        setRequestMethod(HttpMethods.GET);\n        // GET requests do not support non-zero content length\n        setContent(null);\n      }\n      // remove Authorization and If-* headers\n      headers.setAuthorization((String) null);\n      headers.setIfMatch((String) null);\n      headers.setIfNoneMatch((String) null);\n      headers.setIfModifiedSince((String) null);\n      headers.setIfUnmodifiedSince((String) null);\n      headers.setIfRange((String) null);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Returns the sleeper.\n   *\n   * @since 1.15\n   */\n  public Sleeper getSleeper() {\n    return sleeper;\n  }\n\n  /**\n   * Sets the sleeper. The default value is {@link Sleeper#DEFAULT}.\n   *\n   * @since 1.15\n   */\n  public HttpRequest setSleeper(Sleeper sleeper) {\n    this.sleeper = Preconditions.checkNotNull(sleeper);\n    return this;\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"google/google-http-java-client","sample_ref":"refs/heads/dev","sample_path":"google-http-client/src/main/java/com/google/api/client/http/HttpRequest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"adb37aa300d514b29d811526e40a8c20cdd77e63","size":"9101","content":"package org.ossmeter.libsvm;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.Formatter;\nimport java.util.StringTokenizer;\n\nclass svm_scale\n{\n\tprivate String line = null;\n\tprivate double lower = -1.0;\n\tprivate double upper = 1.0;\n\tprivate double y_lower;\n\tprivate double y_upper;\n\tprivate boolean y_scaling = false;\n\tprivate double[] feature_max;\n\tprivate double[] feature_min;\n\tprivate double y_max = -Double.MAX_VALUE;\n\tprivate double y_min = Double.MAX_VALUE;\n\tprivate int max_index;\n\tprivate long num_nonzeros = 0;\n\tprivate long new_num_nonzeros = 0;\n\n\tprivate static void exit_with_help()\n\t{\n\t\tSystem.out.print(\n\t\t \"Usage: svm-scale [options] data_filename\\n\"\n\t\t+\"options:\\n\"\n\t\t+\"-l lower : x scaling lower limit (default -1)\\n\"\n\t\t+\"-u upper : x scaling upper limit (default +1)\\n\"\n\t\t+\"-y y_lower y_upper : y scaling limits (default: no y scaling)\\n\"\n\t\t+\"-s save_filename : save scaling parameters to save_filename\\n\"\n\t\t+\"-r restore_filename : restore scaling parameters from restore_filename\\n\"\n\t\t);\n\t\tSystem.exit(1);\n\t}\n\n\tprivate BufferedReader rewind(BufferedReader fp, String filename) throws IOException\n\t{\n\t\tfp.close();\n\t\treturn new BufferedReader(new FileReader(filename));\n\t}\n\n\tprivate void output_target(double value)\n\t{\n\t\tif(y_scaling)\n\t\t{\n\t\t\tif(value == y_min)\n\t\t\t\tvalue = y_lower;\n\t\t\telse if(value == y_max)\n\t\t\t\tvalue = y_upper;\n\t\t\telse\n\t\t\t\tvalue = y_lower + (y_upper-y_lower) *\n\t\t\t\t(value-y_min) / (y_max-y_min);\n\t\t}\n\n\t\tSystem.out.print(value + \" \");\n\t}\n\n\tprivate void output(int index, double value)\n\t{\n\t\t/* skip single-valued attribute */\n\t\tif(feature_max[index] == feature_min[index])\n\t\t\treturn;\n\n\t\tif(value == feature_min[index])\n\t\t\tvalue = lower;\n\t\telse if(value == feature_max[index])\n\t\t\tvalue = upper;\n\t\telse\n\t\t\tvalue = lower + (upper-lower) * \n\t\t\t\t(value-feature_min[index])/\n\t\t\t\t(feature_max[index]-feature_min[index]);\n\n\t\tif(value != 0)\n\t\t{\n\t\t\tSystem.out.print(index + \":\" + value + \" \");\n\t\t\tnew_num_nonzeros++;\n\t\t}\n\t}\n\n\tprivate String readline(BufferedReader fp) throws IOException\n\t{\n\t\tline = fp.readLine();\n\t\treturn line;\n\t}\n\n\tprivate void run(String []argv) throws IOException\n\t{\n\t\tint i,index;\n\t\tBufferedReader fp = null, fp_restore = null;\n\t\tString save_filename = null;\n\t\tString restore_filename = null;\n\t\tString data_filename = null;\n\n\n\t\tfor(i=0;i<argv.length;i++)\n\t\t{\n\t\t\tif (argv[i].charAt(0) != '-')\tbreak;\n\t\t\t++i;\n\t\t\tswitch(argv[i-1].charAt(1))\n\t\t\t{\n\t\t\t\tcase 'l': lower = Double.parseDouble(argv[i]);\tbreak;\n\t\t\t\tcase 'u': upper = Double.parseDouble(argv[i]);\tbreak;\n\t\t\t\tcase 'y':\n\t\t\t\t\t  y_lower = Double.parseDouble(argv[i]);\n\t\t\t\t\t  ++i;\n\t\t\t\t\t  y_upper = Double.parseDouble(argv[i]);\n\t\t\t\t\t  y_scaling = true;\n\t\t\t\t\t  break;\n\t\t\t\tcase 's': save_filename = argv[i];\tbreak;\n\t\t\t\tcase 'r': restore_filename = argv[i];\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t  System.err.println(\"unknown option\");\n\t\t\t\t\t  exit_with_help();\n\t\t\t}\n\t\t}\n\n\t\tif(!(upper > lower) || (y_scaling && !(y_upper > y_lower)))\n\t\t{\n\t\t\tSystem.err.println(\"inconsistent lower/upper specification\");\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tif(restore_filename != null && save_filename != null)\n\t\t{\n\t\t\tSystem.err.println(\"cannot use -r and -s simultaneously\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tif(argv.length != i+1)\n\t\t\texit_with_help();\n\n\t\tdata_filename = argv[i];\n\t\ttry {\n\t\t\tfp = new BufferedReader(new FileReader(data_filename));\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"can't open file \" + data_filename);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\t/* assumption: min index of attributes is 1 */\n\t\t/* pass 1: find out max index of attributes */\n\t\tmax_index = 0;\n\n\t\tif(restore_filename != null)\n\t\t{\n\t\t\tint idx;\n\n\t\t\ttry {\n\t\t\t\tfp_restore = new BufferedReader(new FileReader(restore_filename));\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tSystem.err.println(\"can't open file \" + restore_filename);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif((fp_restore.read()) == 'y')\n\t\t\t{\n\t\t\t\tfp_restore.readLine();\n\t\t\t\tfp_restore.readLine();\t\t\n\t\t\t\tfp_restore.readLine();\t\t\n\t\t\t}\n\t\t\tfp_restore.readLine();\n\t\t\tfp_restore.readLine();\n\n\t\t\tString restore_line = null;\n\t\t\twhile((restore_line = fp_restore.readLine())!=null)\n\t\t\t{\n\t\t\t\tStringTokenizer st2 = new StringTokenizer(restore_line);\n\t\t\t\tidx = Integer.parseInt(st2.nextToken());\n\t\t\t\tmax_index = Math.max(max_index, idx);\n\t\t\t}\n\t\t\tfp_restore = rewind(fp_restore, restore_filename);\n\t\t}\n\n\t\twhile (readline(fp) != null)\n\t\t{\n\t\t\tStringTokenizer st = new StringTokenizer(line,\" \\t\\n\\r\\f:\");\n\t\t\tst.nextToken();\n\t\t\twhile(st.hasMoreTokens())\n\t\t\t{\n\t\t\t\tindex = Integer.parseInt(st.nextToken());\n\t\t\t\tmax_index = Math.max(max_index, index);\n\t\t\t\tst.nextToken();\n\t\t\t\tnum_nonzeros++;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tfeature_max = new double[(max_index+1)];\n\t\t\tfeature_min = new double[(max_index+1)];\n\t\t} catch(OutOfMemoryError e) {\n\t\t\tSystem.err.println(\"can't allocate enough memory\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tfor(i=0;i<=max_index;i++)\n\t\t{\n\t\t\tfeature_max[i] = -Double.MAX_VALUE;\n\t\t\tfeature_min[i] = Double.MAX_VALUE;\n\t\t}\n\n\t\tfp = rewind(fp, data_filename);\n\n\t\t/* pass 2: find out min/max value */\n\t\twhile(readline(fp) != null)\n\t\t{\n\t\t\tint next_index = 1;\n\t\t\tdouble target;\n\t\t\tdouble value;\n\n\t\t\tStringTokenizer st = new StringTokenizer(line,\" \\t\\n\\r\\f:\");\n\t\t\ttarget = Double.parseDouble(st.nextToken());\n\t\t\ty_max = Math.max(y_max, target);\n\t\t\ty_min = Math.min(y_min, target);\n\n\t\t\twhile (st.hasMoreTokens())\n\t\t\t{\n\t\t\t\tindex = Integer.parseInt(st.nextToken());\n\t\t\t\tvalue = Double.parseDouble(st.nextToken());\n\n\t\t\t\tfor (i = next_index; i<index; i++)\n\t\t\t\t{\n\t\t\t\t\tfeature_max[i] = Math.max(feature_max[i], 0);\n\t\t\t\t\tfeature_min[i] = Math.min(feature_min[i], 0);\n\t\t\t\t}\n\n\t\t\t\tfeature_max[index] = Math.max(feature_max[index], value);\n\t\t\t\tfeature_min[index] = Math.min(feature_min[index], value);\n\t\t\t\tnext_index = index + 1;\n\t\t\t}\n\n\t\t\tfor(i=next_index;i<=max_index;i++)\n\t\t\t{\n\t\t\t\tfeature_max[i] = Math.max(feature_max[i], 0);\n\t\t\t\tfeature_min[i] = Math.min(feature_min[i], 0);\n\t\t\t}\n\t\t}\n\n\t\tfp = rewind(fp, data_filename);\n\n\t\t/* pass 2.5: save/restore feature_min/feature_max */\n\t\tif(restore_filename != null)\n\t\t{\n\t\t\t// fp_restore rewinded in finding max_index \n\t\t\tint idx;\n\t\t\tdouble fmin, fmax;\n\n\t\t\tfp_restore.mark(2);\t\t\t\t// for reset\n\t\t\tif((fp_restore.read()) == 'y')\n\t\t\t{\n\t\t\t\tfp_restore.readLine();\t\t// pass the '\\n' after 'y'\n\t\t\t\tStringTokenizer st = new StringTokenizer(fp_restore.readLine());\n\t\t\t\ty_lower = Double.parseDouble(st.nextToken());\n\t\t\t\ty_upper = Double.parseDouble(st.nextToken());\n\t\t\t\tst = new StringTokenizer(fp_restore.readLine());\n\t\t\t\ty_min = Double.parseDouble(st.nextToken());\n\t\t\t\ty_max = Double.parseDouble(st.nextToken());\n\t\t\t\ty_scaling = true;\n\t\t\t}\n\t\t\telse\n\t\t\t\tfp_restore.reset();\n\n\t\t\tif(fp_restore.read() == 'x') {\n\t\t\t\tfp_restore.readLine();\t\t// pass the '\\n' after 'x'\n\t\t\t\tStringTokenizer st = new StringTokenizer(fp_restore.readLine());\n\t\t\t\tlower = Double.parseDouble(st.nextToken());\n\t\t\t\tupper = Double.parseDouble(st.nextToken());\n\t\t\t\tString restore_line = null;\n\t\t\t\twhile((restore_line = fp_restore.readLine())!=null)\n\t\t\t\t{\n\t\t\t\t\tStringTokenizer st2 = new StringTokenizer(restore_line);\n\t\t\t\t\tidx = Integer.parseInt(st2.nextToken());\n\t\t\t\t\tfmin = Double.parseDouble(st2.nextToken());\n\t\t\t\t\tfmax = Double.parseDouble(st2.nextToken());\n\t\t\t\t\tif (idx <= max_index)\n\t\t\t\t\t{\n\t\t\t\t\t\tfeature_min[idx] = fmin;\n\t\t\t\t\t\tfeature_max[idx] = fmax;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfp_restore.close();\n\t\t}\n\n\t\tif(save_filename != null)\n\t\t{\n\t\t\tFormatter formatter = new Formatter(new StringBuilder());\n\t\t\tBufferedWriter fp_save = null;\n\n\t\t\ttry {\n\t\t\t\tfp_save = new BufferedWriter(new FileWriter(save_filename));\n\t\t\t} catch(IOException e) {\n\t\t\t\tSystem.err.println(\"can't open file \" + save_filename);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\n\t\t\tif(y_scaling)\n\t\t\t{\n\t\t\t\tformatter.format(\"y\\n\");\n\t\t\t\tformatter.format(\"%.16g %.16g\\n\", y_lower, y_upper);\n\t\t\t\tformatter.format(\"%.16g %.16g\\n\", y_min, y_max);\n\t\t\t}\n\t\t\tformatter.format(\"x\\n\");\n\t\t\tformatter.format(\"%.16g %.16g\\n\", lower, upper);\n\t\t\tfor(i=1;i<=max_index;i++)\n\t\t\t{\n\t\t\t\tif(feature_min[i] != feature_max[i]) \n\t\t\t\t\tformatter.format(\"%d %.16g %.16g\\n\", i, feature_min[i], feature_max[i]);\n\t\t\t}\n\t\t\tfp_save.write(formatter.toString());\n\t\t\tfp_save.close();\n\t\t\tformatter.close();\n\t\t}\n\n\t\t/* pass 3: scale */\n\t\twhile(readline(fp) != null)\n\t\t{\n\t\t\tint next_index = 1;\n\t\t\tdouble target;\n\t\t\tdouble value;\n\n\t\t\tStringTokenizer st = new StringTokenizer(line,\" \\t\\n\\r\\f:\");\n\t\t\ttarget = Double.parseDouble(st.nextToken());\n\t\t\toutput_target(target);\n\t\t\twhile(st.hasMoreElements())\n\t\t\t{\n\t\t\t\tindex = Integer.parseInt(st.nextToken());\n\t\t\t\tvalue = Double.parseDouble(st.nextToken());\n\t\t\t\tfor (i = next_index; i<index; i++)\n\t\t\t\t\toutput(i, 0);\n\t\t\t\toutput(index, value);\n\t\t\t\tnext_index = index + 1;\n\t\t\t}\n\n\t\t\tfor(i=next_index;i<= max_index;i++)\n\t\t\t\toutput(i, 0);\n\t\t\tSystem.out.print(\"\\n\");\n\t\t}\n\t\tif (new_num_nonzeros > num_nonzeros)\n\t\t\tSystem.err.print(\n\t\t\t \"WARNING: original #nonzeros \" + num_nonzeros+\"\\n\"\n\t\t\t+\"         new      #nonzeros \" + new_num_nonzeros+\"\\n\"\n\t\t\t+\"Use -l 0 if many original feature values are zeros\\n\");\n\n\t\tfp.close();\n\t}\n\n\tpublic static void main(String argv[]) throws IOException\n\t{\n\t\tsvm_scale s = new svm_scale();\n\t\ts.run(argv);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"ossmeter/ossmeter","sample_ref":"refs/heads/dev","sample_path":"metric-providers/org.ossmeter.libsvm/src/org/ossmeter/libsvm/svm_scale.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ec4b656ac3a97f82f2096c1657967ee317722055","size":"4813","content":"/*******************************************************************************\n * Copyright (c) 2014 OSSMETER Partners.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Yannis Korkontzelos - Implementation.\n *******************************************************************************/\npackage org.ossmeter.metricprovider.historic.bugs.responsetime.model;\n\nimport com.googlecode.pongo.runtime.Pongo;\nimport com.googlecode.pongo.runtime.querying.NumericalQueryProducer;\nimport com.googlecode.pongo.runtime.querying.StringQueryProducer;\n\n\npublic class BugsResponseTimeHistoricMetric extends Pongo {\n\t\n\t\n\t\n\tpublic BugsResponseTimeHistoricMetric() { \n\t\tsuper();\n\t\tBUGTRACKERID.setOwningType(\"org.ossmeter.metricprovider.historic.bugs.responsetime.model.BugsResponseTimeHistoricMetric\");\n\t\tAVGRESPONSETIME.setOwningType(\"org.ossmeter.metricprovider.historic.bugs.responsetime.model.BugsResponseTimeHistoricMetric\");\n\t\tAVGRESPONSETIMEFORMATTED.setOwningType(\"org.ossmeter.metricprovider.historic.bugs.responsetime.model.BugsResponseTimeHistoricMetric\");\n\t\tBUGSCONSIDERED.setOwningType(\"org.ossmeter.metricprovider.historic.bugs.responsetime.model.BugsResponseTimeHistoricMetric\");\n\t\tCUMULATIVEAVGRESPONSETIME.setOwningType(\"org.ossmeter.metricprovider.historic.bugs.responsetime.model.BugsResponseTimeHistoricMetric\");\n\t\tCUMULATIVEAVGRESPONSETIMEFORMATTED.setOwningType(\"org.ossmeter.metricprovider.historic.bugs.responsetime.model.BugsResponseTimeHistoricMetric\");\n\t\tCUMULATIVEBUGSCONSIDERED.setOwningType(\"org.ossmeter.metricprovider.historic.bugs.responsetime.model.BugsResponseTimeHistoricMetric\");\n\t}\n\t\n\tpublic static StringQueryProducer BUGTRACKERID = new StringQueryProducer(\"bugTrackerId\"); \n\tpublic static NumericalQueryProducer AVGRESPONSETIME = new NumericalQueryProducer(\"avgResponseTime\");\n\tpublic static StringQueryProducer AVGRESPONSETIMEFORMATTED = new StringQueryProducer(\"avgResponseTimeFormatted\"); \n\tpublic static NumericalQueryProducer BUGSCONSIDERED = new NumericalQueryProducer(\"bugsConsidered\");\n\tpublic static NumericalQueryProducer CUMULATIVEAVGRESPONSETIME = new NumericalQueryProducer(\"cumulativeAvgResponseTime\");\n\tpublic static StringQueryProducer CUMULATIVEAVGRESPONSETIMEFORMATTED = new StringQueryProducer(\"cumulativeAvgResponseTimeFormatted\"); \n\tpublic static NumericalQueryProducer CUMULATIVEBUGSCONSIDERED = new NumericalQueryProducer(\"cumulativeBugsConsidered\");\n\t\n\t\n\tpublic String getBugTrackerId() {\n\t\treturn parseString(dbObject.get(\"bugTrackerId\")+\"\", \"\");\n\t}\n\t\n\tpublic BugsResponseTimeHistoricMetric setBugTrackerId(String bugTrackerId) {\n\t\tdbObject.put(\"bugTrackerId\", bugTrackerId);\n\t\tnotifyChanged();\n\t\treturn this;\n\t}\n\tpublic long getAvgResponseTime() {\n\t\treturn parseLong(dbObject.get(\"avgResponseTime\")+\"\", 0);\n\t}\n\t\n\tpublic BugsResponseTimeHistoricMetric setAvgResponseTime(long avgResponseTime) {\n\t\tdbObject.put(\"avgResponseTime\", avgResponseTime);\n\t\tnotifyChanged();\n\t\treturn this;\n\t}\n\tpublic String getAvgResponseTimeFormatted() {\n\t\treturn parseString(dbObject.get(\"avgResponseTimeFormatted\")+\"\", \"\");\n\t}\n\t\n\tpublic BugsResponseTimeHistoricMetric setAvgResponseTimeFormatted(String avgResponseTimeFormatted) {\n\t\tdbObject.put(\"avgResponseTimeFormatted\", avgResponseTimeFormatted);\n\t\tnotifyChanged();\n\t\treturn this;\n\t}\n\tpublic int getBugsConsidered() {\n\t\treturn parseInteger(dbObject.get(\"bugsConsidered\")+\"\", 0);\n\t}\n\t\n\tpublic BugsResponseTimeHistoricMetric setBugsConsidered(int bugsConsidered) {\n\t\tdbObject.put(\"bugsConsidered\", bugsConsidered);\n\t\tnotifyChanged();\n\t\treturn this;\n\t}\n\tpublic long getCumulativeAvgResponseTime() {\n\t\treturn parseLong(dbObject.get(\"cumulativeAvgResponseTime\")+\"\", 0);\n\t}\n\t\n\tpublic BugsResponseTimeHistoricMetric setCumulativeAvgResponseTime(long cumulativeAvgResponseTime) {\n\t\tdbObject.put(\"cumulativeAvgResponseTime\", cumulativeAvgResponseTime);\n\t\tnotifyChanged();\n\t\treturn this;\n\t}\n\tpublic String getCumulativeAvgResponseTimeFormatted() {\n\t\treturn parseString(dbObject.get(\"cumulativeAvgResponseTimeFormatted\")+\"\", \"\");\n\t}\n\t\n\tpublic BugsResponseTimeHistoricMetric setCumulativeAvgResponseTimeFormatted(String cumulativeAvgResponseTimeFormatted) {\n\t\tdbObject.put(\"cumulativeAvgResponseTimeFormatted\", cumulativeAvgResponseTimeFormatted);\n\t\tnotifyChanged();\n\t\treturn this;\n\t}\n\tpublic int getCumulativeBugsConsidered() {\n\t\treturn parseInteger(dbObject.get(\"cumulativeBugsConsidered\")+\"\", 0);\n\t}\n\t\n\tpublic BugsResponseTimeHistoricMetric setCumulativeBugsConsidered(int cumulativeBugsConsidered) {\n\t\tdbObject.put(\"cumulativeBugsConsidered\", cumulativeBugsConsidered);\n\t\tnotifyChanged();\n\t\treturn this;\n\t}\n\t\n\t\n\t\n\t\n}","binary":"false","copies":"1","sample_repo_name":"ossmeter/ossmeter","sample_ref":"refs/heads/dev","sample_path":"metric-providers/org.ossmeter.metricprovider.historic.bugs.responsetime/src/org/ossmeter/metricprovider/historic/bugs/responsetime/model/BugsResponseTimeHistoricMetric.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"324db1aed5604ba91765955525d29066c089b496","size":"1206","content":"/*******************************************************************************\n * Copyright (c) 2014 OSSMETER Partners.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *    Yannis Korkontzelos - Implementation.\n *******************************************************************************/\npackage org.ossmeter.metricprovider.historic.newsgroups.severitysentiment.model;\n\nimport java.util.List;\n\nimport com.googlecode.pongo.runtime.Pongo;\nimport com.googlecode.pongo.runtime.PongoList;\nimport com.mongodb.BasicDBList;\n\n\npublic class NewsgroupsSeveritySentimentHistoricMetric extends Pongo {\n\t\n\tprotected List<SeverityLevel> severityLevels = null;\n\t\n\t\n\tpublic NewsgroupsSeveritySentimentHistoricMetric() { \n\t\tsuper();\n\t\tdbObject.put(\"severityLevels\", new BasicDBList());\n\t}\n\t\n\t\n\t\n\t\n\t\n\tpublic List<SeverityLevel> getSeverityLevels() {\n\t\tif (severityLevels == null) {\n\t\t\tseverityLevels = new PongoList<SeverityLevel>(this, \"severityLevels\", true);\n\t\t}\n\t\treturn severityLevels;\n\t}\n\t\n\t\n}","binary":"false","copies":"1","sample_repo_name":"ossmeter/ossmeter","sample_ref":"refs/heads/dev","sample_path":"metric-providers/org.ossmeter.metricprovider.historic.newsgroups.severitysentiment/src/org/ossmeter/metricprovider/historic/newsgroups/severitysentiment/model/NewsgroupsSeveritySentimentHistoricMetric.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b8be5478573fdc5bb11aff72c0235145a4c3e3b3","size":"4371","content":"package cn.edu.jxnu.awesome_campus.ui.library;\n\nimport android.app.SearchManager;\nimport android.content.Intent;\nimport android.content.res.TypedArray;\nimport android.provider.SearchRecentSuggestions;\nimport android.support.v4.widget.SwipeRefreshLayout;\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.support.v7.widget.DefaultItemAnimator;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.support.v7.widget.Toolbar;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.ProgressBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.tendcloud.tenddata.TCAgent;\n\nimport org.greenrobot.eventbus.EventBus;\nimport org.greenrobot.eventbus.Subscribe;\n\nimport cn.edu.jxnu.awesome_campus.InitApp;\nimport cn.edu.jxnu.awesome_campus.R;\nimport cn.edu.jxnu.awesome_campus.database.dao.library.BookSearchResultDAO;\nimport cn.edu.jxnu.awesome_campus.event.EVENT;\nimport cn.edu.jxnu.awesome_campus.event.EventModel;\nimport cn.edu.jxnu.awesome_campus.model.library.BookSearchResultModel;\nimport cn.edu.jxnu.awesome_campus.support.adapter.library.BookSearchResultAdapter;\nimport cn.edu.jxnu.awesome_campus.support.provider.SuggestionProvider;\nimport cn.edu.jxnu.awesome_campus.support.utils.net.NetManageUtil;\nimport cn.edu.jxnu.awesome_campus.ui.base.BaseToolbarActivity;\nimport cn.edu.jxnu.awesome_campus.ui.base.SwipeBackActivity;\n\npublic class BookSearchActivity extends BaseToolbarActivity {\n    private static final String TAG=\"BookSearchActivity\";\n    private String keyword;\n    private BookSearchResultModel model;\n    private RecyclerView recyclerView;\n    private RecyclerView.LayoutManager layoutManager;\n    private BookSearchResultAdapter adapter;\n\n    private ProgressBar progressBar;\n    private TextView notify;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_search);\n        EventBus.getDefault().register(this);\n        TCAgent.onPageStart(InitApp.AppContext, TAG);\n        initToolbar();\n\n\n        /**\n         * \u6d4b\u4f7f\u7528\u3000\u975e\u6b63\u5f0f\u4ee3\u7801\u3000\u3000---- By MummyDing\n         */\n        Intent intent = getIntent();\n        if( intent.ACTION_SEARCH.equals(intent.getAction())){\n            keyword = intent.getStringExtra(SearchManager.QUERY);\n        }else {\n            keyword = intent.getStringExtra(getString(R.string.id_search));\n        }\n        setToolbarTitle(InitApp.AppContext.getString(R.string.search_result)+\":\"+keyword);\n        SearchRecentSuggestions suggestions = new SearchRecentSuggestions(this, SuggestionProvider.AUTHORITY,SuggestionProvider.MODE);\n        suggestions.saveRecentQuery(keyword,null);\n        model = new BookSearchResultModel(keyword);\n        layoutManager = new LinearLayoutManager(InitApp.AppContext);\n        recyclerView = (RecyclerView) findViewById(R.id.recyclerView);\n        progressBar = (ProgressBar) findViewById(R.id.progressBar);\n        notify = (TextView) findViewById(R.id.notify);\n        recyclerView.setItemAnimator(new DefaultItemAnimator());\n        recyclerView.setLayoutManager(layoutManager);\n\n\n        if(model !=null){\n            adapter = new BookSearchResultAdapter(this,model);\n            adapter.addKeyword(keyword);\n            recyclerView.setAdapter(adapter);\n        }\n        onDataRefresh();\n    }\n\n    private void onDataRefresh(){\n        if(model !=null){\n            model.loadFromNet();\n        }\n    }\n\n\n    @Override\n    protected void onDestroy() {\n        EventBus.getDefault().unregister(this);\n        TCAgent.onPageEnd(InitApp.AppContext, TAG);\n        super.onDestroy();\n    }\n\n    @Subscribe\n    public void onEventMainThread(EventModel eventModel){\n        switch (eventModel.getEventCode()){\n            case EVENT.BOOK_SEARCH_REFRESH_SUCCESS:\n                adapter.newList(eventModel.getDataList());\n                progressBar.setVisibility(View.GONE);\n                break;\n            case EVENT.BOOK_SEARCH_REFRESH_FAILURE:\n                progressBar.setVisibility(View.GONE);\n                notify.setVisibility(View.VISIBLE);\n                break;\n        }\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n        NetManageUtil.cancelByTag(BookSearchResultDAO.TAG);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"MummyDing/Awesome-Campus","sample_ref":"refs/heads/dev","sample_path":"app/src/main/java/cn/edu/jxnu/awesome_campus/ui/library/BookSearchActivity.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f6625ab9ced33de2e0340ddaf8bd6367a372ad66","size":"4936","content":"/* \n * Java application that connects to voltdb and measures the execution time\n * \n */\n\nimport org.voltdb.*;\nimport org.voltdb.client.*;\nimport java.util.ArrayList;\nimport java.sql.*;\nimport java.io.*;\nimport java.util.List;\nimport java.util.concurrent.*;\n\npublic class Connector\n{\n    private String[] serverName;\n    private int[] serverPort;\n    private org.voltdb.client.Client db;\n    private Connection conn;\n\n    //generate a list of client connections to connect to the cluster host\n    public void generateServers(int size, int port)\n    {\n        //admin port necessary to connect to servers and offset is port increment\n        int offset = 6;\n\n        serverName = new String[size];\n        serverPort = new int[size];\n        for(int i = 0; i < size; i++)\n        {\n            serverName[i] = \"localhost\";\n            serverPort[i] = port + i*offset;\n        }\n    }\n\n    //establish a connection to the cluster host\n    public void init(int size)\n    {\n        try {\n\n            //initalize voltdb client and server list\n            int port = 21212;\n            ClientConfig config = new ClientConfig(\"advent\",\"xyzzy\");\n            config.setProcedureCallTimeout(90*10000);\n            config.setConnectionResponseTimeout(180 * 10000);\n            db = ClientFactory.createClient(config);\n            generateServers(size, port);\n\n            //connect nodes to host\n            for(int i = 0; i < size; i++)\n                db.createConnection(\"localhost\", 21212);\n\n        } catch(Exception e)\n        {\n            System.out.println(\"Failed to connect to a server\");\n            e.printStackTrace();\n        }\n    }\n    \n    //Stored Procedure method, different from AdHoc usage\n    //reads in sql statements in a batch and splits them up to each thread\n    public long runProcedure(ArrayList<String> batch, int threadCount)\n    {\n        ArrayList<Thread> list = new ArrayList<Thread>();\n        final CyclicBarrier gate = new CyclicBarrier(threadCount+1);\n\n        //list of sql instructions passed to each thread\n        ArrayList<List<String>> mixedSQL = splitBatch(batch, threadCount);\n\n        try {\n            //spawn threads\n            for(int i = 0; i < threadCount; i++)\n            {\n                //System.out.println(\"Thread #\"+i+ \"is running\");\n                //for(int k = 0; k < mixedSQL.get(i).size(); k++)\n                //    System.out.println(mixedSQL.get(i).get(k));\n                Runnable spawn = null;\n                spawn = new Worker(db, mixedSQL.get(i), gate);\n\n                list.add(new Thread(spawn));\n            }\n\n            //execute threads\n            long start = System.currentTimeMillis();\n            list.forEach(Thread::start);\n            try\n            {\n                gate.await();\n            } catch(Exception e)\n            {\n                System.out.println(\"Gate could not invoke await()\");\n                e.printStackTrace();\n            }\n\n            for(Thread t:list)\n            {\n                t.join();\n            }\n\n            long stop = System.currentTimeMillis();\n            long executeTime = stop - start;\n\n            return executeTime;\n\n        } catch(Exception e)\n        {\n            System.out.println(\"runProcedure() threw an error\");\n            e.printStackTrace();\n            return -1;\n        }\n    }\n\n    private void printList(List<String> list)\n    {\n        for(int i = 0; i < list.size(); i++)\n        {\n            System.out.println(list.get(i));\n        }\n    }\n\n    //splits sql statements evenly to threads\n    private ArrayList<List<String>> splitBatch(ArrayList<String> batch, int divide)\n    {\n        if(divide == 0)\n            System.out.println(\"Cannot divide by zero\");\n\n        int remainder = batch.size()%divide;\n        int quotient = batch.size()/divide;\n        ArrayList<List<String>> splitArray = new ArrayList<List<String>>();\n        int previous = 0;\n        int next = quotient;\n\n        //split array into sublists according to their ranges\n        for(int i = 0; i < divide-1; i++)\n        {\n            List<String> temp = batch.subList(previous, next);\n            splitArray.add(temp);\n            previous = previous + quotient;\n            next = next + quotient;\n        }\n\n        //last split has remainder added to end\n        splitArray.add(batch.subList(previous, next+remainder));\n        return splitArray;\n    }\n\n    public void close()\n    {\n        try {\n            db.drain();\n            db.close();\n        } catch(Exception e)\n        {\n            System.out.println(\"Couldn't close connection\");\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown()\n    {\n        try\n        {\n            db.callProcedure(\"@Shutdown\");\n        } catch(org.voltdb.client.ProcCallException e)\n        {\n            System.out.println(\"Database shutting down\");\n        } catch(Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"Dar13/OpenMemDB","sample_ref":"refs/heads/dev","sample_path":"database/tests/db_testing/volt_test/Connector.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1616bb25c38d8ab8b001d9c76f4388cba103e40b","size":"1077","content":"/*\n * DocDoku, Professional Open Source\n * Copyright 2006 - 2015 DocDoku SARL\n *\n * This file is part of DocDokuPLM.\n *\n * DocDokuPLM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * DocDokuPLM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with DocDokuPLM.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n\n/**\n * @author kelto on 01/06/15.\n */\n@XmlJavaTypeAdapter(value = DateAdapter.class, type = Date.class) package com.docdoku.server.rest.dto.change;\n\nimport com.docdoku.server.rest.converters.DateAdapter;\n\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\nimport java.util.Date;\n","binary":"false","copies":"1","sample_repo_name":"docdoku/docdoku-plm","sample_ref":"refs/heads/dev","sample_path":"docdoku-server/docdoku-server-web/src/main/java/com/docdoku/server/rest/dto/change/package-info.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2e4573de2b19fbb031df8b5915a53f97ff6161dc","size":"879","content":"/*\n * License information at https://github.com/Caltech-IPAC/firefly/blob/master/License.txt\n */\npackage edu.caltech.ipac.firefly.ui.input;\n\nimport com.google.gwt.user.client.ui.HTML;\nimport com.google.gwt.user.client.ui.Widget;\nimport edu.caltech.ipac.util.StringUtils;\n\n/**\n * @author tatianag\n *         $Id: HTMLFieldLabel.java,v 1.2 2011/03/09 18:24:39 schimms Exp $\n */\n\npublic class HTMLFieldLabel implements FieldLabel.Mutable {\n\n    private HTML _label= new HTML();\n\n    public HTMLFieldLabel(String text, String tip) {\n        if (!StringUtils.isEmpty(text)) {\n            setText(text);\n        }\n        setTip(tip);\n    }\n\n\n    public Widget getWidget() { return _label; }\n    public void setText(String txt) { _label.setHTML(txt+\":\"); }\n    public void setTip(String tip) { _label.setTitle(tip); }\n\n    public void setVisible(boolean v) { _label.setVisible(v); }\n}\n","binary":"false","copies":"2","sample_repo_name":"Caltech-IPAC/firefly","sample_ref":"refs/heads/dev","sample_path":"src/firefly/java/edu/caltech/ipac/firefly/ui/input/HTMLFieldLabel.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a3ad1512794cc986e6414b5ff25ba309402ca723","size":"2311","content":"// Copyright 2015 The Project Buendia Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n// use this file except in compliance with the License.  You may obtain a copy\n// of the License at: http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distrib-\n// uted under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n// OR CONDITIONS OF ANY KIND, either express or implied.  See the License for\n// specific language governing permissions and limitations under the License.\n\npackage org.projectbuendia.openmrs.api.impl;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.openmrs.Obs;\nimport org.openmrs.Order;\nimport org.openmrs.Patient;\nimport org.openmrs.api.impl.BaseOpenmrsService;\nimport org.projectbuendia.openmrs.api.ProjectBuendiaService;\nimport org.projectbuendia.openmrs.api.SyncToken;\nimport org.projectbuendia.openmrs.api.db.ProjectBuendiaDAO;\nimport org.projectbuendia.openmrs.api.db.SyncPage;\n\nimport javax.annotation.Nullable;\n\n/** It is a default implementation of {@link ProjectBuendiaService}. */\npublic class ProjectBuendiaServiceImpl extends BaseOpenmrsService implements ProjectBuendiaService {\n    protected final Log log = LogFactory.getLog(this.getClass());\n\n    private ProjectBuendiaDAO dao;\n\n    @Override\n    public void setDAO(ProjectBuendiaDAO dao) {\n        this.dao = dao;\n    }\n\n    @Override\n    public SyncPage<Obs> getObservationsModifiedAtOrAfter(\n            @Nullable SyncToken syncToken, boolean includeVoided, int maxResults) {\n        return dao.getObservationsModifiedAfter(syncToken, includeVoided, maxResults);\n    }\n\n    @Override\n    public SyncPage<Patient> getPatientsModifiedAtOrAfter(\n            @Nullable SyncToken syncToken, boolean includeVoided, int maxResults) {\n        return dao.getPatientsModifiedAfter(syncToken, includeVoided, maxResults);\n    }\n\n    @Override\n    public SyncPage<Order> getOrdersModifiedAtOrAfter(\n            @Nullable SyncToken syncToken, boolean includeVoided, int maxResults,\n            @Nullable Order.Action[] allowedOrderTypes) {\n        return dao.getOrdersModifiedAtOrAfter(\n                syncToken, includeVoided, maxResults, allowedOrderTypes);\n    }\n}","binary":"false","copies":"3","sample_repo_name":"projectbuendia/buendia","sample_ref":"refs/heads/dev","sample_path":"openmrs/api/src/main/java/org/projectbuendia/openmrs/api/impl/ProjectBuendiaServiceImpl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c47428412951b60010ef8b67fc811f77829ed2d8","size":"2180","content":"package org.intermine.api.config;\n\n/*\n * Copyright (C) 2002-2016 FlyMine\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  See the LICENSE file for more\n * information or http://www.gnu.org/copyleft/lesser.html.\n *\n */\n\n/**\n * A single constant.\n *\n * @author Richard Smith\n */\npublic final class Constants\n{\n    private Constants() {\n        // don't instantiate\n    }\n\n    /**\n     * Batch size for the underlying objectstore\n     */\n    public static final int BATCH_SIZE = 500;\n\n    // the below are used on the list and report pages to build queries to use on other mines\n\n    /**\n     * returns available queryable values for mine\n     */\n    public static final String VALUES_TEMPLATE = \"im_available_organisms\";\n\n    /**\n    * template to run to get map of values associated with this mine\n    * gene.organism --> gene.homologue.organism\n    */\n    public static final String MAP_TEMPLATE = \"im_available_homologues\";\n\n    /**\n     * checks for object in other mine\n     */\n    public static final String REPORT_TEMPLATE = \"im_available_gene\";\n\n    /**\n     * queries for data related to current object\n     */\n    public static final String RELATED_DATA_TEMPLATE = \"im_gene_orthologue\";\n\n    /**\n     * constrain by object identifier\n     */\n    public static final String IDENTIFIER_CONSTRAINT\n        = \"&constraint1=Gene.primaryIdentifier&op1=eq&value1=\";\n\n    /**\n     * LOOKUP constraint\n     */\n    public static final String LOOKUP_CONSTRAINT = \"&constraint1=Gene&op1=LOOKUP&value1=\";\n\n    /**\n     * Constrain by an extra value\n     */\n    public static final String EXTRA_VALUE_CONSTRAINT\n        = \"&constraint2=Gene.organism.shortName&op2=eq&value2=\";\n\n    /**\n     * Constraint for related data template\n     */\n    public static final String RELATED_DATA_CONSTRAINT_1\n        = \"&constraint1=Gene.homologues.homologue&op1=LOOKUP&value1=\";\n\n    /**\n     * Constraint for related data template\n     */\n    public static final String RELATED_DATA_CONSTRAINT_2\n        = \"&constraint2=Gene.homologues.homologue.organism.shortName&op2=eq&value2=\";\n}\n","binary":"false","copies":"5","sample_repo_name":"intermine/intermine","sample_ref":"refs/heads/dev","sample_path":"intermine/api/main/src/org/intermine/api/config/Constants.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bde2b2bc440df5ec8eee1a7547ea1bd9acc7dab1","size":"3415","content":"package org.intermine.webservice.client.results;\n\n/*\n * Copyright (C) 2002-2016 FlyMine\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  See the LICENSE file for more\n * information or http://www.gnu.org/copyleft/lesser.html.\n *\n */\n\nimport java.util.AbstractMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\n\n/**\n * A class that represents a row of a result set as a map from column names\n * to values.\n * @author Alex Kalderimis\n *\n */\npublic class ResultRowMap extends AbstractMap<String, Object>\n{\n\n    private final JSONArray data;\n    private final List<String> views;\n\n    /**\n     * Construct a result-row with a JSONArray as its backing\n     * data store.\n     * @param ja The source of the data.\n     * @param views The column names.\n     */\n    public ResultRowMap(JSONArray ja, List<String> views) {\n        this.data = ja;\n        this.views = views;\n        verify();\n    }\n\n    /**\n     * Construct a result-row with a String as its backing\n     * data store.\n     * @param json The source of the data.\n     * @param views The column names.\n     */\n    public ResultRowMap(String json, List<String> views) {\n        try {\n            this.data = new JSONArray(json);\n        } catch (JSONException e) {\n            throw new IllegalArgumentException(e);\n        }\n        this.views = views;\n        verify();\n    }\n\n    private void verify() {\n        if (data == null || views == null || data.length() != views.size()) {\n            throw new IllegalArgumentException();\n        }\n    }\n\n    @Override\n    public Set<java.util.Map.Entry<String, Object>> entrySet() {\n        Set<Entry<String, Object>> entries = new LinkedHashSet<Entry<String, Object>>();\n        for (int i = 0; i < data.length(); i++) {\n            String key = views.get(i);\n            Object val;\n            try {\n                if (data.getJSONObject(i).isNull(\"value\")) {\n                    val = null;\n                } else {\n                    val = data.getJSONObject(i).get(\"value\");\n                }\n            } catch (JSONException e) {\n                throw new RuntimeException(e);\n            }\n            entries.add(new RowEntry(key, val));\n        }\n        return entries;\n    }\n\n    private String getRoot() {\n        return views.get(0).split(\"\\\\.\")[0];\n    }\n\n    @Override\n    public Object get(Object key) {\n        if (!views.contains(key)) {\n            String root = getRoot();\n            key = root + \".\" + key;\n            if (!views.contains(key)) {\n                return null;\n            }\n        }\n        int i = views.indexOf(key);\n        try {\n            Object val;\n            if (data.getJSONObject(i).isNull(\"value\")) {\n                val = null;\n            } else {\n                val = data.getJSONObject(i).get(\"value\");\n            }\n            return val;\n        } catch (JSONException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static class RowEntry extends SimpleImmutableEntry<String, Object>\n    {\n\n        /**\n         * Generated serial id.\n         */\n        private static final long serialVersionUID = -8770402781429939453L;\n\n        public RowEntry(String k, Object v) {\n            super(k, v);\n        }\n\n    }\n\n}\n","binary":"false","copies":"5","sample_repo_name":"intermine/intermine","sample_ref":"refs/heads/dev","sample_path":"intermine/webservice/client/main/src/org/intermine/webservice/client/results/ResultRowMap.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7d85f6c52713e6a3b04aa831cb4ac7c951bfaaaa","size":"2446","content":"package org.intermine.webservice.server.template.result;\n\n/*\n * Copyright (C) 2002-2016 FlyMine\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  See the LICENSE file for more\n * information or http://www.gnu.org/copyleft/lesser.html.\n *\n */\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.intermine.web.logic.template.TemplateResultInput;\nimport org.intermine.web.logic.template.Templates;\nimport org.intermine.web.logic.template.Templates.TemplateValueParseException;\nimport org.intermine.webservice.server.WebServiceRequestParser;\nimport org.intermine.webservice.server.exceptions.BadRequestException;\nimport org.intermine.webservice.server.query.result.QueryResultRequestParser;\n\n/**\n * Processes service request. Evaluates parameters and validates them and check if\n * its combination is valid.\n *\n * @author Jakub Kulaviak\n **/\npublic class TemplateResultRequestParser extends WebServiceRequestParser\n{\n    private static final String NAME_PARAMETER = \"name\";\n    private HttpServletRequest request;\n\n    /**\n     * TemplateResultRequestProcessor constructor.\n     * @param request request\n     */\n    public TemplateResultRequestParser(HttpServletRequest request) {\n        this.request = request;\n    }\n\n    /**\n     * Returns parsed parameters in parameter object - so this\n     * values can be easily obtained from this object.\n     * @return web service input\n     */\n    public TemplateResultInput getInput() {\n        TemplateResultInput input = new TemplateResultInput();\n        parseRequest(input);\n        return input;\n    }\n\n    private void parseRequest(TemplateResultInput input) {\n        super.parseRequest(request, input);\n        input.setName(getRequiredStringParameter(NAME_PARAMETER));\n        try {\n            input.setConstraints(Templates.parseConstraints(request));\n        } catch (TemplateValueParseException e) {\n            throw new BadRequestException(e.getMessage(), e);\n        }\n        input.setLayout(request.getParameter(QueryResultRequestParser.LAYOUT_PARAMETER));\n    }\n\n    private String getRequiredStringParameter(String name) {\n        String param = request.getParameter(name);\n        if (param == null || \"\".equals(param)) {\n            throw new BadRequestException(\"Missing required parameter: \" + name);\n        } else {\n            return param;\n        }\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"intermine/intermine","sample_ref":"refs/heads/dev","sample_path":"intermine/web/main/src/org/intermine/webservice/server/template/result/TemplateResultRequestParser.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"61dc5470a6e8110e451b62b6d9b63681255fc13e","size":"567","content":"package org.intermine.api.query;\n\n/*\n * Copyright (C) 2002-2016 FlyMine\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  See the LICENSE file for more\n * information or http://www.gnu.org/copyleft/lesser.html.\n *\n */\n\n/**\n *\n * @author Alex\n *\n */\npublic class NotPresentException extends QueryStoreException\n{\n\n    /**\n     *\n     * @param message error message\n     */\n    public NotPresentException(String message) {\n        super(message);\n    }\n\n}\n","binary":"false","copies":"5","sample_repo_name":"intermine/intermine","sample_ref":"refs/heads/dev","sample_path":"intermine/api/main/src/org/intermine/api/query/NotPresentException.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d1d1d942d9d138fb284fb036ff78bbbf9cc3966f","size":"931","content":"package org.intermine.webservice.server.exceptions;\n\n/*\n * Copyright (C) 2002-2016 FlyMine\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  See the LICENSE file for more\n * information or http://www.gnu.org/copyleft/lesser.html.\n *\n */\n\nimport org.intermine.webservice.server.output.Output;\n\n/** @author Alex Kalderimis **/\npublic class UnauthorizedException extends ServiceException\n{\n\n    private static final long serialVersionUID = 1L;\n    private static final int ERROR_CODE = Output.SC_UNAUTHORIZED;\n\n    /** Construct an UnauthorizedException **/\n    public UnauthorizedException() {\n        super(\"This service requires authentication.\", ERROR_CODE);\n    }\n\n    /** @param message A description of the problem **/\n    public UnauthorizedException(String message) {\n        super(message, ERROR_CODE);\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"intermine/intermine","sample_ref":"refs/heads/dev","sample_path":"intermine/web/main/src/org/intermine/webservice/server/exceptions/UnauthorizedException.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e28315ee1d0a209d61a735784425db530f7ad730","size":"1809","content":"package org.intermine.task;\n\n/*\n * Copyright (C) 2002-2016 FlyMine\n *\n * This code may be freely distributed and modified under the\n * terms of the GNU Lesser General Public Licence.  This should\n * be distributed with the code.  See the LICENSE file for more\n * information or http://www.gnu.org/copyleft/lesser.html.\n *\n */\n\nimport org.intermine.metadata.FieldDescriptor;\nimport org.intermine.metadata.Model;\nimport org.intermine.task.DelimitedFileConfiguration;\n\nimport junit.framework.TestCase;\n\nimport org.apache.tools.ant.filters.StringInputStream;\n\n/**\n * Tests for DelimitedFileConfiguration.\n *\n * @author Kim Rutherford\n */\n\npublic class DelimitedFileConfigurationTest extends TestCase\n{\n    public void testConfig() throws Exception {\n        String config =\n            \"className: org.intermine.model.testmodel.Employee\\n\"\n            + \"keyColumn: 1\\n\"\n            + \"column.0: name\\n\"\n            + \"column.1: age\\n\"\n            // no column 2 config\n            + \"column.3: fullTime\\n\";\n        StringInputStream stringInputStream = new StringInputStream(config);\n\n        Model model = Model.getInstanceByName(\"testmodel\");\n        DelimitedFileConfiguration dfc = new DelimitedFileConfiguration(model, stringInputStream);\n\n        assertEquals(\"org.intermine.model.testmodel.Employee\",\n                     dfc.getConfigClassDescriptor().getName());\n\n        assertEquals(\"name\",\n                     ((FieldDescriptor) dfc.getColumnFieldDescriptors().get(0)).getName());\n        assertEquals(\"age\",\n                     ((FieldDescriptor) dfc.getColumnFieldDescriptors().get(1)).getName());\n        assertEquals(\"fullTime\",\n                     ((FieldDescriptor) dfc.getColumnFieldDescriptors().get(3)).getName());\n        assertEquals(4, dfc.getColumnFieldDescriptors().size());\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"intermine/intermine","sample_ref":"refs/heads/dev","sample_path":"intermine/objectstore/test/src/org/intermine/task/DelimitedFileConfigurationTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"540aa981c8df57b47de34d71b3da5165c84a3122","size":"977","content":"/*\n * Copyright 2012-2013 eBay Software Foundation and ios-driver committers\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\npackage org.uiautomation.ios.command;\n\nimport org.uiautomation.ios.communication.WebDriverLikeRequest;\nimport org.uiautomation.ios.IOSServerManager;\n\npublic abstract class NotImplementedHandler extends BaseCommandHandler {\n\n  public NotImplementedHandler(IOSServerManager driver, WebDriverLikeRequest request) {\n    super(driver, request);\n  }\n\n\n}\n","binary":"false","copies":"8","sample_repo_name":"ios-driver/ios-driver","sample_ref":"refs/heads/dev","sample_path":"server/src/main/java/org/uiautomation/ios/command/NotImplementedHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"29a39f31e276ffa01c36d7e3a1b38a9c174f550b","size":"6351","content":"/*\n * Copyright (c) 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\npackage com.google.api.client.testing.util;\n\nimport com.google.api.client.util.Beta;\nimport com.google.api.client.util.SecurityUtils;\n\nimport java.security.GeneralSecurityException;\nimport java.security.KeyFactory;\nimport java.security.interfaces.RSAPrivateKey;\nimport java.security.interfaces.RSAPublicKey;\nimport java.security.spec.KeySpec;\nimport java.security.spec.PKCS8EncodedKeySpec;\nimport java.security.spec.X509EncodedKeySpec;\n\n/**\n * {@link Beta} <br/>\n * Utilities and constants related to testing the library {@code util} package.\n *\n * @since 1.14\n * @author Yaniv Inbar\n */\n@Beta\npublic final class SecurityTestUtils {\n\n  private static final byte[] ENCODED_PRIVATE_KEY = {48, -126, 2, 118, 2, 1, 0, 48, 13, 6, 9, 42,\n    -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, -126, 2, 96, 48, -126, 2, 92, 2, 1, 0, 2, -127, -127,\n    0, -89, 33, 8, -124, 110, -60, 89, 8, -62, 69, 120, 95, -59, -43, 13, -18, 123, 29, -31, 13,\n    -80, -76, 109, -62, -79, 2, 104, -94, 76, 59, -73, -26, 99, 123, -57, -92, -100, 116, 50, -25,\n    96, 53, 124, 95, 76, -59, -84, 70, 27, 0, 72, -63, 84, -77, -2, -107, -66, -32, -119, 27, -95,\n    54, -44, -89, 1, 71, 44, 7, -55, 126, 5, -78, 87, -105, -114, 65, -19, 58, -78, -95, 0, 118, 83,\n    76, -88, 2, -21, 127, 64, 74, -103, -114, -127, -70, -81, -127, 125, -37, 21, 113, 20, -102, 46,\n    -37, -111, -97, 97, -127, 32, 87, -80, 105, 18, -19, 107, -73, -50, -97, 11, -23, -59, -107,\n    -107, 83, -25, 15, -93, -21, 2, 3, 1, 0, 1, 2, -127, -128, 45, -34, -104, 26, -40, -41, -44,\n    -29, -35, -123, -7, -110, -73, -106, 80, -5, -118, 24, -38, 66, -54, -93, -54, -104, 43, -62,\n    -48, 122, -14, -41, 85, 18, -53, 109, 22, -113, 44, 77, -116, 7, 10, -43, -61, 43, -40, -61, 76,\n    19, -11, -89, 47, 80, -72, 113, -86, 70, -23, 27, 113, 37, -1, 42, 48, 84, -80, 30, 86, 36,\n    -124, -22, 79, -44, 87, -40, 31, -41, -44, -16, -74, 85, 61, -122, -22, 10, -31, 78, 92, -123,\n    -77, 12, -80, 62, -52, 68, -46, -17, 67, 124, -78, -23, -105, -77, -2, 89, -16, -12, -56, -51,\n    26, 102, 46, 39, -61, -13, -79, -65, -5, 126, 70, 29, 31, 104, -109, 65, -23, -69, 23, -7, 2,\n    65, 0, -42, 18, 101, 10, -21, 37, 107, -3, -114, -29, -40, 76, 107, -122, 40, 8, -58, -32, -12,\n    55, -4, -61, -66, 91, -56, -50, 78, -124, 11, -49, -62, -121, -56, 70, -92, 90, 32, -112, 49,\n    26, -99, 113, 44, 26, 42, -99, -40, -123, 17, 93, 114, 125, 35, -118, -32, 125, -64, 61, 58,\n    -58, -105, -105, -39, 93, 2, 65, 0, -57, -36, -22, -107, -42, -79, 0, -118, 121, -76, 120, 52,\n    110, 127, 115, 68, -86, -4, 96, -50, 72, -60, -57, 125, 57, 21, -81, -44, 25, 112, -75, 83, 57,\n    -55, 61, 24, 28, -112, -103, -8, 120, 110, -52, -108, -41, -76, -96, 87, -117, 69, 0, 64, 26, 4,\n    122, 13, 6, -106, 112, -51, -1, 79, 117, -25, 2, 64, 127, 68, 60, 81, -5, 110, 41, -1, 122, 93,\n    -74, -113, -24, 52, -65, -60, 72, 8, 32, -24, -48, 26, -57, 38, -26, 0, -48, -24, -21, -28, -66,\n    47, -33, 63, 48, 34, 108, -51, -116, -125, -40, 42, 26, 32, 12, 73, -1, 25, 77, 51, -109, 7, 22,\n    -124, 79, -26, 50, -51, -76, 13, -80, -66, 19, -7, 2, 65, 0, -90, 99, -20, 68, -4, -84, -11,\n    -105, 83, -123, -124, -63, -103, -16, -81, 101, 78, -72, -72, 91, 100, -57, -74, -111, 49, 18,\n    54, 4, -19, 125, 32, -24, 125, -26, 100, -33, -117, 0, 115, -65, 33, 124, -107, 3, -95, -91,\n    118, 12, 12, 29, 80, -3, 12, -20, 7, 52, -118, -12, 122, 75, 117, -81, -112, -89, 2, 64, 93,\n    -21, -52, -110, -54, -9, 79, -123, 105, 125, -56, 75, -77, -26, 125, -123, -69, 62, -2, 79, 8,\n    72, -76, -67, 5, 33, -121, 1, -42, -17, 29, 69, -20, -68, -26, -23, 95, -7, -70, -50, -10, 58,\n    16, -15, -89, -24, -121, -14, -72, -127, -89, -63, 66, 7, 77, -89, -54, -95, -90, 45, -44, -118,\n    69, -1};\n\n  private static final byte[] ENCODED_PUBLIC_KEY = {48, -127, -97, 48, 13, 6, 9, 42, -122, 72, -122,\n    -9, 13, 1, 1, 1, 5, 0, 3, -127, -115, 0, 48, -127, -119, 2, -127, -127, 0, -89, 33, 8, -124,\n    110, -60, 89, 8, -62, 69, 120, 95, -59, -43, 13, -18, 123, 29, -31, 13, -80, -76, 109, -62, -79,\n    2, 104, -94, 76, 59, -73, -26, 99, 123, -57, -92, -100, 116, 50, -25, 96, 53, 124, 95, 76, -59,\n    -84, 70, 27, 0, 72, -63, 84, -77, -2, -107, -66, -32, -119, 27, -95, 54, -44, -89, 1, 71, 44, 7,\n    -55, 126, 5, -78, 87, -105, -114, 65, -19, 58, -78, -95, 0, 118, 83, 76, -88, 2, -21, 127, 64,\n    74, -103, -114, -127, -70, -81, -127, 125, -37, 21, 113, 20, -102, 46, -37, -111, -97, 97, -127,\n    32, 87, -80, 105, 18, -19, 107, -73, -50, -97, 11, -23, -59, -107, -107, 83, -25, 15, -93, -21,\n    2, 3, 1, 0, 1};\n\n  /**\n   * Returns a new copy of a sample encoded RSA private key that matches\n   * {@link #newEncodedRsaPublicKeyBytes()}.\n   */\n  public static byte[] newEncodedRsaPrivateKeyBytes() {\n    return ENCODED_PRIVATE_KEY.clone();\n  }\n\n  /**\n   * Returns a new copy of a sample encoded public key that matches\n   * {@link #newEncodedRsaPrivateKeyBytes()}.\n   */\n  public static byte[] newEncodedRsaPublicKeyBytes() {\n    return ENCODED_PUBLIC_KEY.clone();\n  }\n\n  /** Returns a new sample RSA private key that matches {@link #newRsaPublicKey()}. */\n  public static RSAPrivateKey newRsaPrivateKey() throws GeneralSecurityException {\n    KeyFactory keyFactory = SecurityUtils.getRsaKeyFactory();\n    KeySpec keySpec = new PKCS8EncodedKeySpec(ENCODED_PRIVATE_KEY);\n    return (RSAPrivateKey) keyFactory.generatePrivate(keySpec);\n  }\n\n  /** Returns a new sample RSA public key that matches {@link #newRsaPrivateKey()}. */\n  public static RSAPublicKey newRsaPublicKey() throws GeneralSecurityException {\n    KeyFactory keyFactory = SecurityUtils.getRsaKeyFactory();\n    KeySpec keySpec = new X509EncodedKeySpec(ENCODED_PUBLIC_KEY);\n    return (RSAPublicKey) keyFactory.generatePublic(keySpec);\n  }\n\n  private SecurityTestUtils() {\n  }\n}\n","binary":"false","copies":"15","sample_repo_name":"google/google-http-java-client","sample_ref":"refs/heads/dev","sample_path":"google-http-client/src/main/java/com/google/api/client/testing/util/SecurityTestUtils.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"852c6df6438c16980b955acddbc271ab09247e4b","size":"510","content":"package flow.netbeans.markdown.matchers;\n\nimport java.util.Collection;\nimport org.hamcrest.Description;\nimport org.junit.internal.matchers.TypeSafeMatcher;\n\n/**\n *\n * @author Holger\n */\nclass Empty extends TypeSafeMatcher<Collection<?>> {\n    public Empty() {\n    }\n\n    @Override\n    public boolean matchesSafely(Collection<?> item) {\n        return item.isEmpty();\n    }\n\n    @Override\n    public void describeTo(Description description) {\n        description.appendText(\"collection is not empty\");\n    }\n\n}\n","binary":"false","copies":"3","sample_repo_name":"madflow/flow-netbeans-markdown","sample_ref":"refs/heads/nb8","sample_path":"test/unit/src/flow/netbeans/markdown/matchers/Empty.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f9975b8099827359bc7a66f23d4d0f14c09f4196","size":"257","content":"package xsbti;\n\npublic final class RetrieveException extends RuntimeException\n{\n\tprivate final String version;\n\tpublic RetrieveException(String version, String msg)\n\t{\n\t\tsuper(msg);\n\t\tthis.version = version;\n\t}\n\tpublic String version() { return version; }\n}","binary":"false","copies":"13","sample_repo_name":"harrah/xsbt","sample_ref":"refs/heads/0.13","sample_path":"launch/interface/src/main/java/xsbti/RetrieveException.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8a752d760df65dc263c3de2ded1a6f02870868f4","size":"6403","content":"package org.owasp.seraphimdroid.adapter;\n\nimport android.annotation.TargetApi;\nimport android.app.AlertDialog;\nimport android.app.AppOpsManager;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.pm.ApplicationInfo;\nimport android.content.pm.PackageManager;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.os.Build;\nimport android.provider.Settings;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\nimport android.widget.ToggleButton;\n\nimport org.owasp.seraphimdroid.AppLockFragment;\nimport org.owasp.seraphimdroid.R;\nimport org.owasp.seraphimdroid.helper.DatabaseHelper;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class AppLockerAdapter extends BaseAdapter {\n\n\tprotected static final String String = null;\n\tprivate List<String> lockedApps;\n\tprivate List<String> appList;\n\tprivate Context context;\n\n\tpublic AppLockerAdapter(Context context, List<String> appList) {\n\t\tthis.context = context;\n\t\tthis.appList = appList;\n\t\tlockedApps = new ArrayList<String>(10);\n\t\tgenerateLockedApps();\n\t}\n\n\t@Override\n\tpublic int getCount() {\n\t\treturn appList.size();\n\t}\n\n\t@Override\n\tpublic Object getItem(int position) {\n\t\treturn appList.get(position);\n\t}\n\n\t@Override\n\tpublic long getItemId(int position) {\n\t\treturn position;\n\t}\n\n\t@Override\n\tpublic View getView(int position, View view, ViewGroup parent) {\n\t\tif (view == null) {\n\t\t\tLayoutInflater inflater = LayoutInflater.from(context);\n\t\t\tview = inflater.inflate(R.layout.app_locker_item, parent, false);\n\t\t}\n\n\t\tfinal String pkgName = (String) getItem(position);\n\n\t\t// Initializing Views.\n\t\tTextView tvLabel = (TextView) view\n\t\t\t\t.findViewById(R.id.tv_app_locker_label);\n\t\tTextView tvAppType = (TextView) view\n\t\t\t\t.findViewById(R.id.tv_app_locker_app_type);\n\t\tImageView imgIcon = (ImageView) view.findViewById(R.id.app_locker_icon);\n\t\tfinal ToggleButton tb = (ToggleButton) view.findViewById(R.id.tb_is_locked);\n\n\t\t// Setting properties\n\n\t\ttry {\n\t\t\tPackageManager pm = context.getPackageManager();\n\t\t\tApplicationInfo appInfo = pm.getApplicationInfo(pkgName,\n\t\t\t\t\tPackageManager.GET_META_DATA);\n\t\t\tfinal String appName = appInfo.loadLabel(pm).toString();\n\n\t\t\ttvLabel.setText(appInfo.loadLabel(pm));\n\t\t\timgIcon.setImageDrawable(appInfo.loadIcon(pm));\n\t\t\tif (AppLockFragment.isSystemPackage(pm.getPackageInfo(\n\t\t\t\t\tappInfo.packageName, PackageManager.GET_META_DATA)))\n\t\t\t\ttvAppType.setText(\"System application\");\n\t\t\telse\n\t\t\t\ttvAppType.setText(\"Third party application\");\n\n\t\t\t\tif (lockedApps.contains(pkgName)) {\n\t\t\t\t\ttb.setChecked(true);\n\t\t\t\t} else {\n\t\t\t\t\ttb.setChecked(false);\n\t\t\t\t}\n\t\t\ttb.setTag(pkgName);\n\t\t\ttb.setOnClickListener(new OnClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\tBoolean isEnabled = true;\n\t\t\t\t\tif (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP && !isUsageAccessEnabled()) {\n\t\t\t\t    \t AlertDialog.Builder exitBuilder = new AlertDialog.Builder(context);\n\t\t\t\t\t \t\texitBuilder.setTitle(\"Request Permission\");\n\t\t\t\t\t \t\texitBuilder.setMessage(\"Due to your current Android version, you currently cannot lock apps. Please allow access to restore functionality\");\n\t\t\t\t\t \t\texitBuilder.setNegativeButton(\"Cancel\",\n\t\t\t\t\t \t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\n\t\t\t\t\t \t\t\t\t\t@Override\n\t\t\t\t\t \t\t\t\t\tpublic void onClick(DialogInterface dialog, int arg1) {\n\t\t\t\t\t \t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t \t\t\t\t\t}\n\t\t\t\t\t \t\t\t\t});\n\t\t\t\t\t \t\texitBuilder.setPositiveButton(\"Allow\",\n\t\t\t\t\t \t\t\t\tnew DialogInterface.OnClickListener() {\n\t\t\t\n\t\t\t\t\t \t\t\t\t\t@Override\n\t\t\t\t\t \t\t\t\t\tpublic void onClick(DialogInterface dialog, int arg1) {\n\t\t\t\t\t \t\t\t\t\t\tcontext.startActivity(new Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS));\n\t\t\t\t\t \t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t \t\t\t\t\t}\n\t\t\t\t\t \t\t\t\t});\n\t\t\t\t\t \t exitBuilder.create().show();\n\t\t\t\t\t \t tb.setChecked(false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tToggleButton tb = (ToggleButton) view;\n\t\t\t\t\t\tString tag = (String) tb.getTag();\n\t\n\t\t\t\t\t\tDatabaseHelper dbHelper = new DatabaseHelper(context);\n\t\t\t\t\t\tSQLiteDatabase db = dbHelper.getWritableDatabase();\n\t\t\t\t\t\tCursor cursor = db.rawQuery(\n\t\t\t\t\t\t\t\t\"SELECT * FROM locks WHERE package_name=\\'\" + tag\n\t\t\t\t\t\t\t\t\t\t+ \"\\'\", null);\n\t\n\t\t\t\t\t\tif (tag.equals(pkgName)) {\n\t\t\t\t\t\t\tif (tb.isChecked()) {\n\t\n\t\t\t\t\t\t\t\tif (!cursor.moveToNext()) {\n\t\t\t\t\t\t\t\t\tContentValues cv = new ContentValues();\n\t\t\t\t\t\t\t\t\tcv.put(\"package_name\", tag);\n\t\t\t\t\t\t\t\t\tdb.insert(DatabaseHelper.TABLE_LOCKS, null, cv);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tToast.makeText(context, \"Locked: \" + appName,\n\t\t\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\tif (cursor.moveToNext()) {\n\t\t\t\t\t\t\t\t\tString[] whereArgs = { tag };\n\t\t\t\t\t\t\t\t\tdb.delete(DatabaseHelper.TABLE_LOCKS,\n\t\t\t\t\t\t\t\t\t\t\t\"package_name=?\", whereArgs);\n\t\t\t\t\t\t\t\t\tToast.makeText(context, \"Unlocked: \" + appName,\n\t\t\t\t\t\t\t\t\t\t\tToast.LENGTH_SHORT).show();\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgenerateLockedApps();\n\t\t\t\t\t\tcursor.close();\n\t\t\t\t\t\tdb.close();\n\t\t\t\t\t\tdbHelper.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn view;\n\t}\n\n\t@TargetApi(Build.VERSION_CODES.KITKAT)\n\tprivate Boolean isUsageAccessEnabled() {\n\t\ttry {\n\t\t   PackageManager packageManager = context.getPackageManager();\n\t\t   ApplicationInfo applicationInfo = packageManager.getApplicationInfo(context.getPackageName(), 0);\n\t\t   AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);\n\t\t   int mode = appOpsManager.checkOpNoThrow(AppOpsManager.OPSTR_GET_USAGE_STATS, applicationInfo.uid, applicationInfo.packageName);\n\t\t   return (mode == AppOpsManager.MODE_ALLOWED);\n\n\t\t} catch (PackageManager.NameNotFoundException e) {\n\t\t   return false;\n\t\t}\n\t}\n\t\n\tprivate void generateLockedApps() {\n\t\tlockedApps.clear();\n\t\tDatabaseHelper dbHelper = new DatabaseHelper(this.context);\n\t\tSQLiteDatabase db = dbHelper.getReadableDatabase();\n\t\tString[] selections = { \"package_name\" };\n\t\tCursor cursor = db.query(DatabaseHelper.TABLE_LOCKS, selections, null,\n\t\t\t\tnull, null, null, null);\n\t\twhile (cursor.moveToNext()) {\n\t\t\tlockedApps.add(cursor.getString(0));\n\t\t}\n\t\tnotifyDataSetChanged();\n\t\tcursor.close();\n\t\tdb.close();\n\t\tdbHelper.close();\n\t}\n\n}\n","binary":"false","copies":"2","sample_repo_name":"nikolamilosevic86/owasp-seraphimdroid","sample_ref":"refs/heads/gsoc","sample_path":"Seraphimdroid/app/src/main/java/org/owasp/seraphimdroid/adapter/AppLockerAdapter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"90f7bab5693783b2c3ee7e09437656b94a0501ae","size":"8892","content":"package hk.ust.gmission.ui.activities;\n\nimport android.os.Bundle;\nimport android.view.MenuItem;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.RadioGroup;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\n\nimport com.github.kevinsawicki.wishlist.Toaster;\nimport com.jakewharton.rxbinding.view.RxView;\nimport com.jakewharton.rxbinding.widget.RxSeekBar;\nimport com.jakewharton.rxbinding.widget.RxTextView;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.concurrent.TimeUnit;\n\nimport butterknife.Bind;\nimport hk.ust.gmission.R;\nimport hk.ust.gmission.core.Constants;\nimport hk.ust.gmission.events.TaskCreateSuccessEvent;\nimport hk.ust.gmission.models.Coordinate;\nimport hk.ust.gmission.models.GeoLocation;\nimport hk.ust.gmission.models.Hit;\nimport rx.Observable;\nimport rx.android.schedulers.AndroidSchedulers;\nimport rx.functions.Action1;\nimport rx.functions.Func1;\nimport rx.functions.Func2;\nimport rx.schedulers.Schedulers;\n\nimport static hk.ust.gmission.core.Constants.Extra.COORDINATE;\nimport static hk.ust.gmission.core.Constants.Extra.LOCATION_NAME;\n\n\npublic class AskSpatialTaskActivity extends BootstrapFragmentActivity {\n    private static int TEXT_CHECK__DELAY_MILLIS = 1000;\n    private static int BUTTON_PRESS_DELAY_MILLIS = 1000;\n\n    @Bind(R.id.et_location_name) TextView mEtLocation;\n    @Bind(R.id.et_content) EditText mEtContent;\n    @Bind(R.id.et_title) EditText mEtTitle;\n    @Bind(R.id.selection_radio) RadioGroup selectionRadioGroup;\n\n\n    @Bind(R.id.creditTxt) TextView mTxtCredit;\n    @Bind(R.id.answersTxt) TextView mTxtAnswersCount;\n    @Bind(R.id.timeTxt) TextView mTxtTime;\n\n\n\n    @Bind(R.id.creditSeekBar) SeekBar mSkbCredit;\n    @Bind(R.id.answerSeekBar) SeekBar mSkbAnswersCount;\n    @Bind(R.id.timeSeekBar) SeekBar mSkbTime;\n\n    @Bind(R.id.submit_btn) Button submitButton;\n    \n    private AskSpatialTaskActivity mActivity;\n    private Coordinate mCoordinate;\n    private String mLocationName;\n    \n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.ask_saptial_task_activity);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\n        mActivity = this;\n\n        initializeQuestionContent();\n\n        subcribeViews();\n        subcribeSubmitButton();\n\n    }\n\n\n    public void initializeQuestionContent(){\n        if (getIntent() != null && getIntent().getExtras() != null) {\n            mCoordinate = (Coordinate) getIntent().getExtras().get(COORDINATE);\n            mLocationName = getIntent().getExtras().getString(LOCATION_NAME);\n            mEtLocation.setText(mLocationName);\n        }\n    }\n\n    public void subcribeSubmitButton(){\n        RxView.clicks(submitButton)\n                .debounce(BUTTON_PRESS_DELAY_MILLIS, TimeUnit.MILLISECONDS)\n                .observeOn(AndroidSchedulers.mainThread())\n                .map(new Func1<Object, Object>() {\n                    @Override\n                    public Object call(Object o) {\n                        mActivity.showProgress();\n                        return o;\n                    }\n                })\n                .observeOn(Schedulers.io())\n                .flatMap(new Func1<Object, Observable<Coordinate>>() {\n                    @Override\n                    public Observable<Coordinate> call(Object o) {\n                        return serviceProvider.getService(mActivity).getGeoService().createCoordinate(mCoordinate);\n                    }\n                })\n                .flatMap(new Func1<Coordinate, Observable<GeoLocation>>() {\n                    @Override\n                    public Observable<GeoLocation> call(Coordinate coordinate) {\n                        GeoLocation geoLocation = new GeoLocation();\n                        geoLocation.setCoordinate_id(coordinate.getId());\n                        geoLocation.setName(mEtLocation.getText().toString());\n\n                        return serviceProvider.getService(mActivity).getGeoService().createGeoLocation(geoLocation);\n                    }\n                })\n                .flatMap(new Func1<GeoLocation, Observable<Hit>>() {\n                    @Override\n                    public Observable<Hit> call(GeoLocation geoLocation) {\n                        Hit hit = new Hit();\n\n                        hit.setRequester_id(Constants.Http.PARAM_USER_ID);\n                        hit.setLocation_id(geoLocation.getId());\n                        hit.setTitle(mEtTitle.getText().toString());\n                        hit.setDescription(mEtContent.getText().toString());\n                        hit.setStatus(\"open\");\n\n                        int checkedRdId = selectionRadioGroup.getCheckedRadioButtonId();\n                        switch (checkedRdId){\n                            case R.id.rb_text_type:\n                                hit.setType(Constants.Extra.TEXT_TYPE);break;\n                            case R.id.rb_image_type:\n                                hit.setType(Constants.Extra.IMAGE_TYPE);break;\n                            case R.id.rb_choice_type:\n                                hit.setType(Constants.Extra.CHOICE_TYPE);break;\n                        }\n\n\n                        int minutes_10 = mSkbTime.getProgress() + 1;\n                        hit.setEnd_time(new Date(Calendar.getInstance().getTime().getTime() + (minutes_10 * 10 * 60 * 1000)));\n\n                        int credits = mSkbCredit.getProgress() + 1;\n                        hit.setCredit(credits);\n\n                        int requiredAnswers = mSkbAnswersCount.getProgress() + 1;\n                        hit.setRequired_answer_count(requiredAnswers);\n\n                        return serviceProvider.getService(mActivity).getHitService().createHit(hit);\n                    }\n                })\n                .observeOn(AndroidSchedulers.mainThread())\n                .doOnNext(new Action1<Hit>() {\n                    @Override\n                    public void call(Hit hit) {\n                        Toaster.showShort(mActivity, mActivity.getString(R.string.message_ask_question_success));\n                        bus.post(new TaskCreateSuccessEvent());\n                        mActivity.hideProgress();\n                        finish();\n                    }\n                })\n                .doOnError(new Action1<Throwable>() {\n                    @Override\n                    public void call(Throwable throwable) {\n                        throwable.printStackTrace();\n                        mActivity.hideProgress();\n                    }\n                })\n                .subscribe();\n    }\n\n    public void subcribeViews(){\n        RxSeekBar.userChanges(mSkbCredit).doOnNext(new Action1<Integer>() {\n            @Override\n            public void call(Integer progress) {\n                progress++;\n                mTxtCredit.setText(String.valueOf(progress));\n            }\n        }).subscribe();\n\n        RxSeekBar.userChanges(mSkbAnswersCount).doOnNext(new Action1<Integer>() {\n            @Override\n            public void call(Integer progress) {\n                progress++;\n                mTxtAnswersCount.setText(String.valueOf(progress));\n            }\n        }).subscribe();\n\n        RxSeekBar.userChanges(mSkbTime).doOnNext(new Action1<Integer>() {\n            @Override\n            public void call(Integer progress) {\n                progress++;\n                int hours = progress / 6;\n                int minutes_10 = progress % 6;\n                mTxtTime.setText(String.valueOf(hours+\":\"+minutes_10+\"0\"));\n            }\n        }).subscribe();\n\n\n        Observable<CharSequence> titleObserver = RxTextView.textChanges(mEtTitle).debounce(TEXT_CHECK__DELAY_MILLIS, TimeUnit.MILLISECONDS);\n        Observable<CharSequence> contentObserver = RxTextView.textChanges(mEtContent).debounce(TEXT_CHECK__DELAY_MILLIS, TimeUnit.MILLISECONDS);\n\n        Observable.combineLatest(titleObserver, contentObserver, new Func2<CharSequence, CharSequence, Boolean>() {\n\n                    @Override\n                    public Boolean call(CharSequence title, CharSequence content) {\n                        String location = mEtLocation.getText().toString();\n                        return title.length() >= 5 && content.length() >= 5 && location.length() > 0;\n                    }\n                })\n                .observeOn(AndroidSchedulers.mainThread())\n                .doOnNext(new Action1<Boolean>() {\n                    @Override\n                    public void call(Boolean enableButten) {\n                        if (enableButten){\n                            submitButton.setEnabled(true);\n                        }\n                    }\n                })\n                .subscribe();\n    }\n\n\n\n\n\n\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item){\n        finish();\n        return true;\n\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"gmission/gmission_reborn_android","sample_ref":"refs/heads/main","sample_path":"gmission/src/main/java/hk/ust/gmission/ui/activities/AskSpatialTaskActivity.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4839d3915f542b574320ac06bc34b278a781afc4","size":"678","content":"// Autogenerated by metajava.py.\n// Do not edit this file directly.\n// The template for this file is located at:\n// ../../../../../../../../templates/AstSubclass.java\n\npackage com.rethinkdb.gen.ast;\n\nimport com.rethinkdb.gen.proto.TermType;\nimport com.rethinkdb.gen.exc.ReqlDriverError;\nimport com.rethinkdb.model.Arguments;\nimport com.rethinkdb.model.OptArgs;\nimport com.rethinkdb.ast.ReqlAst;\n\n\n\npublic class May extends ReqlExpr {\n\n\n    public May(Object arg) {\n        this(new Arguments(arg), null);\n    }\n    public May(Arguments args){\n        this(args, null);\n    }\n    public May(Arguments args, OptArgs optargs) {\n        super(TermType.MAY, args, optargs);\n    }\n\n}\n","binary":"false","copies":"9","sample_repo_name":"rethinkdb/rethinkdb","sample_ref":"refs/heads/next","sample_path":"drivers/java/src/main/java/com/rethinkdb/gen/ast/May.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"18f45972b0b6a6b129353c3495a88f3e7bb18b3e","size":"6731","content":"package freenet.support;\n\nimport java.util.AbstractCollection;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Comparator;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.SortedSet;\n\nimport freenet.support.Logger.LogLevel;\n\n\n/**\n * Sorted array of int's.\n */\npublic class SortedIntSet extends AbstractCollection<Integer> implements SortedSet<Integer> {\n\n\tprivate int[] data;\n\tprivate int length;\n\tprivate static final int MIN_SIZE = 32;\n\t\n\t/**\n\t * Default constructor\n\t */\n\tpublic SortedIntSet() {\n\t\tthis.data = new int[MIN_SIZE];\n\t\tfor(int i=0;i<data.length;i++)\n\t\t\tdata[i] = Integer.MAX_VALUE;\n\t\tlength = 0;\n\t}\n\t\n\tpublic SortedIntSet(int[] input) {\n\t\tthis.data = input;\n\t\tlength = input.length;\n\t\tverify();\n\t}\n\t\n\t@Override\n\tpublic int size() {\n\t\treturn length;\n\t}\n\n\t/**\n\t * Get the smallest item on this set\n\t * \n\t * @return the smallest item\n\t */\n\tpublic synchronized int getFirst() {\n\t\tif(length == 0) return -1;\n\t\treturn data[0];\n\t}\n\n\t/**\n\t * Get the largest item on this set\n\t * \n\t * @return the largest item\n\t */\n\tpublic synchronized int getLast() {\n\t\tif(length == 0) return -1;\n\t\treturn data[length-1];\n\t}\n\n\t/**\n\t * Check if this set is empty.\n\t * \n\t * @param num\n\t * @return <code>true</code>, if the set is empty.\n\t */\n\t@Override\n\tpublic synchronized boolean isEmpty() {\n\t\treturn length == 0;\n\t}\n\n\t/**\n\t * Check if <code>num</code> exist in this set.\n\t * \n\t * @param num\n\t * @return <code>true</code>, if <code>num</code> exist.\n\t */\n\tpublic synchronized boolean contains(int num) {\n\t\tint x = binarySearch(num);\n\t\tif(x >= 0)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\t/**\n\t * Remove an item\n\t * \n\t * @param item\n\t *            the item to be removed\n\t */\n\tpublic synchronized boolean remove(int item) {\n\t\tboolean ret = false;\n\t\tint x = binarySearch(item);\n\t\tif(x >= 0) {\n\t\t\tif(x < length-1)\n\t\t\t\tSystem.arraycopy(data, x+1, data, x, length-x-1);\n\t\t\tdata[--length] = Integer.MAX_VALUE;\n\t\t\tret = true;\n\t\t}\n\t\tif((length*4 < data.length) && (length > MIN_SIZE)) {\n\t\t\tint[] newData = new int[Math.max(data.length/2, MIN_SIZE)];\n\t\t\tSystem.arraycopy(data, 0, newData, 0, length);\n\t\t\tfor(int i=length;i<newData.length;i++)\n\t\t\t\tnewData[i] = Integer.MAX_VALUE;\n\t\t\tdata = newData;\n\t\t}\n\t\t\n\t\tassert(verify());\n\t\treturn ret;\n\t}\n\n\t/**\n\t * verify internal state. can be removed without ill effect\n\t */\n\tprivate synchronized boolean verify() { // TODO: Move to a unit test.\n\t\tint lastItem = -1;\n\t\tfor(int i=0;i<length;i++) {\n\t\t\tint item = data[i];\n\t\t\tif(i>0) {\n\t\t\t\tif(item <= lastItem)\n\t\t\t\t\tthrow new IllegalStateException(\"Verify failed!\");\n\t\t\t}\n\t\t\tlastItem = item;\n\t\t}\n\t\tfor(int i=length;i<data.length;i++)\n\t\t\tif(data[i] != Integer.MAX_VALUE)\n\t\t\t\tthrow new IllegalStateException(\"length=\"+length+\", data.length=\"+data.length+\" but [\"+i+\"] != Integer.MAX_VALUE\");\n\t\t\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add the item, if it (or an item of the same number) is not already\n\t * present.\n\t * \n\t * @return <code>true</code>, if we added the item.\n\t */ \n\tpublic synchronized boolean push(int num) {\n\t\tint x = binarySearch(num);\n\t\tif(x >= 0) return false;\n\t\t// insertion point\n\t\tx = -x-1;\n\t\tpush(num, x);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add the item.\n\t * \n\t * @throws {@link IllegalArgumentException}\n\t *             if the item already exist\n\t * @return <code>true</code>, if we added the item.\n\t */ \n\tpublic synchronized void add(int num) {\n\t\tint x = binarySearch(num);\n\t\tif(x >= 0) {\n\t\t\tthrow new IllegalArgumentException(); // already exists\n\t\t}\n\t\t// insertion point\n\t\tx = -x-1;\n\t\tpush(num, x);\n\t}\n\n\tprivate synchronized void push(int num, int x) {\n\t\tboolean logMINOR = Logger.shouldLog(LogLevel.MINOR, this);\n\t\tif(logMINOR) Logger.minor(this, \"Insertion point: \"+x+\" length \"+length+\" data.length \"+data.length);\n\t\t// Move the data\n\t\tif(length == data.length) {\n\t\t\tint[] newData = Arrays.copyOf(data, Math.max(length*2, 4));\n\t\t\tif(logMINOR) Logger.minor(this, \"Expanding from \"+length+\" to \"+newData.length);\n\t\t\tfor(int i=length;i<newData.length;i++)\n\t\t\t\tnewData[i] = Integer.MAX_VALUE;\n\t\t\tdata = newData;\n\t\t}\n\t\tif(x < length)\n\t\t\tSystem.arraycopy(data, x, data, x+1, length-x);\n\t\tdata[x] = num;\n\t\tlength++;\n\t\t\n\t\tassert(verify());\n\t}\n\n\t/**\n\t * Remove and return the smallest item\n\t * \n\t * @return the smallest item\n\t */\n\tpublic int removeFirst() {\n\t\tint val = getFirst();\n\t\tremove(val);\n\t\treturn val;\n\t}\n\n\t/**\n\t * Clear this set\n\t */\n\t@Override\n\tpublic synchronized void clear() {\n\t\tdata = new int[MIN_SIZE];\n\t\tfor(int i=0;i<data.length;i++)\n\t\t\tdata[i] = Integer.MAX_VALUE;\n\t\tlength = 0;\n\t}\n\n\t/**\n\t * Get a sorted array of all items\n\t * \n\t * @return sorted array of all items\n\t */\n\tpublic synchronized int[] toIntArray() {\n\t\treturn Arrays.copyOf(data, length);\n\t}\n\n\t/**\n\t * Get a sorted array of all items\n\t * \n\t * @return sorted array of all items\n\t */\n\tpublic synchronized int[] toArrayRaw() {\n\t\tif(length == data.length) return data;\n\t\treturn toIntArray();\n\t}\n\n\tprivate int binarySearch(int key) {\n\t\treturn Arrays.binarySearch(data, 0, length, key);\n\t}\n\n\t@Override\n\tpublic Comparator<? super Integer> comparator() {\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic Integer first() {\n\t\treturn getFirst();\n\t}\n\n\t@Override\n\tpublic SortedSet<Integer> headSet(Integer arg0) {\n\t\tthrow new UnsupportedOperationException(); // FIXME\n\t}\n\n\t@Override\n\tpublic Integer last() {\n\t\treturn getLast();\n\t}\n\n\t@Override\n\tpublic SortedSet<Integer> subSet(Integer arg0, Integer arg1) {\n\t\tthrow new UnsupportedOperationException(); // FIXME\n\t}\n\n\t@Override\n\tpublic SortedSet<Integer> tailSet(Integer arg0) {\n\t\tthrow new UnsupportedOperationException();\n\t}\n\n\t@Override\n\tpublic boolean add(Integer arg0) {\n\t\treturn push(arg0.intValue());\n\t}\n\n\t@Override\n\tpublic boolean contains(Object arg0) {\n\t\tif(arg0 instanceof Integer) {\n\t\t\tint x = (Integer)arg0;\n\t\t\treturn contains(x);\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic Iterator<Integer> iterator() {\n\t\treturn new Iterator<Integer>() {\n\t\t\t\n\t\t\tint x = 0;\n\t\t\tint last = -1;\n\t\t\tboolean hasLast = false;\n\n\t\t\t@Override\n\t\t\tpublic boolean hasNext() {\n\t\t\t\treturn x < length;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Integer next() {\n\t\t\t\tif(x >= length) throw new NoSuchElementException();\n\t\t\t\thasLast = true;\n\t\t\t\tlast = data[x++];\n\t\t\t\treturn last;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void remove() {\n\t\t\t\tif(!hasLast)\n\t\t\t\t\tthrow new IllegalStateException();\n\t\t\t\tSortedIntSet.this.remove(last);\n\t\t\t\tx--;\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\n\t@Override\n\tpublic boolean remove(Object arg0) {\n\t\tif(arg0 instanceof Integer) {\n\t\t\treturn remove(((Integer)arg0).intValue());\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean removeAll(Collection<?> arg0) {\n\t\tthrow new UnsupportedOperationException(); // FIXME\n\t}\n\n\t@Override\n\tpublic boolean retainAll(Collection<?> arg0) {\n\t\tthrow new UnsupportedOperationException(); // FIXME\n\t}\n\n}\n","binary":"false","copies":"15","sample_repo_name":"freenet/fred","sample_ref":"refs/heads/next","sample_path":"src/freenet/support/SortedIntSet.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"851e19950f8a422ab0226caf66b705dd69afe36b","size":"6965","content":"// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage org.chromium.chrome.browser.banners;\n\nimport android.content.Context;\nimport android.text.TextUtils;\n\nimport org.chromium.base.ApplicationStatus;\nimport org.chromium.base.VisibleForTesting;\nimport org.chromium.base.annotations.CalledByNative;\nimport org.chromium.base.annotations.JNINamespace;\nimport org.chromium.chrome.browser.ShortcutHelper;\nimport org.chromium.chrome.browser.tab.EmptyTabObserver;\nimport org.chromium.chrome.browser.tab.Tab;\nimport org.chromium.content_public.browser.WebContents;\n\n/**\n * Manages an AppBannerInfoBar for a Tab.\n *\n * The AppBannerManager manages a single AppBannerInfoBar, creating a new one when it detects that\n * the current webpage is requesting a banner to be built. The actual observation of the WebContents\n * (which triggers the automatic creation and removal of banners, among other things) is done by the\n * native-side AppBannerManager.\n *\n * This Java-side class owns its native-side counterpart, which is basically used to grab resources\n * from the network.\n */\n@JNINamespace(\"banners\")\npublic class AppBannerManager extends EmptyTabObserver {\n    private static final String TAG = \"AppBannerManager\";\n\n    /** Retrieves information about a given package. */\n    private static AppDetailsDelegate sAppDetailsDelegate;\n\n    /** Whether the banners are enabled. */\n    private static Boolean sIsEnabled;\n\n    /** Pointer to the native side AppBannerManager. */\n    private long mNativePointer;\n\n    /**\n     * Checks if app banners are enabled.\n     * @return True if banners are enabled, false otherwise.\n     */\n    public static boolean isEnabled() {\n        if (sIsEnabled == null) {\n            Context context = ApplicationStatus.getApplicationContext();\n            sIsEnabled = ShortcutHelper.isAddToHomeIntentSupported(context);\n        }\n        return sIsEnabled;\n    }\n\n    /**\n     * Sets the delegate that provides information about a given package.\n     * @param delegate Delegate to use.  Previously set ones are destroyed.\n     */\n    public static void setAppDetailsDelegate(AppDetailsDelegate delegate) {\n        if (sAppDetailsDelegate != null) sAppDetailsDelegate.destroy();\n        sAppDetailsDelegate = delegate;\n    }\n\n    /**\n     * Constructs an AppBannerManager for the given tab.\n     * @param tab Tab that the AppBannerManager will be attached to.\n     */\n    public AppBannerManager(Tab tab, Context context) {\n        mNativePointer = nativeInit();\n        updatePointers(tab);\n    }\n\n    @Override\n    public void onWebContentsSwapped(Tab tab, boolean didStartLoad,\n            boolean didFinishLoad) {\n        updatePointers(tab);\n    }\n\n    @Override\n    public void onContentChanged(Tab tab) {\n        updatePointers(tab);\n    }\n\n    /**\n     * Destroys the native AppBannerManager.\n     */\n    public void destroy() {\n        nativeDestroy(mNativePointer);\n        mNativePointer = 0;\n    }\n\n    /**\n     * Updates which WebContents the native AppBannerManager is monitoring.\n     */\n    private void updatePointers(Tab tab) {\n        nativeReplaceWebContents(mNativePointer, tab.getWebContents());\n    }\n\n    /**\n     * Grabs package information for the banner asynchronously.\n     * @param url         URL for the page that is triggering the banner.\n     * @param packageName Name of the package that is being advertised.\n     */\n    @CalledByNative\n    private void fetchAppDetails(\n            String url, String packageName, String referrer, int iconSizeInDp) {\n        if (sAppDetailsDelegate == null) return;\n\n        Context context = ApplicationStatus.getApplicationContext();\n        int iconSizeInPx = Math.round(\n                context.getResources().getDisplayMetrics().density * iconSizeInDp);\n        sAppDetailsDelegate.getAppDetailsAsynchronously(\n                createAppDetailsObserver(), url, packageName, referrer, iconSizeInPx);\n    }\n\n    private AppDetailsDelegate.Observer createAppDetailsObserver() {\n        return new AppDetailsDelegate.Observer() {\n            /**\n             * Called when data about the package has been retrieved, which includes the url for the\n             * app's icon but not the icon Bitmap itself.\n             * @param data Data about the app.  Null if the task failed.\n             */\n            @Override\n            public void onAppDetailsRetrieved(AppData data) {\n                if (data == null || mNativePointer == 0) return;\n\n                String imageUrl = data.imageUrl();\n                if (TextUtils.isEmpty(imageUrl)) return;\n\n                nativeOnAppDetailsRetrieved(\n                        mNativePointer, data, data.title(), data.packageName(), data.imageUrl());\n            }\n        };\n    }\n\n    /** Requests the app banner. This method is called from the DevTools. */\n    public void requestAppBanner() {\n        nativeRequestAppBanner(mNativePointer);\n    }\n\n    /** Enables or disables the app banners for testing. */\n    @VisibleForTesting\n    static void setIsEnabledForTesting(boolean state) {\n        sIsEnabled = state;\n    }\n\n    /** Sets a constant (in days) that gets added to the time when the current time is requested. */\n    @VisibleForTesting\n    static void setTimeDeltaForTesting(int days) {\n        nativeSetTimeDeltaForTesting(days);\n    }\n\n    /** Disables the HTTPS scheme requirement for testing. */\n    @VisibleForTesting\n    static void disableSecureSchemeCheckForTesting() {\n        nativeDisableSecureSchemeCheckForTesting();\n    }\n\n    /** Sets the weights of direct and indirect page navigations for testing. */\n    @VisibleForTesting\n    static void setEngagementWeights(double directEngagement, double indirectEngagement) {\n        nativeSetEngagementWeights(directEngagement, indirectEngagement);\n    }\n\n    /** Returns whether a AppBannerDataFetcher is actively retrieving data. */\n    @VisibleForTesting\n    public boolean isFetcherActiveForTesting() {\n        return nativeIsFetcherActive(mNativePointer);\n    }\n\n    private native long nativeInit();\n    private native void nativeDestroy(long nativeAppBannerManagerAndroid);\n    private native void nativeReplaceWebContents(long nativeAppBannerManagerAndroid,\n            WebContents webContents);\n    private native boolean nativeOnAppDetailsRetrieved(long nativeAppBannerManagerAndroid,\n            AppData data, String title, String packageName, String imageUrl);\n    private native void nativeRequestAppBanner(long nativeAppBannerManagerAndroid);\n\n    // Testing methods.\n    private static native void nativeSetTimeDeltaForTesting(int days);\n    private static native void nativeDisableSecureSchemeCheckForTesting();\n    private static native void nativeSetEngagementWeights(double directEngagement,\n            double indirectEngagement);\n    private native boolean nativeIsFetcherActive(long nativeAppBannerManagerAndroid);\n}\n","binary":"false","copies":"7","sample_repo_name":"nwjs/chromium.src","sample_ref":"refs/heads/nw15","sample_path":"chrome/android/java/src/org/chromium/chrome/browser/banners/AppBannerManager.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"937cf151cbd6386534a05c0ee2169c16161f1066","size":"6963","content":"// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\npackage org.chromium.chrome.browser.widget;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Color;\nimport android.graphics.Rect;\nimport android.graphics.drawable.ClipDrawable;\nimport android.graphics.drawable.ColorDrawable;\nimport android.support.v4.view.ViewCompat;\nimport android.util.AttributeSet;\nimport android.view.Gravity;\nimport android.widget.ImageView;\n\nimport org.chromium.chrome.R;\n\n/**\n * An alternative progress bar implemented using ClipDrawable for simplicity and performance.\n */\npublic class ClipDrawableProgressBar extends ImageView {\n    /**\n     * Structure that has complete {@link ClipDrawableProgressBar} drawing information.\n     */\n    public static class DrawingInfo {\n        public final Rect progressBarRect = new Rect();\n        public final Rect progressBarBackgroundRect = new Rect();\n\n        public int progressBarColor;\n        public int progressBarBackgroundColor;\n    }\n\n    // ClipDrawable's max is a fixed constant 10000.\n    // http://developer.android.com/reference/android/graphics/drawable/ClipDrawable.html\n    private static final int CLIP_DRAWABLE_MAX = 10000;\n\n    private final ColorDrawable mForegroundDrawable;\n    private int mBackgroundColor = Color.TRANSPARENT;\n    private float mProgress;\n    private int mProgressUpdateCount;\n    private int mDesiredVisibility;\n\n    /**\n     * Interface for listening to drawing invalidation.\n     */\n    public interface InvalidationListener {\n        /**\n         * Called on drawing invalidation.\n         * @param dirtyRect Invalidated area.\n         */\n        void onInvalidation(Rect dirtyRect);\n    }\n\n    /**\n     * Constructor for inflating from XML.\n     */\n    public ClipDrawableProgressBar(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        mDesiredVisibility = getVisibility();\n\n        assert attrs != null;\n        TypedArray a = context.obtainStyledAttributes(\n                attrs, R.styleable.ClipDrawableProgressBar, 0, 0);\n\n        int foregroundColor = a.getColor(\n                R.styleable.ClipDrawableProgressBar_progressBarColor, Color.TRANSPARENT);\n        mBackgroundColor = a.getColor(\n                R.styleable.ClipDrawableProgressBar_backgroundColor, Color.TRANSPARENT);\n        assert foregroundColor != Color.TRANSPARENT;\n        assert Color.alpha(foregroundColor) == 255\n                : \"Currently ClipDrawableProgressBar only supports opaque progress bar color.\";\n\n        a.recycle();\n\n        mForegroundDrawable = new ColorDrawable(foregroundColor);\n        setImageDrawable(\n                new ClipDrawable(mForegroundDrawable, Gravity.START, ClipDrawable.HORIZONTAL));\n        setBackgroundColor(mBackgroundColor);\n    }\n\n    /**\n     * Get the progress bar's current level of progress.\n     *\n     * @return The current progress, between 0.0 and 1.0.\n     */\n    public float getProgress() {\n        return mProgress;\n    }\n\n    /**\n     * Set the current progress to the specified value.\n     *\n     * @param progress The new progress, between 0.0 and 1.0.\n     */\n    public void setProgress(float progress) {\n        assert 0.0f <= progress && progress <= 1.0f;\n        if (mProgress == progress) return;\n\n        mProgress = progress;\n        mProgressUpdateCount += 1;\n        getDrawable().setLevel(Math.round(progress * CLIP_DRAWABLE_MAX));\n    }\n\n    /**\n     * @return Background color of this progress bar.\n     */\n    public int getProgressBarBackgroundColor() {\n        return mBackgroundColor;\n    }\n\n    /**\n     * Get progress bar drawing information.\n     * @param drawingInfoOut An instance that the result will be written.\n     */\n    public void getDrawingInfo(DrawingInfo drawingInfoOut) {\n        int foregroundColor = mForegroundDrawable.getColor();\n        float effectiveAlpha = getVisibility() == VISIBLE ? getAlpha() : 0.0f;\n        drawingInfoOut.progressBarColor = applyAlpha(foregroundColor, effectiveAlpha);\n        drawingInfoOut.progressBarBackgroundColor = applyAlpha(mBackgroundColor, effectiveAlpha);\n\n        if (ViewCompat.getLayoutDirection(this) == LAYOUT_DIRECTION_LTR) {\n            drawingInfoOut.progressBarRect.set(\n                    getLeft(),\n                    getTop(),\n                    getLeft() + Math.round(mProgress * getWidth()),\n                    getBottom());\n            drawingInfoOut.progressBarBackgroundRect.set(\n                    drawingInfoOut.progressBarRect.right,\n                    getTop(),\n                    getRight(),\n                    getBottom());\n        } else {\n            drawingInfoOut.progressBarRect.set(\n                    getRight() - Math.round(mProgress * getWidth()),\n                    getTop(),\n                    getRight(),\n                    getBottom());\n            drawingInfoOut.progressBarBackgroundRect.set(\n                    getLeft(),\n                    getTop(),\n                    drawingInfoOut.progressBarRect.left,\n                    getBottom());\n        }\n    }\n\n    /**\n     * Resets progress update count to 0.\n     */\n    public void resetProgressUpdateCount() {\n        mProgressUpdateCount = 0;\n    }\n\n    /**\n     * @return Progress update count since reset.\n     */\n    public int getProgressUpdateCount() {\n        return mProgressUpdateCount;\n    }\n\n    private void updateInternalVisibility() {\n        int oldVisibility = getVisibility();\n        int newVisibility = mDesiredVisibility;\n        if (getAlpha() == 0 && mDesiredVisibility == VISIBLE) newVisibility = INVISIBLE;\n        if (oldVisibility != newVisibility) super.setVisibility(newVisibility);\n    }\n\n    private int applyAlpha(int color, float alpha) {\n        return (Math.round(alpha * (color >>> 24)) << 24) | (0x00ffffff & color);\n    }\n\n    // View implementations.\n\n    /**\n     * Note that this visibility might not be respected for optimization. For example, if alpha\n     * is 0, it will remain View#INVISIBLE even if this is called with View#VISIBLE.\n     */\n    @Override\n    public void setVisibility(int visibility) {\n        mDesiredVisibility = visibility;\n        updateInternalVisibility();\n    }\n\n    @Override\n    public void setBackgroundColor(int color) {\n        if (color == Color.TRANSPARENT) {\n            setBackground(null);\n        } else {\n            super.setBackgroundColor(color);\n        }\n\n        mBackgroundColor = color;\n    }\n\n    /**\n     * Sets the color for the foreground (i.e. the moving part) of the progress bar.\n     * @param color The new color of the progress bar foreground.\n     */\n    public void setForegroundColor(int color) {\n        mForegroundDrawable.setColor(color);\n    }\n\n    @Override\n    protected boolean onSetAlpha(int alpha) {\n        updateInternalVisibility();\n        return super.onSetAlpha(alpha);\n    }\n}\n","binary":"false","copies":"15","sample_repo_name":"nwjs/chromium.src","sample_ref":"refs/heads/nw15","sample_path":"chrome/android/java/src/org/chromium/chrome/browser/widget/ClipDrawableProgressBar.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8c18e5b3d4340300f2b67047acd65e90f641eb6c","size":"591","content":"package com.alphatica.genotick.data;\n\npublic class DataSetName {\n    private final String name;\n    public DataSetName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o)\n            return true;\n        if (o == null || getClass() != o.getClass())\n            return false;\n        DataSetName that = (DataSetName) o;\n        return name.equals(that.name);\n    }\n\n    @Override\n    public int hashCode() {\n        return name.hashCode();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"alphatica/genotick","sample_ref":"refs/heads/0.9.2","sample_path":"src/main/java/com/alphatica/genotick/data/DataSetName.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"395f9d4d225a0191f00fc2d3d162da241dfa1a79","size":"468","content":"package com.alphatica.genotick.timepoint;\n\nimport java.util.concurrent.ThreadFactory;\n\nclass DaemonThreadFactory implements ThreadFactory {\n    private static int counter = 1;\n    @Override\n    public Thread newThread(@SuppressWarnings(\"NullableProblems\") Runnable runnable) {\n        Thread thread = new Thread(runnable);\n        thread.setDaemon(true);\n        thread.setName(\"TimePointExecutor thread: \" + String.valueOf(counter++));\n        return thread;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"alphatica/genotick","sample_ref":"refs/heads/0.9.2","sample_path":"src/main/java/com/alphatica/genotick/timepoint/DaemonThreadFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3edde45f43a7024989792dc763d4a7d7134993b8","size":"880","content":"package com.alphatica.genotick.instructions;\n\nimport com.alphatica.genotick.processor.Processor;\n\nimport java.io.Serializable;\n\npublic class JumpIfVariableEqualVariable extends VarVarJumpInstruction implements Serializable{\n    @SuppressWarnings(\"unused\")\n    private static final long serialVersionUID = 7095626127058648815L;\n\n    private JumpIfVariableEqualVariable(JumpIfVariableEqualVariable i) {\n        this.setVariable1Argument(i.getVariable1Argument());\n        this.setVariable2Argument(i.getVariable2Argument());\n        this.setAddress(i.getAddress());\n    }\n\n    @SuppressWarnings(\"unused\")\n    public JumpIfVariableEqualVariable() {\n    }\n\n    @Override\n    public void executeOn(Processor processor) {\n        processor.execute(this);\n    }\n\n    @Override\n    public JumpIfVariableEqualVariable copy() {\n        return new JumpIfVariableEqualVariable(this);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"alphatica/genotick","sample_ref":"refs/heads/0.9.2","sample_path":"src/main/java/com/alphatica/genotick/instructions/JumpIfVariableEqualVariable.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a8ee0d0a3a630f352a1e1285d50ac53078fecbe4","size":"6877","content":"/*\n * Copyright 2014-2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\npackage com.amazon.titan.diskstorage.dynamodb;\n\nimport com.amazonaws.services.dynamodbv2.model.DeleteItemRequest;\nimport com.amazonaws.services.dynamodbv2.model.DeleteItemResult;\nimport com.amazonaws.services.dynamodbv2.model.GetItemRequest;\nimport com.amazonaws.services.dynamodbv2.model.GetItemResult;\nimport com.amazonaws.services.dynamodbv2.model.QueryRequest;\nimport com.amazonaws.services.dynamodbv2.model.QueryResult;\nimport com.amazonaws.services.dynamodbv2.model.ScanRequest;\nimport com.amazonaws.services.dynamodbv2.model.ScanResult;\nimport com.amazonaws.services.dynamodbv2.model.UpdateItemRequest;\nimport com.amazonaws.services.dynamodbv2.model.UpdateItemResult;\nimport com.thinkaurelius.titan.diskstorage.BackendException;\nimport com.thinkaurelius.titan.diskstorage.TemporaryBackendException;\n\n/**\n * A wrapper for a client-side exponential backoff retry strategy for DynamoDB API calls\n * @author Alexander Patrikalakis\n *\n * @param <RequestType> the type of AWS request that is input\n * @param <ResultType> the type of AWS request that is returned\n *\n */\npublic abstract class ExponentialBackoff<RequestType, ResultType> {\n    public static final String RETRIES = \"Retries\";\n    public static final String SCAN_RETRIES = DynamoDBDelegate.SCAN + RETRIES;\n    public static final String QUERY_RETRIES = DynamoDBDelegate.QUERY + RETRIES;\n    public static final String UPDATE_ITEM_RETRIES = DynamoDBDelegate.UPDATE_ITEM + RETRIES;\n    public static final String DELETE_ITEM_RETRIES = DynamoDBDelegate.DELETE_ITEM + RETRIES;\n    public static final String GET_ITEM_RETRIES = DynamoDBDelegate.GET_ITEM + RETRIES;\n\n    public static final class Scan extends ExponentialBackoff<ScanRequest, ScanResult> {\n        private final int permits;\n        public Scan(ScanRequest request, DynamoDBDelegate delegate, int permits) {\n            super(request, delegate, SCAN_RETRIES);\n            this.permits = permits;\n        }\n        @Override\n        protected ScanResult call() throws BackendException\n        {\n            return delegate.scan(request, permits);\n        }\n        @Override\n        protected String getTableName()\n        {\n            return request.getTableName();\n        }\n\n    }\n\n    public static final class Query extends ExponentialBackoff<QueryRequest, QueryResult> {\n        private final int permits;\n        public Query(QueryRequest request, DynamoDBDelegate delegate, int permits) {\n            super(request, delegate, QUERY_RETRIES);\n            this.permits = permits;\n        }\n        @Override\n        protected QueryResult call() throws BackendException\n        {\n            return delegate.query(request, permits);\n        }\n        @Override\n        protected String getTableName()\n        {\n            return request.getTableName();\n        }\n\n    }\n\n    public static final class UpdateItem extends ExponentialBackoff<UpdateItemRequest, UpdateItemResult> {\n        public UpdateItem(UpdateItemRequest request, DynamoDBDelegate delegate) {\n            super(request, delegate, UPDATE_ITEM_RETRIES);\n        }\n        @Override\n        protected UpdateItemResult call() throws BackendException\n        {\n            return delegate.updateItem(request);\n        }\n        @Override\n        protected String getTableName()\n        {\n            return request.getTableName();\n        }\n\n    }\n\n    public static final class DeleteItem extends ExponentialBackoff<DeleteItemRequest, DeleteItemResult> {\n        public DeleteItem(DeleteItemRequest request, DynamoDBDelegate delegate) {\n            super(request, delegate, DELETE_ITEM_RETRIES);\n        }\n        @Override\n        protected DeleteItemResult call() throws BackendException\n        {\n            return delegate.deleteItem(request);\n        }\n        @Override\n        protected String getTableName()\n        {\n            return request.getTableName();\n        }\n\n    }\n\n    public static final class GetItem extends ExponentialBackoff<GetItemRequest, GetItemResult> {\n        public GetItem(GetItemRequest request, DynamoDBDelegate delegate) {\n            super(request, delegate, GET_ITEM_RETRIES);\n        }\n        @Override\n        protected GetItemResult call() throws BackendException\n        {\n            return delegate.getItem(request);\n        }\n        @Override\n        protected String getTableName()\n        {\n            return request.getTableName();\n        }\n\n    }\n\n    private long exponentialBackoffTime;\n    private long tries;\n    private final String apiNameRetries;\n    protected final RequestType request;\n    protected ResultType result;\n    protected final DynamoDBDelegate delegate;\n    protected ExponentialBackoff(RequestType requestType, DynamoDBDelegate delegate, String apiNameTries) {\n        this.request = requestType;\n        this.delegate = delegate;\n        this.exponentialBackoffTime = delegate.getRetryMillis();\n        this.result = null;\n        this.tries = 0;\n        this.apiNameRetries = apiNameTries;\n    }\n    protected abstract ResultType call() throws BackendException;\n    protected abstract String getTableName();\n\n    public ResultType runWithBackoff() throws BackendException {\n        boolean interrupted = false;\n        try {\n            do {\n                tries++;\n                try {\n                    result = call();\n                } catch(TemporaryBackendException e) { //retriable\n                    if(tries > delegate.getMaxRetries()) {\n                        throw new TemporaryBackendException(\"Max tries exceeded.\", e);\n                    }\n                    try {\n                        Thread.sleep(exponentialBackoffTime);\n                    } catch(InterruptedException ie) {\n                        interrupted = true;\n                    } finally {\n                        exponentialBackoffTime *= 2;\n                    }\n                    continue;\n                }\n            } while(result == null);\n            return result;\n        } finally {\n            //meter tries\n            delegate.getMeter(delegate.getMeterName(apiNameRetries, getTableName())).mark(tries - 1);\n\n            if(interrupted) {\n                Thread.currentThread().interrupt();\n                throw new BackendRuntimeException(\"exponential backoff was interrupted\");\n            }\n        }\n    }\n}\n","binary":"false","copies":"7","sample_repo_name":"awslabs/dynamodb-titan-storage-backend","sample_ref":"refs/heads/1.0.0","sample_path":"src/main/java/com/amazon/titan/diskstorage/dynamodb/ExponentialBackoff.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"74f3f3222e5681e65a96bb5df5146fa7e6835b36","size":"1304","content":"package org.freeplane.core.io;\n\nimport org.freeplane.core.ui.LengthUnits;\nimport org.freeplane.core.util.Quantity;\nimport org.freeplane.features.map.MapWriter;\n\npublic class BackwardCompatibleQuantityWriter {\n\n\tfinal private ITreeWriter writer;\n\tfinal private boolean makeCompatible;\n\t\n\tstatic public BackwardCompatibleQuantityWriter forWriter(ITreeWriter writer){\n\t\tfinal Object hint = writer.getHint(BackwardCompatibleQuantityWriter.class);\n\t\tif(Boolean.FALSE.equals(hint)){\n\t\t\tfinal boolean makeCompatible = Boolean.TRUE.equals(writer.getHint(MapWriter.WriterHint.FORCE_FORMATTING));\n\t\t\tfinal BackwardCompatibleQuantityWriter quantityWriter = new BackwardCompatibleQuantityWriter(writer, makeCompatible);\n\t\t\twriter.setHint(BackwardCompatibleQuantityWriter.class, quantityWriter);\n\t\t\treturn quantityWriter;\n\t\t}\n\t\treturn (BackwardCompatibleQuantityWriter) hint;\n\t}\n\n\tpublic BackwardCompatibleQuantityWriter(ITreeWriter writer, boolean makeCompatible) {\n\t\tthis.writer = writer;\n\t\tthis.makeCompatible = makeCompatible;\n\t}\n\n\tpublic void writeQuantity(String name, final Quantity<LengthUnits> value) {\n\t\tif(makeCompatible){\n\t\t\twriter.addAttribute(name, value.toBaseUnitsRounded());\n\t\t\twriter.addAttribute(name+\"_QUANTITY\", value.toString());\n\t\t}\n\t\telse\n\t\t\twriter.addAttribute(name, value.toString());\n\t}\n\n}\n","binary":"false","copies":"2","sample_repo_name":"freeplane/freeplane","sample_ref":"refs/heads/1.5.x","sample_path":"freeplane/src/main/java/org/freeplane/core/io/BackwardCompatibleQuantityWriter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9e7757565b72387b007d66f133c22e67cc6b3630","size":"968","content":"/**\n * \n */\npackage org.freeplane.plugin.script.proxy;\n\nimport java.util.AbstractCollection;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Iterator;\n\nimport org.freeplane.features.link.NodeLinkModel;\nimport org.freeplane.features.link.NodeLinks;\nimport org.freeplane.features.map.NodeModel;\nimport org.freeplane.plugin.script.ScriptContext;\n\nclass ConnectorOutListProxy extends AbstractCollection<Proxy.Connector> {\n\tprivate final NodeModel node;\n\tprivate final ScriptContext scriptContext;\n\n\tpublic ConnectorOutListProxy(final NodeProxy nodeProxy) {\n\t\tthis.node = nodeProxy.getDelegate();\n\t\tthis.scriptContext = nodeProxy.getScriptContext();\n\t}\n\n\t@Override\n\tpublic Iterator<Proxy.Connector> iterator() {\n\t\treturn new ConnectorIterator(Collections.unmodifiableList(new ArrayList<NodeLinkModel>(NodeLinks.getLinks(node)))\n\t\t    .iterator(), scriptContext);\n\t}\n\n\t@Override\n\tpublic int size() {\n\t\treturn NodeLinks.getLinks(node).size();\n\t}\n}\n","binary":"false","copies":"4","sample_repo_name":"freeplane/freeplane","sample_ref":"refs/heads/1.5.x","sample_path":"freeplane_plugin_script/src/main/java/org/freeplane/plugin/script/proxy/ConnectorOutListProxy.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a883417eb3ae25d7193d53d29e9eb42cb7159f41","size":"1319","content":"/*\n *  Freeplane - mind map editor\n *  Copyright (C) 2009 Dimitry\n *\n *  This file author is Dimitry\n *\n *  This program is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.freeplane.view.swing.features.time.mindmapmode.nodelist;\n\nimport java.awt.event.ActionEvent;\n\nimport org.freeplane.core.ui.AFreeplaneAction;\n\n/**\n * @author Dimitry Polivaev\n * 01.09.2009\n */\npublic class AllMapsNodeListAction extends AFreeplaneAction {\n\t/**\n\t *\n\t */\n\tprivate static final long serialVersionUID = 1L;\n\tprivate final NodeList nodeList;\n\n\tpublic AllMapsNodeListAction() {\n\t\tsuper(\"AllMapsNodeListAction\");\n\t\tnodeList = new NodeList(true, true);\n\t}\n\n\tpublic void actionPerformed(final ActionEvent e) {\n\t\tnodeList.startup();\n\t}\n}\n","binary":"false","copies":"4","sample_repo_name":"freeplane/freeplane","sample_ref":"refs/heads/1.5.x","sample_path":"freeplane/src/main/java/org/freeplane/view/swing/features/time/mindmapmode/nodelist/AllMapsNodeListAction.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c5e69ba92ac20073fd949fe001f5f563a1a7148a","size":"316","content":"package com.foodcraft.network.message;\n\nimport com.foodcraft.network.AbstractNBTMessage;\n\nimport net.minecraft.nbt.NBTTagCompound;\nimport io.netty.buffer.ByteBuf;\n\npublic class HeatMessagePot extends AbstractNBTMessage {\n\n\tpublic HeatMessagePot() {}\n\t\n\tpublic HeatMessagePot(NBTTagCompound nbt) {\n\t\tsuper(nbt);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"InfinityStudio/FoodCraft","sample_ref":"refs/heads/1.8.0","sample_path":"src/main/java/com/foodcraft/network/message/HeatMessagePot.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"febe247bbda334cd0f72474468d4085514a26a6a","size":"8057","content":"package techreborn.blocks.transformers;\n\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.Iterators;\nimport me.modmuss50.jsonDestroyer.api.ITexturedBlock;\nimport net.minecraft.block.Block;\nimport net.minecraft.block.BlockDynamicLiquid;\nimport net.minecraft.block.BlockStaticLiquid;\nimport net.minecraft.block.material.Material;\nimport net.minecraft.block.properties.PropertyDirection;\nimport net.minecraft.block.state.BlockStateContainer;\nimport net.minecraft.block.state.IBlockState;\nimport net.minecraft.entity.EntityLivingBase;\nimport net.minecraft.inventory.IInventory;\nimport net.minecraft.item.ItemBlock;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.tileentity.TileEntity;\nimport net.minecraft.util.EnumFacing;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.world.IBlockAccess;\nimport net.minecraft.world.World;\nimport net.minecraftforge.fluids.BlockFluidBase;\nimport reborncore.common.BaseTileBlock;\nimport reborncore.common.blocks.IRotationTexture;\nimport techreborn.client.TechRebornCreativeTab;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Random;\n\n/**\n * Created by Rushmead\n */\npublic abstract class BlockTransformer extends BaseTileBlock implements IRotationTexture, ITexturedBlock\n{\n\tpublic static PropertyDirection FACING = PropertyDirection.create(\"facing\", Facings.ALL);\n\tprotected final String prefix = \"techreborn:blocks/machines/energy/\";\n\tpublic String name;\n\tpublic String textureName;\n\n\tpublic BlockTransformer(String name, String textureName)\n\t{\n\t\tsuper(Material.ROCK);\n\t\tsetHardness(2f);\n\t\tsetUnlocalizedName(\"techreborn.\" + name.toLowerCase());\n\t\tsetCreativeTab(TechRebornCreativeTab.instance);\n\t\tthis.setDefaultState(this.blockState.getBaseState().withProperty(FACING, EnumFacing.NORTH));\n\t\tthis.name = name;\n\t\tthis.textureName = textureName + \"_transformer\";\n\t}\n\tprotected BlockStateContainer createBlockState()\n\t{\n\t\tFACING = PropertyDirection.create(\"facing\", Facings.ALL);\n\t\treturn new BlockStateContainer(this, FACING);\n\t}\n\n\t@Override\n\tpublic void onBlockAdded(World worldIn, BlockPos pos, IBlockState state)\n\t{\n\t\tsuper.onBlockAdded(worldIn, pos, state);\n\t\tthis.setDefaultFacing(worldIn, pos, state);\n\t}\n\n\tprivate void setDefaultFacing(World worldIn, BlockPos pos, IBlockState state)\n\t{\n\t\tif (!worldIn.isRemote)\n\t\t{\n\t\t\tIBlockState sate = worldIn.getBlockState(pos.north());\n\t\t\tBlock block = sate.getBlock();\n\t\t\tIBlockState state1 = worldIn.getBlockState(pos.south());\n\t\t\tBlock block1 = state1.getBlock();\n\t\t\tIBlockState state2 = worldIn.getBlockState(pos.west());\n\t\t\tBlock block2 = state2.getBlock();\n\t\t\tIBlockState state3 = worldIn.getBlockState(pos.east());\n\t\t\tBlock block3 = state3.getBlock();\n\t\t\tEnumFacing enumfacing = state.getValue(FACING);\n\n\t\t\tif (enumfacing == EnumFacing.NORTH && block.isFullBlock(state) && !block1.isFullBlock(state1))\n\t\t\t{\n\t\t\t\tenumfacing = EnumFacing.SOUTH;\n\t\t\t} else if (enumfacing == EnumFacing.SOUTH && block1.isFullBlock(state1) && !block.isFullBlock(state))\n\t\t\t{\n\t\t\t\tenumfacing = EnumFacing.NORTH;\n\t\t\t} else if (enumfacing == EnumFacing.WEST && block2.isFullBlock(state2) && !block3.isFullBlock(state2))\n\t\t\t{\n\t\t\t\tenumfacing = EnumFacing.EAST;\n\t\t\t} else if (enumfacing == EnumFacing.EAST && block3.isFullBlock(state3) && !block2.isFullBlock(state2))\n\t\t\t{\n\t\t\t\tenumfacing = EnumFacing.WEST;\n\t\t\t}\n\n\t\t\tworldIn.setBlockState(pos, state.withProperty(FACING, enumfacing), 2);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onBlockPlacedBy(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer,\n\t\t\tItemStack stack)\n\t{\n\t\tsuper.onBlockPlacedBy(worldIn, pos, state, placer, stack);\n\t\tEnumFacing facing = placer.getHorizontalFacing().getOpposite();\n\t\tif (placer.rotationPitch < -50)\n\t\t{\n\t\t\tfacing = EnumFacing.DOWN;\n\t\t} else if (placer.rotationPitch > 50)\n\t\t{\n\t\t\tfacing = EnumFacing.UP;\n\t\t}\n\t\tsetFacing(facing, worldIn, pos);\n\t}\n\n\n\n\tprotected List<ItemStack> dropInventory(IBlockAccess world, BlockPos pos, ItemStack itemToDrop)\n\t{\n\t\tTileEntity tileEntity = world.getTileEntity(pos);\n\n\t\tif (tileEntity == null)\n\t\t{\n\t\t\tSystem.out.print(\"Null\");\n\t\t\treturn null;\n\t\t}\n\t\tif (!(tileEntity instanceof IInventory))\n\t\t{\n\n\t\t\tSystem.out.print(\"Not INstance\");\n\t\t\treturn null;\n\t\t}\n\n\t\tIInventory inventory = (IInventory) tileEntity;\n\n\t\tList<ItemStack> items = new ArrayList<>();\n\n\t\tfor (int i = 0; i < inventory.getSizeInventory(); i++)\n\t\t{\n\t\t\tItemStack itemStack = inventory.getStackInSlot(i);\n\n\t\t\tif (itemStack == null)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (itemStack != null && itemStack.stackSize > 0)\n\t\t\t{\n\t\t\t\tif (itemStack.getItem() instanceof ItemBlock)\n\t\t\t\t{\n\t\t\t\t\tif (((ItemBlock) itemStack.getItem()).block instanceof BlockFluidBase\n\t\t\t\t\t\t\t|| ((ItemBlock) itemStack.getItem()).block instanceof BlockStaticLiquid\n\t\t\t\t\t\t\t|| ((ItemBlock) itemStack.getItem()).block instanceof BlockDynamicLiquid)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\titems.add(itemStack.copy());\n\t\t}\n\t\titems.add(itemToDrop.copy());\n\t\treturn items;\n\n\t}\n\n\n\t@Override\n\tpublic int getMetaFromState(IBlockState state)\n\t{\n\t\tint facingInt = getSideFromEnum(state.getValue(FACING));\n\t\treturn facingInt;\n\t}\n\n\t@Override\n\tpublic IBlockState getStateFromMeta(int meta)\n\t{\n\t\tboolean active = false;\n\t\tEnumFacing facing = getSideFromint(meta);\n\t\treturn this.getDefaultState().withProperty(FACING, facing);\n\t}\n\n\tpublic void setFacing(EnumFacing facing, World world, BlockPos pos)\n\t{\n\t\tworld.setBlockState(pos, world.getBlockState(pos).withProperty(FACING, facing));\n\t}\n\n\tpublic EnumFacing getSideFromint(int i)\n\t{\n\t\tif (i == 0)\n\t\t{\n\t\t\treturn EnumFacing.NORTH;\n\t\t} else if (i == 1)\n\t\t{\n\t\t\treturn EnumFacing.SOUTH;\n\t\t} else if (i == 2)\n\t\t{\n\t\t\treturn EnumFacing.EAST;\n\t\t} else if (i == 3)\n\t\t{\n\t\t\treturn EnumFacing.WEST;\n\t\t} else if (i == 4)\n\t\t{\n\t\t\treturn EnumFacing.UP;\n\t\t} else if (i == 5)\n\t\t{\n\t\t\treturn EnumFacing.DOWN;\n\t\t}\n\t\treturn EnumFacing.NORTH;\n\t}\n\n\tpublic int getSideFromEnum(EnumFacing facing)\n\t{\n\t\tif (facing == EnumFacing.NORTH)\n\t\t{\n\t\t\treturn 0;\n\t\t} else if (facing == EnumFacing.SOUTH)\n\t\t{\n\t\t\treturn 1;\n\t\t} else if (facing == EnumFacing.EAST)\n\t\t{\n\t\t\treturn 2;\n\t\t} else if (facing == EnumFacing.WEST)\n\t\t{\n\t\t\treturn 3;\n\t\t} else if (facing == EnumFacing.UP)\n\t\t{\n\t\t\treturn 4;\n\t\t} else if (facing == EnumFacing.DOWN)\n\t\t{\n\t\t\treturn 5;\n\t\t}\n\t\treturn 0;\n\t}\n\n\n\t@Override\n\tpublic String getFrontOff()\n\t{\n\t\treturn prefix  + textureName.toLowerCase() +  \"_front\";\n\t}\n\n\t@Override\n\tpublic String getFrontOn()\n\t{\n\t\treturn prefix  + textureName.toLowerCase() +  \"_front\";\n\t}\n\n\t@Override\n\tpublic String getSide()\n\t{\n\t\treturn prefix  + textureName.toLowerCase() +  \"_side\";\n\t}\n\n\t@Override\n\tpublic String getTop()\n\t{\n\t\treturn prefix + textureName.toLowerCase() +  \"_side\";\n\t}\n\n\t@Override\n\tpublic String getBottom()\n\t{\n\t\treturn prefix + textureName.toLowerCase() + \"_side\";\n\t}\n\n\t@Override\n\tpublic String getTextureNameFromState(IBlockState blockState, EnumFacing facing)\n\t{\n\t\tif (this instanceof IRotationTexture)\n\t\t{\n\t\t\tIRotationTexture rotationTexture = this;\n\t\t\tif (getFacing(blockState) == facing)\n\t\t\t{\n\t\t\t\treturn rotationTexture.getFrontOff();\n\t\t\t}\n\t\t\tif (facing == EnumFacing.UP)\n\t\t\t{\n\t\t\t\treturn rotationTexture.getTop();\n\t\t\t}\n\t\t\tif (facing == EnumFacing.DOWN)\n\t\t\t{\n\t\t\t\treturn rotationTexture.getBottom();\n\t\t\t}\n\t\t\treturn rotationTexture.getSide();\n\t\t}\n\t\treturn \"techreborn:blocks/machine/machine_side\";\n\t}\n\n\tpublic EnumFacing getFacing(IBlockState state)\n\t{\n\t\treturn state.getValue(FACING);\n\t}\n\n\t@Override\n\tpublic int amountOfStates()\n\t{\n\t\treturn 6;\n\t}\n\n\n\n\tpublic enum Facings implements Predicate<EnumFacing>,Iterable<EnumFacing>\n\t{\n\t\tALL;\n\n\t\tpublic EnumFacing[] facings()\n\t\t{\n\t\t\treturn new EnumFacing[] { EnumFacing.NORTH, EnumFacing.EAST, EnumFacing.SOUTH, EnumFacing.WEST,\n\t\t\t\t\tEnumFacing.UP, EnumFacing.DOWN };\n\t\t}\n\n\t\tpublic EnumFacing random(Random rand)\n\t\t{\n\t\t\tEnumFacing[] aenumfacing = this.facings();\n\t\t\treturn aenumfacing[rand.nextInt(aenumfacing.length)];\n\t\t}\n\n\t\tpublic boolean apply(EnumFacing p_apply_1_)\n\t\t{\n\t\t\treturn p_apply_1_ != null;\n\t\t}\n\n\t\tpublic Iterator<EnumFacing> iterator()\n\t\t{\n\t\t\treturn Iterators.forArray(this.facings());\n\t\t}\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"TechReborn/TechReborn","sample_ref":"refs/heads/1.9.4","sample_path":"src/main/java/techreborn/blocks/transformers/BlockTransformer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0d58371a8602314b68d53c8a12897619e8ef051b","size":"3473","content":"package com.jaquadro.minecraft.storagedrawers.item;\n\nimport com.google.common.base.Function;\nimport com.jaquadro.minecraft.storagedrawers.api.storage.EnumBasicDrawer;\nimport com.jaquadro.minecraft.storagedrawers.block.tile.TileEntityDrawers;\nimport net.minecraft.block.Block;\nimport net.minecraft.block.state.IBlockState;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.nbt.NBTTagCompound;\nimport net.minecraft.util.EnumFacing;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.world.World;\n\nimport javax.annotation.Nullable;\n\npublic class ItemCustomDrawers extends ItemDrawers\n{\n    private Function nameFunction;\n\n    public ItemCustomDrawers (Block block) {\n        this(block, new Function() {\n            @Nullable\n            @Override\n            public Object apply (Object input) {\n                ItemStack stack = (ItemStack)input;\n                return EnumBasicDrawer.byMetadata(stack.getMetadata()).getUnlocalizedName();\n            }\n        });\n    }\n\n    protected ItemCustomDrawers (Block block, Function function) {\n        super(block);\n        setHasSubtypes(true);\n        nameFunction = function;\n    }\n\n    @Override\n    public String getUnlocalizedName (ItemStack stack) {\n        return super.getUnlocalizedName() + \".\" + nameFunction.apply(stack);\n    }\n\n    @Override\n    public boolean placeBlockAt (ItemStack stack, EntityPlayer player, World world, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ, IBlockState newState) {\n        if (!super.placeBlockAt(stack, player, world, pos, side, hitX, hitY, hitZ, newState))\n            return false;\n\n        TileEntityDrawers tile = (TileEntityDrawers) world.getTileEntity(pos);\n        if (tile != null && stack.hasTagCompound() && !stack.getTagCompound().hasKey(\"tile\")) {\n            if (stack.getTagCompound().hasKey(\"MatS\"))\n                tile.setMaterialSide(ItemStack.loadItemStackFromNBT(stack.getTagCompound().getCompoundTag(\"MatS\")));\n            if (stack.getTagCompound().hasKey(\"MatT\"))\n                tile.setMaterialTrim(ItemStack.loadItemStackFromNBT(stack.getTagCompound().getCompoundTag(\"MatT\")));\n            if (stack.getTagCompound().hasKey(\"MatF\"))\n                tile.setMaterialFront(ItemStack.loadItemStackFromNBT(stack.getTagCompound().getCompoundTag(\"MatF\")));\n        }\n\n        return true;\n    }\n\n    public static ItemStack makeItemStack (IBlockState blockState, int count, ItemStack matSide, ItemStack matTrim, ItemStack matFront) {\n        Block block = blockState.getBlock();\n        Item item = Item.getItemFromBlock(block);\n        if (!(item instanceof ItemCustomDrawers))\n            return null;\n\n        NBTTagCompound tag = new NBTTagCompound();\n\n        if (matSide != null)\n            tag.setTag(\"MatS\", getMaterialTag(matSide));\n\n        if (matTrim != null)\n            tag.setTag(\"MatT\", getMaterialTag(matTrim));\n\n        if (matFront != null)\n            tag.setTag(\"MatF\", getMaterialTag(matFront));\n\n        ItemStack stack = new ItemStack(item, count, block.getMetaFromState(blockState));\n        if (!tag.hasNoTags())\n            stack.setTagCompound(tag);\n\n        return stack;\n    }\n\n    private static NBTTagCompound getMaterialTag (ItemStack mat) {\n        mat = mat.copy();\n        mat.stackSize = 1;\n\n        NBTTagCompound itag = new NBTTagCompound();\n        mat.writeToNBT(itag);\n\n        return itag;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"jaquadro/StorageDrawers","sample_ref":"refs/heads/1.9.4","sample_path":"src/com/jaquadro/minecraft/storagedrawers/item/ItemCustomDrawers.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4efeaffdc205d93bdd1c883a31a46323208fc05a","size":"2177","content":"package com.salesmanager.core.business.content.model;\r\n\r\nimport java.io.Serializable;\r\n\r\nimport javax.persistence.Column;\r\nimport javax.persistence.Entity;\r\nimport javax.persistence.JoinColumn;\r\nimport javax.persistence.ManyToOne;\r\nimport javax.persistence.Table;\r\nimport javax.persistence.UniqueConstraint;\r\n\r\nimport com.salesmanager.core.business.common.model.Description;\r\nimport com.salesmanager.core.business.reference.language.model.Language;\r\n\r\n@Entity\r\n@Table(name=\"CONTENT_DESCRIPTION\", schema=\"SALESMANAGER\",uniqueConstraints={\r\n\t\t@UniqueConstraint(columnNames={\r\n\t\t\t\"CONTENT_ID\",\r\n\t\t\t\"LANGUAGE_ID\"\r\n\t\t})\r\n\t}\r\n)\r\npublic class ContentDescription extends Description implements Serializable {\r\n\t\r\n\t\r\n\t/**\r\n\t * \r\n\t */\r\n\tprivate static final long serialVersionUID = -1252756716545768599L;\r\n\r\n\t@ManyToOne(targetEntity = Content.class)\r\n\t@JoinColumn(name = \"CONTENT_ID\", nullable = false)\r\n\tprivate Content content;\r\n\r\n\t@Column(name=\"SEF_URL\", length=120)\r\n\tprivate String seUrl;\r\n\r\n\t\r\n\t@Column(name=\"META_KEYWORDS\")\r\n\tprivate String metatagKeywords;\r\n\t\r\n\t@Column(name=\"META_TITLE\")\r\n\tprivate String metatagTitle;\r\n\t\r\n\tpublic String getMetatagTitle() {\r\n\t\treturn metatagTitle;\r\n\t}\r\n\r\n\tpublic void setMetatagTitle(String metatagTitle) {\r\n\t\tthis.metatagTitle = metatagTitle;\r\n\t}\r\n\r\n\t@Column(name=\"META_DESCRIPTION\")\r\n\tprivate String metatagDescription;\r\n\t\r\n\tpublic ContentDescription() {\r\n\t}\r\n\t\r\n\tpublic ContentDescription(String name, Language language) {\r\n\t\tthis.setName(name);\r\n\t\tthis.setLanguage(language);\r\n\t\tsuper.setId(0L);\r\n\t}\r\n\r\n\tpublic Content getContent() {\r\n\t\treturn content;\r\n\t}\r\n\r\n\tpublic void setContent(Content content) {\r\n\t\tthis.content = content;\r\n\t}\r\n\r\n\tpublic String getSeUrl() {\r\n\t\treturn seUrl;\r\n\t}\r\n\r\n\tpublic void setSeUrl(String seUrl) {\r\n\t\tthis.seUrl = seUrl;\r\n\t}\r\n\r\n\r\n\tpublic String getMetatagKeywords() {\r\n\t\treturn metatagKeywords;\r\n\t}\r\n\r\n\tpublic void setMetatagKeywords(String metatagKeywords) {\r\n\t\tthis.metatagKeywords = metatagKeywords;\r\n\t}\r\n\r\n\tpublic String getMetatagDescription() {\r\n\t\treturn metatagDescription;\r\n\t}\r\n\r\n\tpublic void setMetatagDescription(String metatagDescription) {\r\n\t\tthis.metatagDescription = metatagDescription;\r\n\t}\r\n\r\n}\r\n","binary":"false","copies":"23","sample_repo_name":"shopizer-ecommerce/shopizer","sample_ref":"refs/heads/2.0.3","sample_path":"sm-core-model/src/main/java/com/salesmanager/core/business/content/model/ContentDescription.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"ebda9ada279bc38e2b5d0a022d8daa7660fe2988","size":"3831","content":"/*\n * JBoss, Home of Professional Open Source\n * Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual\n * contributors by the @authors tag. See the copyright.txt in the\n * distribution for a full listing of individual contributors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jboss.as.quickstarts.kitchensink.spring.controlleradvice.test;\n\nimport java.util.Date;\nimport java.util.List;\n\nimport org.jboss.as.quickstarts.kitchensink.spring.controlleradvice.data.MemberDao;\nimport org.jboss.as.quickstarts.kitchensink.spring.controlleradvice.model.Member;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport static org.junit.Assert.*;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.transaction.TransactionConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations = {\"classpath:test-context.xml\",\n                                   \"classpath:/META-INF/spring/applicationContext.xml\"})\n@Transactional\n@TransactionConfiguration(defaultRollback = true)\npublic class MemberDaoTest {\n    @Autowired\n    private MemberDao memberDao;\n\n    @Test\n    public void testFindById() {\n        Member member = memberDao.findById(0l);\n\n        assertEquals(\"John Smith\", member.getName());\n        assertEquals(\"john.smith@mailinator.com\", member.getEmail());\n        assertEquals(\"2125551212\", member.getPhoneNumber());\n        return;\n    }\n\n    @Test\n    public void testFindByEmail() {\n        Member member = memberDao.findByEmail(\"john.smith@mailinator.com\");\n\n        assertEquals(\"John Smith\", member.getName());\n        assertEquals(\"john.smith@mailinator.com\", member.getEmail());\n        assertEquals(\"2125551212\", member.getPhoneNumber());\n        return;\n    }\n\n    @Test\n    public void testRegister() {\n        Member member = new Member();\n        member.setEmail(\"jane.doe@mailinator.com\");\n        member.setName(\"Jane Doe\");\n        member.setPhoneNumber(\"2125552121\");\n        member.setDate(new Date());\n\n        memberDao.register(member);\n        Long id = member.getId();\n        assertNotNull(id);\n\n        assertEquals(2, memberDao.findAllOrderedByName().size());\n        Member newMember = memberDao.findById(id);\n\n        assertEquals(\"Jane Doe\", newMember.getName());\n        assertEquals(\"jane.doe@mailinator.com\", newMember.getEmail());\n        assertEquals(\"2125552121\", newMember.getPhoneNumber());\n        return;\n    }\n\n    @Test\n    public void testFindAllOrderedByName() {\n        Member member = new Member();\n        member.setEmail(\"jane.doe@mailinator.com\");\n        member.setName(\"Jane Doe\");\n        member.setPhoneNumber(\"2125552121\");\n        member.setDate(new Date());\n        memberDao.register(member);\n\n        List<Member> members = memberDao.findAllOrderedByName();\n        assertEquals(2, members.size());\n        Member newMember = members.get(0);\n\n        assertEquals(\"Jane Doe\", newMember.getName());\n        assertEquals(\"jane.doe@mailinator.com\", newMember.getEmail());\n        assertEquals(\"2125552121\", newMember.getPhoneNumber());\n        return;\n    }\n}\n","binary":"false","copies":"3","sample_repo_name":"jboss-developer/jboss-wfk-quickstarts","sample_ref":"refs/heads/2.7.x","sample_path":"spring-kitchensink-controlleradvice/src/test/java/org/jboss/as/quickstarts/kitchensink/spring/controlleradvice/test/MemberDaoTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4408e2265a631f7eaed00765127b8dfa53c708ba","size":"1695","content":"/*\r\n * DBeaver - Universal Database Manager\r\n * Copyright (C) 2010-2016 Serge Rieder (serge@jkiss.org)\r\n *\r\n * This program is free software; you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License (version 2)\r\n * as published by the Free Software Foundation.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License along\r\n * with this program; if not, write to the Free Software Foundation, Inc.,\r\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\r\n */\r\n\r\npackage org.jkiss.dbeaver.ext.oracle.editors;\r\n\r\nimport org.jkiss.dbeaver.ext.oracle.model.OracleConstants;\r\nimport org.jkiss.dbeaver.ext.oracle.model.source.OracleSourceObject;\r\nimport org.jkiss.dbeaver.model.runtime.DBRProgressMonitor;\r\nimport org.jkiss.dbeaver.ui.editors.sql.SQLSourceViewer;\r\n\r\n/**\r\n * Oracle source declaration editor\r\n */\r\npublic class OracleSourceDeclarationEditor extends SQLSourceViewer<OracleSourceObject> {\r\n    @Override\r\n    protected String getCompileCommandId()\r\n    {\r\n        return OracleConstants.CMD_COMPILE;\r\n    }\r\n\r\n    @Override\r\n    protected void setSourceText(DBRProgressMonitor monitor, String sourceText) {\r\n        getEditorInput().getPropertySource().setPropertyValue(\r\n            monitor,\r\n            OracleConstants.PROP_OBJECT_DEFINITION,\r\n            sourceText);\r\n    }\r\n\r\n    @Override\r\n    protected boolean isReadOnly() {\r\n        return false;\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"serge-rider/dbeaver","sample_ref":"refs/heads/devel","sample_path":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/editors/OracleSourceDeclarationEditor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7348859b518c8c6bcf4c057eb3f767f848fcde37","size":"1343","content":"/*\r\n * DBeaver - Universal Database Manager\r\n * Copyright (C) 2010-2016 Serge Rieder (serge@jkiss.org)\r\n *\r\n * This program is free software; you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License (version 2)\r\n * as published by the Free Software Foundation.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License along\r\n * with this program; if not, write to the Free Software Foundation, Inc.,\r\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\r\n */\r\npackage org.jkiss.dbeaver.model.runtime;\r\n\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\n/**\r\n * MonitorRunnableContext\r\n */\r\npublic class MonitorRunnableContext implements DBRRunnableContext {\r\n    private final DBRProgressMonitor monitor;\r\n\r\n    public MonitorRunnableContext(DBRProgressMonitor monitor) {\r\n        this.monitor = monitor;\r\n    }\r\n\r\n    @Override\r\n    public void run(boolean fork, boolean cancelable, DBRRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {\r\n        runnable.run(monitor);\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"serge-rider/dbeaver","sample_ref":"refs/heads/devel","sample_path":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/runtime/MonitorRunnableContext.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b759ed179a2a974a8072a84302691fbf696a5c19","size":"5553","content":"/*\n * -----------------------------------------------------------------------\\\n * PerfCake\n * \u00a0\n * Copyright (C) 2010 - 2016 the original author or authors.\n * \u00a0\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * -----------------------------------------------------------------------/\n */\npackage org.perfcake.reporting.reporters.accumulators;\n\nimport org.perfcake.util.StringUtil;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.stream.Collectors;\n\n/**\n * Histogram to count number of representatives for individual ranges.\n *\n * @author <a href=\"mailto:pavel.macik@gmail.com\">Pavel Mac\u00edk</a>\n * @author <a href=\"mailto:marvenec@gmail.com\">Martin Ve\u010de\u0159a</a>\n */\npublic class Histogram {\n\n   /**\n    * Actual counts of occurrences for given ranges,\n    */\n   private Map<Range, AtomicLong> histogram = new LinkedHashMap<>();\n\n   /**\n    * Ranges of the histogram.\n    */\n   private List<Range> ranges = new LinkedList<>();\n\n   /**\n    * Creates the histogram based on the comma separated string of range split points.\n    *\n    * @param rangeDividers\n    *       The comma separated string of range split points.\n    */\n   public Histogram(String rangeDividers) {\n      this(Arrays.asList(rangeDividers.split(\",\")).stream().map(StringUtil::trim).map(Double::valueOf).sorted().collect(Collectors.toList()));\n   }\n\n   /**\n    * Creates a new histogram that is composed of the ranges divided at the given points.\n    *\n    * @param rangeDividers\n    *       Points specifying where the histogram should be split to multiple ranges.\n    */\n   public Histogram(final List<Double> rangeDividers) {\n      Collections.sort(rangeDividers);\n      final int count = rangeDividers.size();\n      double min, max;\n      for (int i = 0; i < count; i++) {\n         min = rangeDividers.get(i);\n\n         if (i == 0) {\n            histogram.put(new Range(Double.NEGATIVE_INFINITY, min), new AtomicLong(0L));\n         }\n\n         if (i < count - 1) {\n            max = rangeDividers.get(i + 1);\n         } else {\n            max = Double.POSITIVE_INFINITY;\n         }\n\n         if (min < max) {\n            histogram.put(new Range(min, max), new AtomicLong(0L));\n         }\n      }\n\n      ranges = new LinkedList<>(histogram.keySet());\n      Collections.sort(ranges);\n   }\n\n   /**\n    * Adds a new value to be counted in the histogram.\n    *\n    * @param value\n    *       The new value to be added and counted.\n    */\n   public void add(final double value) {\n      for (Range range : ranges) {\n         if (range.contains(value)) {\n            histogram.get(range).incrementAndGet();\n            break;\n         }\n      }\n   }\n\n   /**\n    * Adds a new value to be counted in the histogram.\n    *\n    * @param value\n    *       The new value to be added and counted.\n    */\n   public void add(final int value) {\n      this.add((double) value);\n   }\n\n   /**\n    * Gets the actual counts for individual ranges of the histogram.\n    *\n    * @return The actual counts for individual ranges of the histogram.\n    */\n   @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = \"UC_USELESS_OBJECT\", justification = \"We copied the histogram hash map to get a frozen state.\")\n   public Map<Range, Long> getHistogram() {\n      Map<Range, Long> result = new LinkedHashMap<>();\n      Map<Range, AtomicLong> snapshot = new LinkedHashMap<>(histogram);\n\n      snapshot.forEach((range, value) -> result.put(range, value.get()));\n\n      return result;\n   }\n\n   /**\n    * Gets the actual counts for individual ranges of the histogram.\n    *\n    * @return The actual counts for individual ranges of the histogram.\n    */\n   @edu.umd.cs.findbugs.annotations.SuppressWarnings(value = \"UC_USELESS_OBJECT\", justification = \"We copied the histogram hash map to get a frozen state.\")\n   public Map<Range, Double> getHistogramInPercent() {\n      Map<Range, Double> result = new LinkedHashMap<>();\n      Map<Range, AtomicLong> snapshot = new LinkedHashMap<>(histogram);\n      final long count = getCount(snapshot);\n\n      if (count == 0) {\n         snapshot.forEach((range, value) -> result.put(range, 0d));\n      } else {\n         snapshot.forEach((range, value) -> result.put(range, ((double) value.get()) / count * 100.0d));\n      }\n\n      return result;\n   }\n\n   /**\n    * Gets the total number of values counted in the histogram.\n    *\n    * @return The total number of values counted in the histogram.\n    */\n   public Long getCount() {\n      return getCount(new LinkedHashMap<>(histogram));\n   }\n\n   /**\n    * Gets the sum of all map entries for the given map snapshot.\n    *\n    * @param snapshot\n    *       The map snapshot to be counted.\n    * @return The sum of all map entries.\n    */\n   private static long getCount(Map<Range, AtomicLong> snapshot) {\n      long count = 0;\n      for (AtomicLong l : snapshot.values()) {\n         count = count + l.get();\n      }\n\n      return count;\n   }\n}\n","binary":"false","copies":"1","sample_repo_name":"PerfCake/PerfCake","sample_ref":"refs/heads/devel","sample_path":"perfcake/src/main/java/org/perfcake/reporting/reporters/accumulators/Histogram.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"978a5a29b3303e0184ebf3a359c7344f26a04f0a","size":"735","content":"package org.lantern.pubsub;\n\n/**\n * A Message\n */\npublic class Message {\n    private byte type;\n    private byte[] topic;\n    private byte[] body;\n\n    public Message(byte type, byte[] topic, byte[] body) {\n        super();\n        this.type = type;\n        this.topic = topic;\n        this.body = body;\n    }\n\n    public Message() {\n    }\n\n    public byte getType() {\n        return type;\n    }\n\n    public void setType(byte type) {\n        this.type = type;\n    }\n\n    public byte[] getTopic() {\n        return topic;\n    }\n\n    public void setTopic(byte[] topic) {\n        this.topic = topic;\n    }\n\n    public byte[] getBody() {\n        return body;\n    }\n\n    public void setBody(byte[] body) {\n        this.body = body;\n    }\n\n}\n","binary":"false","copies":"2","sample_repo_name":"getlantern/lantern","sample_ref":"refs/heads/devel","sample_path":"pubsub-java/src/main/java/org/lantern/pubsub/Message.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"eb3ec28db2ce42647f1c11cdac16d6c7a1c6a740","size":"8241","content":"/*\n * -----------------------------------------------------------------------\\\n * SilverWare\n * \u00a0\n * Copyright (C) 2010 - 2013 the original author or authors.\n * \u00a0\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * -----------------------------------------------------------------------/\n */\npackage io.silverware.microservices;\n\nimport io.silverware.microservices.silver.HttpInvokerSilverService;\nimport io.silverware.microservices.silver.cluster.ServiceHandle;\nimport io.silverware.microservices.util.Utils;\n\nimport com.cedarsoftware.util.io.JsonReader;\nimport com.cedarsoftware.util.io.JsonWriter;\n\nimport java.lang.annotation.Annotation;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * Immutable meta-data of a discovered Microservice implementation.\n *\n * @author <a href=\"mailto:marvenec@gmail.com\">Martin Ve\u010de\u0159a</a>\n */\npublic final class MicroserviceMetaData {\n\n   /**\n    * Name of the Microservice.\n    */\n   private final String name;\n\n   /**\n    * Actual type of the Microservice.\n    */\n   private final Class type;\n\n   /**\n    * Qualifiers of the Microservice.\n    */\n   private final Set<Annotation> qualifiers;\n\n   /**\n    * Annotations of the Microservice.\n    */\n   private final Set<Annotation> annotations;\n\n   /**\n    * Microservice specification version.\n    */\n   private final String specVersion;\n\n   /**\n    * Microservice implementation version.\n    */\n   private final String implVersion;\n\n   /**\n    * Create a representation of a discovered Microservice.\n    *\n    * @param name\n    *        The name of the discovered Microservice.\n    * @param type\n    *        The type of the discovered Microservice.\n    * @param qualifiers\n    *        The qualifiers of the discovered Microservice.\n    * @param annotations\n    *        The annotations of the discovered Microservice.\n    */\n   public MicroserviceMetaData(final String name, final Class type, final Set<Annotation> qualifiers, final Set<Annotation> annotations) {\n      this.name = name;\n      this.type = type;\n      this.qualifiers = qualifiers;\n      this.annotations = annotations;\n      this.specVersion = Utils.getClassSpecVersion(type);\n      this.implVersion = Utils.getClassImplVersion(type);\n\n      if (name == null || type == null) {\n         throw new IllegalStateException(\"Name and type fields cannot be null.\");\n      }\n   }\n\n   /**\n    * Create a representation of a discovered Microservice.\n    *\n    * @param name\n    *        The name of the discovered Microservice.\n    * @param type\n    *        The type of the discovered Microservice.\n    * @param qualifiers\n    *        The qualifiers of the discovered Microservice.\n    */\n   public MicroserviceMetaData(final String name, final Class type, final Set<Annotation> qualifiers) {\n      this.name = name;\n      this.type = type;\n      this.qualifiers = qualifiers;\n      this.annotations = new HashSet<>();\n      this.specVersion = Utils.getClassSpecVersion(type);\n      this.implVersion = Utils.getClassImplVersion(type);\n\n      if (name == null || type == null) {\n         throw new IllegalStateException(\"Name and type fields cannot be null.\");\n      }\n   }\n\n   /**\n    * Create a representation of a discovered Microservice.\n    *\n    * @param name\n    *        The name of the discovered Microservice.\n    * @param type\n    *        The type of the discovered Microservice.\n    * @param qualifiers\n    *        The qualifiers of the discovered Microservice.\n    * @param annotations\n    *        The annotations of the discovered Microservice.\n    * @param specVersion\n    *        The specification version we are looking for.\n    * @param implVersion\n    *        The implementation version we are looking for.\n    */\n   public MicroserviceMetaData(final String name, final Class type, final Set<Annotation> qualifiers, final Set<Annotation> annotations, final String specVersion, final String implVersion) {\n      this.name = name;\n      this.type = type;\n      this.qualifiers = qualifiers;\n      this.annotations = annotations;\n      this.specVersion = specVersion;\n      this.implVersion = implVersion;\n\n      if (name == null || type == null) {\n         throw new IllegalStateException(\"Name and type fields cannot be null.\");\n      }\n   }\n\n   /**\n    * Gets the name of the discovered Microservice.\n    *\n    * @return The name of the discovered Microservice.\n    */\n   public String getName() {\n      return name;\n   }\n\n   /**\n    * Gets the type of the discovered Microservice.\n    *\n    * @return The type of the discovered Microservice.\n    */\n   public Class getType() {\n      return type;\n   }\n\n   /**\n    * Gets the qualifiers of the discovered Microservice.\n    *\n    * @return The qualifiers of the discovered Microservice.\n    */\n   public Set<Annotation> getQualifiers() {\n      return qualifiers;\n   }\n\n   /**\n    * Gets the annotations of the discovered Microservice.\n    *\n    * @return The annotations of the discovered Microservice.\n    */\n   public Set<Annotation> getAnnotations() {\n      return annotations;\n   }\n\n   /**\n    * Gets the Microservice specification version.\n    *\n    * @return The Microservice specification version.\n    */\n   public String getSpecVersion() {\n      return specVersion;\n   }\n\n   /**\n    * Gets the Microservice implementation version.\n    *\n    * @return The Microservice implementation version.\n    */\n   public String getImplVersion() {\n      return implVersion;\n   }\n\n   @Override\n   public boolean equals(Object o) {\n      if (this == o) {\n         return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n         return false;\n      }\n\n      MicroserviceMetaData that = (MicroserviceMetaData) o;\n\n      if (!name.equals(that.name)) {\n         return false;\n      }\n      if (!type.equals(that.type)) {\n         return false;\n      }\n      if (qualifiers != null ? !qualifiers.equals(that.qualifiers) : that.qualifiers != null) {\n         return false;\n      }\n      if (annotations != null ? !annotations.equals(that.annotations) : that.annotations != null) {\n         return false;\n      }\n      return !(specVersion != null ? !specVersion.equals(that.specVersion) : that.specVersion != null);\n\n   }\n\n   @Override\n   public int hashCode() {\n      int result = name.hashCode();\n      result = 31 * result + type.hashCode();\n      result = 31 * result + (qualifiers != null ? qualifiers.hashCode() : 0);\n      result = 31 * result + (annotations != null ? annotations.hashCode() : 0);\n      return result;\n   }\n\n   @Override\n   public String toString() {\n      return \"microservice \" + name + \" of type \" + type.getCanonicalName() + \" with qualifiers \" + Arrays.toString(qualifiers.toArray())\n            + \" and with annotations \" + Arrays.toString(annotations.toArray()) + \" (version: spec. \" + specVersion + \", impl. \" + implVersion + \")\";\n   }\n\n   @SuppressWarnings({\"unchecked\", \"checkstyle:JavadocMethod\"})\n   public List<ServiceHandle> query(final Context context, final String host) throws Exception {\n      String urlBase = \"http://\" + host + \"/\" + context.getProperties().get(HttpInvokerSilverService.INVOKER_URL) + \"/query\";\n\n      HttpURLConnection con = (HttpURLConnection) new URL(urlBase).openConnection();\n      con.setRequestMethod(\"POST\");\n      con.setDoInput(true);\n      con.setDoOutput(true);\n      con.connect();\n\n      JsonWriter jsonWriter = new JsonWriter(con.getOutputStream());\n      jsonWriter.write(this);\n      JsonReader jsonReader = new JsonReader(con.getInputStream());\n      List<ServiceHandle> response = (List<ServiceHandle>) jsonReader.readObject();\n\n      con.disconnect();\n\n      return response;\n   }\n}\n","binary":"false","copies":"3","sample_repo_name":"SilverThings/SilverWare","sample_ref":"refs/heads/devel","sample_path":"microservices/src/main/java/io/silverware/microservices/MicroserviceMetaData.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1f0b3d924c4ab4be1b5cf0b0d476d7e35b08b013","size":"2780","content":"/*\n * Copyright 2000-2014 Vaadin Ltd.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage com.vaadin.tests.server.component.table;\n\nimport static org.junit.Assert.assertTrue;\n\nimport com.vaadin.tests.design.DeclarativeTestBase;\nimport com.vaadin.ui.Table;\n\npublic abstract class TableDeclarativeTestBase extends\n        DeclarativeTestBase<Table> {\n\n    @Override\n    public Table testRead(String design, Table expected) {\n        Table read = super.testRead(design, expected);\n        compareColumns(read, expected);\n        compareBody(read, expected);\n        return read;\n    }\n\n    protected Table getTable() {\n        return new Table();\n    }\n\n    protected String getTag() {\n        return \"vaadin-table\";\n    }\n\n    protected void compareBody(Table read, Table expected) {\n        assertEquals(\"number of items\", expected.getItemIds().size(), read\n                .getItemIds().size());\n        for (Object rowId : expected.getItemIds()) {\n            assertTrue(read.containsId(rowId));\n            for (Object propertyId : read.getVisibleColumns()) {\n                Object expectedItem = expected.getContainerProperty(rowId,\n                        propertyId);\n                Object readItem = read.getContainerProperty(rowId, propertyId);\n                assertEquals(\"property '\" + propertyId + \"'\", expectedItem,\n                        readItem);\n            }\n        }\n    }\n\n    protected void compareColumns(Table read, Table expected) {\n        for (Object pid : expected.getVisibleColumns()) {\n            String col = \"column '\" + pid + \"'\";\n            assertEquals(col + \" width\", expected.getColumnWidth(pid),\n                    read.getColumnWidth(pid));\n            assertEquals(col + \" expand ratio\",\n                    expected.getColumnExpandRatio(pid),\n                    read.getColumnExpandRatio(pid));\n            assertEquals(col + \" collapsible\",\n                    expected.isColumnCollapsible(pid),\n                    read.isColumnCollapsible(pid));\n            assertEquals(col + \" collapsed\", expected.isColumnCollapsed(pid),\n                    read.isColumnCollapsed(pid));\n            assertEquals(col + \" footer\", expected.getColumnFooter(pid),\n                    read.getColumnFooter(pid));\n        }\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"jdahlstrom/vaadin.react","sample_ref":"refs/heads/react","sample_path":"server/src/test/java/com/vaadin/tests/server/component/table/TableDeclarativeTestBase.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"150d0e070eeec31c7af806ff840a49e4622ec337","size":"1511","content":"/*\n * Copyright 2000-2013 Vaadin Ltd.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage com.vaadin.tests.tooltip;\n\nimport static org.hamcrest.Matchers.lessThan;\nimport static org.junit.Assert.assertThat;\n\nimport org.junit.Test;\nimport org.openqa.selenium.WebElement;\n\nimport com.vaadin.testbench.By;\nimport com.vaadin.tests.tb3.TooltipTest;\n\npublic class TooltipWidthUpdatingTest extends TooltipTest {\n\n    @Test\n    public void testTooltipWidthUpdating() {\n        openTestURL();\n\n        WebElement btnLongTooltip = vaadinElementById(\"longTooltip\");\n        WebElement btnShortTooltip = vaadinElementById(\"shortTooltip\");\n\n        moveMouseToTopLeft(btnLongTooltip);\n        testBenchElement(btnLongTooltip).showTooltip();\n\n        moveMouseToTopLeft(btnShortTooltip);\n        testBenchElement(btnShortTooltip).showTooltip();\n\n        assertThat(getDriver().findElement(By.className(\"popupContent\"))\n                .getSize().getWidth(), lessThan(TooltipWidthUpdating.MAX_WIDTH));\n    }\n\n}","binary":"false","copies":"23","sample_repo_name":"jdahlstrom/vaadin.react","sample_ref":"refs/heads/react","sample_path":"uitest/src/test/java/com/vaadin/tests/tooltip/TooltipWidthUpdatingTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"00ebc14d2881fa9f2b68915c98f92428a798ec6c","size":"1695","content":"/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership. The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License. You may obtain a copy of the License at\r\n * \r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n * \r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npackage org.apache.river.test.spec.lookupservice.service;\r\n\r\nimport java.io.IOException;\r\nimport org.apache.river.api.io.AtomicSerial;\r\nimport org.apache.river.api.io.AtomicSerial.GetArg;\r\n\r\n@AtomicSerial\r\npublic class Service03  extends    Service02\r\n                        implements Interface01\r\n{\r\n    public Service03(int i) {\r\n        super(i);\r\n    }\r\n\r\n    public Service03(GetArg arg) throws IOException{\r\n\tsuper(arg);\r\n    }\r\n\r\n    public boolean equals(Object obj) {\r\n        try {\r\n            if ( this == obj ) {\r\n                return true;\r\n            } else if (    ((obj.getClass()).equals(Service03.class))\r\n                        && (((Service03)obj).i == i) ) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } catch (NullPointerException e) {\r\n            return false;\r\n\t}\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"pfirmstone/river-internet","sample_ref":"refs/heads/trunk","sample_path":"qa/src/org/apache/river/test/spec/lookupservice/service/Service03.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9c8c716c44627af15cee7130ba96b72fa1ef4d91","size":"4697","content":"package org.apache.velocity.test;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.StringWriter;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.velocity.VelocityContext;\nimport org.apache.velocity.app.VelocityEngine;\nimport org.apache.velocity.runtime.RuntimeServices;\nimport org.apache.velocity.test.misc.TestLogger;\nimport org.apache.velocity.util.introspection.IntrospectorCacheImpl;\n\n/**\n * Tests if we can hand Velocity an arbitrary class for logging.\n *\n * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n * @version $Id$\n */\npublic class ClassloaderChangeTestCase extends TestCase\n{\n    private VelocityEngine ve = null;\n\tprivate TestLogger logger = null;\n\n    private static String OUTPUT = \"Hello From Foo\";\n\n    /**\n     * Default constructor.\n     */\n    public ClassloaderChangeTestCase(String name)\n    {\n        super(name);\n    }\n\n    public void setUp()\n            throws Exception\n    {\n        ve = new VelocityEngine();\n        logger = new TestLogger(false, true);\n        logger.setEnabledLevel(TestLogger.LOG_LEVEL_DEBUG);\n        ve.setProperty(VelocityEngine.RUNTIME_LOG_INSTANCE, logger);\n        ve.init();\n    }\n\n    public static Test suite ()\n    {\n        return new TestSuite(ClassloaderChangeTestCase.class);\n    }\n\n    /**\n     * Runs the test.\n     */\n    public void testClassloaderChange()\n        throws Exception\n    {\n        logger.on();\n\n        VelocityContext vc = new VelocityContext();\n        Object foo = null;\n\n        /*\n         *  first, we need a classloader to make our foo object\n         */\n\n        TestClassloader cl = new TestClassloader();\n        Class<?> fooclass = cl.loadClass(\"Foo\");\n        foo = fooclass.newInstance();\n\n        /*\n         *  put it into the context\n         */\n        vc.put(\"foo\", foo);\n\n        /*\n         *  and render something that would use it\n         *  that will get it into the introspector cache\n         */\n        StringWriter writer = new StringWriter();\n        ve.evaluate( vc, writer, \"test\", \"$foo.doIt()\");\n\n        /*\n         *  Check to make sure ok.  note the obvious\n         *  dependency on the Foo class...\n         */\n\n        if ( !writer.toString().equals( OUTPUT ))\n        {\n            fail(\"Output from doIt() incorrect\");\n        }\n\n        /*\n         * and do it again :)\n         */\n        cl = new TestClassloader();\n        fooclass = cl.loadClass(\"Foo\");\n        foo = fooclass.newInstance();\n\n        vc.put(\"foo\", foo);\n\n        writer = new StringWriter();\n        ve.evaluate( vc, writer, \"test\", \"$foo.doIt()\");\n\n        if ( !writer.toString().equals( OUTPUT ))\n        {\n            fail(\"Output from doIt() incorrect\");\n        }\n\n        if (!logger.getLog().contains(IntrospectorCacheImpl.CACHEDUMP_MSG))\n        {\n            fail(\"Didn't see introspector cache dump.\");\n        }\n    }\n\n    /**\n     *  Simple (real simple...) classloader that depends\n     *  on a Foo.class being located in the classloader\n     *  directory under test\n     */\n    public static class TestClassloader extends ClassLoader\n    {\n        private final static String testclass =\n            \"classloader/Foo.class\";\n\n        private Class<?> fooClass = null;\n\n        public TestClassloader()\n                throws Exception\n        {\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            InputStream fis = getClass().getResourceAsStream(\"/\" + testclass);\n            IOUtils.copy(fis, os);\n            fis.close();\n            os.close();\n\n            byte[] barr = os.toByteArray();\n\n            fooClass = defineClass(\"classloader.Foo\", barr, 0, barr.length);\n        }\n\n\n        public Class<?> findClass(String name)\n        {\n            return fooClass;\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"apache/velocity-engine","sample_ref":"refs/heads/trunk","sample_path":"velocity-engine-core/src/test/java/org/apache/velocity/test/ClassloaderChangeTestCase.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ed4574caee65a3423be47268b742e088955f4440","size":"17105","content":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.systest.rest;\n\nimport static org.apache.qpid.server.management.plugin.servlet.rest.AbstractServlet.SC_UNPROCESSABLE_ENTITY;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.UUID;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.qpid.server.BrokerOptions;\nimport org.apache.qpid.server.model.BrokerModel;\nimport org.apache.qpid.server.model.ConfiguredObject;\nimport org.apache.qpid.server.model.Group;\nimport org.apache.qpid.server.model.GroupProvider;\nimport org.apache.qpid.server.model.LifetimePolicy;\nimport org.apache.qpid.server.model.State;\nimport org.apache.qpid.server.model.adapter.FileBasedGroupProvider;\nimport org.apache.qpid.server.model.adapter.FileBasedGroupProviderImpl;\nimport org.apache.qpid.test.utils.TestBrokerConfiguration;\nimport org.apache.qpid.test.utils.TestFileUtils;\n\npublic class GroupProviderRestTest extends QpidRestTestCase\n{\n    private static final String FILE_GROUP_MANAGER = TestBrokerConfiguration.ENTRY_NAME_GROUP_FILE;\n    private File _groupFile;\n\n    @Override\n    public void setUp() throws Exception\n    {\n        _groupFile = createTemporaryGroupFile();\n\n        getDefaultBrokerConfiguration().addGroupFileConfiguration(_groupFile.getAbsolutePath());\n\n        super.setUp();\n    }\n\n    @Override\n    public void tearDown() throws Exception\n    {\n        super.tearDown();\n\n        if (_groupFile != null)\n        {\n            if (_groupFile.exists())\n            {\n                _groupFile.delete();\n            }\n        }\n    }\n\n    public void testGet() throws Exception\n    {\n        List<Map<String, Object>> providerDetails = getRestTestHelper().getJsonAsList(\"groupprovider\");\n        assertNotNull(\"Providers details cannot be null\", providerDetails);\n        assertEquals(\"Unexpected number of providers\", 1, providerDetails.size());\n        for (Map<String, Object> provider : providerDetails)\n        {\n            assertProvider(FILE_GROUP_MANAGER, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE, provider);\n            Map<String, Object> data = getRestTestHelper().getJsonAsSingletonList(\"groupprovider/\"\n                    + provider.get(GroupProvider.NAME));\n            assertNotNull(\"Cannot load data for \" + provider.get(GroupProvider.NAME), data);\n            assertProvider(FILE_GROUP_MANAGER, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE, data);\n        }\n    }\n\n    public void testCreateNewGroup() throws Exception\n    {\n        String groupName = \"newGroup\";\n\n        Map<String, Object> data = getRestTestHelper().getJsonAsSingletonList(\"groupprovider/\" + FILE_GROUP_MANAGER);\n        assertNotNull(\"Cannot load data for provider\", data);\n\n        getRestTestHelper().assertNumberOfGroups(data, 1);\n\n        getRestTestHelper().createGroup(groupName, FILE_GROUP_MANAGER);\n\n        data = getRestTestHelper().getJsonAsSingletonList(\"groupprovider/\" + FILE_GROUP_MANAGER);\n        assertNotNull(\"Cannot load data for provider\", data);\n\n        getRestTestHelper().assertNumberOfGroups(data, 2);\n    }\n\n    public void testRemoveGroup() throws Exception\n    {\n        String groupName = \"myGroup\";\n\n        Map<String, Object> data = getRestTestHelper().getJsonAsSingletonList(\"groupprovider/\" + FILE_GROUP_MANAGER);\n        assertNotNull(\"Cannot load data for provider\", data);\n\n        getRestTestHelper().assertNumberOfGroups(data, 1);\n\n        getRestTestHelper().removeGroup(groupName, FILE_GROUP_MANAGER);\n\n        data = getRestTestHelper().getJsonAsSingletonList(\"groupprovider/\" + FILE_GROUP_MANAGER);\n        assertNotNull(\"Cannot load data for provider\", data);\n\n        getRestTestHelper().assertNumberOfGroups(data, 0);\n    }\n\n    public void testCreateNewFileGroupProviderFromExistingGroupFile() throws Exception\n    {\n        String[] groupMemberNames = {\"test1\",\"test2\"};\n        File groupFile = TestFileUtils.createTempFile(this, \".groups\", \"testusers.users=\" + groupMemberNames[0] + \",\" + groupMemberNames[1]);\n        try\n        {\n            String providerName = getTestName();\n            Map<String, Object> attributes = new HashMap<String, Object>();\n            attributes.put(GroupProvider.NAME, providerName);\n            attributes.put(GroupProvider.TYPE, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE);\n            attributes.put(FileBasedGroupProvider.PATH, groupFile.getAbsolutePath());\n\n            int responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName, \"PUT\", attributes);\n            assertEquals(\"Group provider was not created\", 201, responseCode);\n\n            Map<String, Object> data = getRestTestHelper().getJsonAsSingletonList(\"groupprovider/\" + providerName + \"?depth=2\");\n            assertProvider(providerName, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE, data);\n            assertEquals(\"Unexpected name\", providerName, data.get(GroupProvider.NAME));\n            assertEquals(\"Unexpected path\", groupFile.getAbsolutePath(), data.get(FileBasedGroupProvider.PATH));\n\n            @SuppressWarnings(\"unchecked\")\n            List<Map<String, Object>> groups = (List<Map<String, Object>>) data.get(\"groups\");\n            assertEquals(\"Unexpected group size\", 1, groups.size());\n            Map<String, Object> group = groups.get(0);\n            assertEquals(\"Unexpected group name\", \"testusers\",group.get(\"name\"));\n\n            @SuppressWarnings(\"unchecked\")\n            List<Map<String, Object>> groupMemberList = (List<Map<String, Object>>) group.get(\"groupmembers\");\n            assertEquals(\"Unexpected group members size\", 2, groupMemberList.size());\n\n            for (String memberName : groupMemberNames)\n            {\n                boolean found = false;\n                for (Map<String, Object> memberData : groupMemberList)\n                {\n                    Object name = memberData.get(\"name\");\n                    if (memberName.equals(name))\n                    {\n                        found = true;\n                        break;\n                    }\n                }\n                assertTrue(\"Cannot find group member \" + memberName + \" in \" + groupMemberList , found);\n            }\n        }\n        finally\n        {\n            groupFile.delete();\n        }\n    }\n\n    public void testCreationOfNewFileGroupProviderFailsWhenPathIsMissed() throws Exception\n    {\n        String providerName = getTestName();\n        Map<String, Object> attributes = new HashMap<String, Object>();\n        attributes.put(GroupProvider.NAME, providerName);\n        attributes.put(GroupProvider.TYPE, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE);\n\n        int responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName, \"PUT\", attributes);\n        assertEquals(\"Group provider was created\", SC_UNPROCESSABLE_ENTITY, responseCode);\n    }\n\n    public void testCreateNewFileGroupProviderFromNonExistingGroupFile() throws Exception\n    {\n        File groupFile = new File(TMP_FOLDER + File.separator + getTestName() + File.separator + \"groups\");\n        assertFalse(\"Group file should not exist\", groupFile.exists());\n        try\n        {\n            String providerName = getTestName();\n            Map<String, Object> attributes = new HashMap<String, Object>();\n            attributes.put(GroupProvider.NAME, providerName);\n            attributes.put(GroupProvider.TYPE, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE);\n            attributes.put(FileBasedGroupProvider.PATH, groupFile.getAbsolutePath());\n\n            int responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName, \"PUT\", attributes);\n            assertEquals(\"Group provider was not created\", 201, responseCode);\n\n            Map<String, Object> data = getRestTestHelper().getJsonAsSingletonList(\"groupprovider/\" + providerName);\n            assertEquals(\"Unexpected name\", providerName, data.get(GroupProvider.NAME));\n            assertEquals(\"Unexpected path\", groupFile.getAbsolutePath(), data.get(FileBasedGroupProvider.PATH));\n\n            @SuppressWarnings(\"unchecked\")\n            List<Map<String, Object>> groups = (List<Map<String, Object>>) data.get(\"groups\");\n            assertNull(\"Unexpected groups\", groups);\n\n            assertTrue(\"Group file has not been created\", groupFile.exists());\n        }\n        finally\n        {\n            groupFile.delete();\n            groupFile.getParentFile().delete();\n        }\n    }\n\n    public void testCreateNewFileGroupProviderForTheSameGroupFileFails() throws Exception\n    {\n        File groupFile = TestFileUtils.createTempFile(this, \".groups\", \"testusers.users=test1,test2\");\n        String providerName = getTestName();\n        try\n        {\n            Map<String, Object> attributes = new HashMap<String, Object>();\n            attributes.put(GroupProvider.NAME, providerName);\n            attributes.put(GroupProvider.TYPE, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE);\n            attributes.put(FileBasedGroupProvider.PATH, groupFile.getAbsolutePath());\n\n            int responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName, \"PUT\", attributes);\n            assertEquals(\"Group provider was not created\", 201, responseCode);\n\n            attributes.put(GroupProvider.NAME, providerName + 2);\n            responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName + 2, \"PUT\", attributes);\n            assertEquals(\"Group provider for the same group file was created\", SC_UNPROCESSABLE_ENTITY, responseCode);\n        }\n        finally\n        {\n            groupFile.delete();\n        }\n    }\n\n    public void testDeleteGroupProvider() throws Exception\n    {\n        File groupFile = TestFileUtils.createTempFile(this, \".groups\", \"testusers.users=test1,test2\");\n        String providerName = getTestName();\n        try\n        {\n            Map<String, Object> attributes = new HashMap<String, Object>();\n            attributes.put(GroupProvider.NAME, providerName);\n            attributes.put(GroupProvider.TYPE, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE);\n            attributes.put(FileBasedGroupProvider.PATH, groupFile.getAbsolutePath());\n\n            int responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName, \"PUT\", attributes);\n            assertEquals(\"Expected to fail because we can have only one password provider\", 201, responseCode);\n\n            responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName , \"DELETE\");\n            assertEquals(\"Group provider was not deleted\", 200, responseCode);\n\n            getRestTestHelper().submitRequest(\"groupprovider/\" + providerName, \"GET\", HttpServletResponse.SC_NOT_FOUND);\n        }\n        finally\n        {\n            groupFile.delete();\n        }\n    }\n\n    public void testUpdateGroupProviderAttributesFails() throws Exception\n    {\n        File groupFile = TestFileUtils.createTempFile(this, \".groups\", \"testusers.users=test1,test2\");\n        String providerName = getTestName();\n        try\n        {\n            Map<String, Object> attributes = new HashMap<String, Object>();\n            attributes.put(GroupProvider.NAME, providerName);\n            attributes.put(GroupProvider.TYPE, FileBasedGroupProviderImpl.GROUP_FILE_PROVIDER_TYPE);\n            attributes.put(FileBasedGroupProvider.PATH, groupFile.getAbsolutePath());\n\n            int responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName, \"PUT\", attributes);\n            assertEquals(\"Password provider should be created successfully\", 201, responseCode);\n\n            File newGroupFile = TestFileUtils.createTempFile(this, \".groups\");\n            try\n            {\n                attributes.put(FileBasedGroupProvider.PATH, newGroupFile.getAbsolutePath());\n\n                responseCode = getRestTestHelper().submitRequest(\"groupprovider/\" + providerName, \"PUT\", attributes);\n                assertEquals(\"Changing of group file is unsupported at the moment\", SC_UNPROCESSABLE_ENTITY, responseCode);\n            }\n            finally\n            {\n                newGroupFile.delete();\n            }\n        }\n        finally\n        {\n            groupFile.delete();\n        }\n    }\n\n    public void testRemovalOfGroupProviderInErrorStateUsingManagementMode() throws Exception\n    {\n        stopDefaultBroker();\n\n        File file = new File(TMP_FOLDER, getTestName());\n        if (file.exists())\n        {\n            file.delete();\n        }\n        assertFalse(\"Group file should not exist\", file.exists());\n\n        TestBrokerConfiguration config = getDefaultBrokerConfiguration();\n        config.removeObjectConfiguration(GroupProvider.class, TestBrokerConfiguration.ENTRY_NAME_GROUP_FILE);\n        UUID id = config.addGroupFileConfiguration(file.getAbsolutePath());\n        config.setSaved(false);\n        startDefaultBroker(true);\n\n        getRestTestHelper().setUsernameAndPassword(BrokerOptions.MANAGEMENT_MODE_USER_NAME, MANAGEMENT_MODE_PASSWORD);\n\n        Map<String, Object> groupProvider = getRestTestHelper().getJsonAsSingletonList(\"groupprovider/\" + TestBrokerConfiguration.ENTRY_NAME_GROUP_FILE);\n        assertEquals(\"Unexpected id\", id.toString(), groupProvider.get(GroupProvider.ID));\n        assertEquals(\"Unexpected path\", file.getAbsolutePath() , groupProvider.get(FileBasedGroupProvider.PATH));\n        assertEquals(\"Unexpected state\", State.ERRORED.name() , groupProvider.get(GroupProvider.STATE));\n\n        int status = getRestTestHelper().submitRequest(\"groupprovider/\" + TestBrokerConfiguration.ENTRY_NAME_GROUP_FILE, \"DELETE\");\n        assertEquals(\"ACL was not deleted\", 200, status);\n        getRestTestHelper().submitRequest(\"groupprovider/\" + TestBrokerConfiguration.ENTRY_NAME_GROUP_FILE,\n                \"GET\", HttpServletResponse.SC_NOT_FOUND);\n    }\n\n    private void assertProvider(String name, String type, Map<String, Object> provider)\n    {\n        Asserts.assertAttributesPresent(provider, BrokerModel.getInstance().getTypeRegistry().getAttributeNames(\n                GroupProvider.class),\n                ConfiguredObject.TYPE,\n                ConfiguredObject.CREATED_BY,\n                ConfiguredObject.CREATED_TIME,\n                ConfiguredObject.LAST_UPDATED_BY,\n                ConfiguredObject.LAST_UPDATED_TIME,\n                ConfiguredObject.DESCRIPTION,\n                ConfiguredObject.CONTEXT,\n                ConfiguredObject.DESIRED_STATE);\n        assertEquals(\"Unexpected value of provider attribute \" + GroupProvider.STATE, State.ACTIVE.name(),\n                provider.get(GroupProvider.STATE));\n        assertEquals(\"Unexpected value of provider attribute \" + GroupProvider.LIFETIME_POLICY,\n                LifetimePolicy.PERMANENT.name(), provider.get(GroupProvider.LIFETIME_POLICY));\n        assertEquals(\"Unexpected value of provider attribute \" + GroupProvider.DURABLE, Boolean.TRUE,\n                provider.get(GroupProvider.DURABLE));\n        assertEquals(\"Unexpected value of provider attribute \" + GroupProvider.TYPE, type,\n                provider.get(GroupProvider.TYPE));\n\n        assertEquals(\"Unexpected value of provider attribute \" + GroupProvider.NAME, name,\n                (String) provider.get(GroupProvider.NAME));\n\n        @SuppressWarnings(\"unchecked\")\n        List<Map<String, Object>> groups = (List<Map<String, Object>>) provider.get(\"groups\");\n        assertNotNull(\"Groups were not found\", groups);\n        assertEquals(\"Unexpected number of groups\", 1, groups.size());\n        for (Map<String, Object> group : groups)\n        {\n\n            final String groupName = (String) group.get(Group.NAME);\n            assertNotNull(\"Attribute \" + Group.NAME, groupName);\n\n            assertNotNull(\"Attribute \" + Group.ID, group.get(Group.ID));\n        }\n    }\n\n    private File createTemporaryGroupFile() throws Exception\n    {\n        File groupFile = File.createTempFile(\"group\", \"grp\");\n        groupFile.deleteOnExit();\n\n        Properties props = new Properties();\n        props.put(\"myGroup.users\", \"guest\");\n\n        try(final FileOutputStream out = new FileOutputStream(groupFile))\n        {\n            props.store(out, \"test group file\");\n        }\n\n        return groupFile;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"apache/qpid-java","sample_ref":"refs/heads/trunk","sample_path":"systests/src/test/java/org/apache/qpid/systest/rest/GroupProviderRestTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"17c2723b8e30da01a7d8a6ab2668f2c676798f58","size":"4533","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.river.discovery;\n\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.nio.ByteBuffer;\nimport java.util.Collection;\nimport net.jini.core.constraint.InvocationConstraints;\nimport net.jini.io.UnsupportedConstraintException;\n\n/**\n * Interface implemented by classes which perform the client (discovering) side\n * of unicast discovery.\n *\n * @author Sun Microsystems, Inc.\n * @since 2.0\n */\npublic interface UnicastDiscoveryClient extends DiscoveryFormatProvider {\n\n    /**\n     * Checks and returns normally if this client is capable of fulfilling the\n     * given absolute constraints.  <code>null</code> constraints are\n     * considered equivalent to empty constraints.\n     *\n     * @param constraints the constraints to check, or <code>null</code>\n     * @throws UnsupportedConstraintException if unable to satisfy the\n     * specified constraints\n     * @throws SecurityException if the given constraints cannot be satisfied\n     * due to insufficient caller permissions\n     */\n    void checkUnicastDiscoveryConstraints(InvocationConstraints constraints)\n\tthrows UnsupportedConstraintException;\n\n    /**\n     * Performs the client side of unicast discovery, obtaining the returned\n     * response data over the provided socket using the given default and\n     * codebase verifier class loaders and collection of object stream context\n     * objects in a manner that satisfies the specified absolute constraints.\n     * Byte buffers containing the data sent and received so far over the given\n     * socket (for the unicast discovery protocol 2 handshake) are provided for\n     * use by formats which integrity protect or otherwise incorporate the\n     * handshake data.  <code>null</code> constraints are considered equivalent\n     * to empty constraints.\n     *\n     * @param socket the socket on which to perform unicast discovery\n     * @param constraints the constraints to apply to unicast discovery, or\n     * <code>null</code>\n     * @param defaultLoader the class loader value (possibly <code>null</code>)\n     * to be passed as the <code>defaultLoader</code> argument to\n     * <code>RMIClassLoader</code> methods when unmarshalling the registrar\n     * proxy\n     * @param verifierLoader the class loader value (possibly\n     * <code>null</code>) to pass to {@link\n     * net.jini.security.Security#verifyCodebaseIntegrity\n     * Security.verifyCodebaseIntegrity}, if codebase integrity verification is\n     * used when unmarshalling the registrar proxy\n     * @param context the collection of context information objects (possibly\n     * <code>null</code>) to use when unmarshalling the registrar proxy\n     * @param sent a buffer containing the data already sent\n     * @param received a buffer containing the data already received\n     * @return the received unicast response data\n     * @throws IOException if an error occurs in interpreting received data or\n     * in formatting data to send\n     * @throws UnsupportedConstraintException if unable to satisfy the\n     * specified constraints\n     * @throws SecurityException if the given constraints cannot be satisfied\n     * due to insufficient caller permissions\n     * @throws ClassNotFoundException if the class of the discovered registrar\n     * cannot be resolved\n     * @throws NullPointerException if <code>socket</code>, <code>sent</code>,\n     * or <code>received</code> is <code>null</code>\n     */\n    UnicastResponse doUnicastDiscovery(Socket socket,\n\t\t\t\t       InvocationConstraints constraints,\n\t\t\t\t       ClassLoader defaultLoader,\n\t\t\t\t       ClassLoader verifierLoader,\n\t\t\t\t       Collection context,\n\t\t\t\t       ByteBuffer sent,\n\t\t\t\t       ByteBuffer received)\n\tthrows IOException, ClassNotFoundException;\n}\n","binary":"false","copies":"1","sample_repo_name":"pfirmstone/river-internet","sample_ref":"refs/heads/trunk","sample_path":"src/org/apache/river/discovery/UnicastDiscoveryClient.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0a4d1a4af24f5368e448d115c6b848044f610ee1","size":"1890","content":"\n/*\n*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*\n*/\n\n\npackage org.apache.qpid.server.protocol.v1_0.type.messaging.codec;\n\nimport org.apache.qpid.server.protocol.v1_0.codec.DescribedTypeConstructor;\nimport org.apache.qpid.server.protocol.v1_0.codec.DescribedTypeConstructorRegistry;\nimport org.apache.qpid.server.protocol.v1_0.type.Symbol;\nimport org.apache.qpid.server.protocol.v1_0.type.UnsignedLong;\nimport org.apache.qpid.server.protocol.v1_0.type.messaging.NoLocalFilter;\n\npublic class NoLocalFilterConstructor extends DescribedTypeConstructor<NoLocalFilter>\n{\n    private static final Object[] DESCRIPTORS =\n    {\n            Symbol.valueOf(\"apache.org:jms-no-local-filter:list\"), UnsignedLong.valueOf(0x0000468C00000003L)\n    };\n\n    private static final NoLocalFilterConstructor INSTANCE = new NoLocalFilterConstructor();\n\n    public static void register(DescribedTypeConstructorRegistry registry)\n    {\n        for(Object descriptor : DESCRIPTORS)\n        {\n            registry.register(descriptor, INSTANCE);\n        }\n    }\n\n\n    public NoLocalFilter construct(Object underlying)\n    {\n        return NoLocalFilter.INSTANCE;\n    }\n\n\n}\n","binary":"false","copies":"1","sample_repo_name":"apache/qpid-java","sample_ref":"refs/heads/trunk","sample_path":"broker-plugins/amqp-1-0-protocol/src/main/java/org/apache/qpid/server/protocol/v1_0/type/messaging/codec/NoLocalFilterConstructor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3fc5d145288271f30c3a2d0bd4616524f234dd75","size":"10353","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.uima.taeconfigurator.editors.ui;\n\nimport org.apache.uima.UIMAFramework;\nimport org.apache.uima.resource.metadata.TypePriorities;\nimport org.apache.uima.resource.metadata.TypePriorityList;\nimport org.apache.uima.taeconfigurator.editors.MultiPageEditor;\nimport org.apache.uima.taeconfigurator.editors.ui.dialogs.AddTypeToPriorityListDialog;\nimport org.apache.uima.taeconfigurator.wizards.TypePrioritiesNewWizard;\nimport org.eclipse.jface.dialogs.MessageDialog;\nimport org.eclipse.jface.window.Window;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Event;\nimport org.eclipse.swt.widgets.Tree;\nimport org.eclipse.swt.widgets.TreeItem;\nimport org.eclipse.ui.forms.IManagedForm;\n\npublic class PriorityListSection extends AbstractSection {\n\n  public static final String PRIORITY_LIST = \"<Priority List>\";\n\n  private Tree tree;\n\n  private Button addSetButton;\n\n  private Button addButton;\n\n  private Button removeButton;\n\n  private Button upButton;\n\n  private Button downButton;\n\n  private TypePriorityImportSection typePriorityImportSection;\n\n  private Button exportButton;\n\n  public PriorityListSection(MultiPageEditor editor, Composite parent) {\n    super(editor, parent, \"Priority Lists\", \"This section shows the defined Prioirity Lists\");\n  }\n\n  public void initialize(IManagedForm form) {\n    super.initialize(form);\n\n    Composite sectionClient = new2ColumnComposite(getSection());\n    enableBorders(sectionClient);\n\n    tree = newTree(sectionClient);\n\n    final Composite buttonContainer = newButtonContainer(sectionClient);\n    addSetButton = newPushButton(buttonContainer, \"Add Set\",\n            \"Click here to add another priority list.\");\n    addButton = newPushButton(buttonContainer, S_ADD, \"Click here to add a type\");\n    removeButton = newPushButton(buttonContainer, S_REMOVE, S_REMOVE_TIP);\n    new Button(buttonContainer, SWT.PUSH).setVisible(false); // spacer\n    upButton = newPushButton(buttonContainer, S_UP,\n            \"Click here to move the selected item up in the priority order.\");\n    downButton = newPushButton(buttonContainer, S_DOWN,\n            \"Click here to move the selected item down in the priority order\");\n    exportButton = newPushButton(buttonContainer, S_EXPORT, S_EXPORT_TIP);\n\n    toolkit.paintBordersFor(sectionClient);\n  }\n\n  /*\n   * (non-Javadoc)\n   * \n   * @see org.eclipse.ui.forms.IFormPart#refresh()\n   */\n  public void refresh() {\n    if (null == typePriorityImportSection)\n      typePriorityImportSection = editor.getIndexesPage().getTypePriorityImportSection();\n\n    super.refresh();\n    tree.removeAll();\n\n    TypePriorities typePriorities = getTypePriorities();\n\n    if (typePriorities != null) {\n      TypePriorityList[] priorityLists = typePriorities.getPriorityLists();\n      for (int i = 0; i < priorityLists.length; i++) {\n        TreeItem item = new TreeItem(tree, SWT.NONE);\n        item.setText(PRIORITY_LIST);\n        String[] types = priorityLists[i].getTypes();\n        if (null != types) {\n          for (int j = 0; j < types.length; j++) {\n            TreeItem tItem = new TreeItem(item, SWT.NONE);\n            tItem.setText(formatName(types[j]));\n          }\n        }\n        item.setExpanded(true);\n      }\n    }\n    if (tree.getItemCount() > 0)\n      tree.setSelection(new TreeItem[] { tree.getItems()[0] });\n    enable();\n  }\n\n  public TypePriorityList getTypePriorityListFromTreeItem(TreeItem item) {\n    TypePriorityList[] typePriorityLists = getAnalysisEngineMetaData().getTypePriorities()\n            .getPriorityLists();\n    return typePriorityLists[tree.indexOf(item)];\n  }\n\n  public void handleEvent(Event event) {\n    if (event.widget == addSetButton) {\n      TypePriorityList typePriorityList = UIMAFramework.getResourceSpecifierFactory()\n              .createTypePriorityList();\n\n      TypePriorities typePriorities = getTypePriorities();\n      if (typePriorities == null) {\n        typePriorities = UIMAFramework.getResourceSpecifierFactory().createTypePriorities();\n        getAnalysisEngineMetaData().setTypePriorities(typePriorities);\n      }\n\n      getTypePriorities().addPriorityList(typePriorityList);\n\n      TreeItem item = new TreeItem(tree, SWT.NONE);\n      item.setText(PRIORITY_LIST);\n\n      tree.setSelection(new TreeItem[] { item });\n      setFileDirty();\n    } else if (event.widget == addButton) { // add type to set\n      if (editor.isTypePriorityDescriptor() && !editor.getIsContextLoaded()) {\n        Utility\n                .popMessage(\n                        \"Can''t add types here\",\n                        \"Types cannot be added here, because there is no loaded context type system to pick the types from\",\n                        MessageDialog.WARNING);\n        return;\n      }\n      TreeItem parent = tree.getSelection()[0];\n      if (null != parent.getParentItem())\n        parent = parent.getParentItem();\n      AddTypeToPriorityListDialog dialog = new AddTypeToPriorityListDialog(this,\n              editor.definedTypesWithSupers.get(), // types\n              getTypePriorityListFromTreeItem(parent).getTypes()); // types already in list\n\n      if (dialog.open() == Window.CANCEL)\n        return;\n\n      TypePriorityList typePriorityList = getTypePriorityListFromTreeItem(parent);\n\n      String[] newTypeNames = dialog.getSelectedTypeNames();\n      for (int i = 0; i < newTypeNames.length; i++) {\n        typePriorityList.addType(newTypeNames[i]);\n        TreeItem item = new TreeItem(parent, SWT.NONE);\n        item.setText(formatName(newTypeNames[i]));\n      }\n\n      setFileDirty();\n    } else if (event.widget == removeButton) {\n      TreeItem item = tree.getSelection()[0];\n      TreeItem parent = item.getParentItem();\n\n      if (null == parent) { // removing a priority set\n        if (Window.CANCEL == Utility.popOkCancel(\"ConfirmRemove\", \"ConfirmRemoveSet\",\n                MessageDialog.WARNING))\n          return;\n        TypePriorityList removedTypePriorityList = getTypePriorityListFromTreeItem(item);\n        TypePriorityList[] oldPriorityLists = getAnalysisEngineMetaData().getTypePriorities()\n                .getPriorityLists();\n        TypePriorityList[] newPriorityLists = new TypePriorityList[oldPriorityLists.length - 1];\n\n        for (int i = 0, j = 0; i < oldPriorityLists.length; i++) {\n          if (oldPriorityLists[i] != removedTypePriorityList) {\n            newPriorityLists[j++] = oldPriorityLists[i];\n          }\n        }\n\n        getAnalysisEngineMetaData().getTypePriorities().setPriorityLists(newPriorityLists);\n\n      } else { // removing a type\n        if (Window.CANCEL == Utility.popOkCancel(\"ConfirmRemove\", \"ConfirmRemoveType\",\n                MessageDialog.WARNING))\n          return;\n        TypePriorityList typePriorityList = getTypePriorityListFromTreeItem(parent);\n        typePriorityList.removeType(item.getText());\n      }\n\n      TreeItem previousSelection = getPreviousSelection(parent == null ? tree.getItems() : parent\n              .getItems(), item);\n      if (null != previousSelection)\n        tree.setSelection(new TreeItem[] { previousSelection });\n      item.dispose();\n      setFileDirty();\n    }\n    // only enabled for types\n    else if (event.widget == downButton || event.widget == upButton) {\n      TreeItem item = tree.getSelection()[0];\n      TreeItem parent = item.getParentItem();\n      TreeItem[] items = parent.getItems();\n      int i = getItemIndex(items, item);\n\n      TypePriorityList typePriorityList = getTypePriorityListFromTreeItem(parent);\n      String[] types = typePriorityList.getTypes();\n      String temp = types[i];\n      if (event.widget == downButton) {\n        types[i] = types[i + 1];\n        types[i + 1] = temp;\n        typePriorityList.setTypes(types);\n\n        new TreeItem(parent, SWT.NONE, i).setText(formatName(types[i]));\n        TreeItem t = new TreeItem(parent, SWT.NONE, i + 1);\n        t.setText(formatName(types[i + 1]));\n        tree.setSelection(new TreeItem[] { t });\n\n        items[i].dispose();\n        items[i + 1].dispose();\n      } else {\n        types[i] = types[i - 1];\n        types[i - 1] = temp;\n        typePriorityList.setTypes(types);\n\n        TreeItem t = new TreeItem(parent, SWT.NONE, i - 1);\n        t.setText(formatName(types[i - 1]));\n        tree.setSelection(new TreeItem[] { t });\n        new TreeItem(parent, SWT.NONE, i).setText(formatName(types[i]));\n\n        items[i - 1].dispose();\n        items[i].dispose();\n        setFileDirty();\n      }\n      TypePriorityList[] tpl = getTypePriorities().getPriorityLists();\n      tpl[tree.indexOf(parent)] = typePriorityList;\n      getTypePriorities().setPriorityLists(tpl);\n    } else if (event.widget == exportButton) {\n      typePriorityImportSection.exportImportablePart(\"<typePriorities>\",\n              TypePrioritiesNewWizard.TYPEPRIORITIES_TEMPLATE);\n      refresh();\n    }\n    enable();\n  }\n\n  public void enable() {\n\n    if (tree.getSelectionCount() == 1) {\n      addButton.setEnabled(true);\n      TreeItem item = tree.getSelection()[0];\n      removeButton.setEnabled(true);\n      if (null != item.getParentItem()) {\n        TreeItem[] items = item.getParentItem().getItems();\n        int i = getItemIndex(items, item);\n        upButton.setEnabled(i > 0);\n        downButton.setEnabled(i < (items.length - 1));\n      }\n    } else {\n      addButton.setEnabled(false);\n      removeButton.setEnabled(false);\n      upButton.setEnabled(false);\n      downButton.setEnabled(false);\n    }\n    exportButton.setEnabled(tree.getItemCount() > 0);\n  }\n}\n","binary":"false","copies":"2","sample_repo_name":"apache/uima-uimaj","sample_ref":"refs/heads/trunk","sample_path":"uimaj-ep-configurator/src/main/java/org/apache/uima/taeconfigurator/editors/ui/PriorityListSection.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c9c11fe4f103956bc701bc38f8932470da5a913c","size":"5511","content":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.server.store;\n\nimport java.io.File;\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.apache.qpid.bytebuffer.QpidByteBuffer;\nimport org.apache.qpid.server.message.EnqueueableMessage;\nimport org.apache.qpid.server.model.ConfiguredObject;\nimport org.apache.qpid.server.model.VirtualHost;\nimport org.apache.qpid.test.utils.QpidTestCase;\nimport org.apache.qpid.util.FileUtils;\n\npublic abstract class MessageStoreQuotaEventsTestBase extends QpidTestCase implements EventListener, TransactionLogResource\n{\n    private static final Logger _logger = LoggerFactory.getLogger(MessageStoreQuotaEventsTestBase.class);\n\n    protected static final byte[] MESSAGE_DATA = new byte[32 * 1024];\n\n    private MessageStore _store;\n    private File _storeLocation;\n\n    private List<Event> _events;\n    private UUID _transactionResource;\n\n    protected abstract MessageStore createStore() throws Exception;\n    protected abstract int getNumberOfMessagesToFillStore();\n\n    @Override\n    public void setUp() throws Exception\n    {\n        super.setUp();\n\n        _storeLocation = new File(new File(TMP_FOLDER), getTestName());\n        FileUtils.delete(_storeLocation, true);\n\n        _store = createStore();\n\n        ConfiguredObject<?> parent = createVirtualHost(_storeLocation.getAbsolutePath());\n\n        _store.openMessageStore(parent);\n\n        _transactionResource = UUID.randomUUID();\n        _events = new ArrayList<Event>();\n        _store.addEventListener(this, Event.PERSISTENT_MESSAGE_SIZE_OVERFULL, Event.PERSISTENT_MESSAGE_SIZE_UNDERFULL);\n    }\n\n    protected abstract VirtualHost createVirtualHost(String storeLocation);\n\n    @Override\n    public void tearDown() throws Exception\n    {\n        try\n        {\n            super.tearDown();\n        }\n        finally\n        {\n            if (_store != null)\n            {\n                _store.closeMessageStore();\n            }\n            FileUtils.delete(_storeLocation, true);\n        }\n    }\n\n    public void testOverflow() throws Exception\n    {\n        Transaction transaction = _store.newTransaction();\n\n        List<EnqueueableMessage> messages = new ArrayList<EnqueueableMessage>();\n        for (int i = 0; i < getNumberOfMessagesToFillStore(); i++)\n        {\n            EnqueueableMessage m = addMessage(i);\n            messages.add(m);\n            transaction.enqueueMessage(this, m);\n        }\n        transaction.commitTran();\n\n        assertEvent(1, Event.PERSISTENT_MESSAGE_SIZE_OVERFULL);\n\n        for (EnqueueableMessage m : messages)\n        {\n            m.getStoredMessage().remove();\n        }\n\n        assertEvent(2, Event.PERSISTENT_MESSAGE_SIZE_UNDERFULL);\n    }\n\n    protected EnqueueableMessage addMessage(long id)\n    {\n        StorableMessageMetaData metaData = createMetaData(id, MESSAGE_DATA.length);\n        MessageHandle<?> handle = _store.addMessage(metaData);\n        handle.addContent(QpidByteBuffer.wrap(MESSAGE_DATA));\n        StoredMessage<? extends StorableMessageMetaData> storedMessage = handle.allContentAdded();\n        TestMessage message = new TestMessage(id, storedMessage);\n        return message;\n    }\n\n    private StorableMessageMetaData createMetaData(long id, int length)\n    {\n        return new TestMessageMetaData(id, length);\n    }\n\n    @Override\n    public void event(Event event)\n    {\n        _logger.debug(\"Test event listener received event \" + event);\n        _events.add(event);\n    }\n\n    private void assertEvent(int expectedNumberOfEvents, Event... expectedEvents)\n    {\n        assertEquals(\"Unexpected number of events received \", expectedNumberOfEvents, _events.size());\n        for (Event event : expectedEvents)\n        {\n            assertTrue(\"Expected event is not found:\" + event, _events.contains(event));\n        }\n    }\n\n    @Override\n    public UUID getId()\n    {\n        return _transactionResource;\n    }\n\n    private static class TestMessage implements EnqueueableMessage\n    {\n        private final StoredMessage<?> _handle;\n        private final long _messageId;\n\n        public TestMessage(long messageId, StoredMessage<?> handle)\n        {\n            _messageId = messageId;\n            _handle = handle;\n        }\n\n        public long getMessageNumber()\n        {\n            return _messageId;\n        }\n\n        public boolean isPersistent()\n        {\n            return true;\n        }\n\n        public StoredMessage<?> getStoredMessage()\n        {\n            return _handle;\n        }\n    }\n\n    @Override\n    public MessageDurability getMessageDurability()\n    {\n        return MessageDurability.DEFAULT;\n    }\n}\n","binary":"false","copies":"2","sample_repo_name":"apache/qpid-java","sample_ref":"refs/heads/trunk","sample_path":"broker-core/src/test/java/org/apache/qpid/server/store/MessageStoreQuotaEventsTestBase.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"33ac73655dbe064b2963e1411ca803c37ee16c12","size":"3034","content":"/**\n * Copyright 2008 The Apache Software Foundation\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.hadoop.hbase.rest;\n\nimport java.io.IOException;\nimport java.util.Collection;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.hadoop.hbase.HBaseConfiguration;\nimport org.apache.hadoop.hbase.HColumnDescriptor;\nimport org.apache.hadoop.hbase.client.HBaseAdmin;\nimport org.apache.hadoop.hbase.client.HTable;\nimport org.apache.hadoop.hbase.rest.exception.HBaseRestException;\nimport org.apache.hadoop.hbase.util.Base64;\nimport org.apache.hadoop.hbase.util.Bytes;\n\npublic abstract class AbstractModel {\n\n  @SuppressWarnings(\"unused\")\n  private Log LOG = LogFactory.getLog(AbstractModel.class);\n  protected HBaseConfiguration conf;\n  protected HBaseAdmin admin;\n\n  protected static class Encodings {\n\n    protected interface Encoding {\n\n      String encode(byte[] b) throws HBaseRestException;\n    }\n\n    public static Encoding EBase64 = new Encoding() {\n\n      public String encode(byte[] b) throws HBaseRestException {\n        return Base64.encodeBytes(b);\n      }\n    };\n    public static Encoding EUTF8 = new Encoding() {\n\n      public String encode(byte[] b) throws HBaseRestException {\n        return new String(b);\n      }\n    };\n  }\n\n  protected static final Encodings.Encoding encoding = Encodings.EUTF8;\n\n  public void initialize(HBaseConfiguration conf, HBaseAdmin admin) {\n    this.conf = conf;\n    this.admin = admin;\n  }\n\n  protected byte[][] getColumns(byte[] tableName) throws HBaseRestException {\n    try {\n      HTable h = new HTable(tableName);\n      Collection<HColumnDescriptor> columns = h.getTableDescriptor()\n          .getFamilies();\n      byte[][] resultant = new byte[columns.size()][];\n      int count = 0;\n\n      for (HColumnDescriptor c : columns) {\n        resultant[count++] = c.getNameWithColon();\n      }\n\n      return resultant;\n    } catch (IOException e) {\n      throw new HBaseRestException(e);\n    }\n  }\n\n  protected static final byte COLON = Bytes.toBytes(\":\")[0];\n\n  protected boolean isColumnFamily(byte[] columnName) {\n    for (int i = 0; i < columnName.length; i++) {\n      if (columnName[i] == COLON) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","binary":"false","copies":"2","sample_repo_name":"blues/hbase","sample_ref":"refs/heads/trunk","sample_path":"src/java/org/apache/hadoop/hbase/rest/AbstractModel.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c405b2321043299f35c74aae54c02e27331df901","size":"15430","content":"/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *\n *\n */\npackage org.apache.qpid.server.logging.messages;\n\nimport static org.apache.qpid.server.logging.AbstractMessageLogger.DEFAULT_LOG_HIERARCHY_PREFIX;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.qpid.server.configuration.BrokerProperties;\nimport org.apache.qpid.server.logging.LogMessage;\n\nimport java.text.MessageFormat;\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\n/**\n * DO NOT EDIT DIRECTLY, THIS FILE WAS GENERATED.\n *\n * Generated using GenerateLogMessages and LogMessages.vm\n * This file is based on the content of ManagementConsole_logmessages.properties\n *\n * To regenerate, edit the templates/properties and run the build with -Dgenerate=true\n */\npublic class ManagementConsoleMessages\n{\n    private static ResourceBundle _messages;\n    private static Locale _currentLocale = BrokerProperties.getLocale();\n\n    public static final String MANAGEMENTCONSOLE_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"managementconsole\";\n    public static final String OPEN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"managementconsole.open\";\n    public static final String LISTENING_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"managementconsole.listening\";\n    public static final String STOPPED_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"managementconsole.stopped\";\n    public static final String CLOSE_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"managementconsole.close\";\n    public static final String SHUTTING_DOWN_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"managementconsole.shutting_down\";\n    public static final String STARTUP_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"managementconsole.startup\";\n    public static final String READY_LOG_HIERARCHY = DEFAULT_LOG_HIERARCHY_PREFIX + \"managementconsole.ready\";\n\n    static\n    {\n        LoggerFactory.getLogger(MANAGEMENTCONSOLE_LOG_HIERARCHY);\n        LoggerFactory.getLogger(OPEN_LOG_HIERARCHY);\n        LoggerFactory.getLogger(LISTENING_LOG_HIERARCHY);\n        LoggerFactory.getLogger(STOPPED_LOG_HIERARCHY);\n        LoggerFactory.getLogger(CLOSE_LOG_HIERARCHY);\n        LoggerFactory.getLogger(SHUTTING_DOWN_LOG_HIERARCHY);\n        LoggerFactory.getLogger(STARTUP_LOG_HIERARCHY);\n        LoggerFactory.getLogger(READY_LOG_HIERARCHY);\n\n        _messages = ResourceBundle.getBundle(\"org.apache.qpid.server.logging.messages.ManagementConsole_logmessages\", _currentLocale);\n    }\n\n    /**\n     * Log a ManagementConsole message of the Format:\n     * <pre>MNG-1007 : Open : User {0}</pre>\n     * Optional values are contained in [square brackets] and are numbered\n     * sequentially in the method call.\n     *\n     */\n    public static LogMessage OPEN(String param1)\n    {\n        String rawMessage = _messages.getString(\"OPEN\");\n\n        final Object[] messageArguments = {param1};\n        // Create a new MessageFormat to ensure thread safety.\n        // Sharing a MessageFormat and using applyPattern is not thread safe\n        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n\n        final String message = formatter.format(messageArguments);\n\n        return new LogMessage()\n        {\n            public String toString()\n            {\n                return message;\n            }\n\n            public String getLogHierarchy()\n            {\n                return OPEN_LOG_HIERARCHY;\n            }\n\n            @Override\n            public boolean equals(final Object o)\n            {\n                if (this == o)\n                {\n                    return true;\n                }\n                if (o == null || getClass() != o.getClass())\n                {\n                    return false;\n                }\n\n                final LogMessage that = (LogMessage) o;\n\n                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());\n\n            }\n\n            @Override\n            public int hashCode()\n            {\n                int result = toString().hashCode();\n                result = 31 * result + getLogHierarchy().hashCode();\n                return result;\n            }\n        };\n    }\n\n    /**\n     * Log a ManagementConsole message of the Format:\n     * <pre>MNG-1002 : Starting : {0} : Listening on {1} port {2,number,#}</pre>\n     * Optional values are contained in [square brackets] and are numbered\n     * sequentially in the method call.\n     *\n     */\n    public static LogMessage LISTENING(String param1, String param2, Number param3)\n    {\n        String rawMessage = _messages.getString(\"LISTENING\");\n\n        final Object[] messageArguments = {param1, param2, param3};\n        // Create a new MessageFormat to ensure thread safety.\n        // Sharing a MessageFormat and using applyPattern is not thread safe\n        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n\n        final String message = formatter.format(messageArguments);\n\n        return new LogMessage()\n        {\n            public String toString()\n            {\n                return message;\n            }\n\n            public String getLogHierarchy()\n            {\n                return LISTENING_LOG_HIERARCHY;\n            }\n\n            @Override\n            public boolean equals(final Object o)\n            {\n                if (this == o)\n                {\n                    return true;\n                }\n                if (o == null || getClass() != o.getClass())\n                {\n                    return false;\n                }\n\n                final LogMessage that = (LogMessage) o;\n\n                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());\n\n            }\n\n            @Override\n            public int hashCode()\n            {\n                int result = toString().hashCode();\n                result = 31 * result + getLogHierarchy().hashCode();\n                return result;\n            }\n        };\n    }\n\n    /**\n     * Log a ManagementConsole message of the Format:\n     * <pre>MNG-1005 : {0} Management Stopped</pre>\n     * Optional values are contained in [square brackets] and are numbered\n     * sequentially in the method call.\n     *\n     */\n    public static LogMessage STOPPED(String param1)\n    {\n        String rawMessage = _messages.getString(\"STOPPED\");\n\n        final Object[] messageArguments = {param1};\n        // Create a new MessageFormat to ensure thread safety.\n        // Sharing a MessageFormat and using applyPattern is not thread safe\n        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n\n        final String message = formatter.format(messageArguments);\n\n        return new LogMessage()\n        {\n            public String toString()\n            {\n                return message;\n            }\n\n            public String getLogHierarchy()\n            {\n                return STOPPED_LOG_HIERARCHY;\n            }\n\n            @Override\n            public boolean equals(final Object o)\n            {\n                if (this == o)\n                {\n                    return true;\n                }\n                if (o == null || getClass() != o.getClass())\n                {\n                    return false;\n                }\n\n                final LogMessage that = (LogMessage) o;\n\n                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());\n\n            }\n\n            @Override\n            public int hashCode()\n            {\n                int result = toString().hashCode();\n                result = 31 * result + getLogHierarchy().hashCode();\n                return result;\n            }\n        };\n    }\n\n    /**\n     * Log a ManagementConsole message of the Format:\n     * <pre>MNG-1008 : Close : User {0}</pre>\n     * Optional values are contained in [square brackets] and are numbered\n     * sequentially in the method call.\n     *\n     */\n    public static LogMessage CLOSE(String param1)\n    {\n        String rawMessage = _messages.getString(\"CLOSE\");\n\n        final Object[] messageArguments = {param1};\n        // Create a new MessageFormat to ensure thread safety.\n        // Sharing a MessageFormat and using applyPattern is not thread safe\n        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n\n        final String message = formatter.format(messageArguments);\n\n        return new LogMessage()\n        {\n            public String toString()\n            {\n                return message;\n            }\n\n            public String getLogHierarchy()\n            {\n                return CLOSE_LOG_HIERARCHY;\n            }\n\n            @Override\n            public boolean equals(final Object o)\n            {\n                if (this == o)\n                {\n                    return true;\n                }\n                if (o == null || getClass() != o.getClass())\n                {\n                    return false;\n                }\n\n                final LogMessage that = (LogMessage) o;\n\n                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());\n\n            }\n\n            @Override\n            public int hashCode()\n            {\n                int result = toString().hashCode();\n                result = 31 * result + getLogHierarchy().hashCode();\n                return result;\n            }\n        };\n    }\n\n    /**\n     * Log a ManagementConsole message of the Format:\n     * <pre>MNG-1003 : Shutting down : {0} : port {1,number,#}</pre>\n     * Optional values are contained in [square brackets] and are numbered\n     * sequentially in the method call.\n     *\n     */\n    public static LogMessage SHUTTING_DOWN(String param1, Number param2)\n    {\n        String rawMessage = _messages.getString(\"SHUTTING_DOWN\");\n\n        final Object[] messageArguments = {param1, param2};\n        // Create a new MessageFormat to ensure thread safety.\n        // Sharing a MessageFormat and using applyPattern is not thread safe\n        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n\n        final String message = formatter.format(messageArguments);\n\n        return new LogMessage()\n        {\n            public String toString()\n            {\n                return message;\n            }\n\n            public String getLogHierarchy()\n            {\n                return SHUTTING_DOWN_LOG_HIERARCHY;\n            }\n\n            @Override\n            public boolean equals(final Object o)\n            {\n                if (this == o)\n                {\n                    return true;\n                }\n                if (o == null || getClass() != o.getClass())\n                {\n                    return false;\n                }\n\n                final LogMessage that = (LogMessage) o;\n\n                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());\n\n            }\n\n            @Override\n            public int hashCode()\n            {\n                int result = toString().hashCode();\n                result = 31 * result + getLogHierarchy().hashCode();\n                return result;\n            }\n        };\n    }\n\n    /**\n     * Log a ManagementConsole message of the Format:\n     * <pre>MNG-1001 : {0} Management Startup</pre>\n     * Optional values are contained in [square brackets] and are numbered\n     * sequentially in the method call.\n     *\n     */\n    public static LogMessage STARTUP(String param1)\n    {\n        String rawMessage = _messages.getString(\"STARTUP\");\n\n        final Object[] messageArguments = {param1};\n        // Create a new MessageFormat to ensure thread safety.\n        // Sharing a MessageFormat and using applyPattern is not thread safe\n        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n\n        final String message = formatter.format(messageArguments);\n\n        return new LogMessage()\n        {\n            public String toString()\n            {\n                return message;\n            }\n\n            public String getLogHierarchy()\n            {\n                return STARTUP_LOG_HIERARCHY;\n            }\n\n            @Override\n            public boolean equals(final Object o)\n            {\n                if (this == o)\n                {\n                    return true;\n                }\n                if (o == null || getClass() != o.getClass())\n                {\n                    return false;\n                }\n\n                final LogMessage that = (LogMessage) o;\n\n                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());\n\n            }\n\n            @Override\n            public int hashCode()\n            {\n                int result = toString().hashCode();\n                result = 31 * result + getLogHierarchy().hashCode();\n                return result;\n            }\n        };\n    }\n\n    /**\n     * Log a ManagementConsole message of the Format:\n     * <pre>MNG-1004 : {0} Management Ready</pre>\n     * Optional values are contained in [square brackets] and are numbered\n     * sequentially in the method call.\n     *\n     */\n    public static LogMessage READY(String param1)\n    {\n        String rawMessage = _messages.getString(\"READY\");\n\n        final Object[] messageArguments = {param1};\n        // Create a new MessageFormat to ensure thread safety.\n        // Sharing a MessageFormat and using applyPattern is not thread safe\n        MessageFormat formatter = new MessageFormat(rawMessage, _currentLocale);\n\n        final String message = formatter.format(messageArguments);\n\n        return new LogMessage()\n        {\n            public String toString()\n            {\n                return message;\n            }\n\n            public String getLogHierarchy()\n            {\n                return READY_LOG_HIERARCHY;\n            }\n\n            @Override\n            public boolean equals(final Object o)\n            {\n                if (this == o)\n                {\n                    return true;\n                }\n                if (o == null || getClass() != o.getClass())\n                {\n                    return false;\n                }\n\n                final LogMessage that = (LogMessage) o;\n\n                return getLogHierarchy().equals(that.getLogHierarchy()) && toString().equals(that.toString());\n\n            }\n\n            @Override\n            public int hashCode()\n            {\n                int result = toString().hashCode();\n                result = 31 * result + getLogHierarchy().hashCode();\n                return result;\n            }\n        };\n    }\n\n\n    private ManagementConsoleMessages()\n    {\n    }\n\n}\n","binary":"false","copies":"2","sample_repo_name":"apache/qpid-java","sample_ref":"refs/heads/trunk","sample_path":"broker-core/src/main/java/org/apache/qpid/server/logging/messages/ManagementConsoleMessages.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e45e6e0cfe0a2b6157434bb96b44f66dd46dca7a","size":"4688","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cassandra.db.commitlog;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport java.util.Comparator;\n\nimport com.google.common.base.Function;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.Ordering;\n\nimport org.apache.cassandra.db.TypeSizes;\nimport org.apache.cassandra.io.ISerializer;\nimport org.apache.cassandra.io.sstable.SSTableReader;\n\npublic class ReplayPosition implements Comparable<ReplayPosition>\n{\n    public static final ReplayPositionSerializer serializer = new ReplayPositionSerializer();\n\n    // NONE is used for SSTables that are streamed from other nodes and thus have no relationship\n    // with our local commitlog. The values satisfy the critera that\n    //  - no real commitlog segment will have the given id\n    //  - it will sort before any real replayposition, so it will be effectively ignored by getReplayPosition\n    public static final ReplayPosition NONE = new ReplayPosition(-1, 0);\n\n    /**\n     * Convenience method to compute the replay position for a group of SSTables.\n     * @param sstables\n     * @return the most recent (highest) replay position\n     */\n    public static ReplayPosition getReplayPosition(Iterable<? extends SSTableReader> sstables)\n    {\n        if (Iterables.isEmpty(sstables))\n            return NONE;\n\n        Function<SSTableReader, ReplayPosition> f = new Function<SSTableReader, ReplayPosition>()\n        {\n            public ReplayPosition apply(SSTableReader sstable)\n            {\n                return sstable.getReplayPosition();\n            }\n        };\n        Ordering<ReplayPosition> ordering = Ordering.from(ReplayPosition.comparator);\n        return ordering.max(Iterables.transform(sstables, f));\n    }\n\n\n    public final long segment;\n    public final int position;\n\n    public static final Comparator<ReplayPosition> comparator = new Comparator<ReplayPosition>()\n    {\n        public int compare(ReplayPosition o1, ReplayPosition o2)\n        {\n            if (o1.segment != o2.segment)\n                return Long.valueOf(o1.segment).compareTo(o2.segment);\n\n            return Integer.valueOf(o1.position).compareTo(o2.position);\n        }\n    };\n\n    public ReplayPosition(long segment, int position)\n    {\n        this.segment = segment;\n        assert position >= 0;\n        this.position = position;\n    }\n\n    public int compareTo(ReplayPosition other)\n    {\n        return comparator.compare(this, other);\n    }\n\n    @Override\n    public boolean equals(Object o)\n    {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        ReplayPosition that = (ReplayPosition) o;\n\n        if (position != that.position) return false;\n        return segment == that.segment;\n    }\n\n    @Override\n    public int hashCode()\n    {\n        int result = (int) (segment ^ (segment >>> 32));\n        result = 31 * result + position;\n        return result;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"ReplayPosition(\" +\n               \"segmentId=\" + segment +\n               \", position=\" + position +\n               ')';\n    }\n\n    public ReplayPosition clone()\n    {\n        return new ReplayPosition(segment, position);\n    }\n\n    public static class ReplayPositionSerializer implements ISerializer<ReplayPosition>\n    {\n        public void serialize(ReplayPosition rp, DataOutput out) throws IOException\n        {\n            out.writeLong(rp.segment);\n            out.writeInt(rp.position);\n        }\n\n        public ReplayPosition deserialize(DataInput in) throws IOException\n        {\n            return new ReplayPosition(in.readLong(), in.readInt());\n        }\n\n        public long serializedSize(ReplayPosition rp, TypeSizes typeSizes)\n        {\n            return typeSizes.sizeof(rp.segment) + typeSizes.sizeof(rp.position);\n        }\n    }\n}\n","binary":"false","copies":"2","sample_repo_name":"Stratio/cassandra","sample_ref":"refs/heads/trunk","sample_path":"src/java/org/apache/cassandra/db/commitlog/ReplayPosition.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a20c2204978fcb788953b830bd98404b2cc879e4","size":"2753","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.ideaplugin.bean;\n\nimport java.util.ArrayList;\n\npublic class ServiceObj {\n    private String serviceName;\n    private String serviceClass;\n    private ArrayList operations;\n\n    public ServiceObj(String serviceName, String serviceClass, ArrayList operations) {\n        this.serviceName = serviceName;\n        this.serviceClass = serviceClass;\n        this.operations = operations;\n    }\n\n    public String getServiceName() {\n        return serviceName;\n    }\n\n    public String getServiceClass() {\n        return serviceClass;\n    }\n\n    public ArrayList getOperations() {\n        return operations;\n    }\n\n    public String toString() {\n        String serviceXML = \"<service name=\\\"\" + serviceName + \"\\\" >\\n\" +\n                \"   <description>\\n\" +\n                \"       Please Type your service description here\\n\" +\n                \"   </description>\\n\" +\n                \"   <messageReceivers>\\n\"+\n                \"       <messageReceiver mep=\\\"http://www.w3.org/ns/wsdl/in-only\\\" \\n\"+\n                \"       class=\\\"org.apache.axis2.rpc.receivers.RPCInOnlyMessageReceiver\\\" />\\n \"+\n                \"       <messageReceiver mep=\\\"http://www.w3.org/ns/wsdl/in-out\\\"\\n \" +\n                \"       class=\\\"org.apache.axis2.rpc.receivers.RPCMessageReceiver\\\" /> \\n\" +\n                \"   </messageReceivers>\\n \"+\n                \"   <parameter name=\\\"ServiceClass\\\" locked=\\\"false\\\">\" + serviceClass + \"</parameter>\\n\";\n        if (operations.size() > 0) {\n            serviceXML = serviceXML + \" <excludeOperations>\\n\";\n            for (int i = 0; i < operations.size(); i++) {\n                String s = (String) operations.get(i);\n                String op = \"       <operation>\" + s + \"</operation>\\n\";\n                serviceXML = serviceXML + op;\n            }\n            serviceXML = serviceXML + \" </excludeOperations>\\n\";\n        }\n        serviceXML = serviceXML + \"</service>\\n\";\n        return serviceXML;\n    }\n\n}\n","binary":"false","copies":"2","sample_repo_name":"apache/axis2-java","sample_ref":"refs/heads/trunk","sample_path":"modules/tool/axis2-idea-plugin/src/main/java/org/apache/ideaplugin/bean/ServiceObj.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d0fb10280c42561b1023ca75ae92aee01ec64bfe","size":"19445","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.parameter;\n\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.logging.Level;\nimport java.util.logging.LogRecord;\nimport java.lang.reflect.Array;\nimport javax.measure.unit.Unit;\nimport javax.measure.converter.UnitConverter;\nimport javax.measure.converter.ConversionException;\nimport org.opengis.metadata.Identifier;\nimport org.opengis.parameter.ParameterDescriptor;\nimport org.opengis.parameter.GeneralParameterDescriptor;\nimport org.opengis.parameter.InvalidParameterValueException;\nimport org.apache.sis.internal.referencing.EPSGParameterDomain;\nimport org.apache.sis.internal.system.Semaphores;\nimport org.apache.sis.internal.system.Loggers;\nimport org.apache.sis.measure.Range;\nimport org.apache.sis.measure.Units;\nimport org.apache.sis.util.Numbers;\nimport org.apache.sis.util.logging.Logging;\nimport org.apache.sis.util.resources.Errors;\nimport org.apache.sis.util.resources.Vocabulary;\n\n\n/**\n * Verifies the validity of a given value.\n * An instance of {@code Verifier} is created only if an error is detected.\n * In such case, the error message is given by {@link #message(Map, String, Object)}.\n *\n * @author  Martin Desruisseaux (IRD, Geomatys)\n * @since   0.4\n * @version 0.7\n * @module\n */\nfinal class Verifier {\n    /**\n     * The {@link Errors.Keys} value that describe the invalid value.\n     */\n    private final short errorKey;\n\n    /**\n     * {@code true} if the last element in {@link #arguments} shall be set to the erroneous value.\n     */\n    private final boolean needsValue;\n\n    /**\n     * The arguments to be used with the error message to format.\n     * The current implementation relies on the following invariants:\n     *\n     * <ul>\n     *   <li>The first element in this array will be the parameter name. Before the name is known,\n     *       this element is either {@code null} or the index to append to the name.</li>\n     *   <li>The last element shall be set to the erroneous value if {@link #needsValue} is {@code true}.</li>\n     * </ul>\n     */\n    private final Object[] arguments;\n\n    /**\n     * Stores information about an error.\n     */\n    private Verifier(final short errorKey, final boolean needsValue, final Object... arguments) {\n        this.errorKey   = errorKey;\n        this.needsValue = needsValue;\n        this.arguments  = arguments;\n    }\n\n    /**\n     * Ensures that the given value is valid according the specified parameter descriptor.\n     * This method ensures that {@code value} is assignable to the\n     * {@linkplain ParameterDescriptor#getValueClass() expected class}, is between the\n     * {@linkplain ParameterDescriptor#getMinimumValue() minimum} and\n     * {@linkplain ParameterDescriptor#getMaximumValue() maximum} values and is one of the\n     * {@linkplain ParameterDescriptor#getValidValues() set of valid values}.\n     * If the value fails any of those tests, then an exception is thrown.\n     *\n     * @param  <T> The type of parameter value. The given {@code value} should typically be an instance of this class.\n     *             This is not required by this method signature but is checked by this method implementation.\n     *\n     * @param  descriptor The parameter descriptor to check against.\n     * @param  value      The value to check, or {@code null}.\n     * @param  unit       The unit of the value to check, or {@code null}.\n     * @return The given value converted to the descriptor unit if any,\n     *         then casted to the descriptor parameterized type.\n     * @throws InvalidParameterValueException if the parameter value is invalid.\n     */\n    static <T> T ensureValidValue(final ParameterDescriptor<T> descriptor, final Object value, final Unit<?> unit)\n            throws InvalidParameterValueException\n    {\n        final Class<T> valueClass = descriptor.getValueClass();\n        /*\n         * Before to verify if the given value is inside the bounds, we need to convert the value\n         * to the units used by the parameter descriptor. The first part of this block verifies\n         * the validity of the unit argument, so we execute it even if 'value' is null.\n         */\n        UnitConverter converter = null;\n        Object convertedValue = value;\n        if (unit != null) {\n            Unit<?> def = descriptor.getUnit();\n            if (def == null) {\n                def = getCompatibleUnit(Parameters.getValueDomain(descriptor), unit);\n                if (def == null) {\n                    final String name = getDisplayName(descriptor);\n                    throw new InvalidParameterValueException(Errors.format(Errors.Keys.UnitlessParameter_1, name), name, unit);\n                }\n            }\n            if (!unit.equals(def)) {\n                final short expectedID = getUnitMessageID(def);\n                if (getUnitMessageID(unit) != expectedID) {\n                    throw new IllegalArgumentException(Errors.format(expectedID, unit));\n                }\n                /*\n                 * Verify the type of the user's value before to perform the unit conversion,\n                 * because the conversion will create a new object not necessarily of the same type.\n                 */\n                if (value != null) {\n                    if (!valueClass.isInstance(value)) {\n                        final String name = getDisplayName(descriptor);\n                        throw new InvalidParameterValueException(\n                                Errors.format(Errors.Keys.IllegalParameterValueClass_3,\n                                name, valueClass, value.getClass()), name, value);\n                    }\n                    /*\n                     * From this point we will perform the actual unit conversion. The value may be either\n                     * a Number instance, or an array of numbers (typically an array of type double[]). In\n                     * the array case, we will store the converted values in a new array of the same type.\n                     */\n                    try {\n                        converter = unit.getConverterToAny(def);\n                    } catch (ConversionException e) {\n                        throw new IllegalArgumentException(Errors.format(Errors.Keys.IncompatibleUnits_2, unit, def), e);\n                    }\n                    Class<?> componentType = valueClass.getComponentType();\n                    if (componentType == null) {\n                        /*\n                         * Usual case where the value is not an array. Convert the value directly.\n                         * Note that the value can only be a number because the unit is associated\n                         * to MeasurementRange, which accepts only numbers.\n                         */\n                        Number n = converter.convert(((Number) value).doubleValue());\n                        try {\n                            convertedValue = Numbers.cast(n, valueClass.asSubclass(Number.class));\n                        } catch (IllegalArgumentException e) {\n                            throw new InvalidParameterValueException(e.getLocalizedMessage(),\n                                    getDisplayName(descriptor), value);\n                        }\n                    } else {\n                        /*\n                         * The value is an array. Creates a new array and store the converted values\n                         * using Array reflection.\n                         */\n                        final int length = Array.getLength(value);\n                        convertedValue = Array.newInstance(componentType, length);\n                        componentType = Numbers.primitiveToWrapper(componentType);\n                        for (int i=0; i<length; i++) {\n                            Number n = (Number) Array.get(value, i);\n                            n = converter.convert(n.doubleValue());         // Value in units that we can compare.\n                            try {\n                                n = Numbers.cast(n, componentType.asSubclass(Number.class));\n                            } catch (IllegalArgumentException e) {\n                                throw new InvalidParameterValueException(e.getLocalizedMessage(),\n                                        getDisplayName(descriptor) + '[' + i + ']', value);\n                            }\n                            Array.set(convertedValue, i, n);\n                        }\n                    }\n                }\n            }\n        }\n        /*\n         * At this point the user's value has been fully converted to the unit of measurement specified\n         * by the ParameterDescriptor.  Now compare the converted value to the restriction given by the\n         * descriptor (set of valid values and range of value domain).\n         */\n        if (convertedValue != null) {\n            final Verifier error;\n            final Set<T> validValues = descriptor.getValidValues();\n            if (descriptor instanceof DefaultParameterDescriptor<?>) {\n                error = ensureValidValue(valueClass, validValues,\n                        ((DefaultParameterDescriptor<?>) descriptor).getValueDomain(), convertedValue);\n            } else {\n                error = ensureValidValue(valueClass, validValues,\n                        descriptor.getMinimumValue(), descriptor.getMaximumValue(), convertedValue);\n            }\n            /*\n             * If we found an error, we will usually throw an exception. An exception to this rule is\n             * when EPSGDataAccess is creating a deprecated ProjectedCRS in which some parameters are\n             * known to be invalid (the CRS was deprecated precisely for that reason). In such cases,\n             * we will log a warning instead than throwing an exception.\n             */\n            if (error != null) {\n                error.convertRange(converter);\n                final String name = getDisplayName(descriptor);\n                final String message = error.message(null, name, value);\n                if (!Semaphores.query(Semaphores.SUSPEND_PARAMETER_CHECK)) {\n                    throw new InvalidParameterValueException(message, name, value);\n                } else {\n                    final LogRecord record = new LogRecord(Level.WARNING, message);\n                    record.setLoggerName(Loggers.COORDINATE_OPERATION);\n                    Logging.log(DefaultParameterValue.class, \"setValue\", record);\n                }\n            }\n        }\n        return valueClass.cast(convertedValue);\n    }\n\n    /**\n     * Compares the given value against the given descriptor properties. If the value is valid, returns {@code null}.\n     * Otherwise returns an object that can be used for formatting the error message.\n     *\n     * @param convertedValue The value <em>converted to the units specified by the descriptor</em>.\n     *        This is not necessarily the user-provided value.\n     */\n    @SuppressWarnings(\"unchecked\")\n    static <T> Verifier ensureValidValue(final Class<T> valueClass, final Set<T> validValues,\n            final Range<?> valueDomain, final Object convertedValue)\n    {\n        final Verifier verifier = ensureValidValue(valueClass, validValues, null, null, convertedValue);\n        if (verifier == null && valueDomain != null) {\n            if (!valueClass.isArray()) {\n                /*\n                 * Following assertion should never fail with DefaultParameterDescriptor instances.\n                 * It could fail if the user overrides DefaultParameterDescriptor.getValueDomain()\n                 * in a way that break the method contract.\n                 */\n                assert valueDomain.getElementType() == valueClass : valueDomain;\n                if (!((Range) valueDomain).contains((Comparable<?>) convertedValue)) {\n                    return new Verifier(Errors.Keys.ValueOutOfRange_4, true, null,\n                            valueDomain.getMinValue(), valueDomain.getMaxValue(), convertedValue);\n                }\n            } else {\n                /*\n                 * Following assertion should never fail under the same condition than above.\n                 */\n                assert valueDomain.getElementType() == Numbers.primitiveToWrapper(valueClass.getComponentType()) : valueDomain;\n                final int length = Array.getLength(convertedValue);\n                for (int i=0; i<length; i++) {\n                    final Object e = Array.get(convertedValue, i);\n                    if (!((Range) valueDomain).contains((Comparable<?>) e)) {\n                        return new Verifier(Errors.Keys.ValueOutOfRange_4, true, i,\n                                valueDomain.getMinValue(), valueDomain.getMaxValue(), e);\n                    }\n                }\n            }\n        }\n        return verifier;\n    }\n\n    /**\n     * Same as {@link #ensureValidValue(Class, Set, Range, Object)}, used as a fallback when\n     * the descriptor is not an instance of {@link DefaultParameterDescriptor}.\n     *\n     * <div class=\"note\"><b>Implementation note:</b>\n     * At the difference of {@code ensureValidValue(\u2026, Range, \u2026)}, this method does not need to verify array elements\n     * because the type returned by {@link ParameterDescriptor#getMinimumValue()} and {@code getMaximumValue()}\n     * methods (namely {@code Comparable<T>}) does not allow usage with arrays.</div>\n     *\n     * @param convertedValue The value <em>converted to the units specified by the descriptor</em>.\n     *        This is not necessarily the user-provided value.\n     */\n    @SuppressWarnings(\"unchecked\")\n    private static <T> Verifier ensureValidValue(final Class<T> valueClass, final Set<T> validValues,\n            final Comparable<T> minimum, final Comparable<T> maximum, final Object convertedValue)\n    {\n        if (!valueClass.isInstance(convertedValue)) {\n            return new Verifier(Errors.Keys.IllegalParameterValueClass_3, false, null, valueClass, convertedValue.getClass());\n        }\n        if (validValues != null && !validValues.contains(convertedValue)) {\n            return new Verifier(Errors.Keys.IllegalParameterValue_2, true, null, convertedValue);\n        }\n        if ((minimum != null && minimum.compareTo((T) convertedValue) > 0) ||\n            (maximum != null && maximum.compareTo((T) convertedValue) < 0))\n        {\n            return new Verifier(Errors.Keys.ValueOutOfRange_4, true, null, minimum, maximum, convertedValue);\n        }\n        return null;\n    }\n\n    /**\n     * Converts the information about an \"value out of range\" error. The range in the error message will be formatted\n     * in the unit given by the user, which is not necessarily the same than the unit of the parameter descriptor.\n     *\n     * @param converter The conversion from user unit to descriptor unit, or {@code null} if none. This method\n     *        uses the inverse of that conversion for converting the given minimum and maximum values.\n     */\n    private void convertRange(UnitConverter converter) {\n        if (converter != null && errorKey == Errors.Keys.ValueOutOfRange_4) {\n            converter = converter.inverse();\n            Object minimumValue = arguments[1];\n            Object maximumValue = arguments[2];\n            minimumValue = (minimumValue != null) ? converter.convert(((Number) minimumValue).doubleValue()) : \"-\u221e\";\n            maximumValue = (maximumValue != null) ? converter.convert(((Number) maximumValue).doubleValue()) :  \"\u221e\";\n            arguments[1] = minimumValue;\n            arguments[2] = maximumValue;\n        }\n    }\n\n    /**\n     * If the given domain of values accepts units of incompatible dimensions, return the unit which is compatible\n     * with the given units. This is a non-public mechanism handling a few parameters in the EPSG database, like\n     * <cite>Ordinate 1 of evaluation point</cite> (EPSG:8617).\n     */\n    private static Unit<?> getCompatibleUnit(final Range<?> valueDomain, final Unit<?> unit) {\n        if (valueDomain instanceof EPSGParameterDomain) {\n            for (final Unit<?> valid : ((EPSGParameterDomain) valueDomain).units) {\n                if (unit.isCompatible(valid)) {\n                    return valid;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Returns an error message for the error detected by\n     * {@link #ensureValidValue(Class, Set, Range, Object)}.\n     *\n     * @param name  The parameter name.\n     * @param value The user-supplied value (not necessarily equals to the converted value).\n     */\n    String message(final Map<?,?> properties, String name, Object value) {\n        final Object index = arguments[0];\n        if (index != null) {\n            name = name + '[' + index + ']';\n            value = Array.get(value, (Integer) index);\n        }\n        arguments[0] = name;\n        if (needsValue) {\n            arguments[arguments.length - 1] = value;\n        }\n        return Errors.getResources(properties).getString(errorKey, arguments);\n    }\n\n    /**\n     * Convenience method returning the name of the specified descriptor.\n     * This method is used mostly for output to be read by human, not for processing.\n     * Consequently, we may consider to returns a localized name in a future version.\n     *\n     * <p>This method is null-safe even if none of the references checked here should be null.\n     * We make this method safe because it is indirectly invoked by methods like {@code toString()}\n     * which are not expected to fail even if the object is invalid.</p>\n     *\n     * <p><b>This method should NOT be invoked for programmatic usage</b> (e.g. setting a parameter\n     * value) because the string returned in case of invalid descriptor is arbitrary.</p>\n     */\n    static String getDisplayName(final GeneralParameterDescriptor descriptor) {\n        if (descriptor != null) {\n            final Identifier name = descriptor.getName();\n            if (name != null) {\n                final String code = name.getCode();\n                if (code != null) {\n                    return code;\n                }\n            }\n        }\n        return Vocabulary.format(Vocabulary.Keys.Unnamed);\n    }\n\n    /**\n     * Returns the unit type as one of error message code.\n     * Used for checking unit with a better error message formatting if needed.\n     */\n    static short getUnitMessageID(final Unit<?> unit) {\n        if (Units.isLinear  (unit)) return Errors.Keys.NonLinearUnit_1;\n        if (Units.isAngular (unit)) return Errors.Keys.NonAngularUnit_1;\n        if (Units.isTemporal(unit)) return Errors.Keys.NonTemporalUnit_1;\n        if (Units.isScale   (unit)) return Errors.Keys.NonScaleUnit_1;\n        return Errors.Keys.IncompatibleUnit_1;\n    }\n}\n","binary":"false","copies":"2","sample_repo_name":"apache/sis","sample_ref":"refs/heads/trunk","sample_path":"core/sis-referencing/src/main/java/org/apache/sis/parameter/Verifier.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a85d649f604738db8c7e1871f700b8936a1df717","size":"2163","content":"/**\n* Licensed to the Apache Software Foundation (ASF) under one or more\n* contributor license agreements. See the NOTICE file distributed with\n* this work for additional information regarding copyright ownership.\n* The ASF licenses this file to You under the Apache License, Version 2.0\n* (the \"License\"); you may not use this file except in compliance with\n* the License. You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\npackage org.apache.manifoldcf.crawler.connectors.confluence.util;\n\n/**\n * <p>Utility class for Confluence connectors</p>\n * \n * @author Antonio David Perez Morales <adperezmorales@gmail.com>\n *\n */\npublic class ConfluenceUtil {\n\n  private static final String ATTACHMENT_ID_PREFIX = \"att\";\n  \n  /**\n   * <p>Generates a repository document identifier for the specific attachment and page to be used for Repository Documents for attachment pages</p>\n   * @param attachmentId\n   * @param pageId\n   * @return a generated \n   */\n  public static String generateRepositoryDocumentIdentifier(String attachmentId, String pageId) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(attachmentId).append(\"-\").append(pageId);\n    return sb.toString();\n  }\n  \n  /**\n   * <p>Checks if the given id is an attachment or not</p>\n   * @param id\n   * @return a {@code Boolean} indicating if the id is related to an attachment or not \n   */\n  public static Boolean isAttachment(String id) {\n    return id.startsWith(ATTACHMENT_ID_PREFIX);\n  }\n  \n  /**\n   * <p>Gets the attachment id and page id from a repository document id</p>\n   * @param id the repository document id\n   * @return an Array containing the attachment and page ids where index 0 is the attachment id and index 1 is the page id\n   */\n  public static String[] getAttachmentAndPageId(String id) {\n    return id.split(\"-\");\n  }\n}\n","binary":"false","copies":"2","sample_repo_name":"apache/manifoldcf","sample_ref":"refs/heads/trunk","sample_path":"connectors/confluence/connector/src/main/java/org/apache/manifoldcf/crawler/connectors/confluence/util/ConfluenceUtil.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ddd8474990ad35134b961fa2e576cb4041c57ef6","size":"4346","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.uima.internal.util;\n\n/**\n * A set of integers, maintained as a sorted array. Note that the actual array used to implement\n * this class grows in larger increments, so it is efficient to use this class even when doing lots\n * of insertions.\n * \n * \n */\npublic class SortedIntSet {\n\n  // Use an IntVector for automatic array management.\n  private IntVector vector;\n\n  /** Default constructor. */\n  public SortedIntSet() {\n    super();\n    this.vector = new IntVector();\n  }\n\n  public SortedIntSet(int[] array) {\n    this();\n    for (int i = 0; i < array.length; i++) {\n      this.add(array[i]);\n    }\n  }\n\n  /**\n   * Find position of <code>ele</code> in set.\n   * \n   * @param ele\n   *          The element we're looking for.\n   * @return The position, if found; a negative value, else. See\n   *         {@link org.apache.uima.internal.util.IntArrayUtils#binarySearch IntArrayUtils.binarySearch()}.\n   */\n  public int find(int ele) {\n    int[] array = this.vector.getArray();\n    return IntArrayUtils.binarySearch(array, ele, 0, this.vector.size());\n  }\n\n  /**\n   * @param ele - \n   * @return <code>true</code> iff <code>ele</code> is contained in\n   *  the set.\n   */\n  public boolean contains(int ele) {\n    return this.find(ele) >= 0;\n  }\n\n  /**\n   * Add element to set.\n   * \n   * @param ele - \n   * @return <code>true</code> iff <code>ele</code> was not already contained in the set.\n   */\n  public boolean add(int ele) {\n    final int pos = this.find(ele);\n    if (pos >= 0) {\n      return false;\n    }\n    this.vector.add(-(pos + 1), ele);\n    return true;\n  }\n\n  /**\n   * Remove element from set.\n   * @param ele - \n   * @return <code>true</code> iff <code>ele</code> was actually contained in the set.\n   */\n  public boolean remove(int ele) {\n    final int pos = this.find(ele);\n    if (pos < 0) {\n      return false;\n    }\n    this.vector.remove(pos);\n    return true;\n  }\n\n  /**\n   * Number of elements in set.\n   * \n   * @return Current number of elements in set.\n   */\n  public int size() {\n    return this.vector.size();\n  }\n\n  /**\n   * Get element at position.\n   * \n   * @param pos\n   *          Get element at this position.\n   * @return The element at this position.\n   */\n  public int get(int pos) {\n    return this.vector.get(pos);\n  }\n\n  public void union(SortedIntSet set) {\n    final int max = set.size();\n    for (int i = 0; i < max; i++) {\n      this.add(set.get(i));\n    }\n  }\n\n  public void removeAll() {\n    this.vector.removeAllElements();\n  }\n\n  public int[] toArray() {\n    return this.vector.toArrayCopy();\n  }\n  \n  public int[] getArray() {\n    return vector.getArray();\n  }\n\n  // public static void main(String [] args) {\n\n  // SortedIntSet set = new SortedIntSet();\n  // assert set.size() == 0;\n  // assert !set.contains(0);\n\n  // set.add(3);\n  // set.add(5);\n  // set.add(1);\n  // assert set.find(1) == 0;\n  // assert set.find(3) == 1;\n  // assert set.find(5) == 2;\n  // assert set.get(0) == 1;\n  // assert set.get(1) == 3;\n  // assert set.get(2) == 5;\n\n  // set.add(2);\n  // set.add(0);\n  // set.add(4);\n\n  // assert set.find(0) == 0;\n  // assert set.find(1) == 1;\n  // assert set.find(2) == 2;\n  // assert set.find(3) == 3;\n  // assert set.find(4) == 4;\n  // assert set.find(5) == 5;\n  // assert set.get(0) == 0;\n  // assert set.get(1) == 1;\n  // assert set.get(2) == 2;\n  // assert set.size() == 6;\n\n  // assert set.remove(1);\n  // assert set.remove(3);\n  // assert set.remove(5);\n  // assert set.get(0) == 0;\n  // assert set.get(1) == 2;\n  // assert set.get(2) == 4;\n\n  // }\n\n}\n","binary":"false","copies":"2","sample_repo_name":"apache/uima-uimaj","sample_ref":"refs/heads/trunk","sample_path":"uimaj-core/src/main/java/org/apache/uima/internal/util/SortedIntSet.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"40264f837e6c31ef26af912982ae4dffb476a743","size":"1836","content":"/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\npackage org.apache.qpid.client;\n\npublic class ConnectionTuneParameters\n{\n    private long _frameMax;\n\n    private int _channelMax;\n\n    /** Heart-beating interval in seconds, null if not set, use 0 to disable */\n    private Integer _heartbeat;\n\n    private float _heartbeatTimeoutFactor;\n\n    public float getHeartbeatTimeoutFactor()\n    {\n        return _heartbeatTimeoutFactor;\n    }\n\n    public void setHeartbeatTimeoutFactor(float heartbeatTimeoutFactor)\n    {\n        _heartbeatTimeoutFactor = heartbeatTimeoutFactor;\n    }\n\n    public long getFrameMax()\n    {\n        return _frameMax;\n    }\n\n    public void setFrameMax(long frameMax)\n    {\n        _frameMax = frameMax;\n    }\n\n    public int getChannelMax()\n    {\n        return _channelMax;\n    }\n\n    public void setChannelMax(int channelMax)\n    {\n        _channelMax = channelMax;\n    }    \n\n    public Integer getHeartbeat()\n    {\n        return _heartbeat;\n    }\n\n    public void setHeartbeat(Integer hearbeat)\n    {\n        _heartbeat = hearbeat;\n    }\n}\n","binary":"false","copies":"2","sample_repo_name":"apache/qpid-java","sample_ref":"refs/heads/trunk","sample_path":"client/src/main/java/org/apache/qpid/client/ConnectionTuneParameters.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1aa6de1601389bc055d6e4cbf8360030bcc55ab9","size":"2611","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.util.iso;\n\nimport org.opengis.util.CodeList;\nimport org.apache.sis.util.CharSequences;\nimport org.apache.sis.util.Characters.Filter;\n\n\n/**\n * The filters used by {@link Types#forCodeName(Class, String, boolean)}.\n *\n * @author  Martin Desruisseaux (Geomatys)\n * @since   0.3\n * @version 0.3\n * @module\n */\nfinal class CodeListFilter implements CodeList.Filter {\n    /**\n     * The name to compare during filtering operation.\n     */\n    private final String codename;\n\n    /**\n     * {@code true} if {@link CodeList#valueOf} is allowed to create new code lists.\n     */\n    private final boolean canCreate;\n\n    /**\n     * Creates a new filter for the specified code name.\n     */\n    CodeListFilter(final String codename, final boolean canCreate) {\n        this.codename  = codename;\n        this.canCreate = canCreate;\n    }\n\n    /**\n     * Returns the name of the code to create, or {@code null} if no new code list shall be created.\n     */\n    @Override\n    public String codename() {\n        return canCreate ? codename : null;\n    }\n\n    /**\n     * Returns {@code true} if the given code matches the name we are looking for.\n     */\n    @Override\n    public boolean accept(final CodeList<?> code) {\n        for (final String candidate : code.names()) {\n            if (accept(candidate, codename)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns {@code true} if the given names matches the name we are looking for.\n     * This is defined in a separated method in order to ensure that all code paths\n     * use the same criterion.\n     */\n    static boolean accept(final String candidate, final String codename) {\n        return CharSequences.equalsFiltered(candidate, codename, Filter.LETTERS_AND_DIGITS, true);\n    }\n}\n","binary":"false","copies":"3","sample_repo_name":"apache/sis","sample_ref":"refs/heads/trunk","sample_path":"core/sis-utility/src/main/java/org/apache/sis/util/iso/CodeListFilter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"df75981f07309d000edfebb29f834eaf97ea1ee4","size":"3154","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sis.internal.jaxb.referencing;\n\nimport javax.xml.bind.annotation.XmlElement;\nimport org.opengis.referencing.cs.EllipsoidalCS;\nimport org.apache.sis.referencing.cs.DefaultEllipsoidalCS;\nimport org.apache.sis.internal.jaxb.gco.PropertyType;\n\n\n/**\n * JAXB adapter mapping implementing class to the GeoAPI interface. See\n * package documentation for more information about JAXB and interface.\n *\n * @author  C\u00e9dric Brian\u00e7on (Geomatys)\n * @author  Martin Desruisseaux (Geomatys)\n * @since   0.4\n * @version 0.4\n * @module\n */\npublic final class CS_EllipsoidalCS extends PropertyType<CS_EllipsoidalCS, EllipsoidalCS> {\n    /**\n     * Empty constructor for JAXB only.\n     */\n    public CS_EllipsoidalCS() {\n    }\n\n    /**\n     * Returns the GeoAPI interface which is bound by this adapter.\n     * This method is indirectly invoked by the private constructor\n     * below, so it shall not depend on the state of this object.\n     *\n     * @return {@code EllipsoidalCS.class}\n     */\n    @Override\n    protected Class<EllipsoidalCS> getBoundType() {\n        return EllipsoidalCS.class;\n    }\n\n    /**\n     * Constructor for the {@link #wrap} method only.\n     */\n    private CS_EllipsoidalCS(final EllipsoidalCS cs) {\n        super(cs);\n    }\n\n    /**\n     * Invoked by {@link PropertyType} at marshalling time for wrapping the given value\n     * in a {@code <gml:EllipsoidalCS>} XML element.\n     *\n     * @param  cs The element to marshall.\n     * @return A {@code PropertyType} wrapping the given the element.\n     */\n    @Override\n    protected CS_EllipsoidalCS wrap(final EllipsoidalCS cs) {\n        return new CS_EllipsoidalCS(cs);\n    }\n\n    /**\n     * Invoked by JAXB at marshalling time for getting the actual element to write\n     * inside the {@code <gml:EllipsoidalCS>} XML element.\n     * This is the value or a copy of the value given in argument to the {@code wrap} method.\n     *\n     * @return The element to be marshalled.\n     */\n    @XmlElement(name = \"EllipsoidalCS\")\n    public DefaultEllipsoidalCS getElement() {\n        return DefaultEllipsoidalCS.castOrCopy(metadata);\n    }\n\n    /**\n     * Invoked by JAXB at unmarshalling time for storing the result temporarily.\n     *\n     * @param cs The unmarshalled element.\n     */\n    public void setElement(final DefaultEllipsoidalCS cs) {\n        metadata = cs;\n    }\n}\n","binary":"false","copies":"3","sample_repo_name":"apache/sis","sample_ref":"refs/heads/trunk","sample_path":"core/sis-referencing/src/main/java/org/apache/sis/internal/jaxb/referencing/CS_EllipsoidalCS.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"693c3b27aa9238eec4ee607175c0f92939043fcd","size":"7360","content":"package org.apache.commons.jcs.auxiliary.lateral.socket.udp;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport org.apache.commons.jcs.auxiliary.lateral.LateralCacheAttributes;\nimport org.apache.commons.jcs.auxiliary.lateral.LateralCacheInfo;\nimport org.apache.commons.jcs.auxiliary.lateral.LateralElementDescriptor;\nimport org.apache.commons.jcs.auxiliary.lateral.behavior.ICacheServiceNonLocal;\nimport org.apache.commons.jcs.auxiliary.lateral.behavior.ILateralCacheAttributes;\nimport org.apache.commons.jcs.auxiliary.lateral.behavior.ILateralCacheObserver;\nimport org.apache.commons.jcs.engine.CacheElement;\nimport org.apache.commons.jcs.engine.behavior.ICacheElement;\nimport org.apache.commons.jcs.engine.behavior.ICacheListener;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Serializable;\nimport java.util.Set;\n\npublic class LateralUDPService implements ICacheServiceNonLocal, ILateralCacheObserver\n{\n    private static final Log log =\n        LogFactory.getLog( LateralUDPService.class );\n\n    private ILateralCacheAttributes ilca;\n\n    private LateralUDPSender sender;\n\n    /**\n     * Constructor for the LateralUDPService object\n     *\n     * @param lca\n     * @throws IOException\n     */\n    public LateralUDPService( ILateralCacheAttributes lca )\n        throws IOException\n    {\n\n        this.ilca = lca;\n\n        try\n        {\n            sender = new LateralUDPSender( lca );\n\n        }\n        catch ( IOException e )\n        {\n            log.error( \"Could not create sender\", e );\n\n            throw e;\n        }\n\n    }\n\n    /** Description of the Method */\n    public void update( ICacheElement<K, V> item )\n        throws IOException\n    {\n        update( item, LateralCacheInfo.listenerId );\n    }\n\n\n    /** Description of the Method */\n    public void update( ICacheElement<K, V> item, long requesterId )\n        throws IOException\n    {\n        LateralElementDescriptor led = new LateralElementDescriptor( item );\n        led.requesterId = requesterId;\n        led.command = led.UPDATE;\n        sender.send( led );\n    }\n\n\n    /** Description of the Method */\n    public void remove( String cacheName, K key )\n        throws IOException\n    {\n        remove( cacheName, key, LateralCacheInfo.listenerId );\n    }\n\n\n    /** Description of the Method */\n    public void remove( String cacheName, K key, long requesterId )\n        throws IOException\n    {\n        CacheElement ce = new CacheElement( cacheName, key, null );\n        LateralElementDescriptor led = new LateralElementDescriptor( ce );\n        led.requesterId = requesterId;\n        led.command = led.REMOVE;\n        sender.send( led );\n    }\n\n\n    /** Description of the Method */\n    public void release()\n        throws IOException\n    {\n        // nothing needs to be done\n    }\n\n\n    /** Description of the Method */\n    public void dispose( String cache )\n        throws IOException\n    {\n        //sender = null;\n        // nothing needs to be done\n    }\n\n\n    /** Description of the Method */\n    public Serializable get( String cache )\n        throws IOException\n    {\n        return null;\n        // nothing needs to be done\n    }\n\n\n    /** Description of the Method */\n    public ICacheElement<K, V> get( String cache, Serializable att )\n        throws IOException\n    {\n        return null;\n        // nothing needs to be done\n    }\n\n\n    /** Description of the Method */\n    public Serializable get( String cache, Serializable att, boolean container )\n        throws IOException\n    {\n        return null;\n        // nothing needs to be done\n    }\n\n    /**\n     * Gets the set of keys of objects currently in the group\n     * throws UnsupportedOperationException\n     */\n    public Set<K> getGroupKeys(String cacheName, String group)\n    {\n        if (true)\n        {\n            throw new UnsupportedOperationException(\"Groups not implemented.\");\n        }\n        return null;\n    }\n\n    /** Description of the Method */\n    public void removeAll( String cacheName )\n        throws IOException\n    {\n        removeAll( cacheName, LateralCacheInfo.listenerId );\n    }\n\n\n    /** Description of the Method */\n    public void removeAll( String cacheName, long requesterId )\n        throws IOException\n    {\n        CacheElement ce = new CacheElement( cacheName, \"ALL\", null );\n        LateralElementDescriptor led = new LateralElementDescriptor( ce );\n        led.requesterId = requesterId;\n        led.command = led.REMOVEALL;\n        sender.send( led );\n    }\n\n\n    /** Description of the Method */\n    public static void main( String args[] )\n    {\n        try\n        {\n            LateralUDPSender sender = new LateralUDPSender( new LateralCacheAttributes() );\n\n            // process user input till done\n            boolean notDone = true;\n            String message = null;\n            // wait to dispose\n            BufferedReader br = new BufferedReader( new InputStreamReader( System.in ) );\n\n            while ( notDone )\n            {\n                System.out.println( \"enter mesage:\" );\n                message = br.readLine();\n                CacheElement ce = new CacheElement( \"test\", \"test\", message );\n                LateralElementDescriptor led = new LateralElementDescriptor( ce );\n                sender.send( led );\n            }\n        }\n        catch ( Exception e )\n        {\n            System.out.println( e.toString() );\n        }\n    }\n\n\n    // ILateralCacheObserver methods, do nothing here since\n    // the connection is not registered, the udp service is\n    // is not registered.\n    /**\n     * Adds a feature to the CacheListener attribute of the LateralUDPService\n     * object\n     *\n     * @param cacheName The feature to be added to the CacheListener attribute\n     * @param obj The feature to be added to the CacheListener attribute\n     */\n    public void addCacheListener( String cacheName, ICacheListener obj )\n        throws IOException { }\n\n\n    /**\n     * Adds a feature to the CacheListener attribute of the LateralUDPService\n     * object\n     *\n     * @param obj The feature to be added to the CacheListener attribute\n     */\n    public void addCacheListener( ICacheListener obj )\n        throws IOException { }\n\n\n    /** Description of the Method */\n    public void removeCacheListener( String cacheName, ICacheListener obj )\n        throws IOException { }\n\n\n    /** Description of the Method */\n    public void removeCacheListener( ICacheListener obj )\n        throws IOException { }\n\n}\n// end class\n\n","binary":"false","copies":"3","sample_repo_name":"apache/commons-jcs","sample_ref":"refs/heads/trunk","sample_path":"src/experimental/org/apache/commons/jcs/auxiliary/lateral/socket/udp/LateralUDPService.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"eea28e7c30a452dc19c7ea77e1062bfab5ea3035","size":"14472","content":"/*\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\npackage org.apache.batik.ext.awt.image.renderable;\n\nimport java.awt.Composite;\nimport java.awt.Graphics2D;\nimport java.awt.Rectangle;\nimport java.awt.RenderingHints;\nimport java.awt.Shape;\nimport java.awt.color.ColorSpace;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.Rectangle2D;\nimport java.awt.image.RenderedImage;\nimport java.awt.image.renderable.RenderContext;\nimport java.awt.image.renderable.RenderableImage;\nimport java.lang.ref.Reference;\nimport java.lang.ref.SoftReference;\nimport java.util.Iterator;\nimport java.util.ListIterator;\nimport java.util.List;\n\nimport org.apache.batik.ext.awt.image.CompositeRule;\nimport org.apache.batik.ext.awt.image.GraphicsUtil;\nimport org.apache.batik.ext.awt.image.SVGComposite;\nimport org.apache.batik.ext.awt.image.rendered.AffineRed;\nimport org.apache.batik.ext.awt.image.rendered.TileCacheRed;\n\n/**\n * Interface for implementing filter resolution.\n *\n * @author <a href=\"mailto:vincent.hardy@eng.sun.com\">Vincent Hardy</a>\n * @version $Id$\n */\npublic class FilterResRable8Bit extends AbstractRable\n    implements FilterResRable, PaintRable {\n\n    /**\n     * Filter resolution along the x-axis\n     */\n    private int filterResolutionX = -1;\n\n    /**\n     * Filter resolution along the y-axis\n     */\n    private int filterResolutionY = -1;\n\n    public FilterResRable8Bit() {\n        // System.out.println(\"Using FilterResRable8bit...\");\n    }\n\n\n    public FilterResRable8Bit(Filter src, int filterResX, int filterResY) {\n        init(src, null);\n        setFilterResolutionX(filterResX);\n        setFilterResolutionY(filterResY);\n    }\n\n    /**\n     * Returns the source to be cropped.\n     */\n    public Filter getSource() {\n        return (Filter)srcs.get(0);\n    }\n\n    /**\n     * Sets the source to be cropped\n     * @param src image to offset.\n     */\n    public void setSource(Filter src){\n        init(src, null);\n    }\n\n    /**\n     * Returns the resolution along the X axis.\n     */\n    public int getFilterResolutionX(){\n        return filterResolutionX;\n    }\n\n    /**\n     * Sets the resolution along the X axis, i.e., the maximum\n     * size for intermediate images along that axis.\n     * The value should be greater than zero to have an effect.\n     * Negative values are illegal.\n     */\n    public void setFilterResolutionX(int filterResolutionX){\n        if(filterResolutionX < 0){\n            throw new IllegalArgumentException();\n        }\n        touch();\n        this.filterResolutionX = filterResolutionX;\n    }\n\n    /**\n     * Returns the resolution along the Y axis.\n     */\n    public int getFilterResolutionY(){\n        return filterResolutionY;\n    }\n\n    /**\n     * Sets the resolution along the Y axis, i.e., the maximum\n     * size for intermediate images along that axis.\n     * If the Y-value is less than zero, the scale applied to\n     * the rendered images is computed to preserve the image's aspect ratio\n     */\n    public void setFilterResolutionY(int filterResolutionY){\n        touch();\n        this.filterResolutionY = filterResolutionY;\n    }\n\n\n    /**\n     * This returns true if <code>ri</code> and all of <code>ri</code>'s\n     * sources implement the PaintRable interface.  This is used to\n     * indicate that the chain has a good potential for bypassing the\n     * filterRes operation entirely.\n     *\n     * Ideally there would be a checkPaintRable method in PaintRable\n     * that could be used to get a definate answer about a filters\n     * ability to draw directly to a Graphics2D (this can sometimes\n     * 'fail' because of the way the Graphics2D is currently\n     * configured).\n     */\n    public boolean allPaintRable(RenderableImage ri) {\n        if (!(ri instanceof PaintRable))\n            return false;\n\n        List v = ri.getSources();\n        // No sources and we are PaintRable so the chain is PaintRable.\n        if (v == null) return true;\n\n        Iterator i = v.iterator();\n        while (i.hasNext()) {\n            RenderableImage nri = (RenderableImage)i.next();\n            // A source is not paintRable so we are not 100% paintRable.\n            if (!allPaintRable(nri)) return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * This function attempts to distribute the filterRes operation\n     * across src.  Right now it knows about two operations, pad and\n     * composite.  It's main target is the composite but often pad\n     * operations are sprinked in the chain so it needs to know about\n     * them.  This list could be extended however if it gets much\n     * longer it should probably be rolled into a new 'helper interface'\n     * like PaintRable.\n     *\n     * NOTE: This is essentially a bad hack, but it is a hack that is\n     *       recomended by the SVG specification so I do it.\n     */\n    public boolean distributeAcross(RenderableImage src, Graphics2D g2d) {\n        boolean ret;\n        if (src instanceof PadRable) {\n            PadRable pad = (PadRable)src;\n            Shape clip = g2d.getClip();\n            g2d.clip(pad.getPadRect());\n            ret = distributeAcross(pad.getSource(), g2d);\n            g2d.setClip(clip);\n            return ret;\n        }\n\n        if (src instanceof CompositeRable) {\n            CompositeRable comp = (CompositeRable)src;\n            if (comp.getCompositeRule() != CompositeRule.OVER)\n                return false;\n\n            if (false) {\n                // To check colorspaces or to not check colorspaces\n                // _that_ is the question...\n                ColorSpace crCS  = comp.getOperationColorSpace();\n                ColorSpace g2dCS = GraphicsUtil.getDestinationColorSpace(g2d);\n                if ((g2dCS == null) || (g2dCS != crCS))\n                    return false;\n            }\n\n            List v = comp.getSources();\n            if (v == null) return true;\n            ListIterator li = v.listIterator(v.size());\n            while (li.hasPrevious()) {\n                RenderableImage csrc = (RenderableImage)li.previous();\n                if (!allPaintRable(csrc)) {\n                    li.next();\n                    break;\n                }\n            }\n\n            if (!li.hasPrevious()) {\n                // All inputs are PaintRable so just draw directly to\n                // the graphics ignore filter res all togeather...\n                GraphicsUtil.drawImage(g2d, comp);\n                return true;\n            }\n\n            if (!li.hasNext())\n                // None of the trailing inputs are PaintRable so we don't\n                // distribute across this at all.\n                return false;\n\n            // Now we are in the case where some are paintRable and\n            // some aren't.  In this case we create a new\n            // CompositeRable with the first ones, to which we apply\n            // ourselves (limiting the resolution), and after that\n            // we simply draw the remainder...\n            int idx = li.nextIndex();  // index of first PaintRable...\n            Filter f = new CompositeRable8Bit(v.subList(0, idx),\n                                              comp.getCompositeRule(),\n                                              comp.isColorSpaceLinear());\n            f = new FilterResRable8Bit(f, getFilterResolutionX(),\n                                       getFilterResolutionY());\n            GraphicsUtil.drawImage(g2d, f);\n            while (li.hasNext()) {\n                PaintRable pr = (PaintRable)li.next();\n                if (!pr.paintRable(g2d)) {\n                    // Ugg it failed to paint so we need to filterRes it...\n                    Filter     prf  = (Filter)pr;\n                    prf = new FilterResRable8Bit(prf, getFilterResolutionX(),\n                                                 getFilterResolutionY());\n                    GraphicsUtil.drawImage(g2d, prf);\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Should perform the equivilent action as\n     * createRendering followed by drawing the RenderedImage.\n     *\n     * @param g2d The Graphics2D to draw to.\n     * @return true if the paint call succeeded, false if\n     *         for some reason the paint failed (in which\n     *         case a createRendering should be used).\n     */\n    public boolean paintRable(Graphics2D g2d) {\n        // This is a bit of a hack to implement the suggestion of SVG\n        // specification that if the last operation in a filter chain\n        // is a SRC_OVER composite and the source is SourceGraphic it\n        // should be rendered directly to the canvas (by passing\n        // filterRes).  We are actually much more aggressive in\n        // implementing this suggestion since we will bypass filterRes\n        // for all the trailing elements in a SRC_OVER composite that\n        // can be drawn directly to the canvas.\n\n        // System.out.println(\"Calling FilterResRable paintRable\");\n\n        // This optimization only apply if we are using\n        // SrcOver.  Otherwise things break...\n        Composite c = g2d.getComposite();\n        if (!SVGComposite.OVER.equals(c))\n            return false;\n\n        Filter src = getSource();\n        return distributeAcross(src, g2d);\n    }\n\n    /**\n     * Cached Rendered image at filterRes.\n     */\n    Reference resRed = null;\n    float     resScale = 0;\n\n    private float getResScale() {\n        return resScale;\n    }\n\n    private RenderedImage getResRed(RenderingHints hints) {\n        Rectangle2D imageRect = getBounds2D();\n        double resScaleX = getFilterResolutionX()/imageRect.getWidth();\n        double resScaleY = getFilterResolutionY()/imageRect.getHeight();\n\n\n        // System.out.println(\"filterRes X \" + filterResolutionX +\n        //                    \" Y : \" + filterResolutionY);\n\n        float resScale = (float)Math.min(resScaleX, resScaleY);\n\n        RenderedImage ret;\n        if (resScale == this.resScale) {\n            // System.out.println(\"Matched\");\n            ret = (RenderedImage)resRed.get();\n            if (ret != null)\n                return ret;\n        }\n\n        AffineTransform resUsr2Dev;\n        resUsr2Dev = AffineTransform.getScaleInstance(resScale, resScale);\n\n        //\n        // Create a new RenderingContext\n        //\n        RenderContext newRC = new RenderContext(resUsr2Dev, null, hints);\n\n        ret = getSource().createRendering(newRC);\n\n        // This is probably justified since the whole reason to use\n        // The filterRes attribute is because the filter chain is\n        // expensive, otherwise you should let it evaluate at\n        // screen resolution always - right?\n        ret = new TileCacheRed(GraphicsUtil.wrap(ret));\n        this.resScale = resScale;\n        this.resRed   = new SoftReference(ret);\n\n        return ret;\n    }\n\n\n\n    /**\n     *\n     */\n    public RenderedImage createRendering(RenderContext renderContext) {\n        // Get user space to device space transform\n        AffineTransform usr2dev = renderContext.getTransform();\n        if(usr2dev == null){\n            usr2dev = new AffineTransform();\n        }\n\n        RenderingHints hints = renderContext.getRenderingHints();\n\n        // As per specification, a value of zero for the\n        // x-axis or y-axis causes the filter to produce\n        // nothing.\n        // The processing is done as follows:\n        // + if the x resolution is zero, this is a no-op\n        //   else compute the x scale.\n        // + if the y resolution is zero, this is a no-op\n        //   else compute the y resolution from the x scale\n        //   and compute the corresponding y scale.\n        // + if the y or x scale is less than one, insert\n        //   an AffineRable.\n        //   Else, return the source as is.\n        int filterResolutionX = getFilterResolutionX();\n        int filterResolutionY = getFilterResolutionY();\n        // System.out.println(\"FilterResRable: \" + filterResolutionX + \"x\" +\n        //                    filterResolutionY);\n\n        if ((filterResolutionX <= 0) || (filterResolutionY == 0))\n            return null;\n\n        // Find out the renderable area\n        Rectangle2D imageRect = getBounds2D();\n        Rectangle   devRect;\n        devRect = usr2dev.createTransformedShape(imageRect).getBounds();\n\n        // Now, compare the devRect with the filter\n        // resolution hints\n        float scaleX = 1;\n        if(filterResolutionX < devRect.width)\n            scaleX = filterResolutionX / (float)devRect.width;\n\n        float scaleY = 1;\n        if(filterResolutionY < 0)\n            scaleY = scaleX;\n        else if(filterResolutionY < devRect.height)\n            scaleY = filterResolutionY / (float)devRect.height;\n\n        // Only resample if either scaleX or scaleY is\n        // smaller than 1\n        if ((scaleX >= 1) && (scaleY >= 1))\n            return getSource().createRendering(renderContext);\n\n        // System.out.println(\"Using Fixed Resolution...\");\n\n        // Using fixed resolution image since we need an image larger\n        // than this.\n        RenderedImage resRed   = getResRed(hints);\n        float         resScale = getResScale();\n\n        AffineTransform residualAT;\n        residualAT = new AffineTransform(usr2dev.getScaleX()/resScale,\n                                         usr2dev.getShearY()/resScale,\n                                         usr2dev.getShearX()/resScale,\n                                         usr2dev.getScaleY()/resScale,\n                                         usr2dev.getTranslateX(),\n                                         usr2dev.getTranslateY());\n\n        // org.ImageDisplay.showImage(\"AT: \" + newUsr2Dev, result);\n\n        return new AffineRed(GraphicsUtil.wrap(resRed), residualAT, hints);\n    }\n}\n\n","binary":"false","copies":"3","sample_repo_name":"apache/batik","sample_ref":"refs/heads/trunk","sample_path":"batik-awt-util/src/main/java/org/apache/batik/ext/awt/image/renderable/FilterResRable8Bit.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"79fa11ec5b0760b8b8d069bd31a1b86bce5eaf54","size":"1824","content":"package org.apache.commons.ognl;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport java.util.Enumeration;\nimport java.util.NoSuchElementException;\n\n/**\n * Implementation of ElementsAccessor that returns an iterator over integers from 0 up to the given target.\n */\npublic class NumberElementsAccessor\n    implements ElementsAccessor, NumericTypes\n{\n    /**\n     * {@inheritDoc}\n     */\n    public Enumeration<?> getElements( final Object target )\n    {\n        return new Enumeration<Object>()\n        {\n            private int type = OgnlOps.getNumericType( target );\n\n            private long next = 0;\n\n            private long finish = OgnlOps.longValue( target );\n\n            public boolean hasMoreElements()\n            {\n                return next < finish;\n            }\n\n            public Object nextElement()\n            {\n                if ( next >= finish )\n                {\n                    throw new NoSuchElementException();\n                }\n                return OgnlOps.newInteger( type, next++ );\n            }\n        };\n    }\n}\n","binary":"false","copies":"3","sample_repo_name":"apache/commons-ognl","sample_ref":"refs/heads/trunk","sample_path":"src/main/java/org/apache/commons/ognl/NumberElementsAccessor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"424996ef75af6bf09751a76751dadb1493fb018e","size":"15888","content":"/*\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\npackage org.apache.batik.anim.dom;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.DOMException;\nimport org.w3c.dom.svg.SVGAnimatedTransformList;\nimport org.w3c.dom.svg.SVGException;\nimport org.w3c.dom.svg.SVGTransform;\nimport org.w3c.dom.svg.SVGTransformList;\n\nimport org.apache.batik.anim.values.AnimatableTransformListValue;\nimport org.apache.batik.anim.values.AnimatableValue;\nimport org.apache.batik.dom.svg.AbstractSVGTransformList;\nimport org.apache.batik.dom.svg.ListBuilder;\nimport org.apache.batik.dom.svg.LiveAttributeException;\nimport org.apache.batik.dom.svg.SVGItem;\nimport org.apache.batik.parser.ParseException;\n\n/**\n * This class is the implementation of the SVGAnimatedTransformList interface.\n *\n * @author <a href=\"mailto:nicolas.socheleau@bitflash.com\">Nicolas Socheleau</a>\n * @version $Id$\n */\npublic class SVGOMAnimatedTransformList\n        extends AbstractSVGAnimatedValue\n        implements SVGAnimatedTransformList {\n\n    /**\n     * The base value.\n     */\n    protected BaseSVGTransformList baseVal;\n\n    /**\n     * The animated value.\n     */\n    protected AnimSVGTransformList animVal;\n\n    /**\n     * Whether the list is changing.\n     */\n    protected boolean changing;\n\n    /**\n     * Default value for the 'transform' attribute.\n     */\n    protected String defaultValue;\n\n    /**\n     * Creates a new SVGOMAnimatedTransformList.\n     * @param elt The associated element.\n     * @param ns The attribute's namespace URI.\n     * @param ln The attribute's local name.\n     * @param defaultValue The default value if the attribute is not specified.\n     */\n    public SVGOMAnimatedTransformList(AbstractElement elt,\n                                      String ns,\n                                      String ln,\n                                      String defaultValue) {\n        super(elt, ns, ln);\n        this.defaultValue = defaultValue;\n    }\n\n    /**\n     * <b>DOM</b>: Implements {@link SVGAnimatedTransformList#getBaseVal()}.\n     */\n    public SVGTransformList getBaseVal() {\n        if (baseVal == null) {\n            baseVal = new BaseSVGTransformList();\n        }\n        return baseVal;\n    }\n\n    /**\n     * <b>DOM</b>: Implements {@link SVGAnimatedTransformList#getAnimVal()}.\n     */\n    public SVGTransformList getAnimVal() {\n        if (animVal == null) {\n            animVal = new AnimSVGTransformList();\n        }\n        return animVal;\n    }\n\n    /**\n     * Throws an exception if the points list value is malformed.\n     */\n    public void check() {\n        if (!hasAnimVal) {\n            if (baseVal == null) {\n                baseVal = new BaseSVGTransformList();\n            }\n            baseVal.revalidate();\n            if (baseVal.missing) {\n                throw new LiveAttributeException\n                    (element, localName,\n                     LiveAttributeException.ERR_ATTRIBUTE_MISSING, null);\n            }\n            if (baseVal.malformed) {\n                throw new LiveAttributeException\n                    (element, localName,\n                     LiveAttributeException.ERR_ATTRIBUTE_MALFORMED,\n                     baseVal.getValueAsString());\n            }\n        }\n    }\n\n    /**\n     * Returns the base value of the attribute as an {@link AnimatableValue}.\n     */\n    public AnimatableValue getUnderlyingValue(AnimationTarget target) {\n        SVGTransformList tl = getBaseVal();\n        int n = tl.getNumberOfItems();\n        List v = new ArrayList(n);\n        for (int i = 0; i < n; i++) {\n            v.add(tl.getItem(i));\n        }\n        return new AnimatableTransformListValue(target, v);\n    }\n\n    /**\n     * Updates the animated value with the given {@link AnimatableValue}.\n     */\n    protected void updateAnimatedValue(AnimatableValue val) {\n        if (val == null) {\n            hasAnimVal = false;\n        } else {\n            hasAnimVal = true;\n            AnimatableTransformListValue aval =\n                (AnimatableTransformListValue) val;\n            if (animVal == null) {\n                animVal = new AnimSVGTransformList();\n            }\n            animVal.setAnimatedValue(aval.getTransforms());\n        }\n        fireAnimatedAttributeListeners();\n    }\n\n    /**\n     * Called when an Attr node has been added.\n     */\n    public void attrAdded(Attr node, String newv) {\n        if (!changing && baseVal != null) {\n            baseVal.invalidate();\n        }\n        fireBaseAttributeListeners();\n        if (!hasAnimVal) {\n            fireAnimatedAttributeListeners();\n        }\n    }\n\n    /**\n     * Called when an Attr node has been modified.\n     */\n    public void attrModified(Attr node, String oldv, String newv) {\n        if (!changing && baseVal != null) {\n            baseVal.invalidate();\n        }\n        fireBaseAttributeListeners();\n        if (!hasAnimVal) {\n            fireAnimatedAttributeListeners();\n        }\n    }\n\n    /**\n     * Called when an Attr node has been removed.\n     */\n    public void attrRemoved(Attr node, String oldv) {\n        if (!changing && baseVal != null) {\n            baseVal.invalidate();\n        }\n        fireBaseAttributeListeners();\n        if (!hasAnimVal) {\n            fireAnimatedAttributeListeners();\n        }\n    }\n\n    /**\n     * {@link SVGTransformList} implementation for the base transform list value.\n     */\n    public class BaseSVGTransformList extends AbstractSVGTransformList {\n\n        /**\n         * Whether the attribute is missing.\n         */\n        protected boolean missing;\n\n        /**\n         * Whether the attribute is malformed.\n         */\n        protected boolean malformed;\n\n        /**\n         * Create a DOMException.\n         */\n        protected DOMException createDOMException(short type, String key,\n                                                  Object[] args) {\n            return element.createDOMException(type, key, args);\n        }\n\n        /**\n         * Create a SVGException.\n         */\n        protected SVGException createSVGException(short type, String key,\n                                                  Object[] args) {\n\n            return ((SVGOMElement)element).createSVGException(type, key, args);\n        }\n\n        /**\n         * Returns the value of the DOM attribute containing the transform list.\n         */\n        protected String getValueAsString() {\n            Attr attr = element.getAttributeNodeNS(namespaceURI, localName);\n            if (attr == null) {\n                return defaultValue;\n            }\n            return attr.getValue();\n        }\n\n        /**\n         * Sets the DOM attribute value containing the transform list.\n         */\n        protected void setAttributeValue(String value) {\n            try {\n                changing = true;\n                element.setAttributeNS(namespaceURI, localName, value);\n            } finally {\n                changing = false;\n            }\n        }\n\n        /**\n         * Resets the value of the associated attribute.\n         */\n        protected void resetAttribute() {\n            super.resetAttribute();\n            missing = false;\n            malformed = false;\n        }\n\n        /**\n         * Appends the string representation of the given {@link SVGItem} to\n         * the DOM attribute.  This is called in response to an append to\n         * the list.\n         */\n        protected void resetAttribute(SVGItem item) {\n            super.resetAttribute(item);\n            missing = false;\n            malformed = false;\n        }\n\n        /**\n         * Initializes the list, if needed.\n         */\n        protected void revalidate() {\n            if (valid) {\n                return;\n            }\n\n            valid = true;\n            missing = false;\n            malformed = false;\n\n            String s = getValueAsString();\n            if (s == null) {\n                missing = true;\n                return;\n            }\n            try {\n                ListBuilder builder = new ListBuilder(this);\n\n                doParse(s, builder);\n\n                if (builder.getList() != null) {\n                    clear(itemList);\n                }\n                itemList = builder.getList();\n            } catch (ParseException e) {\n                itemList = new ArrayList(1);\n                malformed = true;\n            }\n        }\n    }\n\n    /**\n     * {@link SVGTransformList} implementation for the animated transform list\n     * value.\n     */\n    protected class AnimSVGTransformList extends AbstractSVGTransformList {\n\n        /**\n         * Creates a new AnimSVGTransformList.\n         */\n        public AnimSVGTransformList() {\n            itemList = new ArrayList(1);\n        }\n\n        /**\n         * Create a DOMException.\n         */\n        protected DOMException createDOMException(short type, String key,\n                                                  Object[] args) {\n            return element.createDOMException(type, key, args);\n        }\n\n        /**\n         * Create a SVGException.\n         */\n        protected SVGException createSVGException(short type, String key,\n                                                  Object[] args) {\n\n            return ((SVGOMElement)element).createSVGException(type, key, args);\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link SVGTransformList#getNumberOfItems()}.\n         */\n        public int getNumberOfItems() {\n            if (hasAnimVal) {\n                return super.getNumberOfItems();\n            }\n            return getBaseVal().getNumberOfItems();\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link SVGTransformList#getItem(int)}.\n         */\n        public SVGTransform getItem(int index) throws DOMException {\n            if (hasAnimVal) {\n                return super.getItem(index);\n            }\n            return getBaseVal().getItem(index);\n        }\n\n        /**\n         * Returns the value of the DOM attribute containing the transform list.\n         */\n        protected String getValueAsString() {\n            if (itemList.size() == 0) {\n                return \"\";\n            }\n            StringBuffer sb = new StringBuffer( itemList.size() * 8 );\n            Iterator i = itemList.iterator();\n            if (i.hasNext()) {\n                sb.append(((SVGItem) i.next()).getValueAsString());\n            }\n            while (i.hasNext()) {\n                sb.append(getItemSeparator());\n                sb.append(((SVGItem) i.next()).getValueAsString());\n            }\n            return sb.toString();\n        }\n\n        /**\n         * Sets the DOM attribute value containing the transform list.\n         */\n        protected void setAttributeValue(String value) {\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link SVGTransformList#clear()}.\n         */\n        public void clear() throws DOMException {\n            throw element.createDOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR,\n                 \"readonly.transform.list\", null);\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link SVGTransformList#initialize(SVGTransform)}.\n         */\n        public SVGTransform initialize(SVGTransform newItem)\n                throws DOMException, SVGException {\n            throw element.createDOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR,\n                 \"readonly.transform.list\", null);\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link\n         * SVGTransformList#insertItemBefore(SVGTransform, int)}.\n         */\n        public SVGTransform insertItemBefore(SVGTransform newItem, int index)\n                throws DOMException, SVGException {\n            throw element.createDOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR,\n                 \"readonly.transform.list\", null);\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link\n         * SVGTransformList#replaceItem(SVGTransform, int)}.\n         */\n        public SVGTransform replaceItem(SVGTransform newItem, int index)\n                throws DOMException, SVGException {\n            throw element.createDOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR,\n                 \"readonly.transform.list\", null);\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link SVGTransformList#removeItem(int)}.\n         */\n        public SVGTransform removeItem(int index) throws DOMException {\n            throw element.createDOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR,\n                 \"readonly.transform.list\", null);\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link SVGTransformList#appendItem(SVGTransform)}.\n         */\n        public SVGTransform appendItem(SVGTransform newItem) throws DOMException {\n            throw element.createDOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR,\n                 \"readonly.transform.list\", null);\n        }\n\n        /**\n         * <b>DOM</b>: Implements {@link SVGTransformList#consolidate()}.\n         */\n        public SVGTransform consolidate() {\n            throw element.createDOMException\n                (DOMException.NO_MODIFICATION_ALLOWED_ERR,\n                 \"readonly.transform.list\", null);\n        }\n\n        /**\n         * Sets the animated value to a list of transforms.\n         */\n        protected void setAnimatedValue(Iterator it) {\n            int size = itemList.size();\n            int i = 0;\n            while (i < size && it.hasNext()) {\n                SVGTransformItem t = (SVGTransformItem) itemList.get(i);\n                t.assign((SVGTransform) it.next());\n                i++;\n            }\n            while (it.hasNext()) {\n                appendItemImpl(new SVGTransformItem((SVGTransform) it.next()));\n                i++;\n            }\n            while (size > i) {\n                removeItemImpl(--size);\n            }\n        }\n\n        /**\n         * Sets the animated value to a single transform.\n         */\n        protected void setAnimatedValue(SVGTransform transform) {\n            int size = itemList.size();\n            while (size > 1) {\n                removeItemImpl(--size);\n            }\n            if (size == 0) {\n                appendItemImpl(new SVGTransformItem(transform));\n            } else {\n                SVGTransformItem t = (SVGTransformItem) itemList.get(0);\n                t.assign(transform);\n            }\n        }\n\n        /**\n         * Resets the value of the associated attribute.  Does nothing, since\n         * there is no attribute for an animated value.\n         */\n        protected void resetAttribute() {\n        }\n\n        /**\n         * Resets the value of the associated attribute.  Does nothing, since\n         * there is no attribute for an animated value.\n         */\n        protected void resetAttribute(SVGItem item) {\n        }\n\n        /**\n         * Initializes the list, if needed.  Does nothing, since there is no\n         * attribute to read the list from.\n         */\n        protected void revalidate() {\n            valid = true;\n        }\n    }\n}\n","binary":"false","copies":"3","sample_repo_name":"apache/batik","sample_ref":"refs/heads/trunk","sample_path":"batik-anim/src/main/java/org/apache/batik/anim/dom/SVGOMAnimatedTransformList.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d5801612a744f7802794facc10fe7b78e9bdd0fa","size":"2338","content":"/*\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\npackage org.apache.batik.test;\n\n\n/**\n * This test validates that test properties are inherited from the class that\n * defines the \"class\" attribute down to each test instance that uses the \n * same class.\n *\n * @author <a href=\"mailto:vincent.hardy@sun.com\">Vincent Hardy</a>\n * @version $Id$\n */\npublic class ParametrizedTest extends AbstractTest {\n    protected String A = \"initial_A_value\";\n    protected String B = \"initial_B_value\";\n    protected String expectedA = \"unset\";\n    protected String expectedB = \"unset\";\n\n    public void setA(String A) {\n        this.A = A;\n    }\n\n    public void setB(String B) {\n        this.B = B;\n    }\n\n    public void setExpectedA(String expectedA) {\n        this.expectedA = expectedA;\n    }\n\n    public void setExpectedB(String expectedB) {\n        this.expectedB = expectedB;\n    }\n\n    public String getA() {\n        return A;\n    }\n\n    public String getB() {\n        return B;\n    }\n\n    public String getExpectedA() {\n        return expectedA;\n    }\n\n    public String getExpectedB() {\n        return expectedB;\n    }\n\n    public TestReport runImpl() throws Exception {\n        if (!A.equals(expectedA) || !B.equals(expectedB)) {\n            TestReport r = reportError(\"Unexpected A or B value\");\n            r.addDescriptionEntry(\"expected.A\", expectedA);\n            r.addDescriptionEntry(\"actual.A\", A);\n            r.addDescriptionEntry(\"expected.B\", expectedB);\n            r.addDescriptionEntry(\"actual.B\", B);\n            return r;\n        }\n\n        return reportSuccess();\n    }\n}\n","binary":"false","copies":"4","sample_repo_name":"apache/batik","sample_ref":"refs/heads/trunk","sample_path":"batik-test/src/main/java/org/apache/batik/test/ParametrizedTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"325dc27accd1f6b3a4c861ddb6722b514adcd5d0","size":"1749","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cassandra.io.util;\n\nimport java.io.File;\n\nimport org.apache.cassandra.io.sstable.format.SSTableWriter;\n\npublic class BufferedSegmentedFile extends SegmentedFile\n{\n    public BufferedSegmentedFile(String path, long length)\n    {\n        super(path, length);\n    }\n\n    public static class Builder extends SegmentedFile.Builder\n    {\n        public void addPotentialBoundary(long boundary)\n        {\n            // only one segment in a standard-io file\n        }\n\n        public SegmentedFile complete(String path, SSTableWriter.FinishType finishType)\n        {\n            long length = new File(path).length();\n            return new BufferedSegmentedFile(path, length);\n        }\n    }\n\n    public FileDataInput getSegment(long position)\n    {\n        RandomAccessReader reader = RandomAccessReader.open(new File(path));\n        reader.seek(position);\n        return reader;\n    }\n\n    public void cleanup()\n    {\n    }\n}\n","binary":"false","copies":"4","sample_repo_name":"LatencyUtils/cassandra-stress2","sample_ref":"refs/heads/trunk","sample_path":"src/java/org/apache/cassandra/io/util/BufferedSegmentedFile.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"00f5e050c4dd9970e5c31907db37adc7d8ce9f62","size":"3206","content":"/*\n\n   Derby - Class org.apache.derby.iapi.services.jmx.ManagementService\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\n\npackage org.apache.derby.iapi.services.jmx;\n\nimport org.apache.derby.iapi.error.StandardException;\nimport org.apache.derby.mbeans.ManagementMBean;\n\n/**\n* This interface represents a Management Service. An implementation of this \n* service is started by the Derby monitor if the system property derby.system.jmx has\n* been set. The following services are provided:\n* \n*\t<li> Create and start an instance of MBean server to register MBeans.\n*       <li> Create managed beans (MBeans) to instrument derby resources for\n*            management and monitoring.\n* \n* The following code can be used to locate an instance of this service\n* if running.\n*\n* ManagementService ms = (ManagementService)\n*        Monitor.getSystemModule(Module.JMX);\n*\n*/\npublic interface ManagementService extends ManagementMBean {\n   \n    /**\n     * The domain for all of derby's mbeans: org.apache.derby\n     */\n    public static final String DERBY_JMX_DOMAIN = \"org.apache.derby\";\n    \n    /**\n     * Registers an MBean with the MBean server.\n     * The mbean will be unregistered automatically when Derby shuts down.\n     * \n     * @param bean The MBean to wrap with a StandardMBean and register\n     * @param beanInterface The management interface for the MBean.\n     * @param keyProperties The String representation of the MBean's key properties,\n     * they will be added into the ObjectName with Derby's domain. Key\n     * type should be first with a short name for the bean, typically the\n     * class name without the package.\n     * \n     * @return An identifier that can later be used to unregister the mbean.\n     */\n    public <T> Object registerMBean(T bean,\n            Class<T> beanInterface,\n            String keyProperties)\n            throws StandardException;\n    \n    /**\n     * Unregister a mbean previously registered with registerMBean.\n     * \n     * @param mbeanIdentifier An identifier returned by registerMBean.\n     */\n    public void unregisterMBean(Object mbeanIdentifier);\n\n    /**\n     * Quote an MBean key property value, so that it is safe to pass to\n     * {@link #registerMBean} even if it potentially contains special\n     * characters.\n     *\n     * @param value the value to quote\n     * @return the quoted value\n     * @see javax.management.ObjectName#quote(String)\n     */\n    String quotePropertyValue(String value);\n}\n","binary":"false","copies":"4","sample_repo_name":"apache/derby","sample_ref":"refs/heads/trunk","sample_path":"java/engine/org/apache/derby/iapi/services/jmx/ManagementService.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"128ec3cbb380230bfbeb18742d63913b4bdf9ae6","size":"4893","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.cassandra.streaming.compress;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.DataInputStream;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.RandomAccessFile;\nimport java.util.*;\n\nimport org.junit.Test;\n\nimport org.apache.cassandra.db.composites.*;\nimport org.apache.cassandra.db.marshal.BytesType;\nimport org.apache.cassandra.io.compress.CompressedSequentialWriter;\nimport org.apache.cassandra.io.compress.CompressionMetadata;\nimport org.apache.cassandra.io.compress.CompressionParameters;\nimport org.apache.cassandra.io.compress.SnappyCompressor;\nimport org.apache.cassandra.io.sstable.Component;\nimport org.apache.cassandra.io.sstable.Descriptor;\nimport org.apache.cassandra.io.sstable.metadata.MetadataCollector;\nimport org.apache.cassandra.utils.Pair;\n\n/**\n */\npublic class CompressedInputStreamTest\n{\n    @Test\n    public void testCompressedRead() throws Exception\n    {\n        testCompressedReadWith(new long[]{0L}, false);\n        testCompressedReadWith(new long[]{1L}, false);\n        testCompressedReadWith(new long[]{100L}, false);\n\n        testCompressedReadWith(new long[]{1L, 122L, 123L, 124L, 456L}, false);\n    }\n\n    @Test(expected = EOFException.class)\n    public void testTruncatedRead() throws Exception\n    {\n        testCompressedReadWith(new long[]{1L, 122L, 123L, 124L, 456L}, true);\n    }\n    /**\n     * @param valuesToCheck array of longs of range(0-999)\n     * @throws Exception\n     */\n    private void testCompressedReadWith(long[] valuesToCheck, boolean testTruncate) throws Exception\n    {\n        assert valuesToCheck != null && valuesToCheck.length > 0;\n\n        // write compressed data file of longs\n        File tmp = new File(File.createTempFile(\"cassandra\", \"unittest\").getParent(), \"ks-cf-ib-1-Data.db\");\n        Descriptor desc = Descriptor.fromFilename(tmp.getAbsolutePath());\n        MetadataCollector collector = new MetadataCollector(new SimpleDenseCellNameType(BytesType.instance));\n        CompressionParameters param = new CompressionParameters(SnappyCompressor.instance, 32, Collections.EMPTY_MAP);\n        CompressedSequentialWriter writer = new CompressedSequentialWriter(tmp, desc.filenameFor(Component.COMPRESSION_INFO), param, collector);\n        Map<Long, Long> index = new HashMap<Long, Long>();\n        for (long l = 0L; l < 1000; l++)\n        {\n            index.put(l, writer.getFilePointer());\n            writer.stream.writeLong(l);\n        }\n        writer.close();\n\n        CompressionMetadata comp = CompressionMetadata.create(tmp.getAbsolutePath());\n        List<Pair<Long, Long>> sections = new ArrayList<Pair<Long, Long>>();\n        for (long l : valuesToCheck)\n        {\n            long position = index.get(l);\n            sections.add(Pair.create(position, position + 8));\n        }\n        CompressionMetadata.Chunk[] chunks = comp.getChunksForSections(sections);\n\n        // buffer up only relevant parts of file\n        int size = 0;\n        for (CompressionMetadata.Chunk c : chunks)\n            size += (c.length + 4); // 4bytes CRC\n        byte[] toRead = new byte[size];\n\n        RandomAccessFile f = new RandomAccessFile(tmp, \"r\");\n        int pos = 0;\n        for (CompressionMetadata.Chunk c : chunks)\n        {\n            f.seek(c.offset);\n            pos += f.read(toRead, pos, c.length + 4);\n        }\n        f.close();\n\n        if (testTruncate)\n        {\n            byte [] actuallyRead = new byte[50];\n            System.arraycopy(toRead, 0, actuallyRead, 0, 50);\n            toRead = actuallyRead;\n        }\n\n        // read buffer using CompressedInputStream\n        CompressionInfo info = new CompressionInfo(chunks, param);\n        CompressedInputStream input = new CompressedInputStream(new ByteArrayInputStream(toRead), info);\n        DataInputStream in = new DataInputStream(input);\n\n        for (int i = 0; i < sections.size(); i++)\n        {\n            input.position(sections.get(i).left);\n            long exp = in.readLong();\n            assert exp == valuesToCheck[i] : \"expected \" + valuesToCheck[i] + \" but was \" + exp;\n        }\n    }\n}\n","binary":"false","copies":"4","sample_repo_name":"LatencyUtils/cassandra-stress2","sample_ref":"refs/heads/trunk","sample_path":"test/unit/org/apache/cassandra/streaming/compress/CompressedInputStreamTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c172aa8a4e5199a4acf53e23472b1981a7622551","size":"3175","content":"/*\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\npackage org.apache.batik.css.engine.value.svg;\n\nimport org.apache.batik.css.engine.value.IdentifierManager;\nimport org.apache.batik.css.engine.value.StringMap;\nimport org.apache.batik.css.engine.value.Value;\nimport org.apache.batik.css.engine.value.ValueManager;\nimport org.apache.batik.util.CSSConstants;\nimport org.apache.batik.util.SVGTypes;\n\n/**\n * This class provides a manager for the 'shape-rendering' property values.\n *\n * @author <a href=\"mailto:stephane@hillion.org\">Stephane Hillion</a>\n * @version $Id$\n */\npublic class ShapeRenderingManager extends IdentifierManager {\n\n    /**\n     * The identifier values.\n     */\n    protected static final StringMap values = new StringMap();\n    static {\n        values.put(CSSConstants.CSS_AUTO_VALUE,\n                   SVGValueConstants.AUTO_VALUE);\n        values.put(CSSConstants.CSS_CRISPEDGES_VALUE,\n                   SVGValueConstants.CRISPEDGES_VALUE);\n        values.put(CSSConstants.CSS_GEOMETRICPRECISION_VALUE,\n                   SVGValueConstants.GEOMETRICPRECISION_VALUE);\n        values.put(CSSConstants.CSS_OPTIMIZESPEED_VALUE,\n                   SVGValueConstants.OPTIMIZESPEED_VALUE);\n    }\n\n    /**\n     * Implements {@link\n     * org.apache.batik.css.engine.value.ValueManager#isInheritedProperty()}.\n     */\n    public boolean isInheritedProperty() {\n        return true;\n    }\n\n    /**\n     * Implements {@link ValueManager#isAnimatableProperty()}.\n     */\n    public boolean isAnimatableProperty() {\n        return true;\n    }\n\n    /**\n     * Implements {@link ValueManager#isAdditiveProperty()}.\n     */\n    public boolean isAdditiveProperty() {\n        return false;\n    }\n\n    /**\n     * Implements {@link ValueManager#getPropertyType()}.\n     */\n    public int getPropertyType() {\n        return SVGTypes.TYPE_IDENT;\n    }\n\n    /**\n     * Implements {@link\n     * org.apache.batik.css.engine.value.ValueManager#getPropertyName()}.\n     */\n    public String getPropertyName() {\n        return CSSConstants.CSS_SHAPE_RENDERING_PROPERTY;\n    }\n\n    /**\n     * Implements {@link\n     * org.apache.batik.css.engine.value.ValueManager#getDefaultValue()}.\n     */\n    public Value getDefaultValue() {\n        return SVGValueConstants.AUTO_VALUE;\n    }\n\n    /**\n     * Implements {@link IdentifierManager#getIdentifiers()}.\n     */\n    public StringMap getIdentifiers() {\n        return values;\n    }\n}\n","binary":"false","copies":"4","sample_repo_name":"apache/batik","sample_ref":"refs/heads/trunk","sample_path":"batik-css/src/main/java/org/apache/batik/css/engine/value/svg/ShapeRenderingManager.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3b720ef937ea32fb1d3754242b83dc0fd46e8a60","size":"1625","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * <p>\n * A package containing interfaces and classes related to synchronization of\n * configurations.\n * </p>\n * <p>\n * Whether a configuration object has to be thread-safe or not is application-specific.\n * Therefore, this library allows an application to adapt configuration objects to\n * their requirements regarding thread-safety by assigning them so-called\n * {@code Synchronizer} objects. A configuration invokes its\n * {@code Synchronizer} every time it is accessed (in read or write mode).\n * If configurations are not accessed concurrently by multiple threads, a simple\n * dummy {@code Synchronizer} can be used - this is also the default\n * setting. To ensure thread-safety, a fully functional implementation has to be\n * set.\n * </p>\n *\n * @version $Id$\n */\npackage org.apache.commons.configuration2.sync;\n","binary":"false","copies":"4","sample_repo_name":"apache/commons-configuration","sample_ref":"refs/heads/trunk","sample_path":"src/main/java/org/apache/commons/configuration2/sync/package-info.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6c68f188a0b2e2311b13cd9d87c2b371e5a19fc9","size":"339170","content":"/* $Id: WebcrawlerConnector.java 995042 2010-09-08 13:10:06Z kwright $ */\n\n/**\n* Licensed to the Apache Software Foundation (ASF) under one or more\n* contributor license agreements. See the NOTICE file distributed with\n* this work for additional information regarding copyright ownership.\n* The ASF licenses this file to You under the Apache License, Version 2.0\n* (the \"License\"); you may not use this file except in compliance with\n* the License. You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\npackage org.apache.manifoldcf.crawler.connectors.webcrawler;\n\nimport org.apache.manifoldcf.core.interfaces.*;\nimport org.apache.manifoldcf.agents.interfaces.*;\nimport org.apache.manifoldcf.crawler.interfaces.*;\nimport org.apache.manifoldcf.crawler.system.Logging;\nimport org.apache.manifoldcf.crawler.system.ManifoldCF;\nimport org.apache.manifoldcf.ui.util.Encoder;\n\nimport org.apache.manifoldcf.connectorcommon.interfaces.*;\nimport org.apache.manifoldcf.connectorcommon.fuzzyml.*;\n\nimport org.apache.http.conn.ConnectTimeoutException;\n\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.net.*;\nimport java.util.regex.*;\n\n/** This is the Web Crawler implementation of the IRepositoryConnector interface.\n* This connector may be superceded by one that calls out to python, or by a entirely\n* python Connector Framework, depending on how the winds blow.\n*\n*/\npublic class WebcrawlerConnector extends org.apache.manifoldcf.crawler.connectors.BaseRepositoryConnector\n{\n  public static final String _rcsid = \"@(#)$Id: WebcrawlerConnector.java 995042 2010-09-08 13:10:06Z kwright $\";\n\n  // First, a couple of very important points.\n  // The canonical document identifier is simply a legal URL.  It may have been processed in some way to\n  // map it to a \"base\" form, but that's all.\n  //\n  // A document's version is mostly calculated using a checksum technique.  It is conceivable that we\n  // will eventually want the version to be more cleverly calculated, perhaps by recognizing the document\n  // type and extracting more definitive information, so it will be constructed that way, but right now\n  // there's only going to be the basic checksum done.\n  //\n  // This very basic crawler will extract links only from text, html, or xml - where links can readily be\n  // found.  More robust extraction technology will be plugged in eventually, so the architecture will be\n  // designed for additional plugins.\n  //\n  // The documents that actually get ingested will have to pass the \"fingerprint\" test, which will be lifted\n  // wholesale from the jcifs connector.  This is to avoid overwhelming the ingestion system with crap.\n\n  // Next, a note about \"bins\".\n  // This crawler places each URL into a set of bins, based on the host that the URL goes to.\n  // For example, the URL \"http://foo.metacarta.com/stuff.htm\" would have the following bins\n  // associated with it: \"foo.metacarta.com\", \".metacarta.com\", \".com\", and \"\".  The idea for this\n  // is to make it straightforward to group together different URLs into sets, for throttling and\n  // secure access purposes.\n\n  // These are the signals used by some methods in this class to communicate results\n  protected static final int RESULTSTATUS_FALSE = 0;\n  protected static final int RESULTSTATUS_TRUE = 1;\n  protected static final int RESULTSTATUS_NOTYETDETERMINED = 2;\n\n  /** This represents a list of the mime types that this connector knows how to extract links from.\n  * Documents that are indexable are described by the output connector. */\n  protected static final String[] interestingMimeTypeArray = new String[]\n  {\n    \"application/rtf\",\n    \"application/xls\",\n    \"text/html\",\n    \"text/rtf\",\n    \"application/x-excel\",\n    \"application/x-msexcel\",\n    \"application/x-mspowerpoint\",\n    \"application/x-msword-doc\",\n    \"application/x-msword\",\n    \"application/x-word\",\n    \"text/xml\",\n    \"no-type\",\n    \"text/plain\",\n    \"application/x-rtf\",\n    \"application/x-pdf\",\n    \"text/richtext\",\n    \"Text\",\n    \"Text/html\"\n  };\n\n  protected static final Set<String> interestingMimeTypeMap;\n  static\n  {\n    interestingMimeTypeMap = new HashSet<String>();\n    int i = 0;\n    while (i < interestingMimeTypeArray.length)\n    {\n      String type = interestingMimeTypeArray[i++];\n      interestingMimeTypeMap.add(type);\n    }\n  }\n\n  protected static final Set<String> understoodProtocols;\n  static\n  {\n    understoodProtocols = new HashSet<String>();\n    understoodProtocols.add(\"http\");\n    understoodProtocols.add(\"https\");\n  }\n\n\n  // Usage flag values\n  protected static final int ROBOTS_NONE = 0;\n  protected static final int ROBOTS_DATA = 1;\n  protected static final int ROBOTS_ALL = 2;\n\n  // Relationship types\n  public final static String REL_LINK = \"link\";\n  public final static String REL_REDIRECT = \"redirect\";\n\n  // Activity types\n  public final static String ACTIVITY_FETCH = \"fetch\";\n  public final static String ACTIVITY_PROCESS = \"process\";\n  public final static String ACTIVITY_ROBOTSPARSE = \"robots parse\";\n  public final static String ACTIVITY_LOGON_START = \"begin logon\";\n  public final static String ACTIVITY_LOGON_END = \"end logon\";\n\n  // Fetch types\n  protected final static String FETCH_ROBOTS = \"ROBOTS\";\n  protected final static String FETCH_STANDARD = \"URL\";\n  protected final static String FETCH_LOGIN = \"LOGIN\";\n\n  // Reserved headers\n  protected final static Set<String> reservedHeaders;\n  static\n  {\n    reservedHeaders = new HashSet<String>();\n    reservedHeaders.add(\"age\");\n    reservedHeaders.add(\"www-authenticate\");\n    reservedHeaders.add(\"proxy-authenticate\");\n    reservedHeaders.add(\"date\");\n    reservedHeaders.add(\"set-cookie\");\n    reservedHeaders.add(\"via\");\n  }\n  \n  // Potentially excluded headers\n  protected final static List<String> potentiallyExcludedHeaders;\n  static\n  {\n    potentiallyExcludedHeaders = new ArrayList<String>();\n    potentiallyExcludedHeaders.add(\"last-modified\");\n  }\n  \n  /** Robots usage flag */\n  protected int robotsUsage = ROBOTS_ALL;\n  /** The user-agent for this connector instance */\n  protected String userAgent = null;\n  /** The email address for this connector instance */\n  protected String from = null;\n  /** Connection timeout, milliseconds. */\n  protected int connectionTimeoutMilliseconds = 60000;\n  /** Socket timeout, milliseconds */\n  protected int socketTimeoutMilliseconds = 300000;\n  /** Throttle group name */\n  protected String throttleGroupName = null;\n\n  // Canonicalization enabling/disabling.  Eventually this will probably need to be by regular expression.\n\n  /** The throttle description */\n  protected ThrottleDescription throttleDescription = null;\n  /** The credentials description */\n  protected CredentialsDescription credentialsDescription = null;\n  /** The trusts description */\n  protected TrustsDescription trustsDescription = null;\n\n  /** The robots manager currently used by this instance */\n  protected RobotsManager robotsManager = null;\n  /** The DNS manager currently used by this instance */\n  protected DNSManager dnsManager = null;\n  /** The cookie manager used by this instance */\n  protected CookieManager cookieManager = null;\n\n  /** This flag is set when the instance has been initialized */\n  protected boolean isInitialized = false;\n\n  /** This is where we keep data around between the getVersions() phase and the processDocuments() phase. */\n  protected static DataCache cache = new DataCache();\n\n  /** Proxy host */\n  protected String proxyHost = null;\n  \n  /** Proxy port */\n  protected int proxyPort = -1;\n  \n  /** Proxy auth domain */\n  protected String proxyAuthDomain = null;\n  \n  /** Proxy auth user name */\n  protected String proxyAuthUsername = null;\n  \n  /** Proxy auth password */\n  protected String proxyAuthPassword = null;\n  \n  /** Deny access token for default authority */\n  private final static String defaultAuthorityDenyToken = \"DEAD_AUTHORITY\";\n\n  /** Constructor.\n  */\n  public WebcrawlerConnector()\n  {\n  }\n\n  /** Tell the world what model this connector uses for getDocumentIdentifiers().\n  * This must return a model value as specified above.\n  *@return the model type value.\n  */\n  @Override\n  public int getConnectorModel()\n  {\n    // We return all seeds every time.\n    return MODEL_ALL;\n  }\n\n  /** Install the connector.\n  * This method is called to initialize persistent storage for the connector, such as database tables etc.\n  * It is called when the connector is registered.\n  *@param threadContext is the current thread context.\n  */\n  @Override\n  public void install(IThreadContext threadContext)\n    throws ManifoldCFException\n  {\n    // Install\n    IDBInterface mainDatabase = DBInterfaceFactory.make(threadContext,\n      ManifoldCF.getMasterDatabaseName(),\n      ManifoldCF.getMasterDatabaseUsername(),\n      ManifoldCF.getMasterDatabasePassword());\n\n    RobotsManager rm = new RobotsManager(threadContext,mainDatabase);\n    DNSManager dns = new DNSManager(threadContext,mainDatabase);\n    CookieManager cm = new CookieManager(threadContext,mainDatabase);\n    mainDatabase.beginTransaction();\n    try\n    {\n      rm.install();\n      dns.install();\n      cm.install();\n    }\n    catch (ManifoldCFException e)\n    {\n      mainDatabase.signalRollback();\n      throw e;\n    }\n    catch (Error e)\n    {\n      mainDatabase.signalRollback();\n      throw e;\n    }\n    finally\n    {\n      mainDatabase.endTransaction();\n    }\n  }\n\n\n  /** Uninstall the connector.\n  * This method is called to remove persistent storage for the connector, such as database tables etc.\n  * It is called when the connector is deregistered.\n  *@param threadContext is the current thread context.\n  */\n  @Override\n  public void deinstall(IThreadContext threadContext)\n    throws ManifoldCFException\n  {\n    // Uninstall\n    IDBInterface mainDatabase = DBInterfaceFactory.make(threadContext,\n      ManifoldCF.getMasterDatabaseName(),\n      ManifoldCF.getMasterDatabaseUsername(),\n      ManifoldCF.getMasterDatabasePassword());\n\n    RobotsManager rm = new RobotsManager(threadContext,mainDatabase);\n    DNSManager dns = new DNSManager(threadContext,mainDatabase);\n    CookieManager cm = new CookieManager(threadContext,mainDatabase);\n    mainDatabase.beginTransaction();\n    try\n    {\n      cm.deinstall();\n      rm.deinstall();\n      dns.deinstall();\n    }\n    catch (ManifoldCFException e)\n    {\n      mainDatabase.signalRollback();\n      throw e;\n    }\n    catch (Error e)\n    {\n      mainDatabase.signalRollback();\n      throw e;\n    }\n    finally\n    {\n      mainDatabase.endTransaction();\n    }\n  }\n\n  /** Return the list of activities that this connector supports (i.e. writes into the log).\n  *@return the list.\n  */\n  @Override\n  public String[] getActivitiesList()\n  {\n    return new String[]{ACTIVITY_FETCH, ACTIVITY_PROCESS, ACTIVITY_ROBOTSPARSE, ACTIVITY_LOGON_START, ACTIVITY_LOGON_END};\n  }\n\n\n  /** Return the list of relationship types that this connector recognizes.\n  *@return the list.\n  */\n  @Override\n  public String[] getRelationshipTypes()\n  {\n    return new String[]{REL_LINK,REL_REDIRECT};\n  }\n\n  /** Clear out any state information specific to a given thread.\n  * This method is called when this object is returned to the connection pool.\n  */\n  @Override\n  public void clearThreadContext()\n  {\n    super.clearThreadContext();\n    robotsManager = null;\n    dnsManager = null;\n    cookieManager = null;\n  }\n\n  /** Start a session */\n  protected void getSession()\n    throws ManifoldCFException\n  {\n    // Handle the stuff that requires a thread context\n    if (robotsManager == null || dnsManager == null || cookieManager == null)\n    {\n      IDBInterface databaseHandle = DBInterfaceFactory.make(currentContext,\n        ManifoldCF.getMasterDatabaseName(),\n        ManifoldCF.getMasterDatabaseUsername(),\n        ManifoldCF.getMasterDatabasePassword());\n\n      robotsManager = new RobotsManager(currentContext,databaseHandle);\n      dnsManager = new DNSManager(currentContext,databaseHandle);\n      cookieManager = new CookieManager(currentContext,databaseHandle);\n    }\n\n    // Handle everything else\n    if (!isInitialized)\n    {\n      String x;\n\n      // Either set this from the connection name, or just have one.  Right now, we have one.\n      String throttleGroupName = \"\";\n      \n      String emailAddress = params.getParameter(WebcrawlerConfig.PARAMETER_EMAIL);\n      if (emailAddress == null)\n        throw new ManifoldCFException(\"Missing email address\");\n      userAgent = \"Mozilla/5.0 (ApacheManifoldCFWebCrawler; \"+emailAddress+\")\";\n      from = emailAddress;\n\n      x = params.getParameter(WebcrawlerConfig.PARAMETER_ROBOTSUSAGE);\n      robotsUsage = ROBOTS_ALL;\n      if (x == null || x.length() == 0 || x.equals(\"all\"))\n        robotsUsage = ROBOTS_ALL;\n      else if (x.equals(\"none\"))\n        robotsUsage = ROBOTS_NONE;\n      else if (x.equals(\"data\"))\n        robotsUsage = ROBOTS_DATA;\n\n      throttleDescription = new ThrottleDescription(params);\n      credentialsDescription = new CredentialsDescription(params);\n      trustsDescription = new TrustsDescription(params);\n\n      proxyHost = params.getParameter(WebcrawlerConfig.PARAMETER_PROXYHOST);\n      String proxyPortString = params.getParameter(WebcrawlerConfig.PARAMETER_PROXYPORT);\n      proxyAuthDomain = params.getParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHDOMAIN);\n      proxyAuthUsername = params.getParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHUSERNAME);\n      proxyAuthPassword = params.getObfuscatedParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHPASSWORD);\n\n      proxyPort = -1;\n      if (proxyPortString != null && proxyPortString.length() > 0)\n      {\n        try\n        {\n          proxyPort = Integer.parseInt(proxyPortString);\n        }\n        catch (NumberFormatException e)\n        {\n          throw new ManifoldCFException(e.getMessage(),e);\n        }\n      }\n\n      isInitialized = true;\n    }\n  }\n\n  // All methods below this line will ONLY be called if a connect() call succeeded\n  // on this instance!\n\n  /** This method is periodically called for all connectors that are connected but not\n  * in active use.\n  */\n  @Override\n  public void poll()\n    throws ManifoldCFException\n  {\n    ThrottledFetcher.flushIdleConnections(currentContext);\n  }\n\n  /** Check status of connection.\n  */\n  @Override\n  public String check()\n    throws ManifoldCFException\n  {\n    getSession();\n    return super.check();\n  }\n\n  /** Close the connection.  Call this before discarding the repository connector.\n  */\n  @Override\n  public void disconnect()\n    throws ManifoldCFException\n  {\n    throttleGroupName = null;\n    throttleDescription = null;\n    credentialsDescription = null;\n    trustsDescription = null;\n    userAgent = null;\n    from = null;\n    proxyHost = null;\n    proxyPort = -1;\n    proxyAuthDomain = null;\n    proxyAuthUsername = null;\n    proxyAuthPassword = null;\n\n    isInitialized = false;\n\n    super.disconnect();\n  }\n\n  /** Get the bin name string for a document identifier.  The bin name describes the queue to which the\n  * document will be assigned for throttling purposes.  Throttling controls the rate at which items in a\n  * given queue are fetched; it does not say anything about the overall fetch rate, which may operate on\n  * multiple queues or bins.\n  * For example, if you implement a web crawler, a good choice of bin name would be the server name, since\n  * that is likely to correspond to a real resource that will need real throttle protection.\n  *@param documentIdentifier is the document identifier.\n  *@return the bin name.\n  */\n  @Override\n  public String[] getBinNames(String documentIdentifier)\n  {\n    try\n    {\n      java.net.URI uri = new java.net.URI(documentIdentifier);\n      return new String[]{uri.getHost()};\n    }\n    catch (URISyntaxException e)\n    {\n      return new String[]{\"\"};\n    }\n\n  }\n\n  /** Queue \"seed\" documents.  Seed documents are the starting places for crawling activity.  Documents\n  * are seeded when this method calls appropriate methods in the passed in ISeedingActivity object.\n  *\n  * This method can choose to find repository changes that happen only during the specified time interval.\n  * The seeds recorded by this method will be viewed by the framework based on what the\n  * getConnectorModel() method returns.\n  *\n  * It is not a big problem if the connector chooses to create more seeds than are\n  * strictly necessary; it is merely a question of overall work required.\n  *\n  * The end time and seeding version string passed to this method may be interpreted for greatest efficiency.\n  * For continuous crawling jobs, this method will\n  * be called once, when the job starts, and at various periodic intervals as the job executes.\n  *\n  * When a job's specification is changed, the framework automatically resets the seeding version string to null.  The\n  * seeding version string may also be set to null on each job run, depending on the connector model returned by\n  * getConnectorModel().\n  *\n  * Note that it is always ok to send MORE documents rather than less to this method.\n  * The connector will be connected before this method can be called.\n  *@param activities is the interface this method should use to perform whatever framework actions are desired.\n  *@param spec is a document specification (that comes from the job).\n  *@param seedTime is the end of the time range of documents to consider, exclusive.\n  *@param lastSeedVersion is the last seeding version string for this job, or null if the job has no previous seeding version string.\n  *@param jobMode is an integer describing how the job is being run, whether continuous or once-only.\n  *@return an updated seeding version string, to be stored with the job.\n  */\n  @Override\n  public String addSeedDocuments(ISeedingActivity activities, Specification spec,\n    String lastSeedVersion, long seedTime, int jobMode)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    getSession();\n\n    DocumentURLFilter filter = new DocumentURLFilter(spec);\n\n    // This is the call that's used to seed everything.\n    // We just find the current seeds, and create the appropriate iterator.\n    String seeds = \"\";\n    int i = 0;\n    while (i < spec.getChildCount())\n    {\n      SpecificationNode sn = spec.getChild(i++);\n      if (sn.getType().equals(WebcrawlerConfig.NODE_SEEDS))\n        seeds = sn.getValue();\n    }\n\n    // Break up the seeds string and iterate over the results.\n    List<String> list = stringToArray(seeds);\n    // We must only return valid urls here!!!\n    int index = 0;\n    while (index < list.size())\n    {\n      String urlCandidate = (String)list.get(index++);\n      String documentIdentifier = makeDocumentIdentifier(null,urlCandidate,filter);\n      if (documentIdentifier == null)\n      {\n        // Bad seed.  Log it, and continue!\n        Logging.connectors.warn(\"WEB: Illegal seed URL '\"+urlCandidate+\"'\");\n        continue;\n      }\n      activities.addSeedDocument(documentIdentifier,calculateDocumentEvents(activities,documentIdentifier));\n    }\n    return \"\";\n  }\n\n  // Session login states (so we can use the same fetch logic multiple times)\n\n  /** Normal fetch of content document.  (For all we know, we're logged in already). */\n  protected static final int SESSIONSTATE_NORMAL = 0;\n  /** We're in 'login mode' */\n  protected static final int SESSIONSTATE_LOGIN = 1;\n\n  // Result signals\n  protected static final int RESULT_NO_DOCUMENT = 0;\n  protected static final int RESULT_NO_VERSION = 1;\n  protected static final int RESULT_VERSION_NEEDED = 2;\n  protected static final int RESULT_RETRY_DOCUMENT = 3;\n\n\n  /** Process a set of documents.\n  * This is the method that should cause each document to be fetched, processed, and the results either added\n  * to the queue of documents for the current job, and/or entered into the incremental ingestion manager.\n  * The document specification allows this class to filter what is done based on the job.\n  * The connector will be connected before this method can be called.\n  *@param documentIdentifiers is the set of document identifiers to process.\n  *@param statuses are the currently-stored document versions for each document in the set of document identifiers\n  * passed in above.\n  *@param activities is the interface this method should use to queue up new document references\n  * and ingest documents.\n  *@param jobMode is an integer describing how the job is being run, whether continuous or once-only.\n  *@param usesDefaultAuthority will be true only if the authority in use for these documents is the default one.\n  */\n  @Override\n  public void processDocuments(String[] documentIdentifiers, IExistingVersions statuses, Specification spec,\n    IProcessActivity activities, int jobMode, boolean usesDefaultAuthority)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    getSession();\n\n    // Forced acls\n    String[] acls = getAcls(spec);\n    // Sort it,\n    java.util.Arrays.sort(acls);\n\n    // Get the excluded headers\n    Set<String> excludedHeaders = findExcludedHeaders(spec);\n    \n    // Since document specifications can change, we need to look at each url and filter it as part of the\n    // process of getting version strings.  To do that, we need to compile the DocumentSpecification into\n    // an object that knows how to do this.\n    DocumentURLFilter filter = new DocumentURLFilter(spec);\n\n    String filterVersion = filter.getVersionString();\n    \n    // There are two ways to handle any document that's not available.  The first is to remove it.  The second is to keep it, but mark it with an empty version string.\n    // With the web crawler, the major concern with simply removing the document is that it might be referred to from multiple places - and in addition\n    // it will get requeued every time the parent document is processed.  This is not optimal because it represents churn.\n    // On the other hand, keeping the document in the queue causes the queue to bloat, which is also not optimal, and it makes the crawler basically\n    // incapable of deleting documents.\n    // Since the primary use of the crawler is expected to be repeated intranet crawls,  I've thus chosen to optimize the crawler for accuracy rather than performance\n    // - if the document is gone, I just remove it, and expect churn when recrawling activities occur.\n    for (String documentIdentifier : documentIdentifiers)\n    {\n      // Verify that the url is legal\n      if (!filter.isDocumentAndHostLegal(documentIdentifier))\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Removing url '\"+documentIdentifier+\"' because it's not in the set of allowed ones\");\n        // Use null because we should have already filtered when we queued.\n        activities.deleteDocument(documentIdentifier);\n        continue;\n      }\n      \n      try\n      {\n        // The first thing we need to know is whether this url is part of a session-protected area.  We'll use that information\n        // later to detect redirection to login.\n        SequenceCredentials sessionCredential = getSequenceCredential(documentIdentifier);\n\n        if (Logging.connectors.isDebugEnabled())\n        {\n          if (sessionCredential != null)\n            Logging.connectors.debug(\"Web: For document identifier '\"+documentIdentifier+\"' found session credential key '\"+sessionCredential.getSequenceKey()+\"'\");\n        }\n          \n        // Set up the initial state and state variables.\n        // Fetch status\n        FetchStatus fetchStatus = new FetchStatus();\n\n        // Calculate an event name; we'll need this to control sequencing.\n        String globalSequenceEvent;\n        if (sessionCredential != null)\n        {\n          String sequenceKey = sessionCredential.getSequenceKey();\n          globalSequenceEvent = makeSessionLoginEventName(activities,sequenceKey);\n        }\n        else\n          globalSequenceEvent = null;\n\n        // This is the main 'state loop'.  The code is structured to use the finally clause from the following try to clean up any\n        // events that were created within the loop.  The loop itself has two parts: document fetch, and logic to figure out what state to transition\n        // to (e.g. how to process the fetched document).  A signal variable is used to signal the desired outcome.\n        // We need to be sure we clean up the sequence event in case there's an error, so put a try/finally around everything.\n        try\n        {\n\n          loginAndFetch(fetchStatus,activities,documentIdentifier,sessionCredential,globalSequenceEvent);\n        \n        \n          switch (fetchStatus.resultSignal)\n          {\n          case RESULT_NO_DOCUMENT:\n            if (Logging.connectors.isDebugEnabled())\n              Logging.connectors.debug(\"WEB: Removing url '\"+documentIdentifier+\"'\"+((fetchStatus.contextMessage!=null)?\" because \"+fetchStatus.contextMessage:\"\"),fetchStatus.contextException);\n            activities.deleteDocument(documentIdentifier);\n            break;\n          case RESULT_NO_VERSION:\n            if (Logging.connectors.isDebugEnabled())\n              Logging.connectors.debug(\"WEB: Ignoring url '\"+documentIdentifier+\"'\"+((fetchStatus.contextMessage!=null)?\" because \"+fetchStatus.contextMessage:\"\"),fetchStatus.contextException);\n            \n            // We get here when a document didn't fetch.\n            // No version \n            activities.noDocument(documentIdentifier,\"\");\n            break;\n          case RESULT_VERSION_NEEDED:\n            // Calculate version from document data, which is presumed to be present.\n            StringBuilder sb = new StringBuilder();\n\n            // Acls\n            packList(sb,acls,'+');\n            if (acls.length > 0)\n            {\n              sb.append('+');\n              pack(sb,defaultAuthorityDenyToken,'+');\n            }\n            else\n              sb.append('-');\n\n            // Now, do the metadata. \n            Map<String,Set<String>> metaHash = new HashMap<String,Set<String>>();\n            \n            String[] fixedListStrings = new String[2];\n            // They're all folded into the same part of the version string.\n            int headerCount = 0;\n            Iterator<String> headerIterator = fetchStatus.headerData.keySet().iterator();\n            while (headerIterator.hasNext())\n            {\n              String headerName = headerIterator.next();\n              String lowerHeaderName = headerName.toLowerCase(Locale.ROOT);\n              if (!reservedHeaders.contains(lowerHeaderName) && !excludedHeaders.contains(lowerHeaderName))\n                headerCount += fetchStatus.headerData.get(headerName).size();\n            }\n            String[] fullMetadata = new String[headerCount];\n            headerCount = 0;\n            headerIterator = fetchStatus.headerData.keySet().iterator();\n            while (headerIterator.hasNext())\n            {\n              String headerName = headerIterator.next();\n              String lowerHeaderName = headerName.toLowerCase(Locale.ROOT);\n              if (!reservedHeaders.contains(lowerHeaderName) && !excludedHeaders.contains(lowerHeaderName))\n              {\n                Set<String> valueSet = metaHash.get(headerName);\n                if (valueSet == null)\n                {\n                  valueSet = new HashSet<String>();\n                  metaHash.put(headerName,valueSet);\n                }\n                List<String> headerValues = fetchStatus.headerData.get(headerName);\n                for (String headerValue : headerValues)\n                {\n                  valueSet.add(headerValue);\n                  fixedListStrings[0] = \"header-\"+headerName;\n                  fixedListStrings[1] = headerValue;\n                  StringBuilder newsb = new StringBuilder();\n                  packFixedList(newsb,fixedListStrings,'=');\n                  fullMetadata[headerCount++] = newsb.toString();\n                }\n              }\n            }\n            java.util.Arrays.sort(fullMetadata);\n              \n            packList(sb,fullMetadata,'+');\n            // Done with the parseable part!  Add the checksum.\n            sb.append(fetchStatus.checkSum);\n            // Add the filter version\n            sb.append(\"+\");\n            sb.append(filterVersion);\n              \n            String versionString = sb.toString();\n\n            // Now, extract links.\n            // We'll call the \"link extractor\" series, so we can plug more stuff in over time.\n            boolean indexDocument = extractLinks(documentIdentifier,activities,filter);\n\n            // If scanOnly is set, we never ingest.  But all else is the same.\n            if (!activities.checkDocumentNeedsReindexing(documentIdentifier,versionString))\n              continue;\n            \n            processDocument(activities,documentIdentifier,versionString,indexDocument,metaHash,acls,filter);\n            break;\n          case RESULT_RETRY_DOCUMENT:\n            // Document could not be processed right now.\n            if (Logging.connectors.isDebugEnabled())\n              Logging.connectors.debug(\"WEB: Retrying url '\"+documentIdentifier+\"' later\"+((fetchStatus.contextMessage!=null)?\" because \"+fetchStatus.contextMessage:\"\"),fetchStatus.contextException);\n            activities.retryDocumentProcessing(documentIdentifier);\n            break;\n          default:\n            throw new IllegalStateException(\"Unexpected value for result signal: \"+Integer.toString(fetchStatus.resultSignal));\n          }\n        }\n        finally\n        {\n          // Clean up event, if there is one.\n          if (fetchStatus.sessionState == SESSIONSTATE_LOGIN && globalSequenceEvent != null)\n          {\n            // Terminate the event\n            activities.completeEventSequence(globalSequenceEvent);\n          }\n        }\n      }\n      finally\n      {\n        cache.deleteData(documentIdentifier);\n      }\n    }\n  }\n\n  protected void loginAndFetch(FetchStatus fetchStatus, IProcessActivity activities, String documentIdentifier, SequenceCredentials sessionCredential, String globalSequenceEvent)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    long currentTime = System.currentTimeMillis();\n    // Here's the maximum number of connections we are going to allow.\n    int connectionLimit = 200;\n\n    String currentURI = documentIdentifier;\n\n    // Login pages are special in that I *don't* require them to do a robots check.  The reason why is because it is conceivable that a\n    // site may inadvertantly exclude them via robots, and yet allow content pages to be scanned.  This would effectively exclude session login\n    // for that site if we adhered to the strict policy.  Since login pages have to be exclusively identified as being special, explicit\n    // permission is effectively granted by the user in any case.\n\n    // The result code to be activity logging, or null if no activity logging desired.\n    String activityResultCode = null;\n    // Form data\n    FormData formData = null;\n    \n    while (true)\n    {\n      URL url;\n      try\n      {\n        // Do the mapping from the current host name to the IP address\n        url = new URL(currentURI);\n      }\n      catch (MalformedURLException e)\n      {\n        // currentURI is malformed.\n        // If the document was the primary, we should remove it from the queue.  But if it's part of a login sequence, we'd better just retry later.\n        fetchStatus.contextMessage = \"was not a valid URL: \"+e.getMessage();\n        fetchStatus.contextException = e;\n        activityResultCode = \"-12\";\n        fetchStatus.resultSignal = RESULT_NO_DOCUMENT;\n        break;\n      }\n\n      String hostName = url.getHost();\n      StringBuilder ipAddressBuffer = new StringBuilder();\n      int ipAddressStatus = lookupIPAddress(currentURI,activities,hostName,currentTime,ipAddressBuffer);\n      if (ipAddressStatus == RESULTSTATUS_TRUE)\n      {\n        String ipAddress = ipAddressBuffer.toString();\n        String protocol = url.getProtocol();\n        int port = url.getPort();\n        if (port == -1)\n          port = url.getDefaultPort();\n\n        // Try to fetch the document.  We'll need its bin names first.\n        String[] binNames = getBinNames(currentURI);\n\n        // Get the credentials for this document (if any)\n        PageCredentials credential = getPageCredential(currentURI);\n        IKeystoreManager trustStore;\n        // Save effort - only bother to get a trust store if this is https\n        if (protocol.equalsIgnoreCase(\"https\"))\n          // null return is possible here; indicates \"trust everything\"\n          trustStore = getTrustStore(currentURI);\n        else\n          trustStore = KeystoreManagerFactory.make(\"\");\n        // Check robots, if enabled, and if we're fetching the primary document identifier.  See comment above.\n        int robotsStatus = RESULTSTATUS_TRUE;\n        if (!documentIdentifier.equals(currentURI) || robotsUsage < ROBOTS_DATA || (robotsStatus = checkFetchAllowed(documentIdentifier,protocol,ipAddress,port,credential,trustStore,hostName,binNames,currentTime,\n          url.getFile(),activities,connectionLimit,proxyHost,proxyPort,proxyAuthDomain,proxyAuthUsername,proxyAuthPassword)) == RESULTSTATUS_TRUE)\n        {\n          // Passed the robots check!\n\n          // Find whatever login parameters apply.  This will be null if currentURI is not a login page, and will contain\n          // interesting information if it is.\n          LoginCookies lc = null;\n          if (sessionCredential != null)\n          {\n            lc = cookieManager.readCookies(sessionCredential.getSequenceKey());\n          }\n\n          // Prepare to perform the fetch, and decide what to do with the document.\n          //\n          IThrottledConnection connection = ThrottledFetcher.getConnection(currentContext,\n            throttleGroupName,\n            protocol,ipAddress,port,\n            credential,trustStore,throttleDescription,binNames,connectionLimit,\n            proxyHost,proxyPort,proxyAuthDomain,proxyAuthUsername,proxyAuthPassword,\n            socketTimeoutMilliseconds,connectionTimeoutMilliseconds,\n            activities);\n          try\n          {\n            connection.beginFetch((fetchStatus.sessionState == SESSIONSTATE_LOGIN)?FETCH_LOGIN:FETCH_STANDARD);\n            try\n            {\n              // Execute the fetch!\n              connection.executeFetch(url.getFile(),userAgent,from,\n                false,hostName,formData,lc);\n              int response = connection.getResponseCode();\n\n              if (response == 200 || response == 302 || response == 301)\n              {\n                // If this was part of the login sequence, update the cookies regardless of what else happens\n                if (fetchStatus.sessionState == SESSIONSTATE_LOGIN)\n                {\n                  // Update the cookies\n                  LoginCookies lastFetchCookies = connection.getLastFetchCookies();\n                  cookieManager.updateCookies(sessionCredential.getSequenceKey(),lastFetchCookies);\n                }\n\n                // Decide whether to exclude this document based on what we see here.\n                // Basically, we want to get rid of everything that we (a) don't know what\n                // to do with in the ingestion system, and (b) we can't get useful links from.\n\n                String contentType = extractContentType(connection.getResponseHeader(\"Content-Type\"));\n\n                if (isContentInteresting(activities,currentURI,response,contentType))\n                {\n                  // Treat it as real, and cache it.\n                  fetchStatus.checkSum = cache.addData(activities,currentURI,connection);\n                  fetchStatus.headerData = connection.getResponseHeaders();\n                  fetchStatus.resultSignal = RESULT_VERSION_NEEDED;\n                  activityResultCode = null;\n                }\n                else\n                {\n                  fetchStatus.contextMessage = \"it had the wrong content type ('\"+contentType+\"')\";\n                  fetchStatus.resultSignal = RESULT_NO_DOCUMENT;\n                  activityResultCode = null;\n                }\n              }\n              else\n              {\n                // We got some kind of http error code.\n                // We don't want to remove it from the queue entirely, because that would cause us to lose track of the item, and therefore lose\n                // control of all scheduling around it.  Instead, we leave it on the queue and give it an empty version string; that will lead it to be\n                // reprocessed without fail on the next scheduled check.\n                // Decode response body to the extent we can\n                String contentType = extractContentType(connection.getResponseHeader(\"Content-Type\"));\n                String encoding = extractEncoding(contentType);\n                if (encoding == null)\n                  encoding = StandardCharsets.UTF_8.name();\n                String decodedResponse = \"undecodable\";\n                try\n                {\n                  decodedResponse = \"'\"+connection.getLimitedResponseBody(1024,encoding)+\"'\";\n                }\n                catch (ManifoldCFException e)\n                {\n                  // Eat this exception unless it is an interrupt\n                  if (e.getErrorCode() == ManifoldCFException.INTERRUPTED)\n                    throw e;\n                  connection.noteInterrupted(e);\n                }\n                catch (ServiceInterruption e)\n                {\n                  // Eat this exception too\n                  connection.noteInterrupted(e);\n                }\n                fetchStatus.contextMessage = \"it failed to fetch (status=\"+Integer.toString(response)+\", message=\"+decodedResponse+\")\";\n                fetchStatus.resultSignal = RESULT_NO_VERSION;\n                activityResultCode = null;\n              }\n            }\n            catch (ManifoldCFException e)\n            {\n              connection.noteInterrupted(e);\n              throw e;\n            }\n            catch (ServiceInterruption e)\n            {\n              connection.noteInterrupted(e);\n              throw e;\n            }\n            finally\n            {\n              connection.doneFetch(activities);\n            }\n          }\n          finally\n          {\n            connection.close();\n          }\n\n          // State transition logic.  If the result indicates a successful fetch so far, we need to decide where to go next.\n          // This happens AFTER we've released all the connections, because it's conceivable that processing here might be\n          // significant, and we don't want to tie things up unnecessarily.\n          String preferredLink = null;\n          String preferredRedirection = null;\n          formData = null;\n          String contentLink = null;\n          if (fetchStatus.resultSignal == RESULT_VERSION_NEEDED)\n          {\n            // If we get here, we know:\n            // (a) There's a cached version of the page on disk we can read as many times as necessary;\n            // (b) The saved cookies have not been updated yet, so we'll need to do that where appropriate.\n\n            // The way we determine if we're in the login sequence for a site is by TWO criteria:\n            // (1) The URI must match the specified regular expression, and\n            // (2) The data from that URI must contain the specified form or link information.\n            // We use the same criteria to look for the exit from a sequence.  So, in essence, we're *always* going to need to know whether we're\n            // officially in the sequence, or not, so we evaluate it always.\n            boolean isLoginPage = false;\n            if (sessionCredential != null)\n            {\n              Iterator iterMatches = sessionCredential.findLoginParameters(currentURI);\n              boolean seenAnything = false;\n              boolean seenFormError = false;\n              boolean seenLinkError = false;\n              boolean seenRedirectionError = false;\n              boolean seenContentError = false;\n              while (iterMatches.hasNext())\n              {\n                seenAnything = true;\n                LoginParameters lp = (LoginParameters)iterMatches.next();\n                // Note that more than one of the rules may match.\n                // In that case, a clear order of precedence applies between form-style rules and link-style: form has priority.\n                // If more than one of the same kind of rule is seen, then all bets are off, a warning is displayed, and nothing is\n                // matched.\n\n                // Parse the page; it had better match up!  Otherwise we get null back.\n                FormData newFormData = findHTMLForm(currentURI,lp);\n                if (newFormData != null)\n                {\n                  if (formData != null)\n                  {\n                    // Oops, more than one matching form rule.  Complain.\n                    seenFormError = true;\n                    formData = null;\n                  }\n                  else if (!seenFormError)\n                  {\n                    // A form overrides links, redirection, or content\n                    formData = newFormData;\n                    preferredLink = null;\n                    preferredRedirection = null;\n                  }\n                }\n                else\n                {\n                  // Look for the preferred link instead.\n                  String newPreferredLink = findHTMLLinkURI(currentURI,lp);\n                  if (newPreferredLink != null)\n                  {\n                    if (preferredLink != null)\n                    {\n                      // Oops\n                      seenLinkError = true;\n                      preferredLink = null;\n                    }\n                    else if (!seenLinkError && !seenFormError && formData == null)\n                    {\n                      // Link overrides redirection and content\n                      preferredLink = newPreferredLink;\n                      preferredRedirection = null;\n                    }\n                  }\n                  else\n                  {\n                    // Look for the preferred redirection.\n                    String newPreferredRedirection = findPreferredRedirectionURI(currentURI,lp);\n                    if (newPreferredRedirection != null)\n                    {\n                      if (preferredRedirection != null)\n                      {\n                        seenRedirectionError = true;\n                        preferredRedirection = null;\n                      }\n                      else if (!seenRedirectionError && !seenLinkError && !seenFormError && formData == null && preferredLink == null)\n                      {\n                        preferredRedirection = newPreferredRedirection;\n                      }\n                    }\n                    else\n                    {\n                      // Look for the content in the page.  The link returned may be an empty string, if matching content\n                      // is discovered but there is no override.  It will be null of the content is not found.\n                      String newContentLink = findSpecifiedContent(currentURI,lp);\n                      if (newContentLink != null)\n                      {\n                        if (contentLink != null)\n                        {\n                          seenContentError = true;\n                          contentLink = null;\n                        }\n                        else if (!seenContentError && !seenRedirectionError && !seenLinkError && !seenFormError && formData == null && preferredLink == null && preferredRedirection == null)\n                        {\n                          contentLink = newContentLink;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n\n              // Now, evaluate all the data and pick the right rule\n              if (formData != null)\n              {\n                // We found the right form!  And, we filled it in.  So now we enter the \"login sequence\".\n                if (Logging.connectors.isDebugEnabled())\n                  Logging.connectors.debug(\"WEB: Document '\"+currentURI+\"' matches form, so determined to be login page for sequence '\"+sessionCredential.getSequenceKey()+\"'\");\n                isLoginPage = true;\n              }\n              else if (preferredLink != null)\n              {\n                if (Logging.connectors.isDebugEnabled())\n                  Logging.connectors.debug(\"WEB: Document '\"+currentURI+\"' matches preferred link, so determined to be login page for sequence '\"+sessionCredential.getSequenceKey()+\"'\");\n                isLoginPage = true;\n              }\n              else if (preferredRedirection != null)\n              {\n                if (Logging.connectors.isDebugEnabled())\n                  Logging.connectors.debug(\"WEB: Document '\"+currentURI+\"' matches preferred redirection, so determined to be login page for sequence '\"+sessionCredential.getSequenceKey()+\"'\");\n                isLoginPage = true;\n              }\n              else if (contentLink != null)\n              {\n                if (Logging.connectors.isDebugEnabled())\n                  Logging.connectors.debug(\"WEB: Document '\"+currentURI+\"' matches content, so determined to be login page for sequence '\"+sessionCredential.getSequenceKey()+\"'\");\n                isLoginPage = true;\n              }\n              else\n              {\n                if (seenAnything && Logging.connectors.isDebugEnabled())\n                  Logging.connectors.debug(\"WEB: Document '\"+currentURI+\"' did not match expected form, link, redirection, or content for sequence '\"+sessionCredential.getSequenceKey()+\"'\");\n              }\n            }\n\n            // Should we do a state transition into the \"logging in\" state?\n            if (fetchStatus.sessionState == SESSIONSTATE_NORMAL && isLoginPage)\n            {\n              // Entering the login sequence.  Make sure we actually can do this...\n              if (activities.beginEventSequence(globalSequenceEvent))\n              {\n                if (Logging.connectors.isDebugEnabled())\n                  Logging.connectors.debug(\"WEB: For document '\"+documentIdentifier+\"', beginning login sequence '\"+sessionCredential.getSequenceKey()+\"'\");\n\n                activities.recordActivity(null,WebcrawlerConnector.ACTIVITY_LOGON_START,\n                  null,sessionCredential.getSequenceKey(),\"OK\",null,null);\n\n                // Transition to the right state, etc.\n                fetchStatus.sessionState = SESSIONSTATE_LOGIN;\n              }\n              else\n              {\n                if (Logging.connectors.isDebugEnabled())\n                  Logging.connectors.debug(\"WEB: For document '\"+documentIdentifier+\"', login sequence '\"+sessionCredential.getSequenceKey()+\"' was already in progress.\");\n\n                // Didn't make it in.  Retry the main URI when the proper conditions are met.\n                // We don't want the cached data anymore.\n                cache.deleteData(currentURI);\n                fetchStatus.contextMessage = \"login sequence already in progress\";\n                fetchStatus.resultSignal = RESULT_RETRY_DOCUMENT;\n                activityResultCode = null;\n              }\n            }\n            else if (fetchStatus.sessionState == SESSIONSTATE_LOGIN && isLoginPage == false)\n            {\n              //== Exit login mode ==\n              activities.completeEventSequence(globalSequenceEvent);\n              activities.recordActivity(null,WebcrawlerConnector.ACTIVITY_LOGON_END,\n                null,sessionCredential.getSequenceKey(),\"OK\",null,null);\n              fetchStatus.sessionState = SESSIONSTATE_NORMAL;\n              // Make sure we go back and try the original document again, if we happened to have been directed somewhere else\n              if (!currentURI.equals(documentIdentifier))\n              {\n                cache.deleteData(currentURI);\n                currentURI = documentIdentifier;\n                continue;\n              }\n              // Otherwise, the last fetch stands on its own.  Fall through, and allow processing and link extraction\n            }\n              \n            // Now, based on the session state and the document contents, decide how to proceed\n            if (fetchStatus.resultSignal == RESULT_VERSION_NEEDED && fetchStatus.sessionState == SESSIONSTATE_LOGIN)\n            {\n              // We are dealing with a login page!\n\n              // We need to (a) figure out what the next URI should be, and (b) record form information that it might need.\n              // This is a bit dicey because there's really\n              // no good way to *guarantee* that we pick the right one, if there's more than one available.\n              // What we do is the following:\n              //\n              // (a) We look for matching forms.  If we found one, we submit it.\n              // (b) Look for redirections.\n              // (c) If there are links that vector within the login sequence, we pick one of those preferentially.\n              // (d) If there are no links that vector within the login sequence, we pick one of the other links.\n              //\n              // Note well that it's probably going to be pretty easy to get this code stuck in an infinite login sequence.\n              // While that won't be a problem performance-wise (because everything is appropriately throttled), it\n              // is obviously not ideal, and furthermore, it will not be possible to crawl a site for which this occurs.\n              //\n              // Longer time (and with higher complexity) we can solve this problem by allowing the user to *specify*\n              // which link they want us to pick for a page.  Hopefully this would not be necessary.\n\n              // Locate the next target URI.\n              String targetURI;\n              if (formData != null)\n                targetURI = formData.getActionURI();\n              else if (preferredLink != null)\n                targetURI = preferredLink;\n              else if (preferredRedirection != null)\n                targetURI = preferredRedirection;\n              else /* if (contentLink != null) */\n                targetURI = contentLink;\n\n              // Definitely we don't want the cached data anymore\n              cache.deleteData(currentURI);\n\n              // If the target URI is null, it means we could not find a suitable link.  If target URI is \"\",\n              // it means that we found a designated logon page but the description did not include a link we\n              // could chase.  Either way, treat this exactly the same\n              // way as if the link found exited login mode.\n              if (targetURI == null || targetURI.length() == 0)\n              {\n                //== Exiting login mode ==\n                activities.completeEventSequence(globalSequenceEvent);\n                activities.recordActivity(null,WebcrawlerConnector.ACTIVITY_LOGON_END,\n                  null,sessionCredential.getSequenceKey(),\"NEXTLINKNOTFOUND\",\"Could not find a usable link to the next page: \"+fetchStatus.contextMessage,null);\n                fetchStatus.sessionState = SESSIONSTATE_NORMAL;\n                // Make sure we go back and try the original document again, no matter where we got directed to\n                currentURI = documentIdentifier;\n              }\n              else\n              {\n                currentURI = targetURI;\n              }\n              continue;\n            }\n            else if (fetchStatus.resultSignal != RESULT_VERSION_NEEDED && fetchStatus.sessionState == SESSIONSTATE_LOGIN)\n            {\n              // The next URL we fetched in the logon sequence turned out to be unsuitable.\n              // That means that the logon sequence is fundamentally wrong.  The session thus ends,\n              // and of course it will retry, but that's neither here nor there.\n              //== Exiting login mode ==\n              activities.completeEventSequence(globalSequenceEvent);\n              activities.recordActivity(null,WebcrawlerConnector.ACTIVITY_LOGON_END,\n                null,sessionCredential.getSequenceKey(),\"LINKTARGETUNSUITABLE\",\"Page was unsuitable for a login sequence because: \"+fetchStatus.contextMessage,null);\n              fetchStatus.sessionState = SESSIONSTATE_NORMAL;\n              // Fall through, leaving everything else alone.\n            }\n          }\n\n        }\n        else if (robotsStatus == RESULTSTATUS_FALSE)\n        {\n          activityResultCode = \"-11\";\n          fetchStatus.contextMessage = \"robots.txt says so\";\n          fetchStatus.resultSignal = RESULT_NO_DOCUMENT;\n        }\n        else\n        {\n          // Robots prerequisite in progress\n          activityResultCode = null;\n          fetchStatus.resultSignal = RESULT_RETRY_DOCUMENT;\n          fetchStatus.contextMessage = \"robots prerequisite already in progress\";\n        }\n      }\n      else if (ipAddressStatus == RESULTSTATUS_FALSE)\n      {\n        activityResultCode = \"-10\";\n        fetchStatus.contextMessage = \"ip address not found\";\n        fetchStatus.resultSignal = RESULT_NO_DOCUMENT;\n      }\n      else\n      {\n        // DNS prerequisite in progress\n        activityResultCode = null;\n        fetchStatus.contextMessage = \"dns prerequisite already in progress\";\n        fetchStatus.resultSignal = RESULT_RETRY_DOCUMENT;\n      }\n      \n      // If we fail on a document that's not the primary, the result should be to retry the primary later.\n      if (!currentURI.equals(documentIdentifier))\n      {\n        activityResultCode = null;\n        if (fetchStatus.contextMessage != null)\n          fetchStatus.contextMessage = \"for login sequence url '\"+currentURI+\"': \"+fetchStatus.contextMessage;\n        if (fetchStatus.resultSignal != RESULT_VERSION_NEEDED)\n          fetchStatus.resultSignal = RESULT_RETRY_DOCUMENT;\n      }\n\n      break;\n    }\n\n    // Now, look at the result signal, and set up the version appropriately.\n    if (activityResultCode != null)\n      activities.recordActivity(null,ACTIVITY_FETCH,null,documentIdentifier,activityResultCode,fetchStatus.contextMessage,null);\n    \n  }\n\n  protected void processDocument(IProcessActivity activities, String documentIdentifier, String versionString,\n    boolean indexDocument, Map<String,Set<String>> metaHash, String[] acls, DocumentURLFilter filter)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    // Consider this document for ingestion.\n    String errorCode = null;\n    String errorDesc = null;\n    Long fileLengthLong = null;\n    long startTime = System.currentTimeMillis();\n    \n    try\n    {\n      // We can exclude it if it does not seem to be a kind of document that the ingestion system knows\n      // about.\n      \n      if (!indexDocument)\n      {\n        errorCode = \"CONTENTNOTINDEXABLE\";\n        errorDesc = \"Content not indexable\";\n        activities.noDocument(documentIdentifier,versionString);\n        return;\n      }\n      \n      int responseCode = cache.getResponseCode(documentIdentifier);\n      if (responseCode != 200)\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"Web: For document '\"+documentIdentifier+\"', not indexing because response code not indexable: \"+responseCode);\n        errorCode = \"RESPONSECODENOTINDEXABLE\";\n        errorDesc = \"HTTP response code not indexable (\"+responseCode+\")\";\n        activities.noDocument(documentIdentifier,versionString);\n        return;\n      }\n\n      long dataLength = cache.getDataLength(documentIdentifier);\n      if (!activities.checkLengthIndexable(dataLength))\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"Web: For document '\"+documentIdentifier+\"', not indexing because pipeline thinks length \"+dataLength+\" is not acceptable\");\n        errorCode = activities.EXCLUDED_LENGTH;\n        errorDesc = \"Rejected due to length (\"+dataLength+\")\";\n        activities.noDocument(documentIdentifier,versionString);\n        return;\n      }\n\n      if (activities.checkURLIndexable(documentIdentifier) == false)\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"Web: For document '\"+documentIdentifier+\"', not indexing because output connector does not want URL\");\n        errorCode = activities.EXCLUDED_URL;\n        errorDesc = \"Rejected due to URL ('\"+documentIdentifier+\"')\";\n        activities.noDocument(documentIdentifier,versionString);\n        return;\n      }\n\n      String ingestURL = filter.isDocumentIndexable(documentIdentifier);\n      if (ingestURL == null)\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"Web: For document '\"+documentIdentifier+\"', not indexing because document does not match web job constraints\");\n        errorCode = \"JOBRESTRICTION\";\n        errorDesc = \"Rejected because job excludes this URL ('\"+documentIdentifier+\"')\";\n        activities.noDocument(documentIdentifier,versionString);\n        return;\n      }\n      \n      // Check if it's a recognized content type\n      String contentType = cache.getContentType(documentIdentifier);\n\n      // Some sites have multiple content types.  We just look at the LAST one in that case.\n      if (contentType != null)\n      {\n        String[] contentTypes = contentType.split(\",\");\n        if (contentTypes.length > 0)\n          contentType = contentTypes[contentTypes.length-1].trim();\n        else\n          contentType = null;\n      }\n\n      if (contentType != null)\n      {\n        int pos = contentType.indexOf(\";\");\n        if (pos != -1)\n          contentType = contentType.substring(0,pos);\n        contentType = contentType.trim();\n      }\n\n      if (!activities.checkMimeTypeIndexable(contentType))\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"Web: For document '\"+documentIdentifier+\"', not indexing because output connector does not want mime type '\"+contentType+\"'\");\n        errorCode = activities.EXCLUDED_MIMETYPE;\n        errorDesc = \"Rejected because of mime type (\"+contentType+\")\";\n        activities.noDocument(documentIdentifier,versionString);\n        return;\n      }\n\n      if(!filter.isDocumentContentIndexable(documentIdentifier)){\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"Web: For document '\"+documentIdentifier+\"', not indexing because document content matched document content exclusion rule\");\n        errorCode = activities.EXCLUDED_CONTENT;\n        errorDesc = \"Rejected due to content exclusion rule\";\n        activities.noDocument(documentIdentifier,versionString);\n        return;\n      }\n      // Ingest the document\n      if (Logging.connectors.isDebugEnabled())\n        Logging.connectors.debug(\"WEB: Decided to ingest '\"+documentIdentifier+\"'\");\n\n      RepositoryDocument rd = new RepositoryDocument();\n\n      // Set the file name\n      String fileName = \"\";\n      try {\n        fileName = documentIdentifiertoFileName(documentIdentifier);\n      } catch (URISyntaxException e1) {\n        fileName = \"\";\n      }\n      if (fileName.length() > 0){\n        rd.setFileName(fileName);\n      }\n          \n      // Set the content type\n      String mimeType = cache.getContentType(documentIdentifier);\n      if (mimeType != null)\n        rd.setMimeType(mimeType);\n          \n      // Turn into acls and add into description\n      String[] denyAcls;\n      if (acls == null)\n        denyAcls = null;\n      else\n      {\n        if (acls.length > 0)\n          denyAcls = new String[]{defaultAuthorityDenyToken};\n        else\n          denyAcls = new String[0];\n      }\n      \n      if (acls != null && denyAcls != null)\n        rd.setSecurity(RepositoryDocument.SECURITY_TYPE_DOCUMENT,acls,denyAcls);\n\n      // Grab metadata\n      for (String key : metaHash.keySet())\n      {\n        Set<String> metaList = metaHash.get(key);\n        String[] values = new String[metaList.size()];\n        int k = 0;\n        for (String value : metaList)\n        {\n          values[k++] = value;\n        }\n        rd.addField(key,values);\n      }\n\n      InputStream is = cache.getData(documentIdentifier);\n\n      if (is != null)\n      {\n        try\n        {\n          rd.setBinary(is,dataLength);\n          try\n          {\n            activities.ingestDocumentWithException(documentIdentifier,versionString,ingestURL,rd);\n            errorCode = \"OK\";\n            fileLengthLong = new Long(dataLength);\n          }\n          catch (IOException e)\n          {\n            errorCode = e.getClass().getSimpleName().toUpperCase(Locale.ROOT);\n            errorDesc = e.getMessage();\n            handleIOException(e,\"reading data\");\n          }\n        }\n        finally\n        {\n          try\n          {\n            is.close();\n          }\n          catch (IOException e)\n          {\n            errorCode = e.getClass().getSimpleName().toUpperCase(Locale.ROOT);\n            errorDesc = e.getMessage();\n            handleIOException(e,\"closing stream\");\n          }\n        }\n      }\n      else\n        Logging.connectors.error(\"WEB: Expected a cached document for '\"+documentIdentifier+\"', but none present!\");\n      \n    }\n    catch (ManifoldCFException e)\n    {\n      if (e.getErrorCode() == ManifoldCFException.INTERRUPTED)\n        errorCode = null;\n      throw e;\n    }\n    finally\n    {\n      if (errorCode != null)\n        activities.recordActivity(new Long(startTime),ACTIVITY_PROCESS,\n          fileLengthLong,documentIdentifier,errorCode,errorDesc,null);\n    }\n\n\n  }\n  \n  protected static String extractContentType(String contentType)\n  {\n    // Some sites have multiple content types.  We just look at the LAST one in that case.\n    if (contentType != null)\n    {\n      String[] contentTypes = contentType.split(\",\");\n      if (contentTypes.length > 0)\n        contentType = contentTypes[contentTypes.length-1].trim();\n      else\n        contentType = null;\n    }\n    return contentType;\n  }\n\n  protected static String extractEncoding(String contentType)\n  {\n    if (contentType == null)\n      return null;\n    int semiIndex = contentType.indexOf(\";\");\n    if (semiIndex == -1)\n      return null;\n    String suffix = contentType.substring(semiIndex+1);\n    suffix = suffix.trim();\n    if (suffix.startsWith(\"charset=\"))\n      return suffix.substring(\"charset=\".length());\n    return null;\n  }\n  \n  protected static String extractMimeType(String contentType)\n  {\n    if (contentType == null)\n      return null;\n    int semiIndex = contentType.indexOf(\";\");\n    if (semiIndex != -1)\n      contentType = contentType.substring(0,semiIndex);\n    contentType = contentType.trim();\n    return contentType;\n  }\n  \n  protected static void handleIOException(IOException e, String context)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    if (e instanceof java.net.SocketException)\n      throw new ManifoldCFException(\"Socket timeout error \"+context+\": \"+e.getMessage(),e);\n    else if (e instanceof ConnectTimeoutException)\n      throw new ManifoldCFException(\"Socket connect timeout error \"+context+\": \"+e.getMessage(),e);\n    else if (e instanceof InterruptedIOException)\n      throw new ManifoldCFException(\"Interrupted: \"+e.getMessage(),e,ManifoldCFException.INTERRUPTED);\n    else\n      throw new ManifoldCFException(\"IO error \"+context+\": \"+e.getMessage(),e);\n  }\n  \n  /** Get the maximum number of documents to amalgamate together into one batch, for this connector.\n  *@return the maximum number. 0 indicates \"unlimited\".\n  */\n  @Override\n  public int getMaxDocumentRequest()\n  {\n    // The web in general does not batch well.  Multiple chunks have no advantage over one-at-a-time requests.\n    return 1;\n  }\n\n  // UI support methods.\n  //\n  // These support methods come in two varieties.  The first bunch is involved in setting up connection configuration information.  The second bunch\n  // is involved in presenting and editing document specification information for a job.  The two kinds of methods are accordingly treated differently,\n  // in that the first bunch cannot assume that the current connector object is connected, while the second bunch can.  That is why the first bunch\n  // receives a thread context argument for all UI methods, while the second bunch does not need one (since it has already been applied via the connect()\n  // method, above).\n    \n  /** Output the configuration header section.\n  * This method is called in the head section of the connector's configuration page.  Its purpose is to add the required tabs to the list, and to output any\n  * javascript methods that might be needed by the configuration editing HTML.\n  *@param threadContext is the local thread context.\n  *@param out is the output to which any HTML should be sent.\n  *@param parameters are the configuration parameters, as they currently exist, for this connection being configured.\n  *@param tabsArray is an array of tab names.  Add to this array any tab names that are specific to the connector.\n  */\n  @Override\n  public void outputConfigurationHeader(IThreadContext threadContext, IHTTPOutput out,\n    Locale locale, ConfigParams parameters, List<String> tabsArray)\n    throws ManifoldCFException, IOException\n  {\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Email\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Robots\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Bandwidth\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.AccessCredentials\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Certificates\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Proxy\"));\n\n    out.print(\n\"<script type=\\\"text/javascript\\\">\\n\"+\n\"<!--\\n\"+\n\"function checkConfig()\\n\"+\n\"{\\n\"+\n\"  if (editconnection.email.value != \\\"\\\" && editconnection.email.value.indexOf(\\\"@\\\") == -1)\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.NeedAValidEmailAddress\")+\"\\\");\\n\"+\n\"    editconnection.email.focus();\\n\"+\n\"    return false;\\n\"+\n\"  }\\n\"+\n\"\\n\"+\n\"  // If the Bandwidth tab is up, check to be sure we have valid numbers and regexps everywhere.\\n\"+\n\"  var i = 0;\\n\"+\n\"  var count = editconnection.bandwidth_count.value;\\n\"+\n\"  while (i < count)\\n\"+\n\"  {\\n\"+\n\"    var connections = eval(\\\"editconnection.connections_bandwidth_\\\"+i+\\\".value\\\");\\n\"+\n\"    if (connections != \\\"\\\" && !isInteger(connections))\\n\"+\n\"    {\\n\"+\n\"      alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.MaximumConnectionsMustBeAnInteger\")+\"\\\");\\n\"+\n\"      eval(\\\"editconnection.connections_bandwidth_\\\"+i+\\\".focus()\\\");\\n\"+\n\"      return false;\\n\"+\n\"    }\\n\"+\n\"    var rate = eval(\\\"editconnection.rate_bandwidth_\\\"+i+\\\".value\\\");\\n\"+\n\"    if (rate != \\\"\\\" && !isInteger(rate))\\n\"+\n\"    {\\n\"+\n\"      alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.MaximumKbytesPerSecondMustBeAnInteger\")+\"\\\");\\n\"+\n\"      eval(\\\"editconnection.rate_bandwidth_\\\"+i+\\\".focus()\\\");\\n\"+\n\"      return false;\\n\"+\n\"    }\\n\"+\n\"    var fetches = eval(\\\"editconnection.fetches_bandwidth_\\\"+i+\\\".value\\\");\\n\"+\n\"    if (fetches != \\\"\\\" && !isInteger(fetches))\\n\"+\n\"    {\\n\"+\n\"      alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.MaximumFetchesPerMinuteMustBeAnInteger\")+\"\\\");\\n\"+\n\"      eval(\\\"editconnection.fetches_bandwidth_\\\"+i+\\\".focus()\\\");\\n\"+\n\"      return false;\\n\"+\n\"    }\\n\"+\n\"\\n\"+\n\"    i = i + 1;\\n\"+\n\"  }\\n\"+\n\"    \\n\"+\n\"  // Make sure access credentials are all legal\\n\"+\n\"  i = 0;\\n\"+\n\"  count = editconnection.acredential_count.value;\\n\"+\n\"  while (i < count)\\n\"+\n\"  {\\n\"+\n\"    var username = eval(\\\"editconnection.username_acredential_\\\"+i+\\\".value\\\");\\n\"+\n\"    if (username == \\\"\\\")\\n\"+\n\"    {\\n\"+\n\"      alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.CredentialMustHaveNonNullUserName\")+\"\\\");\\n\"+\n\"      eval(\\\"editconnection.username_acredential_\\\"+i+\\\".focus()\\\");\\n\"+\n\"      return false;\\n\"+\n\"    }\\n\"+\n\"    i = i + 1;\\n\"+\n\"  }\\n\"+\n\"\\n\"+\n\"  // Make sure session credentials are all legal\\n\"+\n\"  i = 0;\\n\"+\n\"  count = editconnection.scredential_count.value;\\n\"+\n\"  while (i < count)\\n\"+\n\"  {\\n\"+\n\"    var loginpagecount = eval(\\\"editconnection.scredential_\\\"+i+\\\"_loginpagecount.value\\\");\\n\"+\n\"    var j = 0;\\n\"+\n\"    while (j < loginpagecount)\\n\"+\n\"    {\\n\"+\n\"      var matchregexp = eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_matchregexp.value\\\");\\n\"+\n\"      if (!isRegularExpression(matchregexp))\\n\"+\n\"      {\\n\"+\n\"        alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.MatchExpressionMustBeAValidRegularExpression\")+\"\\\");\\n\"+\n\"        eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_matchregexp.focus()\\\");\\n\"+\n\"        return false;\\n\"+\n\"      }\\n\"+\n\"      if (eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_type.value\\\") == \\\"form\\\")\\n\"+\n\"      {\\n\"+\n\"        var paramcount = eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_loginparamcount.value\\\");\\n\"+\n\"        var k = 0;\\n\"+\n\"        while (k < paramcount)\\n\"+\n\"        {\\n\"+\n\"          var paramname = eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_\\\"+k+\\\"_param.value\\\");\\n\"+\n\"          if (paramname == \\\"\\\")\\n\"+\n\"          {\\n\"+\n\"            alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.ParameterMustHaveNonEmptyName\")+\"\\\");\\n\"+\n\"            eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_\\\"+k+\\\"_param.focus()\\\");\\n\"+\n\"            return false;\\n\"+\n\"          }\\n\"+\n\"          var paramvalue = eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_\\\"+k+\\\"_value.value\\\");\\n\"+\n\"          var parampassword = eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_\\\"+k+\\\"_password.value\\\");\\n\"+\n\"          if (paramvalue != \\\"\\\" && parampassword != \\\"\\\")\\n\"+\n\"          {\\n\"+\n\"            alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.ParameterCanEitherBeHidden\")+\"\\\");\\n\"+\n\"            eval(\\\"editconnection.scredential_\\\"+i+\\\"_\\\"+j+\\\"_\\\"+k+\\\"_value.focus()\\\");\\n\"+\n\"            return false;\\n\"+\n\"          }\\n\"+\n\"          k = k + 1;\\n\"+\n\"        }\\n\"+\n\"      }\\n\"+\n\"      j = j + 1;\\n\"+\n\"    }\\n\"+\n\"    i = i + 1;\\n\"+\n\"  }\\n\"+\n\"  return true;\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function checkConfigForSave()\\n\"+\n\"{\\n\"+\n\"  if (editconnection.email.value == \\\"\\\")\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\" + Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.EmailAaddressRequired\") + \"\\\");\\n\"+\n\"    SelectTab(\\\"\" + Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.Email\") + \"\\\");\\n\"+\n\"    editconnection.email.focus();\\n\"+\n\"    return false;\\n\"+\n\"  }\\n\"+\n\"  return true;\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function deleteRegexp(i)\\n\"+\n\"{\\n\"+\n\"  // Set the operation\\n\"+\n\"  eval(\\\"editconnection.op_bandwidth_\\\"+i+\\\".value=\\\\\\\"Delete\\\\\\\"\\\");\\n\"+\n\"  // Submit\\n\"+\n\"  if (editconnection.bandwidth_count.value==i)\\n\"+\n\"    postFormSetAnchor(\\\"bandwidth\\\");\\n\"+\n\"  else\\n\"+\n\"    postFormSetAnchor(\\\"bandwidth_\\\"+i)\\n\"+\n\"  // Undo, so we won't get two deletes next time\\n\"+\n\"  eval(\\\"editconnection.op_bandwidth_\\\"+i+\\\".value=\\\\\\\"Continue\\\\\\\"\\\");\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function addRegexp()\\n\"+\n\"{\\n\"+\n\"  if (editconnection.connections_bandwidth.value != \\\"\\\" && !isInteger(editconnection.connections_bandwidth.value))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\" + Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.MaximumConnectionsMustBeAnInteger\")+\"\\\");\\n\"+\n\"    editconnection.connections_bandwidth.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  if (editconnection.rate_bandwidth.value != \\\"\\\" && !isInteger(editconnection.rate_bandwidth.value))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.MaximumKbytesPerSecondMustBeAnInteger\")+\"\\\");\\n\"+\n\"    editconnection.rate_bandwidth.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  if (editconnection.fetches_bandwidth.value != \\\"\\\" && !isInteger(editconnection.fetches_bandwidth.value))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.MaximumFetchesPerMinuteMustBeAnInteger\")+\"\\\");\\n\"+\n\"    editconnection.fetches_bandwidth.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  if (!isRegularExpression(editconnection.regexp_bandwidth.value))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.AValidRegularExpressionIsRequired\")+\"\\\");\\n\"+\n\"    editconnection.regexp_bandwidth.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  editconnection.bandwidth_op.value=\\\"Add\\\";\\n\"+\n\"  postFormSetAnchor(\\\"bandwidth\\\");\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function deleteARegexp(i)\\n\"+\n\"{\\n\"+\n\"  // Set the operation\\n\"+\n\"  eval(\\\"editconnection.op_acredential_\\\"+i+\\\".value=\\\\\\\"Delete\\\\\\\"\\\");\\n\"+\n\"  // Submit\\n\"+\n\"  if (editconnection.acredential_count.value==i)\\n\"+\n\"    postFormSetAnchor(\\\"acredential\\\");\\n\"+\n\"  else\\n\"+\n\"    postFormSetAnchor(\\\"acredential_\\\"+i)\\n\"+\n\"  // Undo, so we won't get two deletes next time\\n\"+\n\"  eval(\\\"editconnection.op_acredential_\\\"+i+\\\".value=\\\\\\\"Continue\\\\\\\"\\\");\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function addARegexp()\\n\"+\n\"{\\n\"+\n\"  if (editconnection.username_acredential.value == \\\"\\\")\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.CredentialMustIncludeANonNullUserName\")+\"\\\");\\n\"+\n\"    editconnection.username_acredential.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  if (!isRegularExpression(editconnection.regexp_acredential.value))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.AValidRegularExpressionIsRequired\")+\"\\\");\\n\"+\n\"    editconnection.regexp_acredential.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  editconnection.acredential_op.value=\\\"Add\\\";\\n\"+\n\"  postFormSetAnchor(\\\"acredential\\\");\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function deleteSRegexp(i)\\n\"+\n\"{\\n\"+\n\"  // Set the operation\\n\"+\n\"  eval(\\\"editconnection.scredential_\\\"+i+\\\"_op.value=\\\\\\\"Delete\\\\\\\"\\\");\\n\"+\n\"  // Submit\\n\"+\n\"  if (editconnection.scredential_count.value==i)\\n\"+\n\"    postFormSetAnchor(\\\"scredential\\\");\\n\"+\n\"  else\\n\"+\n\"    postFormSetAnchor(\\\"scredential_\\\"+i)\\n\"+\n\"  // Undo, so we won't get two deletes next time\\n\"+\n\"  eval(\\\"editconnection.scredential_\\\"+i+\\\"_op.value=\\\\\\\"Continue\\\\\\\"\\\");\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function addSRegexp()\\n\"+\n\"{\\n\"+\n\"  if (!isRegularExpression(editconnection.scredential_regexp.value))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.AValidRegularExpressionIsRequired\")+\"\\\");\\n\"+\n\"    editconnection.scredential_regexp.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  editconnection.scredential_op.value=\\\"Add\\\";\\n\"+\n\"  postFormSetAnchor(\\\"scredential\\\");\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function deleteLoginPage(credential,loginpage)\\n\"+\n\"{\\n\"+\n\"  // Set the operation\\n\"+\n\"  eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_op.value=\\\\\\\"Delete\\\\\\\"\\\");\\n\"+\n\"  // Submit\\n\"+\n\"  if (eval(\\\"editconnection.scredential_\\\"+credential+\\\"_loginpagecount.value\\\")==credential)\\n\"+\n\"    postFormSetAnchor(\\\"scredential_loginpage\\\");\\n\"+\n\"  else\\n\"+\n\"    postFormSetAnchor(\\\"scredential_\\\"+credential+\\\"_\\\"+loginpage)\\n\"+\n\"  // Undo, so we won't get two deletes next time\\n\"+\n\"  eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_op.value=\\\\\\\"Continue\\\\\\\"\\\");\\n\"+\n\"\\n\"+\n\"}\\n\"+\n\"  \\n\"+\n\"function addLoginPage(credential)\\n\"+\n\"{\\n\"+\n\"  if (!isRegularExpression(eval(\\\"editconnection.scredential_\\\"+credential+\\\"_loginpageregexp.value\\\")))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.AValidRegularExpressionIsRequired\")+\"\\\");\\n\"+\n\"    eval(\\\"editconnection.scredential_\\\"+credential+\\\"_loginpageregexp.focus()\\\");\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  if (!isRegularExpression(eval(\\\"editconnection.scredential_\\\"+credential+\\\"_loginpagematchregexp.value\\\")))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.AValidRegularExpressionIsRequired\")+\"\\\");\\n\"+\n\"    eval(\\\"editconnection.scredential_\\\"+credential+\\\"_loginpagematchregexp.focus()\\\");\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  eval(\\\"editconnection.scredential_\\\"+credential+\\\"_loginpageop.value=\\\\\\\"Add\\\\\\\"\\\");\\n\"+\n\"  postFormSetAnchor(\\\"scredential_\\\"+credential);\\n\"+\n\"}\\n\"+\n\"  \\n\"+\n\"function deleteLoginPageParameter(credential,loginpage,parameter)\\n\"+\n\"{\\n\"+\n\"  // Set the operation\\n\"+\n\"  eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_\\\"+parameter+\\\"_op.value=\\\\\\\"Delete\\\\\\\"\\\");\\n\"+\n\"  // Submit\\n\"+\n\"  if (eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_loginparamcount.value\\\")==credential)\\n\"+\n\"    postFormSetAnchor(\\\"scredential_\\\"+credential+\\\"_loginparam\\\");\\n\"+\n\"  else\\n\"+\n\"    postFormSetAnchor(\\\"scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_\\\"+parameter)\\n\"+\n\"  // Undo, so we won't get two deletes next time\\n\"+\n\"  eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_\\\"+parameter+\\\"_op.value=\\\\\\\"Continue\\\\\\\"\\\");\\n\"+\n\"}\\n\"+\n\"  \\n\"+\n\"function addLoginPageParameter(credential,loginpage)\\n\"+\n\"{\\n\"+\n\"  if (!isRegularExpression(eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_loginparamname.value\\\")))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.ParameterNameMustBeARegularExpression\")+\"\\\");\\n\"+\n\"    eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_loginparamname.focus()\\\");\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  if (eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_loginparamvalue.value\\\") != \\\"\\\" && eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_loginparampassword.value\\\") != \\\"\\\")\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.ParameterCanEitherBeHidden\")+\"\\\");\\n\"+\n\"    eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_loginparamvalue.focus()\\\");\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  eval(\\\"editconnection.scredential_\\\"+credential+\\\"_\\\"+loginpage+\\\"_loginparamop.value=\\\\\\\"Add\\\\\\\"\\\");\\n\"+\n\"  postFormSetAnchor(\\\"scredential_\\\"+credential+\\\"_\\\"+loginpage);\\n\"+\n\"}\\n\"+\n\"  \\n\"+\n\"function deleteTRegexp(i)\\n\"+\n\"{\\n\"+\n\"  // Set the operation\\n\"+\n\"  eval(\\\"editconnection.op_trust_\\\"+i+\\\".value=\\\\\\\"Delete\\\\\\\"\\\");\\n\"+\n\"  // Submit\\n\"+\n\"  if (editconnection.trust_count.value==i)\\n\"+\n\"    postFormSetAnchor(\\\"trust\\\");\\n\"+\n\"  else\\n\"+\n\"    postFormSetAnchor(\\\"trust_\\\"+i);\\n\"+\n\"  // Undo, so we won't get two deletes next time\\n\"+\n\"  eval(\\\"editconnection.op_trust_\\\"+i+\\\".value=\\\\\\\"Continue\\\\\\\"\\\");\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function addTRegexp()\\n\"+\n\"{\\n\"+\n\"  if (editconnection.certificate_trust.value == \\\"\\\" && editconnection.all_trust.checked == false)\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.SpecifyATrustCertificateFileToUploadFirst\")+\"\\\");\\n\"+\n\"    editconnection.certificate_trust.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  if (!isRegularExpression(editconnection.regexp_trust.value))\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.AValidRegularExpressionIsRequired\")+\"\\\");\\n\"+\n\"    editconnection.regexp_trust.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  editconnection.trust_op.value=\\\"Add\\\";\\n\"+\n\"  postFormSetAnchor(\\\"trust\\\");\\n\"+\n\"}\\n\"+\n\"  \\n\"+\n\"//-->\\n\"+\n\"</script>\\n\"\n    );\n  }\n  \n  /** Output the configuration body section.\n  * This method is called in the body section of the connector's configuration page.  Its purpose is to present the required form elements for editing.\n  * The coder can presume that the HTML that is output from this configuration will be within appropriate <html>, <body>, and <form> tags.  The name of the\n  * form is \"editconnection\".\n  *@param threadContext is the local thread context.\n  *@param out is the output to which any HTML should be sent.\n  *@param parameters are the configuration parameters, as they currently exist, for this connection being configured.\n  *@param tabName is the current tab name.\n  */\n  @Override\n  public void outputConfigurationBody(IThreadContext threadContext, IHTTPOutput out,\n    Locale locale, ConfigParams parameters, String tabName)\n    throws ManifoldCFException, IOException\n  {\n    \n    String email = parameters.getParameter(WebcrawlerConfig.PARAMETER_EMAIL);\n    if (email == null)\n      email = \"\";\n    String robotsUsage = parameters.getParameter(WebcrawlerConfig.PARAMETER_ROBOTSUSAGE);\n    if (robotsUsage == null)\n      robotsUsage = \"all\";\n    String proxyHost = parameters.getParameter(WebcrawlerConfig.PARAMETER_PROXYHOST);\n    if (proxyHost == null)\n      proxyHost = \"\";\n    String proxyPort = parameters.getParameter(WebcrawlerConfig.PARAMETER_PROXYPORT);\n    if (proxyPort == null)\n      proxyPort = \"\";\n    String proxyAuthDomain = parameters.getParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHDOMAIN);\n    if (proxyAuthDomain == null)\n      proxyAuthDomain = \"\";\n    String proxyAuthUsername = parameters.getParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHUSERNAME);\n    if (proxyAuthUsername == null)\n      proxyAuthUsername = \"\";\n    String proxyAuthPassword = parameters.getObfuscatedParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHPASSWORD);\n    if (proxyAuthPassword == null)\n      proxyAuthPassword = \"\";\n    else\n      proxyAuthPassword = out.mapPasswordToKey(proxyAuthPassword);\n\n    // Proxy tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Proxy\")))\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyHostColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\"><input type=\\\"text\\\" size=\\\"40\\\" name=\\\"proxyhost\\\" value=\\\"\"+Encoder.attributeEscape(proxyHost)+\"\\\"/></td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyPortColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\"><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"proxyport\\\" value=\\\"\"+Encoder.attributeEscape(proxyPort)+\"\\\"/></td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyAuthenticationDomainColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\"><input type=\\\"text\\\" size=\\\"32\\\" name=\\\"proxyauthdomain\\\" value=\\\"\"+Encoder.attributeEscape(proxyAuthDomain)+\"\\\"/></td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyAuthenticationUserNameColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\"><input type=\\\"text\\\" size=\\\"32\\\" name=\\\"proxyauthusername\\\" value=\\\"\"+Encoder.attributeEscape(proxyAuthUsername)+\"\\\"/></td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyAuthenticationPasswordColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\"><input type=\\\"password\\\" size=\\\"16\\\" name=\\\"proxyauthpassword\\\" value=\\\"\"+Encoder.attributeEscape(proxyAuthPassword)+\"\\\"/></td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"proxyhost\\\" value=\\\"\"+Encoder.attributeEscape(proxyHost)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"proxyport\\\" value=\\\"\"+Encoder.attributeEscape(proxyPort)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"proxyauthusername\\\" value=\\\"\"+Encoder.attributeEscape(proxyAuthUsername)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"proxyauthdomain\\\" value=\\\"\"+Encoder.attributeEscape(proxyAuthDomain)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"proxyauthpassword\\\" value=\\\"\"+Encoder.attributeEscape(proxyAuthPassword)+\"\\\"/>\\n\"\n      );\n    }\n\n    // Email tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Email\")))\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.EmailAddressToContact\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"+\n\"      <input type=\\\"text\\\" size=\\\"32\\\" name=\\\"email\\\" value=\\\"\"+Encoder.attributeEscape(email)+\"\\\"/>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"email\\\" value=\\\"\"+Encoder.attributeEscape(email)+\"\\\"/>\\n\"\n      );\n    }\n\n    // Robots tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Robots\")))\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RobotsTxtUsage\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"+\n\"      <select name=\\\"robotsusage\\\" size=\\\"3\\\">\\n\"+\n\"        <option value=\\\"none\\\" \"+(robotsUsage.equals(\"none\")?\"selected=\\\"selected\\\"\":\"\")+\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.DontLookAtRobotsTxt\") + \"</option>\\n\"+\n\"        <option value=\\\"data\\\" \"+(robotsUsage.equals(\"data\")?\"selected=\\\"selected\\\"\":\"\")+\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ObeyRobotsTxtForDataFetchesOnly\") + \"</option>\\n\"+\n\"        <option value=\\\"all\\\" \"+(robotsUsage.equals(\"all\")?\"selected=\\\"selected\\\"\":\"\")+\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ObeyRobotsTxtForAllFetches\") + \"</option>\\n\"+\n\"      </select>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"robotsusage\\\" value=\\\"\"+robotsUsage+\"\\\"/>\\n\"\n      );\n    }\n\n    // Bandwidth tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Bandwidth\")))\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Throttles\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"boxcell\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.BinRegularExpression\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.CaseInsensitive\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.MaxConnections\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.MaxKbytesSec\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.MaxFetchesMin\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n      );\n      int i = 0;\n      int binCounter = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode cn = parameters.getChild(i++);\n        if (cn.getType().equals(WebcrawlerConfig.NODE_BINDESC))\n        {\n          // A bin description node!  Look for all its parameters.\n          String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_BINREGEXP);\n          String isCaseInsensitive = cn.getAttributeValue(WebcrawlerConfig.ATTR_INSENSITIVE);\n          String maxConnections = null;\n          String maxKBPerSecond = null;\n          String maxFetchesPerMinute = null;\n          int j = 0;\n          while (j < cn.getChildCount())\n          {\n            ConfigNode childNode = cn.getChild(j++);\n            if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXCONNECTIONS))\n              maxConnections = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n            else if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXKBPERSECOND))\n              maxKBPerSecond = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n            else if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXFETCHESPERMINUTE))\n              maxFetchesPerMinute = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n          }\n          if (maxConnections == null)\n            maxConnections = \"\";\n          if (maxKBPerSecond == null)\n            maxKBPerSecond = \"\";\n          if (maxFetchesPerMinute == null)\n            maxFetchesPerMinute = \"\";\n            \n          if (isCaseInsensitive == null || isCaseInsensitive.length() == 0)\n            isCaseInsensitive = \"false\";\n\n          // It's prefix will be...\n          String prefix = \"bandwidth_\" + Integer.toString(binCounter);\n          out.print(\n\"        <tr class=\\\"\"+(((binCounter % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"\"+prefix+\"\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Delete\") + \"\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteBinRegularExpression\")+Integer.toString(binCounter+1)+\"\\\" onclick='javascript:deleteRegexp(\"+Integer.toString(binCounter)+\");'/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+\"op_\"+prefix+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"checkbox\\\" name=\\\"insensitive_\"+prefix+\"\\\" value=\\\"true\\\" \"+(isCaseInsensitive.equals(\"true\")?\"checked=\\\"\\\"\":\"\")+\" /></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"connections_\"+prefix+\"\\\" value=\\\"\"+maxConnections+\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"rate_\"+prefix+\"\\\" value=\\\"\"+maxKBPerSecond+\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"fetches_\"+prefix+\"\\\" value=\\\"\"+maxFetchesPerMinute+\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"\n          );\n          binCounter++;\n        }\n      }\n\n      // If it looks like this is a brand-new configuration, add in a default throttle.\n      // This only works because other nodes must get created on the first post, and cannot then be deleted.\n      if (parameters.getChildCount() == 0)\n      {\n        // It's prefix will be...\n        String prefix = \"bandwidth_\" + Integer.toString(binCounter);\n        out.print(\n\"        <tr class=\\\"\"+(((binCounter % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"\"+prefix+\"\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Delete\") + \"\\\" alt=\\\"\"+ Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteBinRegularExpression\") +Integer.toString(binCounter+1)+\"\\\" onclick='javascript:deleteRegexp(\"+Integer.toString(binCounter)+\");'/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+\"op_\"+prefix+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"checkbox\\\" name=\\\"insensitive_\"+prefix+\"\\\" value=\\\"false\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"connections_\"+prefix+\"\\\" value=\\\"2\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"rate_\"+prefix+\"\\\" value=\\\"64\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"fetches_\"+prefix+\"\\\" value=\\\"12\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"\n        );\n        binCounter++;\n      }\n\n      if (binCounter == 0)\n      {\n        out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formmessage\\\" colspan=\\\"6\\\">\"+Messages.getBodyString(locale,\"WebcrawlerConnector.NoBandwidthOrConnectionThrottlingSpecified\")+\"</td></tr>\\n\"\n        );\n      }\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formseparator\\\" colspan=\\\"6\\\"><hr/></td></tr>\\n\"+\n\"        <tr class=\\\"formrow\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"bandwidth\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Add\") + \"\\\" alt=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.AddBinRegularExpression\") + \"\\\" onclick=\\\"javascript:addRegexp();\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"bandwidth_count\\\" value=\\\"\"+binCounter+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"bandwidth_op\\\" value=\\\"Continue\\\"/>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"regexp_bandwidth\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"checkbox\\\" name=\\\"insensitive_bandwidth\\\" value=\\\"true\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"connections_bandwidth\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"rate_bandwidth\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"5\\\" name=\\\"fetches_bandwidth\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"+\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      // Hiddens for bandwidth tab.\n      int i = 0;\n      int binCounter = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode cn = parameters.getChild(i++);\n        if (cn.getType().equals(WebcrawlerConfig.NODE_BINDESC))\n        {\n          // A bin description node!  Look for all its parameters.\n          String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_BINREGEXP);\n          String isCaseInsensitive = cn.getAttributeValue(WebcrawlerConfig.ATTR_INSENSITIVE);\n          String maxConnections = null;\n          String maxKBPerSecond = null;\n          String maxFetchesPerMinute = null;\n          int j = 0;\n          while (j < cn.getChildCount())\n          {\n            ConfigNode childNode = cn.getChild(j++);\n            if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXCONNECTIONS))\n              maxConnections = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n            else if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXKBPERSECOND))\n              maxKBPerSecond = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n            else if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXFETCHESPERMINUTE))\n              maxFetchesPerMinute = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n          }\n          if (maxConnections == null)\n            maxConnections = \"\";\n          if (maxKBPerSecond == null)\n            maxKBPerSecond = \"\";\n          if (maxFetchesPerMinute == null)\n            maxFetchesPerMinute = \"\";\n          if (isCaseInsensitive == null || isCaseInsensitive.length() == 0)\n            isCaseInsensitive = \"false\";\n\n          // It's prefix will be...\n          String prefix = \"bandwidth_\" + Integer.toString(binCounter);\n          out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"insensitive_\"+prefix+\"\\\" value=\\\"\"+isCaseInsensitive+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"connections_\"+prefix+\"\\\" value=\\\"\"+maxConnections+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"rate_\"+prefix+\"\\\" value=\\\"\"+maxKBPerSecond+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"fetches_\"+prefix+\"\\\" value=\\\"\"+maxFetchesPerMinute+\"\\\"/>\\n\"\n          );\n          binCounter++;\n        }\n      }\n\n      // If it looks like this is a brand-new configuration, add in a default throttle.\n      // This only works because other nodes must get created on the first post, and cannot then be deleted.\n      if (parameters.getChildCount() == 0)\n      {\n        // It's prefix will be...\n        String prefix = \"bandwidth_\" + Integer.toString(binCounter);\n        out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"insensitive_\"+prefix+\"\\\" value=\\\"false\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"connections_\"+prefix+\"\\\" value=\\\"2\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"rate_\"+prefix+\"\\\" value=\\\"64\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"fetches_\"+prefix+\"\\\" value=\\\"12\\\"/>\\n\"\n        );\n        binCounter++;\n      }\n\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"bandwidth_count\\\" value=\\\"\"+binCounter+\"\\\"/>\\n\"\n      );\n    }\n\n    // Access Credentials tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.AccessCredentials\")))\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.PageAccessCredentials\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"boxcell\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLRegularExpression\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.AuthenticationType\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Domain\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.UserName\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Password\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n      );\n      int i = 0;\n      int accessCounter = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode cn = parameters.getChild(i++);\n        if (cn.getType().equals(WebcrawlerConfig.NODE_ACCESSCREDENTIAL))\n        {\n          // A bin description node!  Look for all its parameters.\n          String type = cn.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n          if (!type.equals(WebcrawlerConfig.ATTRVALUE_SESSION))\n          {\n            String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n            String domain = cn.getAttributeValue(WebcrawlerConfig.ATTR_DOMAIN);\n            if (domain == null)\n              domain = \"\";\n            String userName = cn.getAttributeValue(WebcrawlerConfig.ATTR_USERNAME);\n            String password = out.mapPasswordToKey(ManifoldCF.deobfuscate(cn.getAttributeValue(WebcrawlerConfig.ATTR_PASSWORD)));\n                                        \n            // It's prefix will be...\n            String prefix = \"acredential_\" + Integer.toString(accessCounter);\n            out.print(\n\"        <tr class=\\\"\"+(((accessCounter % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"\"+prefix+\"\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Delete\") + \"\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeletePageAuthenticationUrlRegularExpression\")+Integer.toString(accessCounter+1)+\"\\\" onclick='javascript:deleteARegexp(\"+Integer.toString(accessCounter)+\");'/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"op_\"+prefix+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"regexp_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"radio\\\" name=\\\"type_\"+prefix+\"\\\" value=\\\"basic\\\" \"+(type.equals(\"basic\")?\"checked=\\\"\\\"\":\"\")+\" />&nbsp;\" + Messages.getBodyString(locale,\"WebcrawlerConnector.BasicAuthentication\") + \"</nobr><br/>\\n\"+\n\"            <nobr><input type=\\\"radio\\\" name=\\\"type_\"+prefix+\"\\\" value=\\\"ntlm\\\" \"+(type.equals(\"ntlm\")?\"checked=\\\"\\\"\":\"\")+\" />&nbsp;\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NTLMAuthentication\") + \"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"16\\\" name=\\\"\"+\"domain_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(domain)+\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"16\\\" name=\\\"\"+\"username_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(userName)+\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"password\\\" size=\\\"16\\\" name=\\\"\"+\"password_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(password)+\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"\n            );\n            accessCounter++;\n          }\n        }\n      }\n\n      if (accessCounter == 0)\n      {\n        out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formmessage\\\" colspan=\\\"6\\\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoPageAccessCredentialsSpecified\") + \"</td></tr>\\n\"\n        );\n      }\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formseparator\\\" colspan=\\\"6\\\"><hr/></td></tr>\\n\"+\n\"        <tr class=\\\"formrow\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"acredential\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Add\") + \"\\\" alt=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.AddPageAuthenticationUrlRegularExpression\") + \"\\\" onclick=\\\"javascript:addARegexp();\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"acredential_count\\\" value=\\\"\"+accessCounter+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"acredential_op\\\" value=\\\"Continue\\\"/>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"regexp_acredential\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"radio\\\" name=\\\"type_acredential\\\" value=\\\"basic\\\" checked=\\\"\\\" />&nbsp;\" + Messages.getBodyString(locale,\"WebcrawlerConnector.BasicAuthentication\") + \"</nobr><br/>\\n\"+\n\"            <nobr><input type=\\\"radio\\\" name=\\\"type_acredential\\\" value=\\\"ntlm\\\" />&nbsp;\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NTLMAuthentication\") + \"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"16\\\" name=\\\"domain_acredential\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"16\\\" name=\\\"username_acredential\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"password\\\" size=\\\"16\\\" name=\\\"password_acredential\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"+\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"        \\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.SessionBasedAccessCredentials\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"boxcell\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLRegularExpression\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.LoginPages\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n      );\n      i = 0;\n      accessCounter = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode cn = parameters.getChild(i++);\n        if (cn.getType().equals(WebcrawlerConfig.NODE_ACCESSCREDENTIAL))\n        {\n          // A bin description node!  Look for all its parameters.\n          String type = cn.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n          if (type.equals(WebcrawlerConfig.ATTRVALUE_SESSION))\n          {\n            String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n                                        \n            // It's prefix will be...\n            String prefix = \"scredential_\" + Integer.toString(accessCounter);\n            out.print(\n\"        <tr class=\\\"\"+(((accessCounter % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"\"+prefix+\"\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Delete\") + \"\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteSessionAuthenticationUrlRegularExpression\")+Integer.toString(accessCounter+1)+\"\\\" onclick='javascript:deleteSRegexp(\"+Integer.toString(accessCounter)+\");'/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+prefix+\"_op\"+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+prefix+\"_regexp\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"boxcell\\\">\\n\"+\n\"            <table class=\\\"formtable\\\">\\n\"+\n\"              <tr class=\\\"formheaderrow\\\">\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.LoginURLRegularExpression\") + \"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.PageType\") + \"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.FormNamelinkTargetRegularExpression\") + \"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.OverrideTargetURL\") + \"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.OverrideFormParameters\") + \"</nobr></td>\\n\"+\n\"              </tr>\\n\"\n            );\n            int q = 0;\n            int authPageCounter = 0;\n            while (q < cn.getChildCount())\n            {\n              ConfigNode authPageNode = cn.getChild(q++);\n              if (authPageNode.getType().equals(WebcrawlerConfig.NODE_AUTHPAGE))\n              {\n                String pageRegexp = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n                String pageType = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n                String matchRegexp = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_MATCHREGEXP);\n                if (matchRegexp == null)\n                  matchRegexp = \"\";\n                String overrideTargetURL = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_OVERRIDETARGETURL);\n                if (overrideTargetURL == null)\n                  overrideTargetURL = \"\";\n                String authpagePrefix = prefix + \"_\" + authPageCounter;\n                out.print(\n\"              <tr class=\\\"\"+(((authPageCounter % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"                <td class=\\\"formcolumncell\\\">\\n\"+\n\"                  <a name=\\\"\"+authpagePrefix+\"\\\">\\n\"+\n\"                    <input type=\\\"button\\\" value=\\\"Delete\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteLoginPage\")+(authPageCounter+1)+\" for url regular expression #\"+Integer.toString(accessCounter+1)+\"\\\" onclick='javascript:deleteLoginPage(\"+Integer.toString(accessCounter)+\",\"+Integer.toString(authPageCounter)+\");'/>\\n\"+\n\"                    <input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_op\"+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"                    <input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_regexp\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(pageRegexp)+\"\\\"/>\\n\"+\n\"                    <input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_type\"+\"\\\" value=\\\"\"+pageType+\"\\\"/>\\n\"+\n\"                  </a>\\n\"+\n\"                </td>\\n\"+\n\"\\n\"+\n\"                <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(pageRegexp)+\"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\"><nobr>\"+pageType+\"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\"><nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"\"+authpagePrefix+\"_matchregexp\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(matchRegexp)+\"\\\"/></nobr></td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\"><nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"\"+authpagePrefix+\"_overridetargeturl\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(overrideTargetURL)+\"\\\"/></nobr></td>\\n\"\n                );\n                if (pageType.equals(WebcrawlerConfig.ATTRVALUE_FORM))\n                {\n                  out.print(\n\"                <td class=\\\"boxcell\\\">\\n\"+\n\"                  <table class=\\\"formtable\\\">\\n\"+\n\"                    <tr class=\\\"formheaderrow\\\">\\n\"+\n\"                      <td class=\\\"formcolumnheader\\\"></td>\\n\"+\n\"                      <td class=\\\"formcolumnheader\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.ParameterRegularExpression\")+\"</nobr></td>\\n\"+\n\"                      <td class=\\\"formcolumnheader\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.Value\")+\"</nobr></td>\\n\"+\n\"                      <td class=\\\"formcolumnheader\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.Password\")+\"</nobr></td>\\n\"+\n\"                    </tr>\\n\"\n                  );\n                  int z = 0;\n                  int paramCounter = 0;\n                  while (z < authPageNode.getChildCount())\n                  {\n                    ConfigNode paramNode = authPageNode.getChild(z++);\n                    if (paramNode.getType().equals(WebcrawlerConfig.NODE_AUTHPARAMETER))\n                    {\n                      String param = paramNode.getAttributeValue(WebcrawlerConfig.ATTR_NAMEREGEXP);\n                      if (param == null)\n                        param = \"\";\n                      String value = paramNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n                      if (value == null)\n                        value = \"\";\n                      String password = paramNode.getAttributeValue(WebcrawlerConfig.ATTR_PASSWORD);\n                      if (password == null)\n                        password = \"\";\n                      else\n                        password = out.mapPasswordToKey(ManifoldCF.deobfuscate(password));\n                      String authParamPrefix = authpagePrefix + \"_\" + paramCounter;\n                      out.print(\n\"                    <tr class=\\\"\"+(((paramCounter % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"                      <td class=\\\"formcolumncell\\\">\\n\"+\n\"                        <a name=\\\"\"+authParamPrefix+\"\\\">\\n\"+\n\"                          <input type=\\\"button\\\" value=\\\"Delete\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteParameter\")+(paramCounter+1)+Messages.getAttributeString(locale,\"WebcrawlerConnector.ForLoginPage\")+(authPageCounter+1)+Messages.getAttributeString(locale,\"WebcrawlerConnector.ForCredential\")+(accessCounter+1)+\"\\\" onclick='javascript:deleteLoginPageParameter(\"+accessCounter+\",\"+authPageCounter+\",\"+paramCounter+\");'/>\\n\"+\n\"                          <input type=\\\"hidden\\\" name=\\\"\"+authParamPrefix+\"_op\"+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"                        </a>\\n\"+\n\"                      </td>\\n\"+\n\"                      <td class=\\\"formcolumncell\\\">\\n\"+\n\"                        <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"\"+authParamPrefix+\"_param\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(param)+\"\\\"/></nobr>\\n\"+\n\"                      </td>\\n\"+\n\"                      <td class=\\\"formcolumncell\\\">\\n\"+\n\"                        <nobr><input type=\\\"text\\\" size=\\\"15\\\" name=\\\"\"+authParamPrefix+\"_value\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(value)+\"\\\"/></nobr>\\n\"+\n\"                      </td>\\n\"+\n\"                      <td class=\\\"formcolumncell\\\">\\n\"+\n\"                        <nobr><input type=\\\"password\\\" size=\\\"15\\\" name=\\\"\"+authParamPrefix+\"_password\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(password)+\"\\\"/></nobr>\\n\"+\n\"                      </td>\\n\"+\n\"                    </tr>\\n\"\n                      );\n                      paramCounter++;\n                    }\n                  }\n                  out.print(\n\"                    <tr class=\\\"formrow\\\"><td class=\\\"formseparator\\\" colspan=\\\"4\\\"><hr/></td></tr>\\n\"+\n\"                    <tr class=\\\"formrow\\\">\\n\"+\n\"                      <td class=\\\"formcolumncell\\\">\\n\"+\n\"                        <a name=\\\"\"+authpagePrefix+\"_loginparam\"+\"\\\">\\n\"+\n\"                          <input type=\\\"button\\\" value=\\\"Add\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.AddParameterToLoginPage\")+(authPageCounter+1)+Messages.getAttributeString(locale,\"WebcrawlerConnector.ForCredential\")+(accessCounter+1)+\"\\\" onclick='javascript:addLoginPageParameter(\"+accessCounter+\",\"+authPageCounter+\");'/>\\n\"+\n\"                        </a>\\n\"+\n\"                        <input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_loginparamcount\"+\"\\\" value=\\\"\"+paramCounter+\"\\\"/>\\n\"+\n\"                        <input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_loginparamop\"+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"                      </td>\\n\"+\n\"                      <td class=\\\"formcolumncell\\\">\\n\"+\n\"                        <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"\"+authpagePrefix+\"_loginparamname\"+\"\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"                      </td>\\n\"+\n\"                      <td class=\\\"formcolumncell\\\">\\n\"+\n\"                        <nobr><input type=\\\"text\\\" size=\\\"15\\\" name=\\\"\"+authpagePrefix+\"_loginparamvalue\"+\"\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"                      </td>\\n\"+\n\"                      <td class=\\\"formcolumncell\\\">\\n\"+\n\"                        <nobr><input type=\\\"password\\\" size=\\\"15\\\" name=\\\"\"+authpagePrefix+\"_loginparampassword\"+\"\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"                      </td>\\n\"+\n\"                    </tr>\\n\"+\n\"                  </table>\\n\"+\n\"                </td>\\n\"\n                  );\n                }\n                else\n                {\n                  out.print(\n\"                <td class=\\\"formcolumncell\\\"></td>\\n\"\n                  );\n                }\n                out.print(\n\"              </tr>\\n\"\n                );\n                authPageCounter++;\n              }\n            }\n            out.print(\n\"              <tr class=\\\"formrow\\\"><td class=\\\"formseparator\\\" colspan=\\\"6\\\"><hr/></td></tr>\\n\"+\n\"              <tr class=\\\"formrow\\\">\\n\"+\n\"                <td class=\\\"formcolumncell\\\">\\n\"+\n\"                  <a name=\\\"\"+prefix+\"_loginpage\"+\"\\\">\\n\"+\n\"                    <input type=\\\"button\\\" value=\\\"Add\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.AddLoginPageToCredential\")+(accessCounter+1)+\"\\\" onclick='javascript:addLoginPage(\"+accessCounter+\");'/>\\n\"+\n\"                  </a>\\n\"+\n\"                  <input type=\\\"hidden\\\" name=\\\"\"+prefix+\"_loginpagecount\"+\"\\\" value=\\\"\"+authPageCounter+\"\\\"/>\\n\"+\n\"                  <input type=\\\"hidden\\\" name=\\\"\"+prefix+\"_loginpageop\"+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"                </td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\">\\n\"+\n\"                  <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"\"+prefix+\"_loginpageregexp\"+\"\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"                </td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\">\\n\"+\n\"                  <nobr><input type=\\\"radio\\\" name=\\\"\"+prefix+\"_loginpagetype\"+\"\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_FORM+\"\\\" checked=\\\"\\\"/>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.FormName\")+\"</nobr><br/>\\n\"+\n\"                  <nobr><input type=\\\"radio\\\" name=\\\"\"+prefix+\"_loginpagetype\"+\"\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_LINK+\"\\\"/>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.LinkTarget\")+\"</nobr>\\n\"+\n\"                  <nobr><input type=\\\"radio\\\" name=\\\"\"+prefix+\"_loginpagetype\"+\"\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_REDIRECTION+\"\\\"/>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.RedirectionTo\")+\"</nobr>\\n\"+\n\"                  <nobr><input type=\\\"radio\\\" name=\\\"\"+prefix+\"_loginpagetype\"+\"\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_CONTENT+\"\\\"/>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.PageContent\")+\"</nobr>\\n\"+\n\"                </td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\">\\n\"+\n\"                  <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"\"+prefix+\"_loginpagematchregexp\"+\"\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"                </td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\">\\n\"+\n\"                  <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"\"+prefix+\"_loginpageoverridetargeturl\"+\"\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"                </td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\">\\n\"+\n\"                </td>\\n\"+\n\"              </tr>\\n\"+\n\"\\n\"+\n\"            </table>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"\n            );\n            accessCounter++;\n          }\n        }\n      }\n\n      if (accessCounter == 0)\n      {\n        out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formmessage\\\" colspan=\\\"3\\\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoSessionBasedAccessCredentialsSpecified\") + \"</td></tr>\\n\"\n        );\n      }\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formseparator\\\" colspan=\\\"3\\\"><hr/></td></tr>\\n\"+\n\"        <tr class=\\\"formrow\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"scredential\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Add\") + \"\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.AddSessionAuthenticationUrlRegularExpression\")+\"\\\" onclick=\\\"javascript:addSRegexp();\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"scredential_count\\\" value=\\\"\"+accessCounter+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"scredential_op\\\" value=\\\"Continue\\\"/>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"scredential_regexp\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"+\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      // Hiddens for Access Credentials tab.\n      \n      // Page credentials first.\n      int i = 0;\n      int accessCounter = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode cn = parameters.getChild(i++);\n        if (cn.getType().equals(WebcrawlerConfig.NODE_ACCESSCREDENTIAL))\n        {\n          // A bin description node!  Look for all its parameters.\n          String type = cn.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n          if (!type.equals(WebcrawlerConfig.ATTRVALUE_SESSION))\n          {\n            String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n            String domain = cn.getAttributeValue(WebcrawlerConfig.ATTR_DOMAIN);\n            if (domain == null)\n              domain = \"\";\n            String userName = cn.getAttributeValue(WebcrawlerConfig.ATTR_USERNAME);\n            String password = out.mapPasswordToKey(ManifoldCF.deobfuscate(cn.getAttributeValue(WebcrawlerConfig.ATTR_PASSWORD)));\n\n            // It's prefix will be...\n            String prefix = \"acredential_\" + Integer.toString(accessCounter);\n            out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"type_\"+prefix+\"\\\" value=\\\"\"+type+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"domain_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(domain)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"username_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(userName)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"password_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(password)+\"\\\"/>\\n\"\n            );\n            accessCounter++;\n          }\n        }\n      }\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"acredential_count\\\" value=\\\"\"+accessCounter+\"\\\"/>\\n\"\n      );\n\n      // Now, session credentials\n      i = 0;\n      accessCounter = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode cn = parameters.getChild(i++);\n        if (cn.getType().equals(WebcrawlerConfig.NODE_ACCESSCREDENTIAL))\n        {\n          // A bin description node!  Look for all its parameters.\n          String type = cn.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n          if (type.equals(WebcrawlerConfig.ATTRVALUE_SESSION))\n          {\n            String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n            // It's identifier will be...\n            String prefix = \"scredential_\" + Integer.toString(accessCounter);\n            out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+prefix+\"_regexp\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"\n            );\n            // Loop through login pages...\n            int q = 0;\n            int authPageCounter = 0;\n            while (q < cn.getChildCount())\n            {\n              ConfigNode authPageNode = cn.getChild(q++);\n              if (authPageNode.getType().equals(WebcrawlerConfig.NODE_AUTHPAGE))\n              {\n                String pageRegexp = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n                String pageType = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n                String matchRegexp = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_MATCHREGEXP);\n                if (matchRegexp == null)\n                  matchRegexp = \"\";\n                String overrideTargetURL = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_OVERRIDETARGETURL);\n                if (overrideTargetURL == null)\n                  overrideTargetURL = \"\";\n                String authpagePrefix = prefix + \"_\" + authPageCounter;\n                out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_regexp\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(pageRegexp)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_type\"+\"\\\" value=\\\"\"+pageType+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_matchregexp\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(matchRegexp)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_overridetargeturl\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(overrideTargetURL)+\"\\\"/>\\n\"\n                );\n                if (pageType.equals(WebcrawlerConfig.ATTRVALUE_FORM))\n                {\n                  int z = 0;\n                  int paramCounter = 0;\n                  while (z < authPageNode.getChildCount())\n                  {\n                    ConfigNode paramNode = authPageNode.getChild(z++);\n                    if (paramNode.getType().equals(WebcrawlerConfig.NODE_AUTHPARAMETER))\n                    {\n                      String param = paramNode.getAttributeValue(WebcrawlerConfig.ATTR_NAMEREGEXP);\n                      if (param == null)\n                        param = \"\";\n                      String value = paramNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n                      if (value == null)\n                        value = \"\";\n                      String password = paramNode.getAttributeValue(WebcrawlerConfig.ATTR_PASSWORD);\n                      if (password == null)\n                        password = \"\";\n                      else\n                        password = out.mapPasswordToKey(ManifoldCF.deobfuscate(password));\n                      String authParamPrefix = authpagePrefix + \"_\" + paramCounter;\n                      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+authParamPrefix+\"_param\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(param)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+authParamPrefix+\"_value\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(value)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+authParamPrefix+\"_password\"+\"\\\" value=\\\"\"+Encoder.attributeEscape(password)+\"\\\"/>\\n\"\n                      );\n                      paramCounter++;\n                    }\n                  }\n                  out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+authpagePrefix+\"_loginparamcount\"+\"\\\" value=\\\"\"+paramCounter+\"\\\"/>\\n\"\n                  );\n                }\n                authPageCounter++;\n              }\n            }\n            out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+prefix+\"_loginpagecount\"+\"\\\" value=\\\"\"+authPageCounter+\"\\\"/>\\n\"\n            );\n            accessCounter++;\n          }\n        }\n      }\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"scredential_count\\\" value=\\\"\"+accessCounter+\"\\\"/>\\n\"\n      );\n    }\n\n    // \"Certificates\" tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Certificates\")))\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.TrustCertificates\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"boxcell\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLRegularExpression\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Certificate\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n      );\n      int i = 0;\n      int trustsCounter = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode cn = parameters.getChild(i++);\n        if (cn.getType().equals(WebcrawlerConfig.NODE_TRUST))\n        {\n          // It's prefix will be...\n          String prefix = \"trust_\" + Integer.toString(trustsCounter);\n          // A bin description node!  Look for all its parameters.\n          String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n          String trustEverything = cn.getAttributeValue(WebcrawlerConfig.ATTR_TRUSTEVERYTHING);\n          if (trustEverything != null && trustEverything.equals(\"true\"))\n          {\n            // We trust everything that matches this regexp\n            out.print(\n\"        <tr class=\\\"\"+(((trustsCounter % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"\"+prefix+\"\\\"><input type=\\\"button\\\" value=\\\"Delete\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteTrustUrlRegularExpression\")+Integer.toString(trustsCounter+1)+\"\\\" onclick='javascript:deleteTRegexp(\"+Integer.toString(trustsCounter)+\");'/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+\"op_\"+prefix+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+\"trustall_\"+prefix+\"\\\" value=\\\"true\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+\"truststore_\"+prefix+\"\\\" value=\\\"\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><i>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.TrustEverything\")+\"</i></nobr>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"\n            );\n            trustsCounter++;\n          }\n          else\n          {\n            String trustStore = cn.getAttributeValue(WebcrawlerConfig.ATTR_TRUSTSTORE);\n            IKeystoreManager localTruststore = KeystoreManagerFactory.make(\"\",trustStore);\n            String[] truststoreContents = localTruststore.getContents();\n            \n            // Each trust store will have only at most one cert in it at this level.  These individual certs are assembled into the proper trust store\n            // for each individual url at fetch time.\n            \n            if (truststoreContents.length == 1)\n            {\n              String alias = truststoreContents[0];\n              String description = localTruststore.getDescription(alias);\n              String shortenedDescription = description;\n              if (shortenedDescription.length() > 100)\n                shortenedDescription = shortenedDescription.substring(0,100) + \"...\";\n              out.print(\n\"        <tr class=\\\"\"+(((trustsCounter % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"\"+prefix+\"\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"Delete\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteTrustUrlRegularExpression\")+Integer.toString(trustsCounter+1)+\"\\\" onclick='javascript:deleteTRegexp(\"+Integer.toString(trustsCounter)+\");'/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+\"op_\"+prefix+\"\\\" value=\\\"Continue\\\"/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+\"trustall_\"+prefix+\"\\\" value=\\\"false\\\"/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+\"truststore_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(trustStore)+\"\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr>\"+Encoder.bodyEscape(shortenedDescription)+\"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"\n              );\n              trustsCounter++;\n            }\n          }\n\n        }\n      }\n\n      if (trustsCounter == 0)\n      {\n        out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formmessage\\\" colspan=\\\"3\\\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoTrustCertificatesSpecified\") + \"</td></tr>\\n\"\n        );\n      }\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formseparator\\\" colspan=\\\"3\\\"><hr/></td></tr>\\n\"+\n\"        <tr class=\\\"formrow\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"trust\\\"><input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Add\") + \"\\\" alt=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.AddUrlRegularExpressionForTruststore\") + \"\\\" onclick=\\\"javascript:addTRegexp();\\\"/></a>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"trust_count\\\" value=\\\"\"+trustsCounter+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"trust_op\\\" value=\\\"Continue\\\"/>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr><input type=\\\"text\\\" size=\\\"30\\\" name=\\\"regexp_trust\\\" value=\\\"\\\"/></nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.UploadCertificate\") + \" <input name=\\\"certificate_trust\\\" size=\\\"50\\\" type=\\\"file\\\"/>&nbsp;<input name=\\\"all_trust\\\" type=\\\"checkbox\\\" value=\\\"true\\\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.TrustEverything\") + \"</input></nobr>\\n\"+\n\"          </td>\\n\"+\n\"        </tr>\\n\"+\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      // Hiddens for Certificates tab.\n      int i = 0;\n      int trustsCounter = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode cn = parameters.getChild(i++);\n        if (cn.getType().equals(WebcrawlerConfig.NODE_TRUST))\n        {\n          // It's prefix will be...\n          String prefix = \"trust_\" + Integer.toString(trustsCounter);\n\n          // A bin description node!  Look for all its parameters.\n          String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n          String trustEverything = cn.getAttributeValue(WebcrawlerConfig.ATTR_TRUSTEVERYTHING);\n          if (trustEverything != null && trustEverything.equals(\"true\"))\n          {\n            // We trust everything that matches this regexp\n            out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"truststore_\"+prefix+\"\\\" value=\\\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"trustall_\"+prefix+\"\\\" value=\\\"true\\\"/>\\n\"\n            );\n            trustsCounter++;\n          }\n          else\n          {\n            String trustStore = cn.getAttributeValue(WebcrawlerConfig.ATTR_TRUSTSTORE);\n            out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"regexp_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexp)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"truststore_\"+prefix+\"\\\" value=\\\"\"+Encoder.attributeEscape(trustStore)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+\"trustall_\"+prefix+\"\\\" value=\\\"false\\\"/>\\n\"\n            );\n            trustsCounter++;\n          }\n        }\n      }\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"trust_count\\\" value=\\\"\"+trustsCounter+\"\\\"/>\\n\"\n      );\n    }\n\n  }\n  \n  /** Process a configuration post.\n  * This method is called at the start of the connector's configuration page, whenever there is a possibility that form data for a connection has been\n  * posted.  Its purpose is to gather form information and modify the configuration parameters accordingly.\n  * The name of the posted form is \"editconnection\".\n  *@param threadContext is the local thread context.\n  *@param variableContext is the set of variables available from the post, including binary file post information.\n  *@param parameters are the configuration parameters, as they currently exist, for this connection being configured.\n  *@return null if all is well, or a string error message if there is an error that should prevent saving of the connection (and cause a redirection to an error page).\n  */\n  @Override\n  public String processConfigurationPost(IThreadContext threadContext, IPostParameters variableContext,\n    Locale locale, ConfigParams parameters)\n    throws ManifoldCFException\n  {\n    String email = variableContext.getParameter(\"email\");\n    if (email != null)\n      parameters.setParameter(WebcrawlerConfig.PARAMETER_EMAIL,email);\n    String robotsUsage = variableContext.getParameter(\"robotsusage\");\n    if (robotsUsage != null)\n      parameters.setParameter(WebcrawlerConfig.PARAMETER_ROBOTSUSAGE,robotsUsage);\n    String proxyHost = variableContext.getParameter(\"proxyhost\");\n    if (proxyHost != null)\n      parameters.setParameter(WebcrawlerConfig.PARAMETER_PROXYHOST,proxyHost);\n    String proxyPort = variableContext.getParameter(\"proxyport\");\n    if (proxyPort != null)\n      parameters.setParameter(WebcrawlerConfig.PARAMETER_PROXYPORT,proxyPort);\n    String proxyAuthDomain = variableContext.getParameter(\"proxyauthdomain\");\n    if (proxyAuthDomain != null)\n      parameters.setParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHDOMAIN,proxyAuthDomain);\n    String proxyAuthUsername = variableContext.getParameter(\"proxyauthusername\");\n    if (proxyAuthUsername != null)\n      parameters.setParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHUSERNAME,proxyAuthUsername);\n    String proxyAuthPassword = variableContext.getParameter(\"proxyauthpassword\");\n    if (proxyAuthPassword != null)\n      parameters.setObfuscatedParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHPASSWORD,variableContext.mapKeyToPassword(proxyAuthPassword));\n\n    String x = variableContext.getParameter(\"bandwidth_count\");\n    if (x != null && x.length() > 0)\n    {\n      // About to gather the bandwidth nodes, so get rid of the old ones.\n      int i = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode node = parameters.getChild(i);\n        if (node.getType().equals(WebcrawlerConfig.NODE_BINDESC))\n          parameters.removeChild(i);\n        else\n          i++;\n      }\n      int count = Integer.parseInt(x);\n      i = 0;\n      while (i < count)\n      {\n        String prefix = \"bandwidth_\"+Integer.toString(i);\n        String op = variableContext.getParameter(\"op_\"+prefix);\n        if (op == null || !op.equals(\"Delete\"))\n        {\n          // Gather the regexp etc.\n          String regexp = variableContext.getParameter(\"regexp_\"+prefix);\n          String isCaseInsensitive = variableContext.getParameter(\"insensitive_\"+prefix);\n          String maxConnections = variableContext.getParameter(\"connections_\"+prefix);\n          String rate = variableContext.getParameter(\"rate_\"+prefix);\n          String fetches = variableContext.getParameter(\"fetches_\"+prefix);\n          ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_BINDESC);\n          node.setAttribute(WebcrawlerConfig.ATTR_BINREGEXP,regexp);\n          if (isCaseInsensitive != null && isCaseInsensitive.length() > 0)\n            node.setAttribute(WebcrawlerConfig.ATTR_INSENSITIVE,isCaseInsensitive);\n          if (maxConnections != null && maxConnections.length() > 0)\n          {\n            ConfigNode child = new ConfigNode(WebcrawlerConfig.NODE_MAXCONNECTIONS);\n            child.setAttribute(WebcrawlerConfig.ATTR_VALUE,maxConnections);\n            node.addChild(node.getChildCount(),child);\n          }\n          if (rate != null && rate.length() > 0)\n          {\n            ConfigNode child = new ConfigNode(WebcrawlerConfig.NODE_MAXKBPERSECOND);\n            child.setAttribute(WebcrawlerConfig.ATTR_VALUE,rate);\n            node.addChild(node.getChildCount(),child);\n          }\n          if (fetches != null && fetches.length() > 0)\n          {\n            ConfigNode child = new ConfigNode(WebcrawlerConfig.NODE_MAXFETCHESPERMINUTE);\n            child.setAttribute(WebcrawlerConfig.ATTR_VALUE,fetches);\n            node.addChild(node.getChildCount(),child);\n          }\n          parameters.addChild(parameters.getChildCount(),node);\n        }\n        i++;\n      }\n      String addop = variableContext.getParameter(\"bandwidth_op\");\n      if (addop != null && addop.equals(\"Add\"))\n      {\n        String regexp = variableContext.getParameter(\"regexp_bandwidth\");\n        String isCaseInsensitive = variableContext.getParameter(\"insensitive_bandwidth\");\n        String maxConnections = variableContext.getParameter(\"connections_bandwidth\");\n        String rate = variableContext.getParameter(\"rate_bandwidth\");\n        String fetches = variableContext.getParameter(\"fetches_bandwidth\");\n        ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_BINDESC);\n        node.setAttribute(WebcrawlerConfig.ATTR_BINREGEXP,regexp);\n        if (isCaseInsensitive != null && isCaseInsensitive.length() > 0)\n          node.setAttribute(WebcrawlerConfig.ATTR_INSENSITIVE,isCaseInsensitive);\n        if (maxConnections != null && maxConnections.length() > 0)\n        {\n          ConfigNode child = new ConfigNode(WebcrawlerConfig.NODE_MAXCONNECTIONS);\n          child.setAttribute(WebcrawlerConfig.ATTR_VALUE,maxConnections);\n          node.addChild(node.getChildCount(),child);\n        }\n        if (rate != null && rate.length() > 0)\n        {\n          ConfigNode child = new ConfigNode(WebcrawlerConfig.NODE_MAXKBPERSECOND);\n          child.setAttribute(WebcrawlerConfig.ATTR_VALUE,rate);\n          node.addChild(node.getChildCount(),child);\n        }\n        if (fetches != null && fetches.length() > 0)\n        {\n          ConfigNode child = new ConfigNode(WebcrawlerConfig.NODE_MAXFETCHESPERMINUTE);\n          child.setAttribute(WebcrawlerConfig.ATTR_VALUE,fetches);\n          node.addChild(node.getChildCount(),child);\n        }\n        parameters.addChild(parameters.getChildCount(),node);\n      }\n    }\n    \n    x = variableContext.getParameter(\"acredential_count\");\n    if (x != null && x.length() > 0)\n    {\n      // About to gather the access credential nodes, so get rid of the old ones.\n      int i = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode node = parameters.getChild(i);\n        if (node.getType().equals(WebcrawlerConfig.NODE_ACCESSCREDENTIAL)\n                                  && !node.getAttributeValue(WebcrawlerConfig.ATTR_TYPE).equals(WebcrawlerConfig.ATTRVALUE_SESSION))\n          parameters.removeChild(i);\n        else\n          i++;\n      }\n      int count = Integer.parseInt(x);\n      i = 0;\n      while (i < count)\n      {\n        String prefix = \"acredential_\"+Integer.toString(i);\n        String op = variableContext.getParameter(\"op_\"+prefix);\n        if (op == null || !op.equals(\"Delete\"))\n        {\n          // Gather the regexp etc.\n          String regexp = variableContext.getParameter(\"regexp_\"+prefix);\n          String type = variableContext.getParameter(\"type_\"+prefix);\n          String domain = variableContext.getParameter(\"domain_\"+prefix);\n          if (domain == null)\n            domain = \"\";\n          String userName = variableContext.getParameter(\"username_\"+prefix);\n          String password = variableContext.getParameter(\"password_\"+prefix);\n          ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_ACCESSCREDENTIAL);\n          node.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,regexp);\n          node.setAttribute(WebcrawlerConfig.ATTR_TYPE,type);\n          node.setAttribute(WebcrawlerConfig.ATTR_DOMAIN,domain);\n          node.setAttribute(WebcrawlerConfig.ATTR_USERNAME,userName);\n          node.setAttribute(WebcrawlerConfig.ATTR_PASSWORD,\n            ManifoldCF.obfuscate(variableContext.mapKeyToPassword(password)));\n          parameters.addChild(parameters.getChildCount(),node);\n        }\n        i++;\n      }\n      String addop = variableContext.getParameter(\"acredential_op\");\n      if (addop != null && addop.equals(\"Add\"))\n      {\n        String regexp = variableContext.getParameter(\"regexp_acredential\");\n        String type = variableContext.getParameter(\"type_acredential\");\n        String domain = variableContext.getParameter(\"domain_acredential\");\n        String userName = variableContext.getParameter(\"username_acredential\");\n        String password = variableContext.getParameter(\"password_acredential\");\n        ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_ACCESSCREDENTIAL);\n        node.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,regexp);\n        node.setAttribute(WebcrawlerConfig.ATTR_TYPE,type);\n        node.setAttribute(WebcrawlerConfig.ATTR_DOMAIN,domain);\n        node.setAttribute(WebcrawlerConfig.ATTR_USERNAME,userName);\n        node.setAttribute(WebcrawlerConfig.ATTR_PASSWORD,ManifoldCF.obfuscate(password));\n        parameters.addChild(parameters.getChildCount(),node);\n      }\n    }\n\n    x = variableContext.getParameter(\"scredential_count\");\n    if (x != null && x.length() > 0)\n    {\n      // About to gather the access credential nodes, so get rid of the old ones.\n      int i = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode node = parameters.getChild(i);\n        if (node.getType().equals(WebcrawlerConfig.NODE_ACCESSCREDENTIAL)\n                                  && node.getAttributeValue(WebcrawlerConfig.ATTR_TYPE).equals(WebcrawlerConfig.ATTRVALUE_SESSION))\n          parameters.removeChild(i);\n        else\n          i++;\n      }\n      int count = Integer.parseInt(x);\n      i = 0;\n      while (i < count)\n      {\n        String prefix = \"scredential_\"+Integer.toString(i);\n        String op = variableContext.getParameter(prefix+\"_op\");\n        if (op == null || !op.equals(\"Delete\"))\n        {\n          // Gather the regexp etc.\n          String regexp = variableContext.getParameter(prefix+\"_regexp\");\n          ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_ACCESSCREDENTIAL);\n          node.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,regexp);\n          node.setAttribute(WebcrawlerConfig.ATTR_TYPE,WebcrawlerConfig.ATTRVALUE_SESSION);\n          // How many login pages are there?\n          int loginPageCount = Integer.parseInt(variableContext.getParameter(prefix+\"_loginpagecount\"));\n          int q = 0;\n          while (q < loginPageCount)\n          {\n            String authpagePrefix = prefix + \"_\" + Integer.toString(q);\n            String authpageOp = variableContext.getParameter(authpagePrefix+\"_op\");\n            if (authpageOp == null || !authpageOp.equals(\"Delete\"))\n            {\n              String pageRegexp = variableContext.getParameter(authpagePrefix+\"_regexp\");\n              String pageType = variableContext.getParameter(authpagePrefix+\"_type\");\n              String matchRegexp = variableContext.getParameter(authpagePrefix+\"_matchregexp\");\n              if (matchRegexp == null)\n                matchRegexp = \"\";\n              String overrideTargetURL = variableContext.getParameter(authpagePrefix+\"_overridetargeturl\");\n              ConfigNode authPageNode = new ConfigNode(WebcrawlerConfig.NODE_AUTHPAGE);\n              authPageNode.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,pageRegexp);\n              authPageNode.setAttribute(WebcrawlerConfig.ATTR_TYPE,pageType);\n              authPageNode.setAttribute(WebcrawlerConfig.ATTR_MATCHREGEXP,matchRegexp);\n              if (overrideTargetURL != null && overrideTargetURL.length() > 0)\n                authPageNode.setAttribute(WebcrawlerConfig.ATTR_OVERRIDETARGETURL,overrideTargetURL);\n              if (pageType.equals(WebcrawlerConfig.ATTRVALUE_FORM))\n              {\n                // How many parameters are there?\n                int paramCount = Integer.parseInt(variableContext.getParameter(authpagePrefix+\"_loginparamcount\"));\n                int z = 0;\n                while (z < paramCount)\n                {\n                  String paramPrefix = authpagePrefix+\"_\"+Integer.toString(z);\n                  String paramOp = variableContext.getParameter(paramPrefix+\"_op\");\n                  if (paramOp == null || !paramOp.equals(\"Delete\"))\n                  {\n                    String name = variableContext.getParameter(paramPrefix+\"_param\");\n                    String value = variableContext.getParameter(paramPrefix+\"_value\");\n                    String password = variableContext.getParameter(paramPrefix+\"_password\");\n                    ConfigNode paramNode = new ConfigNode(WebcrawlerConfig.NODE_AUTHPARAMETER);\n                    paramNode.setAttribute(WebcrawlerConfig.ATTR_NAMEREGEXP,name);\n                    if (value != null && value.length() > 0)\n                      paramNode.setAttribute(WebcrawlerConfig.ATTR_VALUE,value);\n                    if (password != null && password.length() > 0)\n                      paramNode.setAttribute(WebcrawlerConfig.ATTR_PASSWORD,ManifoldCF.obfuscate(variableContext.mapKeyToPassword(password)));\n                    authPageNode.addChild(authPageNode.getChildCount(),paramNode);\n                  }\n                  z++;\n                }\n                                                  \n                // Look for add op\n                String paramAddOp = variableContext.getParameter(authpagePrefix+\"_loginparamop\");\n                if (paramAddOp != null && paramAddOp.equals(\"Add\"))\n                {\n                  String name = variableContext.getParameter(authpagePrefix+\"_loginparamname\");\n                  String value = variableContext.getParameter(authpagePrefix+\"_loginparamvalue\");\n                  String password = variableContext.getParameter(authpagePrefix+\"_loginparampassword\");\n                  ConfigNode paramNode = new ConfigNode(WebcrawlerConfig.NODE_AUTHPARAMETER);\n                  paramNode.setAttribute(WebcrawlerConfig.ATTR_NAMEREGEXP,name);\n                  if (value != null && value.length() > 0)\n                    paramNode.setAttribute(WebcrawlerConfig.ATTR_VALUE,value);\n                  if (password != null && password.length() > 0)\n                    paramNode.setAttribute(WebcrawlerConfig.ATTR_PASSWORD,ManifoldCF.obfuscate(password));\n                  authPageNode.addChild(authPageNode.getChildCount(),paramNode);\n                }\n              }\n              \n              node.addChild(node.getChildCount(),authPageNode);\n            }\n            q++;\n          }\n          // Look for add op\n          String authpageAddop = variableContext.getParameter(prefix+\"_loginpageop\");\n          if (authpageAddop != null && authpageAddop.equals(\"Add\"))\n          {\n            String pageRegexp = variableContext.getParameter(prefix+\"_loginpageregexp\");\n            String pageType = variableContext.getParameter(prefix+\"_loginpagetype\");\n            String matchRegexp = variableContext.getParameter(prefix+\"_loginpagematchregexp\");\n            if (matchRegexp == null)\n              matchRegexp = \"\";\n            String overrideTargetURL = variableContext.getParameter(prefix+\"_loginpageoverridetargeturl\");\n            ConfigNode authPageNode = new ConfigNode(WebcrawlerConfig.NODE_AUTHPAGE);\n            authPageNode.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,pageRegexp);\n            authPageNode.setAttribute(WebcrawlerConfig.ATTR_TYPE,pageType);\n            authPageNode.setAttribute(WebcrawlerConfig.ATTR_MATCHREGEXP,matchRegexp);\n            if (overrideTargetURL != null && overrideTargetURL.length() > 0)\n              authPageNode.setAttribute(WebcrawlerConfig.ATTR_OVERRIDETARGETURL,overrideTargetURL);\n            node.addChild(node.getChildCount(),authPageNode);\n          }\n\n          parameters.addChild(parameters.getChildCount(),node);\n        }\n        i++;\n      }\n      String addop = variableContext.getParameter(\"scredential_op\");\n      if (addop != null && addop.equals(\"Add\"))\n      {\n        String regexp = variableContext.getParameter(\"scredential_regexp\");\n        ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_ACCESSCREDENTIAL);\n        node.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,regexp);\n        node.setAttribute(WebcrawlerConfig.ATTR_TYPE,WebcrawlerConfig.ATTRVALUE_SESSION);\n        parameters.addChild(parameters.getChildCount(),node);\n      }\n    }\n\n    x = variableContext.getParameter(\"trust_count\");\n    if (x != null && x.length() > 0)\n    {\n      // About to gather the trust nodes, so get rid of the old ones.\n      int i = 0;\n      while (i < parameters.getChildCount())\n      {\n        ConfigNode node = parameters.getChild(i);\n        if (node.getType().equals(WebcrawlerConfig.NODE_TRUST))\n          parameters.removeChild(i);\n        else\n          i++;\n      }\n      int count = Integer.parseInt(x);\n      i = 0;\n      while (i < count)\n      {\n        String prefix = \"trust_\"+Integer.toString(i);\n        String op = variableContext.getParameter(\"op_\"+prefix);\n        if (op == null || !op.equals(\"Delete\"))\n        {\n          // Gather the regexp etc.\n          String regexp = variableContext.getParameter(\"regexp_\"+prefix);\n          String trustall = variableContext.getParameter(\"trustall_\"+prefix);\n          String truststore = variableContext.getParameter(\"truststore_\"+prefix);\n          ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_TRUST);\n          node.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,regexp);\n          if (trustall != null && trustall.equals(\"true\"))\n            node.setAttribute(WebcrawlerConfig.ATTR_TRUSTEVERYTHING,\"true\");\n          else\n            node.setAttribute(WebcrawlerConfig.ATTR_TRUSTSTORE,truststore);\n          parameters.addChild(parameters.getChildCount(),node);\n        }\n        i++;\n      }\n      String addop = variableContext.getParameter(\"trust_op\");\n      if (addop != null && addop.equals(\"Add\"))\n      {\n        String regexp = variableContext.getParameter(\"regexp_trust\");\n        String trustall = variableContext.getParameter(\"all_trust\");\n        if (trustall != null && trustall.equals(\"true\"))\n        {\n          ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_TRUST);\n          node.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,regexp);\n          node.setAttribute(WebcrawlerConfig.ATTR_TRUSTEVERYTHING,\"true\");\n          parameters.addChild(parameters.getChildCount(),node);\n        }\n        else\n        {\n          byte[] certificateValue = variableContext.getBinaryBytes(\"certificate_trust\");\n          IKeystoreManager mgr = KeystoreManagerFactory.make(\"\");\n          java.io.InputStream is = new java.io.ByteArrayInputStream(certificateValue);\n          String certError = null;\n          try\n          {\n            mgr.importCertificate(\"Certificate\",is);\n          }\n          catch (Throwable e)\n          {\n            certError = e.getMessage();\n          }\n          finally\n          {\n            try\n            {\n              is.close();\n            }\n            catch (IOException e)\n            {\n              // Ignore this\n            }\n          }\n\n          if (certError != null)\n          {\n            // Redirect to error page\n            return \"Illegal certificate: \"+certError;\n          }\n\n          ConfigNode node = new ConfigNode(WebcrawlerConfig.NODE_TRUST);\n          node.setAttribute(WebcrawlerConfig.ATTR_URLREGEXP,regexp);\n          node.setAttribute(WebcrawlerConfig.ATTR_TRUSTSTORE,mgr.getString());\n          parameters.addChild(parameters.getChildCount(),node);\n        }\n      }\n    }\n    return null;\n  }\n  \n  /** View configuration.\n  * This method is called in the body section of the connector's view configuration page.  Its purpose is to present the connection information to the user.\n  * The coder can presume that the HTML that is output from this configuration will be within appropriate <html> and <body> tags.\n  *@param threadContext is the local thread context.\n  *@param out is the output to which any HTML should be sent.\n  *@param parameters are the configuration parameters, as they currently exist, for this connection being configured.\n  */\n  @Override\n  public void viewConfiguration(IThreadContext threadContext, IHTTPOutput out,\n    Locale locale, ConfigParams parameters)\n    throws ManifoldCFException, IOException\n  {\n    String email = parameters.getParameter(WebcrawlerConfig.PARAMETER_EMAIL);\n    String robots = parameters.getParameter(WebcrawlerConfig.PARAMETER_ROBOTSUSAGE);\n    if (robots.equals(\"none\"))\n      robots = \"Ignore robots.txt\";\n    else if (robots.equals(\"data\"))\n      robots = \"Obey robots.txt for data fetches only\";\n    else if (robots.equals(\"all\"))\n      robots = \"Obey robots.txt for all fetches\";\n    String proxyHost = parameters.getParameter(WebcrawlerConfig.PARAMETER_PROXYHOST);\n    if (proxyHost == null)\n      proxyHost = \"\";\n    String proxyPort = parameters.getParameter(WebcrawlerConfig.PARAMETER_PROXYPORT);\n    if (proxyPort == null)\n      proxyPort = \"\";\n    String proxyAuthDomain = parameters.getParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHDOMAIN);\n    if (proxyAuthDomain == null)\n      proxyAuthDomain = \"\";\n    String proxyAuthUsername = parameters.getParameter(WebcrawlerConfig.PARAMETER_PROXYAUTHUSERNAME);\n    if (proxyAuthUsername == null)\n      proxyAuthUsername = \"\";\n\n    out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.EmailAddress\")+\"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"1\\\">\"+Encoder.bodyEscape(email)+\"</td>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.RobotsUsage\")+\"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"1\\\"><nobr>\"+Encoder.bodyEscape(robots)+\"</nobr></td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyHostColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\"+Encoder.bodyEscape(proxyHost)+\"</td>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyPortColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\"+Encoder.bodyEscape(proxyPort)+\"</td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyAuthenticationDomainColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\"+Encoder.bodyEscape(proxyAuthDomain)+\"</td>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ProxyAuthenticationUserNameColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\"+Encoder.bodyEscape(proxyAuthUsername)+\"</td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.BandwidthThrottling\")+\"</nobr></td>\\n\"+\n\"    <td class=\\\"boxcell\\\" colspan=\\\"3\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.BinRegularExpression\")+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.CaseInsensitive\")+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.MaxConnections\")+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.MaxKbytesSec\")+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.MaxFetchesMin\")+\"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n    );\n    int i = 0;\n    int instanceNumber = 0;\n    while (i < parameters.getChildCount())\n    {\n      ConfigNode cn = parameters.getChild(i++);\n      if (cn.getType().equals(WebcrawlerConfig.NODE_BINDESC))\n      {\n        // A bin description node!  Look for all its parameters.\n        String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_BINREGEXP);\n        String isCaseInsensitive = cn.getAttributeValue(WebcrawlerConfig.ATTR_INSENSITIVE);\n        String maxConnections = null;\n        String maxKBPerSecond = null;\n        String maxFetchesPerMinute = null;\n        int j = 0;\n        while (j < cn.getChildCount())\n        {\n          ConfigNode childNode = cn.getChild(j++);\n          if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXCONNECTIONS))\n            maxConnections = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n          else if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXKBPERSECOND))\n            maxKBPerSecond = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n          else if (childNode.getType().equals(WebcrawlerConfig.NODE_MAXFETCHESPERMINUTE))\n            maxFetchesPerMinute = childNode.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n        }\n        if (maxConnections == null)\n          maxConnections = \"Not limited\";\n        if (maxKBPerSecond == null)\n          maxKBPerSecond = \"Not limited\";\n        if (maxFetchesPerMinute == null)\n          maxFetchesPerMinute = \"Not limited\";\n        if (isCaseInsensitive == null || isCaseInsensitive.length() == 0)\n          isCaseInsensitive = \"false\";\n        out.print(\n\"        <tr class=\\\"\"+(((instanceNumber % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+isCaseInsensitive+\"</td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+maxConnections+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+maxKBPerSecond+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+maxFetchesPerMinute+\"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n        );\n        instanceNumber++;\n      }\n    }\n    if (instanceNumber == 0)\n    {\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formmessage\\\" colspan=\\\"5\\\">\"+Messages.getBodyString(locale,\"WebcrawlerConnector.NoBandwidthThrottling\")+\"</td></tr>\\n\"\n      );\n    }\n    out.print(\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  \\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.PageAccessCredentials\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"boxcell\\\" colspan=\\\"3\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLRegularExpression\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.CredentialType\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.CredentialDomain\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.UserName\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n    );\n    i = 0;\n    instanceNumber = 0;\n    while (i < parameters.getChildCount())\n    {\n      ConfigNode cn = parameters.getChild(i++);\n      if (cn.getType().equals(WebcrawlerConfig.NODE_ACCESSCREDENTIAL))\n      {\n        // A bin description node!  Look for all its parameters.\n        String type = cn.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n        if (!type.equals(WebcrawlerConfig.ATTRVALUE_SESSION))\n        {\n          String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n          // Page-based auth\n          String domain = cn.getAttributeValue(WebcrawlerConfig.ATTR_DOMAIN);\n          if (domain == null)\n            domain = \"\";\n          String userName = cn.getAttributeValue(WebcrawlerConfig.ATTR_USERNAME);\n          out.print(\n\"        <tr>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+type+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(domain)+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(userName)+\"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n          );\n          instanceNumber++;\n        }\n      }\n    }\n    if (instanceNumber == 0)\n    {\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formmessage\\\" colspan=\\\"4\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoPageAccessCredentials\") + \"</nobr></td></tr>\\n\"\n      );\n    }\n    out.print(\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.SessionBasedAccessCredentials\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"boxcell\\\" colspan=\\\"3\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLRegularExpression\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.LoginPages\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n    );\n    i = 0;\n    instanceNumber = 0;\n    while (i < parameters.getChildCount())\n    {\n      ConfigNode cn = parameters.getChild(i++);\n      if (cn.getType().equals(WebcrawlerConfig.NODE_ACCESSCREDENTIAL))\n      {\n        // A bin description node!  Look for all its parameters.\n        String type = cn.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n        if (type.equals(WebcrawlerConfig.ATTRVALUE_SESSION))\n        {\n          String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n          // Session-based auth.  Display this as a nested table.\n          out.print(\n\"        <tr class=\\\"\"+(((instanceNumber % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr></td>\\n\"+\n\"          <td class=\\\"boxcell\\\">\\n\"\n          );\n          int q = 0;\n          int authPageInstanceNumber = 0;\n          while (q < cn.getChildCount())\n          {\n            ConfigNode authPageNode = cn.getChild(q++);\n            if (authPageNode.getType().equals(WebcrawlerConfig.NODE_AUTHPAGE))\n            {\n              String authURLRegexp = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n              String pageType = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_TYPE);\n              String authMatchRegexp = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_MATCHREGEXP);\n              if (authMatchRegexp == null)\n                authMatchRegexp = \"\";\n              String authOverrideTargetURL = authPageNode.getAttributeValue(WebcrawlerConfig.ATTR_OVERRIDETARGETURL);\n              if (authOverrideTargetURL == null)\n                authOverrideTargetURL = \"\";\n              if (authPageInstanceNumber == 0)\n              {\n                out.print(\n\"            <table class=\\\"formtable\\\">\\n\"+\n\"              <tr class=\\\"formheaderrow\\\">\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.LoginURLRegularExpression\") + \"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.PageType\") + \"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.FormNamelinkTargetRegularExpression\") + \"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.OverrideTargetURL\") + \"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.OverrideFormParameters\") + \"</nobr></td>\\n\"+\n\"              </tr>\\n\"\n                );\n              }\n              out.print(\n\"              <tr class=\\\"\"+(((authPageInstanceNumber % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"                <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(authURLRegexp)+\"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\"><nobr>\"+pageType+\"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(authMatchRegexp)+\"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(authOverrideTargetURL)+\"</nobr></td>\\n\"+\n\"                <td class=\\\"formcolumncell\\\">\\n\"\n              );\n              if (pageType.equals(WebcrawlerConfig.ATTRVALUE_FORM))\n              {\n                int z = 0;\n                while (z < authPageNode.getChildCount())\n                {\n                  ConfigNode authParameter = authPageNode.getChild(z++);\n                  if (authParameter.getType().equals(WebcrawlerConfig.NODE_AUTHPARAMETER))\n                  {\n                    String paramName = authParameter.getAttributeValue(WebcrawlerConfig.ATTR_NAMEREGEXP);\n                    if (paramName == null)\n                      paramName = \"\";\n                    String paramValue = authParameter.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n                    if (paramValue == null)\n                      paramValue = \"\";\n                    String password = authParameter.getAttributeValue(WebcrawlerConfig.ATTR_PASSWORD);\n                    if (password != null && password.length() > 0)\n                      paramValue = \"*****\";\n                    out.print(\n\"                  <nobr>\"+Encoder.bodyEscape(paramName+\": \"+paramValue)+\"</nobr><br/>\\n\"\n                    );\n                  }\n                }\n              }\n              out.print(\n\"                </td>\\n\"+\n\"              </tr>\\n\"\n              );\n              authPageInstanceNumber++;\n            }\n          }\n          if (authPageInstanceNumber == 0)\n          {\n            out.print(\n\"            <nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoLoginPagesSpecified\") + \"</nobr>\\n\"\n            );\n          }\n          else\n          {\n            out.print(\n\"            </table>\\n\"\n            );\n          }\n          out.print(\n\"          </td>\\n\"+\n\"        </tr>\\n\"\n          );\n          instanceNumber++;\n        }\n      }\n    }\n    if (instanceNumber == 0)\n    {\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formmessage\\\" colspan=\\\"2\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoSessionBasedAccessCredentials\") + \"</nobr></td></tr>\\n\"\n      );\n    }\n    out.print(\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  \\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.TrustCertificates\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"boxcell\\\" colspan=\\\"3\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLRegularExpression\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Certificate\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n    );\n    i = 0;\n    instanceNumber = 0;\n    while (i < parameters.getChildCount())\n    {\n      ConfigNode cn = parameters.getChild(i++);\n      if (cn.getType().equals(WebcrawlerConfig.NODE_TRUST))\n      {\n        // A bin description node!  Look for all its parameters.\n        String regexp = cn.getAttributeValue(WebcrawlerConfig.ATTR_URLREGEXP);\n        String trustEverything = cn.getAttributeValue(WebcrawlerConfig.ATTR_TRUSTEVERYTHING);\n        if (trustEverything != null && trustEverything.equals(\"true\"))\n        {\n          // We trust everything that matches this regexp\n          out.print(\n\"        <tr class=\\\"\"+(((instanceNumber % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><i>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.TrustEverything\") + \"</i></td>\\n\"+\n\"        </tr>\\n\"\n          );\n          instanceNumber++;\n        }\n        else\n        {\n          String trustStore = cn.getAttributeValue(WebcrawlerConfig.ATTR_TRUSTSTORE);\n          IKeystoreManager localTruststore = KeystoreManagerFactory.make(\"\",trustStore);\n          String[] truststoreContents = localTruststore.getContents();\n            \n          // Each trust store will have only at most one cert in it at this level.  These individual certs are assembled into the proper trust store\n          // for each individual url at fetch time.\n            \n          if (truststoreContents.length == 1)\n          {\n            String alias = truststoreContents[0];\n            String description = localTruststore.getDescription(alias);\n            String shortenedDescription = description;\n            if (shortenedDescription.length() > 100)\n              shortenedDescription = shortenedDescription.substring(0,100) + \"...\";\n            out.print(\n\"        <tr class=\\\"\"+(((instanceNumber % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(regexp)+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+Encoder.bodyEscape(shortenedDescription)+\"</td>\\n\"+\n\"        </tr>\\n\"\n            );\n            instanceNumber++;\n          }\n        }\n      }\n    }\n    if (instanceNumber == 0)\n    {\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td class=\\\"formmessage\\\" colspan=\\\"2\\\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoTrustCertificates\") + \"</td></tr>\\n\"\n      );\n    }\n    out.print(\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n    );\n  }\n  \n  /** Output the specification header section.\n  * This method is called in the head section of a job page which has selected a repository connection of the\n  * current type.  Its purpose is to add the required tabs to the list, and to output any javascript methods\n  * that might be needed by the job editing HTML.\n  * The connector will be connected before this method can be called.\n  *@param out is the output to which any HTML should be sent.\n  *@param locale is the locale the output is preferred to be in.\n  *@param ds is the current document specification for this job.\n  *@param connectionSequenceNumber is the unique number of this connection within the job.\n  *@param tabsArray is an array of tab names.  Add to this array any tab names that are specific to the connector.\n  */\n  @Override\n  public void outputSpecificationHeader(IHTTPOutput out, Locale locale, Specification ds,\n    int connectionSequenceNumber, List<String> tabsArray)\n    throws ManifoldCFException, IOException\n  {\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Seeds\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Canonicalization\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.URLMappings\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Inclusions\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Exclusions\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Security\"));\n    tabsArray.add(Messages.getString(locale,\"WebcrawlerConnector.Metadata\"));\n    String seqPrefix = \"s\"+connectionSequenceNumber+\"_\";\n\n    out.print(\n\"<script type=\\\"text/javascript\\\">\\n\"+\n\"<!--\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"SpecOp(n, opValue, anchorvalue)\\n\"+\n\"{\\n\"+\n\"  eval(\\\"editjob.\\\"+n+\\\".value = \\\\\\\"\\\"+opValue+\\\"\\\\\\\"\\\");\\n\"+\n\"  postFormSetAnchor(anchorvalue);\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"AddRegexp(anchorvalue)\\n\"+\n\"{\\n\"+\n\"  if (editjob.\"+seqPrefix+\"rssmatch.value == \\\"\\\")\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.MatchMustHaveARegexpValue\")+\"\\\");\\n\"+\n\"    editjob.\"+seqPrefix+\"rssmatch.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"\\n\"+\n\"  \"+seqPrefix+\"SpecOp(\\\"\"+seqPrefix+\"rssop\\\",\\\"Add\\\",anchorvalue);\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"RemoveRegexp(index, anchorvalue)\\n\"+\n\"{\\n\"+\n\"  editjob.\"+seqPrefix+\"rssindex.value = index;\\n\"+\n\"  \"+seqPrefix+\"SpecOp(\\\"\"+seqPrefix+\"rssop\\\",\\\"Delete\\\",anchorvalue);\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"URLRegexpDelete(index, anchorvalue)\\n\"+\n\"{\\n\"+\n\"  editjob.\"+seqPrefix+\"urlregexpnumber.value = index;\\n\"+\n\"  \"+seqPrefix+\"SpecOp(\\\"\"+seqPrefix+\"urlregexpop\\\",\\\"Delete\\\",anchorvalue);\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"URLRegexpAdd(anchorvalue)\\n\"+\n\"{\\n\"+\n\"  \"+seqPrefix+\"SpecOp(\\\"\"+seqPrefix+\"urlregexpop\\\",\\\"Add\\\",anchorvalue);\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"checkSpecification()\\n\"+\n\"{\\n\"+\n\"  if (\"+seqPrefix+\"check_expressions(\\\"inclusions\\\",editjob.\"+seqPrefix+\"inclusions.value) == false)\\n\"+\n\"  {\\n\"+\n\"    editjob.\"+seqPrefix+\"inclusions.focus();\\n\"+\n\"    return false;\\n\"+\n\"  }  \\n\"+\n\"  if (\"+seqPrefix+\"check_expressions(\\\"exclusions\\\",editjob.\"+seqPrefix+\"exclusions.value) == false)\\n\"+\n\"  {\\n\"+\n\"    editjob.\"+seqPrefix+\"exclusions.focus();\\n\"+\n\"    return false;\\n\"+\n\"  }\\n\"+\n\"  if (\"+seqPrefix+\"check_seedsList() == false)\\n\"+\n\"  {\\n\"+\n\"    editjob.\"+seqPrefix+\"seeds.focus();\\n\"+\n\"    return false;\\n\"+\n\"  }\\n\"+\n\"  return true;\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"check_expressions(thecontext,theexpressionlist)\\n\"+\n\"{\\n\"+\n\"  var rval = true;\\n\"+\n\"  var theArray = theexpressionlist.split(\\\"\\\\n\\\");\\n\"+\n\"  var i = 0;\\n\"+\n\"  while (i < theArray.length)\\n\"+\n\"  {\\n\"+\n\"    // For legality check, we must cut out anything useful that is java-only\\n\"+\n\"    var theexp = theArray[i];\\n\"+\n\"    var trimmed = theexp.replace(/^\\\\s+/,\\\"\\\");\\n\"+\n\"    i = i + 1;\\n\"+\n\"    if (trimmed.length == 0 || (trimmed.length >= 1 && trimmed.substring(0,1) == \\\"#\\\"))\\n\"+\n\"      continue;\\n\"+\n\"    try\\n\"+\n\"    {\\n\"+\n\"      var foo = \\\"teststring\\\";\\n\"+\n\"      foo.search(theexp.replace(/\\\\(\\\\?i\\\\)/,\\\"\\\"));\\n\"+\n\"    }\\n\"+\n\"    catch (e)\\n\"+\n\"    {\\n\"+\n\"      alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.FoundAnIllegalRegularExpressionIn\")+\"\\\"+thecontext+\\\": '\\\"+theexp+\\\"'\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.ErrorWas\")+\"\\\"+e);\\n\"+\n\"      rval = false;\\n\"+\n\"    }\\n\"+\n\"  }\\n\"+\n\"  return rval;\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"check_seedsList()\\n\"+\n\"{\\n\"+\n\"  var regexp = /http(s)?:\\\\/\\\\/([a-z0-9+!*(),;?&=\\\\$_.-]+(\\\\:[a-z0-9+!*(),;?&=\\\\$_.-]+)?@)?[a-z0-9+\\\\$_-]+(\\\\.[a-z0-9+\\\\$_-]+)*(\\\\:[0-9]{2,5})?(\\\\/([a-z0-9+\\\\$_-]\\\\.?)+)*\\\\/?(\\\\?[a-z+&\\\\$_.-][a-z0-9;:@\\\\/&%=+\\\\$_.-]*)?(#[a-z_.-][a-z0-9+\\\\$_.-]*)?/;\\n\"+\n\"  var lines = editjob.\"+seqPrefix+\"seeds.value.split(\\\"\\\\n\\\");\\n\"+\n\"  var trimmedUrlList = \\\"\\\";\\n\"+\n\"  var invalidUrlList = \\\"\\\";\\n\"+\n\"  var i = 0;\\n\"+\n\"  while (i < lines.length)\\n\"+\n\"  {\\n\"+\n\"    var line = lines[i].replace(/^\\\\s*/, \\\"\\\").replace(/\\\\s*$/, \\\"\\\");\\n\"+\n\"    if (line.length > 0)\\n\"+\n\"    {\\n\"+\n\"      if (!regexp.test(line))\\n\"+\n\"        invalidUrlList = invalidUrlList + line + \\\"\\\\n\\\";\\n\"+\n\"      trimmedUrlList = trimmedUrlList + line + \\\"\\\\n\\\";\\n\"+      \n\"    }\\n\"+\n\"    i = i + 1;\\n\"+\n\"  }\\n\"+\n\"  editjob.\"+seqPrefix+\"seeds.value = trimmedUrlList;\\n\"+ \n\"  if (invalidUrlList.length > 0)\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.InvalidUrlsInSeedsList\")+\"\\\\n\\\" + invalidUrlList);\\n\"+\n\"    return false;\\n\"+\n\"  }\\n\"+\n\"  return true;\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"function \"+seqPrefix+\"SpecAddToken(anchorvalue)\\n\"+\n\"{\\n\"+\n\"  if (editjob.\"+seqPrefix+\"spectoken.value == \\\"\\\")\\n\"+\n\"  {\\n\"+\n\"    alert(\\\"\"+Messages.getBodyJavascriptString(locale,\"WebcrawlerConnector.TypeInAnAccessToken\")+\"\\\");\\n\"+\n\"    editjob.\"+seqPrefix+\"spectoken.focus();\\n\"+\n\"    return;\\n\"+\n\"  }\\n\"+\n\"  \"+seqPrefix+\"SpecOp(\\\"\"+seqPrefix+\"accessop\\\",\\\"Add\\\",anchorvalue);\\n\"+\n\"}\\n\"+\n\"\\n\"+\n\"//-->\\n\"+\n\"</script>\\n\"\n    );\n  }\n  \n  /** Output the specification body section.\n  * This method is called in the body section of a job page which has selected a repository connection of the\n  * current type.  Its purpose is to present the required form elements for editing.\n  * The coder can presume that the HTML that is output from this configuration will be within appropriate\n  *  <html>, <body>, and <form> tags.  The name of the form is always \"editjob\".\n  * The connector will be connected before this method can be called.\n  *@param out is the output to which any HTML should be sent.\n  *@param locale is the locale the output is preferred to be in.\n  *@param ds is the current document specification for this job.\n  *@param connectionSequenceNumber is the unique number of this connection within the job.\n  *@param actualSequenceNumber is the connection within the job that has currently been selected.\n  *@param tabName is the current tab name.  (actualSequenceNumber, tabName) form a unique tuple within\n  *  the job.\n  */\n  @Override\n  public void outputSpecificationBody(IHTTPOutput out, Locale locale, Specification ds,\n    int connectionSequenceNumber, int actualSequenceNumber, String tabName)\n    throws ManifoldCFException, IOException\n  {\n    String seqPrefix = \"s\"+connectionSequenceNumber+\"_\";\n\n    int i;\n    int k;\n\n    // Find the various strings\n    List<String> regexp = new ArrayList<String>();\n    List<String> matchStrings = new ArrayList<String>();\n\n    String seeds = \"\";\n    String inclusions = \".*\\n\";\n    String exclusions = \"\";\n    String inclusionsIndex = \".*\\n\";\n    String exclusionsIndex = \"\";\n    String exclusionsContentIndex = \"\";\n    \n    boolean includeMatching = true;\n    Set<String> excludedHeaders = new HashSet<String>();\n    \n    // Now, loop through description\n    i = 0;\n    while (i < ds.getChildCount())\n    {\n      SpecificationNode sn = ds.getChild(i++);\n      if (sn.getType().equals(WebcrawlerConfig.NODE_MAP))\n      {\n        String match = sn.getAttributeValue(WebcrawlerConfig.ATTR_MATCH);\n        String map = sn.getAttributeValue(WebcrawlerConfig.ATTR_MAP);\n        if (match != null)\n        {\n          regexp.add(match);\n          if (map == null)\n            map = \"\";\n          matchStrings.add(map);\n        }\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_SEEDS))\n      {\n        seeds = sn.getValue();\n        if (seeds == null)\n          seeds = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_INCLUDES))\n      {\n        inclusions = sn.getValue();\n        if (inclusions == null)\n          inclusions = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDES))\n      {\n        exclusions = sn.getValue();\n        if (exclusions == null)\n          exclusions = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_INCLUDESINDEX))\n      {\n        inclusionsIndex = sn.getValue();\n        if (inclusionsIndex == null)\n          inclusionsIndex = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDESINDEX))\n      {\n        exclusionsIndex = sn.getValue();\n        if (exclusionsIndex == null)\n          exclusionsIndex = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDESCONTENTINDEX))\n      {\n        exclusionsContentIndex = sn.getValue();\n        if (exclusionsContentIndex == null)\n        \texclusionsContentIndex = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_LIMITTOSEEDS))\n      {\n        String value = sn.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n        if (value == null || value.equals(\"false\"))\n          includeMatching = false;\n        else\n          includeMatching = true;\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDEHEADER))\n      {\n        String value = sn.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n        excludedHeaders.add(value);\n      }\n\n    }\n\n    // Seeds tab\n\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Seeds\")) && connectionSequenceNumber == actualSequenceNumber)\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"2\\\">\\n\"+\n\"      <textarea rows=\\\"25\\\" cols=\\\"80\\\" name=\\\"\"+seqPrefix+\"seeds\\\">\"+Encoder.bodyEscape(seeds)+\"</textarea>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"seeds\\\" value=\\\"\"+Encoder.attributeEscape(seeds)+\"\\\"/>\\n\"\n      );\n    }\n\n    // Canonicalization tab\n\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Canonicalization\")) && connectionSequenceNumber == actualSequenceNumber)\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"boxcell\\\" colspan=\\\"2\\\">\\n\"+\n\"      <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpop\\\" value=\\\"Continue\\\"/>\\n\"+\n\"      <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpnumber\\\" value=\\\"\\\"/>\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLRegularExpression\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Description\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Reorder\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RemoveJSPSessions\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RemoveASPSessions\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RemovePHPSessions\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RemoveBVSessions\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n      );\n      int q = 0;\n      int l = 0;\n      while (q < ds.getChildCount())\n      {\n        SpecificationNode specNode = ds.getChild(q++);\n        if (specNode.getType().equals(WebcrawlerConfig.NODE_URLSPEC))\n        {\n          // Ok, this node matters to us\n          String regexpString = specNode.getAttributeValue(WebcrawlerConfig.ATTR_REGEXP);\n          String description = specNode.getAttributeValue(WebcrawlerConfig.ATTR_DESCRIPTION);\n          if (description == null)\n            description = \"\";\n          String allowReorder = specNode.getAttributeValue(WebcrawlerConfig.ATTR_REORDER);\n          String allowReorderOutput;\n          if (allowReorder == null || allowReorder.length() == 0)\n          {\n            allowReorder = WebcrawlerConfig.ATTRVALUE_NO;\n            allowReorderOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n          }\n          else\n            allowReorderOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n          String allowJavaSessionRemoval = specNode.getAttributeValue(WebcrawlerConfig.ATTR_JAVASESSIONREMOVAL);\n          String allowJavaSessionRemovalOutput;\n          if (allowJavaSessionRemoval == null || allowJavaSessionRemoval.length() == 0)\n          {\n            allowJavaSessionRemoval = WebcrawlerConfig.ATTRVALUE_NO;\n            allowJavaSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n          }\n          else\n            allowJavaSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n          String allowASPSessionRemoval = specNode.getAttributeValue(WebcrawlerConfig.ATTR_ASPSESSIONREMOVAL);\n          String allowASPSessionRemovalOutput;\n          if (allowASPSessionRemoval == null || allowASPSessionRemoval.length() == 0)\n          {\n            allowASPSessionRemoval = WebcrawlerConfig.ATTRVALUE_NO;\n            allowASPSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n          }\n          else\n            allowASPSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n          String allowPHPSessionRemoval = specNode.getAttributeValue(WebcrawlerConfig.ATTR_PHPSESSIONREMOVAL);\n          String allowPHPSessionRemovalOutput;\n          if (allowPHPSessionRemoval == null || allowPHPSessionRemoval.length() == 0)\n          {\n            allowPHPSessionRemoval = WebcrawlerConfig.ATTRVALUE_NO;\n            allowPHPSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n          }\n          else\n            allowPHPSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n          String allowBVSessionRemoval = specNode.getAttributeValue(WebcrawlerConfig.ATTR_BVSESSIONREMOVAL);\n          String allowBVSessionRemovalOutput;\n          if (allowBVSessionRemoval == null || allowBVSessionRemoval.length() == 0)\n          {\n            allowBVSessionRemoval = WebcrawlerConfig.ATTRVALUE_NO;\n            allowBVSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n          }\n          else\n            allowBVSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n          out.print(\n\"        <tr class=\\\"\"+(((l % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"\"+seqPrefix+\"urlregexp_\"+Integer.toString(l)+\"\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Delete\") + \"\\\" alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteUrlRegexp\")+Encoder.attributeEscape(regexpString)+\"\\\" onclick='javascript:\"+seqPrefix+\"URLRegexpDelete(\"+Integer.toString(l)+\",\\\"\"+seqPrefix+\"urlregexp_\"+Integer.toString(l)+\"\\\");'/>\\n\"+\n\"            </a>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexp_\"+Integer.toString(l)+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexpString)+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpdesc_\"+Integer.toString(l)+\"\\\" value=\\\"\"+Encoder.attributeEscape(description)+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpreorder_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowReorder+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpjava_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowJavaSessionRemoval+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpasp_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowASPSessionRemoval+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpphp_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowPHPSessionRemoval+\"\\\"/>\\n\"+\n\"            <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpbv_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowBVSessionRemoval+\"\\\"/>\\n\"+\n\"            <nobr>\"+Encoder.bodyEscape(regexpString)+\"</nobr>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+Encoder.bodyEscape(description)+\"</td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+allowReorderOutput+\"</td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+allowJavaSessionRemovalOutput+\"</td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+allowASPSessionRemovalOutput+\"</td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+allowPHPSessionRemovalOutput+\"</td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+allowBVSessionRemovalOutput+\"</td>\\n\"+\n\"        </tr>\\n\"\n          );\n\n          l++;\n        }\n      }\n      if (l == 0)\n      {\n        out.print(\n\"        <tr class=\\\"formrow\\\"><td colspan=\\\"8\\\" class=\\\"formcolumnmessage\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoCanonicalizationSpecified\") + \"</nobr></td></tr>\\n\"\n        );\n      }\n      out.print(\n\"        <tr class=\\\"formrow\\\"><td colspan=\\\"8\\\" class=\\\"formseparator\\\"><hr/></td></tr>\\n\"+\n\"        <tr class=\\\"formrow\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\\n\"+\n\"            <a name=\\\"\"+seqPrefix+\"urlregexp_\"+Integer.toString(l)+\"\\\">\\n\"+\n\"              <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Add\") + \"\\\" alt=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.AddUrlRegexp\") + \"\\\" onclick='javascript:\"+seqPrefix+\"URLRegexpAdd(\\\"\"+seqPrefix+\"urlregexp_\"+Integer.toString(l+1)+\"\\\");'/>\\n\"+\n\"              <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpcount\\\" value=\\\"\"+Integer.toString(l)+\"\\\"/>\\n\"+\n\"            </a>\\n\"+\n\"          </td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><input type=\\\"text\\\" name=\\\"\"+seqPrefix+\"urlregexp\\\" size=\\\"30\\\" value=\\\"\\\"/></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><input type=\\\"text\\\" name=\\\"\"+seqPrefix+\"urlregexpdesc\\\" size=\\\"30\\\" value=\\\"\\\"/></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><input type=\\\"checkbox\\\" name=\\\"\"+seqPrefix+\"urlregexpreorder\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_YES+\"\\\"/></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><input type=\\\"checkbox\\\" name=\\\"\"+seqPrefix+\"urlregexpjava\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_YES+\"\\\" checked=\\\"true\\\"/></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><input type=\\\"checkbox\\\" name=\\\"\"+seqPrefix+\"urlregexpasp\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_YES+\"\\\" checked=\\\"true\\\"/></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><input type=\\\"checkbox\\\" name=\\\"\"+seqPrefix+\"urlregexpphp\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_YES+\"\\\" checked=\\\"true\\\"/></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><input type=\\\"checkbox\\\" name=\\\"\"+seqPrefix+\"urlregexpbv\\\" value=\\\"\"+WebcrawlerConfig.ATTRVALUE_YES+\"\\\" checked=\\\"true\\\"/></td>\\n\"+\n\"        </tr>\\n\"+\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      // Post the canonicalization specification\n      int q = 0;\n      int l = 0;\n      while (q < ds.getChildCount())\n      {\n        SpecificationNode specNode = ds.getChild(q++);\n        if (specNode.getType().equals(WebcrawlerConfig.NODE_URLSPEC))\n        {\n          // Ok, this node matters to us\n          String regexpString = specNode.getAttributeValue(WebcrawlerConfig.ATTR_REGEXP);\n          String description = specNode.getAttributeValue(WebcrawlerConfig.ATTR_DESCRIPTION);\n          if (description == null)\n            description = \"\";\n          String allowReorder = specNode.getAttributeValue(WebcrawlerConfig.ATTR_REORDER);\n          if (allowReorder == null || allowReorder.length() == 0)\n            allowReorder = WebcrawlerConfig.ATTRVALUE_NO;\n          String allowJavaSessionRemoval = specNode.getAttributeValue(WebcrawlerConfig.ATTR_JAVASESSIONREMOVAL);\n          if (allowJavaSessionRemoval == null || allowJavaSessionRemoval.length() == 0)\n            allowJavaSessionRemoval = WebcrawlerConfig.ATTRVALUE_NO;\n          String allowASPSessionRemoval = specNode.getAttributeValue(WebcrawlerConfig.ATTR_ASPSESSIONREMOVAL);\n          if (allowASPSessionRemoval == null || allowASPSessionRemoval.length() == 0)\n            allowASPSessionRemoval = WebcrawlerConfig.ATTRVALUE_NO;\n          String allowPHPSessionRemoval = specNode.getAttributeValue(WebcrawlerConfig.ATTR_PHPSESSIONREMOVAL);\n          if (allowPHPSessionRemoval == null || allowPHPSessionRemoval.length() == 0)\n            allowPHPSessionRemoval = WebcrawlerConfig.ATTRVALUE_NO;\n          String allowBVSessionRemoval = specNode.getAttributeValue(WebcrawlerConfig.ATTR_BVSESSIONREMOVAL);\n          if (allowBVSessionRemoval == null || allowBVSessionRemoval.length() == 0)\n            allowBVSessionRemoval = WebcrawlerConfig.ATTRVALUE_NO;\n          out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexp_\"+Integer.toString(l)+\"\\\" value=\\\"\"+Encoder.attributeEscape(regexpString)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpdesc_\"+Integer.toString(l)+\"\\\" value=\\\"\"+Encoder.attributeEscape(description)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpreorder_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowReorder+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpjava_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowJavaSessionRemoval+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpasp_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowASPSessionRemoval+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpphp_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowPHPSessionRemoval+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpbv_\"+Integer.toString(l)+\"\\\" value=\\\"\"+allowBVSessionRemoval+\"\\\"/>\\n\"\n          );\n          l++;\n        }\n      }\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"urlregexpcount\\\" value=\\\"\"+Integer.toString(l)+\"\\\"/>\\n\"\n      );\n    }\n\n    // Mappings tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.URLMappings\")) && connectionSequenceNumber == actualSequenceNumber)\n    {\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"rssop\\\" value=\\\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"rssindex\\\" value=\\\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"rssmapcount\\\" value=\\\"\"+Integer.toString(regexp.size())+\"\\\"/>\\n\"+\n\"\\n\"+\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"4\\\"><hr/></td></tr>\\n\"\n      );\n\n      i = 0;\n      while (i < regexp.size())\n      {\n        String prefix = seqPrefix+\"rssregexp_\"+Integer.toString(i)+\"_\";\n        out.print(\n\"  <tr>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"+\n\"      <a name=\\\"\"+seqPrefix+\"regexp_\"+Integer.toString(i)+\"\\\">\\n\"+\n\"        <input type=\\\"button\\\" value=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.Remove\")+\"\\\" onclick='javascript:\"+seqPrefix+\"RemoveRegexp(\"+Integer.toString(i)+\",\\\"\"+seqPrefix+\"regexp_\"+Integer.toString(i)+\"\\\")' alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.RemoveRegexp\")+Integer.toString(i)+\"\\\"/>\\n\"+\n\"      </a>\\n\"+\n\"    </td>\\n\"+\n\"    <td class=\\\"value\\\"><input type=\\\"hidden\\\" name=\\\"\"+prefix+\"match\"+\"\\\" value=\\\"\"+org.apache.manifoldcf.ui.util.Encoder.attributeEscape((String)regexp.get(i))+\"\\\"/>\"+org.apache.manifoldcf.ui.util.Encoder.bodyEscape((String)regexp.get(i))+\"</td>\\n\"+\n\"    <td class=\\\"value\\\">--&gt;</td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n        );\n        String match = (String)matchStrings.get(i);\n        out.print(\n\"      <input type=\\\"hidden\\\" name=\\\"\"+prefix+\"map\"+\"\\\" value=\\\"\"+org.apache.manifoldcf.ui.util.Encoder.attributeEscape(match)+\"\\\"/>\\n\"\n        );\n        if (match.length() == 0)\n        {\n          out.print(\n\"      &lt;as is&gt;\\n\"\n          );\n        }\n        else\n        {\n          out.print(\n\"      \"+org.apache.manifoldcf.ui.util.Encoder.bodyEscape(match)+\"\\n\"\n          );\n        }\n        out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"\n        );\n        i++;\n      }\n      out.print(\n\"  <tr>\\n\"+\n\"    <td class=\\\"value\\\"><a name=\\\"\"+seqPrefix+\"regexp_\"+Integer.toString(i)+\"\\\"><input type=\\\"button\\\" value=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.Add\")+\"\\\" onclick='javascript:\"+seqPrefix+\"AddRegexp(\\\"\"+seqPrefix+\"regexp_\"+Integer.toString(i+1)+\"\\\")' alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.AddRegexp\")+\"\\\"/></a></td>\\n\"+\n\"    <td class=\\\"value\\\"><input type=\\\"text\\\" name=\\\"\"+seqPrefix+\"rssmatch\\\" size=\\\"16\\\" value=\\\"\\\"/></td>\\n\"+\n\"    <td class=\\\"value\\\">--&gt;</td>\\n\"+\n\"    <td class=\\\"value\\\"><input type=\\\"text\\\" name=\\\"\"+seqPrefix+\"rssmap\\\" size=\\\"16\\\" value=\\\"\\\"/></td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"rssmapcount\\\" value=\\\"\"+Integer.toString(regexp.size())+\"\\\"/>\\n\"\n      );\n      i = 0;\n      while (i < regexp.size())\n      {\n        String prefix = seqPrefix+\"rssregexp_\"+Integer.toString(i)+\"_\";\n        String match = (String)matchStrings.get(i);\n        out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+prefix+\"match\"+\"\\\" value=\\\"\"+org.apache.manifoldcf.ui.util.Encoder.attributeEscape((String)regexp.get(i))+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+prefix+\"map\"+\"\\\" value=\\\"\"+org.apache.manifoldcf.ui.util.Encoder.attributeEscape(match)+\"\\\"/>\\n\"\n        );\n        i++;\n      }\n    }\n\n    // Inclusions tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Inclusions\")) && connectionSequenceNumber == actualSequenceNumber)\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.IncludeInCrawl\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"1\\\">\\n\"+\n\"      <textarea rows=\\\"25\\\" cols=\\\"60\\\" name=\\\"\"+seqPrefix+\"inclusions\\\">\"+Encoder.bodyEscape(inclusions)+\"</textarea>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.IncludeInIndex\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"1\\\">\\n\"+\n\"      <textarea rows=\\\"10\\\" cols=\\\"60\\\" name=\\\"\"+seqPrefix+\"inclusionsindex\\\">\"+Encoder.bodyEscape(inclusionsIndex)+\"</textarea>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.IncludeOnlyHostsMatchingSeeds\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"+\n\"      <input type=\\\"checkbox\\\" name=\\\"\"+seqPrefix+\"matchinghosts\\\" value=\\\"true\\\"\"+(includeMatching?\" checked=\\\"yes\\\"\":\"\")+\"/>\\n\"+\n\"      <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"matchinghosts_present\\\" value=\\\"true\\\"/>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"inclusions\\\" value=\\\"\"+Encoder.attributeEscape(inclusions)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"inclusionsindex\\\" value=\\\"\"+Encoder.attributeEscape(inclusionsIndex)+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"matchinghosts\\\" value=\\\"\"+(includeMatching?\"true\":\"false\")+\"\\\"/>\\n\"+\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"matchinghosts_present\\\" value=\\\"true\\\"/>\\n\"\n      );\n    }\n\n    // Exclusions tab\n\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Exclusions\")) && connectionSequenceNumber == actualSequenceNumber)\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ExcludeFromCrawl\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"1\\\">\\n\"+\n\"      <textarea rows=\\\"25\\\" cols=\\\"60\\\" name=\\\"\"+seqPrefix+\"exclusions\\\">\"+Encoder.bodyEscape(exclusions)+\"</textarea>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ExcludeFromIndex\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"1\\\">\\n\"+\n\"      <textarea rows=\\\"10\\\" cols=\\\"60\\\" name=\\\"\"+seqPrefix+\"exclusionsindex\\\">\"+Encoder.bodyEscape(exclusionsIndex)+\"</textarea>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\" colspan=\\\"1\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ExcludeContentFromIndex\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"1\\\">\\n\"+\n\"      <textarea rows=\\\"10\\\" cols=\\\"60\\\" name=\\\"\"+seqPrefix+\"exclusionscontentindex\\\">\"+Encoder.bodyEscape(exclusionsContentIndex)+\"</textarea>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n              \"<input type=\\\"hidden\\\" name=\\\"\" + seqPrefix + \"exclusions\\\" value=\\\"\" + Encoder.attributeEscape(exclusions) + \"\\\"/>\\n\" +\n                      \"<input type=\\\"hidden\\\" name=\\\"\" + seqPrefix + \"exclusionsindex\\\" value=\\\"\" + Encoder.attributeEscape(exclusionsIndex) + \"\\\"/>\\n\" +\n                      \"<input type=\\\"hidden\\\" name=\\\"\" + seqPrefix + \"exclusionscontentindex\\\" value=\\\"\" + Encoder.attributeEscape(exclusionsContentIndex) + \"\\\"/>\\n\"\n      );\n    }\n  \n    // Security tab\n    // There is no native security, so all we care about are the tokens.\n    i = 0;\n\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Security\")) && connectionSequenceNumber == actualSequenceNumber)\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"\n      );\n      // Go through forced ACL\n      i = 0;\n      k = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i++);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_ACCESS))\n        {\n          String accessDescription = \"_\"+Integer.toString(k);\n          String accessOpName = seqPrefix+\"accessop\"+accessDescription;\n          String token = sn.getAttributeValue(WebcrawlerConfig.ATTR_TOKEN);\n          out.print(\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\">\\n\"+\n\"      <input type=\\\"hidden\\\" name=\\\"\"+accessOpName+\"\\\" value=\\\"\\\"/>\\n\"+\n\"      <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"spectoken\"+accessDescription+\"\\\" value=\\\"\"+Encoder.attributeEscape(token)+\"\\\"/>\\n\"+\n\"      <a name=\\\"\"+seqPrefix+\"token_\"+Integer.toString(k)+\"\\\">\\n\"+\n\"        <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Delete\") + \"\\\" onClick='Javascript:\"+seqPrefix+\"SpecOp(\\\"\"+accessOpName+\"\\\",\\\"Delete\\\",\\\"\"+seqPrefix+\"token_\"+Integer.toString(k)+\"\\\")' alt=\\\"\"+Messages.getAttributeString(locale,\"WebcrawlerConnector.DeleteToken\")+Integer.toString(k)+\"\\\"/>\\n\"+\n\"      </a>&nbsp;\\n\"+\n\"    </td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"+\n\"      \"+Encoder.bodyEscape(token)+\"\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"\n          );\n          k++;\n        }\n      }\n      if (k == 0)\n      {\n        out.print(\n\"  <tr>\\n\"+\n\"    <td class=\\\"message\\\" colspan=\\\"2\\\">\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoAccessTokensPresent\") + \"</td>\\n\"+\n\"  </tr>\\n\"\n        );\n      }\n      out.print(\n\"  <tr><td class=\\\"lightseparator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\">\\n\"+\n\"      <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"tokencount\\\" value=\\\"\"+Integer.toString(k)+\"\\\"/>\\n\"+\n\"      <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"accessop\\\" value=\\\"\\\"/>\\n\"+\n\"      <a name=\\\"\"+seqPrefix+\"token_\"+Integer.toString(k)+\"\\\">\\n\"+\n\"        <input type=\\\"button\\\" value=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.Add\") + \"\\\" onClick='Javascript:\"+seqPrefix+\"SpecAddToken(\\\"\"+seqPrefix+\"token_\"+Integer.toString(k+1)+\"\\\")' alt=\\\"\" + Messages.getAttributeString(locale,\"WebcrawlerConnector.AddAccessToken\") + \"\\\"/>\\n\"+\n\"      </a>&nbsp;\\n\"+\n\"    </td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"+\n\"      <input type=\\\"text\\\" size=\\\"30\\\" name=\\\"\"+seqPrefix+\"spectoken\\\" value=\\\"\\\"/>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      // Finally, go through forced ACL\n      i = 0;\n      k = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i++);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_ACCESS))\n        {\n          String accessDescription = \"_\"+Integer.toString(k);\n          String token = sn.getAttributeValue(WebcrawlerConfig.ATTR_TOKEN);\n          out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"spectoken\"+accessDescription+\"\\\" value=\\\"\"+Encoder.attributeEscape(token)+\"\\\"/>\\n\"\n          );\n          k++;\n        }\n      }\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"tokencount\\\" value=\\\"\"+Integer.toString(k)+\"\\\"/>\\n\"\n      );\n    }\n\n    // \"Metadata\" tab\n    if (tabName.equals(Messages.getString(locale,\"WebcrawlerConnector.Metadata\")) && connectionSequenceNumber == actualSequenceNumber)\n    {\n      out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"4\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\"+Messages.getBodyString(locale, \"WebcrawlerConnector.ExcludedHeadersColon\")+\"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\" colspan=\\\"3\\\">\\n\"+\n\"      <input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"excludedheaders_present\\\" value=\\\"true\\\"/>\\n\"\n      );\n      \n      for (String potentiallyExcludedHeader : potentiallyExcludedHeaders)\n      {\n        out.print(\n\"      <input type=\\\"checkbox\\\" name=\\\"\"+seqPrefix+\"excludedheaders\\\" value=\\\"\"+Encoder.attributeEscape(potentiallyExcludedHeader)+\"\\\"\"+(excludedHeaders.contains(potentiallyExcludedHeader)?\" checked=\\\"true\\\"\":\"\")+\">\"+Encoder.bodyEscape(potentiallyExcludedHeader)+\"</input><br/>\\n\"\n        );\n      }\n      out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"excludedheaders_present\\\" value=\\\"true\\\"/>\\n\"\n      );\n      for (String excludedHeader : excludedHeaders)\n      {\n        out.print(\n\"<input type=\\\"hidden\\\" name=\\\"\"+seqPrefix+\"excludedheaders\\\" value=\\\"\"+Encoder.attributeEscape(excludedHeader)+\"\\\"/>\\n\"\n        );\n      }\n    }\n  }\n  \n  /** Process a specification post.\n  * This method is called at the start of job's edit or view page, whenever there is a possibility that form\n  * data for a connection has been posted.  Its purpose is to gather form information and modify the\n  * document specification accordingly.  The name of the posted form is always \"editjob\".\n  * The connector will be connected before this method can be called.\n  *@param variableContext contains the post data, including binary file-upload information.\n  *@param locale is the locale the output is preferred to be in.\n  *@param ds is the current document specification for this job.\n  *@param connectionSequenceNumber is the unique number of this connection within the job.\n  *@return null if all is well, or a string error message if there is an error that should prevent saving of\n  * the job (and cause a redirection to an error page).\n  */\n  @Override\n  public String processSpecificationPost(IPostParameters variableContext, Locale locale, Specification ds,\n    int connectionSequenceNumber)\n    throws ManifoldCFException\n  {\n    String seqPrefix = \"s\"+connectionSequenceNumber+\"_\";\n\n    // Get the map\n    String value = variableContext.getParameter(seqPrefix+\"rssmapcount\");\n    if (value != null)\n    {\n      int mapsize = Integer.parseInt(value);\n\n      // Clear it first\n      int j = 0;\n      while (j < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(j);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_MAP))\n          ds.removeChild(j);\n        else\n          j++;\n      }\n\n      // Grab the map values\n      j = 0;\n      while (j < mapsize)\n      {\n        String prefix = seqPrefix+\"rssregexp_\"+Integer.toString(j)+\"_\";\n        String match = variableContext.getParameter(prefix+\"match\");\n        String map = variableContext.getParameter(prefix+\"map\");\n        if (map == null)\n          map = \"\";\n        // Add to the specification\n        SpecificationNode node = new SpecificationNode(WebcrawlerConfig.NODE_MAP);\n        node.setAttribute(WebcrawlerConfig.ATTR_MATCH,match);\n        node.setAttribute(WebcrawlerConfig.ATTR_MAP,map);\n        ds.addChild(ds.getChildCount(),node);\n\n        j++;\n      }\n    }\n    // Now, do whatever action we were told to do.\n    String rssop = variableContext.getParameter(seqPrefix+\"rssop\");\n    if (rssop != null && rssop.equals(\"Add\"))\n    {\n      // Add a match to the end\n      String match = variableContext.getParameter(seqPrefix+\"rssmatch\");\n      String map = variableContext.getParameter(seqPrefix+\"rssmap\");\n      SpecificationNode node = new SpecificationNode(WebcrawlerConfig.NODE_MAP);\n      node.setAttribute(WebcrawlerConfig.ATTR_MATCH,match);\n      node.setAttribute(WebcrawlerConfig.ATTR_MAP,map);\n      ds.addChild(ds.getChildCount(),node);\n    }\n    else if (rssop != null && rssop.equals(\"Delete\"))\n    {\n      int index = Integer.parseInt(variableContext.getParameter(seqPrefix+\"rssindex\"));\n      int j = 0;\n      while (j < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(j);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_MAP))\n        {\n          if (index == 0)\n          {\n            ds.removeChild(j);\n            break;\n          }\n          index--;\n        }\n        j++;\n      }\n    }\n\n    // Get excluded headers\n    String excludedHeadersPresent = variableContext.getParameter(seqPrefix+\"excludedheaders_present\");\n    if (excludedHeadersPresent != null)\n    {\n      // Delete existing excludedheader record first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDEHEADER))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n      String[] excludedHeaders = variableContext.getParameterValues(seqPrefix+\"excludedheaders\");\n      if (excludedHeaders != null)\n      {\n        for (String excludedHeader : excludedHeaders)\n        {\n          SpecificationNode cn = new SpecificationNode(WebcrawlerConfig.NODE_EXCLUDEHEADER);\n          cn.setAttribute(WebcrawlerConfig.ATTR_VALUE, excludedHeader);\n          ds.addChild(ds.getChildCount(),cn);\n        }\n      }\n    }\n    \n    // Get the seeds\n    String seeds = variableContext.getParameter(seqPrefix+\"seeds\");\n    if (seeds != null)\n    {\n      // Delete existing seeds record first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_SEEDS))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n\n      SpecificationNode cn = new SpecificationNode(WebcrawlerConfig.NODE_SEEDS);\n      cn.setValue(seeds);\n      ds.addChild(ds.getChildCount(),cn);\n    }\n\n    // Get the inclusions\n    String inclusions = variableContext.getParameter(seqPrefix+\"inclusions\");\n    if (inclusions != null)\n    {\n      // Delete existing inclusions record first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_INCLUDES))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n\n      SpecificationNode cn = new SpecificationNode(WebcrawlerConfig.NODE_INCLUDES);\n      cn.setValue(inclusions);\n      ds.addChild(ds.getChildCount(),cn);\n    }\n\n    // Get the index inclusions\n    String inclusionsIndex = variableContext.getParameter(seqPrefix+\"inclusionsindex\");\n    if (inclusionsIndex != null)\n    {\n      // Delete existing index inclusions record first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_INCLUDESINDEX))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n\n      SpecificationNode cn = new SpecificationNode(WebcrawlerConfig.NODE_INCLUDESINDEX);\n      cn.setValue(inclusionsIndex);\n      ds.addChild(ds.getChildCount(),cn);\n    }\n\n    // Handle the seeds-only switch\n    String matchingHostsPresent = variableContext.getParameter(seqPrefix+\"matchinghosts_present\");\n    if (matchingHostsPresent != null)\n    {\n      // Delete existing switch record first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_LIMITTOSEEDS))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n\n      String matchingHosts = variableContext.getParameter(seqPrefix+\"matchinghosts\");\n      SpecificationNode cn = new SpecificationNode(WebcrawlerConfig.NODE_LIMITTOSEEDS);\n      cn.setAttribute(WebcrawlerConfig.ATTR_VALUE,(matchingHosts==null||matchingHosts.equals(\"false\"))?\"false\":\"true\");\n      ds.addChild(ds.getChildCount(),cn);\n    }\n    \n    // Get the exclusions\n    String exclusions = variableContext.getParameter(seqPrefix+\"exclusions\");\n    if (exclusions != null)\n    {\n      // Delete existing exclusions record first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDES))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n\n      SpecificationNode cn = new SpecificationNode(WebcrawlerConfig.NODE_EXCLUDES);\n      cn.setValue(exclusions);\n      ds.addChild(ds.getChildCount(),cn);\n    }\n\n    // Get the index exclusions\n    String exclusionsIndex = variableContext.getParameter(seqPrefix+\"exclusionsindex\");\n    if (exclusionsIndex != null)\n    {\n      // Delete existing exclusions record first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDESINDEX))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n\n      SpecificationNode cn = new SpecificationNode(WebcrawlerConfig.NODE_EXCLUDESINDEX);\n      cn.setValue(exclusionsIndex);\n      ds.addChild(ds.getChildCount(),cn);\n    }\n\n    // Get the content index exclusions\n    String exclusionsContentIndex = variableContext.getParameter(seqPrefix+\"exclusionscontentindex\");\n    if (exclusionsContentIndex != null)\n    {\n      // Delete existing content exclusions record first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDESCONTENTINDEX))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n\n      SpecificationNode cn = new SpecificationNode(WebcrawlerConfig.NODE_EXCLUDESCONTENTINDEX);\n      cn.setValue(exclusionsContentIndex);\n      ds.addChild(ds.getChildCount(),cn);\n    }\n\n    // Read the url specs\n    String urlRegexpCount = variableContext.getParameter(seqPrefix+\"urlregexpcount\");\n    if (urlRegexpCount != null && urlRegexpCount.length() > 0)\n    {\n      int regexpCount = Integer.parseInt(urlRegexpCount);\n      int j = 0;\n      while (j < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(j);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_URLSPEC))\n          ds.removeChild(j);\n        else\n          j++;\n      }\n      \n      // Grab the operation and the index (if any)\n      String operation = variableContext.getParameter(seqPrefix+\"urlregexpop\");\n      if (operation == null)\n        operation = \"Continue\";\n      int opIndex = -1;\n      if (operation.equals(\"Delete\"))\n        opIndex = Integer.parseInt(variableContext.getParameter(seqPrefix+\"urlregexpnumber\"));\n      \n      // Reconstruct urlspec nodes\n      j = 0;\n      while (j < regexpCount)\n      {\n        // For each index, first look for a delete operation\n        if (!operation.equals(\"Delete\") || j != opIndex)\n        {\n          // Add the jth node\n          String regexp = variableContext.getParameter(seqPrefix+\"urlregexp_\"+Integer.toString(j));\n          String regexpDescription = variableContext.getParameter(seqPrefix+\"urlregexpdesc_\"+Integer.toString(j));\n          String reorder = variableContext.getParameter(seqPrefix+\"urlregexpreorder_\"+Integer.toString(j));\n          String javaSession = variableContext.getParameter(seqPrefix+\"urlregexpjava_\"+Integer.toString(j));\n          String aspSession = variableContext.getParameter(seqPrefix+\"urlregexpasp_\"+Integer.toString(j));\n          String phpSession = variableContext.getParameter(seqPrefix+\"urlregexpphp_\"+Integer.toString(j));\n          String bvSession = variableContext.getParameter(seqPrefix+\"urlregexpbv_\"+Integer.toString(j));\n          SpecificationNode newSn = new SpecificationNode(WebcrawlerConfig.NODE_URLSPEC);\n          newSn.setAttribute(WebcrawlerConfig.ATTR_REGEXP,regexp);\n          if (regexpDescription != null && regexpDescription.length() > 0)\n            newSn.setAttribute(WebcrawlerConfig.ATTR_DESCRIPTION,regexpDescription);\n          if (reorder != null && reorder.length() > 0)\n            newSn.setAttribute(WebcrawlerConfig.ATTR_REORDER,reorder);\n          if (javaSession != null && javaSession.length() > 0)\n            newSn.setAttribute(WebcrawlerConfig.ATTR_JAVASESSIONREMOVAL,javaSession);\n          if (aspSession != null && aspSession.length() > 0)\n            newSn.setAttribute(WebcrawlerConfig.ATTR_ASPSESSIONREMOVAL,aspSession);\n          if (phpSession != null && phpSession.length() > 0)\n            newSn.setAttribute(WebcrawlerConfig.ATTR_PHPSESSIONREMOVAL,phpSession);\n          if (bvSession != null && bvSession.length() > 0)\n            newSn.setAttribute(WebcrawlerConfig.ATTR_BVSESSIONREMOVAL,bvSession);\n          ds.addChild(ds.getChildCount(),newSn);\n        }\n        j++;\n      }\n      if (operation.equals(\"Add\"))\n      {\n        String regexp = variableContext.getParameter(seqPrefix+\"urlregexp\");\n        String regexpDescription = variableContext.getParameter(seqPrefix+\"urlregexpdesc\");\n        String reorder = variableContext.getParameter(seqPrefix+\"urlregexpreorder\");\n        String javaSession = variableContext.getParameter(seqPrefix+\"urlregexpjava\");\n        String aspSession = variableContext.getParameter(seqPrefix+\"urlregexpasp\");\n        String phpSession = variableContext.getParameter(seqPrefix+\"urlregexpphp\");\n        String bvSession = variableContext.getParameter(seqPrefix+\"urlregexpbv\");\n\n        // Add a new node at the end\n        SpecificationNode newSn = new SpecificationNode(WebcrawlerConfig.NODE_URLSPEC);\n        newSn.setAttribute(WebcrawlerConfig.ATTR_REGEXP,regexp);\n        if (regexpDescription != null && regexpDescription.length() > 0)\n          newSn.setAttribute(WebcrawlerConfig.ATTR_DESCRIPTION,regexpDescription);\n        if (reorder != null && reorder.length() > 0)\n          newSn.setAttribute(WebcrawlerConfig.ATTR_REORDER,reorder);\n        if (javaSession != null && javaSession.length() > 0)\n          newSn.setAttribute(WebcrawlerConfig.ATTR_JAVASESSIONREMOVAL,javaSession);\n        if (aspSession != null && aspSession.length() > 0)\n          newSn.setAttribute(WebcrawlerConfig.ATTR_ASPSESSIONREMOVAL,aspSession);\n        if (phpSession != null && phpSession.length() > 0)\n          newSn.setAttribute(WebcrawlerConfig.ATTR_PHPSESSIONREMOVAL,phpSession);\n        if (bvSession != null && bvSession.length() > 0)\n          newSn.setAttribute(WebcrawlerConfig.ATTR_BVSESSIONREMOVAL,bvSession);\n        ds.addChild(ds.getChildCount(),newSn);\n      }\n    }\n\n    String xc = variableContext.getParameter(seqPrefix+\"tokencount\");\n    if (xc != null)\n    {\n      // Delete all tokens first\n      int i = 0;\n      while (i < ds.getChildCount())\n      {\n        SpecificationNode sn = ds.getChild(i);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_ACCESS))\n          ds.removeChild(i);\n        else\n          i++;\n      }\n\n      int accessCount = Integer.parseInt(xc);\n      i = 0;\n      while (i < accessCount)\n      {\n        String accessDescription = \"_\"+Integer.toString(i);\n        String accessOpName = seqPrefix+\"accessop\"+accessDescription;\n        xc = variableContext.getParameter(accessOpName);\n        if (xc != null && xc.equals(\"Delete\"))\n        {\n          // Next row\n          i++;\n          continue;\n        }\n        // Get the stuff we need\n        String accessSpec = variableContext.getParameter(seqPrefix+\"spectoken\"+accessDescription);\n        SpecificationNode node = new SpecificationNode(WebcrawlerConfig.NODE_ACCESS);\n        node.setAttribute(WebcrawlerConfig.ATTR_TOKEN,accessSpec);\n        ds.addChild(ds.getChildCount(),node);\n        i++;\n      }\n\n      String op = variableContext.getParameter(seqPrefix+\"accessop\");\n      if (op != null && op.equals(\"Add\"))\n      {\n        String accessspec = variableContext.getParameter(seqPrefix+\"spectoken\");\n        SpecificationNode node = new SpecificationNode(WebcrawlerConfig.NODE_ACCESS);\n        node.setAttribute(WebcrawlerConfig.ATTR_TOKEN,accessspec);\n        ds.addChild(ds.getChildCount(),node);\n      }\n    }\n\n    return null;\n  }\n  \n  /** View specification.\n  * This method is called in the body section of a job's view page.  Its purpose is to present the document\n  * specification information to the user.  The coder can presume that the HTML that is output from\n  * this configuration will be within appropriate <html> and <body> tags.\n  * The connector will be connected before this method can be called.\n  *@param out is the output to which any HTML should be sent.\n  *@param locale is the locale the output is preferred to be in.\n  *@param ds is the current document specification for this job.\n  *@param connectionSequenceNumber is the unique number of this connection within the job.\n  */\n  @Override\n  public void viewSpecification(IHTTPOutput out, Locale locale, Specification ds,\n    int connectionSequenceNumber)\n    throws ManifoldCFException, IOException\n  {\n    int j;\n    boolean seenAny;\n\n    String seeds = \"\";\n    String inclusions = \".*\\n\";\n    String exclusions = \"\";\n    String inclusionsIndex = \".*\\n\";\n    String exclusionsIndex = \"\";\n    String exclusionsContentIndex = \"\";\n\n    boolean includeMatching = false;\n    Set<String> excludedHeaders = new HashSet<String>();\n    \n    int i = 0;\n    while (i < ds.getChildCount())\n    {\n      SpecificationNode sn = ds.getChild(i++);\n      if (sn.getType().equals(WebcrawlerConfig.NODE_SEEDS))\n      {\n        seeds = sn.getValue();\n        if (seeds == null)\n          seeds = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_INCLUDES))\n      {\n        inclusions = sn.getValue();\n        if (inclusions == null)\n          inclusions = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDES))\n      {\n        exclusions = sn.getValue();\n        if (exclusions == null)\n          exclusions = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_INCLUDESINDEX))\n      {\n        inclusionsIndex = sn.getValue();\n        if (inclusionsIndex == null)\n          inclusionsIndex = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDESINDEX))\n      {\n        exclusionsIndex = sn.getValue();\n        if (exclusionsIndex == null)\n          exclusionsIndex = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDESCONTENTINDEX))\n      {\n        exclusionsContentIndex = sn.getValue();\n        if (exclusionsContentIndex == null)\n        \texclusionsContentIndex = \"\";\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_LIMITTOSEEDS))\n      {\n        String value = sn.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n        if (value == null || value.equals(\"false\"))\n          includeMatching = false;\n        else\n          includeMatching = true;\n      }\n      else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDEHEADER))\n      {\n        String value = sn.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n        excludedHeaders.add(value);\n      }\n    }\n    out.print(\n\"<table class=\\\"displaytable\\\">\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.SeedsColon\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n    );\n    try\n    {\n      java.io.Reader str = new java.io.StringReader(seeds);\n      try\n      {\n        java.io.BufferedReader is = new java.io.BufferedReader(str);\n        try\n        {\n          while (true)\n          {\n            String nextString = is.readLine();\n            if (nextString == null)\n              break;\n            if (nextString.length() == 0)\n              continue;\n            out.print(\n\"      <nobr>\"+Encoder.bodyEscape(nextString)+\"</nobr><br/>\\n\"\n            );\n          }\n        }\n        finally\n        {\n          is.close();\n        }\n      }\n      finally\n      {\n        str.close();\n      }\n    }\n    catch (java.io.IOException e)\n    {\n      throw new ManifoldCFException(\"IO error: \"+e.getMessage(),e);\n    }\n    out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"\n    );\n    i = 0;\n    int l = 0;\n    seenAny = false;\n    while (i < ds.getChildCount())\n    {\n      SpecificationNode sn = ds.getChild(i++);\n      if (sn.getType().equals(WebcrawlerConfig.NODE_URLSPEC))\n      {\n        if (l == 0)\n        {\n          out.print(\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLCanonicalization\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"+\n\"      <table class=\\\"formtable\\\">\\n\"+\n\"        <tr class=\\\"formheaderrow\\\">\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.URLRegexp\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Description\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.Reorder\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RemoveJSPSessions\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RemoveASPSessions\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RemovePHPSessions\") + \"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumnheader\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.RemoveBVSessions\") + \"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n          );\n        }\n        String regexpString = sn.getAttributeValue(WebcrawlerConfig.ATTR_REGEXP);\n        String description = sn.getAttributeValue(WebcrawlerConfig.ATTR_DESCRIPTION);\n        if (description == null)\n          description = \"\";\n        String allowReorder = sn.getAttributeValue(WebcrawlerConfig.ATTR_REORDER);\n        String allowReorderOutput;\n        if (allowReorder == null || allowReorder.length() == 0)\n          allowReorderOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n        else\n          allowReorderOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n        String allowJavaSessionRemoval = sn.getAttributeValue(WebcrawlerConfig.ATTR_JAVASESSIONREMOVAL);\n        String allowJavaSessionRemovalOutput;\n        if (allowJavaSessionRemoval == null || allowJavaSessionRemoval.length() == 0)\n          allowJavaSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n        else\n          allowJavaSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n        String allowASPSessionRemoval = sn.getAttributeValue(WebcrawlerConfig.ATTR_ASPSESSIONREMOVAL);\n        String allowASPSessionRemovalOutput;\n        if (allowASPSessionRemoval == null || allowASPSessionRemoval.length() == 0)\n          allowASPSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n        else\n          allowASPSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n        String allowPHPSessionRemoval = sn.getAttributeValue(WebcrawlerConfig.ATTR_PHPSESSIONREMOVAL);\n        String allowPHPSessionRemovalOutput;\n        if (allowPHPSessionRemoval == null || allowPHPSessionRemoval.length() == 0)\n          allowPHPSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n        else\n          allowPHPSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n        String allowBVSessionRemoval = sn.getAttributeValue(WebcrawlerConfig.ATTR_BVSESSIONREMOVAL);\n        String allowBVSessionRemovalOutput;\n        if (allowBVSessionRemoval == null || allowBVSessionRemoval.length() == 0)\n          allowBVSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.no\");\n        else\n          allowBVSessionRemovalOutput = Messages.getBodyString(locale, \"WebcrawlerConnector.yes\");\n          \n        out.print(\n\"        <tr class=\\\"\"+(((l % 2)==0)?\"evenformrow\":\"oddformrow\")+\"\\\">\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+Encoder.bodyEscape(regexpString)+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\">\"+Encoder.bodyEscape(description)+\"</td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+allowReorderOutput+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+allowJavaSessionRemovalOutput+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+allowASPSessionRemovalOutput+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+allowPHPSessionRemovalOutput+\"</nobr></td>\\n\"+\n\"          <td class=\\\"formcolumncell\\\"><nobr>\"+allowBVSessionRemovalOutput+\"</nobr></td>\\n\"+\n\"        </tr>\\n\"\n        );\n        l++;\n      }\n    }\n    if (l > 0)\n    {\n      out.print(\n\"      </table>\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"  <tr><td class=\\\"message\\\" colspan=\\\"2\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoCanonicalizationSpecified\") + \"</nobr></td></tr>\\n\"\n      );\n    }\n\n    out.print(\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"\n    );\n    i = 0;\n    seenAny = false;\n    while (i < ds.getChildCount())\n    {\n      SpecificationNode sn = ds.getChild(i++);\n      if (sn.getType().equals(WebcrawlerConfig.NODE_MAP))\n      {\n        if (seenAny == false)\n        {\n          out.print(\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.URLMappingsColon\")+\"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n          );\n          seenAny = true;\n        }\n        String match = sn.getAttributeValue(WebcrawlerConfig.ATTR_MATCH);\n        String map = sn.getAttributeValue(WebcrawlerConfig.ATTR_MAP);\n        out.print(\n\"      <nobr>\"+org.apache.manifoldcf.ui.util.Encoder.bodyEscape(match)+\"</nobr>\\n\"\n        );\n        if (map != null && map.length() > 0)\n        {\n          out.print(\n\"      &nbsp;--&gt;&nbsp;<nobr>\"+org.apache.manifoldcf.ui.util.Encoder.bodyEscape(map)+\"</nobr>\\n\"\n          );\n        }\n        out.print(\n\"      <br/>\\n\"\n        );\n      }\n    }\n\n    if (seenAny)\n    {\n      out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"  <tr><td class=\\\"message\\\" colspan=\\\"2\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.NoMappingsSpecifiedWillAcceptAllUrls\")+\"</nobr></td></tr>\\n\"\n      );\n    }\n\n    out.print(\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.IncludeOnlyHostsMatchingSeeds\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"+\n\"    \"+(includeMatching?Messages.getBodyString(locale,\"WebcrawlerConnector.yes\"):Messages.getBodyString(locale,\"WebcrawlerConnector.no\"))+\"\\n\"+\n\"    </td>\\n\"+\n\"  </tr>\\n\"\n    );\n\n    out.print(\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.IncludeInCrawl\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n    );\n    try\n    {\n      java.io.Reader str = new java.io.StringReader(inclusions);\n      try\n      {\n        java.io.BufferedReader is = new java.io.BufferedReader(str);\n        try\n        {\n          while (true)\n          {\n            String nextString = is.readLine();\n            if (nextString == null)\n              break;\n            if (nextString.length() == 0)\n              continue;\n            out.print(\n\"      <nobr>\"+Encoder.bodyEscape(nextString)+\"</nobr><br/>\\n\"\n            );\n          }\n        }\n        finally\n        {\n          is.close();\n        }\n      }\n      finally\n      {\n        str.close();\n      }\n    }\n    catch (java.io.IOException e)\n    {\n      throw new ManifoldCFException(\"IO error: \"+e.getMessage(),e);\n    }\n    out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.IncludeInIndex\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n    );\n    try\n    {\n      java.io.Reader str = new java.io.StringReader(inclusionsIndex);\n      try\n      {\n        java.io.BufferedReader is = new java.io.BufferedReader(str);\n        try\n        {\n          while (true)\n          {\n            String nextString = is.readLine();\n            if (nextString == null)\n              break;\n            if (nextString.length() == 0)\n              continue;\n            out.print(\n\"      <nobr>\"+Encoder.bodyEscape(nextString)+\"</nobr><br/>\\n\"\n            );\n          }\n        }\n        finally\n        {\n          is.close();\n        }\n      }\n      finally\n      {\n        str.close();\n      }\n    }\n    catch (java.io.IOException e)\n    {\n      throw new ManifoldCFException(\"IO error: \"+e.getMessage(),e);\n    }\n    out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ExcludeFromCrawl\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n    );\n    try\n    {\n      java.io.Reader str = new java.io.StringReader(exclusions);\n      try\n      {\n        java.io.BufferedReader is = new java.io.BufferedReader(str);\n        try\n        {\n          while (true)\n          {\n            String nextString = is.readLine();\n            if (nextString == null)\n              break;\n            if (nextString.length() == 0)\n              continue;\n            out.print(\n\"      <nobr>\"+Encoder.bodyEscape(nextString)+\"</nobr><br/>\\n\"\n            );\n          }\n        }\n        finally\n        {\n          is.close();\n        }\n      }\n      finally\n      {\n        str.close();\n      }\n    }\n    catch (java.io.IOException e)\n    {\n      throw new ManifoldCFException(\"IO error: \"+e.getMessage(),e);\n    }\n    out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ExcludeFromIndex\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n    );\n    try\n    {\n      java.io.Reader str = new java.io.StringReader(exclusionsIndex);\n      try\n      {\n        java.io.BufferedReader is = new java.io.BufferedReader(str);\n        try\n        {\n          while (true)\n          {\n            String nextString = is.readLine();\n            if (nextString == null)\n              break;\n            if (nextString.length() == 0)\n              continue;\n            out.print(\n\"      <nobr>\"+Encoder.bodyEscape(nextString)+\"</nobr><br/>\\n\"\n            );\n          }\n        }\n        finally\n        {\n          is.close();\n        }\n      }\n      finally\n      {\n        str.close();\n      }\n    }\n    catch (java.io.IOException e)\n    {\n      throw new ManifoldCFException(\"IO error: \"+e.getMessage(),e);\n    }\n    out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.ExcludeContentFromIndex\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n    );\n    try\n    {\n      java.io.Reader str = new java.io.StringReader(exclusionsContentIndex);\n      try\n      {\n        java.io.BufferedReader is = new java.io.BufferedReader(str);\n        try\n        {\n          while (true)\n          {\n            String nextString = is.readLine();\n            if (nextString == null)\n              break;\n            if (nextString.length() == 0)\n              continue;\n            out.print(\n\"      <nobr>\"+Encoder.bodyEscape(nextString)+\"</nobr><br/>\\n\"\n            );\n          }\n        }\n        finally\n        {\n          is.close();\n        }\n      }\n      finally\n      {\n        str.close();\n      }\n    }\n    catch (java.io.IOException e)\n    {\n      throw new ManifoldCFException(\"IO error: \"+e.getMessage(),e);\n    }\n    out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"    \\n\"+\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"\n    );\n    // Go through looking for access tokens\n    seenAny = false;\n    i = 0;\n    while (i < ds.getChildCount())\n    {\n      SpecificationNode sn = ds.getChild(i++);\n      if (sn.getType().equals(WebcrawlerConfig.NODE_ACCESS))\n      {\n        if (seenAny == false)\n        {\n          out.print(\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.AccessTokens\") + \"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n          );\n          seenAny = true;\n        }\n        String token = sn.getAttributeValue(WebcrawlerConfig.ATTR_TOKEN);\n        out.print(\n\"      \"+Encoder.bodyEscape(token)+\"<br/>\\n\"\n        );\n      }\n    }\n\n    if (seenAny)\n    {\n      out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"\n      );\n    }\n    else\n    {\n      out.print(\n\"  <tr><td class=\\\"message\\\" colspan=\\\"2\\\"><nobr>\" + Messages.getBodyString(locale,\"WebcrawlerConnector.NoAccessTokensSpecified\") + \"</nobr></td></tr>\\n\"\n      );\n    }\n    out.print(\n\"  <tr><td class=\\\"separator\\\" colspan=\\\"2\\\"><hr/></td></tr>\\n\"+\n\"  <tr>\\n\"+\n\"    <td class=\\\"description\\\"><nobr>\"+Messages.getBodyString(locale,\"WebcrawlerConnector.ExcludedHeadersColon\")+\"</nobr></td>\\n\"+\n\"    <td class=\\\"value\\\">\\n\"\n    );\n    for (String excludedHeader : excludedHeaders)\n    {\n      out.print(\n\"      \"+Encoder.bodyEscape(excludedHeader)+\"<br/>\\n\"\n      );\n    }\n    out.print(\n\"    </td>\\n\"+\n\"  </tr>\\n\"+\n\"</table>\\n\"\n    );\n  }\n\n  // Protected methods and classes\n\n  /** Calculate the event name for session login.\n  */\n  protected String makeSessionLoginEventName(INamingActivity activities, String sequenceKey)\n  {\n    return activities.createGlobalString(\"webcrawler:session:\"+sequenceKey);\n  }\n\n  /** Calculate the event name for DNS access.\n  */\n  protected String makeDNSEventName(INamingActivity activities, String hostNameKey)\n  {\n    // Use the connector unique id, and use a convention that guarantees uniqueness.\n    return activities.createGlobalString(\"webcrawler:dns:\"+hostNameKey);\n  }\n\n  /** Look up an ipaddress given a non-canonical host name.\n  *@return appropriate status.\n  */\n  protected int lookupIPAddress(String documentIdentifier, IProcessActivity activities, String hostName, long currentTime, StringBuilder ipAddressBuffer)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    String eventName = makeDNSEventName(activities,hostName);\n    DNSManager.DNSInfo info = dnsManager.lookup(hostName,currentTime);\n    if (info != null)\n    {\n      String ipAddress = info.getIPAddress();\n      if (ipAddress == null)\n        return RESULTSTATUS_FALSE;\n      ipAddressBuffer.append(ipAddress);\n      return RESULTSTATUS_TRUE;\n    }\n    if (activities.beginEventSequence(eventName))\n    {\n      //  We uniquely can do the lookup.\n      try\n      {\n        // Fetch it using InetAddress\n        InetAddress ip = null;\n        try\n        {\n          ip = InetAddress.getByName(hostName);\n        }\n        catch (UnknownHostException e)\n        {\n          // Host is unknown, so leave ipAddress as null.\n        }\n        String fqdn = null;\n        String ipAddress = null;\n        if (ip != null)\n        {\n          fqdn = ip.getCanonicalHostName();\n          ipAddress = ip.getHostAddress();\n        }\n        // Write this to the cache - expiration time 6 hours\n        dnsManager.writeDNSData(hostName,fqdn,ipAddress,currentTime + 1000*60*60*6);\n        if (ipAddress == null)\n          return RESULTSTATUS_FALSE;\n        ipAddressBuffer.append(ipAddress);\n        return RESULTSTATUS_TRUE;\n      }\n      finally\n      {\n        activities.completeEventSequence(eventName);\n      }\n    }\n    else\n    {\n      // Abort this fetch, since it's blocked.\n      return RESULTSTATUS_NOTYETDETERMINED;\n    }\n  }\n\n  /** Construct the robots key for a host.\n  * This is used to look up robots info in the database, and to form the corresponding event name.\n  */\n  protected static String makeRobotsKey(String protocol, String hostName, int port)\n  {\n    String rval = hostName + \":\" + port;\n    // For backwards compatibility, only tack on the protocol if the protocol is not http\n    if (!protocol.equalsIgnoreCase(\"http\"))\n      rval = protocol.toLowerCase()+\":\"+rval;\n    return rval;\n  }\n\n  /** Construct a name for the global web-connector robots event.\n  */\n  protected String makeRobotsEventName(INamingActivity versionActivities, String robotsKey)\n  {\n    // Use the connector unique id, and use a convention that guarantees uniqueness.\n    return versionActivities.createGlobalString(\"webcrawler:robots:\"+robotsKey);\n  }\n\n  /** Check robots to see if fetch is allowed.\n  *@return appropriate resultstatus code.\n  */\n  protected int checkFetchAllowed(String documentIdentifier, String protocol, String hostIPAddress, int port, PageCredentials credential,\n    IKeystoreManager trustStore, String hostName, String[] binNames, long currentTime, String pathString, IProcessActivity versionActivities, int connectionLimit,\n    String proxyHost, int proxyPort, String proxyAuthDomain, String proxyAuthUsername, String proxyAuthPassword)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    // hostNameAndPort is the key for looking up the robots file in the database\n    String hostNameAndPort = makeRobotsKey(protocol,hostName,port);\n    String hostIPAddressAndPort = hostIPAddress + \":\" + port;\n\n    Boolean info = robotsManager.checkFetchAllowed(userAgent,hostNameAndPort,currentTime,pathString,versionActivities);\n    if (info != null)\n    {\n      if (info.booleanValue())\n        return RESULTSTATUS_TRUE;\n      else\n        return RESULTSTATUS_FALSE;\n    }\n\n    // We need to fetch robots.txt.\n    // Since this is a prerequisite for many documents, prevent queuing and processing of those documents until the robots document is fetched.\n\n    // Assemble the name of the global web connector robots event.\n    String robotsEventName = makeRobotsEventName(versionActivities,hostNameAndPort);\n    // Begin the event processing\n    if (versionActivities.beginEventSequence(robotsEventName))\n    {\n      // We've successfully obtained a lock on reading robots for this server!  Now, guarantee that we'll free it, by instantiating a try/finally\n      try\n      {\n        IThrottledConnection connection = ThrottledFetcher.getConnection(currentContext,throttleGroupName,\n          protocol,hostIPAddress,port,credential,\n          trustStore,throttleDescription,binNames,connectionLimit,\n          proxyHost,proxyPort,proxyAuthDomain,proxyAuthUsername,proxyAuthPassword,\n          socketTimeoutMilliseconds,connectionTimeoutMilliseconds,\n          versionActivities);\n        try\n        {\n          connection.beginFetch(FETCH_ROBOTS);\n          try\n          {\n            connection.executeFetch(\"/robots.txt\",userAgent,from,true,hostName,null,null);\n            long expirationTime = currentTime+1000*60*60*24;\n            int code = connection.getResponseCode();\n            if (code == 200)\n            {\n              if (Logging.connectors.isDebugEnabled())\n                Logging.connectors.debug(\"Web: Fetch of robots.txt from \"+protocol+\"://\"+hostIPAddressAndPort+\"(host='\"+hostName+\"') succeeded!\");\n\n              InputStream is = connection.getResponseBodyStream();\n              try\n              {\n                // Write this to the cache - expiration time 24 hours\n                robotsManager.writeRobotsData(hostNameAndPort,expirationTime,is);\n              }\n              finally\n              {\n                is.close();\n              }\n            }\n            else\n            {\n              if (Logging.connectors.isDebugEnabled())\n                Logging.connectors.debug(\"Web: Fetch of robots.txt from \"+protocol+\"://\"+hostIPAddressAndPort+\"(host='\"+hostName+\"') failed with error \"+Integer.toString(code));\n              // Write this to the cache - expiration time 24 hours\n              robotsManager.writeRobotsData(hostNameAndPort,expirationTime,null);\n            }\n          }\n          catch (ServiceInterruption e)\n          {\n            // A service interruption on a robots fetch should save the fact that no robots.txt is available, and leave it be for 6 hours that way.\n            if (Logging.connectors.isDebugEnabled())\n              Logging.connectors.debug(\"Web: Timeout fetching robots.txt from \"+protocol+\"://\"+hostIPAddressAndPort+\"(host='\"+hostName+\"'); assuming robots missing for now: \"+e.getMessage(),e);\n            long expirationTime = currentTime + 1000*60*60*6;\n            try\n            {\n              robotsManager.writeRobotsData(hostNameAndPort,expirationTime,null);\n            }\n            catch (IOException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache\");\n            }\n          }\n          catch (java.net.SocketTimeoutException e)\n          {\n            if (Logging.connectors.isDebugEnabled())\n              Logging.connectors.debug(\"Web: Fetch of robots.txt from \"+protocol+\"://\"+hostIPAddressAndPort+\"(host='\"+hostName+\"') generated Socket Timeout Exception: \"+e.getMessage(),e);\n            // This COULD be a transient error, so we are more aggressive about retrying a fetch of robots.txt in that case\n            long expirationTime = currentTime + 1000*60*60*6;\n            try\n            {\n              robotsManager.writeRobotsData(hostNameAndPort,expirationTime,null);\n            }\n            catch (java.net.SocketTimeoutException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n            catch (ConnectTimeoutException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n            catch (InterruptedIOException e2)\n            {\n              //Logging.connectors.warn(\"IO interruption seen\",e2);\n              throw new ManifoldCFException(\"Interrupted: \"+e2.getMessage(),e2,ManifoldCFException.INTERRUPTED);\n            }\n            catch (IOException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n          }\n          catch (ConnectTimeoutException e)\n          {\n            if (Logging.connectors.isDebugEnabled())\n              Logging.connectors.debug(\"Web: Fetch of robots.txt from \"+protocol+\"://\"+hostIPAddressAndPort+\"(host='\"+hostName+\"') generated Socket Connect Timeout Exception: \"+e.getMessage(),e);\n            // This COULD be a transient error, so we are more aggressive about retrying a fetch of robots.txt in that case\n            long expirationTime = currentTime + 1000*60*60*6;\n            try\n            {\n              robotsManager.writeRobotsData(hostNameAndPort,expirationTime,null);\n            }\n            catch (java.net.SocketTimeoutException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n            catch (ConnectTimeoutException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n            catch (InterruptedIOException e2)\n            {\n              //Logging.connectors.warn(\"IO interruption seen\",e2);\n              throw new ManifoldCFException(\"Interrupted: \"+e2.getMessage(),e2,ManifoldCFException.INTERRUPTED);\n            }\n            catch (IOException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n          }\n          catch (InterruptedIOException e)\n          {\n            //Logging.connectors.warn(\"IO interruption seen\",e);\n            throw new ManifoldCFException(\"Interrupted: \"+e.getMessage(),e,ManifoldCFException.INTERRUPTED);\n          }\n          catch (IOException e)\n          {\n            if (Logging.connectors.isDebugEnabled())\n              Logging.connectors.debug(\"Web: Fetch of robots.txt from \"+protocol+\"://\"+hostIPAddressAndPort+\"(host='\"+hostName+\"') generated IO Exception: \"+e.getMessage(),e);\n            // This COULD be a transient error, so we are more aggressive about retrying a fetch of robots.txt in that case\n            long expirationTime = currentTime + 1000*60*60*6;\n            try\n            {\n              robotsManager.writeRobotsData(hostNameAndPort,expirationTime,null);\n            }\n            catch (java.net.SocketTimeoutException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n            catch (ConnectTimeoutException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n            catch (InterruptedIOException e2)\n            {\n              //Logging.connectors.warn(\"IO interruption seen\",e2);\n              throw new ManifoldCFException(\"Interrupted: \"+e2.getMessage(),e2,ManifoldCFException.INTERRUPTED);\n            }\n            catch (IOException e2)\n            {\n              Logging.connectors.warn(\"Web: Couldn't clear robots cache: \"+e2.getMessage(),e2);\n            }\n          }\n          finally\n          {\n            connection.doneFetch(versionActivities);\n          }\n        }\n        finally\n        {\n          connection.close();\n        }\n\n        // Right now we have no choice but to read it again.\n        info = robotsManager.checkFetchAllowed(userAgent,hostNameAndPort,currentTime,pathString,versionActivities);\n        if (info.booleanValue())\n          return RESULTSTATUS_TRUE;\n        else\n          return RESULTSTATUS_FALSE;\n      }\n      finally\n      {\n        versionActivities.completeEventSequence(robotsEventName);\n      }\n    }\n    else\n    {\n      // Some other thread is reading robots.txt right now, so abort processing of the current document.\n      return RESULTSTATUS_NOTYETDETERMINED;\n    }\n  }\n\n  /** Convert an absolute or relative URL to a document identifier.  This may involve several steps at some point,\n  * but right now it does NOT involve converting the host name to a canonical host name.\n  * (Doing so would destroy the ability of virtually hosted sites to do the right thing,\n  * since the original host name would be lost.)  Thus, we do the conversion to IP address\n  * right before we actually fetch the document.\n  *@param parentIdentifier the identifier of the document in which the raw url was found, or null if none.\n  *@param rawURL the starting, un-normalized, un-canonicalized URL.\n  *@param filter the filter object, used to remove unmatching URLs.\n  *@return the canonical URL (the document identifier), or null if the url was illegal.\n  */\n  protected String makeDocumentIdentifier(String parentIdentifier, String rawURL, DocumentURLFilter filter)\n    throws ManifoldCFException\n  {\n    try\n    {\n      WebURL url;\n      if (parentIdentifier != null)\n      {\n        WebURL parentURL = new WebURL(parentIdentifier);\n        url = parentURL.resolve(rawURL);\n      }\n      else\n        url = new WebURL(rawURL);\n\n      String protocol = url.getScheme();\n      String host = url.getHost();\n\n      // The new URL better darn well have a host and a protocol, and we only know how to deal with\n      // http and https.\n      if (protocol == null || host == null)\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Can't use url '\"+rawURL+\"' because it has no protocol or host\");\n        return null;\n      }\n      if (!understoodProtocols.contains(protocol))\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Can't use url '\"+rawURL+\"' because it has an unsupported protocol '\"+protocol+\"'\");\n        return null;\n      }\n      if (!filter.isHostLegal(host))\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Can't use url '\"+rawURL+\"' because its host is not found in the seeds ('\"+host+\"')\");\n        return null;\n      }\n      \n      // Canonicalization procedure.\n      // The query part of the URL may contain bad parameters (session id's, for instance), or may be ordered in such a\n      // way as to prevent an effectively identical URL from being matched.  The anchor part of the URL should also be stripped.\n      // This code performs both of these activities in a simple way; rewrites of various pieces may get more involved if we add\n      // the ability to perform mappings using criteria specified in the UI.  Right now we don't.\n      String id = doCanonicalization(filter,url);\n      if (id == null)\n        return null;\n\n      // As a last basic legality check, go through looking for illegal characters.\n      int i = 0;\n      while (i < id.length())\n      {\n        char x = id.charAt(i++);\n        // Only 7-bit ascii is allowed in URLs - and that has limits too (no control characters)\n        if (x < ' ' || x > 127)\n        {\n          if (Logging.connectors.isDebugEnabled())\n            Logging.connectors.debug(\"WEB: Can't use url '\"+rawURL+\"' because it has illegal characters in it\");\n          return null;\n        }\n      }\n\n      // Check to be sure the canonicalized URL is in fact one of the ones we want to include\n      if (!filter.isDocumentLegal(id))\n        return null;\n\n      return id;\n    }\n    catch (java.net.URISyntaxException e)\n    {\n      if (Logging.connectors.isDebugEnabled())\n        Logging.connectors.debug(\"WEB: Can't use url '\"+rawURL+\"' because it is badly formed: \"+e.getMessage());\n      return null;\n    }\n    catch (java.lang.IllegalArgumentException e)\n    {\n      return null;\n    }\n    catch (java.lang.NullPointerException e)\n    {\n      // This gets tossed by url.toAsciiString() for reasons I don't understand, but which have to do with a malformed URL.\n      return null;\n    }\n  }\n\n  /** Code to canonicalize a URL.  If URL cannot be canonicalized (and is illegal) return null.\n  */\n  protected String doCanonicalization(DocumentURLFilter filter, WebURL url)\n    throws ManifoldCFException, java.net.URISyntaxException\n  {\n    // First, we have to figure out what the canonicalization policy is.\n    // To do that, we need to do a regexp match against the COMPLETE raw url.\n    // Put it back into the URL without the ref, and with the modified query and path parts.\n    String pathString = url.getPath();\n    String queryString = url.getRawQuery();\n\n    WebURL rawURI = new WebURL(url.getScheme(),url.getHost(),url.getPort(),pathString,queryString);\n    String completeRawURL = rawURI.toASCIIString();\n\n    CanonicalizationPolicy p;\n    if (completeRawURL != null)\n      p = filter.getCanonicalizationPolicies().findMatch(completeRawURL);\n    else\n      p = null;\n\n    // Note well: The java.net.URI class mistreats the query part of the URI, near as I can tell, in the following ways:\n    // (1) It decodes the whole thing without regards to the argument interpretation, so the escaped ampersands etc in the arguments are converted\n    //     to non-escaped ones (ugh).  This is why I changed the code below to parse the RAW query string and decode it myself.\n    // (2) On reassembly of the query string, the class does not properly escape \":\", \"/\", or a bunch of other characters the class description *says*\n    //     it will escape.  This means it creates URI's that are illegal according to RFC 2396 - although it is true that RFC 2396 also contains\n    //     apparent errors.\n    //\n    // I've therefore opted to deal with this problem by doing much of the query string processing myself - including its final reassembly into the\n    // URI at the end of the processing.\n    //\n\n    // To make the url be canonical, we need to strip off everything after the #.  We also need to order the arguments in a canonical\n    // way, and remove session identifiers of the types we know about.\n    if (queryString != null)\n    {\n      // Rewrite the query string.  To do this, we first parse it (by looking for ampersands and equal signs), and then\n      // we ditch any keys that we really don't want (session identifiers particularly).  Finally, we go through the\n      // keys in sorted order and reassemble the query, making sure that any arguments that have the same name\n      // appear in the same order.\n\n      // I don't use the 'split' operation because I think it's a lot more oomph (and performance loss) than is needed\n      // for this simple parsing task.\n\n      // When reordering a url, the following is done:\n      // (1) The individual order of all arguments with the same name is preserved\n      // (2) The arguments themselves appear in sorted order, minus any arguments that should be removed because they\n      //      are interpreted to be session arguments.\n      //\n      // When a url is NOT reordered, the following is done:\n      // (1) Each argument is examined IN TURN.\n      // (2) If the argument is a session argument and should be excluded, it is simply skipped.\n\n      // Canonicalization note: Broadvision\n      //\n      // The format of Broadvision's urls is as follows:\n      // http://blah/path/path?arg|arg|arg|BVSession@@@@=xxxx&more stuff\n      // The session identifier is the BVSession@@@@.  In theory I could strip this away, but I've found that\n      // most Broadvision sites require session even for basic navigation!  So the lesser of two evils is to leave it\n      // in there and suffer the eventual url duplication.\n\n      if (p == null || p.canReorder())\n      {\n        // Reorder arguments\n        HashMap argumentMap = new HashMap();\n        int index = 0;\n        while (index < queryString.length())\n        {\n          int newIndex = queryString.indexOf(\"&\",index);\n          if (newIndex == -1)\n            newIndex = queryString.length();\n          String argument = queryString.substring(index,newIndex);\n          int valueIndex = argument.indexOf(\"=\");\n          String key;\n          if (valueIndex == -1)\n            key = argument;\n          else\n            key = argument.substring(0,valueIndex);\n\n          // If this is a disallowed argument, simply don't include it in the final map.\n          boolean includeArgument = true;\n          if ((p == null || p.canRemovePhpSession()) && key.equals(\"PHPSESSID\"))\n            includeArgument = false;\n          // For web connector only, null policy means NO broadvision cookie removal!!\n          if (p != null && p.canRemoveBvSession() && key.indexOf(\"BVSession@@@@\") != -1)\n            includeArgument = false;\n\n          if (includeArgument)\n          {\n            ArrayList list = (ArrayList)argumentMap.get(key);\n            if (list == null)\n            {\n              list = new ArrayList();\n              argumentMap.put(key,list);\n            }\n            list.add(argument);\n          }\n\n          if (newIndex < queryString.length())\n            index = newIndex + 1;\n          else\n            index = newIndex;\n        }\n\n        // Reassemble query string in sorted order\n        String[] sortArray = new String[argumentMap.size()];\n        int i = 0;\n        Iterator iter = argumentMap.keySet().iterator();\n        while (iter.hasNext())\n        {\n          sortArray[i++] = (String)iter.next();\n        }\n        java.util.Arrays.sort(sortArray);\n\n        StringBuilder newString = new StringBuilder();\n        boolean isFirst = true;\n        i = 0;\n        while (i < sortArray.length)\n        {\n          String key = sortArray[i++];\n          ArrayList list = (ArrayList)argumentMap.get(key);\n          int j = 0;\n          while (j < list.size())\n          {\n            if (isFirst == false)\n            {\n              newString.append(\"&\");\n            }\n            else\n              isFirst = false;\n            newString.append((String)list.get(j++));\n          }\n        }\n        queryString = newString.toString();\n      }\n      else\n      {\n        // Do not reorder!\n        StringBuilder newString = new StringBuilder();\n        int index = 0;\n        boolean isFirst = true;\n        while (index < queryString.length())\n        {\n          int newIndex = queryString.indexOf(\"&\",index);\n          if (newIndex == -1)\n            newIndex = queryString.length();\n          String argument = queryString.substring(index,newIndex);\n          int valueIndex = argument.indexOf(\"=\");\n          String key;\n          if (valueIndex == -1)\n            key = argument;\n          else\n            key = argument.substring(0,valueIndex);\n\n          // If this is a disallowed argument, simply don't include it in the final query.\n          boolean includeArgument = true;\n          if ((p == null || p.canRemovePhpSession()) && key.equals(\"PHPSESSID\"))\n            includeArgument = false;\n          // For web connector only, null policy means NO broadvision cookie removal!!\n          if (p != null && p.canRemoveBvSession() && key.indexOf(\"BVSession@@@@\") != -1)\n            includeArgument = false;\n\n          if (includeArgument)\n          {\n            if (!isFirst)\n              newString.append(\"&\");\n            else\n              isFirst = false;\n            newString.append(argument);\n          }\n\n          if (newIndex < queryString.length())\n            index = newIndex + 1;\n          else\n            index = newIndex;\n        }\n        queryString = newString.toString();\n      }\n    }\n\n    // Now, rewrite path to get rid of jsessionid etc.\n    if (pathString != null)\n    {\n      int index = pathString.indexOf(\";jsessionid=\");\n      if ((p == null || p.canRemoveJavaSession()) && index != -1)\n      {\n        // There's a \";jsessionid=\"\n        // Strip the java session id\n        pathString = pathString.substring(0,index);\n      }\n      if ((p == null || p.canRemoveAspSession()) && pathString.startsWith(\"/s(\"))\n      {\n        // It's asp.net\n        index = pathString.indexOf(\")\");\n        if (index != -1)\n          pathString = pathString.substring(index+1);\n      }\n\n    }\n\n    // Put it back into the URL without the ref, and with the modified query and path parts.\n    url = new WebURL(url.getScheme(),url.getHost(),url.getPort(),pathString,queryString);\n    String rval = url.toASCIIString();\n    return rval;\n  }\n\n  /** Code to check if data is interesting, based on response code and content type.\n  */\n  protected boolean isContentInteresting(IFingerprintActivity activities, String documentIdentifier, int response, String contentType)\n    throws ServiceInterruption, ManifoldCFException\n  {\n    // Additional filtering only done if it's a 200 response\n    if (response != 200)\n      return true;\n\n    // Look at the content type and decide if it's a kind we want.  This is defined\n    // as something we think we can either ingest, or extract links from.\n\n    // For now, we're only going to attempt to extract links from html.  This will change eventually.\n    // But the check here is just what the content type is.\n\n    if (contentType == null)\n      return false;\n\n    String strippedContentType = contentType;\n    int pos = strippedContentType.indexOf(\";\");\n    if (pos != -1)\n      strippedContentType = strippedContentType.substring(0,pos);\n    strippedContentType = strippedContentType.trim();\n\n    // There are presumably mime types we can extract links from that we can't index?\n    if (interestingMimeTypeMap.contains(strippedContentType))\n      return true;\n    \n    boolean rval = activities.checkMimeTypeIndexable(contentType);\n    if (rval == false && Logging.connectors.isDebugEnabled())\n      Logging.connectors.debug(\"Web: For document '\"+documentIdentifier+\"', not fetching because output connector does not want mimetype '\"+contentType+\"'\");\n    return rval;\n  }\n  \n  /** Convert a document identifier to filename.\n   * @param documentIdentifier\n   * @return\n   * @throws URISyntaxException\n   */\n  protected String documentIdentifiertoFileName(String documentIdentifier) \n    throws URISyntaxException\n  {\n    StringBuffer path = new StringBuffer();\n    URI uri = null;\n\n    uri = new URI(documentIdentifier);\n\n    if (uri.getRawPath() != null) {\n      if (uri.getRawPath().equals(\"\")) {\n        path.append(\"\");\n      } else if (uri.getRawPath().equals(\"/\")) {\n        path.append(\"index.html\");\n      } else if (uri.getRawPath().length() != 0) {\n        if (uri.getRawPath().endsWith(\"/\")) {\n          path.append(\"index.html\");\n        } else {\n          String[] names = uri.getRawPath().split(\"/\"); \n          path.append(names[names.length - 1]);\n        } \n      }\n    }\n\n    if (path.length() > 0) {\n      if (uri.getRawQuery() != null) {\n        path.append(\"?\");\n        path.append(uri.getRawQuery());\n      }\n    }\n\n    return path.toString();\n  }\n\n  /** Find a redirection URI, if it exists */\n  protected String findRedirectionURI(String currentURI)\n    throws ManifoldCFException\n  {\n    FindRedirectionHandler handler = new FindRedirectionHandler(currentURI);\n    handleRedirects(currentURI,handler);\n    return handler.getTargetURI();\n  }\n\n  /** Find matching HTML form data, if present.  Return null if not. */\n  protected FormData findHTMLForm(String currentURI, LoginParameters lp)\n    throws ManifoldCFException\n  {\n    if (lp == null || lp.getFormNamePattern() == null)\n      return null;\n\n    // Use the specified loginParameters to (a) find an appropriate form, if present, and (b) override what the form's default\n    // form parameters would be.  This means that the override parameters are associated with the page on which the *form*\n    // is found, not the page to which we are submitting the form.  This is unlike (say) Heritrix, which attaches the parameters\n    // to the page that's the target of the submission.\n    FindHTMLFormHandler handler = new FindHTMLFormHandler(currentURI,lp.getFormNamePattern());\n    handleHTML(currentURI,handler);\n    // Apply any overrides\n    handler.applyFormOverrides(lp);\n    return handler.getFormData();\n  }\n\n  /** Find a preferred redirection URI, if it exists */\n  protected String findPreferredRedirectionURI(String currentURI, LoginParameters lp)\n    throws ManifoldCFException\n  {\n    if (lp == null || lp.getPreferredRedirectionPattern() == null)\n      return null;\n\n    FindPreferredRedirectionHandler handler = new FindPreferredRedirectionHandler(currentURI,lp.getPreferredRedirectionPattern());\n    handleRedirects(currentURI,handler);\n    handler.applyOverrides(lp);\n    return handler.getTargetURI();\n  }\n\n  /** Find existence of specific content on the page (never finds a URL) */\n  protected String findSpecifiedContent(String currentURI, LoginParameters lp)\n    throws ManifoldCFException\n  {\n    if (lp == null || lp.getContentPattern() == null)\n      return null;\n    \n    FindContentHandler handler = new FindContentHandler(currentURI,lp.getContentPattern());\n    handleHTML(currentURI,handler);\n    handler.applyOverrides(lp);\n    return handler.getTargetURI();\n  }\n\n  /** Find HTML link URI, if present, making sure specified preference is matched. */\n  protected String findHTMLLinkURI(String currentURI, LoginParameters lp)\n    throws ManifoldCFException\n  {\n    if (lp == null || lp.getPreferredLinkPattern() == null)\n      return null;\n\n    FindHTMLHrefHandler handler = new FindHTMLHrefHandler(currentURI,lp.getPreferredLinkPattern());\n    handleHTML(currentURI,handler);\n    handler.applyOverrides(lp);\n    return handler.getTargetURI();\n  }\n\n  /** Code to extract links from an already-fetched document. */\n  protected boolean extractLinks(String documentIdentifier, IProcessActivity activities, DocumentURLFilter filter)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    ProcessActivityRedirectionHandler redirectHandler = new ProcessActivityRedirectionHandler(documentIdentifier,activities,filter);\n    handleRedirects(documentIdentifier,redirectHandler);\n    if (Logging.connectors.isDebugEnabled() && redirectHandler.shouldIndex() == false)\n      Logging.connectors.debug(\"Web: Not indexing document '\"+documentIdentifier+\"' because of redirection\");\n    // For html, we don't want any actions, because we don't do form submission.\n    ProcessActivityHTMLHandler htmlHandler = new ProcessActivityHTMLHandler(documentIdentifier,activities,filter);\n    handleHTML(documentIdentifier,htmlHandler);\n    if (Logging.connectors.isDebugEnabled() && htmlHandler.shouldIndex() == false)\n      Logging.connectors.debug(\"Web: Not indexing document '\"+documentIdentifier+\"' because of HTML robots or content tags prohibiting indexing\");\n    ProcessActivityXMLHandler xmlHandler = new ProcessActivityXMLHandler(documentIdentifier,activities,filter);\n    handleXML(documentIdentifier,xmlHandler);\n    if (Logging.connectors.isDebugEnabled() && xmlHandler.shouldIndex() == false)\n      Logging.connectors.debug(\"Web: Not indexing document '\"+documentIdentifier+\"' because of XML robots or content tags prohibiting indexing\");\n    // May add more later for other extraction tasks.\n    return htmlHandler.shouldIndex() && redirectHandler.shouldIndex() && xmlHandler.shouldIndex();\n  }\n\n  /** This class is the handler for links that get added into a IProcessActivity object.\n  */\n  protected class ProcessActivityLinkHandler implements IDiscoveredLinkHandler\n  {\n    protected String documentIdentifier;\n    protected IProcessActivity activities;\n    protected DocumentURLFilter filter;\n    protected String contextDescription;\n    protected String linkType;\n\n    /** Constructor. */\n    public ProcessActivityLinkHandler(String documentIdentifier, IProcessActivity activities, DocumentURLFilter filter, String contextDescription, String linkType)\n    {\n      this.documentIdentifier = documentIdentifier;\n      this.activities = activities;\n      this.filter = filter;\n      this.contextDescription = contextDescription;\n      this.linkType = linkType;\n    }\n\n    /** Inform the world of a discovered link.\n    *@param rawURL is the raw discovered url.  This may be relative, malformed, or otherwise unsuitable for use until final form is acheived.\n    */\n    @Override\n    public void noteDiscoveredLink(String rawURL)\n      throws ManifoldCFException\n    {\n      String newIdentifier = makeDocumentIdentifier(documentIdentifier,rawURL,filter);\n      if (newIdentifier != null)\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: In \"+contextDescription+\" document '\"+documentIdentifier+\"', found link to '\"+newIdentifier+\"'\");\n        activities.addDocumentReference(newIdentifier,documentIdentifier,linkType,null,null,null,calculateDocumentEvents(activities,newIdentifier));\n      }\n      else\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: In \"+contextDescription+\" document '\"+documentIdentifier+\"', found an unincluded URL '\"+rawURL+\"'\");\n      }\n    }\n\n  }\n\n  /** Class that describes redirection handling */\n  protected class ProcessActivityRedirectionHandler extends ProcessActivityLinkHandler implements IRedirectionHandler\n  {\n    /** Constructor. */\n    public ProcessActivityRedirectionHandler(String documentIdentifier, IProcessActivity activities, DocumentURLFilter filter)\n    {\n      super(documentIdentifier,activities,filter,\"redirection\",REL_REDIRECT);\n    }\n    \n    public boolean shouldIndex()\n    {\n      return true;\n    }\n\n  }\n\n  /** Class that describes HTML handling */\n  protected class ProcessActivityHTMLHandler extends ProcessActivityLinkHandler implements IHTMLHandler\n  {\n    boolean allowIndex = true;\n    boolean allowFollow = true;\n    \n    /** Constructor. */\n    public ProcessActivityHTMLHandler(String documentIdentifier, IProcessActivity activities, DocumentURLFilter filter)\n    {\n      super(documentIdentifier,activities,filter,\"html\",REL_LINK);\n    }\n\n    /** Decide whether we should index. */\n    public boolean shouldIndex()\n    {\n      return allowIndex;\n    }\n    \n    /** Note a character of text.\n    * Structured this way to keep overhead low for handlers that don't use text.\n    */\n    @Override\n    public void noteTextCharacter(char textCharacter)\n      throws ManifoldCFException\n    {\n    }\n\n    /** Note a meta tag */\n    @Override\n    public void noteMetaTag(Map metaAttributes)\n      throws ManifoldCFException\n    {\n      String name = (String)metaAttributes.get(\"name\");\n      if (name != null && name.toLowerCase().equals(\"robots\"))\n      {\n        String contentValue = (String)metaAttributes.get(\"content\");\n        if (contentValue != null)\n        {\n          contentValue = contentValue.toLowerCase();\n          // Parse content value\n          try\n          {\n            String[] contentValues = contentValue.split(\",\");\n            int i = 0;\n            while (i < contentValues.length)\n            {\n              String cv = contentValues[i++].trim();\n              if (cv.equals(\"index\"))\n                allowIndex = true;\n              else if (cv.equals(\"noindex\"))\n                allowIndex = false;\n              else if (cv.equals(\"none\"))\n              {\n                allowFollow = false;\n                allowIndex = false;\n              }\n              else if (cv.equals(\"follow\"))\n                allowFollow = true;\n              else if (cv.equals(\"nofollow\"))\n                allowFollow = false;\n            }\n          }\n          catch (PatternSyntaxException e)\n          {\n            throw new ManifoldCFException(e.getMessage(),e);\n          }\n        }\n      }\n    }\n\n    /** Note the start of a form */\n    @Override\n    public void noteFormStart(Map formAttributes)\n      throws ManifoldCFException\n    {\n    }\n\n    /** Note an input tag */\n    @Override\n    public void noteFormInput(Map inputAttributes)\n      throws ManifoldCFException\n    {\n    }\n\n    /** Note the end of a form */\n    @Override\n    public void noteFormEnd()\n      throws ManifoldCFException\n    {\n    }\n\n    /** Note discovered href */\n    @Override\n    public void noteAHREF(String rawURL)\n      throws ManifoldCFException\n    {\n      if (allowFollow)\n        noteDiscoveredLink(rawURL);\n    }\n\n    /** Note discovered href */\n    @Override\n    public void noteLINKHREF(String rawURL)\n      throws ManifoldCFException\n    {\n      if (allowFollow)\n        noteDiscoveredLink(rawURL);\n    }\n\n    /** Note discovered IMG SRC */\n    @Override\n    public void noteIMGSRC(String rawURL)\n      throws ManifoldCFException\n    {\n      if (allowFollow)\n        noteDiscoveredLink(rawURL);\n    }\n\n    /** Note discovered FRAME SRC */\n    @Override\n    public void noteFRAMESRC(String rawURL)\n      throws ManifoldCFException\n    {\n      if (allowFollow)\n        noteDiscoveredLink(rawURL);\n    }\n\n    @Override\n    public void finishUp()\n      throws ManifoldCFException\n    {\n    }\n\n  }\n\n  /** Class that describes XML handling */\n  protected class ProcessActivityXMLHandler extends ProcessActivityLinkHandler implements IXMLHandler\n  {\n    /** Constructor. */\n    public ProcessActivityXMLHandler(String documentIdentifier, IProcessActivity activities, DocumentURLFilter filter)\n    {\n      super(documentIdentifier,activities,filter,\"xml\",REL_LINK);\n    }\n\n    public boolean shouldIndex()\n    {\n      return true;\n    }\n    \n    /** Inform the world of a discovered ttl value.\n    *@param rawTtlValue is the raw discovered ttl value.  Null indicates we should set the default.\n    */\n    public void noteDiscoveredTtlValue(String rawTtlValue)\n      throws ManifoldCFException\n    {\n      long currentTime = System.currentTimeMillis();\n      Long rescanTime = null;\n      if (rawTtlValue != null)\n      {\n        try\n        {\n          int minutes = Integer.parseInt(rawTtlValue);\n          long nextTime = currentTime + minutes * 60000L;\n          rescanTime = new Long(nextTime);\n          // Set the upper bound time; we want to scan the feeds aggressively.\n          if (Logging.connectors.isDebugEnabled())\n            Logging.connectors.debug(\"WEB: In \"+contextDescription+\" document '\"+documentIdentifier+\"', found a ttl value of \"+rawTtlValue+\"; setting refetch time accordingly\");\n        }\n        catch (NumberFormatException e)\n        {\n          Logging.connectors.warn(\"WEB: In \"+contextDescription+\" document '\"+documentIdentifier+\"' found illegal ttl value '\"+rawTtlValue+\"': \"+e.getMessage(),e);\n        }\n      }\n\n      if (Logging.connectors.isDebugEnabled())\n        Logging.connectors.debug(\"WEB: In \"+contextDescription+\" document '\"+documentIdentifier+\"' setting rescan time to \"+((rescanTime==null)?\"null\":rescanTime.toString()));\n\n      activities.setDocumentScheduleBounds(documentIdentifier,rescanTime,rescanTime,null,null);\n    }\n\n  }\n\n  /** Handle extracting the redirect link from a redirect response. */\n  protected void handleRedirects(String documentURI, IRedirectionHandler handler)\n    throws ManifoldCFException\n  {\n    int responseCode = cache.getResponseCode(documentURI);\n    if (responseCode == 302 || responseCode == 301)\n    {\n      // Figure out the redirect\n      String referralURI = cache.getReferralURI(documentURI);\n      if (referralURI == null)\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: The document '\"+documentURI+\"' is a redirection, but there was no URI header!\");\n        return;\n      }\n      int index = referralURI.indexOf(\" \");\n      if (index != -1)\n        referralURI = referralURI.substring(0,index);\n      handler.noteDiscoveredLink(referralURI);\n    }\n  }\n\n  /** Handle document references from XML.  Right now we only understand RSS. */\n  protected void handleXML(String documentURI, IXMLHandler handler)\n    throws ManifoldCFException, ServiceInterruption\n  {\n    try\n    {\n      int responseCode = cache.getResponseCode(documentURI);\n      if (responseCode != 200)\n        return;\n\n      // We ONLY look for XML if the content type *says* it is XML.\n      String contentType = extractContentType(cache.getContentType(documentURI));\n      String mimeType = extractMimeType(contentType);\n      boolean isXML =\n        mimeType.equals(\"text/xml\") ||\n        mimeType.equals(\"application/rss+xml\") ||\n        mimeType.equals(\"application/xml\") ||\n        mimeType.equals(\"application/atom+xml\") ||\n        mimeType.equals(\"application/xhtml+xml\") ||\n        mimeType.equals(\"text/XML\") ||\n        mimeType.equals(\"application/rdf+xml\") ||\n        mimeType.equals(\"text/application\") ||\n        mimeType.equals(\"XML\");\n\n      if (!isXML)\n        return;\n\n      // OK, it's XML.  Now what?  Well, we get the encoding, and we verify that it is text, then we try to get links\n      // from it presuming it is an RSS feed.\n\n      String encoding = extractEncoding(contentType);\n\n      InputStream is = cache.getData(documentURI);\n      if (is == null)\n      {\n        Logging.connectors.error(\"WEB: Document '\"+documentURI+\"' should be in cache but isn't\");\n        return;\n      }\n      try\n      {\n        // Parse the document.  This will cause various things to occur, within the instantiated XMLParsingContext class.\n        Parser p = new Parser();\n        XMLFuzzyHierarchicalParseState x = new XMLFuzzyHierarchicalParseState();\n        OuterContextClass c = new OuterContextClass(x,documentURI,handler);\n        x.setContext(c);\n        try\n        {\n          p.parseWithCharsetDetection(encoding,is,x);\n          c.checkIfValidFeed();\n        }\n        finally\n        {\n          x.cleanup();\n        }\n      }\n      finally\n      {\n        is.close();\n      }\n    }\n    catch (java.net.SocketTimeoutException e)\n    {\n      throw new ManifoldCFException(\"Socket timeout exception: \"+e.getMessage(),e);\n    }\n    catch (ConnectTimeoutException e)\n    {\n      throw new ManifoldCFException(\"Socket connect timeout exception: \"+e.getMessage(),e);\n    }\n    catch (InterruptedIOException e)\n    {\n      //Logging.connectors.warn(\"IO interruption seen\",e);\n\n      throw new ManifoldCFException(\"Interrupted: \"+e.getMessage(),e,ManifoldCFException.INTERRUPTED);\n    }\n    catch (IOException e)\n    {\n      throw new ManifoldCFException(\"IO error: \"+e.getMessage(),e);\n    }\n  }\n\n  /** This class handles the outermost XML context for the feed document. */\n  protected class OuterContextClass extends XMLParsingContext\n  {\n    /** Keep track of the number of valid feed signals we saw */\n    protected int outerTagCount = 0;\n    /** The document uri */\n    protected String documentURI;\n    /** The link handler */\n    protected IXMLHandler handler;\n\n    public OuterContextClass(XMLFuzzyHierarchicalParseState theStream, String documentURI, IXMLHandler handler)\n    {\n      super(theStream);\n      this.documentURI = documentURI;\n      this.handler = handler;\n    }\n\n    /** Check if feed was valid */\n    public void checkIfValidFeed()\n    {\n      if (outerTagCount == 0)\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: XML document '\"+documentURI+\"' does not have rss, feed, or rdf:RDF tag - not valid feed\");\n      }\n    }\n\n    /** Handle the tag beginning to set the correct second-level parsing context */\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      if (localName.equals(\"rss\"))\n      {\n        // RSS feed detected\n        outerTagCount++;\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Parsed bottom-level XML for RSS document '\"+documentURI+\"'\");\n        return new RSSContextClass(theStream,namespace,localName,qName,atts,documentURI,handler);\n      }\n      else if (localName.equals(\"RDF\"))\n      {\n        // RDF/Atom feed detected\n        outerTagCount++;\n        return new RDFContextClass(theStream,namespace,localName,qName,atts,documentURI,handler);\n      }\n      else if (localName.equals(\"feed\"))\n      {\n        // Basic feed detected\n        outerTagCount++;\n        return new FeedContextClass(theStream,namespace,localName,qName,atts,documentURI,handler);\n      }\n      else if (localName.equals(\"urlset\") || localName.equals(\"sitemapindex\"))\n      {\n        // Sitemap detected\n        outerTagCount++;\n        return new UrlsetContextClass(theStream,namespace,localName,qName,atts,documentURI,handler);\n      }\n\n      // The default action is to establish a new default context.\n      return super.beginTag(namespace,localName,qName,atts);\n    }\n\n    /** Handle the tag ending */\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      XMLParsingContext context = theStream.getContext();\n      String tagName = context.getLocalname();\n      if (tagName.equals(\"RDF\"))\n      {\n        ((RDFContextClass)context).process();\n      }\n      else if (tagName.equals(\"feed\"))\n      {\n        ((FeedContextClass)context).process();\n      }\n      else if (tagName.equals(\"urlset\") || tagName.equals(\"sitemapindex\"))\n      {\n        ((UrlsetContextClass)context).process();\n      }\n      else\n        super.endTag();\n    }\n\n  }\n\n  protected class RSSContextClass extends XMLParsingContext\n  {\n    /** The document identifier */\n    protected String documentURI;\n    /** Link notification interface */\n    protected IXMLHandler handler;\n\n    public RSSContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts, String documentURI, IXMLHandler handler)\n    {\n      super(theStream,namespace,localName,qName,atts);\n      this.documentURI = documentURI;\n      this.handler = handler;\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // Handle each channel\n      if (localName.equals(\"channel\"))\n      {\n        // Channel detected\n        return new RSSChannelContextClass(theStream,namespace,localName,qName,atts,documentURI,handler);\n      }\n\n      // Skip everything else.\n      return super.beginTag(namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      // If it's our channel tag, process global channel information\n      XMLParsingContext context = theStream.getContext();\n      String tagName = context.getLocalname();\n      if (tagName.equals(\"channel\"))\n      {\n        ((RSSChannelContextClass)context).process();\n      }\n      else\n        super.endTag();\n    }\n  }\n\n  protected class RSSChannelContextClass extends XMLParsingContext\n  {\n    /** The document identifier */\n    protected String documentURI;\n    /** Link handler */\n    protected IXMLHandler handler;\n\n    /** TTL value is set on a per-channel basis */\n    protected String ttlValue = null;\n\n    public RSSChannelContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts, String documentURI, IXMLHandler handler)\n    {\n      super(theStream,namespace,localName,qName,atts);\n      this.documentURI = documentURI;\n      this.handler = handler;\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // The tags we care about are \"ttl\" and \"item\", nothing else.\n      if (localName.equals(\"ttl\"))\n      {\n        // TTL value seen.  Prepare to record it, as a string.\n        return new XMLStringParsingContext(theStream,namespace,localName,qName,atts);\n      }\n      else if (localName.equals(\"item\"))\n      {\n        // Item seen.  We don't need any of the attributes etc., but we need to start a new context.\n        return new RSSItemContextClass(theStream,namespace,localName,qName,atts);\n      }\n      // Skip everything else.\n      return super.beginTag(namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      XMLParsingContext theContext = theStream.getContext();\n      String theTag = theContext.getLocalname();\n      if (theTag.equals(\"ttl\"))\n        // If the current context must be the TTL one, record its data value.\n        ttlValue = ((XMLStringParsingContext)theContext).getValue();\n      else if (theTag.equals(\"item\"))\n      {\n        // It's an item.\n        RSSItemContextClass itemContext = (RSSItemContextClass)theContext;\n        // Presumably, since we are done parsing, we've recorded all the information we need in the context, object including:\n        // (1) File name (if any), containing dechromed content\n        // (2) Link name(s)\n        // (3) Pubdate\n        // (4) Title\n        // The job now is to pull this info out and call the activities interface appropriately.\n\n        // NOTE: After this endTag() method is called, tagCleanup() will be called for the item context.  This should clean up\n        // all dangling files etc. that need to be removed.\n        // If an exception or error is thrown during the parse, this endTag() method will NOT be called, but the tagCleanup()\n        // method will be called regardless.\n        itemContext.process(handler);\n      }\n      else\n        super.endTag();\n    }\n\n    /** Process this data */\n    protected void process()\n      throws ManifoldCFException\n    {\n      // Deal with the ttlvalue, if it was found\n      // Use the ttl value as a signal for when we ought to look at this feed again.  If not present, use the default.\n      handler.noteDiscoveredTtlValue(ttlValue);\n    }\n  }\n\n  protected class RSSItemContextClass extends XMLParsingContext\n  {\n    protected String guidField = null;\n    protected String linkField = null;\n\n    public RSSItemContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts)\n    {\n      super(theStream,namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // The tags we care about are \"ttl\" and \"item\", nothing else.\n      if (localName.equals(\"link\"))\n      {\n        // \"link\" tag\n        return new XMLStringParsingContext(theStream,namespace,localName,qName,atts);\n      }\n      else if (localName.equals(\"guid\"))\n      {\n        // \"guid\" tag\n        return new XMLStringParsingContext(theStream,namespace,localName,qName,atts);\n      }\n      else\n      {\n        // Skip everything else.\n        return super.beginTag(namespace,localName,qName,atts);\n      }\n    }\n\n    /** Convert the individual sub-fields of the item context into their final forms */\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      XMLParsingContext theContext = theStream.getContext();\n      String theTag = theContext.getLocalname();\n      if (theTag.equals(\"link\"))\n      {\n        linkField = ((XMLStringParsingContext)theContext).getValue();\n      }\n      else if (theTag.equals(\"guid\"))\n      {\n        guidField = ((XMLStringParsingContext)theContext).getValue();\n      }\n      else\n      {\n        super.endTag();\n      }\n    }\n\n    /** Process the data accumulated for this item */\n    public void process(IXMLHandler handler)\n      throws ManifoldCFException\n    {\n      if (linkField == null || linkField.length() == 0)\n        linkField = guidField;\n\n      if (linkField != null && linkField.length() > 0)\n      {\n        String[] links = linkField.split(\", \");\n        int l = 0;\n        while (l < links.length)\n        {\n          String rawURL = links[l++].trim();\n          // Process the link\n          handler.noteDiscoveredLink(rawURL);\n        }\n      }\n    }\n  }\n\n  protected class RDFContextClass extends XMLParsingContext\n  {\n    /** The document identifier */\n    protected String documentURI;\n    /** XML handler */\n    protected IXMLHandler handler;\n\n    /** ttl value */\n    protected String ttlValue = null;\n\n    public RDFContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts, String documentURI, IXMLHandler handler)\n    {\n      super(theStream,namespace,localName,qName,atts);\n      this.documentURI = documentURI;\n      this.handler = handler;\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // The tags we care about are \"ttl\" and \"item\", nothing else.\n      if (localName.equals(\"ttl\"))\n      {\n        // TTL value seen.  Prepare to record it, as a string.\n        return new XMLStringParsingContext(theStream,namespace,localName,qName,atts);\n      }\n      else if (localName.equals(\"item\"))\n      {\n        // Item seen.  We don't need any of the attributes etc., but we need to start a new context.\n        return new RDFItemContextClass(theStream,namespace,localName,qName,atts);\n      }\n      // Skip everything else.\n      return super.beginTag(namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      XMLParsingContext theContext = theStream.getContext();\n      String theTag = theContext.getLocalname();\n      if (theTag.equals(\"ttl\"))\n        // If the current context must be the TTL one, record its data value.\n        ttlValue = ((XMLStringParsingContext)theContext).getValue();\n      else if (theTag.equals(\"item\"))\n      {\n        // It's an item.\n        RDFItemContextClass itemContext = (RDFItemContextClass)theContext;\n        // Presumably, since we are done parsing, we've recorded all the information we need in the context, object including:\n        // (1) Link name(s)\n        // The job now is to pull this info out and call the activities interface appropriately.\n\n        // NOTE: After this endTag() method is called, tagCleanup() will be called for the item context.  This should clean up\n        // all dangling files etc. that need to be removed.\n        // If an exception or error is thrown during the parse, this endTag() method will NOT be called, but the tagCleanup()\n        // method will be called regardless.\n        itemContext.process(handler);\n      }\n      else\n        super.endTag();\n    }\n\n    /** Process this data */\n    protected void process()\n      throws ManifoldCFException\n    {\n      // Deal with the ttlvalue, if it was found\n      handler.noteDiscoveredTtlValue(ttlValue);\n    }\n  }\n\n  protected class RDFItemContextClass extends XMLParsingContext\n  {\n    protected String linkField = null;\n\n    public RDFItemContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts)\n    {\n      super(theStream,namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // The tags we care about are \"ttl\" and \"item\", nothing else.\n      if (localName.equals(\"link\"))\n      {\n        // \"link\" tag\n        return new XMLStringParsingContext(theStream,namespace,localName,qName,atts);\n      }\n      else\n      {\n        // Skip everything else.\n        return super.beginTag(namespace,localName,qName,atts);\n      }\n    }\n\n    /** Convert the individual sub-fields of the item context into their final forms */\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      XMLParsingContext theContext = theStream.getContext();\n      String theTag = theContext.getLocalname();\n      if (theTag.equals(\"link\"))\n      {\n        linkField = ((XMLStringParsingContext)theContext).getValue();\n      }\n      else\n      {\n        super.endTag();\n      }\n    }\n\n    /** Process the data accumulated for this item */\n    public void process(IXMLHandler handler)\n      throws ManifoldCFException\n    {\n      if (linkField != null && linkField.length() > 0)\n      {\n        String[] links = linkField.split(\", \");\n        int l = 0;\n        while (l < links.length)\n        {\n          String rawURL = links[l++].trim();\n          // Process the link\n          handler.noteDiscoveredLink(rawURL);\n        }\n      }\n    }\n  }\n\n  protected class FeedContextClass extends XMLParsingContext\n  {\n    /** The document identifier */\n    protected String documentURI;\n    /** XML handler */\n    protected IXMLHandler handler;\n\n    /** ttl value */\n    protected String ttlValue = null;\n\n    public FeedContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts, String documentURI, IXMLHandler handler)\n    {\n      super(theStream,namespace,localName,qName,atts);\n      this.documentURI = documentURI;\n      this.handler = handler;\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // The tags we care about are \"ttl\" and \"item\", nothing else.\n      if (localName.equals(\"ttl\"))\n      {\n        // TTL value seen.  Prepare to record it, as a string.\n        return new XMLStringParsingContext(theStream,namespace,localName,qName,atts);\n      }\n      else if (localName.equals(\"entry\"))\n      {\n        // Item seen.  We don't need any of the attributes etc., but we need to start a new context.\n        return new FeedItemContextClass(theStream,namespace,localName,qName,atts);\n      }\n      // Skip everything else.\n      return super.beginTag(namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      XMLParsingContext theContext = theStream.getContext();\n      String theTag = theContext.getLocalname();\n      if (theTag.equals(\"ttl\"))\n        // If the current context must be the TTL one, record its data value.\n        ttlValue = ((XMLStringParsingContext)theContext).getValue();\n      else if (theTag.equals(\"entry\"))\n      {\n        // It's an item.\n        FeedItemContextClass itemContext = (FeedItemContextClass)theContext;\n        // Presumably, since we are done parsing, we've recorded all the information we need in the context, object including:\n        // (1) Link name(s)\n        // The job now is to pull this info out and call the activities interface appropriately.\n\n        // NOTE: After this endTag() method is called, tagCleanup() will be called for the item context.  This should clean up\n        // all dangling files etc. that need to be removed.\n        // If an exception or error is thrown during the parse, this endTag() method will NOT be called, but the tagCleanup()\n        // method will be called regardless.\n        itemContext.process(handler);\n      }\n      else\n        super.endTag();\n    }\n\n    /** Process this data */\n    protected void process()\n      throws ManifoldCFException\n    {\n      // Deal with the ttlvalue, if it was found\n      // Use the ttl value as a signal for when we ought to look at this feed again.  If not present, use the default.\n      handler.noteDiscoveredTtlValue(ttlValue);\n    }\n  }\n\n  protected class FeedItemContextClass extends XMLParsingContext\n  {\n    protected List<String> linkField = new ArrayList<String>();\n\n    public FeedItemContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts)\n    {\n      super(theStream,namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // The tags we care about are \"ttl\" and \"item\", nothing else.\n      if (localName.equals(\"link\"))\n      {\n        // \"link\" tag\n        String ref = atts.get(\"href\");\n        if (ref != null && ref.length() > 0)\n          linkField.add(ref);\n        return super.beginTag(namespace,localName,qName,atts);\n      }\n      else\n      {\n        // Skip everything else.\n        return super.beginTag(namespace,localName,qName,atts);\n      }\n    }\n\n    /** Process the data accumulated for this item */\n    public void process(IXMLHandler handler)\n      throws ManifoldCFException\n    {\n      if (linkField.size() > 0)\n      {\n        for (String linkValue : linkField)\n        {\n          String[] links = linkValue.split(\", \");\n          int l = 0;\n          while (l < links.length)\n          {\n            String rawURL = links[l++].trim();\n            // Process the link\n            handler.noteDiscoveredLink(rawURL);\n          }\n        }\n      }\n    }\n  }\n\n  protected class UrlsetContextClass extends XMLParsingContext\n  {\n    /** The document identifier */\n    protected String documentURI;\n    /** XML handler */\n    protected IXMLHandler handler;\n\n    /** ttl value */\n    protected String ttlValue = null;\n\n    public UrlsetContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts, String documentURI, IXMLHandler handler)\n    {\n      super(theStream,namespace,localName,qName,atts);\n      this.documentURI = documentURI;\n      this.handler = handler;\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // The tags we care about are \"url\", nothing else.\n      if (localName.equals(\"url\") || localName.equals(\"sitemap\"))\n      {\n        // Item seen.  We don't need any of the attributes etc., but we need to start a new context.\n        return new UrlsetItemContextClass(theStream,namespace,localName,qName,atts);\n      }\n      // Skip everything else.\n      return super.beginTag(namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      XMLParsingContext theContext = theStream.getContext();\n      String theTag = theContext.getLocalname();\n      if (theTag.equals(\"url\") || theTag.equals(\"sitemap\"))\n      {\n        // It's an item.\n        UrlsetItemContextClass itemContext = (UrlsetItemContextClass)theContext;\n        // Presumably, since we are done parsing, we've recorded all the information we need in the context, object including:\n        // (1) File name (if any), containing dechromed content\n        // (2) Link name(s)\n        // (3) Pubdate\n        // (4) Title\n        // The job now is to pull this info out and call the activities interface appropriately.\n\n        // NOTE: After this endTag() method is called, tagCleanup() will be called for the item context.  This should clean up\n        // all dangling files etc. that need to be removed.\n        // If an exception or error is thrown during the parse, this endTag() method will NOT be called, but the tagCleanup()\n        // method will be called regardless.\n        itemContext.process(handler);\n      }\n      else\n        super.endTag();\n    }\n\n    /** Process this data */\n    protected void process()\n      throws ManifoldCFException\n    {\n      // Deal with the ttlvalue, if it was found\n      // Use the ttl value as a signal for when we ought to look at this feed again.  If not present, use the default.\n      handler.noteDiscoveredTtlValue(ttlValue);\n    }\n  }\n\n  protected class UrlsetItemContextClass extends XMLParsingContext\n  {\n    protected String linkField = null;\n\n    public UrlsetItemContextClass(XMLFuzzyHierarchicalParseState theStream, String namespace, String localName, String qName, Map<String,String> atts)\n    {\n      super(theStream,namespace,localName,qName,atts);\n    }\n\n    @Override\n    protected XMLParsingContext beginTag(String namespace, String localName, String qName, Map<String,String> atts)\n      throws ManifoldCFException\n    {\n      // The tags we care about are \"loc\", nothing else.\n      if (localName.equals(\"loc\"))\n      {\n        // \"loc\" tag\n        return new XMLStringParsingContext(theStream,namespace,localName,qName,atts);\n      }\n      else\n      {\n        // Skip everything else.\n        return super.beginTag(namespace,localName,qName,atts);\n      }\n    }\n\n    /** Convert the individual sub-fields of the item context into their final forms */\n    @Override\n    protected void endTag()\n      throws ManifoldCFException\n    {\n      XMLParsingContext theContext = theStream.getContext();\n      String theTag = theContext.getLocalname();\n      if (theTag.equals(\"loc\"))\n      {\n        linkField = ((XMLStringParsingContext)theContext).getValue();\n      }\n      else\n      {\n        super.endTag();\n      }\n    }\n\n    protected void tagCleanup()\n      throws ManifoldCFException\n    {\n    }\n\n    /** Process the data accumulated for this item */\n    public void process(IXMLHandler handler)\n      throws ManifoldCFException\n    {\n      if (linkField != null && linkField.length() > 0)\n      {\n        String[] links = linkField.split(\", \");\n        int l = 0;\n        while (l < links.length)\n        {\n          String rawURL = links[l++].trim();\n          // Process the link\n          handler.noteDiscoveredLink(rawURL);\n        }\n      }\n    }\n  }\n\n  /** Handle document references from HTML */\n  protected void handleHTML(String documentURI, IHTMLHandler handler)\n    throws ManifoldCFException\n  {\n    int responseCode = cache.getResponseCode(documentURI);\n    if (responseCode != 200)\n      return;\n    try\n    {\n      // We'll check first to see if this is textual - and then we'll try to find html links in it.\n      if (!isDocumentText(documentURI))\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Document '\"+documentURI+\"' is not text; can't extract links\");\n        return;\n      }\n      // Grab the content-type so we know how to decode.\n      String contentType = extractContentType(cache.getContentType(documentURI));\n      String encoding = extractEncoding(contentType);\n      if (encoding == null)\n        encoding = StandardCharsets.UTF_8.name();\n      \n      // Search for A HREF tags in the document stream.  This is brain-dead link location\n      InputStream is = cache.getData(documentURI);\n      if (is == null)\n      {\n        Logging.connectors.error(\"WEB: Document '\"+documentURI+\"' should be in cache but isn't\");\n        return;\n      }\n\n      try\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Document '\"+documentURI+\"' is text, with encoding '\"+encoding+\"'; link extraction starting\");\n\n        // Instantiate the parser, and call the right method\n        Parser p = new Parser();\n        p.parseWithoutCharsetDetection(encoding,is,new FormParseState(handler));\n      }\n      catch (UnsupportedEncodingException e)\n      {\n        // The encoding specified was crap, so don't handle this document.\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Document '\"+documentURI+\"' had an unrecognized encoding '\"+encoding+\"'\");\n        return;\n      }\n      finally\n      {\n        is.close();\n      }\n    }\n    catch (SocketTimeoutException e)\n    {\n      throw new ManifoldCFException(\"Socket timeout exception: \"+e.getMessage(),e);\n    }\n    catch (ConnectTimeoutException e)\n    {\n      throw new ManifoldCFException(\"Socket connect timeout exception: \"+e.getMessage(),e);\n    }\n    catch (InterruptedIOException e)\n    {\n      //Logging.connectors.warn(\"IO interruption seen\",e);\n\n      throw new ManifoldCFException(\"Interrupted: \"+e.getMessage(),e,ManifoldCFException.INTERRUPTED);\n    }\n    catch (IOException e)\n    {\n      throw new ManifoldCFException(\"IO error: \"+e.getMessage(),e);\n    }\n  }\n\n  /** Is the document text, as far as we can tell? */\n  protected boolean isDocumentText(String documentURI)\n    throws ManifoldCFException\n  {\n    try\n    {\n      // Look at the first 4K\n      byte[] byteBuffer = new byte[4096];\n      int amt;\n\n      // Open file for reading.\n      InputStream is = cache.getData(documentURI);\n      if (is == null)\n        return false;\n      try\n      {\n        amt = 0;\n        while (amt < byteBuffer.length)\n        {\n          int incr = is.read(byteBuffer,amt,byteBuffer.length-amt);\n          if (incr == -1)\n            break;\n          amt += incr;\n        }\n      }\n      finally\n      {\n        is.close();\n      }\n\n      if (amt == 0)\n        return false;\n\n      return isText(byteBuffer,amt);\n    }\n    catch (SocketTimeoutException e)\n    {\n      throw new ManifoldCFException(\"Socket timeout exception accessing cached document: \"+e.getMessage(),e);\n    }\n    catch (ConnectTimeoutException e)\n    {\n      throw new ManifoldCFException(\"Socket timeout exception accessing cached document: \"+e.getMessage(),e);\n    }\n    catch (InterruptedIOException e)\n    {\n      throw new ManifoldCFException(\"Interrupted: \"+e.getMessage(),e,ManifoldCFException.INTERRUPTED);\n    }\n    catch (IOException e)\n    {\n      throw new ManifoldCFException(\"IO exception accessing cached document: \"+e.getMessage(),e);\n    }\n  }\n\n  /** Test to see if a document is text or not.  The first n bytes are passed\n  * in, and this code returns \"true\" if it thinks they represent text.  The code\n  * has been lifted algorithmically from products/Sharecrawler/Fingerprinter.pas,\n  * which was based on \"perldoc -f -T\".\n  */\n  protected static boolean isText(byte[] beginChunk, int chunkLength)\n  {\n    if (chunkLength == 0)\n      return true;\n    int i = 0;\n    int count = 0;\n    while (i < chunkLength)\n    {\n      byte x = beginChunk[i++];\n      if (x == 0)\n        return false;\n      if (isStrange(x))\n        count++;\n    }\n    return ((double)count)/((double)chunkLength) < 0.30;\n  }\n\n  /** Check if character is not typical ASCII or utf-8. */\n  protected static boolean isStrange(byte x)\n  {\n    return (x >= 0 && x < 32) && (!isWhiteSpace(x));\n  }\n\n  /** Check if a byte is a whitespace character. */\n  protected static boolean isWhiteSpace(byte x)\n  {\n    return (x == 0x09 || x == 0x0a || x == 0x0d || x == 0x20);\n  }\n\n  /** Read a string as a sequence of individual expressions, urls, etc.\n  */\n  protected static List<String> stringToArray(String input)\n  {\n    List<String> list = new ArrayList<String>();\n    try\n    {\n      java.io.Reader str = new java.io.StringReader(input);\n      try\n      {\n        java.io.BufferedReader is = new java.io.BufferedReader(str);\n        try\n        {\n          while (true)\n          {\n            String nextString = is.readLine();\n            if (nextString == null)\n              break;\n            nextString = nextString.trim();\n            if (nextString.length() == 0)\n              continue;\n            if (nextString.startsWith(\"#\"))\n              continue;\n            list.add(nextString);\n          }\n        }\n        finally\n        {\n          is.close();\n        }\n      }\n      finally\n      {\n        str.close();\n      }\n    }\n    catch (java.io.IOException e)\n    {\n      // Eat the exception and exit.\n    }\n    return list;\n  }\n\n  /** Compile all regexp entries in the passed in list, and add them to the output\n  * list.\n  */\n  protected static void compileList(List<Pattern> output, List<String> input)\n    throws ManifoldCFException\n  {\n    int i = 0;\n    while (i < input.size())\n    {\n      String inputString = input.get(i++);\n      try\n      {\n        output.add(Pattern.compile(inputString));\n      }\n      catch (PatternSyntaxException e)\n      {\n        throw new ManifoldCFException(\"Mapping regular expression '\"+inputString+\"' is illegal: \"+e.getMessage(),e);\n      }\n    }\n  }\n\n  /** Get the page credentials for a given document identifier (URL) */\n  protected PageCredentials getPageCredential(String documentIdentifier)\n  {\n    return credentialsDescription.getPageCredential(documentIdentifier);\n  }\n\n  /** Get the sequence credentials for a given document identifier (URL) */\n  protected SequenceCredentials getSequenceCredential(String documentIdentifier)\n  {\n    return credentialsDescription.getSequenceCredential(documentIdentifier);\n  }\n\n  /** Get the trust store for a given document identifier (URL) */\n  protected IKeystoreManager getTrustStore(String documentIdentifier)\n    throws ManifoldCFException\n  {\n    return trustsDescription.getTrustStore(documentIdentifier);\n  }\n\n  /** Grab forced acl out of document specification.\n  *@param spec is the document specification.\n  *@return the acls.\n  */\n  protected static String[] getAcls(Specification spec)\n  {\n    Set<String> map = new HashSet<String>();\n    int i = 0;\n    while (i < spec.getChildCount())\n    {\n      SpecificationNode sn = spec.getChild(i++);\n      if (sn.getType().equals(WebcrawlerConfig.NODE_ACCESS))\n      {\n        String token = sn.getAttributeValue(WebcrawlerConfig.ATTR_TOKEN);\n        map.add(token);\n      }\n    }\n\n    String[] rval = new String[map.size()];\n    Iterator<String> iter = map.iterator();\n    i = 0;\n    while (iter.hasNext())\n    {\n      rval[i++] = iter.next();\n    }\n    return rval;\n  }\n\n  /** Read a document specification to get a set of excluded headers */\n  protected static Set<String> findExcludedHeaders(Specification spec)\n    throws ManifoldCFException\n  {\n    Set<String> rval = new HashSet<String>();\n    int i = 0;\n    while (i < spec.getChildCount())\n    {\n      SpecificationNode n = spec.getChild(i++);\n      if (n.getType().equals(WebcrawlerConfig.NODE_EXCLUDEHEADER))\n      {\n        String value = n.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n        rval.add(value);\n      }\n    }\n    return rval;\n  }\n  \n  /** Calculate events that should be associated with a document. */\n  protected String[] calculateDocumentEvents(INamingActivity activities, String documentIdentifier)\n  {\n    // All we have for events for right now are the robots and dns events.  Each document has one of each.\n    try\n    {\n      // Get all the appropriate parts from the document identifier\n      URL url = new URL(documentIdentifier);\n      String hostName = url.getHost();\n      String protocol = url.getProtocol();\n      int port = url.getPort();\n      if (port == -1)\n        port = url.getDefaultPort();\n      // Form the robots key\n      String robotsKey = makeRobotsKey(protocol,hostName,port);\n      // Build the corresponding event name\n      String robotsEventName = makeRobotsEventName(activities,robotsKey);\n      String dnsEventName = makeDNSEventName(activities,hostName);\n      // See if we're in a session-protected area\n      SequenceCredentials sequenceCredential = getSequenceCredential(documentIdentifier);\n      if (sequenceCredential != null)\n      {\n        String sessionKey = sequenceCredential.getSequenceKey();\n        String sessionEventName = makeSessionLoginEventName(activities,sessionKey);\n        return new String[]{robotsEventName,hostName,sessionEventName};\n      }\n      return new String[]{robotsEventName,hostName};\n    }\n    catch (MalformedURLException e)\n    {\n      Logging.connectors.warn(\"WEB: Could not form event names for identifier '\"+documentIdentifier+\"' because it was malformed: \"+e.getMessage(),e);\n      return null;\n    }\n  }\n\n  /** Name/value class */\n  protected static class NameValue\n  {\n    protected final String name;\n    protected final String value;\n\n    public NameValue(String name, String value)\n    {\n      this.name = name;\n      this.value = value;\n    }\n\n    public String getName()\n    {\n      return name;\n    }\n\n    public String getValue()\n    {\n      return value;\n    }\n  }\n\n  /** Evaluator token.\n  */\n  protected static class EvaluatorToken\n  {\n    public final static int TYPE_GROUP = 0;\n    public final static int TYPE_TEXT = 1;\n    public final static int TYPE_COMMA = 2;\n\n    public final static int GROUPSTYLE_NONE = 0;\n    public final static int GROUPSTYLE_LOWER = 1;\n    public final static int GROUPSTYLE_UPPER = 2;\n    public final static int GROUPSTYLE_MIXED = 3;\n\n    protected int type;\n    protected int groupNumber = -1;\n    protected int groupStyle = GROUPSTYLE_NONE;\n    protected String textValue = null;\n\n    public EvaluatorToken()\n    {\n      type = TYPE_COMMA;\n    }\n\n    public EvaluatorToken(int groupNumber, int groupStyle)\n    {\n      type = TYPE_GROUP;\n      this.groupNumber = groupNumber;\n      this.groupStyle = groupStyle;\n    }\n\n    public EvaluatorToken(String text)\n    {\n      type = TYPE_TEXT;\n      this.textValue = text;\n    }\n\n    public int getType()\n    {\n      return type;\n    }\n\n    public int getGroupNumber()\n    {\n      return groupNumber;\n    }\n\n    public int getGroupStyle()\n    {\n      return groupStyle;\n    }\n\n    public String getTextValue()\n    {\n      return textValue;\n    }\n\n  }\n\n\n  /** Token stream.\n  */\n  protected static class EvaluatorTokenStream\n  {\n    protected String text;\n    protected int pos;\n    protected EvaluatorToken token = null;\n\n    /** Constructor.\n    */\n    public EvaluatorTokenStream(String text)\n    {\n      this.text = text;\n      this.pos = 0;\n    }\n\n    /** Get current token.\n    */\n    public EvaluatorToken peek()\n      throws ManifoldCFException\n    {\n      if (token == null)\n      {\n        token = nextToken();\n      }\n      return token;\n    }\n\n    /** Go on to next token.\n    */\n    public void advance()\n    {\n      token = null;\n    }\n\n    protected EvaluatorToken nextToken()\n      throws ManifoldCFException\n    {\n      char x;\n      // Fetch the next token\n      while (true)\n      {\n        if (pos == text.length())\n          return null;\n        x = text.charAt(pos);\n        if (x > ' ')\n          break;\n        pos++;\n      }\n\n      StringBuilder sb;\n\n      if (x == '\"')\n      {\n        // Parse text\n        pos++;\n        sb = new StringBuilder();\n        while (true)\n        {\n          if (pos == text.length())\n            break;\n          x = text.charAt(pos);\n          pos++;\n          if (x == '\"')\n          {\n            break;\n          }\n          if (x == '\\\\')\n          {\n            if (pos == text.length())\n              break;\n            x = text.charAt(pos++);\n          }\n          sb.append(x);\n        }\n\n        return new EvaluatorToken(sb.toString());\n      }\n\n      if (x == ',')\n      {\n        pos++;\n        return new EvaluatorToken();\n      }\n\n      // Eat number at beginning\n      sb = new StringBuilder();\n      while (true)\n      {\n        if (pos == text.length())\n          break;\n        x = text.charAt(pos);\n        if (x >= '0' && x <= '9')\n        {\n          sb.append(x);\n          pos++;\n          continue;\n        }\n        break;\n      }\n      String numberValue = sb.toString();\n      int groupNumber = 0;\n      if (numberValue.length() > 0)\n        groupNumber = new Integer(numberValue).intValue();\n      // Save the next char position\n      int modifierPos = pos;\n      // Go to the end of the word\n      while (true)\n      {\n        if (pos == text.length())\n          break;\n        x = text.charAt(pos);\n        if (x == ',' || x >= '0' && x <= '9' || x <= ' ' && x >= 0)\n          break;\n        pos++;\n      }\n\n      int style = EvaluatorToken.GROUPSTYLE_NONE;\n      if (modifierPos != pos)\n      {\n        String modifier = text.substring(modifierPos,pos);\n        if (modifier.startsWith(\"u\"))\n          style = EvaluatorToken.GROUPSTYLE_UPPER;\n        else if (modifier.startsWith(\"l\"))\n          style = EvaluatorToken.GROUPSTYLE_LOWER;\n        else if (modifier.startsWith(\"m\"))\n          style = EvaluatorToken.GROUPSTYLE_MIXED;\n        else\n          throw new ManifoldCFException(\"Unknown style: \"+modifier);\n      }\n      return new EvaluatorToken(groupNumber,style);\n    }\n  }\n\n  /** Class representing a URL regular expression match, for the purposes of determining canonicalization policy */\n  protected static class CanonicalizationPolicy\n  {\n    protected final Pattern matchPattern;\n    protected final boolean reorder;\n    protected final boolean removeJavaSession;\n    protected final boolean removeAspSession;\n    protected final boolean removePhpSession;\n    protected final boolean removeBVSession;\n\n    public CanonicalizationPolicy(Pattern matchPattern, boolean reorder, boolean removeJavaSession, boolean removeAspSession,\n      boolean removePhpSession, boolean removeBVSession)\n    {\n      this.matchPattern = matchPattern;\n      this.reorder = reorder;\n      this.removeJavaSession = removeJavaSession;\n      this.removeAspSession = removeAspSession;\n      this.removePhpSession = removePhpSession;\n      this.removeBVSession = removeBVSession;\n    }\n\n    public boolean checkMatch(String url)\n    {\n      Matcher matcher = matchPattern.matcher(url);\n      return matcher.find();\n    }\n\n    public boolean canReorder()\n    {\n      return reorder;\n    }\n\n    public boolean canRemoveJavaSession()\n    {\n      return removeJavaSession;\n    }\n\n    public boolean canRemoveAspSession()\n    {\n      return removeAspSession;\n    }\n\n    public boolean canRemovePhpSession()\n    {\n      return removePhpSession;\n    }\n\n    public boolean canRemoveBvSession()\n    {\n      return removeBVSession;\n    }\n\n  }\n\n  /** Class representing a list of canonicalization rules */\n  protected static class CanonicalizationPolicies\n  {\n    protected final List<CanonicalizationPolicy> rules = new ArrayList<CanonicalizationPolicy>();\n\n    public CanonicalizationPolicies()\n    {\n    }\n\n    public void addRule(CanonicalizationPolicy rule)\n    {\n      rules.add(rule);\n    }\n\n    public CanonicalizationPolicy findMatch(String url)\n    {\n      int i = 0;\n      while (i < rules.size())\n      {\n        CanonicalizationPolicy rule = rules.get(i++);\n        if (rule.checkMatch(url))\n          return rule;\n      }\n      return null;\n    }\n  }\n\n  /** Class representing a mapping rule */\n  protected static class MappingRule\n  {\n    protected final Pattern matchPattern;\n    protected final String evalExpression;\n\n    public MappingRule(Pattern matchPattern, String evalExpression)\n    {\n      this.matchPattern = matchPattern;\n      this.evalExpression = evalExpression;\n    }\n\n    public boolean checkMatch(String url)\n    {\n      Matcher matcher = matchPattern.matcher(url);\n      return matcher.matches();\n    }\n\n    public String map(String url)\n      throws ManifoldCFException\n    {\n      // Create a matcher, and attempt to do a match\n      Matcher matcher = matchPattern.matcher(url);\n      if (!matcher.matches())\n      {\n        return null;\n      }\n\n      // A match!  Now, interpret the output expression\n      if (evalExpression == null || evalExpression.length() == 0)\n        return url;\n\n      StringBuilder sb = new StringBuilder();\n      EvaluatorTokenStream et = new EvaluatorTokenStream(evalExpression);\n\n      while (true)\n      {\n        EvaluatorToken t = et.peek();\n        if (t == null)\n          break;\n        switch (t.getType())\n        {\n        case EvaluatorToken.TYPE_COMMA:\n          et.advance();\n          break;\n        case EvaluatorToken.TYPE_GROUP:\n          et.advance();\n          String groupValue = matcher.group(t.getGroupNumber());\n          switch (t.getGroupStyle())\n          {\n          case EvaluatorToken.GROUPSTYLE_NONE:\n            sb.append(groupValue);\n            break;\n          case EvaluatorToken.GROUPSTYLE_LOWER:\n            sb.append(groupValue.toLowerCase());\n            break;\n          case EvaluatorToken.GROUPSTYLE_UPPER:\n            sb.append(groupValue.toUpperCase());\n            break;\n          case EvaluatorToken.GROUPSTYLE_MIXED:\n            if (groupValue.length() > 0)\n            {\n              sb.append(groupValue.substring(0,1).toUpperCase());\n              sb.append(groupValue.substring(1).toLowerCase());\n            }\n            break;\n          default:\n            throw new ManifoldCFException(\"Illegal group style\");\n          }\n          break;\n        case EvaluatorToken.TYPE_TEXT:\n          et.advance();\n          sb.append(t.getTextValue());\n          break;\n        default:\n          throw new ManifoldCFException(\"Illegal token type\");\n        }\n      }\n      return sb.toString();\n    }\n\n  }\n\n  /** Class that represents all mappings */\n  protected static class MappingRules\n  {\n    protected final List<MappingRule> mappings = new ArrayList<MappingRule>();\n\n    public MappingRules()\n    {\n    }\n\n    public void add(MappingRule rule)\n    {\n      mappings.add(rule);\n    }\n\n    public boolean isMatch(String url)\n    {\n      if (mappings.size() == 0)\n        return true;\n      for (MappingRule p : mappings)\n      {\n        if (p.checkMatch(url))\n          return true;\n      }\n      return false;\n    }\n\n    public String map(String url)\n      throws ManifoldCFException\n    {\n      if (mappings.size() == 0)\n        return url;\n      for (MappingRule p : mappings)\n      {\n        String rval = p.map(url);\n        if (rval != null)\n          return rval;\n      }\n      return null;\n    }\n  }\n\n  /** This class describes the url filtering information (for crawling and indexing) obtained from a digested DocumentSpecification.\n  */\n  protected class DocumentURLFilter\n  {\n    /** The version string */\n    protected String versionString;\n    /** Mapping rules */\n    protected final MappingRules mappings = new MappingRules();\n    /** The arraylist of include patterns */\n    protected final List<Pattern> includePatterns = new ArrayList<Pattern>();\n    /** The arraylist of exclude patterns */\n    protected final List<Pattern> excludePatterns = new ArrayList<Pattern>();\n    /** The arraylist of index include patterns */\n    protected final List<Pattern> includeIndexPatterns = new ArrayList<Pattern>();\n    /** The arraylist of index exclude patterns */\n    protected final List<Pattern> excludeIndexPatterns = new ArrayList<Pattern>();\n    /** The hash map of seed hosts, to limit urls by, if non-null */\n    protected Set<String> seedHosts = null;\n\n    /**List of content exclusion pattern*/\n    protected final List<Pattern> excludeContentIndexPatterns = new ArrayList<Pattern>();\n\n    /** Canonicalization policies */\n    protected final CanonicalizationPolicies canonicalizationPolicies = new CanonicalizationPolicies();\n\n    /** Process a document specification to produce a filter.\n    * Note that we EXPECT the regexp's in the document specification to be properly formed.\n    * This should be checked at save time to prevent errors.  Any syntax errors found here\n    * will thus cause the include or exclude regexp to be skipped.\n    */\n    public DocumentURLFilter(Specification spec)\n      throws ManifoldCFException\n    {\n      String includes = \".*\";\n      String excludes = \"\";\n      String includesIndex = \".*\";\n      String excludesIndex = \"\";\n      String excludesContentIndex = \"\";\n      String seeds = \"\";\n      List<String> packList = new ArrayList<String>();\n      String[] packStuff = new String[2];\n      boolean limitToSeeds = false;\n      int i = 0;\n      while (i < spec.getChildCount())\n      {\n        SpecificationNode sn = spec.getChild(i++);\n        if (sn.getType().equals(WebcrawlerConfig.NODE_MAP))\n        {\n          String match = sn.getAttributeValue(WebcrawlerConfig.ATTR_MATCH);\n          String map = sn.getAttributeValue(WebcrawlerConfig.ATTR_MAP);\n          if (match != null && match.length() > 0)\n          {\n            packStuff[0] = match;\n            packStuff[1] = map;\n            StringBuilder sb = new StringBuilder();\n            packList(sb,packStuff,'=');\n            packList.add(sb.toString());\n            Pattern p;\n            try\n            {\n              p = Pattern.compile(match);\n            }\n            catch (java.util.regex.PatternSyntaxException e)\n            {\n              throw new ManifoldCFException(\"Regular expression '\"+match+\"' is illegal: \"+e.getMessage(),e);\n            }\n            if (map == null)\n              map = \"\";\n            mappings.add(new MappingRule(p,map));\n          }\n        }\n        else if (sn.getType().equals(WebcrawlerConfig.NODE_SEEDS))\n        {\n          // Save the seeds aside; we'll parse them only if we need to.\n          seeds = sn.getValue();\n          if (seeds == null)\n            seeds = \"\";\n        }\n        else if (sn.getType().equals(WebcrawlerConfig.NODE_INCLUDES))\n        {\n          includes = sn.getValue();\n          if (includes == null)\n            includes = \"\";\n        }\n        else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDES))\n        {\n          excludes = sn.getValue();\n          if (excludes == null)\n            excludes = \"\";\n        }\n        else if (sn.getType().equals(WebcrawlerConfig.NODE_INCLUDESINDEX))\n        {\n          includesIndex = sn.getValue();\n          if (includesIndex == null)\n            includesIndex = \"\";\n        }\n        else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDESINDEX))\n        {\n          excludesIndex = sn.getValue();\n          if (excludesIndex == null)\n            excludesIndex = \"\";\n        }\n        else if (sn.getType().equals(WebcrawlerConfig.NODE_LIMITTOSEEDS))\n        {\n          String value = sn.getAttributeValue(WebcrawlerConfig.ATTR_VALUE);\n          if (value == null || value.equals(WebcrawlerConfig.ATTRVALUE_FALSE))\n            limitToSeeds = false;\n          else\n            limitToSeeds = true;\n        }\n        else if (sn.getType().equals(WebcrawlerConfig.NODE_URLSPEC))\n        {\n          String urlRegexp = sn.getAttributeValue(WebcrawlerConfig.ATTR_REGEXP);\n          if (urlRegexp == null)\n            urlRegexp = \"\";\n          String reorder = sn.getAttributeValue(WebcrawlerConfig.ATTR_REORDER);\n          boolean reorderValue;\n          if (reorder == null)\n            reorderValue = false;\n          else\n          {\n            reorderValue = reorder.equals(WebcrawlerConfig.ATTRVALUE_YES);\n          }\n\n          String javaSession = sn.getAttributeValue(WebcrawlerConfig.ATTR_JAVASESSIONREMOVAL);\n          boolean javaSessionValue;\n          if (javaSession == null)\n            javaSessionValue = false;\n          else\n          {\n            javaSessionValue = javaSession.equals(WebcrawlerConfig.ATTRVALUE_YES);\n          }\n\n          String aspSession = sn.getAttributeValue(WebcrawlerConfig.ATTR_ASPSESSIONREMOVAL);\n          boolean aspSessionValue;\n          if (aspSession == null)\n            aspSessionValue = false;\n          else\n          {\n            aspSessionValue = aspSession.equals(WebcrawlerConfig.ATTRVALUE_YES);\n          }\n\n          String phpSession = sn.getAttributeValue(WebcrawlerConfig.ATTR_PHPSESSIONREMOVAL);\n          boolean phpSessionValue;\n          if (phpSession == null)\n            phpSessionValue = false;\n          else\n          {\n            phpSessionValue = phpSession.equals(WebcrawlerConfig.ATTRVALUE_YES);\n          }\n\n          String bvSession = sn.getAttributeValue(WebcrawlerConfig.ATTR_BVSESSIONREMOVAL);\n          boolean bvSessionValue;\n          if (bvSession == null)\n            bvSessionValue = false;\n          else\n          {\n            bvSessionValue = bvSession.equals(WebcrawlerConfig.ATTRVALUE_YES);\n          }\n          try\n          {\n            canonicalizationPolicies.addRule(new CanonicalizationPolicy(Pattern.compile(urlRegexp),reorderValue,javaSessionValue,aspSessionValue,\n              phpSessionValue, bvSessionValue));\n          }\n          catch (java.util.regex.PatternSyntaxException e)\n          {\n            throw new ManifoldCFException(\"Canonicalization regular expression '\"+urlRegexp+\"' is illegal: \"+e.getMessage(),e);\n          }\n        }\n        else if (sn.getType().equals(WebcrawlerConfig.NODE_EXCLUDESCONTENTINDEX))\n        {\n          excludesContentIndex = sn.getValue();\n          if (excludesContentIndex == null)\n            excludesContentIndex = \"\";\n        }\n      }\n\n      // Note: format change since MCF 1.7 release\n      StringBuilder versionBuffer = new StringBuilder();\n      pack(versionBuffer,includesIndex,'+');\n      pack(versionBuffer,excludesIndex,'+');\n      pack(versionBuffer,excludesContentIndex,'+');\n      packList(versionBuffer,packList,'+');\n      versionString = versionBuffer.toString();\n      \n      List<String> list;\n      list = stringToArray(includes);\n      compileList(includePatterns,list);\n      list = stringToArray(excludes);\n      compileList(excludePatterns,list);\n      list = stringToArray(includesIndex);\n      compileList(includeIndexPatterns,list);\n      list = stringToArray(excludesIndex);\n      compileList(excludeIndexPatterns,list);\n      list = stringToArray(excludesContentIndex);\n      compileList(excludeContentIndexPatterns,list);\n\n      if (limitToSeeds)\n      {\n        seedHosts = new HashSet<String>();\n        // Parse all URLs, and put their hosts into the hash table.\n        // Break up the seeds string and iterate over the results.\n        list = stringToArray(seeds);\n        // We must only return valid urls here!!!\n        int index = 0;\n        while (index < list.size())\n        {\n          String urlCandidate = list.get(index++);\n          try\n          {\n            java.net.URI url = new java.net.URI(urlCandidate);\n\n            String host = url.getHost();\n\n            if (host != null)\n              seedHosts.add(host);\n          }\n          catch (java.net.URISyntaxException e)\n          {\n            // Skip the entry\n          }\n          catch (java.lang.IllegalArgumentException e)\n          {\n            // Skip the entry\n          }\n\n        }\n      }\n    }\n\n    /** Get whatever contribution to the version string should come from this data.\n    */\n    public String getVersionString()\n    {\n      // In practice, this is NOT what controls the set that is spidered, but rather the set that is indexed\n      return versionString;\n    }\n    \n    /** Check if both a document and host are legal.\n    */\n    public boolean isDocumentAndHostLegal(String url)\n    {\n      if (!isDocumentLegal(url))\n        return false;\n      if (seedHosts == null)\n        return true;\n      try\n      {\n        java.net.URI uri = new java.net.URI(url);\n        String host = uri.getHost();\n        if (host == null)\n          return false;\n        return isHostLegal(host);\n      }\n      catch (java.net.URISyntaxException e)\n      {\n        return false;\n      }\n      catch (java.lang.IllegalArgumentException e)\n      {\n        return false;\n      }\n\n    }\n    \n    /** Check if a host is legal.\n    */\n    public boolean isHostLegal(String host)\n    {\n      if (seedHosts == null)\n        return true;\n      return seedHosts.contains(host);\n    }\n    \n    /** Check if the document identifier is legal.\n    */\n    public boolean isDocumentLegal(String url)\n    {\n      // First, verify that the url matches one of the patterns in the include list.\n      int i = 0;\n      while (i < includePatterns.size())\n      {\n        Pattern p = includePatterns.get(i);\n        Matcher m = p.matcher(url);\n        if (m.find())\n          break;\n        i++;\n      }\n      if (i == includePatterns.size())\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Url '\"+url+\"' is illegal because no include patterns match it\");\n        return false;\n      }\n\n      // Now make sure it's not in the exclude list.\n      i = 0;\n      while (i < excludePatterns.size())\n      {\n        Pattern p = excludePatterns.get(i);\n        Matcher m = p.matcher(url);\n        if (m.find())\n        {\n          if (Logging.connectors.isDebugEnabled())\n            Logging.connectors.debug(\"WEB: Url '\"+url+\"' is illegal because exclude pattern '\"+p.toString()+\"' matched it\");\n          return false;\n        }\n        i++;\n      }\n\n      return true;\n    }\n\n    /** Check if the document identifier is indexable, and return the indexing URL if found.\n    * @return null if the url doesn't match or should not be ingested, or the new string if it does.\n    */\n    public String isDocumentIndexable(String url)\n      throws ManifoldCFException\n    {\n      // First, verify that the url matches one of the patterns in the include list.\n      int i = 0;\n      while (i < includeIndexPatterns.size())\n      {\n        Pattern p = includeIndexPatterns.get(i);\n        Matcher m = p.matcher(url);\n        if (m.find())\n          break;\n        i++;\n      }\n      if (i == includeIndexPatterns.size())\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Url '\"+url+\"' is not indexable because no include patterns match it\");\n        return null;\n      }\n\n      // Now make sure it's not in the exclude list.\n      i = 0;\n      while (i < excludeIndexPatterns.size())\n      {\n        Pattern p = excludeIndexPatterns.get(i);\n        Matcher m = p.matcher(url);\n        if (m.find())\n        {\n          if (Logging.connectors.isDebugEnabled())\n            Logging.connectors.debug(\"WEB: Url '\"+url+\"' is not indexable because exclude pattern '\"+p.toString()+\"' matched it\");\n          return null;\n        }\n        i++;\n      }\n\n      String rval = mappings.map(url);\n      if (rval == null)\n      {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: Url '\"+url+\"' is not indexable because it did not match a mapping rule\");\n      }\n\n      return rval;\n    }\n\n    /** Get canonicalization policies */\n    public CanonicalizationPolicies getCanonicalizationPolicies()\n    {\n      return canonicalizationPolicies;\n    }\n\n    public boolean isDocumentContentIndexable(String documentIdentifier) throws ManifoldCFException {\n        String content = findSpecifiedContent(documentIdentifier, excludeContentIndexPatterns);\n        if (content != null) {\n          if (Logging.connectors.isDebugEnabled())\n            Logging.connectors.debug(\"WEB: Url '\" + documentIdentifier + \"' is not indexable because content exclusion pattern was matched\");\n\n          return false;\n      }\n      return true;\n    }\n\n    protected String findSpecifiedContent(String currentURI, List<Pattern> patterns) throws ManifoldCFException\n    {\n      if (excludeContentIndexPatterns.isEmpty()) {\n        if (Logging.connectors.isDebugEnabled())\n          Logging.connectors.debug(\"WEB: no content exclusion rule supplied... returning\");\n        return null;\n      }\n\n      FindContentHandler handler = new FindContentHandler(currentURI, patterns);\n      handleHTML(currentURI, handler);\n      return handler.getTargetURI();\n    }\n\n  }\n\n  protected static class FetchStatus\n  {\n    public int sessionState = SESSIONSTATE_NORMAL;\n    public int resultSignal = RESULT_NO_DOCUMENT;\n    // The result context message, which will be used for logging and activity logging if enabled.\n    public String contextMessage = null;\n    // The result context exception, which will be used for logging if needed.\n    public Throwable contextException = null;\n    // The checksum, which will be needed if resultSignal is RESULT_VERSION_NEEDED.\n    public String checkSum = null;\n    // The headers, which will be needed if resultSignal is RESULT_VERSION_NEEDED.\n    public Map<String,List<String>> headerData = null;\n\n  }\n  \n}\n\n\n","binary":"false","copies":"4","sample_repo_name":"apache/manifoldcf","sample_ref":"refs/heads/trunk","sample_path":"connectors/webcrawler/connector/src/main/java/org/apache/manifoldcf/crawler/connectors/webcrawler/WebcrawlerConnector.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6ff40b3c3b50b5b23576782adda4ff766c7f245d","size":"4778","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* $Id$ */\n\npackage org.apache.fop.render.pdf;\n\nimport java.util.Calendar;\nimport java.util.TimeZone;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\n\nimport org.apache.xmlgraphics.xmp.Metadata;\nimport org.apache.xmlgraphics.xmp.schemas.DublinCoreAdapter;\nimport org.apache.xmlgraphics.xmp.schemas.DublinCoreSchema;\nimport org.apache.xmlgraphics.xmp.schemas.XMPBasicAdapter;\nimport org.apache.xmlgraphics.xmp.schemas.XMPBasicSchema;\nimport org.apache.xmlgraphics.xmp.schemas.pdf.AdobePDFAdapter;\nimport org.apache.xmlgraphics.xmp.schemas.pdf.AdobePDFSchema;\n\nimport org.apache.fop.pdf.PDFDocument;\nimport org.apache.fop.pdf.PDFInfo;\nimport org.apache.fop.pdf.PDFMetadata;\n\n/**\n * Test case for PDF/A metadata handling.\n */\npublic class PDFAMetadataTestCase {\n\n    @Test\n    public void testInfoUpdate() throws Exception {\n        Metadata meta = new Metadata();\n        DublinCoreAdapter dc = DublinCoreSchema.getAdapter(meta);\n        dc.setTitle(\"MyTitle\");\n        dc.setDescription(null, \"MySubject\");\n        dc.addCreator(\"That's me\");\n\n        AdobePDFAdapter pdf = AdobePDFSchema.getAdapter(meta);\n        pdf.setKeywords(\"XSL-FO XML\");\n        pdf.setProducer(\"SuperFOP\");\n\n        XMPBasicAdapter xmp = XMPBasicSchema.getAdapter(meta);\n        xmp.setCreatorTool(\"WonderFOP\");\n        Calendar cal1 = Calendar.getInstance(TimeZone.getTimeZone(\"Europe/Zurich\"));\n        cal1.set(2007, Calendar.JUNE, 5, 21, 49, 13);\n        cal1.set(Calendar.MILLISECOND, 0);\n        xmp.setCreateDate(cal1.getTime());\n        Calendar cal2 = Calendar.getInstance(TimeZone.getTimeZone(\"Europe/Zurich\"));\n        cal2.set(2007, Calendar.JUNE, 6, 8, 15, 59);\n        cal2.set(Calendar.MILLISECOND, 0);\n        xmp.setModifyDate(cal2.getTime());\n\n        PDFInfo info = new PDFInfo();\n        assertNull(info.getTitle());\n        PDFMetadata.updateInfoFromMetadata(meta, info);\n\n        assertEquals(\"MyTitle\", info.getTitle());\n        assertEquals(\"MySubject\", info.getSubject());\n        assertEquals(\"That's me\", info.getAuthor());\n        assertEquals(\"XSL-FO XML\", info.getKeywords());\n        assertEquals(\"SuperFOP\", info.getProducer());\n        assertEquals(\"WonderFOP\", info.getCreator());\n        assertEquals(cal1.getTime(), info.getCreationDate());\n        assertEquals(cal2.getTime(), info.getModDate());\n    }\n\n    @Test\n    public void testXMPUpdate() throws Exception {\n        PDFDocument doc = new PDFDocument(\"SuperFOP\");\n        PDFInfo info = doc.getInfo();\n        info.setTitle(\"MyTitle\");\n        info.setSubject(\"MySubject\");\n        info.setAuthor(\"That's me\");\n        info.setKeywords(\"XSL-FO XML\");\n        //info.setProducer(\"SuperFOP\");\n        info.setCreator(\"WonderFOP\");\n        Calendar cal1 = Calendar.getInstance(TimeZone.getTimeZone(\"Europe/Zurich\"));\n        cal1.set(2007, Calendar.JUNE, 5, 21, 49, 13);\n        cal1.set(Calendar.MILLISECOND, 0);\n        info.setCreationDate(cal1.getTime());\n        Calendar cal2 = Calendar.getInstance(TimeZone.getTimeZone(\"Europe/Zurich\"));\n        cal2.set(2007, Calendar.JUNE, 6, 8, 15, 59);\n        cal2.set(Calendar.MILLISECOND, 0);\n        info.setModDate(cal2.getTime());\n\n        Metadata meta = PDFMetadata.createXMPFromPDFDocument(doc);\n\n        DublinCoreAdapter dc = DublinCoreSchema.getAdapter(meta);\n        assertEquals(\"MyTitle\", dc.getTitle());\n        assertEquals(\"MySubject\", dc.getDescription());\n        assertEquals(1, dc.getCreators().length);\n        assertEquals(\"That's me\", dc.getCreators()[0]);\n        AdobePDFAdapter pdf = AdobePDFSchema.getAdapter(meta);\n        assertEquals(\"XSL-FO XML\", pdf.getKeywords());\n        assertEquals(\"SuperFOP\", pdf.getProducer());\n        XMPBasicAdapter xmp = XMPBasicSchema.getAdapter(meta);\n        assertEquals(\"WonderFOP\", xmp.getCreatorTool());\n        assertEquals(cal1.getTime(), xmp.getCreateDate());\n        assertEquals(cal2.getTime(), xmp.getModifyDate());\n    }\n}\n","binary":"false","copies":"4","sample_repo_name":"apache/fop","sample_ref":"refs/heads/trunk","sample_path":"fop-core/src/test/java/org/apache/fop/render/pdf/PDFAMetadataTestCase.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9d20e8d48d53ade90e6cfa0f1e4b5d739cc33c5e","size":"4948","content":"/*\n\nDerby - Class org.apache.derbyTesting.functionTests.tests.lang.Derby6587Test\n\nLicensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\npackage org.apache.derbyTesting.functionTests.tests.lang;\n\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport junit.framework.Test;\nimport org.apache.derbyTesting.junit.BaseJDBCTestCase;\nimport org.apache.derbyTesting.junit.BaseTestSuite;\nimport org.apache.derbyTesting.junit.CleanDatabaseTestSetup;\nimport org.apache.derbyTesting.junit.SupportFilesSetup;\n\n/**\n * Test case for DERBY-6131: select from view with \"upper\" and \"in\" list \n * throws a ClassCastException null value functionality.\n */\npublic class Derby6587Test extends BaseJDBCTestCase {\n\n    public Derby6587Test(String name) {\n        super(name);\n    }\n\n    public static Test suite(){\n        BaseTestSuite suite = new BaseTestSuite(\"Derby6587Test\");\n        suite.addTest(baseSuite(\"Derby6587:embedded\"));\n        return suite;\n    }\n    public static Test baseSuite(String name) {\n        BaseTestSuite suite = new BaseTestSuite(Derby6587Test.class, name);\n        Test test = new SupportFilesSetup(suite, \n            new String[] {\n                \"functionTests/testData/Derby6587/Derby6587_TABLE1_T.csv\",\n                \"functionTests/testData/Derby6587/Derby6587_TABLE2_T.csv\"});\n        return new CleanDatabaseTestSetup(test) {\n            protected void decorateSQL(Statement stmt) throws SQLException {\n                stmt.executeUpdate(\n                        \"CREATE TABLE TABLE1_T \" +\n                        \"(UUID char (16) for bit data NOT NULL,\" +\n                        \"NR integer NOT NULL,\" +\n                        \"TEXT varchar(200) NOT NULL,\" +\n                        \"CONSTRAINT IDX_1 PRIMARY KEY (UUID, NR))\");\n                stmt.executeUpdate(\n                        \"CREATE TABLE TABLE2_T \" +\n                        \"(UUID char (16) for bit data NOT NULL,\" +\n                        \"ID1 char(5) NOT NULL,\" +\n                        \"ID2 integer NOT NULL,\" +\n                        \"NR integer NOT NULL,\" +\n                        \"CONSTRAINT IDX_2 PRIMARY KEY (ID1, UUID))\");\n                stmt.executeUpdate(\n                        \"ALTER TABLE TABLE2_T \" +\n                        \"ADD CONSTRAINT FK_1 FOREIGN KEY (UUID, NR) \" +\n                        \"REFERENCES TABLE1_T (UUID, NR) \" +\n                        \"ON DELETE NO ACTION ON UPDATE NO ACTION\");\n            }\n        };\n    }\n\n    public void setUp() throws SQLException{\n        getConnection().setAutoCommit(false);\n    }\n\n    /**\n     * Test the original user report of this issue:\n     * <p>\n     * the issue can be reproduced\n     * 1. create table 1\n     * 2. create table 2\n     * 3. run bulk import on both tables\n     * <p>\n     **/\n    public void testBulkImport()\n        throws SQLException\n    {\n        getConnection();\n        try {\n            doImportFromFile( \"extin/Derby6587_TABLE1_T.csv\", \"TABLE1_T\" );\n            doImportFromFile( \"extin/Derby6587_TABLE2_T.csv\", \"TABLE2_T\" );\n        } catch (SQLException sqle) {\n            // in the failing case, we hit a XIE0R, Import failed; INSERT on\n            // TABLE2_T caused a violation of foreign key constraint FK_1...\n            fail(\"caught SQLException: \" + \n                sqle.getSQLState() + \"; \" + sqle.getMessage());\n        }\n    }\n    \n    @Override\n    protected void tearDown() throws Exception {\n        BaseJDBCTestCase.dropTable(getConnection(), \"TABLE2_T\");\n        BaseJDBCTestCase.dropTable(getConnection(), \"TABLE1_T\");\n        super.tearDown();\n    }\n    \n    // method which calls the import table, pre-filling some of the values\n    private void doImportFromFile(String fileName, String toTable) \n            throws SQLException\n   {\n       String impsql = \"call SYSCS_UTIL.SYSCS_IMPORT_TABLE (? , ? , ? , ?, ? , ?, ?)\";\n       PreparedStatement ps = prepareStatement(impsql);\n       ps.setString(1, \"APP\");\n       ps.setString(2, toTable);\n       ps.setString(3, fileName);\n       ps.setString(4 , null);\n       ps.setString(5 , null);\n       ps.setString(6 , null);\n       ps.setInt(7, 0); // assuming replace, otherwise this needs to be non-0\n       ps.execute();\n       ps.close();\n   }\n}\n","binary":"false","copies":"4","sample_repo_name":"apache/derby","sample_ref":"refs/heads/trunk","sample_path":"java/testing/org/apache/derbyTesting/functionTests/tests/lang/Derby6587Test.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1d0a6bd82e71b57f19b7e38ab5cfdd050c2d71e4","size":"21305","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.configuration2.tree;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * <p>\n * An immutable default implementation for configuration nodes.\n * </p>\n * <p>\n * This class is used for an in-memory representation of hierarchical\n * configuration data. It stores typical information like a node name, a value,\n * child nodes, or attributes.\n * </p>\n * <p>\n * After their creation, instances cannot be manipulated. There are methods for\n * updating properties, but these methods return new {@code ImmutableNode}\n * instances. Instances are created using the nested {@code Builder} class.\n * </p>\n *\n * @version $Id$\n * @since 2.0\n */\npublic final class ImmutableNode\n{\n    /** The name of this node. */\n    private final String nodeName;\n\n    /** The value of this node. */\n    private final Object value;\n\n    /** A collection with the child nodes of this node. */\n    private final List<ImmutableNode> children;\n\n    /** A map with the attributes of this node. */\n    private final Map<String, Object> attributes;\n\n    /**\n     * Creates a new instance of {@code ImmutableNode} from the given\n     * {@code Builder} object.\n     *\n     * @param b the {@code Builder}\n     */\n    private ImmutableNode(Builder b)\n    {\n        children = b.createChildren();\n        attributes = b.createAttributes();\n        nodeName = b.name;\n        value = b.value;\n    }\n\n    /**\n     * Returns the name of this node.\n     *\n     * @return the name of this node\n     */\n    public String getNodeName()\n    {\n        return nodeName;\n    }\n\n    /**\n     * Returns the value of this node.\n     *\n     * @return the value of this node\n     */\n    public Object getValue()\n    {\n        return value;\n    }\n\n    /**\n     * Returns a list with the children of this node. This list cannot be\n     * modified.\n     *\n     * @return a list with the child nodes\n     */\n    public List<ImmutableNode> getChildren()\n    {\n        return children;\n    }\n\n    /**\n     * Returns a map with the attributes of this node. This map cannot be\n     * modified.\n     *\n     * @return a map with this node's attributes\n     */\n    public Map<String, Object> getAttributes()\n    {\n        return attributes;\n    }\n\n    /**\n     * Creates a new {@code ImmutableNode} instance which is a copy of this\n     * object with the name changed to the passed in value.\n     *\n     * @param name the name of the newly created node\n     * @return the new node with the changed name\n     */\n    public ImmutableNode setName(String name)\n    {\n        return new Builder(children, attributes).name(name).value(value)\n                .create();\n    }\n\n    /**\n     * Creates a new {@code ImmutableNode} instance which is a copy of this\n     * object with the value changed to the passed in value.\n     *\n     * @param newValue the value of the newly created node\n     * @return the new node with the changed value\n     */\n    public ImmutableNode setValue(Object newValue)\n    {\n        return new Builder(children, attributes).name(nodeName).value(newValue)\n                .create();\n    }\n\n    /**\n     * Creates a new {@code ImmutableNode} instance which is a copy of this\n     * object, but has the given child node added.\n     *\n     * @param child the child node to be added (must not be <b>null</b>)\n     * @return the new node with the child node added\n     * @throws IllegalArgumentException if the child node is <b>null</b>\n     */\n    public ImmutableNode addChild(ImmutableNode child)\n    {\n        checkChildNode(child);\n        Builder builder = new Builder(children.size() + 1, attributes);\n        builder.addChildren(children).addChild(child);\n        return createWithBasicProperties(builder);\n    }\n\n    /**\n     * Returns a new {@code ImmutableNode} instance which is a copy of this\n     * object, but with the given child node removed. If the child node does not\n     * belong to this node, the same node instance is returned.\n     *\n     * @param child the child node to be removed\n     * @return the new node with the child node removed\n     */\n    public ImmutableNode removeChild(ImmutableNode child)\n    {\n        // use same size of children in case the child does not exist\n        Builder builder = new Builder(children.size(), attributes);\n        boolean foundChild = false;\n        for (ImmutableNode c : children)\n        {\n            if (c == child)\n            {\n                foundChild = true;\n            }\n            else\n            {\n                builder.addChild(c);\n            }\n        }\n\n        return foundChild ? createWithBasicProperties(builder) : this;\n    }\n\n    /**\n     * Returns a new {@code ImmutableNode} instance which is a copy of this\n     * object, but with the given child replaced by the new one. If the child to\n     * be replaced cannot be found, the same node instance is returned.\n     *\n     * @param oldChild the child node to be replaced\n     * @param newChild the replacing child node (must not be <b>null</b>)\n     * @return the new node with the child replaced\n     * @throws IllegalArgumentException if the new child node is <b>null</b>\n     */\n    public ImmutableNode replaceChild(ImmutableNode oldChild,\n            ImmutableNode newChild)\n    {\n        checkChildNode(newChild);\n        Builder builder = new Builder(children.size(), attributes);\n        boolean foundChild = false;\n        for (ImmutableNode c : children)\n        {\n            if (c == oldChild)\n            {\n                builder.addChild(newChild);\n                foundChild = true;\n            }\n            else\n            {\n                builder.addChild(c);\n            }\n        }\n\n        return foundChild ? createWithBasicProperties(builder) : this;\n    }\n\n    /**\n     * Returns a new {@code ImmutableNode} instance which is a copy of this\n     * object, but with the children replaced by the ones in the passed in\n     * collection. With this method all children can be replaced in a single\n     * step. For the collection the same rules apply as for\n     * {@link Builder#addChildren(Collection)}.\n     *\n     * @param newChildren the collection with the new children (may be\n     *        <b>null</b>)\n     * @return the new node with replaced children\n     */\n    public ImmutableNode replaceChildren(Collection<ImmutableNode> newChildren)\n    {\n        Builder builder = new Builder(null, attributes);\n        builder.addChildren(newChildren);\n        return createWithBasicProperties(builder);\n    }\n\n    /**\n     * Returns a new {@code ImmutableNode} instance which is a copy of this\n     * object, but with the specified attribute set to the given value. If an\n     * attribute with this name does not exist, it is created now. Otherwise,\n     * the new value overrides the old one.\n     *\n     * @param name the name of the attribute\n     * @param value the attribute value\n     * @return the new node with this attribute\n     */\n    public ImmutableNode setAttribute(String name, Object value)\n    {\n        Map<String, Object> newAttrs = new HashMap<String, Object>(attributes);\n        newAttrs.put(name, value);\n        return createWithNewAttributes(newAttrs);\n    }\n\n    /**\n     * Returns a new {@code ImmutableNode} instance which is a copy of this\n     * object, but with all attributes added defined by the given map. This\n     * method is analogous to {@link #setAttribute(String, Object)}, but all\n     * attributes in the given map are added. If the map is <b>null</b> or\n     * empty, this method has no effect.\n     *\n     * @param newAttributes the map with attributes to be added\n     * @return the new node with these attributes\n     */\n    public ImmutableNode setAttributes(Map<String, ?> newAttributes)\n    {\n        if (newAttributes == null || newAttributes.isEmpty())\n        {\n            return this;\n        }\n\n        Map<String, Object> newAttrs = new HashMap<String, Object>(attributes);\n        newAttrs.putAll(newAttributes);\n        return createWithNewAttributes(newAttrs);\n    }\n\n    /**\n     * Returns a new {@code ImmutableNode} instance which is a copy of this\n     * object, but with the specified attribute removed. If there is no\n     * attribute with the given name, the same node instance is returned.\n     *\n     * @param name the name of the attribute\n     * @return the new node without this attribute\n     */\n    public ImmutableNode removeAttribute(String name)\n    {\n        Map<String, Object> newAttrs = new HashMap<String, Object>(attributes);\n        if (newAttrs.remove(name) != null)\n        {\n            return createWithNewAttributes(newAttrs);\n        }\n        return this;\n    }\n\n    /**\n     * Initializes the given builder with basic properties (node name and value)\n     * and returns the newly created node. This is a helper method for updating\n     * a node when only children or attributes are affected.\n     *\n     * @param builder the already prepared builder\n     * @return the newly created node\n     */\n    private ImmutableNode createWithBasicProperties(Builder builder)\n    {\n        return builder.name(nodeName).value(value).create();\n    }\n\n    /**\n     * Creates a new {@code ImmutableNode} instance with the same properties as\n     * this object, but with the given new attributes.\n     *\n     * @param newAttrs the new attributes\n     * @return the new node instance\n     */\n    private ImmutableNode createWithNewAttributes(Map<String, Object> newAttrs)\n    {\n        return createWithBasicProperties(new Builder(children, null)\n                .addAttributes(newAttrs));\n    }\n\n    /**\n     * Checks whether the given child node is not null. This check is done at\n     * multiple places to ensure that newly added child nodes are always\n     * defined.\n     *\n     * @param child the child node to be checked\n     * @throws IllegalArgumentException if the child node is <b>null</b>\n     */\n    private static void checkChildNode(ImmutableNode child)\n    {\n        if (child == null)\n        {\n            throw new IllegalArgumentException(\"Child node must not be null!\");\n        }\n    }\n\n    /**\n     * <p>\n     * A <em>builder</em> class for creating instances of {@code ImmutableNode}.\n     * </p>\n     * <p>\n     * This class can be used to set all properties of an immutable node\n     * instance. Eventually call the {@code create()} method to obtain the\n     * resulting instance.\n     * </p>\n     * <p>\n     * Implementation note: This class is not thread-safe. It is intended to be\n     * used to define a single node instance only.\n     * </p>\n     */\n    public static final class Builder\n    {\n        /** The direct list of children of the new node. */\n        private final List<ImmutableNode> directChildren;\n\n        /** The direct map of attributes of the new node. */\n        private final Map<String, Object> directAttributes;\n\n        /**\n         * A list for the children of the new node. This list is populated by\n         * the {@code addChild()} method.\n         */\n        private List<ImmutableNode> children;\n\n        /**\n         * A map for storing the attributes of the new node. This map is\n         * populated by {@code addAttribute()}.\n         */\n        private Map<String, Object> attributes;\n\n        /** The name of the node. */\n        private String name;\n\n        /** The value of the node. */\n        private Object value;\n\n        /**\n         * Creates a new instance of {@code Builder} which does not contain any\n         * property definitions yet.\n         */\n        public Builder()\n        {\n            this(null, null);\n        }\n\n        /**\n         * Creates a new instance of {@code Builder} and sets the number of\n         * expected child nodes. Using this constructor helps the class to\n         * create a properly sized list for the child nodes to be added.\n         *\n         * @param childCount the number of child nodes\n         */\n        public Builder(int childCount)\n        {\n            this();\n            initChildrenCollection(childCount);\n        }\n\n        /**\n         * Creates a new instance of {@code Builder} and initializes the\n         * children and attributes of the new node. This constructor is used\n         * internally by the {@code ImmutableNode} class for creating instances\n         * derived from another node. The passed in collections are passed\n         * directly to the newly created instance; thus they already need to be\n         * immutable. (Background is that the creation of intermediate objects\n         * is to be avoided.)\n         *\n         * @param dirChildren the children of the new node\n         * @param dirAttrs the attributes of the new node\n         */\n        private Builder(List<ImmutableNode> dirChildren,\n                Map<String, Object> dirAttrs)\n        {\n            directChildren = dirChildren;\n            directAttributes = dirAttrs;\n        }\n\n        /**\n         * Creates a new instance of {@code Builder} and initializes the\n         * attributes of the new node and prepares the collection for the\n         * children. This constructor is used internally by methods of\n         * {@code ImmutableNode} which update the node and change the children.\n         * The new number of child nodes can be passed so that the collection\n         * for the new children can be created with an appropriate size.\n         *\n         * @param childCount the expected number of new children\n         * @param dirAttrs the attributes of the new node\n         */\n        private Builder(int childCount, Map<String, Object> dirAttrs)\n        {\n            this(null, dirAttrs);\n            initChildrenCollection(childCount);\n        }\n\n        /**\n         * Sets the name of the node to be created.\n         *\n         * @param n the node name\n         * @return a reference to this object for method chaining\n         */\n        public Builder name(String n)\n        {\n            name = n;\n            return this;\n        }\n\n        /**\n         * Sets the value of the node to be created.\n         *\n         * @param v the value\n         * @return a reference to this object for method chaining\n         */\n        public Builder value(Object v)\n        {\n            value = v;\n            return this;\n        }\n\n        /**\n         * Adds a child node to this builder. The passed in node becomes a child\n         * of the newly created node. If it is <b>null</b>, it is ignored.\n         *\n         * @param c the child node (must not be <b>null</b>)\n         * @return a reference to this object for method chaining\n         */\n        public Builder addChild(ImmutableNode c)\n        {\n            if (c != null)\n            {\n                ensureChildrenExist();\n                children.add(c);\n            }\n            return this;\n        }\n\n        /**\n         * Adds multiple child nodes to this builder. This method works like\n         * {@link #addChild(ImmutableNode)}, but it allows setting a number of\n         * child nodes at once.\n         *\n         *\n         * @param children a collection with the child nodes to be added\n         * @return a reference to this object for method chaining\n         */\n        public Builder addChildren(Collection<? extends ImmutableNode> children)\n        {\n            if (children != null)\n            {\n                ensureChildrenExist();\n                this.children.addAll(filterNull(children));\n            }\n            return this;\n        }\n\n        /**\n         * Adds an attribute to this builder. The passed in attribute key and\n         * value are stored in an internal map. If there is already an attribute\n         * with this name, it is overridden.\n         *\n         * @param name the attribute name\n         * @param value the attribute value\n         * @return a reference to this object for method chaining\n         */\n        public Builder addAttribute(String name, Object value)\n        {\n            ensureAttributesExist();\n            attributes.put(name, value);\n            return this;\n        }\n\n        /**\n         * Adds all attributes of the given map to this builder. This method\n         * works like {@link #addAttribute(String, Object)}, but it allows\n         * setting multiple attributes at once.\n         *\n         * @param attrs the map with attributes to be added (may be <b>null</b>\n         * @return a reference to this object for method chaining\n         */\n        public Builder addAttributes(Map<String, ?> attrs)\n        {\n            if (attrs != null)\n            {\n                ensureAttributesExist();\n                attributes.putAll(attrs);\n            }\n            return this;\n        }\n\n        /**\n         * Creates a new {@code ImmutableNode} instance based on the properties\n         * set for this builder.\n         *\n         * @return the newly created {@code ImmutableNode}\n         */\n        public ImmutableNode create()\n        {\n            ImmutableNode newNode = new ImmutableNode(this);\n            children = null;\n            attributes = null;\n            return newNode;\n        }\n\n        /**\n         * Creates a list with the children of the newly created node. The list\n         * returned here is always immutable. It depends on the way this builder\n         * was populated.\n         *\n         * @return the list with the children of the new node\n         */\n        List<ImmutableNode> createChildren()\n        {\n            if (directChildren != null)\n            {\n                return directChildren;\n            }\n            else\n            {\n                if (children != null)\n                {\n                    return Collections.unmodifiableList(children);\n                }\n                else\n                {\n                    return Collections.emptyList();\n                }\n            }\n        }\n\n        /**\n         * Creates a map with the attributes of the newly created node. This is\n         * an immutable map. If direct attributes were set, they are returned.\n         * Otherwise an unmodifiable map from the attributes passed to this\n         * builder is constructed.\n         *\n         * @return a map with the attributes for the new node\n         */\n        private Map<String, Object> createAttributes()\n        {\n            if (directAttributes != null)\n            {\n                return directAttributes;\n            }\n            else\n            {\n                if (attributes != null)\n                {\n                    return Collections.unmodifiableMap(attributes);\n                }\n                else\n                {\n                    return Collections.emptyMap();\n                }\n            }\n        }\n\n        /**\n         * Ensures that the collection for the child nodes exists. It is created\n         * on demand.\n         */\n        private void ensureChildrenExist()\n        {\n            if (children == null)\n            {\n                children = new LinkedList<ImmutableNode>();\n            }\n        }\n\n        /**\n         * Ensures that the map for the attributes exists. It is created on\n         * demand.\n         */\n        private void ensureAttributesExist()\n        {\n            if (attributes == null)\n            {\n                attributes = new HashMap<String, Object>();\n            }\n        }\n\n        /**\n         * Creates the collection for child nodes based on the expected number\n         * of children.\n         *\n         * @param childCount the expected number of new children\n         */\n        private void initChildrenCollection(int childCount)\n        {\n            if (childCount > 0)\n            {\n                children = new ArrayList<ImmutableNode>(childCount);\n            }\n        }\n\n        /**\n         * Filters null entries from the passed in collection with child nodes.\n         *\n         *\n         * @param children the collection to be filtered\n         * @return the collection with null entries removed\n         */\n        private static Collection<? extends ImmutableNode> filterNull(\n                Collection<? extends ImmutableNode> children)\n        {\n            List<ImmutableNode> result =\n                    new ArrayList<ImmutableNode>(children.size());\n            for (ImmutableNode c : children)\n            {\n                if (c != null)\n                {\n                    result.add(c);\n                }\n            }\n            return result;\n        }\n    }\n}\n","binary":"false","copies":"4","sample_repo_name":"apache/commons-configuration","sample_ref":"refs/heads/trunk","sample_path":"src/main/java/org/apache/commons/configuration2/tree/ImmutableNode.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"76f187ce68e91dadd216fc5ae2444500ec1c77f0","size":"2478","content":"/*******************************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *  \n *   http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *  \n *******************************************************************************/\n\npackage org.apache.wink.common.model.synd;\n\npublic abstract class SyndCommonAttributes {\n\n    private String base;\n    private String lang;\n\n    public SyndCommonAttributes() {\n    }\n\n    public SyndCommonAttributes(SyndCommonAttributes other) {\n        this.base = other.base;\n        this.lang = other.lang;\n    }\n\n    public String getBase() {\n        return base;\n    }\n\n    public void setBase(String base) {\n        this.base = base;\n    }\n\n    public String getLang() {\n        return lang;\n    }\n\n    public void setLang(String lang) {\n        this.lang = lang;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((base == null) ? 0 : base.hashCode());\n        result = prime * result + ((lang == null) ? 0 : lang.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        SyndCommonAttributes other = (SyndCommonAttributes)obj;\n        if (base == null) {\n            if (other.base != null)\n                return false;\n        } else if (!base.equals(other.base))\n            return false;\n        if (lang == null) {\n            if (other.lang != null)\n                return false;\n        } else if (!lang.equals(other.lang))\n            return false;\n        return true;\n    }\n\n}\n","binary":"false","copies":"5","sample_repo_name":"apache/wink","sample_ref":"refs/heads/trunk","sample_path":"wink-common/src/main/java/org/apache/wink/common/model/synd/SyndCommonAttributes.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d3eb1ae1476910355ce368f4bc795da1625e078b","size":"1391","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage net.jini.url.httpmd;\n\nimport java.io.IOException;\n\n/**\n * Thrown when the message digest for data retrieved from an HTTPMD URL does\n * not match the value specified in the URL.\n *\n * @author Sun Microsystems, Inc.\n * @see Handler\n * @since 2.0\n */\npublic class WrongMessageDigestException extends IOException {\n\n    private static final long serialVersionUID = -5982551285440426248L;\n\n    /**\n     * Creates an instance with the specified detail message.\n     *\n     * @param s the detail message\n     */\n    public WrongMessageDigestException(String s) {\n\tsuper(s);\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"pfirmstone/river-internet","sample_ref":"refs/heads/trunk","sample_path":"src/net/jini/url/httpmd/WrongMessageDigestException.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9adcb6215200a60a2d04b17331a46d77d67f9121","size":"15901","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.cassandra.cql3.validation.operations;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport org.apache.cassandra.cql3.CQLTester;\nimport org.apache.cassandra.cql3.UntypedResultSet;\nimport org.apache.cassandra.cql3.UntypedResultSet.Row;\nimport org.apache.cassandra.exceptions.InvalidRequestException;\n\npublic class InsertTest extends CQLTester\n{\n    @Test\n    public void testInsertWithUnset() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (k int PRIMARY KEY, s text, i int)\");\n\n        // insert using nulls\n        execute(\"INSERT INTO %s (k, s, i) VALUES (10, ?, ?)\", \"text\", 10);\n        execute(\"INSERT INTO %s (k, s, i) VALUES (10, ?, ?)\", null, null);\n        assertRows(execute(\"SELECT s, i FROM %s WHERE k = 10\"),\n                   row(null, null) // sending null deletes the data\n        );\n        // insert using UNSET\n        execute(\"INSERT INTO %s (k, s, i) VALUES (11, ?, ?)\", \"text\", 10);\n        execute(\"INSERT INTO %s (k, s, i) VALUES (11, ?, ?)\", unset(), unset());\n        assertRows(execute(\"SELECT s, i FROM %s WHERE k=11\"),\n                   row(\"text\", 10) // unset columns does not delete the existing data\n        );\n\n        assertInvalidMessage(\"Invalid unset value for column k\", \"UPDATE %s SET i = 0 WHERE k = ?\", unset());\n        assertInvalidMessage(\"Invalid unset value for column k\", \"DELETE FROM %s WHERE k = ?\", unset());\n        assertInvalidMessage(\"Invalid unset value for argument in call to function blobasint\", \"SELECT * FROM %s WHERE k = blobAsInt(?)\", unset());\n    }\n\n    @Test\n    public void testInsertTtlWithUnset() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (k int PRIMARY KEY, i int)\");\n        execute(\"INSERT INTO %s (k, i) VALUES (1, 1) USING TTL ?\", unset()); // treat as 'unlimited'\n        assertRows(execute(\"SELECT ttl(i) FROM %s\"),\n                   row(new Object[]{ null })\n        );\n    }\n\n    @Test\n    public void testInsert() throws Throwable\n    {\n        testInsert(false);\n        testInsert(true);\n    }\n\n    private void testInsert(boolean forceFlush) throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering))\");\n\n        execute(\"INSERT INTO %s (partitionKey, clustering) VALUES (0, 0)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n        flush(forceFlush);\n\n        assertRows(execute(\"SELECT * FROM %s\"),\n                   row(0, 0, null),\n                   row(0, 1, 1));\n\n        // Missing primary key columns\n        assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                             \"INSERT INTO %s (clustering, value) VALUES (0, 1)\");\n        assertInvalidMessage(\"Some clustering keys are missing: clustering\",\n                             \"INSERT INTO %s (partitionKey, value) VALUES (0, 2)\");\n\n        // multiple time the same value\n        assertInvalidMessage(\"The column names contains duplicates\",\n                             \"INSERT INTO %s (partitionKey, clustering, value, value) VALUES (0, 0, 2, 2)\");\n\n        // multiple time same primary key element in WHERE clause\n        assertInvalidMessage(\"The column names contains duplicates\",\n                             \"INSERT INTO %s (partitionKey, clustering, clustering, value) VALUES (0, 0, 0, 2)\");\n\n        // unknown identifiers\n        assertInvalidMessage(\"Undefined column name clusteringx\",\n                             \"INSERT INTO %s (partitionKey, clusteringx, value) VALUES (0, 0, 2)\");\n\n        assertInvalidMessage(\"Undefined column name valuex\",\n                             \"INSERT INTO %s (partitionKey, clustering, valuex) VALUES (0, 0, 2)\");\n    }\n\n    @Test\n    public void testInsertWithCompactFormat() throws Throwable\n    {\n        testInsertWithCompactFormat(false);\n        testInsertWithCompactFormat(true);\n    }\n\n    private void testInsertWithCompactFormat(boolean forceFlush) throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering)) WITH COMPACT STORAGE\");\n\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 0, 0)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering, value) VALUES (0, 1, 1)\");\n        flush(forceFlush);\n\n        assertRows(execute(\"SELECT * FROM %s\"),\n                   row(0, 0, 0),\n                   row(0, 1, 1));\n\n        // Invalid Null values for the clustering key or the regular column\n        assertInvalidMessage(\"Some clustering keys are missing: clustering\",\n                             \"INSERT INTO %s (partitionKey, value) VALUES (0, 0)\");\n        assertInvalidMessage(\"Column value is mandatory for this COMPACT STORAGE table\",\n                             \"INSERT INTO %s (partitionKey, clustering) VALUES (0, 0)\");\n\n        // Missing primary key columns\n        assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                             \"INSERT INTO %s (clustering, value) VALUES (0, 1)\");\n\n        // multiple time the same value\n        assertInvalidMessage(\"The column names contains duplicates\",\n                             \"INSERT INTO %s (partitionKey, clustering, value, value) VALUES (0, 0, 2, 2)\");\n\n        // multiple time same primary key element in WHERE clause\n        assertInvalidMessage(\"The column names contains duplicates\",\n                             \"INSERT INTO %s (partitionKey, clustering, clustering, value) VALUES (0, 0, 0, 2)\");\n\n        // unknown identifiers\n        assertInvalidMessage(\"Undefined column name clusteringx\",\n                             \"INSERT INTO %s (partitionKey, clusteringx, value) VALUES (0, 0, 2)\");\n\n        assertInvalidMessage(\"Undefined column name valuex\",\n                             \"INSERT INTO %s (partitionKey, clustering, valuex) VALUES (0, 0, 2)\");\n    }\n\n    @Test\n    public void testInsertWithTwoClusteringColumns() throws Throwable\n    {\n        testInsertWithTwoClusteringColumns(false);\n        testInsertWithTwoClusteringColumns(true);\n    }\n\n    private void testInsertWithTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                    \"clustering_1 int,\" +\n                    \"clustering_2 int,\" +\n                    \"value int,\" +\n                    \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\");\n\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2) VALUES (0, 0, 0)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n        flush(forceFlush);\n\n        assertRows(execute(\"SELECT * FROM %s\"),\n                   row(0, 0, 0, null),\n                   row(0, 0, 1, 1));\n\n        // Missing primary key columns\n        assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                             \"INSERT INTO %s (clustering_1, clustering_2, value) VALUES (0, 0, 1)\");\n        assertInvalidMessage(\"Some clustering keys are missing: clustering_1\",\n                             \"INSERT INTO %s (partitionKey, clustering_2, value) VALUES (0, 0, 2)\");\n\n        // multiple time the same value\n        assertInvalidMessage(\"The column names contains duplicates\",\n                             \"INSERT INTO %s (partitionKey, clustering_1, value, clustering_2, value) VALUES (0, 0, 2, 0, 2)\");\n\n        // multiple time same primary key element in WHERE clause\n        assertInvalidMessage(\"The column names contains duplicates\",\n                             \"INSERT INTO %s (partitionKey, clustering_1, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0, 2)\");\n\n        // unknown identifiers\n        assertInvalidMessage(\"Undefined column name clustering_1x\",\n                             \"INSERT INTO %s (partitionKey, clustering_1x, clustering_2, value) VALUES (0, 0, 0, 2)\");\n\n        assertInvalidMessage(\"Undefined column name valuex\",\n                             \"INSERT INTO %s (partitionKey, clustering_1, clustering_2, valuex) VALUES (0, 0, 0, 2)\");\n    }\n\n    @Test\n    public void testInsertWithCompactStorageAndTwoClusteringColumns() throws Throwable\n    {\n        testInsertWithCompactStorageAndTwoClusteringColumns(false);\n        testInsertWithCompactStorageAndTwoClusteringColumns(true);\n    }\n\n    private void testInsertWithCompactStorageAndTwoClusteringColumns(boolean forceFlush) throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                                      \"clustering_1 int,\" +\n                                      \"clustering_2 int,\" +\n                                      \"value int,\" +\n                                      \" PRIMARY KEY (partitionKey, clustering_1, clustering_2)) WITH COMPACT STORAGE\");\n\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, value) VALUES (0, 0, 0)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0)\");\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (0, 0, 1, 1)\");\n        flush(forceFlush);\n\n        assertRows(execute(\"SELECT * FROM %s\"),\n                   row(0, 0, null, 0),\n                   row(0, 0, 0, 0),\n                   row(0, 0, 1, 1));\n\n        // Invalid Null values for the clustering key or the regular column\n        assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                             \"INSERT INTO %s (partitionKey, clustering_2, value) VALUES (0, 0, 0)\");\n        assertInvalidMessage(\"Column value is mandatory for this COMPACT STORAGE table\",\n                             \"INSERT INTO %s (partitionKey, clustering_1, clustering_2) VALUES (0, 0, 0)\");\n\n        // Missing primary key columns\n        assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                             \"INSERT INTO %s (clustering_1, clustering_2, value) VALUES (0, 0, 1)\");\n        assertInvalidMessage(\"PRIMARY KEY column \\\"clustering_2\\\" cannot be restricted as preceding column \\\"clustering_1\\\" is not restricted\",\n                             \"INSERT INTO %s (partitionKey, clustering_2, value) VALUES (0, 0, 2)\");\n\n        // multiple time the same value\n        assertInvalidMessage(\"The column names contains duplicates\",\n                             \"INSERT INTO %s (partitionKey, clustering_1, value, clustering_2, value) VALUES (0, 0, 2, 0, 2)\");\n\n        // multiple time same primary key element in WHERE clause\n        assertInvalidMessage(\"The column names contains duplicates\",\n                             \"INSERT INTO %s (partitionKey, clustering_1, clustering_1, clustering_2, value) VALUES (0, 0, 0, 0, 2)\");\n\n        // unknown identifiers\n        assertInvalidMessage(\"Undefined column name clustering_1x\",\n                             \"INSERT INTO %s (partitionKey, clustering_1x, clustering_2, value) VALUES (0, 0, 0, 2)\");\n\n        assertInvalidMessage(\"Undefined column name valuex\",\n                             \"INSERT INTO %s (partitionKey, clustering_1, clustering_2, valuex) VALUES (0, 0, 0, 2)\");\n    }\n\n    @Test\n    public void testInsertWithAStaticColumn() throws Throwable\n    {\n        testInsertWithAStaticColumn(false);\n        testInsertWithAStaticColumn(true);\n    }\n\n    private void testInsertWithAStaticColumn(boolean forceFlush) throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (partitionKey int,\" +\n                    \"clustering_1 int,\" +\n                    \"clustering_2 int,\" +\n                    \"value int,\" +\n                    \"staticValue text static,\" +\n                    \" PRIMARY KEY (partitionKey, clustering_1, clustering_2))\");\n\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, staticValue) VALUES (0, 0, 0, 'A')\");\n        execute(\"INSERT INTO %s (partitionKey, staticValue) VALUES (1, 'B')\");\n        flush(forceFlush);\n\n        assertRows(execute(\"SELECT * FROM %s\"),\n                   row(1, null, null, \"B\", null),\n                   row(0, 0, 0, \"A\", null));\n\n        execute(\"INSERT INTO %s (partitionKey, clustering_1, clustering_2, value) VALUES (1, 0, 0, 0)\");\n        flush(forceFlush);\n        assertRows(execute(\"SELECT * FROM %s\"),\n                   row(1, 0, 0, \"B\", 0),\n                   row(0, 0, 0, \"A\", null));\n\n        // Missing primary key columns\n        assertInvalidMessage(\"Some partition key parts are missing: partitionkey\",\n                             \"INSERT INTO %s (clustering_1, clustering_2, staticValue) VALUES (0, 0, 'A')\");\n        assertInvalidMessage(\"Some clustering keys are missing: clustering_1\",\n                             \"INSERT INTO %s (partitionKey, clustering_2, staticValue) VALUES (0, 0, 'A')\");\n    }\n\n    @Test\n    public void testInsertWithDefaultTtl() throws Throwable\n    {\n        final int secondsPerMinute = 60;\n        createTable(\"CREATE TABLE %s (a int PRIMARY KEY, b int) WITH default_time_to_live = \" + (10 * secondsPerMinute));\n\n        execute(\"INSERT INTO %s (a, b) VALUES (1, 1)\");\n        UntypedResultSet resultSet = execute(\"SELECT ttl(b) FROM %s WHERE a = 1\");\n        Assert.assertEquals(1, resultSet.size());\n        Row row = resultSet.one();\n        Assert.assertTrue(row.getInt(\"ttl(b)\") >= (9 * secondsPerMinute));\n\n        execute(\"INSERT INTO %s (a, b) VALUES (2, 2) USING TTL ?\", (5 * secondsPerMinute));\n        resultSet = execute(\"SELECT ttl(b) FROM %s WHERE a = 2\");\n        Assert.assertEquals(1, resultSet.size());\n        row = resultSet.one();\n        Assert.assertTrue(row.getInt(\"ttl(b)\") <= (5 * secondsPerMinute));\n\n        execute(\"INSERT INTO %s (a, b) VALUES (3, 3) USING TTL ?\", 0);\n        assertRows(execute(\"SELECT ttl(b) FROM %s WHERE a = 3\"), row(new Object[]{null}));\n\n        execute(\"INSERT INTO %s (a, b) VALUES (4, 4) USING TTL ?\", unset());\n        resultSet = execute(\"SELECT ttl(b) FROM %s WHERE a = 4\");\n        Assert.assertEquals(1, resultSet.size());\n        row = resultSet.one();\n        Assert.assertTrue(row.getInt(\"ttl(b)\") >= (9 * secondsPerMinute));\n    }\n\n    @Test\n    public void testPKInsertWithValueOver64K() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (a text, b text, PRIMARY KEY (a, b))\");\n\n        assertInvalidThrow(InvalidRequestException.class,\n                           \"INSERT INTO %s (a, b) VALUES (?, 'foo')\", new String(TOO_BIG.array()));\n    }\n\n    @Test\n    public void testCKInsertWithValueOver64K() throws Throwable\n    {\n        createTable(\"CREATE TABLE %s (a text, b text, PRIMARY KEY (a, b))\");\n\n        assertInvalidThrow(InvalidRequestException.class,\n                           \"INSERT INTO %s (a, b) VALUES ('foo', ?)\", new String(TOO_BIG.array()));\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"apache/cassandra","sample_ref":"refs/heads/trunk","sample_path":"test/unit/org/apache/cassandra/cql3/validation/operations/InsertTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"da30d1d6e7ed1a98a64280339cd1af537250f33a","size":"4471","content":"/*******************************************************************************\n * * Copyright 2013 Impetus Infotech.\n *  *\n *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n *  * you may not use this file except in compliance with the License.\n *  * You may obtain a copy of the License at\n *  *\n *  *      http://www.apache.org/licenses/LICENSE-2.0\n *  *\n *  * Unless required by applicable law or agreed to in writing, software\n *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  * See the License for the specific language governing permissions and\n *  * limitations under the License.\n ******************************************************************************/\npackage com.impetus.client.cassandra.thrift;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.impetus.kundera.client.cassandra.persistence.CassandraCli;\n\n/**\n * @author Kuldeep.Mishra\n * \n */\npublic class PersonIdentityTest\n{\n\n    private EntityManagerFactory emf;\n\n    private EntityManager em;\n\n    /**\n     * @throws java.lang.Exception\n     */\n    @Before\n    public void setUp() throws Exception\n    {\n        CassandraCli.cassandraSetUp();\n        CassandraCli.createKeySpace(\"CompositeCassandra\");\n                \n        emf = Persistence.createEntityManagerFactory(\"composite_pu\");\n        em = emf.createEntityManager();\n    }\n\n    /**\n     * @throws java.lang.Exception\n     */\n    @After\n    public void tearDown() throws Exception\n    {\n        em.close();\n        emf.close();\n        CassandraCli.dropKeySpace(\"CompositeCassandra\");\n    }\n\n    @Test\n    public void test()\n    {\n        PhoneId phoneId1 = new PhoneId();\n        phoneId1.setPhoneId(\"A\");\n        PhoneId phoneId2 = new PhoneId();\n        phoneId2.setPhoneId(\"B\");\n\n        Phone phone1 = new Phone();\n        phone1.setPhoneId(phoneId1);\n        phone1.setPhoneNumber(99533533434l);\n\n        Phone phone2 = new Phone();\n        phone2.setPhoneId(phoneId2);\n        phone2.setPhoneNumber(9972723678l);\n\n        List<Phone> phones = new ArrayList<Phone>();\n        phones.add(phone1);\n        phones.add(phone2);\n\n        PersonIdentity identity = new PersonIdentity();\n        identity.setPersonId(\"1\");\n        identity.setPersonName(\"KK\");\n        identity.setPhones(phones);\n\n        em.persist(identity);\n\n        em.clear();\n        \n        em.close();\n        \n        em = emf.createEntityManager();\n\n        PersonIdentity foundPerson = em.find(PersonIdentity.class, \"1\");\n\n        Assert.assertNotNull(foundPerson);\n        Assert.assertNotNull(foundPerson.getPhones());\n        Assert.assertFalse(foundPerson.getPhones().isEmpty());\n        Assert.assertEquals(2,foundPerson.getPhones().size());\n        Assert.assertNotNull(foundPerson.getPhones().get(0));\n        Assert.assertNotNull(foundPerson.getPhones().get(1));\n        Assert.assertNotNull(foundPerson.getPhones().get(0).getPhoneId());\n        Assert.assertNotNull(foundPerson.getPhones().get(1).getPhoneId());\n\n        Assert.assertEquals(new Long(99533533434l), foundPerson.getPhones().get(0).getPhoneNumber());\n        Assert.assertEquals(new Long(9972723678l), foundPerson.getPhones().get(1).getPhoneNumber());\n\n        Assert.assertEquals(\"1\", foundPerson.getPhones().get(0).getPhoneId().getPersonId());\n        \n        List<String> phoneIds = new ArrayList<String>();\n        phoneIds.add(\"A\");\n        phoneIds.add(\"B\");\n        Assert.assertTrue(phoneIds.contains(foundPerson.getPhones().get(0).getPhoneId().getPhoneId()));\n        Assert.assertEquals(\"1\", foundPerson.getPhones().get(1).getPhoneId().getPersonId());\n        Assert.assertNotSame(foundPerson.getPhones().get(0).getPhoneId().getPhoneId(), foundPerson.getPhones().get(1).getPhoneId().getPhoneId());\n        \n        foundPerson.setPhones(null);\n        foundPerson.setPersonName(null);\n        em.merge(foundPerson);\n        \n        foundPerson = em.find(PersonIdentity.class, 1);\n\n        Assert.assertNotNull(foundPerson);\n        Assert.assertNull(foundPerson.getPhones());\n        Assert.assertNull(foundPerson.getPersonName());\n        Assert.assertEquals(\"1\",foundPerson.getPersonId());\n       \n\n    }\n\n}\n","binary":"false","copies":"5","sample_repo_name":"impetus-opensource/Kundera","sample_ref":"refs/heads/trunk","sample_path":"src/kundera-cassandra/cassandra-core/src/test/java/com/impetus/client/cassandra/thrift/PersonIdentityTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2722fbd2af640e2a3f7f0b0ed2eab9b2ca58e4c1","size":"1889","content":"/*\n\n   Derby - Class org.apache.derby.impl.sql.compile.HasTableFunctionVisitor\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to you under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\n\npackage\torg.apache.derby.impl.sql.compile;\n\nimport org.apache.derby.iapi.sql.compile.Visitable; \n\n/**\n * Find out if we have a user-defined table function anywhere in the\n * tree.  Stop traversal as soon as we find one.\n */\nclass HasTableFunctionVisitor extends HasNodeVisitor\n{\n    ///////////////////////////////////////////////////////////////////////////////////\n    //\n    // CONSTRUCTORS\n    //\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    public HasTableFunctionVisitor()\n    {\n        super( FromVTI.class );\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    //\n    // OVERRIDES\n    //\n    ///////////////////////////////////////////////////////////////////////////////////\n\n    @Override\n\tpublic Visitable visit(Visitable node)\n\t{\n\t\tif ( node instanceof FromVTI )\n\t\t{\n            FromVTI vti = (FromVTI) node;\n\n            if ( vti.isDerbyStyleTableFunction() ) { hasNode = true; }\n\t\t}\n\t\treturn node;\n\t}\n}\n\n","binary":"false","copies":"5","sample_repo_name":"apache/derby","sample_ref":"refs/heads/trunk","sample_path":"java/engine/org/apache/derby/impl/sql/compile/HasTableFunctionVisitor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d5b4ce5b8026efe0a5f7aa5d6762fca0defe1144","size":"1757","content":"/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *\n */\npackage org.apache.directory.shared.kerberos.codec.EncKdcRepPart.actions;\n\n\nimport org.apache.directory.shared.kerberos.KerberosTime;\nimport org.apache.directory.shared.kerberos.codec.EncKdcRepPart.EncKdcRepPartContainer;\nimport org.apache.directory.shared.kerberos.codec.actions.AbstractReadKerberosTime;\n\n\n/**\n * The action used to store the EncKdcRepPart end time\n *\n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\npublic class StoreEndTime extends AbstractReadKerberosTime<EncKdcRepPartContainer>\n{\n\n    /**\n     * Instantiates a new StoreEndTime action.\n     */\n    public StoreEndTime()\n    {\n        super( \"EncKdcRepPart end time\" );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void setKerberosTime( KerberosTime krbtime, EncKdcRepPartContainer encKdcRepPartContainer )\n    {\n        encKdcRepPartContainer.getEncKdcRepPart().setEndTime( krbtime );\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"apache/directory-server","sample_ref":"refs/heads/trunk","sample_path":"kerberos-codec/src/main/java/org/apache/directory/shared/kerberos/codec/EncKdcRepPart/actions/StoreEndTime.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0edae07bb2143c59f47254995e2a964e0f748fe0","size":"1444","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.jini.core.transaction;\n\n\n/**\n * Exception thrown when a transaction cannot commit because it has already\n * aborted or must now be aborted.\n *\n * @author Sun Microsystems, Inc.\n *\n * @since 1.0\n */\npublic class CannotCommitException extends TransactionException {\n    static final long serialVersionUID = -4497341152359563957L;\n\n    /**\n     * Constructs an instance with a detail message.\n     *\n     * @param desc the detail message\n     */\n    public CannotCommitException(String desc) {\n\tsuper(desc);\n    }\n\n    /** Constructs an instance with no detail message. */\n    public CannotCommitException() {\n\tsuper();\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"pfirmstone/river-internet","sample_ref":"refs/heads/trunk","sample_path":"src/net/jini/core/transaction/CannotCommitException.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b50ed9b6c92de4f5bf8e36fa81c977692a89069e","size":"12529","content":"/*\n\n   Derby - Class org.apache.derby.impl.store.access.btree.index.B2IUndo\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to you under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\n\npackage org.apache.derby.impl.store.access.btree.index;\n\nimport org.apache.derby.iapi.reference.SQLState;\n\nimport org.apache.derby.shared.common.sanity.SanityManager;\n\nimport org.apache.derby.iapi.services.io.Formatable;\nimport org.apache.derby.iapi.services.io.StoredFormatIds;\nimport org.apache.derby.iapi.error.StandardException;\n\nimport org.apache.derby.iapi.store.access.conglomerate.LogicalUndo;\nimport org.apache.derby.iapi.store.access.conglomerate.TransactionManager;\n\nimport org.apache.derby.iapi.store.access.RowUtil;\nimport org.apache.derby.iapi.store.access.DynamicCompiledOpenConglomInfo;\nimport org.apache.derby.iapi.store.access.ScanController;\n\nimport org.apache.derby.iapi.store.raw.ContainerHandle;\nimport org.apache.derby.iapi.store.raw.FetchDescriptor;\nimport org.apache.derby.iapi.store.raw.LogicalUndoable;\nimport org.apache.derby.iapi.store.raw.Page;\nimport org.apache.derby.iapi.store.raw.RecordHandle;\nimport org.apache.derby.iapi.store.raw.Transaction;\n\nimport org.apache.derby.iapi.types.DataValueDescriptor;\n\n// imports of inherited impl's\nimport org.apache.derby.impl.store.access.btree.BTree;\nimport org.apache.derby.impl.store.access.btree.BTreeLockingPolicy;\nimport org.apache.derby.impl.store.access.btree.ControlRow;\nimport org.apache.derby.impl.store.access.btree.OpenBTree;\nimport org.apache.derby.impl.store.access.btree.SearchParameters;\n\nimport java.io.ObjectInput;\nimport java.io.IOException;\nimport java.io.ObjectOutput;\nimport org.apache.derby.iapi.services.io.LimitObjectInput;\n\n/**\n * @derby.formatId ACCESS_B2IUNDO_V1_ID\n *\n * @derby.purpose   Implements the LogicalUndo and Formatable interfaces, basically\n *            providing a way for raw store recovery to \"call back\" access code\n *            to provide logical undo ability.\n *\n * @derby.upgrade   RESOLVE.\n *\n * @derby.diskLayout \n *     No state associated with this format.\n *\n **/\n\n/**\n\nThe B2IUndo interface packages up the routines which the rawstore needs\nto call to perform logical undo of a record in a B2i.  The rawstore will\ndetermine that a page has changed since the record was written, and if it\nhas it will call the findUndo() interface, to find the page where the record\nexists (as it may have moved).\n<p>\nThis class must not contain any persistent state, as this class is stored\nin the log record of the insert/delete.\n\n@see org.apache.derby.iapi.store.raw.LogicalUndoable\n@see org.apache.derby.iapi.store.raw.Undoable#generateUndo \n**/\npublic class B2IUndo implements LogicalUndo, Formatable\n{\n\t/**\n\t * Find the page and record to undo.  If no logical undo is necessary,\n\t * i.e., row has not moved, then just return the latched page where undo\n\t * should go.  If the record has moved, it has a new recordId on the new\n\t * page, this routine needs to call pageOp.resetRecord with the new\n\t * RecordHandle so that the logging system can update the compensation\n\t * Operation with the new location.\n     *\n\t * @param rawtran   the transaction doing the rollback\n\t * @param pageOp    the page operation that supports logical undo.  This\n\t * \t\t            LogicalUndo function pointer is a field of that \n     * \t\t            pageOperation\n\t * @param in        data stored in the log stream that contains the record \n     *                  data necessary to restore the row.\n     *\n     * @exception StandardException Standard Derby error policy\n\t * @exception IOException Method may read from InputStream\n     *\n\t */\n\tpublic Page findUndo(\n    Transaction         rawtran, \n    LogicalUndoable     pageOp,\n    LimitObjectInput    in)\n        throws StandardException, IOException\n    {\n        ControlRow            root                      = null;\n        ControlRow            control_row               = null;\n        DataValueDescriptor[] logged_index_row_template = null;\n        DataValueDescriptor[] template                  = null;\n        Page                  ret_page                  = null;\n        ContainerHandle       container                 = pageOp.getContainer();\n        RecordHandle          rechandle                 = pageOp.getRecordHandle();\n        boolean               ok_exit                   = false;\n        int                   compare_result            = 1;\n        B2I                   btree                     = null;\n\n        // Open the btree to associate the open contain handle, thus the \n        // current xact with all subsequent operations during undo.\n\n\n        try\n        {\n\n            // Need Conglomerate to create templates - get from the root page.\n            root = ControlRow.get(container, BTree.ROOTPAGEID);\n\n            if (SanityManager.DEBUG)\n                SanityManager.ASSERT(root.getPage().isLatched());\n\n            btree = (B2I) root.getConglom(B2I.FORMAT_NUMBER);\n\n            if (SanityManager.DEBUG)\n                SanityManager.ASSERT(btree instanceof B2I);\n\n            // create a template for the logged index row from the conglomerate.\n            logged_index_row_template = btree.createTemplate(rawtran);\n\n            // create a template for the page index row from the conglomerate.\n            template                  = btree.createTemplate(rawtran);\n        }\n        finally\n        {\n            if (root != null)\n                root.release();\n        }\n\n        // Get logged row from record.\n        pageOp.restoreLoggedRow(logged_index_row_template, in);\n\n        // RESOLVE (mikem) - currently restoreLoggedRow() may latch and unlatch\n        // a page in the container (see ST059).\n        // Now get the page where the record used to be.\n\n        ok_exit = false;\n        try\n        {\n            // \"open\" the btree, using recovery's already opened container \n            OpenBTree open_btree = new OpenBTree();\n\n            open_btree.init(\n                (TransactionManager) null,  // current user xact - not needed\n                (TransactionManager) null,  // current xact      - not needed\n                pageOp.getContainer(),      // recovery already opened container\n                rawtran, \n                false,\n                ContainerHandle.MODE_FORUPDATE, \n                                            // open_mode not used - container is\n                                            // already opened.\n                TransactionManager.MODE_NONE,\n                (BTreeLockingPolicy) null,  // don't get locks during undo\n                btree,                       \n                (LogicalUndo) null,         // no logical undo necessary, as \n                                            // this code only does read.\n                (DynamicCompiledOpenConglomInfo) null);\n\n            // System.out.println(\n              //   \"calling logical undo, recordhandle = \" + rechandle);\n            // System.out.println(\"calling logical undo, record= \" + \n              //    logged_index_row_template);\n\n            // Get the page where the record was originally, before splits\n            // could have possibly moved it.\n            control_row = ControlRow.get(open_btree, rechandle.getPageNumber());\n\n            // init compare_result, if record doesn't exist do the search \n            compare_result = 1;\n\n            if (control_row.getPage().recordExists(rechandle, true))\n            {\n\n                if (SanityManager.DEBUG)\n                {\n                    SanityManager.ASSERT(\n                        control_row.getPage().fetchNumFields(rechandle) ==\n                        logged_index_row_template.length);\n                }\n\n                // create template for the page index row from the conglomerate.\n                RecordHandle ret_rechandle = \n                    control_row.getPage().fetchFromSlot(\n                        (RecordHandle) null,\n                        control_row.getPage().getSlotNumber(rechandle),\n                        template, \n                        (FetchDescriptor) null,\n                        true);\n\n                // compare the 2 rows, and if they are the same then the raw \n                // store has the right page and record and there is no work to\n                // be done (this is usual case).\n                compare_result = ControlRow.compareIndexRowToKey(\n                    template, logged_index_row_template, \n                    logged_index_row_template.length, 1, \n                    open_btree.getColumnSortOrderInfo());\n            }\n\n            if (compare_result == 0)\n            {\n                ret_page = control_row.getPage();\n            }\n            else\n            {\n                // if the 2 don't compare equal, search the btree from the root \n                // for the logged row, find the leaf, reset the row for the raw \n                // store, and return the new page latched.\n                \n                // Create the objects needed for the insert.\n                SearchParameters sp = new SearchParameters(\n                        logged_index_row_template, ScanController.GE, \n                        template, open_btree, false);\n\n                control_row.release();\n                control_row = null;\n                control_row = \n                    ControlRow.get(open_btree, BTree.ROOTPAGEID).search(sp);\n\n                if (!sp.resultExact)\n                {\n                    if (SanityManager.DEBUG)\n                    {\n                        SanityManager.THROWASSERT(\n                            \"B2IUndo - could not find key being searched for:\" +\n                            \";key = \" + \n                                RowUtil.toString(logged_index_row_template) + \n                            \";sp = \" + sp +\n                            \"control_row = \" + control_row +\n                            \"control_row.debugPage() = \" +\n                                control_row.debugPage(open_btree) +\n                            \"control_row.getPage() = \" + \n                                control_row.getPage());\n                    }\n\n                    throw StandardException.newException(\n                            SQLState.BTREE_ROW_NOT_FOUND_DURING_UNDO);\n                }\n                else\n                {\n                    RecordHandle rh = \n                        control_row.getPage().fetchFromSlot(\n                            (RecordHandle) null,\n                            sp.resultSlot, new DataValueDescriptor[0], \n                            (FetchDescriptor) null,\n                            true);\n\n                    pageOp.resetRecordHandle(rh);\n\n                    ret_page = control_row.getPage();\n                }\n            }\n            ok_exit = true;\n        }\n        finally\n        {\n            //System.out.println(\"B2iUndo returning with rec handle: \" +  \n             //                   pageOp.getRecordHandle());\n            if ((!ok_exit) && (control_row != null))\n                control_row.release();\n        }\n\n        return(ret_page);\n    }\n\n\t/**\n\t\tReturn my format identifier.\n\n\t\t@see org.apache.derby.iapi.services.io.TypedFormat#getTypeFormatId\n\t*/\n\tpublic int getTypeFormatId() \n    {\n\t\treturn StoredFormatIds.ACCESS_B2IUNDO_V1_ID;\n\t}\n\n\t/**\n    This object has no state, so nothing to write.*/\n\n\tpublic void writeExternal(ObjectOutput out) throws IOException\n    {\n        return;\n\t}\n\n\t/**\n\tRestore the in-memory representation from the stream.\n\n    This object has no state, so nothing to restore.\n\t@exception ClassNotFoundException Thrown if the stored representation is\n\tserialized and a class named in the stream could not be found.\n\n\t@see java.io.Externalizable#readExternal\n\t*/\n\tpublic void readExternal(ObjectInput in)\n\t\tthrows IOException, ClassNotFoundException\n\t{\n        return;\n\t}\n}\n","binary":"false","copies":"5","sample_repo_name":"apache/derby","sample_ref":"refs/heads/trunk","sample_path":"java/engine/org/apache/derby/impl/store/access/btree/index/B2IUndo.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"94291a2782285cc9e2ed42dc7a4577ee2494b472","size":"5662","content":"/*******************************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *  \n *   http://www.apache.org/licenses/LICENSE-2.0\n *  \n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *  \n *******************************************************************************/\n\npackage org.apache.wink.server.internal.providers.entity;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.MultivaluedMap;\n\nimport org.apache.wink.common.internal.MultivaluedMapImpl;\nimport org.apache.wink.common.internal.providers.entity.FormMultivaluedMapProvider;\nimport org.apache.wink.server.internal.servlet.MockServletInvocationTest;\nimport org.apache.wink.test.mock.MockRequestConstructor;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.mock.web.MockHttpServletResponse;\n\npublic class FormMultivaluedMapProviderTest extends MockServletInvocationTest {\n\n    private static String FORM       = \"a=A1&a=A2&b=B+B&c=C%24C&d\";\n    private static byte[] FORM_BYTES = FORM.getBytes();\n\n    @Override\n    protected Class<?>[] getClasses() {\n        return new Class<?>[] {TestResource.class};\n    }\n\n    @Path(\"/form\")\n    public static class TestResource {\n\n        @POST\n        @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\n        @Produces(MediaType.APPLICATION_FORM_URLENCODED)\n        public MultivaluedMap<String, String> getForm(MultivaluedMap<String, String> map) {\n            // convert all parameter values to lower case and return them\n            MultivaluedMapImpl<String, String> ret = new MultivaluedMapImpl<String, String>();\n            for (String key : map.keySet()) {\n                for (String value : map.get(key)) {\n                    if (value != null) {\n                        value = value.toLowerCase();\n                    }\n                    ret.add(key, value);\n                }\n            }\n            return ret;\n        }\n    }\n\n    @SuppressWarnings(\"serial\")\n    public static class MyMap extends MultivaluedMapImpl<String, String> implements\n        MultivaluedMap<String, String> {\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void testFormMultivaluedMapProvider() throws Exception {\n        FormMultivaluedMapProvider provider = new FormMultivaluedMapProvider();\n        Type type = MyMap.class.getGenericInterfaces()[0];\n        Class<MultivaluedMap<String, String>> rawType =\n            (Class<MultivaluedMap<String, String>>)((ParameterizedType)type).getRawType();\n\n        assertTrue(provider.isReadable(rawType,\n                                       type,\n                                       null,\n                                       MediaType.APPLICATION_FORM_URLENCODED_TYPE));\n        MultivaluedMap<String, String> map =\n            provider.readFrom(rawType,\n                              type,\n                              null,\n                              MediaType.APPLICATION_FORM_URLENCODED_TYPE,\n                              null,\n                              new ByteArrayInputStream(FORM_BYTES));\n        assertNotNull(map);\n        assertEquals(4, map.size());\n        assertEquals(\"A1\", map.get(\"a\").get(0));\n        assertEquals(\"A2\", map.get(\"a\").get(1));\n        assertEquals(\"B+B\", map.getFirst(\"b\"));\n        assertEquals(\"C%24C\", map.getFirst(\"c\"));\n        assertEquals(null, map.getFirst(\"d\"));\n\n        assertTrue(provider.isWriteable(rawType,\n                                        type,\n                                        null,\n                                        MediaType.APPLICATION_FORM_URLENCODED_TYPE));\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        provider.writeTo(map,\n                         rawType,\n                         type,\n                         null,\n                         MediaType.APPLICATION_FORM_URLENCODED_TYPE,\n                         null,\n                         os);\n        String written = os.toString();\n        assertEquals(FORM, written);\n    }\n\n    public void testFormMultivaluedMapInvocation() throws Exception {\n        MockHttpServletRequest request =\n            MockRequestConstructor.constructMockRequest(\"POST\",\n                                                        \"/form\",\n                                                        MediaType.APPLICATION_FORM_URLENCODED,\n                                                        MediaType.APPLICATION_FORM_URLENCODED,\n                                                        FORM_BYTES);\n        MockHttpServletResponse response = invoke(request);\n        assertEquals(200, response.getStatus());\n        // all parameter values should be in lower case\n        assertEquals(FORM.toLowerCase(), response.getContentAsString());\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"apache/wink","sample_ref":"refs/heads/trunk","sample_path":"wink-server/src/test/java/org/apache/wink/server/internal/providers/entity/FormMultivaluedMapProviderTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3fded29d7fcb1eb52778cdf68109979db6c79497","size":"2376","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* $Id$ */\n\npackage org.apache.fop.render.ps;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.apache.xmlgraphics.image.codec.tiff.TIFFImage;\nimport org.apache.xmlgraphics.image.loader.impl.ImageRawCCITTFax;\nimport org.apache.xmlgraphics.ps.ImageEncoder;\nimport org.apache.xmlgraphics.ps.PSDictionary;\n\n/**\n * ImageEncoder implementation for CCITT encoded images.\n */\npublic class ImageEncoderCCITTFax implements ImageEncoder {\n\n    private final ImageRawCCITTFax ccitt;\n\n    /**\n     * Main constructor.\n     * @param ccitt the CCITT encoded image\n     */\n    public ImageEncoderCCITTFax(ImageRawCCITTFax ccitt) {\n        this.ccitt = ccitt;\n    }\n\n    /** {@inheritDoc} */\n    public void writeTo(OutputStream out) throws IOException {\n        ccitt.writeTo(out);\n    }\n\n    /** {@inheritDoc} */\n    public String getImplicitFilter() {\n        PSDictionary dict = new PSDictionary();\n        dict.put(\"/Columns\", new Integer(ccitt.getSize().getWidthPx()));\n        int compression = ccitt.getCompression();\n        switch (compression) {\n        case TIFFImage.COMP_FAX_G3_1D :\n            dict.put(\"/K\", new Integer(0));\n            break;\n        case TIFFImage.COMP_FAX_G3_2D :\n            dict.put(\"/K\", new Integer(1));\n            break;\n        case TIFFImage.COMP_FAX_G4_2D :\n            dict.put(\"/K\", new Integer(-1));\n            break;\n        default:\n            throw new IllegalStateException(\n                    \"Invalid compression scheme: \" + compression);\n        }\n\n        return dict.toString() + \" /CCITTFaxDecode\";\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"apache/fop","sample_ref":"refs/heads/trunk","sample_path":"fop-core/src/main/java/org/apache/fop/render/ps/ImageEncoderCCITTFax.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"74612a95d943f8795bf755ff48c7d0d86105c7e7","size":"3601","content":"/*\n *  Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n *\n */\npackage org.apache.directory.shared.kerberos.codec.asRep.actions;\n\n\nimport org.apache.directory.api.asn1.DecoderException;\nimport org.apache.directory.api.asn1.ber.Asn1Decoder;\nimport org.apache.directory.api.asn1.ber.grammar.GrammarAction;\nimport org.apache.directory.api.asn1.ber.tlv.TLV;\nimport org.apache.directory.api.i18n.I18n;\nimport org.apache.directory.shared.kerberos.KerberosMessageType;\nimport org.apache.directory.shared.kerberos.codec.asRep.AsRepContainer;\nimport org.apache.directory.shared.kerberos.codec.kdcRep.KdcRepContainer;\nimport org.apache.directory.shared.kerberos.messages.AsRep;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * The action used to add a KDC-REP object\n *\n * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n */\npublic class StoreKdcRep extends GrammarAction<AsRepContainer>\n{\n    /** The logger */\n    private static final Logger LOG = LoggerFactory.getLogger( StoreKdcRep.class );\n\n    /** Speedup for logs */\n    private static final boolean IS_DEBUG = LOG.isDebugEnabled();\n\n\n    /**\n     * Instantiates a new KDC-REP action.\n     */\n    public StoreKdcRep()\n    {\n        super( \"Add an KDC-REP instance\" );\n    }\n\n\n    /**\n     * {@inheritDoc}\n     */\n    public void action( AsRepContainer asRepContainer ) throws DecoderException\n    {\n        TLV tlv = asRepContainer.getCurrentTLV();\n\n        // The Length should not be null\n        if ( tlv.getLength() == 0 )\n        {\n            LOG.error( I18n.err( I18n.ERR_04066 ) );\n\n            // This will generate a PROTOCOL_ERROR\n            throw new DecoderException( I18n.err( I18n.ERR_04067 ) );\n        }\n\n        // Now, let's decode the KDC-REP\n        Asn1Decoder kdcRepDecoder = new Asn1Decoder();\n\n        KdcRepContainer kdcRepContainer = new KdcRepContainer( asRepContainer.getStream() );\n\n        // Store the created AS-REP object into the KDC-REP container\n        AsRep asRep = new AsRep();\n        kdcRepContainer.setKdcRep( asRep );\n\n        // Decode the KDC_REP PDU\n        try\n        {\n            kdcRepDecoder.decode( asRepContainer.getStream(), kdcRepContainer );\n        }\n        catch ( DecoderException de )\n        {\n            throw de;\n        }\n\n        // Update the expected length for the current TLV\n        tlv.setExpectedLength( tlv.getExpectedLength() - tlv.getLength() );\n\n        // Update the parent\n        asRepContainer.updateParent();\n\n        if ( asRep.getMessageType() != KerberosMessageType.AS_REP )\n        {\n            throw new DecoderException( \"Bad message type\" );\n        }\n\n        asRepContainer.setAsRep( asRep );\n\n        if ( IS_DEBUG )\n        {\n            LOG.debug( \"AS-REP : {}\", asRep );\n        }\n\n        asRepContainer.setGrammarEndAllowed( true );\n    }\n}\n","binary":"false","copies":"5","sample_repo_name":"apache/directory-server","sample_ref":"refs/heads/trunk","sample_path":"kerberos-codec/src/main/java/org/apache/directory/shared/kerberos/codec/asRep/actions/StoreKdcRep.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4aea1a941ab021b8baa6f28ec42f44030437aaa8","size":"1513","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage my.test.client;\n\nimport org.apache.cassandra.transport.Client;\n\npublic class ClientTest {\n    //\u63d0\u793a>>\u540e\uff0c\n    //\u5148\u8f93\u5165: startup lz4\n    //authenticate username=cassandra password=cassandra\n    //register status_change\n    //query SELECT schema_version FROM system.local WHERE key='local'\n    //\u6216\n    //query SELECT schema_version FROM system.local WHERE key='local' !10 \n    //\u5bf9\u4e8e\u5176\u4e2d\u7684\" !10 \"\uff0c\u611f\u53f9\u53f7\u662f\u5206\u9694\u7b26\uff0c\u540e\u9762\u662fpageSize\uff0c\u611f\u53f9\u53f7\u8ddf\u6570\u5b57\u4e4b\u95f4\u6ca1\u6709\u7a7a\u683c\n    public static void main(String[] args) {\n        try {\n            Client.main(new String[] { \"localhost\", \"9042\" });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n","binary":"false","copies":"5","sample_repo_name":"codefollower/Cassandra-Research","sample_ref":"refs/heads/trunk","sample_path":"my-test/my/test/client/ClientTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"19b57d76f17509170c98f75cf59997636af44994","size":"3487","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* $Id$ */\n\npackage org.apache.fop.traits;\n\nimport java.io.ObjectStreamException;\n\nimport org.apache.fop.fo.Constants;\n\n/** Enumeration class for rule styles. */\npublic final class RuleStyle extends TraitEnum {\n\n    private static final long serialVersionUID = 1L;\n\n    private static final String[] RULE_STYLE_NAMES = new String[]\n            {\"none\", \"dotted\", \"dashed\",\n             \"solid\", \"double\", \"groove\", \"ridge\"};\n\n    private static final int[] RULE_STYLE_VALUES = new int[]\n            {Constants.EN_NONE, Constants.EN_DOTTED, Constants.EN_DASHED,\n             Constants.EN_SOLID, Constants.EN_DOUBLE, Constants.EN_GROOVE, Constants.EN_RIDGE};\n\n    /** rule-style: none */\n    public static final RuleStyle NONE = new RuleStyle(0);\n    /** rule-style: dotted */\n    public static final RuleStyle DOTTED = new RuleStyle(1);\n    /** rule-style: dashed */\n    public static final RuleStyle DASHED = new RuleStyle(2);\n    /** rule-style: solid */\n    public static final RuleStyle SOLID = new RuleStyle(3);\n    /** rule-style: double */\n    public static final RuleStyle DOUBLE = new RuleStyle(4);\n    /** rule-style: groove */\n    public static final RuleStyle GROOVE = new RuleStyle(5);\n    /** rule-style: ridge */\n    public static final RuleStyle RIDGE = new RuleStyle(6);\n\n    private static final RuleStyle[] STYLES = new RuleStyle[] {\n        NONE, DOTTED, DASHED, SOLID, DOUBLE, GROOVE, RIDGE};\n\n    private RuleStyle(int index) {\n        super(RULE_STYLE_NAMES[index], RULE_STYLE_VALUES[index]);\n    }\n\n    /**\n     * Returns the enumeration/singleton object based on its name.\n     * @param name the name of the enumeration value\n     * @return the enumeration object\n     */\n    public static RuleStyle valueOf(String name) {\n        for (int i = 0; i < STYLES.length; i++) {\n            if (STYLES[i].getName().equalsIgnoreCase(name)) {\n                return STYLES[i];\n            }\n        }\n        throw new IllegalArgumentException(\"Illegal rule style: \" + name);\n    }\n\n    /**\n     * Returns the enumeration/singleton object based on its name.\n     * @param enumValue the enumeration value\n     * @return the enumeration object\n     */\n    public static RuleStyle valueOf(int enumValue) {\n        for (int i = 0; i < STYLES.length; i++) {\n            if (STYLES[i].getEnumValue() == enumValue) {\n                return STYLES[i];\n            }\n        }\n        throw new IllegalArgumentException(\"Illegal rule style: \" + enumValue);\n    }\n\n    private Object readResolve() throws ObjectStreamException {\n        return valueOf(getName());\n    }\n\n    /** {@inheritDoc} */\n    public String toString() {\n        return \"RuleStyle:\" + getName();\n    }\n\n}\n","binary":"false","copies":"6","sample_repo_name":"apache/fop","sample_ref":"refs/heads/trunk","sample_path":"fop-core/src/main/java/org/apache/fop/traits/RuleStyle.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"89ef93b982a5e8214b130a49f9749378b60c1f2a","size":"6511","content":"/*\n\n   Derby - Class org.apache.derby.impl.drda.CodePointNameTable\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\npackage org.apache.derby.impl.drda;\n\n/**\n  This class has a hashtable of CodePoint values.  It is used by the tracing\n  code and by the protocol testing code\n  It is arranged in alphabetical order.\n*/\n\nclass CodePointNameTable extends java.util.Hashtable<Integer, String>\n{\n  CodePointNameTable ()\n  {\n    put(CodePoint.ABNUOWRM, \"ABNUOWRM\");\n    put(CodePoint.ACCRDB, \"ACCRDB\");\n    put(CodePoint.ACCRDBRM, \"ACCRDBRM\");\n    put(CodePoint.ACCSEC, \"ACCSEC\");\n    put(CodePoint.ACCSECRD, \"ACCSECRD\");\n    put(CodePoint.AGENT, \"AGENT\");\n    put(CodePoint.AGNPRMRM, \"AGNPRMRM\");\n    put(CodePoint.BGNBND, \"BGNBND\");\n    put(CodePoint.BGNBNDRM, \"BGNBNDRM\");\n    put(CodePoint.BNDSQLSTT, \"BNDSQLSTT\");\n    put(CodePoint.CCSIDSBC, \"CCSIDSBC\");\n    put(CodePoint.CCSIDMBC, \"CCSIDMBC\");\n    put(CodePoint.CCSIDDBC, \"CCSIDDBC\");\n    put(CodePoint.CLSQRY, \"CLSQRY\");\n    put(CodePoint.CMDATHRM, \"CMDATHRM\");\n    put(CodePoint.CMDCHKRM, \"CMDCHKRM\");\n    put(CodePoint.CMDCMPRM, \"CMDCMPRM\");\n    put(CodePoint.CMDNSPRM, \"CMDNSPRM\");\n    put(CodePoint.CMMRQSRM, \"CMMRQSRM\");\n    put(CodePoint.CMDVLTRM, \"CMDVLTRM\");\n    put(CodePoint.CNTQRY, \"CNTQRY\");\n    put(CodePoint.CRRTKN, \"CRRTKN\");\n    put(CodePoint.DRPPKG, \"DRPPKG\");\n    put(CodePoint.DSCRDBTBL, \"DSCRDBTBL\");\n    put(CodePoint.DSCINVRM, \"DSCINVRM\");\n    put(CodePoint.DSCSQLSTT, \"DSCSQLSTT\");\n    put(CodePoint.DTAMCHRM, \"DTAMCHRM\");\n    put(CodePoint.ENDBND, \"ENDBND\");\n    put(CodePoint.ENDQRYRM, \"ENDQRYRM\");\n    put(CodePoint.ENDUOWRM, \"ENDUOWRM\");\n    put(CodePoint.EXCSAT, \"EXCSAT\");\n    put(CodePoint.EXCSATRD, \"EXCSATRD\");\n    put(CodePoint.EXCSQLIMM, \"EXCSQLIMM\");\n    put(CodePoint.EXCSQLSET, \"EXCSQLSET\");\n    put(CodePoint.EXCSQLSTT, \"EXCSQLSTT\");\n    put(CodePoint.EXTNAM, \"EXTNAM\");\n    put(CodePoint.FRCFIXROW, \"FRCFIXROW\");\n    put(CodePoint.MAXBLKEXT, \"MAXBLKEXT\");\n    put(CodePoint.MAXRSLCNT, \"MAXRSLCNT\");\n    put(CodePoint.MGRDEPRM, \"MGRDEPRM\");\n    put(CodePoint.MGRLVLLS, \"MGRLVLLS\");\n    put(CodePoint.MGRLVLRM, \"MGRLVLRM\");\n    put(CodePoint.MONITOR, \"MONITOR\");\n    put(CodePoint.NBRROW, \"NBRROW\");\n    put(CodePoint.OBJNSPRM, \"OBJNSPRM\");\n    put(CodePoint.OPNQFLRM, \"OPNQFLRM\");\n    put(CodePoint.OPNQRY, \"OPNQRY\");\n    put(CodePoint.OPNQRYRM, \"OPNQRYRM\");\n    put(CodePoint.OUTEXP, \"OUTEXP\");\n    put(CodePoint.OUTOVR, \"OUTOVR\");\n    put(CodePoint.OUTOVROPT, \"OUTOVROPT\");\n    put(CodePoint.PASSWORD, \"PASSWORD\");\n    put(CodePoint.PKGID, \"PKGID\");\n    put(CodePoint.PKGBNARM, \"PKGBNARM\");\n    put(CodePoint.PKGBPARM, \"PKGBPARM\");\n    put(CodePoint.PKGNAMCSN, \"PKGNAMCSN\");\n    put(CodePoint.PKGNAMCT, \"PKGNAMCT\");\n    put(CodePoint.PRCCNVRM, \"PRCCNVRM\");\n    put(CodePoint.PRDID, \"PRDID\");\n    put(CodePoint.PRDDTA, \"PRDDTA\");\n    put(CodePoint.PRMNSPRM, \"PRMNSPRM\");\n    put(CodePoint.PRPSQLSTT, \"PRPSQLSTT\");\n    put(CodePoint.QRYBLKCTL, \"QRYBLKCTL\");\n    put(CodePoint.QRYBLKRST, \"QRYBLKRST\");\n    put(CodePoint.QRYBLKSZ, \"QRYBLKSZ\");\n    put(CodePoint.QRYCLSIMP, \"QRYCLSIMP\");\n    put(CodePoint.QRYCLSRLS, \"QRYCLSRLS\");\n    put(CodePoint.QRYDSC, \"QRYDSC\");\n    put(CodePoint.QRYDTA, \"QRYDTA\");\n    put(CodePoint.QRYINSID, \"QRYINSID\");\n    put(CodePoint.QRYNOPRM, \"QRYNOPRM\");\n    put(CodePoint.QRYPOPRM, \"QRYPOPRM\");\n    put(CodePoint.QRYRELSCR, \"QRYRELSCR\");\n    put(CodePoint.QRYRFRTBL, \"QRYRFRTBL\");\n    put(CodePoint.QRYROWNBR, \"QRYROWNBR\");\n    put(CodePoint.QRYROWSNS, \"QRYROWSNS\");\n    put(CodePoint.QRYRTNDTA, \"QRYRTNDTA\");\n    put(CodePoint.QRYSCRORN, \"QRYSCRORN\");\n    put(CodePoint.QRYROWSET, \"QRYROWSET\");\n    put(CodePoint.RDBAFLRM, \"RDBAFLRM\");\n    put(CodePoint.RDBACCCL, \"RDBACCCL\");\n    put(CodePoint.RDBACCRM, \"RDBACCRM\");\n    put(CodePoint.RDBALWUPD, \"RDBALWUPD\");\n    put(CodePoint.RDBATHRM, \"RDBATHRM\");\n    put(CodePoint.RDBCMM, \"RDBCMM\");\n    put(CodePoint.RDBCMTOK, \"RDBCMTOK\");\n    put(CodePoint.RDBNACRM, \"RDBNACRM\");\n    put(CodePoint.RDBNAM, \"RDBNAM\");\n    put(CodePoint.RDBNFNRM, \"RDBNFNRM\");\n    put(CodePoint.RDBRLLBCK, \"RDBRLLBCK\");\n    put(CodePoint.RDBUPDRM, \"RDBUPDRM\");\n    put(CodePoint.REBIND, \"REBIND\");\n    put(CodePoint.RSCLMTRM, \"RSCLMTRM\");\n    put(CodePoint.RSLSETRM, \"RSLSETRM\");\n    put(CodePoint.RTNEXTDTA, \"RTNEXTDTA\");\n    put(CodePoint.RTNSQLDA, \"RTNSQLDA\");\n    put(CodePoint.SECCHK, \"SECCHK\");\n    put(CodePoint.SECCHKCD, \"SECCHKCD\");\n    put(CodePoint.SECCHKRM, \"SECCHKRM\");\n    put(CodePoint.SECMEC, \"SECMEC\");\n    put(CodePoint.SECMGRNM, \"SECMGRNM\");\n    put(CodePoint.SECTKN, \"SECTKN\");\n    put(CodePoint.SPVNAM, \"SPVNAM\");\n    put(CodePoint.SQLAM, \"SQLAM\");\n    put(CodePoint.SQLATTR, \"SQLATTR\");\n    put(CodePoint.SQLCARD, \"SQLCARD\");\n    put(CodePoint.SQLERRRM, \"SQLERRRM\");\n    put(CodePoint.SQLDARD, \"SQLDARD\");\n    put(CodePoint.SQLDTA, \"SQLDTA\");\n    put(CodePoint.SQLDTARD, \"SQLDTARD\");\n    put(CodePoint.SQLSTT, \"SQLSTT\");\n    put(CodePoint.SQLSTTVRB, \"SQLSTTVRB\");\n    put(CodePoint.SRVCLSNM, \"SRVCLSNM\");\n    put(CodePoint.SRVRLSLV, \"SRVRLSLV\");\n    put(CodePoint.SRVNAM, \"SRVNAM\");\n    put(CodePoint.SVRCOD, \"SVRCOD\");\n    put(CodePoint.SYNCCTL, \"SYNCCTL\");\n    put(CodePoint.SYNCLOG, \"SYNCLOG\");\n    put(CodePoint.SYNCRSY, \"SYNCRSY\");\n    put(CodePoint.SYNTAXRM, \"SYNTAXRM\");\n    put(CodePoint.TRGNSPRM, \"TRGNSPRM\");\n    put(CodePoint.TYPDEFNAM, \"TYPDEFNAM\");\n    put(CodePoint.TYPDEFOVR, \"TYPDEFOVR\");\n    put(CodePoint.TYPSQLDA, \"TYPSQLDA\");\n    put(CodePoint.UOWDSP, \"UOWDSP\");\n    put(CodePoint.USRID, \"USRID\");\n    put(CodePoint.VALNSPRM, \"VALNSPRM\");\n    put(CodePoint.PBSD, \"PBSD\");\n    put(CodePoint.PBSD_ISO, \"PBSD_ISO\");\n    put(CodePoint.PBSD_SCHEMA, \"PBSD_SCHEMA\");\n    put(CodePoint.UNICODEMGR, \"UNICODEMGR\");\n  }\n\n  String lookup (int codePoint)\n  {\n    return get(codePoint);\n  }\n\n}\n","binary":"false","copies":"6","sample_repo_name":"apache/derby","sample_ref":"refs/heads/trunk","sample_path":"java/drda/org/apache/derby/impl/drda/CodePointNameTable.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a7042518dcceb0c9c17e2c0d5bd8220e28e552fb","size":"2091","content":"/*\n\n   Derby - Class org.apache.derbyTesting.unitTests.services.D_T_DiagTestClass1\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\n\npackage org.apache.derbyTesting.unitTests.services;\n\nimport org.apache.derby.iapi.error.StandardException;\nimport org.apache.derby.iapi.services.diag.DiagnosticableGeneric;\n\n/**\n\nA diagnostic class for the T_DiagTestClass1 class.  This class is used for\nunit testing by T_Diagnosticable.\n\n**/\n\npublic class D_T_DiagTestClass1 extends DiagnosticableGeneric\n{\n    /* Constructors for This class: */\n    /* Private/Protected methods of This class: */\n    /* Public Methods of This class: */\n\n    /* Public Methods of Diagnosticable interface: */\n\n    /**\n     * Default implementation of diagnostic on the object.\n     * <p>\n     * This routine returns a string with whatever diagnostic information\n     * you would like to provide about this object.\n     * <p>\n     * This routine should be overriden by a real implementation of the\n     * diagnostic information you would like to provide.\n     * <p>\n     *\n\t * @return A string with diagnostic information about the object.\n     *\n     *\n\t * @exception  StandardException  Standard exception policy.\n     **/\n    public String diag()\n        throws StandardException\n    {\n        return(\"D_T_DiagTestClass1: \" + ((T_DiagTestClass1) diag_object).state);\n    }\n}\n","binary":"false","copies":"8","sample_repo_name":"apache/derby","sample_ref":"refs/heads/trunk","sample_path":"java/testing/org/apache/derbyTesting/unitTests/services/D_T_DiagTestClass1.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7855932937da6c8df60adaee3219f469838511c2","size":"7269","content":"/*\n\n   Derby - Class org.apache.derbyTesting.functionTests.tests.store.checkPoint\n\n   Licensed to the Apache Software Foundation (ASF) under one or more\n   contributor license agreements.  See the NOTICE file distributed with\n   this work for additional information regarding copyright ownership.\n   The ASF licenses this file to You under the Apache License, Version 2.0\n   (the \"License\"); you may not use this file except in compliance with\n   the License.  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n */\n\npackage org.apache.derbyTesting.functionTests.tests.store;\nimport java.io.File;\nimport java.io.ByteArrayInputStream;\n\nimport java.math.BigDecimal;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.Statement;\nimport org.apache.derby.tools.ij;\nimport org.apache.derby.tools.JDBCDisplayUtil;\n\n/**\n * Test to make sure checkpoint or occuring as expected.\n * Check is done by looking at the timestamp for \"log.ctrl\" file,\n * If modified time is more than what it was in the last lookup\n * means , we know that checkpoint occured.\n * Other thing that is counted is in this program is number of log switches.\n */\n\npublic class checkPoint\n{\n \n    public static void main( String args[])\n    {\n\t\tSystem.out.println(\"Test checkpoint starting\");\n\t\t\n        try\n        {\n\t\t\t// use the ij utility to read the property file and\n\t\t\t// make the initial connection.\n\t\t\tij.getPropertyArg(args);\n\t\t\tConnection conn = ij.startJBMS();\n\n\t\t\t//open all the internal derby files involved in this test.\n\t\t\tsetupAllTestFiles();\n\n            Statement stmt = conn.createStatement();\n\t\t\tstmt.executeUpdate(\"CREATE PROCEDURE WAIT_FOR_POST_COMMIT() DYNAMIC RESULT SETS 0 LANGUAGE JAVA EXTERNAL NAME 'org.apache.derbyTesting.functionTests.util.T_Access.waitForPostCommitToFinish' PARAMETER STYLE JAVA\");\n\n            stmt.executeUpdate( \"create table t1(\" + \n\t\t\t\t\t\t\t\t\"c1 int not null primary key , c2 varchar(200) not null unique , c3 char(200) not null unique)\");\n            conn.setAutoCommit(true);\n\t\t\tString  ins_string = \"insert into t1 values(?,?,?)\";\n\t\t\tPreparedStatement insStmt = conn.prepareStatement(ins_string);\n\t\t\t//wait to make sure that checkpoint thread finished it's work\n\t\t\tstmt.executeUpdate(\"CALL SYSCS_UTIL.SYSCS_CHECKPOINT_DATABASE()\");\n\t\t\tstmt.executeUpdate(\"call WAIT_FOR_POST_COMMIT()\");\n\t\t\tcheckpointOccured();\n\t\t\tboolean modifiedIntervals = false;\n\t\t\tfor(int uniqueid =0 ; uniqueid < 3500 ; uniqueid++)\n\t\t\t{\n\t\t\t\tinsStmt.setLong(1, uniqueid);\n\t\t\t\tinsStmt.setString(2, \"IBM GREAT COMPANY \" + uniqueid);\n\t\t\t\tinsStmt.setString(3, \"IBM GREAT COMPANY \" + uniqueid);\n\t\t\t\tinsStmt.executeUpdate();\n\t\t\t\t\n\t\t\t\t//check every 300 rows inserted  how many log files\n\t\t\t\t//are there and whether a  checkpoint occured\n\t\t\t\tif((uniqueid % 400) == 0)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"Checking logs and Checkpoint at Insert:\"\n\t\t\t\t\t\t\t\t\t   + uniqueid);\n\t\t\t\t\t//wait to make sure that checkpoint thread finished it's work\n\t\t\t\t\tstmt.executeUpdate(\"call WAIT_FOR_POST_COMMIT()\");\n\t\t\t\t\tcheckpointOccured();\n\t\t\t\t}\n\n\t\t\t\t//change the checkpointInterval and LogInterval to equal values\n\t\t\t\tif(uniqueid > 2500 && !modifiedIntervals)\n\t\t\t\t{\n\t\t\t\t\tResultSet rs;\n\t\t\t\t\tSystem.out.println(\"Modifying the checkpoint/log intervals\");\n\t\t\t\t\t//modify the values.\n\t\t\t\t\tString value = \"150001\";\n\t\t\t\t\tstmt.executeUpdate(\"call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY\" +\n\t\t\t\t\t\t\t\t\t   \"('derby.storage.logSwitchInterval', \" +\n\t\t\t\t\t\t\t\t\t   \"'\" + value + \"'\"+ \")\");\n\t\t\t\t\tstmt.executeUpdate(\"call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY\" +\n\t\t\t\t\t\t\t\t\t   \"('derby.storage.checkpointInterval', \" +\n\t\t\t\t\t\t\t\t\t   \"'\" + value + \"'\" + \")\");\n\t\t\t\t\trs\t= \n\t\t\t\t\t\tstmt.executeQuery(\"values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY\" +\n\t\t\t\t\t\t\t\t\t\t  \"('derby.storage.checkpointInterval')\");\n\t\t\t\t\twhile(rs.next()){\n\t\t\t\t\t\tSystem.out.println(\"checkPointInterval:\" + rs.getString(1));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\trs =stmt.executeQuery(\"values SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY\" +\n\t\t\t\t\t\t\t\t\t\t  \"('derby.storage.logSwitchInterval')\");\n\t\t\t\t\twhile(rs.next()){\n\t\t\t\t\t\tSystem.out.println(\"logSwitchInterval:\" + rs.getString(1));\n\t\t\t\t\t}\n\n\t\t\t\t\tmodifiedIntervals = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//print the number of the last log file\n\t\t\t//to make sure we are creating too many log files.\n\t\t\tnumberOfLogFiles();\n\t\t\tconn.commit();\n\t\t\tstmt.close();\n            insStmt.close();\n            conn.close();\n        }\n        catch( SQLException e)\n        {\n\t\t\tdumpSQLExceptions(e);\n\t\t} catch (Throwable e) {\n\t\t\tSystem.out.println(\"FAIL -- unexpected exception:\" + e.toString());\n\t\t}\n\n\t\t//shutdown the database ..\n\t\ttry{\n\t\t\t//shutdown \n\t\t\tConnection conn = DriverManager.getConnection(\"jdbc:derby:wombat;shutdown=true\");\n\t\t}catch(SQLException se){\n\t\t\t\tif (se.getSQLState() != null && se.getSQLState().equals(\"08006\"))\n\t\t\t\t\tSystem.out.println(\"database shutdown properly\\n\");\n\t\t\t\telse\n\t\t\t\t\tdumpSQLExceptions(se);\n\t\t} catch (Throwable e) {\n\t\t\tSystem.out.println(\"FAIL -- unexpected exception:\" + e.toString());\n\t\t}\n\n\t\tSystem.out.println(\"Test checkpoint finished\");\n    }\n\n\t\n\tstatic private void dumpSQLExceptions (SQLException se) {\n\t\tSystem.out.println(\"FAIL -- unexpected exception: \" + se.toString());\n\t\twhile (se != null) {\n\t\t\tSystem.out.print(\"SQLSTATE(\"+se.getSQLState()+\"):\");\n\t\t\tse = se.getNextException();\n\t\t}\n\t}\n\n\n\n\t//utility routines to trach number of log files\n\t//and checkpoints.\n\tprivate static String derbyHome;\n\tprivate static File dbDir ;\n\tprivate static File logDir;\n\tprivate static File logControlFile;\n\tprivate static long lastCheckPointTime = 0;\n\n\tprivate static void setupAllTestFiles()\n\t{\n\t\tderbyHome = System.getProperty(\"derby.system.home\");\n\t\tdbDir = new File(derbyHome, \"wombat\");\n\t\tlogDir = new File(dbDir , \"log\");\n\t\tlogControlFile = new File(logDir , \"log.ctrl\");\n\t\tlastCheckPointTime = logControlFile.lastModified();\n\t}\n\n\tprivate static boolean checkpointOccured()\n\t{\n\t\tlong currentModifiedTime = logControlFile.lastModified();\n\t\tif(currentModifiedTime > lastCheckPointTime)\n\t\t{\n\t\t\tlastCheckPointTime = currentModifiedTime ;\n\t\t\tSystem.out.println(\"CHECKPOINT WAS DONE\");\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\n\n\tprivate static int numberOfLogFiles()\n\t{\n\t\t//find out how many log files are in logDir\n\t\t//-2 (control files log.ctrl, logmirror.ctrl)\n\t\tFile[] logFiles = logDir.listFiles();\n\t\tint noFiles = (logFiles == null) ? 0 : logFiles.length;\n\t\tString lastLogFile =\"\";\n\t\tfor(int i = 0 ; i < noFiles ; i++)\n\t\t{\n\t\t\tString current = logFiles[i].getName() ;\n\t\t\tif(current.compareTo(\"log.ctrl\")==0 || current.compareTo(\"logmirror.ctrl\")==0)\n\t\t\t\tcontinue;\n\t\t\tif(current.compareTo(lastLogFile) > 0)\n\t\t\t\tlastLogFile = current;\n\t\t}\n\n\t\tif(lastLogFile.compareTo(\"log21.dat\") > 0)\n\t\t{\n\t\t\tSystem.out.println(\"There seems to be too many log files\");\n\t\t\tSystem.out.println(lastLogFile);\n\t\t}\n\t\tlogFiles = null;\n\t\treturn noFiles -2 ;\n\n\n\t}\n    \n}        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","binary":"false","copies":"8","sample_repo_name":"apache/derby","sample_ref":"refs/heads/trunk","sample_path":"java/testing/org/apache/derbyTesting/functionTests/tests/store/checkPoint.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8957c79f28d6205de49e3c0ca51350fac39fa0e0","size":"4691","content":"package org.apache.maven.plugins.help;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport org.apache.commons.lang3.time.DateFormatUtils;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.codehaus.plexus.util.StringUtils;\nimport org.codehaus.plexus.util.cli.CommandLineUtils;\n\nimport java.io.IOException;\nimport java.util.Properties;\n\n/**\n * Displays a list of the platform details like system properties and environment variables.\n *\n * @author <a href=\"mailto:vincent.siveton@gmail.com\">Vincent Siveton</a>\n * @version $Id$\n * @since 2.1\n */\n@Mojo( name = \"system\", requiresProject = false )\npublic class SystemMojo\n    extends AbstractHelpMojo\n{\n    /** Magic number to beautify the output */\n    private static final int REPEAT = 25;\n\n    // ----------------------------------------------------------------------\n    // Public methods\n    // ----------------------------------------------------------------------\n\n    /** {@inheritDoc} */\n    public void execute()\n        throws MojoExecutionException\n    {\n        StringBuilder message = new StringBuilder();\n\n        message.append( '\\n' );\n        message.append( StringUtils.repeat( \"=\", LINE_LENGTH ) ).append( '\\n' );\n        message.append( StringUtils.repeat( \"=\", REPEAT ) );\n        message.append( \" Platform Properties Details \" );\n        message.append( StringUtils.repeat( \"=\", REPEAT ) ).append( '\\n' );\n        message.append( StringUtils.repeat( \"=\", LINE_LENGTH ) ).append( '\\n' );\n        message.append( '\\n' );\n\n        message.append( StringUtils.repeat( \"=\", LINE_LENGTH ) ).append( '\\n' );\n        message.append( \"System Properties\" ).append( '\\n' );\n        message.append( StringUtils.repeat( \"=\", LINE_LENGTH ) ).append( '\\n' );\n\n        Properties systemProperties = System.getProperties();\n        for ( Object o1 : systemProperties.keySet() )\n        {\n            String key = o1.toString();\n            message.append( \"\\n\" );\n            message.append( key ).append( \"=\" ).append( systemProperties.get( key ) );\n        }\n\n        message.append( '\\n' ).append( '\\n' );\n        message.append( StringUtils.repeat( \"=\", LINE_LENGTH ) ).append( '\\n' );\n        message.append( \"Environment Variables\" ).append( '\\n' );\n        message.append( StringUtils.repeat( \"=\", LINE_LENGTH ) ).append( '\\n' );\n        try\n        {\n            Properties envVars = CommandLineUtils.getSystemEnvVars();\n            for ( Object o : envVars.keySet() )\n            {\n                String key = o.toString();\n                message.append( \"\\n\" );\n                message.append( key ).append( \"=\" ).append( envVars.get( key ) );\n            }\n        }\n        catch ( IOException e )\n        {\n            if ( getLog().isWarnEnabled() )\n            {\n                getLog().warn( \"IOException: \" + e.getMessage() );\n            }\n        }\n\n        message.append( \"\\n\" );\n\n        if ( output != null )\n        {\n            String formattedDateTime = DateFormatUtils.ISO_DATETIME_FORMAT.format( System.currentTimeMillis() );\n            StringBuilder sb = new StringBuilder();\n            sb.append( \"Created by: \" ).append( getClass().getName() ).append( \"\\n\" );\n            sb.append( \"Created on: \" ).append( formattedDateTime ).append( \"\\n\" ).append( \"\\n\" );\n            sb.append( message.toString() );\n\n            try\n            {\n                writeFile( output, sb );\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Cannot write system report to output: \" + output, e );\n            }\n\n            if ( getLog().isInfoEnabled() )\n            {\n                getLog().info( \"System report written to: \" + output );\n            }\n        }\n        else\n        {\n            if ( getLog().isInfoEnabled() )\n            {\n                getLog().info( message );\n            }\n        }\n    }\n}\n","binary":"false","copies":"9","sample_repo_name":"apache/maven-plugins","sample_ref":"refs/heads/trunk","sample_path":"maven-help-plugin/src/main/java/org/apache/maven/plugins/help/SystemMojo.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ca75b57dbb0669fdb105a87f83e22e44ab4198fe","size":"1723","content":"/*\n* Licensed to the Apache Software Foundation (ASF) under one or more\n* contributor license agreements.  The ASF licenses this file to You\n* under the Apache License, Version 2.0 (the \"License\"); you may not\n* use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\npackage org.apache.jackrabbit.webdav.client.methods;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.apache.jackrabbit.webdav.DavMethods;\nimport org.apache.jackrabbit.webdav.DavServletResponse;\nimport org.apache.jackrabbit.webdav.observation.ObservationConstants;\n\n/**\n * <code>UnSubscribeMethod</code>...\n */\npublic class UnSubscribeMethod extends DavMethodBase {\n\n    private static Logger log = LoggerFactory.getLogger(UnSubscribeMethod.class);\n\n    public UnSubscribeMethod(String uri, String subscriptionId) {\n        super(uri);\n        setRequestHeader(ObservationConstants.HEADER_SUBSCRIPTIONID, subscriptionId);\n    }\n\n    //---------------------------------------------------------< HttpMethod >---\n    @Override\n    public String getName() {\n        return DavMethods.METHOD_UNSUBSCRIBE;\n    }\n\n    //------------------------------------------------------< DavMethodBase >---\n    @Override\n    protected boolean isSuccess(int statusCode) {\n        return DavServletResponse.SC_NO_CONTENT == statusCode;\n    }\n}\n","binary":"false","copies":"11","sample_repo_name":"apache/jackrabbit","sample_ref":"refs/heads/trunk","sample_path":"jackrabbit-webdav/src/main/java/org/apache/jackrabbit/webdav/client/methods/UnSubscribeMethod.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b79e8932d022383b1f1d59ddf98108cc51c55e9d","size":"12844","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.core.security.authorization;\n\nimport org.apache.jackrabbit.api.JackrabbitWorkspace;\nimport org.apache.jackrabbit.api.security.authorization.PrivilegeManagerTest;\nimport org.apache.jackrabbit.core.SessionImpl;\nimport org.apache.jackrabbit.spi.commons.conversion.IllegalNameException;\nimport org.apache.jackrabbit.spi.commons.name.NameConstants;\nimport org.apache.jackrabbit.test.NotExecutableException;\n\nimport javax.jcr.AccessDeniedException;\nimport javax.jcr.NamespaceException;\nimport javax.jcr.RepositoryException;\nimport javax.jcr.Session;\nimport javax.jcr.security.AccessControlException;\nimport javax.jcr.security.Privilege;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\n/**\n * <code>PrivilegeManagerTest</code>...\n */\npublic class PrivilegeManagerImplTest extends PrivilegeManagerTest {\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        if (!(privilegeMgr instanceof PrivilegeManagerImpl)) {\n            throw new NotExecutableException(\"PrivilegeManagerImpl expected\");\n        }\n    }\n\n    private PrivilegeManagerImpl getPrivilegeManagerImpl() {\n        return (PrivilegeManagerImpl) privilegeMgr;\n    }\n\n    private Privilege[] privilegesFromNames(String[] privNames)\n            throws RepositoryException {\n        Privilege[] privs = new Privilege[privNames.length];\n        for (int i = 0; i < privNames.length; i++) {\n            privs[i] = privilegeMgr.getPrivilege(privNames[i]);\n        }\n        return privs;\n    }\n    \n    private void assertPrivilege(Privilege priv, String name, boolean isAggregate, boolean isAbstract) throws NamespaceException, IllegalNameException {\n        assertNotNull(priv);\n        assertPrivilegeName(name, priv.getName());\n        assertEquals(isAggregate, priv.isAggregate());\n        assertEquals(isAbstract, priv.isAbstract());\n    }\n\n    private void assertPrivilegeName(String name, String name2) throws NamespaceException, IllegalNameException {\n        if (!((SessionImpl) superuser).getQName(name).equals(((SessionImpl) superuser).getQName(name2))) {\n            fail();\n        }\n    }\n    \n    public void testGetRegisteredPrivileges() throws RepositoryException {\n        Privilege[] registered = privilegeMgr.getRegisteredPrivileges();\n        Set<Privilege> set = new HashSet<Privilege>();\n        Privilege all = privilegeMgr.getPrivilege(Privilege.JCR_ALL);\n        set.add(all);\n        set.addAll(Arrays.asList(all.getAggregatePrivileges()));\n\n        for (Privilege p : registered) {\n            assertTrue(set.remove(p));\n        }\n        assertTrue(set.isEmpty());\n    }\n    \n    public void testGetPrivilege() throws RepositoryException {\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_READ), Privilege.JCR_READ, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_ADD_CHILD_NODES), Privilege.JCR_ADD_CHILD_NODES, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_REMOVE_CHILD_NODES), Privilege.JCR_REMOVE_CHILD_NODES, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_MODIFY_PROPERTIES), Privilege.JCR_MODIFY_PROPERTIES, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_REMOVE_NODE), Privilege.JCR_REMOVE_NODE, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_READ_ACCESS_CONTROL), Privilege.JCR_READ_ACCESS_CONTROL, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_MODIFY_ACCESS_CONTROL), Privilege.JCR_MODIFY_ACCESS_CONTROL, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_LIFECYCLE_MANAGEMENT), Privilege.JCR_LIFECYCLE_MANAGEMENT, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_LOCK_MANAGEMENT), Privilege.JCR_LOCK_MANAGEMENT, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_NODE_TYPE_MANAGEMENT), Privilege.JCR_NODE_TYPE_MANAGEMENT, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_RETENTION_MANAGEMENT), Privilege.JCR_RETENTION_MANAGEMENT, false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_VERSION_MANAGEMENT), Privilege.JCR_VERSION_MANAGEMENT, false, false);\n\n        // repo-level operation privileges\n        assertPrivilege(privilegeMgr.getPrivilege(NameConstants.JCR_NAMESPACE_MANAGEMENT.toString()), NameConstants.JCR_NAMESPACE_MANAGEMENT.toString() , false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(NameConstants.JCR_NODE_TYPE_DEFINITION_MANAGEMENT.toString()), NameConstants.JCR_NODE_TYPE_DEFINITION_MANAGEMENT.toString(), false, false);\n        assertPrivilege(privilegeMgr.getPrivilege(NameConstants.JCR_WORKSPACE_MANAGEMENT.toString()), NameConstants.JCR_WORKSPACE_MANAGEMENT.toString(), false, false);\n\n        // aggregates\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_ALL), Privilege.JCR_ALL, true, false);\n        assertPrivilege(privilegeMgr.getPrivilege(Privilege.JCR_WRITE), Privilege.JCR_WRITE, true, false);\n        assertPrivilege(privilegeMgr.getPrivilege(PrivilegeRegistry.REP_WRITE), PrivilegeRegistry.REP_WRITE, true, false);\n    }\n\n    public void testGetBits() throws RepositoryException {\n        Privilege p1 = privilegeMgr.getPrivilege(Privilege.JCR_ADD_CHILD_NODES);\n        Privilege p2 = privilegeMgr.getPrivilege(Privilege.JCR_REMOVE_CHILD_NODES);\n        Privilege[] privs = new Privilege[] {p1, p2};\n\n        PrivilegeBits bits = getPrivilegeManagerImpl().getBits(privs);\n        assertFalse(bits.isEmpty());\n        PrivilegeBits other = PrivilegeBits.getInstance(getPrivilegeManagerImpl().getBits(p1));\n        other.add(getPrivilegeManagerImpl().getBits(p2));\n        assertEquals(bits, other);\n    }\n\n    public void testGetBitsFromCustomPrivilege() throws AccessControlException {\n        Privilege p = buildCustomPrivilege(Privilege.JCR_READ, null);\n        try {\n            getPrivilegeManagerImpl().getBits(p);\n            fail(\"Retrieving bits from unknown privilege should fail.\");\n        } catch (AccessControlException e) {\n            // ok\n        }\n    }\n\n    public void testGetBitsFromCustomAggregatePrivilege() throws RepositoryException {\n        Privilege p = buildCustomPrivilege(\"anyName\", privilegeMgr.getPrivilege(Privilege.JCR_WRITE));\n        try {\n            getPrivilegeManagerImpl().getBits(p);\n            fail(\"Retrieving bits from unknown privilege should fail.\");\n        } catch (AccessControlException e) {\n            // ok\n        }\n    }\n\n    public void testGetBitsFromNull() {\n        try {\n            getPrivilegeManagerImpl().getBits((Privilege) null);\n            fail(\"Should throw AccessControlException\");\n        } catch (AccessControlException e) {\n            // ok\n        }\n\n        try {\n            getPrivilegeManagerImpl().getBits((Privilege[]) null);\n            fail(\"Should throw AccessControlException\");\n        } catch (AccessControlException e) {\n            // ok\n        }\n    }\n\n    public void testGetBitsFromEmptyArray() throws AccessControlException {\n        try {\n            getPrivilegeManagerImpl().getBits(new Privilege[0]);\n            fail(\"Should throw AccessControlException\");\n        } catch (AccessControlException e) {\n            // ok\n        }\n    }\n\n    public void testGetBitsFromArrayContainingNull() throws RepositoryException {\n        try {\n            getPrivilegeManagerImpl().getBits(privilegeMgr.getPrivilege(Privilege.JCR_READ), null);\n            fail(\"Should throw AccessControlException\");\n        } catch (AccessControlException e) {\n            // ok\n        }\n    }\n\n    public void testGetBitsWithInvalidPrivilege() {\n        Privilege p = buildCustomPrivilege(\"anyName\", null);\n        try {\n            getPrivilegeManagerImpl().getBits(p);\n            fail();\n        } catch (AccessControlException e) {\n            // ok\n        }\n    }\n\n    public void testGetPrivilegesFromBits() throws RepositoryException {\n        Set<Privilege> pvs = getPrivilegeManagerImpl().getPrivileges(getPrivilegeManagerImpl().getBits(privilegesFromNames(new String[] {Privilege.JCR_READ_ACCESS_CONTROL})));\n\n        assertTrue(pvs != null);\n        assertTrue(pvs.size() == 1);\n        assertSamePrivilegeName(pvs.iterator().next().getName(), Privilege.JCR_READ_ACCESS_CONTROL);\n    }\n\n    public void testGetPrivilegesFromBits2() throws RepositoryException {\n        String[] names = new String[] {\n                Privilege.JCR_ADD_CHILD_NODES,\n                Privilege.JCR_REMOVE_CHILD_NODES,\n                Privilege.JCR_REMOVE_NODE,\n                Privilege.JCR_MODIFY_PROPERTIES\n        };\n        PrivilegeBits writeBits = getPrivilegeManagerImpl().getBits(privilegesFromNames(names));\n        Set<Privilege> pvs = getPrivilegeManagerImpl().getPrivileges(writeBits);\n\n        assertTrue(pvs != null);\n        assertTrue(pvs.size() == 1);\n        Privilege p = pvs.iterator().next();\n        assertSamePrivilegeName(p.getName(), Privilege.JCR_WRITE);\n        assertTrue(p.isAggregate());\n        assertTrue(p.getDeclaredAggregatePrivileges().length == names.length);\n    }\n\n    public void testGetPrivilegesFromBits3() throws RepositoryException {\n        String[] names = new String[] {\n                PrivilegeRegistry.REP_WRITE\n        };\n        PrivilegeBits writeBits = getPrivilegeManagerImpl().getBits(privilegesFromNames(names));\n        Set<Privilege> pvs = getPrivilegeManagerImpl().getPrivileges(writeBits);\n\n        assertTrue(pvs != null);\n        assertTrue(pvs.size() == 1);\n        Privilege p = pvs.iterator().next();\n        assertSamePrivilegeName(p.getName(), PrivilegeRegistry.REP_WRITE);\n        assertTrue(p.isAggregate());\n\n        names = new String[] {\n                PrivilegeRegistry.REP_WRITE,\n                Privilege.JCR_WRITE\n        };\n        writeBits = getPrivilegeManagerImpl().getBits(privilegesFromNames(names));\n        pvs = getPrivilegeManagerImpl().getPrivileges(writeBits);\n\n        assertTrue(pvs != null);\n        assertTrue(pvs.size() == 1);\n        p = pvs.iterator().next();\n        assertSamePrivilegeName(p.getName(), PrivilegeRegistry.REP_WRITE);\n        assertTrue(p.isAggregate());\n        assertTrue(p.getDeclaredAggregatePrivileges().length == names.length);\n    }\n\n    public void testGetPrivilegesFromBits4() throws RepositoryException {\n        String[] names = new String[] {\n                PrivilegeRegistry.REP_WRITE,\n                Privilege.JCR_LIFECYCLE_MANAGEMENT\n        };\n        PrivilegeBits writeBits = getPrivilegeManagerImpl().getBits(privilegesFromNames(names));\n        Set<Privilege> pvs = getPrivilegeManagerImpl().getPrivileges(writeBits);\n\n        assertTrue(pvs != null);\n        assertTrue(pvs.size() == 2);\n    }\n\n    public void testRegisterPrivilegeAsNonAdmin() throws RepositoryException {\n        Session s = getHelper().getReadOnlySession();\n        try {\n            ((JackrabbitWorkspace) s.getWorkspace()).getPrivilegeManager().registerPrivilege(\"test\", true, new String[0]);\n            fail(\"Only admin is allowed to register privileges.\");\n        } catch (AccessDeniedException e) {\n            // success\n        } finally {\n            s.logout();\n        }\n    }\n\n    private Privilege buildCustomPrivilege(final String name, final Privilege declaredAggr) {\n        return new Privilege() {\n\n            public String getName() {\n                return name;\n            }\n            public boolean isAbstract() {\n                return false;\n            }\n            public boolean isAggregate() {\n                return declaredAggr != null;\n            }\n            public Privilege[] getDeclaredAggregatePrivileges() {\n                return (declaredAggr ==  null) ? new Privilege[0] : new Privilege[] {declaredAggr};\n            }\n            public Privilege[] getAggregatePrivileges() {\n                return (declaredAggr ==  null) ? new Privilege[0] : declaredAggr.getAggregatePrivileges();\n            }\n        };\n    }\n}\n","binary":"false","copies":"11","sample_repo_name":"apache/jackrabbit","sample_ref":"refs/heads/trunk","sample_path":"jackrabbit-core/src/test/java/org/apache/jackrabbit/core/security/authorization/PrivilegeManagerImplTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4b173ac84aca94f9a88882826af50b7fc9008c50","size":"1781","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.core.data;\n\nimport javax.jcr.RepositoryException;\n\n/**\n * Exception thrown by the Data Store module.\n */\npublic class DataStoreException extends RepositoryException {\n\n    /**\n     * Constructs a new instance of this class with the specified detail\n     * message.\n     *\n     * @param message the detailed message.\n     */\n    public DataStoreException(String message) {\n        super(message);\n    }\n\n    /**\n     * Constructs a new instance of this class with the specified detail\n     * message and root cause.\n     *\n     * @param message the detailed message.\n     * @param cause root failure cause\n     */\n    public DataStoreException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    /**\n     * Constructs a new instance of this class with the specified root cause.\n     *\n     * @param rootCause root failure cause\n     */\n    public DataStoreException(Throwable rootCause) {\n        super(rootCause);\n    }\n\n}\n","binary":"false","copies":"11","sample_repo_name":"apache/jackrabbit","sample_ref":"refs/heads/trunk","sample_path":"jackrabbit-data/src/main/java/org/apache/jackrabbit/core/data/DataStoreException.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"30e27019d549a87931fb2efe02b512c6b1f90754","size":"3677","content":"/*******************************************************************************\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n ******************************************************************************/\npackage org.apache.sling.scripting.sightly.impl.html.dom;\n\nimport org.apache.sling.scripting.sightly.impl.html.dom.template.Template;\nimport org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateAttribute;\nimport org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateCommentNode;\nimport org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateElementNode;\nimport org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateNode;\nimport org.apache.sling.scripting.sightly.impl.html.dom.template.TemplateTextNode;\n\npublic class TreeTraverser {\n\n    private final MarkupHandler handler;\n\n    public TreeTraverser(MarkupHandler handler) {\n        this.handler = handler;\n    }\n\n    public void traverse(Template template) {\n        traverseNode(template);\n        this.handler.onDocumentFinished();\n    }\n\n    private void traverseNode(TemplateNode node) {\n        if (node instanceof TemplateElementNode) {\n            traverseElement((TemplateElementNode) node);\n        } else if (node instanceof TemplateTextNode) {\n            traverseText((TemplateTextNode) node);\n        } else if (node instanceof TemplateCommentNode) {\n            traverseComment((TemplateCommentNode) node);\n        } else {\n            throw new IllegalArgumentException(\"Unknown node type\");\n        }\n    }\n\n    private void traverseElement(TemplateElementNode elem) {\n        if (\"ROOT\".equalsIgnoreCase(elem.getName())) {\n            traverseChildren(elem);\n            return;\n        }\n        String tagName = elem.getName();\n\n        if (elem.isHasStartElement()) {\n            handler.onOpenTagStart(\"<\" + tagName, tagName);\n            for (TemplateAttribute attribute : elem.getAttributes()) {\n                handler.onAttribute(attribute.getName(), attribute.getValue(), attribute.getQuoteChar());\n            }\n            if (elem.isHasEndSlash()) {\n                handler.onOpenTagEnd(\"/>\");\n            } else {\n                handler.onOpenTagEnd(\">\");\n            }\n        } else {\n            handler.onOpenTagStart(\"\", tagName);\n            handler.onOpenTagEnd(\"\");\n        }\n\n        traverseChildren(elem);\n\n        if (elem.isHasEndElement()) {\n            handler.onCloseTag(\"</\" + elem.getName() + \">\");\n        } else {\n            handler.onCloseTag(\"\");\n        }\n    }\n\n    private void traverseText(TemplateTextNode textNode) {\n        handler.onText(textNode.getText());\n    }\n\n    private void traverseComment(TemplateCommentNode comment) {\n        handler.onComment(comment.getText());\n    }\n\n    private void traverseChildren(TemplateElementNode elem) {\n        for (TemplateNode node : elem.getChildren()) {\n            traverseNode(node);\n        }\n    }\n\n}\n","binary":"false","copies":"11","sample_repo_name":"apache/sling","sample_ref":"refs/heads/trunk","sample_path":"bundles/scripting/sightly/compiler/src/main/java/org/apache/sling/scripting/sightly/impl/html/dom/TreeTraverser.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"965be41ec0439c12f90a3f3a62e2b853dca40c52","size":"2199","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.core.integration;\n\nimport org.apache.jackrabbit.core.query.AbstractQueryTest;\n\nimport javax.jcr.RepositoryException;\nimport javax.jcr.Node;\nimport javax.jcr.query.QueryManager;\nimport javax.jcr.query.Query;\nimport javax.jcr.query.QueryResult;\n\n/**\n * Tests if a wildcard query with a lot of results does not throw an error.\n */\npublic class MassiveWildcardTest extends AbstractQueryTest {\n\n    /**\n     * Executes a wildcard query covering 2'000 different property values.\n     */\n    public void testWildcardQuery() throws RepositoryException {\n        int count = 0;\n        for (int i = 0; i < 20; i++) {\n            Node child = testRootNode.addNode(\"node\" + i);\n            for (int j = 0; j < 100; j++) {\n                Node n = child.addNode(\"node\" + j);\n                n.setProperty(\"foo\", \"\" + count + \"foo\");\n                n.setProperty(\"bar\", \"bar\" + count++);\n            }\n            // save every 100 nodes\n            testRootNode.save();\n        }\n\n        QueryManager qm = superuser.getWorkspace().getQueryManager();\n        String stmt = testPath + \"//*[jcr:contains(., '*foo')]\";\n        QueryResult res = qm.createQuery(stmt, Query.XPATH).execute();\n        checkResult(res, 2000);\n\n        stmt = testPath + \"//*[jcr:contains(., 'bar*')]\";\n        res = qm.createQuery(stmt, Query.XPATH).execute();\n        checkResult(res, 2000);\n    }\n}\n","binary":"false","copies":"11","sample_repo_name":"apache/jackrabbit","sample_ref":"refs/heads/trunk","sample_path":"jackrabbit-core/src/test/java/org/apache/jackrabbit/core/integration/MassiveWildcardTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"aba84eabecf5087027d45c435d1fb4ceeb14bde2","size":"2301","content":"package org.apache.cassandra.concurrent;\n/*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n */\n\n\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\nimport org.junit.Test;\n\nimport org.apache.cassandra.utils.WrappedRunnable;\n\npublic class DebuggableThreadPoolExecutorTest\n{\n    @Test\n    public void testSerialization() throws InterruptedException\n    {\n        LinkedBlockingQueue<Runnable> q = new LinkedBlockingQueue<Runnable>(1);\n        DebuggableThreadPoolExecutor executor = new DebuggableThreadPoolExecutor(1,\n                                                                                 Integer.MAX_VALUE,\n                                                                                 TimeUnit.MILLISECONDS,\n                                                                                 q,\n                                                                                 new NamedThreadFactory(\"TEST\"));\n        WrappedRunnable runnable = new WrappedRunnable()\n        {\n            public void runMayThrow() throws InterruptedException\n            {\n                Thread.sleep(50);\n            }\n        };\n        long start = System.nanoTime();\n        for (int i = 0; i < 10; i++)\n        {\n            executor.execute(runnable);\n        }\n        assert q.size() > 0 : q.size();\n        while (executor.getCompletedTaskCount() < 10)\n            continue;\n        long delta = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);\n        assert delta >= 9 * 50 : delta;\n    }\n}\n","binary":"false","copies":"13","sample_repo_name":"Stratio/cassandra","sample_ref":"refs/heads/trunk","sample_path":"test/unit/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutorTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"05da6c745a1fd263d38bd6ca4c23febd01d06043","size":"11575","content":"/*****************************************************************************\n * \n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n * \n ****************************************************************************/\n\npackage org.apache.pdfbox.preflight;\n\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport org.apache.pdfbox.preflight.action.ActionManagerFactory;\nimport org.apache.pdfbox.preflight.annotation.AnnotationValidatorFactory;\nimport org.apache.pdfbox.preflight.annotation.pdfa.PDFAbAnnotationFactory;\nimport org.apache.pdfbox.preflight.exception.MissingValidationProcessException;\nimport org.apache.pdfbox.preflight.exception.ValidationException;\nimport org.apache.pdfbox.preflight.graphic.ColorSpaceHelperFactory;\nimport org.apache.pdfbox.preflight.process.AcroFormValidationProcess;\nimport org.apache.pdfbox.preflight.process.BookmarkValidationProcess;\nimport org.apache.pdfbox.preflight.process.CatalogValidationProcess;\nimport org.apache.pdfbox.preflight.process.EmptyValidationProcess;\nimport org.apache.pdfbox.preflight.process.FileSpecificationValidationProcess;\nimport org.apache.pdfbox.preflight.process.MetadataValidationProcess;\nimport org.apache.pdfbox.preflight.process.PageTreeValidationProcess;\nimport org.apache.pdfbox.preflight.process.StreamValidationProcess;\nimport org.apache.pdfbox.preflight.process.TrailerValidationProcess;\nimport org.apache.pdfbox.preflight.process.ValidationProcess;\nimport org.apache.pdfbox.preflight.process.XRefValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.ActionsValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.AnnotationValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.DestinationValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.ExtGStateValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.FontValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.GraphicObjectPageValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.ResourcesValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.ShadingPatternValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.SinglePageValidationProcess;\nimport org.apache.pdfbox.preflight.process.reflect.TilingPatternValidationProcess;\n\npublic class PreflightConfiguration\n{\n\n    // TODO documentation\n    public static final String CATALOG_PROCESS = \"catalog-process\";\n    public static final String STREAM_PROCESS = \"stream-process\";\n    public static final String TRAILER_PROCESS = \"trailer-process\";\n    public static final String XREF_PROCESS = \"xref-process\";\n    public static final String BOOKMARK_PROCESS = \"bookmark-process\";\n    public static final String ACRO_FORM_PROCESS = \"acro-form-process\"; // MayBe rename in Interactive Object validation\n    public static final String FILE_SPECIF_PROCESS = \"file-specification-process\";\n    public static final String PAGES_TREE_PROCESS = \"pages-tree-process\";\n\n    public static final String META_DATA_PROCESS = \"metadata-process\";\n\n    public static final String PAGE_PROCESS = \"page-process\";\n    public static final String RESOURCES_PROCESS = \"resources-process\";\n    public static final String ACTIONS_PROCESS = \"actions-process\";\n    public static final String ANNOTATIONS_PROCESS = \"annotations-process\";\n    public static final String GRAPHIC_PROCESS = \"graphic-process\";\n    public static final String FONT_PROCESS = \"font-process\";\n    public static final String EXTGSTATE_PROCESS = \"extgstate-process\";\n    public static final String SHADING_PATTERN_PROCESS = \"shadding-pattern-process\";\n    public static final String TILING_PATTERN_PROCESS = \"tiling-pattern-process\";\n    public static final String DESTINATION_PROCESS = \"destination-process\";\n\n    /*\n     * TODO other configuration option should be possible : - skip some validation process ? - ???\n     */\n\n    /**\n     * Boolean to know if an exception must be thrown if a ValidationProcess is missing.\n     */\n    private boolean errorOnMissingProcess = true;\n\n    /**\n     * Boolean to know mark some error as a Warning, if the validation result contains only warning the validation is\n     * successful\n     */\n    private boolean lazyValidation = false;\n\n    private final Map<String, Class<? extends ValidationProcess>> processes = new LinkedHashMap<String, Class<? extends ValidationProcess>>();\n    // TODO use annotation to mark these validation processes as inner page validation and factorize the access method\n    private final Map<String, Class<? extends ValidationProcess>> innerProcesses = new LinkedHashMap<String, Class<? extends ValidationProcess>>();\n\n    /**\n     * Define the AnnotationFactory used by ValidationProcess\n     */\n    private AnnotationValidatorFactory annotFact;\n\n    /**\n     * Define the ActionManagerFactory used by ValidationProcess\n     */\n    private ActionManagerFactory actionFact;\n\n    /**\n     * Define the ColorSpaceHelperFactory used by the validationProcess.\n     */\n    private ColorSpaceHelperFactory colorSpaceHelperFact;\n\n    public static PreflightConfiguration createPdfA1BConfiguration()\n    {\n        PreflightConfiguration configuration = new PreflightConfiguration();\n\n        configuration.replaceProcess(CATALOG_PROCESS, CatalogValidationProcess.class);\n        configuration.replaceProcess(FILE_SPECIF_PROCESS, FileSpecificationValidationProcess.class);\n        configuration.replaceProcess(TRAILER_PROCESS, TrailerValidationProcess.class);\n        configuration.replaceProcess(XREF_PROCESS, XRefValidationProcess.class);\n        configuration.replaceProcess(ACRO_FORM_PROCESS, AcroFormValidationProcess.class);\n        configuration.replaceProcess(BOOKMARK_PROCESS, BookmarkValidationProcess.class);\n        configuration.replaceProcess(PAGES_TREE_PROCESS, PageTreeValidationProcess.class);\n        configuration.replaceProcess(META_DATA_PROCESS, MetadataValidationProcess.class);\n\n        configuration.replaceProcess(STREAM_PROCESS, StreamValidationProcess.class);\n\n        configuration.replacePageProcess(PAGE_PROCESS, SinglePageValidationProcess.class);\n        configuration.replacePageProcess(EXTGSTATE_PROCESS, ExtGStateValidationProcess.class);\n        configuration.replacePageProcess(SHADING_PATTERN_PROCESS, ShadingPatternValidationProcess.class);\n        configuration.replacePageProcess(GRAPHIC_PROCESS, GraphicObjectPageValidationProcess.class);\n        configuration.replacePageProcess(TILING_PATTERN_PROCESS, TilingPatternValidationProcess.class);\n        configuration.replacePageProcess(RESOURCES_PROCESS, ResourcesValidationProcess.class);\n        configuration.replacePageProcess(FONT_PROCESS, FontValidationProcess.class);\n        configuration.replacePageProcess(ACTIONS_PROCESS, ActionsValidationProcess.class);\n        configuration.replacePageProcess(ANNOTATIONS_PROCESS, AnnotationValidationProcess.class);\n        configuration.replacePageProcess(DESTINATION_PROCESS, DestinationValidationProcess.class);\n\n        configuration.actionFact = new ActionManagerFactory();\n        configuration.annotFact = new PDFAbAnnotationFactory();\n        configuration.colorSpaceHelperFact = new ColorSpaceHelperFactory();\n        return configuration;\n    }\n\n    public Collection<String> getProcessNames()\n    {\n        return this.processes.keySet();\n    }\n\n    /**\n     * Return the validation process linked with the given name\n     *\n     * @param processName\n     * @return an instance of validationProcess, null if it doesn't exist and if\n     * the errorOnMissingProcess is false.\n     * @throws MissingValidationProcessException if the Process doesn't exist\n     * (errorOnMissingProcess is true).\n     * @throws ValidationException if the process instance can't be created.\n     */\n    public ValidationProcess getInstanceOfProcess(String processName) throws ValidationException\n    {\n        Class<? extends ValidationProcess> clazz = null;\n        if (processes.containsKey(processName))\n        {\n            clazz = processes.get(processName);\n        }\n        else if (innerProcesses.containsKey(processName))\n        {\n            clazz = innerProcesses.get(processName);\n        }\n        else if (errorOnMissingProcess)\n        {\n            throw new MissingValidationProcessException(processName);\n        }\n        else\n        {\n            return new EmptyValidationProcess();\n        }\n\n        try\n        {\n            return clazz.newInstance();\n        }\n        catch (InstantiationException e)\n        {\n            throw new ValidationException(processName + \" can't be created\", e);\n        }\n        catch (IllegalAccessException e)\n        {\n            throw new ValidationException(processName + \" can't be created\", e);\n        }\n    }\n\n    public void replaceProcess(String processName, Class<? extends ValidationProcess> process)\n    {\n        if (process == null) \n        {\n            removeProcess(processName);\n        }\n        else \n        {\n            this.processes.put(processName, process);\n        }\n    }\n\n    public void removeProcess(String processName)\n    {\n        this.processes.remove(processName);\n    }\n    \n    public Collection<String> getPageValidationProcessNames()\n    {\n        return this.innerProcesses.keySet();\n    }\n\n    public void replacePageProcess(String processName, Class<? extends ValidationProcess> process)\n    {\n        if (process == null)\n        {\n            removePageProcess(processName);    \n        }\n        else\n        {\n            this.innerProcesses.put(processName, process);\n        }\n    }\n\n    public void removePageProcess(String processName)\n    {\n        this.innerProcesses.remove(processName);\n    }\n    \n    public boolean isErrorOnMissingProcess()\n    {\n        return errorOnMissingProcess;\n    }\n\n    public void setErrorOnMissingProcess(boolean errorOnMissingProcess)\n    {\n        this.errorOnMissingProcess = errorOnMissingProcess;\n    }\n\n    public boolean isLazyValidation()\n    {\n        return lazyValidation;\n    }\n\n    public void setLazyValidation(boolean lazyValidation)\n    {\n        this.lazyValidation = lazyValidation;\n    }\n\n    public AnnotationValidatorFactory getAnnotFact()\n    {\n        return annotFact;\n    }\n\n    public void setAnnotFact(AnnotationValidatorFactory annotFact)\n    {\n        this.annotFact = annotFact;\n    }\n\n    public ActionManagerFactory getActionFact()\n    {\n        return actionFact;\n    }\n\n    public void setActionFact(ActionManagerFactory actionFact)\n    {\n        this.actionFact = actionFact;\n    }\n\n    public ColorSpaceHelperFactory getColorSpaceHelperFact()\n    {\n        return colorSpaceHelperFact;\n    }\n\n    public void setColorSpaceHelperFact(ColorSpaceHelperFactory colorSpaceHelperFact)\n    {\n        this.colorSpaceHelperFact = colorSpaceHelperFact;\n    }\n\n}\n","binary":"false","copies":"13","sample_repo_name":"apache/pdfbox","sample_ref":"refs/heads/trunk","sample_path":"preflight/src/main/java/org/apache/pdfbox/preflight/PreflightConfiguration.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5ab9cf4f24ec6f3c73b4a4a01933bf650f9f2e16","size":"1193","content":"/**\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the \"License\"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage org.apache.aries.blueprint.sample;\n\nimport org.apache.aries.blueprint.annotation.Arg;\nimport org.apache.aries.blueprint.annotation.Bean;\n\n@Bean(id=\"accountTwo\", \n      factoryMethod=\"createAccount\", \n      args = @Arg(value=\"2\"))\npublic class StaticAccountFactory {\n    \n    public static Account createAccount(long number) {\n        return new Account(number);\n     }\n}\n","binary":"false","copies":"15","sample_repo_name":"apache/aries","sample_ref":"refs/heads/trunk","sample_path":"blueprint/blueprint-sample-annotation/src/main/java/org/apache/aries/blueprint/sample/StaticAccountFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ea235f1aebf5fb61aa92d6f75b5563978bc228ff","size":"9442","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.aries.application.runtime.framework.utils;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.aries.application.Content;\nimport org.apache.aries.application.utils.manifest.ContentFactory;\nimport org.apache.aries.util.VersionRange;\nimport org.apache.aries.util.manifest.ManifestHeaderProcessor;\nimport org.apache.aries.util.manifest.ManifestHeaderProcessor.NameValuePair;\nimport org.osgi.framework.Bundle;\nimport org.osgi.framework.BundleContext;\nimport org.osgi.framework.Constants;\nimport org.osgi.framework.Version;\n\npublic class EquinoxFrameworkUtils\n{\n\n  public static Collection<Content> getExportPackages(BundleContext isolatedBundleContext)\n  {\n    Set<Content> exports = new HashSet<Content>();\n\n    Bundle sysBundle = isolatedBundleContext.getBundle(0);\n    if (sysBundle != null && sysBundle.getHeaders() != null) {\n      String exportString = (String) sysBundle.getHeaders().get(Constants.EXPORT_PACKAGE);\n      if (exportString != null) {\n        for (NameValuePair nvp : ManifestHeaderProcessor\n            .parseExportString(exportString))\n          exports.add(ContentFactory.parseContent(nvp.getName(), nvp.getAttributes()));\n      }\n    }\n    return Collections.unmodifiableSet(exports);\n  }\n  \n  public static Collection<Content> getSystemExtraPkgs(BundleContext context)\n  {\n    Set<Content> extraPkgs = new HashSet<Content>();\n    \n      String exportString = context.getProperty(Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA);\n      if (exportString != null) {\n        for (NameValuePair nvp : ManifestHeaderProcessor\n            .parseExportString(exportString))\n          extraPkgs.add(ContentFactory.parseContent(nvp.getName(), nvp.getAttributes()));\n      }\n    \n    return Collections.unmodifiableSet(extraPkgs);\n  }\n\n  public static Collection<Content> calculateImports(final Collection<Content> importPackage,\n      final Collection<Content> exportPackages)\n  {\n    Set<Content> results = new HashSet<Content>();\n    if (importPackage != null && !importPackage.isEmpty()) {\n      for (Content exportPkg : exportPackages) {\n        for (Content importPkg : importPackage) {\n          if (!(importPkg.getContentName().equals(exportPkg.getContentName())\n              && importPkg.getVersion().equals(exportPkg.getVersion()))) {\n            results.add(importPkg);\n          }\n        }\n      }\n    }\n    return Collections.unmodifiableSet(results);\n  }\n\n  public static String contentToString(Content content)\n  {\n    StringBuffer value = new StringBuffer();\n    value.append(content.getContentName());\n\n    Map<String, String> nvm = content.getNameValueMap();\n\n    for (Map.Entry<String, String> entry : nvm.entrySet()) {\n      if (entry.getKey().equalsIgnoreCase(Constants.VERSION_ATTRIBUTE) || entry.getKey().equalsIgnoreCase(Constants.BUNDLE_VERSION_ATTRIBUTE)) {\n        value.append(\";\" + entry.getKey() + \"=\\\"\" + entry.getValue() + \"\\\"\");\n      } else {\n        value.append(\";\" + entry.getKey() + \"=\" + entry.getValue());\n      }\n    }\n\n    return value.toString();\n  }\n  \n  /**\n   * Calculates which system packages should be flowed \n   * to a child framework based on what packages the \n   * child framework imports. Equinox will require anything imported by the \n   * child framework which is available from the system bundle \n   * in the parent framework to come from the system bundle \n   * in the child framework. However, we don't want to flow \n   * all the extra system packages by default since we want CBAs \n   * which use them to explicitly import them.\n   * @param importPackage\n   * @return\n   * @throws CompositeBundleCalculateException \n   */\n  public static String calculateSystemPackagesToFlow(final Collection<Content> systemExports, \n      final Collection<Content> imports)\n  {\n\n    // Let's always set javax.transaction as system extra packages because of the split package. \n    // It is reasonable to do so because we always flow userTransaction service into child framework anyway.\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(EquinoxFrameworkConstants.TRANSACTION_BUNDLE, EquinoxFrameworkConstants.TRANSACTION_BUNDLE_VERSION);\n    Map<String, Map<String, String>> resultMap = new HashMap<String, Map<String, String>>();\n    resultMap.put(EquinoxFrameworkConstants.TRANSACTION_BUNDLE, map);\n\n    // let's go through the import list to build the resultMap\n    for (Content nvp : imports) {\n      String name = nvp.getContentName().trim();\n      // if it exist in the list of packages exported by the system, we need to add it to the result\n      if (existInExports(name, nvp.getNameValueMap(), systemExports)) {\n        /* We've now ensured the versions match, but not worried too \n        * much about other constraints like company or any of the \n        * other things which could be added to a version statement. \n        * We don't want to flow system packages we don't need to, \n        * but we're not in the business of provisioning, so we'll\n        * let OSGi decide whether every constraint is satisfied\n        * and resolve the bundle or not, as appropriate.\n        */\n\n        for (Content nvpp : systemExports) {\n          if (nvpp.getContentName().trim().equals(name)) {\n            Map<String, String> frameworkVersion = nvpp.getNameValueMap();\n            resultMap.put(name, frameworkVersion);\n            // We don't break here since we're too lazy to check the version\n            // again and so we might end up flowing multiple statements for the \n            // same package (but with different versions). Better this than \n            // accidentally flowing the wrong version if we hit it first.\n          }\n        }\n      }\n    }\n\n    StringBuffer result = new StringBuffer();\n    for (String key : resultMap.keySet()) {\n      result.append(getString(key, resultMap) + \",\");\n    }\n    String toReturn = trimEndString(result.toString().trim(), \",\");\n\n    return toReturn;\n\n  }\n\n  /**\n   * check if the value in nvm already exist in the exports\n   * @param key\n   * @param nvm\n   * @param exports\n   * @return boolean whether the value in nvm already exist in the exports\n   */\n  private static boolean existInExports(String key, Map<String, String> nvm,\n      final Collection<Content> exports)\n  {\n    boolean value = false;\n    for (Content nvp : exports) {\n      if (nvp.getContentName().trim().equals(key.trim())) {\n        // ok key equal.  let's check the version\n        // if version is higher, we still want to import, for example javax.transaction;version=1.1\n        String vi = nvm.get(Constants.VERSION_ATTRIBUTE);\n        String ve = nvp.getNameValueMap().get(Constants.VERSION_ATTRIBUTE);\n        if (vi == null || vi.length() == 0) {\n          vi = \"0.0.0\";\n        }\n\n        if (ve == null || ve.length() == 0) {\n          ve = \"0.0.0\";\n        }\n\n        if (vi.indexOf(\",\") == -1) {\n\n          if (new Version(vi).compareTo(new Version(ve)) <= 0) {\n            // we got it covered in our exports\n            value = true;\n          }\n        } else {\n          // parse vi into version range.\n          VersionRange vri = ManifestHeaderProcessor.parseVersionRange(vi);\n          Version minV = vri.getMinimumVersion();\n          Version maxV = vri.getMaximumVersion();\n          if (minV.compareTo(new Version(ve)) < 0 && maxV.compareTo(new Version(ve)) > 0) {\n            value = true;\n          } else if (minV.compareTo(new Version(ve)) == 0 && !!!vri.isMinimumExclusive()) {\n            value = true;\n          } else if (maxV.compareTo(new Version(ve)) == 0 && !!!vri.isMaximumExclusive()) {\n            value = true;\n          }\n        }\n\n      }\n    }\n    \n    return value;\n  }\n \n  private static String trimEndString(String s, String trim)\n  {\n    if (s.startsWith(trim)) {\n      s = s.substring(trim.length());\n    }\n    if (s.endsWith(trim)) {\n      s = s.substring(0, s.length() - trim.length());\n    }\n    return s;\n  }\n\n  private static String getString(String key, Map<String, Map<String, String>> imports)\n  {\n    StringBuffer value = new StringBuffer();\n    value.append(key);\n\n    Map<String, String> nvm = imports.get(key);\n\n    for (Map.Entry<String, String> entry : nvm.entrySet()) {\n      if (entry.getKey().equalsIgnoreCase(Constants.VERSION_ATTRIBUTE) || entry.getKey().equalsIgnoreCase(Constants.BUNDLE_VERSION_ATTRIBUTE)) {\n        value.append(\";\" + entry.getKey() + \"=\\\"\" + entry.getValue() + \"\\\"\");\n      } else {\n        value.append(\";\" + entry.getKey() + \"=\" + entry.getValue());\n      }\n    }\n\n    return value.toString();\n  }\n}\n","binary":"false","copies":"15","sample_repo_name":"apache/aries","sample_ref":"refs/heads/trunk","sample_path":"application/application-runtime-framework/src/main/java/org/apache/aries/application/runtime/framework/utils/EquinoxFrameworkUtils.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b651f5ad0654597aa7e998eed95fc87988abbf9d","size":"2465","content":"/**\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.aries.transaction.jms.internal;\n\nimport javax.jms.JMSException;\nimport javax.jms.Message;\nimport javax.jms.MessageConsumer;\nimport javax.jms.MessageListener;\n\n/**\n * A {@link MessageConsumer} which was created by {@link PooledSession}.\n */\npublic class PooledMessageConsumer implements MessageConsumer {\n\n    private final PooledSession session;\n    private final MessageConsumer delegate;\n\n    /**\n     * Wraps the message consumer.\n     *\n     * @param session  the pooled session\n     * @param delegate the created consumer to wrap\n     */\n    public PooledMessageConsumer(PooledSession session, MessageConsumer delegate) {\n        this.session = session;\n        this.delegate = delegate;\n    }\n\n    public void close() throws JMSException {\n        // ensure session removes consumer as its closed now\n        session.onConsumerClose(delegate);\n        delegate.close();\n    }\n\n    public MessageListener getMessageListener() throws JMSException {\n        return delegate.getMessageListener();\n    }\n\n    public String getMessageSelector() throws JMSException {\n        return delegate.getMessageSelector();\n    }\n\n    public Message receive() throws JMSException {\n        return delegate.receive();\n    }\n\n    public Message receive(long timeout) throws JMSException {\n        return delegate.receive(timeout);\n    }\n\n    public Message receiveNoWait() throws JMSException {\n        return delegate.receiveNoWait();\n    }\n\n    public void setMessageListener(MessageListener listener) throws JMSException {\n        delegate.setMessageListener(listener);\n    }\n\n    public String toString() {\n        return delegate.toString();\n    }\n}\n","binary":"false","copies":"15","sample_repo_name":"apache/aries","sample_ref":"refs/heads/trunk","sample_path":"transaction/transaction-jms/src/main/java/org/apache/aries/transaction/jms/internal/PooledMessageConsumer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"48d4a40f2ec288bd5ae8f4a078d09280c49c95cf","size":"2258","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sling.ide.eclipse.ui.nav.model;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.eclipse.core.resources.IFolder;\n\n/**\n * TODO: Currently static - change into a service\n * <p>\n * This manager keeps track of SyncDir (models) and allows to \n * register a listener that gets informed if the model changes.\n * <p>\n * Alternative would be to move the update/listener mechanism\n * into the SyncDir object itself..\n */\npublic class SyncDirManager {\n\n    private static Map<IFolder,SyncDir> syncDirs = new HashMap<>();\n    private static List<UpdateHandler> handlers = new LinkedList<>();\n    \n    public static void registerNewSyncDir(SyncDir syncDir) {\n        syncDirs.put(syncDir.getFolder(), syncDir);\n        syncDirChanged(syncDir);\n    }\n\n    public static void syncDirChanged(SyncDir syncDir) {\n        List<UpdateHandler> handlersCopy;\n        synchronized(handlers) {\n            handlersCopy = new ArrayList<>(handlers);\n        }\n        for (UpdateHandler updateHandler : handlersCopy) {\n            updateHandler.syncDirUpdated(syncDir);\n        }\n    }\n    \n    public static SyncDir getSyncDirOrNull(IFolder folder) {\n        return syncDirs.get(folder);\n    }\n    \n    public static void registerUpdateListener(UpdateHandler updateHandler) {\n        synchronized(handlers) {\n            handlers.add(updateHandler);\n        }\n    }\n\n}\n","binary":"false","copies":"16","sample_repo_name":"apache/sling","sample_ref":"refs/heads/trunk","sample_path":"tooling/ide/eclipse-ui/src/org/apache/sling/ide/eclipse/ui/nav/model/SyncDirManager.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b9772f70a4bd66a0d7c5e02663796407120af29f","size":"18733","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.pig.test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.IOException;\nimport java.util.Iterator;\nimport java.util.Map;\nimport java.util.Random;\n\nimport org.apache.pig.ResourceSchema;\nimport org.apache.pig.ResourceSchema.ResourceFieldSchema;\nimport org.apache.pig.builtin.PigStorage;\nimport org.apache.pig.builtin.Utf8StorageConverter;\nimport org.apache.pig.data.DataBag;\nimport org.apache.pig.data.DataByteArray;\nimport org.apache.pig.data.DataType;\nimport org.apache.pig.data.Tuple;\nimport org.apache.pig.data.TupleFactory;\nimport org.apache.pig.impl.logicalLayer.schema.Schema;\nimport org.apache.pig.impl.util.Utils;\nimport org.apache.pig.parser.ParserException;\nimport org.apache.pig.test.utils.GenRandomData;\nimport org.apache.pig.test.utils.TestHelper;\nimport org.joda.time.DateTime;\nimport org.junit.Test;\n\n/**\n * Test class to test conversions from bytes to types\n * and vice versa\n *\n */\npublic class TestConversions {\n\n    PigStorage ps = new PigStorage();\n    Random r = new Random(42L);\n    final int MAX = 10;\n\n    @Test\n    public void testBytesToBoolean() throws IOException {\n        // valid booleans\n        String[] a = { \"true\", \"True\", \"TRUE\", \"false\", \"False\", \"FALSE\" };\n        Boolean[] b = { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE,\n                Boolean.FALSE, Boolean.FALSE, Boolean.FALSE };\n\n        for (int i = 0; i < b.length; ++i) {\n            byte[] bytes = a[i].getBytes();\n            assertEquals(b[i], ps.getLoadCaster().bytesToBoolean(bytes));\n        }\n\n        // invalid booleans\n        // the string that is neither \"true\" nor \"false\" cannot be converted to a boolean value\n        a = new String[] { \"neither true nor false\" };\n        for (String s : a) {\n            byte[] bytes = s.getBytes();\n            Boolean bool = ps.getLoadCaster().bytesToBoolean(bytes);\n            assertNull(bool);\n        }\n    }\n\n    @Test\n    public  void testBytesToInteger() throws IOException\n    {\n        // valid ints\n        String[] a = {\"1234 \", \" 4321\", \" 12345 \", \"1\", \"-2345\",  \"1234567\", \"1.1\", \"-23.45\", \"\"};\n        Integer[] ia = {1234, 4321, 12345, 1, -2345, 1234567, 1, -23};\n\n        for (int i = 0; i < ia.length; i++) {\n            byte[] b = a[i].getBytes();\n            assertEquals(ia[i], ps.getLoadCaster().bytesToInteger(b));\n        }\n\n        // invalid ints\n        a = new String[]{\"1234567890123456\", \"This is an int\", \"\", \"   \"};\n        for (String s : a) {\n            byte[] b = s.getBytes();\n            Integer i = ps.getLoadCaster().bytesToInteger(b);\n            assertNull(i);\n        }\n    }\n\n    @Test\n    public  void testBytesToFloat() throws IOException\n    {\n        // valid floats\n        String[] a = {\"1\", \"-2.345\",  \"12.12334567\", \"1.02e-2\",\".23344\",\n              \"23.1234567897\", \"12312.33\", \"002312.33\", \"1.02e-2\", \"\"};\n\n        Float[] f = {1f, -2.345f,  12.12334567f, 1.02e-2f,.23344f, 23.1234567f, // 23.1234567f is a truncation case\n             12312.33f, 2312.33f, 1.02e-2f };\n\n        for (int j = 0; j < f.length; j++) {\n            byte[] b = a[j].getBytes();\n            assertEquals(f[j], ps.getLoadCaster().bytesToFloat(b));\n        }\n\n        // invalid floats\n        a = new String[]{\"1a.1\", \"23.1234567a890123456\",  \"This is a float\", \"\", \"  \"};\n        for (String s : a) {\n            byte[] b = s.getBytes();\n            Float fl = ps.getLoadCaster().bytesToFloat(b);\n            assertNull(fl);\n\n        }\n    }\n\n    @Test\n    public  void testBytesToDouble() throws IOException\n    {\n        // valid doubles\n        String[] a = {\"1\", \"-2.345\",  \"12.12334567890123456\", \"1.02e12\",\"-.23344\", \"\"};\n        Double[] d = {1.0, -2.345,  12.12334567890123456, 1.02e12, -.23344};\n        for (int j = 0; j < d.length; j++) {\n            byte[] b = a[j].getBytes();\n            assertEquals(d[j], ps.getLoadCaster().bytesToDouble(b));\n        }\n\n        // invalid doubles\n        a = new String[]{\"-0x1.1\", \"-23a.45\",  \"This is a double\", \"\", \"   \"};\n        for (String s : a) {\n            byte[] b = s.getBytes();\n            Double dl = ps.getLoadCaster().bytesToDouble(b);\n            assertNull(dl);\n\n        }\n    }\n\n    @Test\n    public  void testBytesToLong() throws IOException\n    {\n        // valid Longs\n        String[] a = {\"1703598819951657279 \", \" 999888123L  \", \" 1234 \", \" 1234\", \"1234 \", \"1\", \"-2345\",  \"123456789012345678\", \"1.1\", \"-23.45\",\n              \"21345345\", \"3422342\", \"\"};\n        Long[] la = {1703598819951657279L, 999888123L, 1234L, 1234L, 1234L, 1L, -2345L, 123456789012345678L, 1L, -23L,\n             21345345L, 3422342L};\n\n        for (int i = 0; i < la.length; i++) {\n            byte[] b = a[i].getBytes();\n            assertEquals(la[i], ps.getLoadCaster().bytesToLong(b));\n        }\n\n        // invalid longs\n        a = new String[]{\"This is a long\", \"1.0e1000\", \"\", \"    \"};\n        for (String s : a) {\n            byte[] b = s.getBytes();\n            Long l = ps.getLoadCaster().bytesToLong(b);\n            assertNull(l);\n        }\n    }\n\n    @Test\n    public  void testBytesToChar() throws IOException\n    {\n        // valid Strings\n        String[] a = {\"1\", \"-2345\",  \"text\", \"hello\\nworld\", \"\"};\n\n        for (String s : a) {\n            byte[] b = s.getBytes();\n            assertEquals(s, ps.getLoadCaster().bytesToCharArray(b));\n        }\n    }\n\n    @Test\n    public  void testBytesToTuple() throws IOException\n    {\n        for (int i = 0; i < MAX; i++) {\n            Tuple t = GenRandomData.genRandSmallBagTextTuple(r, 1, 100);\n\n            ResourceFieldSchema fs = GenRandomData.getSmallBagTextTupleFieldSchema();\n\n            Tuple convertedTuple = ps.getLoadCaster().bytesToTuple(t.toString().getBytes(), fs);\n            assertEquals(t, convertedTuple);\n        }\n\n    }\n\n    @Test\n    public  void testBytesToBag() throws IOException\n    {\n        ResourceFieldSchema fs = GenRandomData.getFullTupTextDataBagFieldSchema();\n\n        for (int i = 0; i < MAX; i++) {\n            DataBag b = GenRandomData.genRandFullTupTextDataBag(r,5,100);\n            DataBag convertedBag = ps.getLoadCaster().bytesToBag(b.toString().getBytes(), fs);\n            assertTrue(b.equals(convertedBag));\n        }\n\n    }\n\n    @Test\n    public  void testBytesToMap() throws IOException\n    {\n        ResourceFieldSchema fs = GenRandomData.getRandMapFieldSchema();\n\n        for (int i = 0; i < MAX; i++) {\n            Map<String, Object>  m = GenRandomData.genRandMap(r,5);\n            String expectedMapString = DataType.mapToString(m);\n            Map<String, Object> convertedMap = ps.getLoadCaster().bytesToMap(expectedMapString.getBytes(), fs);\n            assertTrue(TestHelper.mapEquals(m, convertedMap));\n        }\n\n    }\n\n    @Test\n    public void testBooleanToBytes() throws IOException {\n        assertTrue(DataType.equalByteArrays(Boolean.TRUE.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(Boolean.TRUE)));\n        assertTrue(DataType.equalByteArrays(Boolean.FALSE.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(Boolean.FALSE)));\n    }\n\n    @Test\n    public void testIntegerToBytes() throws IOException {\n        Integer i = r.nextInt();\n        assertTrue(DataType.equalByteArrays(i.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(i)));\n    }\n\n    @Test\n    public void testLongToBytes() throws IOException {\n        Long l = r.nextLong();\n        assertTrue(DataType.equalByteArrays(l.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(l)));\n    }\n\n    @Test\n    public void testFloatToBytes() throws IOException {\n        Float f = r.nextFloat();\n        assertTrue(DataType.equalByteArrays(f.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(f)));\n    }\n\n    @Test\n    public void testDoubleToBytes() throws IOException {\n        Double d = r.nextDouble();\n        assertTrue(DataType.equalByteArrays(d.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(d)));\n    }\n\n    @Test\n    public void testDateTimeToBytes() throws IOException {\n        DateTime dt = new DateTime(r.nextLong());\n        assertTrue(DataType.equalByteArrays(dt.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(dt)));\n    }\n\n    @Test\n    public void testCharArrayToBytes() throws IOException {\n        String s = GenRandomData.genRandString(r);\n        assertTrue(s.equals(new String(((Utf8StorageConverter)ps.getLoadCaster()).toBytes(s))));\n    }\n\n    @Test\n    public void testTupleToBytes() throws IOException {\n        Tuple t = GenRandomData.genRandSmallBagTextTuple(r, 1, 100);\n        assertTrue(DataType.equalByteArrays(t.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(t)));\n    }\n\n    @Test\n    public void testBagToBytes() throws IOException {\n        DataBag b = GenRandomData.genRandFullTupTextDataBag(r,5,100);\n        assertTrue(DataType.equalByteArrays(b.toString().getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(b)));\n    }\n\n    @Test\n    public void testMapToBytes() throws IOException {\n        Map<String, Object>  m = GenRandomData.genRandMap(r,5);\n        assertTrue(DataType.equalByteArrays(DataType.mapToString(m).getBytes(), ((Utf8StorageConverter)ps.getLoadCaster()).toBytes(m)));\n    }\n\n    @Test\n    public void testBytesToBagWithConversion() throws IOException {\n        DataBag b = GenRandomData.genFloatDataBag(r,5,100);\n        ResourceFieldSchema fs = GenRandomData.getFloatDataBagFieldSchema(5);\n        DataBag convertedBag = ps.getLoadCaster().bytesToBag(b.toString().getBytes(), fs);\n\n        Iterator<Tuple> iter1 = b.iterator();\n        Iterator<Tuple> iter2 = convertedBag.iterator();\n        for (int i=0;i<100;i++) {\n            Tuple t1 = (Tuple)iter1.next();\n            assertTrue(iter2.hasNext());\n            Tuple t2 = (Tuple)iter2.next();\n            for (int j=0;j<5;j++) {\n                assertTrue(t2.get(j) instanceof Integer);\n                Integer expectedValue = ((Float)t1.get(j)).intValue();\n                assertEquals(expectedValue, t2.get(j));\n            }\n        }\n    }\n\n    @Test\n    public void testBytesToTupleWithConversion() throws IOException {\n        for (int i=0;i<100;i++) {\n            Tuple t = GenRandomData.genMixedTupleToConvert(r);\n            ResourceFieldSchema fs = GenRandomData.getMixedTupleToConvertFieldSchema();\n            Tuple convertedTuple = ps.getLoadCaster().bytesToTuple(t.toString().getBytes(), fs);\n\n            assertTrue(convertedTuple.get(0) instanceof String);\n            assertEquals(convertedTuple.get(0), ((Integer)t.get(0)).toString());\n\n            assertTrue(convertedTuple.get(1) instanceof Long);\n            Integer origValue1 = (Integer)t.get(1);\n            assertEquals(convertedTuple.get(1), Long.valueOf(origValue1.longValue()));\n\n            assertNull(convertedTuple.get(2));\n\n            assertTrue(convertedTuple.get(3) instanceof Double);\n            Float origValue3 = (Float)t.get(3);\n            assertEquals(((Double)convertedTuple.get(3)).doubleValue(), origValue3.doubleValue(), 0.01);\n\n            assertTrue(convertedTuple.get(4) instanceof Float);\n            Double origValue4 = (Double)t.get(4);\n            assertEquals((Float)convertedTuple.get(4), origValue4.floatValue(), 0.01);\n\n            assertTrue(convertedTuple.get(5) instanceof String);\n            assertEquals(convertedTuple.get(5), t.get(5));\n\n            assertNull(convertedTuple.get(6));\n\n            assertNull(convertedTuple.get(7));\n\n            assertNull(convertedTuple.get(8));\n\n            assertTrue(convertedTuple.get(9) instanceof Boolean);\n            String origValue9 = (String)t.get(9);\n            assertEquals(Boolean.valueOf(origValue9), convertedTuple.get(9));\n        }\n    }\n\n    @Test\n    public void testBytesToComplexTypeMisc() throws IOException, ParserException {\n        String s = \"(a,b\";\n        Schema schema = Utils.getSchemaFromString(\"t:tuple(a:chararray, b:chararray)\");\n        ResourceFieldSchema rfs = new ResourceSchema(schema).getFields()[0];\n        Tuple t = ps.getLoadCaster().bytesToTuple(s.getBytes(), rfs);\n        assertNull(t);\n\n        s = \"{(a,b}\";\n        schema = Utils.getSchemaFromString(\"b:bag{t:tuple(a:chararray, b:chararray)}\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n        DataBag b = ps.getLoadCaster().bytesToBag(s.getBytes(), rfs);\n        assertNull(b);\n\n        s = \"{(a,b)\";\n        schema = Utils.getSchemaFromString(\"b:bag{t:tuple(a:chararray, b:chararray)}\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n        b = ps.getLoadCaster().bytesToBag(s.getBytes(), rfs);\n        assertNull(b);\n\n        s = \"[ab]\";\n        schema = Utils.getSchemaFromString(\"m:map[chararray]\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n        Map<String, Object> m = ps.getLoadCaster().bytesToMap(s.getBytes(), rfs);\n        assertNull(m);\n\n        s = \"[a#b\";\n        m = ps.getLoadCaster().bytesToMap(s.getBytes(), rfs);\n        assertNull(m);\n\n        s = \"[a#]\";\n        m = ps.getLoadCaster().bytesToMap(s.getBytes(), rfs);\n        Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n        assertEquals(\"a\", entry.getKey());\n        assertNull(entry.getValue());\n\n        s = \"[#]\";\n        m = ps.getLoadCaster().bytesToMap(s.getBytes(), rfs);\n        assertNull(m);\n\n        s = \"[a#}\";\n        m = ps.getLoadCaster().bytesToMap(s.getBytes(), rfs);\n        assertNull(m);\n\n        s = \"[a#)\";\n        m = ps.getLoadCaster().bytesToMap(s.getBytes(), rfs);\n        assertNull(m);\n\n        s = \"[]\";\n        m = ps.getLoadCaster().bytesToMap(s.getBytes(), rfs);\n        assertTrue(m.isEmpty());\n\n        s = \"(a,b)\";\n        schema = Utils.getSchemaFromString(\"t:tuple()\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n        t = ps.getLoadCaster().bytesToTuple(s.getBytes(), rfs);\n        assertEquals(2, t.size());\n        assertTrue(t.get(0) instanceof DataByteArray);\n        assertEquals(\"a\", t.get(0).toString());\n        assertTrue(t.get(1) instanceof DataByteArray);\n        assertEquals(\"b\", t.get(1).toString());\n\n        s = \"[a#(1,2,3)]\";\n        schema = Utils.getSchemaFromString(\"m:map[]\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n        m = ps.getLoadCaster().bytesToMap(s.getBytes(), rfs);\n        entry = m.entrySet().iterator().next();\n        assertEquals(\"a\", entry.getKey());\n        assertTrue(entry.getValue() instanceof DataByteArray);\n        assertEquals(\"(1,2,3)\", entry.getValue().toString());\n\n        s = \"(a,b,(123,456,{(1,2,3)}))\";\n        schema = Utils.getSchemaFromString(\"t:tuple()\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n        t = ps.getLoadCaster().bytesToTuple(s.getBytes(), rfs);\n        assertTrue(t.size()==3);\n        assertTrue(t.get(0) instanceof DataByteArray);\n        assertEquals(\"a\", t.get(0).toString());\n        assertTrue(t.get(1) instanceof DataByteArray);\n        assertEquals(\"b\", t.get(1).toString());\n        assertTrue(t.get(2) instanceof DataByteArray);\n        assertEquals(\"(123,456,{(1,2,3)})\", t.get(2).toString());\n\n        s = \"(a,b,(123,456,{(1,2,3}))\";\n        schema = Utils.getSchemaFromString(\"t:tuple()\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n        t = ps.getLoadCaster().bytesToTuple(s.getBytes(), rfs);\n        assertNull(t);\n    }\n\n    @Test\n    public void testOverflow() throws IOException, ParserException {\n        Schema schema;\n        ResourceFieldSchema rfs;\n        Tuple tuple, convertedTuple;\n        tuple = TupleFactory.getInstance().newTuple(1);\n\n        schema = Utils.getSchemaFromString(\"t:tuple(a:int)\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n\n        // long bigger than Integer.MAX_VALUE\n        tuple.set(0, Integer.valueOf(Integer.MAX_VALUE).longValue() + 1);\n        convertedTuple = ps.getLoadCaster().bytesToTuple(tuple.toString().getBytes(), rfs);\n        assertNull(\"Invalid cast to int: \" + tuple.get(0) + \" -> \" + convertedTuple.get(0), convertedTuple.get(0));\n\n        // long smaller than Integer.MIN_VALUE\n        tuple.set(0, Integer.valueOf(Integer.MIN_VALUE).longValue() - 1);\n        convertedTuple = ps.getLoadCaster().bytesToTuple(tuple.toString().getBytes(), rfs);\n        assertNull(\"Invalid cast to int: \" + tuple.get(0) + \" -> \" + convertedTuple.get(0), convertedTuple.get(0));\n\n        // double bigger than Integer.MAX_VALUE\n        tuple.set(0, Integer.valueOf(Integer.MAX_VALUE).doubleValue() + 1);\n        convertedTuple = ps.getLoadCaster().bytesToTuple(tuple.toString().getBytes(), rfs);\n        assertNull(\"Invalid cast to int: \" + tuple.get(0) + \" -> \" + convertedTuple.get(0), convertedTuple.get(0));\n\n        // double smaller than Integer.MIN_VALUE\n        tuple.set(0, Integer.valueOf(Integer.MIN_VALUE).doubleValue() - 1);\n        convertedTuple = ps.getLoadCaster().bytesToTuple(tuple.toString().getBytes(), rfs);\n        assertNull(\"Invalid cast to int: \" + tuple.get(0) + \" -> \" + convertedTuple.get(0), convertedTuple.get(0));\n\n        schema = Utils.getSchemaFromString(\"t:tuple(a:long)\");\n        rfs = new ResourceSchema(schema).getFields()[0];\n\n        // double bigger than Long.MAX_VALUE\n        tuple.set(0, Long.valueOf(Long.MAX_VALUE).doubleValue() + 10000);\n        convertedTuple = ps.getLoadCaster().bytesToTuple(tuple.toString().getBytes(), rfs);\n        assertNull(\"Invalid cast to long: \" + tuple.get(0) + \" -> \" + convertedTuple.get(0), convertedTuple.get(0));\n\n        // double smaller than Long.MIN_VALUE\n        tuple.set(0, Long.valueOf(Long.MIN_VALUE).doubleValue() - 10000);\n        convertedTuple = ps.getLoadCaster().bytesToTuple(tuple.toString().getBytes(), rfs);\n        assertNull(\"Invalid cast to long: \" + tuple.get(0) + \" -> \" + convertedTuple.get(0), convertedTuple.get(0));\n    }\n}\n","binary":"false","copies":"18","sample_repo_name":"apache/pig","sample_ref":"refs/heads/trunk","sample_path":"test/org/apache/pig/test/TestConversions.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"226c585b61f7db9f2ff4b81db5e95117d4db03ad","size":"6440","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.jackrabbit.oak.plugins.blob.migration;\n\nimport static java.lang.System.nanoTime;\nimport static org.apache.jackrabbit.oak.management.ManagementOperation.done;\nimport static org.apache.jackrabbit.oak.management.ManagementOperation.newManagementOperation;\nimport static org.apache.jackrabbit.oak.management.ManagementOperation.Status.formatTime;\nimport static org.apache.jackrabbit.oak.spi.whiteboard.WhiteboardUtils.registerMBean;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\nimport javax.annotation.Nonnull;\nimport javax.management.openmbean.CompositeData;\nimport javax.management.openmbean.CompositeDataSupport;\nimport javax.management.openmbean.CompositeType;\nimport javax.management.openmbean.OpenDataException;\nimport javax.management.openmbean.OpenType;\nimport javax.management.openmbean.SimpleType;\n\nimport org.apache.felix.scr.annotations.Activate;\nimport org.apache.felix.scr.annotations.Component;\nimport org.apache.felix.scr.annotations.Deactivate;\nimport org.apache.felix.scr.annotations.Reference;\nimport org.apache.jackrabbit.oak.api.jmx.RepositoryManagementMBean.StatusCode;\nimport org.apache.jackrabbit.oak.commons.jmx.AnnotatedStandardMBean;\nimport org.apache.jackrabbit.oak.management.ManagementOperation;\nimport org.apache.jackrabbit.oak.osgi.OsgiWhiteboard;\nimport org.apache.jackrabbit.oak.spi.blob.BlobStore;\nimport org.apache.jackrabbit.oak.spi.blob.split.SplitBlobStore;\nimport org.apache.jackrabbit.oak.spi.state.NodeStore;\nimport org.apache.jackrabbit.oak.spi.whiteboard.Registration;\nimport org.apache.jackrabbit.oak.spi.whiteboard.Whiteboard;\nimport org.osgi.framework.BundleContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Component\npublic class BlobMigration extends AnnotatedStandardMBean implements BlobMigrationMBean {\n\n    public static final String OP_NAME = \"Blob migration\";\n\n    private static final Logger log = LoggerFactory.getLogger(BlobMigrator.class);\n\n    private ManagementOperation<String> migrationOp = done(OP_NAME, \"\");\n\n    private static final CompositeType TYPE;\n\n    static {\n        CompositeType type;\n        try {\n            type = new CompositeType(\"BlobMigrationStatus\", \"Status of the blob migraiton\",\n                    new String[] { \"isRunning\", \"migratedNodes\", \"lastProcessedPath\", \"operationStatus\" },\n                    new String[] { \"Migration in progress\", \"Total number of migrated nodes\", \"Last processed path\", \"Status of the operation\" },\n                    new OpenType[] { SimpleType.BOOLEAN, SimpleType.INTEGER, SimpleType.STRING, ManagementOperation.Status.ITEM_TYPES });\n        } catch (OpenDataException e) {\n            type = null;\n            log.error(\"Can't create a CompositeType\", e);\n        }\n        TYPE = type;\n    }\n\n    @Reference(target = \"(service.pid=org.apache.jackrabbit.oak.spi.blob.split.SplitBlobStore)\")\n    private BlobStore splitBlobStore;\n\n    @Reference\n    private NodeStore nodeStore;\n\n    private Executor executor = Executors.newSingleThreadExecutor();\n\n    private BlobMigrator migrator;\n\n    private Registration mbeanReg;\n\n    public BlobMigration() {\n        super(BlobMigrationMBean.class);\n    }\n\n    @Activate\n    private void activate(BundleContext ctx) {\n        Whiteboard wb = new OsgiWhiteboard(ctx);\n        migrator = new BlobMigrator((SplitBlobStore) splitBlobStore, nodeStore);\n        mbeanReg = registerMBean(wb, BlobMigrationMBean.class, this, BlobMigrationMBean.TYPE, OP_NAME);\n    }\n\n    @Deactivate\n    private void deactivate() throws InterruptedException {\n        if (migrator != null) {\n            migrator.stop();\n            migrator = null;\n        }\n        if (mbeanReg != null) {\n            mbeanReg.unregister();\n            mbeanReg = null;\n        }\n    }\n\n    @Nonnull\n    @Override\n    public String startBlobMigration(final boolean resume) {\n        if (migrationOp.isDone()) {\n            migrationOp = newManagementOperation(OP_NAME, new Callable<String>() {\n                @Override\n                public String call() throws Exception {\n                    long t0 = nanoTime();\n                    boolean finished;\n                    if (resume) {\n                        finished = migrator.migrate();\n                    } else {\n                        finished = migrator.start();\n                    }\n                    String duration = formatTime(nanoTime() - t0);\n                    if (finished) {\n                        return \"All blobs migrated in \" + duration;\n                    } else {\n                        return \"Migration stopped manually after \" + duration;\n                    }\n                }\n            });\n            executor.execute(migrationOp);\n            return \"Migration started\";\n        } else {\n            return \"Migration is already in progress\";\n        }\n    }\n\n    @Nonnull\n    @Override\n    public String stopBlobMigration() {\n        migrator.stop();\n        return \"Migration will be stopped\";\n    }\n\n    @Nonnull\n    @Override\n    public CompositeData getBlobMigrationStatus() throws OpenDataException {\n        Map<String, Object> status = new HashMap<String, Object>();\n        status.put(\"isRunning\", migrationOp.getStatus().getCode() == StatusCode.RUNNING);\n        status.put(\"migratedNodes\", migrator.getTotalMigratedNodes());\n        status.put(\"lastProcessedPath\", migrator.getLastProcessedPath());\n        status.put(\"operationStatus\", migrationOp.getStatus().toCompositeData());\n        return new CompositeDataSupport(TYPE, status);\n    }\n}\n","binary":"false","copies":"18","sample_repo_name":"apache/jackrabbit-oak","sample_ref":"refs/heads/trunk","sample_path":"oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/blob/migration/BlobMigration.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bba02f1e9ab8f1ba82a29025e67181da088c49ed","size":"2983","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sling.launchpad.testservices.servlets;\n\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.Properties;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport javax.servlet.ServletException;\n\nimport org.apache.sling.api.SlingHttpServletRequest;\nimport org.apache.sling.api.SlingHttpServletResponse;\nimport org.apache.sling.api.resource.Resource;\nimport org.apache.sling.api.servlets.SlingAllMethodsServlet;\n\n/** Base class for test servlets - GET displays easy to parse information \n *  about the servlet and resource\n */\n@SuppressWarnings(\"serial\")\nclass TestServlet extends SlingAllMethodsServlet {\n\n  @Override\n  protected void doGet(SlingHttpServletRequest request, SlingHttpServletResponse response) \n  throws ServletException, IOException {\n    Logger.getLogger(TestServlet.class.getName()).log(Level.SEVERE, \"test JUL message\");\n    dumpRequestAsProperties(request, response);\n  }\n  \n  @Override\n  protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) \n  throws ServletException, IOException {\n    dumpRequestAsProperties(request, response);\n  }\n  \n  protected void dumpRequestAsProperties(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {\n    final Properties props = new Properties();\n    response.setContentType(\"text/plain\");\n    props.put(\"servlet.class.name\", getClass().getName());\n    \n    final Resource r = request.getResource();\n    props.put(\"sling.resource.path\", r == null ? \"\" : r.getPath());\n    props.put(\"sling.resource.type\", r == null ? \"\" : r.getResourceType());\n    props.put(\"http.request.method\", request.getMethod());\n    props.put(\"http.request.pathInfo\", request.getPathInfo());\n    props.put(\"http.request.requestURI\", request.getRequestURI());\n    props.put(\"http.request.requestURL\", request.getRequestURL().toString());\n    \n    setCustomProperties(props);\n    props.store(response.getOutputStream(), \"Data created by \" + getClass().getName() + \" at \" + new Date());\n    response.getOutputStream().flush();\n  }\n  \n  /** Hook for additional custom properties */\n  void setCustomProperties(Properties props) {\n  }\n}\n","binary":"false","copies":"22","sample_repo_name":"apache/sling","sample_ref":"refs/heads/trunk","sample_path":"launchpad/test-services/src/main/java/org/apache/sling/launchpad/testservices/servlets/TestServlet.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"91c806e41a44e651824c5bbac867e7257efbbc4a","size":"6782","content":"package org.apache.maven.ant.tasks;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport org.apache.maven.ant.tasks.support.SpecificScopesArtifactFilter;\nimport org.apache.maven.ant.tasks.support.TypesArtifactFilter;\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.repository.ArtifactRepository;\nimport org.apache.maven.artifact.resolver.filter.AndArtifactFilter;\nimport org.apache.maven.plugin.antrun.AntRunMojo;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.tools.ant.BuildException;\nimport org.apache.tools.ant.Task;\nimport org.apache.tools.ant.types.FileSet;\n\nimport java.io.File;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\n/**\n * Ant task which create a fileset for each dependency in a Maven project, and a\n * fileset containing all selected dependencies.\n *\n * @author pgier\n */\npublic class DependencyFilesetsTask\n    extends Task\n{\n\n    /**\n     * The default project dependencies id.\n     */\n    public static final String DEFAULT_PROJECT_DEPENDENCIES_ID = \"maven.project.dependencies\";\n\n    /**\n     * The project ref Id of the project being used.\n     */\n    private String mavenProjectId = AntRunMojo.DEFAULT_MAVEN_PROJECT_REFID;\n\n    /**\n     * The id to store the dependencies fileset.\n     */\n    private String projectDependenciesId = DEFAULT_PROJECT_DEPENDENCIES_ID;\n\n    /**\n     * @return {@link #projectDependenciesId}\n     */\n    public String getProjectDependenciesId()\n    {\n        return projectDependenciesId;\n    }\n\n    /**\n     * @param projectDependenciesId {@link #projectDependenciesId}\n     */\n    public void setProjectDependenciesId( String projectDependenciesId )\n    {\n        this.projectDependenciesId = projectDependenciesId;\n    }\n\n    /**\n     * The string to prepend to all dependency filesets.\n     */\n    private String prefix = \"\";\n\n    /**\n     * A comma separated list of artifact types to include.\n     */\n    private String types = \"\";\n\n    /**\n     * A comma separated list of dependency scopes to include.\n     */\n    private String scopes = \"\";\n\n    /**\n     * Create instance.\n     */\n    public DependencyFilesetsTask()\n    {\n\n    }\n\n    /** {@inheritDoc} */\n    public void execute()\n    {\n        if ( this.getProject().getReference( mavenProjectId ) == null )\n        {\n            throw new BuildException( \"Maven project reference not found: \" + mavenProjectId );\n        }\n\n        MavenProject mavenProject = (MavenProject) this.getProject().getReference( \"maven.project\" );\n\n        // Add filesets for depenedency artifacts\n        @SuppressWarnings( \"unchecked\" ) Set<Artifact> depArtifacts = filterArtifacts( mavenProject.getArtifacts() );\n\n        FileSet dependenciesFileSet = new FileSet();\n        dependenciesFileSet.setProject( getProject() );\n        ArtifactRepository localRepository = (ArtifactRepository) getProject().getReference( \"maven.local.repository\" );\n        dependenciesFileSet.setDir( new File( localRepository.getBasedir() ) );\n\n        for ( Artifact artifact : depArtifacts )\n        {\n            String relativeArtifactPath = localRepository.pathOf( artifact );\n            dependenciesFileSet.createInclude().setName( relativeArtifactPath );\n\n            String fileSetName = getPrefix() + artifact.getDependencyConflictId();\n\n            FileSet singleArtifactFileSet = new FileSet();\n            singleArtifactFileSet.setProject( getProject() );\n            singleArtifactFileSet.setFile( artifact.getFile() );\n            getProject().addReference( fileSetName, singleArtifactFileSet );\n        }\n\n        getProject().addReference( ( getPrefix() + projectDependenciesId ), dependenciesFileSet );\n    }\n\n    /**\n     * @return {@link #mavenProjectId}\n     */\n    public String getMavenProjectId()\n    {\n        return mavenProjectId;\n    }\n\n    /**\n     * @param mavenProjectId {@link #mavenProjectId}\n     */\n    public void setMavenProjectId( String mavenProjectId )\n    {\n        this.mavenProjectId = mavenProjectId;\n    }\n\n    /**\n     * @return {@link #prefix}\n     */\n    public String getPrefix()\n    {\n        if ( prefix == null )\n        {\n            prefix = \"\";\n        }\n        return prefix;\n    }\n\n    /**\n     * Prefix to be added to each of the dependency filesets. Default is empty string.\n     * @param prefix {@link #prefix}\n     */\n    public void setPrefix( String prefix )\n    {\n        this.prefix = prefix;\n    }\n\n    /**\n     * @return {@link #types}\n     */\n    public String getTypes()\n    {\n        return types;\n    }\n\n    /**\n     * @param types {@link #types}\n     */\n    public void setTypes( String types )\n    {\n        this.types = types;\n    }\n\n    /**\n     * @return {@link #scopes}\n     */\n    public String getScopes()\n    {\n        return scopes;\n    }\n\n    /**\n     * @param scopes {@link #scopes}\n     */\n    public void setScopes( String scopes )\n    {\n        this.scopes = scopes;\n    }\n\n    /**\n     * Filter a set of artifacts using the scopes and type filters.\n     *\n     * @param artifacts {@link Artifact} set.\n     * @return The set of filtered artifacts.\n     */\n    public Set<Artifact> filterArtifacts( Set<Artifact> artifacts )\n    {\n        if ( scopes == null )\n        {\n            scopes = \"\";\n        }\n        if ( types == null )\n        {\n            types = \"\";\n        }\n\n        if ( scopes.equals( \"\" ) && types.equals( \"\" ) )\n        {\n            return artifacts;\n        }\n\n        AndArtifactFilter filter = new AndArtifactFilter();\n        if ( !scopes.equals( \"\" ) )\n        {\n            filter.add( new SpecificScopesArtifactFilter( getScopes() ) );\n        }\n        if ( !types.equals( \"\" ) )\n        {\n            filter.add( new TypesArtifactFilter( getTypes() ) );\n        }\n\n        Set<Artifact> artifactsResult = new LinkedHashSet<Artifact>();\n        for ( Artifact artifact : artifacts )\n        {\n            if ( filter.include( artifact ) )\n            {\n                artifactsResult.add( artifact );\n            }\n        }\n        return artifactsResult;\n    }\n}\n","binary":"false","copies":"23","sample_repo_name":"apache/maven-plugins","sample_ref":"refs/heads/trunk","sample_path":"maven-antrun-plugin/src/main/java/org/apache/maven/ant/tasks/DependencyFilesetsTask.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6065e51a5f6e5b81d20edade641bca9080b59563","size":"1594","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.axis2.wsdl.codegen.extension;\n\nimport org.apache.axis2.util.PrettyPrinter;\n\nimport java.io.File;\n\npublic class JavaPrettyPrinterExtension extends AbstractPrettyPrinterExtension {\n\n\n    public JavaPrettyPrinterExtension() {\n        /*\n        * If the extension for property file changes it might effect this as\n        * well !!!\n        */\n        fileExtension = \".java\";\n    }\n\n    /**\n     * Overridden to call the java pretty printer\n     *\n     * @param file\n     */\n    protected void prettifyFile(File file) {\n        // Special case jaxbri generated package-info.java \n        // as jalopy corrupts the package level annotations\n        if (file.getName().equals(\"package-info.java\")) {\n            return;\n        }\n        PrettyPrinter.prettify(file);\n    }\n}\n","binary":"false","copies":"23","sample_repo_name":"apache/axis2-java","sample_ref":"refs/heads/trunk","sample_path":"modules/codegen/src/org/apache/axis2/wsdl/codegen/extension/JavaPrettyPrinterExtension.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e36bb5d2e1b5f880cf53067c9aaccdc9d180fad3","size":"3114","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.axis2.util;\n\nimport org.apache.axis2.Constants;\nimport org.apache.axis2.description.AxisService;\nimport org.apache.axis2.description.AxisServiceGroup;\n\nimport java.util.Iterator;\n\npublic class SessionUtils {\n\n    /**\n     * Walk through the list of services and use the maximum of the scopes as the scope\n     * for the whole service group\n     *\n     * @param axisServiceGroup the service group\n     * @return scope for the service group\n     */\n    public static String calculateMaxScopeForServiceGroup(AxisServiceGroup axisServiceGroup) {\n        Iterator<AxisService> servics = axisServiceGroup.getServices();\n        int maxScope = 1;\n        while (servics.hasNext()) {\n            AxisService axisService = (AxisService) servics.next();\n            int scopeIntValue = getScopeIntValue(axisService.getScope());\n            if (maxScope < scopeIntValue) {\n                maxScope = scopeIntValue;\n            }\n        }\n        return getScopeString(maxScope);\n    }\n\n    /**\n     * convert scope into a numerical value\n     *\n     * @param scope scope as a string\n     * @return integer the scope as a number\n     */\n    private static int getScopeIntValue(String scope) {\n        if (Constants.SCOPE_REQUEST.equals(scope)) {\n            return 1;\n        } else if (Constants.SCOPE_TRANSPORT_SESSION.equals(scope)) {\n            return 2;\n        } else if (Constants.SCOPE_SOAP_SESSION.equals(scope)) {\n            return 3;\n        } else if (Constants.SCOPE_APPLICATION.equals(scope)) {\n            return 4;\n        } else {\n            return 2;\n        }\n    }\n\n    /**\n     * Get the actual scope string given the numerical value\n     *\n     * @param scope scope as a number\n     * @return string scope as a string\n     */\n    private static String getScopeString(int scope) {\n        switch (scope) {\n            case 1 : {\n                return Constants.SCOPE_REQUEST;\n            }\n            case 2 : {\n                return Constants.SCOPE_TRANSPORT_SESSION;\n            }\n            case 3 : {\n                return Constants.SCOPE_SOAP_SESSION;\n            }\n            case 4 : {\n                return Constants.SCOPE_APPLICATION;\n            }\n            default : {\n                return Constants.SCOPE_TRANSPORT_SESSION;\n            }\n        }\n    }\n}\n","binary":"false","copies":"23","sample_repo_name":"apache/axis2-java","sample_ref":"refs/heads/trunk","sample_path":"modules/kernel/src/org/apache/axis2/util/SessionUtils.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2c789f3dbd7b84a1832fa8b626ca6062b15d65af","size":"871","content":"package test;\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npublic class ExtendedLog\n    extends Log\n{\n}\n","binary":"false","copies":"25","sample_repo_name":"apache/maven-plugins","sample_ref":"refs/heads/trunk","sample_path":"maven-ant-plugin/src/it/ear-it/primary-source/src/main/java/test/ExtendedLog.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5bb6707600002dafcaa0f823d16578373b6cfc13","size":"7587","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.axis2.jaxws.i18n;\n\nimport java.text.MessageFormat;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\n/**\n * Accept parameters for ProjectResourceBundle, but defer object instantiation (and therefore\n * resource bundle loading) until required.\n */\npublic class MessageBundle {\n    private boolean loaded = false;\n\n    private ProjectResourceBundle _resourceBundle = null;\n\n    private final String projectName;\n    private final String packageName;\n    private final String resourceName;\n    private final Locale locale;\n    private final ClassLoader classLoader;\n    private final ResourceBundle parent;\n\n\n    public final ProjectResourceBundle getResourceBundle() {\n        if (!loaded) {\n            _resourceBundle = ProjectResourceBundle.getBundle(projectName,\n                                                              packageName,\n                                                              resourceName,\n                                                              locale,\n                                                              classLoader,\n                                                              parent);\n            loaded = true;\n        }\n        return _resourceBundle;\n    }\n\n    /** Construct a new ExtendMessages */\n    public MessageBundle(String projectName,\n                         String packageName,\n                         String resourceName,\n                         Locale locale,\n                         ClassLoader classLoader,\n                         ResourceBundle parent)\n            throws MissingResourceException {\n        this.projectName = projectName;\n        this.packageName = packageName;\n        this.resourceName = resourceName;\n        this.locale = locale;\n        this.classLoader = classLoader;\n        this.parent = parent;\n    }\n\n    /**\n     * Gets a string message from the resource bundle for the given key\n     *\n     * @param key The resource key\n     * @return The message\n     */\n    public String getMessage(String key) throws MissingResourceException {\n        return getMessage(key, (String[])null);\n    }\n\n    /**\n     * <p>Gets a string message from the resource bundle for the given key. The message may contain\n     * variables that will be substituted with the given arguments. Variables have the format:</p>\n     * <dir> This message has two variables: {0} and {1} </dir>\n     *\n     * @param key  The resource key\n     * @param arg0 The argument to place in variable {0}\n     * @return The message\n     */\n    public String getMessage(String key, String arg0) throws MissingResourceException {\n        return getMessage(key, new String[] { arg0 });\n    }\n\n    /**\n     * <p>Gets a string message from the resource bundle for the given key. The message may contain\n     * variables that will be substituted with the given arguments. Variables have the format:</p>\n     * <dir> This message has two variables: {0} and {1} </dir>\n     *\n     * @param key  The resource key\n     * @param arg0 The argument to place in variable {0}\n     * @param arg1 The argument to place in variable {1}\n     * @return The message\n     */\n    public String getMessage(String key, String arg0, String arg1) throws MissingResourceException {\n        return getMessage(key, new String[] { arg0, arg1 });\n    }\n\n    /**\n     * <p>Gets a string message from the resource bundle for the given key. The message may contain\n     * variables that will be substituted with the given arguments. Variables have the format:</p>\n     * <dir> This message has two variables: {0} and {1} </dir>\n     *\n     * @param key  The resource key\n     * @param arg0 The argument to place in variable {0}\n     * @param arg1 The argument to place in variable {1}\n     * @param arg2 The argument to place in variable {2}\n     * @return The message\n     */\n    public String getMessage(String key, String arg0, String arg1, String arg2)\n            throws MissingResourceException {\n        return getMessage(key, new String[] { arg0, arg1, arg2 });\n    }\n\n    /**\n     * <p>Gets a string message from the resource bundle for the given key. The message may contain\n     * variables that will be substituted with the given arguments. Variables have the format:</p>\n     * <dir> This message has two variables: {0} and {1} </dir>\n     *\n     * @param key  The resource key\n     * @param arg0 The argument to place in variable {0}\n     * @param arg1 The argument to place in variable {1}\n     * @param arg2 The argument to place in variable {2}\n     * @param arg3 The argument to place in variable {3}\n     * @return The message\n     */\n    public String getMessage(String key, String arg0, String arg1, String arg2, String arg3)\n            throws MissingResourceException {\n        return getMessage(key, new String[] { arg0, arg1, arg2, arg3 });\n    }\n\n    /**\n     * <p>Gets a string message from the resource bundle for the given key. The message may contain\n     * variables that will be substituted with the given arguments. Variables have the format:</p>\n     * <dir> This message has two variables: {0} and {1} </dir>\n     *\n     * @param key  The resource key\n     * @param arg0 The argument to place in variable {0}\n     * @param arg1 The argument to place in variable {1}\n     * @param arg2 The argument to place in variable {2}\n     * @param arg3 The argument to place in variable {3}\n     * @param arg4 The argument to place in variable {4}\n     * @return The message\n     */\n    public String getMessage(String key, String arg0, String arg1, String arg2, String arg3,\n                             String arg4) throws MissingResourceException {\n        return getMessage(key, new String[] { arg0, arg1, arg2, arg3, arg4 });\n    }\n\n    /**\n     * <p>Gets a string message from the resource bundle for the given key. The message may contain\n     * variables that will be substituted with the given arguments. Variables have the format:</p>\n     * <dir> This message has two variables: {0} and {1} </dir>\n     *\n     * @param key   The resource key\n     * @param array An array of objects to place in corresponding variables\n     * @return The message\n     */\n    public String getMessage(String key, String[] array) throws MissingResourceException {\n        String msg = null;\n        if (getResourceBundle() != null) {\n            msg = getResourceBundle().getString(key);\n        }\n\n        if (msg == null) {\n            throw new MissingResourceException(\"Cannot find resource key \\\"\" + key +\n                    \"\\\" in base name \" +\n                    getResourceBundle().getResourceName(),\n                                               getResourceBundle().getResourceName(), key);\n        }\n\n        return MessageFormat.format(msg, (Object[])array);\n    }\n}\n","binary":"false","copies":"25","sample_repo_name":"apache/axis2-java","sample_ref":"refs/heads/trunk","sample_path":"modules/metadata/src/org/apache/axis2/jaxws/i18n/MessageBundle.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"272f98dfab92eba1eb5e1aec1af3b2e9f38b4efd","size":"2268","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.oak.plugins.document.persistentCache;\n\nimport java.util.Map;\n\nimport org.h2.mvstore.MVMap;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class MapFactory {\n    \n    static final Logger LOG = LoggerFactory.getLogger(MapFactory.class);\n\n    private int openCount = 1;\n\n    /**\n     * Ensure the store is open, re-opening it if needed. The store is first\n     * closed if the old open count if the old open count matches the current\n     * open count.\n     *\n     * @param oldOpenCount the old open count\n     * @return the new open count\n     */\n    synchronized int reopenStoreIfNeeded(int oldOpenCount) {\n        if (oldOpenCount == openCount) {\n            closeStore();\n            openCount++;\n            openStore();\n        }\n        return openCount;\n    }\n    \n    public int getOpenCount() {\n        return openCount;\n    }\n    \n    /**\n     * Open the store.\n     */\n    abstract void openStore();\n    \n    /**\n     * Close the store.\n     */\n    abstract void closeStore();\n    \n    /**\n     * Open or get the given map.\n     * \n     * @param <K> the key type\n     * @param <V> the value type\n     * @param name the map name\n     * @param builder the map builder\n     * @return\n     */\n    abstract <K, V> Map<K, V> openMap(String name, MVMap.Builder<K, V> builder);\n    \n    /**\n     * Get the file size in bytes.\n     * \n     * @return the file size\n     */\n    abstract long getFileSize();\n\n}\n","binary":"false","copies":"26","sample_repo_name":"apache/jackrabbit-oak","sample_ref":"refs/heads/trunk","sample_path":"oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/persistentCache/MapFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7c889a2d91bc86b3bb10591f02ffcad5711dd24f","size":"1302","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.oak.jcr.session.operation;\n\nimport javax.jcr.RepositoryException;\n\nimport org.apache.jackrabbit.oak.jcr.delegate.ItemDelegate;\n\npublic abstract class ItemOperation<U> extends SessionOperation<U> {\n\n    protected final ItemDelegate item;\n\n    protected ItemOperation(ItemDelegate item, String name) {\n        super(name);\n        this.item = item;\n    }\n\n    @Override\n    public void checkPreconditions() throws RepositoryException {\n        item.checkAlive();\n    }\n\n}","binary":"false","copies":"27","sample_repo_name":"apache/jackrabbit-oak","sample_ref":"refs/heads/trunk","sample_path":"oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/session/operation/ItemOperation.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"49cf0e167e6b26ef41b448878dd467a67f7be2d3","size":"1715","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.jackrabbit.oak.jcr.query.qom;\n\nimport javax.jcr.query.qom.And;\n\n/**\n * The implementation of the corresponding JCR interface.\n */\npublic class AndImpl extends ConstraintImpl implements And {\n\n    private final ConstraintImpl constraint1, constraint2;\n\n    public AndImpl(ConstraintImpl constraint1, ConstraintImpl constraint2) {\n        this.constraint1 = constraint1;\n        this.constraint2 = constraint2;\n    }\n\n    @Override\n    public ConstraintImpl getConstraint1() {\n        return constraint1;\n    }\n\n    @Override\n    public ConstraintImpl getConstraint2() {\n        return constraint2;\n    }\n\n    @Override\n    public String toString() {\n        return protect(constraint1) + \" AND \" + protect(constraint2);\n    }\n\n    @Override\n    public void bindVariables(QueryObjectModelImpl qom) {\n        constraint1.bindVariables(qom);\n        constraint2.bindVariables(qom);\n    }\n\n}\n\n","binary":"false","copies":"28","sample_repo_name":"apache/jackrabbit-oak","sample_ref":"refs/heads/trunk","sample_path":"oak-jcr/src/main/java/org/apache/jackrabbit/oak/jcr/query/qom/AndImpl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"648aae2e3abb042e883863258c9b20f5e4a2b506","size":"1466","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.oak.plugins.nodetype.constraint;\n\nimport javax.jcr.RepositoryException;\nimport javax.jcr.Value;\n\npublic class LongConstraint extends NumericConstraint<Long> {\n\n    public LongConstraint(String definition) {\n        super(definition);\n    }\n\n    @Override\n    protected Long getBound(String bound) {\n        return bound == null || bound.isEmpty()\n            ? null\n            : Long.parseLong(bound);\n    }\n\n    @Override\n    protected Long getValue(Value value) throws RepositoryException {\n        return value.getLong();\n    }\n\n    @Override\n    protected boolean less(Long val, Long bound) {\n        return val < bound;\n    }\n}\n","binary":"false","copies":"28","sample_repo_name":"apache/jackrabbit-oak","sample_ref":"refs/heads/trunk","sample_path":"oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/nodetype/constraint/LongConstraint.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6f000705c00e8141e1562248d44104c6aa6ca7d5","size":"1853","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.jackrabbit.oak.spi.security.authentication.callback;\n\nimport javax.security.auth.callback.Callback;\n\nimport org.apache.jackrabbit.api.security.user.UserManager;\n\n/**\n * Callback implementation used to pass a {@link UserManager} to the\n * login module.\n */\npublic class UserManagerCallback implements Callback {\n\n    private UserManager userManager;\n\n    /**\n     * Returns the user provider as set using\n     * {@link #setUserManager(org.apache.jackrabbit.api.security.user.UserManager)}\n     * or {@code null}.\n     *\n     * @return an instance of {@code UserManager} or {@code null} if no\n     * provider has been set before.\n     */\n    public UserManager getUserManager() {\n        return userManager;\n    }\n\n    /**\n     * Sets the {@code UserManager} that is being used during the\n     * authentication process.\n     *\n     * @param userManager The user provider to use during the\n     * authentication process.\n     */\n    public void setUserManager(UserManager userManager) {\n        this.userManager = userManager;\n    }\n}","binary":"false","copies":"29","sample_repo_name":"apache/jackrabbit-oak","sample_ref":"refs/heads/trunk","sample_path":"oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/callback/UserManagerCallback.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2ea2ef6e7024084d7ce765aa63e3ac12c5034148","size":"4957","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sling.ide.test.impl;\n\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.junit.Assert.assertThat;\n\nimport java.io.ByteArrayInputStream;\n\nimport org.apache.sling.ide.eclipse.core.internal.ContentResourceTester;\nimport org.apache.sling.ide.test.impl.helpers.ProjectAdapter;\nimport org.apache.sling.ide.test.impl.helpers.TemporaryProject;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.Path;\nimport org.junit.Rule;\nimport org.junit.Test;\n\npublic class ContentResourceTesterTest {\n\n    @Rule\n    public TemporaryProject projectRule = new TemporaryProject();\n\n    @Test\n    public void simpleFacetedProjectIsNotExportable() throws CoreException {\n\n        // create faceted project\n        IProject contentProject = projectRule.getProject();\n\n        ProjectAdapter project = new ProjectAdapter(contentProject);\n        project.addNatures(\"org.eclipse.wst.common.project.facet.core.nature\");\n\n        assertThat(\"Faceted project can not be exported\",\n                new ContentResourceTester().test(contentProject, \"canBeExported\", null, null), equalTo(false));\n    }\n\n    @Test\n    public void slingContentProjectIsExportable() throws CoreException, InterruptedException {\n\n        // create faceted project\n        IProject contentProject = projectRule.getProject();\n\n        ProjectAdapter project = new ProjectAdapter(contentProject);\n        project.addNatures(\"org.eclipse.wst.common.project.facet.core.nature\");\n\n        // install bundle facet\n        project.installFacet(\"sling.content\", \"1.0\");\n\n        assertThat(\"Sling content project can be exported\",\n                new ContentResourceTester().test(contentProject, \"canBeExported\", null, null), equalTo(true));\n    }\n    \n\n    @Test\n    public void slingContentProjectSyncedResourcesAreExportable() throws CoreException, InterruptedException {\n        \n        // create faceted project\n        IProject contentProject = projectRule.getProject();\n        \n        ProjectAdapter project = new ProjectAdapter(contentProject);\n        project.addNatures(\"org.eclipse.wst.common.project.facet.core.nature\");\n        \n        // install bundle facet\n        project.installFacet(\"sling.content\", \"1.0\");\n        \n        project.createOrUpdateFile(Path.fromPortableString(\"jcr_root/test/hello.txt\"), new ByteArrayInputStream(\n                \"goodbye, world\".getBytes()));\n        \n        assertThat(\"Content sync dir can be exported\",\n                new ContentResourceTester().test(contentProject.findMember(\"jcr_root\"), \"canBeExported\", null, null), equalTo(true));\n        assertThat(\"Dir under sync dir can be exported\",\n                new ContentResourceTester().test(contentProject.findMember(\"jcr_root/test\"), \"canBeExported\", null, null), equalTo(true));\n        assertThat(\"File under sync dir can be exported\",\n                new ContentResourceTester().test(contentProject.findMember(\"jcr_root/test/hello.txt\"), \"canBeExported\", null, null), equalTo(true));        \n    }\n\n    @Test\n    public void slingContentProjectUnrelatedResourcesAreNotExportable() throws CoreException, InterruptedException {\n        \n        // create faceted project\n        IProject contentProject = projectRule.getProject();\n        \n        ProjectAdapter project = new ProjectAdapter(contentProject);\n        project.addNatures(\"org.eclipse.wst.common.project.facet.core.nature\");\n        \n        // install bundle facet\n        project.installFacet(\"sling.content\", \"1.0\");\n        \n        project.createOrUpdateFile(Path.fromPortableString(\"res/hello.txt\"), new ByteArrayInputStream(\n                \"goodbye, world\".getBytes()));\n        \n        assertThat(\"Dir not under content sync dir can not be exported\",\n                new ContentResourceTester().test(contentProject.findMember(\"res\"), \"canBeExported\", null, null), equalTo(false));\n        assertThat(\"File not under content sync dir can not be exported\",\n                new ContentResourceTester().test(contentProject.findMember(\"res/hello.txt\"), \"canBeExported\", null, null), equalTo(false));\n        \n        \n    }\n\n}\n","binary":"false","copies":"30","sample_repo_name":"apache/sling","sample_ref":"refs/heads/trunk","sample_path":"tooling/ide/eclipse-test/src/org/apache/sling/ide/test/impl/ContentResourceTesterTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"73cbffd096fdfa39d8bf8195b1f58e12e6a606a8","size":"5383","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\npackage org.apache.sling.cassandra.test.data.populator;\n\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport me.prettyprint.cassandra.model.CqlQuery;\nimport me.prettyprint.cassandra.model.CqlRows;\nimport me.prettyprint.cassandra.serializers.StringSerializer;\nimport me.prettyprint.hector.api.Keyspace;\nimport me.prettyprint.hector.api.exceptions.HInvalidRequestException;\nimport me.prettyprint.hector.api.query.QueryResult;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.sling.api.resource.Resource;\nimport org.apache.sling.cassandra.resource.provider.CassandraResourceProvider;\nimport org.apache.sling.cassandra.resource.provider.CassandraResourceResolver;\nimport org.apache.sling.cassandra.resource.provider.util.CassandraResourceProviderUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Iterator;\n\npublic class CassandraDataChildNodeTest{\n    private static Logger LOGGER = LoggerFactory.getLogger(CassandraDataChildNodeTest.class);\n\n    @Test\n    public void testGetChildrenData() {\n        String cf = \"p1\";\n        try {\n                String r1 = getrowID(\"/content/cassandra/\" + cf + \"/c1\");\n            String r2 = getrowID(\"/content/cassandra/\" + cf + \"/c1/c2\");\n            CassandraResourceProvider cassandraResourceProvider = new CassandraResourceProvider();\n            createColumnFamily(cf, cassandraResourceProvider.getKeyspace(), new StringSerializer());\n            cassandraResourceProvider.setColumnFamily(cf);\n\n            addData(cassandraResourceProvider.getKeyspace(), cf, new StringSerializer(),\n                           new String[]{\n                                   \"'\" + r1 + \"','/content/cassandra/\" + cf + \"/c1','nt:cassandra1','nt:supercass1','resolutionPathInfo=json'\",\n                                   \"'\" + r2 + \"','/content/cassandra/\" + cf + \"/c1/c2','nt:cassandra','nt:supercass2','resolutionPathInfo=json'\"\n                           });\n\n            getChildrenData(cassandraResourceProvider, cf);\n       } catch (Exception e) {\n            LOGGER.info(\"Ignore err\" + e.getMessage());\n       }\n    }\n\n    private void getChildrenData(CassandraResourceProvider cassandraResourceProvider, String cf) {\n        Resource resource = cassandraResourceProvider.getResource(new CassandraResourceResolver(), \"/content/cassandra/\" + cf + \"/c1\");\n        Assert.assertNotNull(resource);\n        Iterator<Resource> children = resource.listChildren();\n        boolean hasChild = false;\n        while(children.hasNext()){\n            Resource r = children.next();\n            if(r.getPath().equals(\"/content/cassandra/\" + cf + \"/c1/c2\")) {\n            Assert.assertNotNull(r);\n            Assert.assertEquals(\"/content/cassandra/\" + cf + \"/c1/c2\",r.getPath());\n            hasChild = true;\n            }\n        }\n        Assert.assertTrue(hasChild);\n    }\n\n    private String getrowID(String path) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(\"SHA1\");\n        String rowID = new String(Base64.encodeBase64(md.digest(CassandraResourceProviderUtil.getRemainingPath(path).getBytes(\"UTF-8\"))));\n        return rowID;\n    }\n\n    private void createColumnFamily(String cf, Keyspace keyspace, StringSerializer se) {\n        String createCF = \"CREATE COLUMNFAMILY \" + cf + \" (KEY varchar PRIMARY KEY,path varchar,resourceType varchar,resourceSuperType varchar,metadata varchar);\";\n        CqlQuery<String, String, String> cqlQuery = new CqlQuery<String, String, String>(keyspace, se, se, se);\n        cqlQuery.setQuery(createCF);\n        try{\n        QueryResult<CqlRows<String, String, String>> result1 = cqlQuery.execute();\n        LOGGER.info(result1.get().getList().size() + \" Finished.!\");\n        }catch(HInvalidRequestException ignore){\n            LOGGER.debug(\"Column Family already exists \"+ignore.getMessage());\n        }\n    }\n\n    private void addData(Keyspace keyspace, String cf, StringSerializer se, String[] dataArray) {\n        for (String data : dataArray) {\n            CqlQuery<String, String, String> cqlQuery = new CqlQuery<String, String, String>(keyspace, se, se, se);\n            String query = \"insert into \" + cf + \" (KEY,path,resourceType,resourceSuperType,metadata) values (\" + data + \");\";\n            cqlQuery.setQuery(query);\n            cqlQuery.execute();\n        }\n    }\n}\n\n","binary":"false","copies":"31","sample_repo_name":"apache/sling","sample_ref":"refs/heads/trunk","sample_path":"contrib/extensions/cassandra/src/test/java/org/apache/sling/cassandra/test/data/populator/CassandraDataChildNodeTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7b81d2264c769c2ca17789c7f3be2e1fc786ab43","size":"7741","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.sling.launchpad.webapp.integrationtest;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.sling.servlets.post.SlingPostConstants;\n\n/** Test creating a Node and rendering it using scripts in\n *  various supported languages, using nodetype-based\n *  script resolution\n */\npublic class NodetypeRenderingTest extends RenderingTestBase {\n\n    private String secondFolderOfContentPath;\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        // set test values\n        testText = \"This is a test \" + System.currentTimeMillis();\n\n        // create the test node, under a path that's specific to this class to allow collisions\n        secondFolderOfContentPath = \"\" + System.currentTimeMillis();\n        final String url = HTTP_BASE_URL + \"/\" + getClass().getSimpleName() + \"/\" + secondFolderOfContentPath + SlingPostConstants.DEFAULT_CREATE_SUFFIX;\n        final Map<String,String> props = new HashMap<String,String>();\n        props.put(\"text\", testText);\n        displayUrl = testClient.createNode(url, props);\n\n        // the rendering script goes under /apps in the repository\n        scriptPath = \"/apps/nt/unstructured\";\n        testClient.mkdirs(WEBDAV_BASE_URL, scriptPath);\n    }\n\n    public void testWithoutScriptTxt() throws IOException {\n        final String content = getContent(displayUrl + \".txt\", CONTENT_TYPE_PLAIN);\n        assertContains(content, \"dumped by PlainTextRendererServlet\");\n    }\n\n    public void testWithoutScriptHtml() throws IOException {\n        final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n        assertContains(content, \"dumped by HtmlRendererServlet\");\n    }\n\n    public void testMiniScriptHtml() throws IOException {\n        final String toDelete = uploadTestScript(\"no-code.esp\",\"html.esp\");\n        try {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            assertEquals(\"There's no code in this script, just this constant string\",content);\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n    \n    public void testPrint() throws IOException {\n        final String toDelete = uploadTestScript(\"print.esp\",\"html.esp\");\n        try {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            final String expected = \"print.esp ends\";\n            assertContains(content, expected);\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n    \n    public void testEspHtml() throws IOException {\n        final String toDelete = uploadTestScript(\"rendering-test.esp\",\"html.esp\");\n        try {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            assertContains(content, \"ESP template\");\n            assertContains(content, \"<p>\" + testText + \"</p>\");\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n\n    public void testEspXml() throws IOException {\n        final String toDelete = uploadTestScript(\"rendering-test.esp\",\"xml.esp\");\n        try {\n            final String content = getContent(displayUrl + \".xml\", CONTENT_TYPE_XML);\n            assertContains(content, \"ESP template\");\n            assertContains(content, \"<p>\" + testText + \"</p>\");\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n\n    public void TODO_FAILS_testEspHtmlWithContentBasedPath() throws IOException {\n\n        // make sure there's no leftover rendering script\n        {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            assertFalse(\"Content must not include ESP marker before test\",content.contains(\"ESP template\"));\n        }\n\n        // put our script in the /apps/<second folder level of content> (SLING-125)\n        final String path = \"/apps/\" + secondFolderOfContentPath;\n        testClient.mkdirs(WEBDAV_BASE_URL, path);\n        final String toDelete = uploadTestScript(path,\"rendering-test.esp\",\"html.esp\");\n        try {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            assertContains(content, \"ESP template\");\n            assertContains(content, \"<p>\" + testText + \"</p>\");\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n\n    public void testEspPlain() throws IOException {\n        final String toDelete = uploadTestScript(\"rendering-test.esp\",\"txt.esp\");\n        try {\n            final String content = getContent(displayUrl + \".txt\", CONTENT_TYPE_PLAIN);\n            assertContains(content, \"ESP template\");\n            assertContains(content, \"<p>\" + testText + \"</p>\");\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n\n    public void TODO_FAILS_testVltHtml() throws IOException {\n        final String toDelete = uploadTestScript(\"rendering-test.vlt\",\"html.vlt\");\n        try {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            assertTrue(\"Content includes VLT marker\",content.contains(\"Velocity template\"));\n            assertTrue(\"Content contains formatted test text\",content.contains(\"<p><b>\" + testText + \"</b></p>\"));\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n\n    public void TODO_FAILS_testJsHtml() throws IOException {\n        final String toDelete = uploadTestScript(\"rendering-test.ecma\",\"html.ecma\");\n        try {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            assertTrue(\"Content includes JS marker\",content.contains(\"Raw javascript template\"));\n            assertTrue(\"Content contains formatted test text\",content.contains(\"<p><em>\" + testText + \"</em></p>\"));\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n\n    public void TODO_FAILS_testFtlHtml() throws IOException {\n        final String toDelete = uploadTestScript(\"rendering-test.ftl\",\"html.ftl\");\n        try {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            assertTrue(\"Content includes FreeMarker marker\",content.contains(\"FreeMarker template\"));\n            assertTrue(\"Content contains formatted test text\",content.contains(\"<p><span>\" + testText + \"</span></p>\"));\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n\n    public void TODO_FAILS_testErbHtml() throws IOException {\n        final String toDelete = uploadTestScript(\"rendering-test.erb\",\"html.erb\");\n        try {\n            final String content = getContent(displayUrl + \".html\", CONTENT_TYPE_HTML);\n            assertTrue(\"Content includes Ruby marker\",content.contains(\"Ruby template\"));\n            assertTrue(\"Content contains formatted test text\",content.contains(\"<p><span>\" + testText + \"</span></p>\"));\n        } finally {\n            testClient.delete(toDelete);\n        }\n    }\n}\n","binary":"false","copies":"32","sample_repo_name":"apache/sling","sample_ref":"refs/heads/trunk","sample_path":"launchpad/integration-tests/src/main/java/org/apache/sling/launchpad/webapp/integrationtest/NodetypeRenderingTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"04f181503906c44a3fa412e20c6c340b94580fa2","size":"1461","content":"/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.apache.hadoop.mapred;\n\nimport java.util.Comparator;\n\n/**\n * Order {@link JobInProgress} objects by priority and then by submit time, as\n * in the default scheduler in Hadoop.\n */\npublic class FifoJobComparator implements Comparator<JobInProgress> {\n  public int compare(JobInProgress j1, JobInProgress j2) {\n    int res = j1.getPriority().compareTo(j2.getPriority());\n    if (res == 0) {\n      if (j1.getStartTime() < j2.getStartTime()) {\n        res = -1;\n      } else {\n        res = (j1.getStartTime() == j2.getStartTime() ? 0 : 1);\n      }\n    }\n    if (res == 0) {\n      res = j1.hashCode() - j2.hashCode();\n    }\n    return res;\n  }\n}\n","binary":"false","copies":"52","sample_repo_name":"toddlipcon/hadoop","sample_ref":"refs/heads/trunk","sample_path":"src/contrib/fairscheduler/src/java/org/apache/hadoop/mapred/FifoJobComparator.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bb858843b972b6dc7ad020b6d85fe7cb9914c008","size":"6712","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.apache.cassandra.utils.memory;\n\nimport java.util.concurrent.atomic.AtomicLongFieldUpdater;\n\nimport org.apache.cassandra.utils.concurrent.WaitQueue;\n\n\n/**\n * Represents an amount of memory used for a given purpose, that can be allocated to specific tasks through\n * child MemtableAllocator objects.\n */\npublic abstract class MemtablePool\n{\n    final MemtableCleanerThread<?> cleaner;\n\n    // the total memory used by this pool\n    public final SubPool onHeap;\n    public final SubPool offHeap;\n\n    final WaitQueue hasRoom = new WaitQueue();\n\n    MemtablePool(long maxOnHeapMemory, long maxOffHeapMemory, float cleanThreshold, Runnable cleaner)\n    {\n        this.onHeap = getSubPool(maxOnHeapMemory, cleanThreshold);\n        this.offHeap = getSubPool(maxOffHeapMemory, cleanThreshold);\n        this.cleaner = getCleaner(cleaner);\n        if (this.cleaner != null)\n            this.cleaner.start();\n    }\n\n    SubPool getSubPool(long limit, float cleanThreshold)\n    {\n        return new SubPool(limit, cleanThreshold);\n    }\n\n    MemtableCleanerThread<?> getCleaner(Runnable cleaner)\n    {\n        return cleaner == null ? null : new MemtableCleanerThread<>(this, cleaner);\n    }\n\n    public abstract boolean needToCopyOnHeap();\n    public abstract MemtableAllocator newAllocator();\n\n    /**\n     * Note the difference between acquire() and allocate(); allocate() makes more resources available to all owners,\n     * and acquire() makes shared resources unavailable but still recorded. An Owner must always acquire resources,\n     * but only needs to allocate if there are none already available. This distinction is not always meaningful.\n     */\n    public class SubPool\n    {\n\n        // total memory/resource permitted to allocate\n        public final long limit;\n\n        // ratio of used to spare (both excluding 'reclaiming') at which to trigger a clean\n        public final float cleanThreshold;\n\n        // total bytes allocated and reclaiming\n        volatile long allocated;\n        volatile long reclaiming;\n\n        // a cache of the calculation determining at what allocation threshold we should next clean\n        volatile long nextClean;\n\n        public SubPool(long limit, float cleanThreshold)\n        {\n            this.limit = limit;\n            this.cleanThreshold = cleanThreshold;\n        }\n\n        /** Methods for tracking and triggering a clean **/\n\n        boolean needsCleaning()\n        {\n            // use strictly-greater-than so we don't clean when limit is 0\n            return used() > nextClean && updateNextClean();\n        }\n\n        void maybeClean()\n        {\n            if (needsCleaning() && cleaner != null)\n                cleaner.trigger();\n        }\n\n        private boolean updateNextClean()\n        {\n            while (true)\n            {\n                long current = nextClean;\n                long reclaiming = this.reclaiming;\n                long next =  reclaiming + (long) (this.limit * cleanThreshold);\n                if (current == next || nextCleanUpdater.compareAndSet(this, current, next))\n                    return used() > next;\n            }\n        }\n\n        /** Methods to allocate space **/\n\n        boolean tryAllocate(long size)\n        {\n            while (true)\n            {\n                long cur;\n                if ((cur = allocated) + size > limit)\n                    return false;\n                if (allocatedUpdater.compareAndSet(this, cur, cur + size))\n                    return true;\n            }\n        }\n\n        /**\n         * apply the size adjustment to allocated, bypassing any limits or constraints. If this reduces the\n         * allocated total, we will signal waiters\n         */\n        private void adjustAllocated(long size)\n        {\n            while (true)\n            {\n                long cur = allocated;\n                if (allocatedUpdater.compareAndSet(this, cur, cur + size))\n                    return;\n            }\n        }\n\n        void allocated(long size)\n        {\n            assert size >= 0;\n            if (size == 0)\n                return;\n\n            adjustAllocated(size);\n            maybeClean();\n        }\n\n        void acquired(long size)\n        {\n            maybeClean();\n        }\n\n        void released(long size)\n        {\n            assert size >= 0;\n            adjustAllocated(-size);\n            hasRoom.signalAll();\n        }\n\n        void reclaiming(long size)\n        {\n            if (size == 0)\n                return;\n            reclaimingUpdater.addAndGet(this, size);\n        }\n\n        void reclaimed(long size)\n        {\n            if (size == 0)\n                return;\n\n            reclaimingUpdater.addAndGet(this, -size);\n            if (updateNextClean() && cleaner != null)\n                cleaner.trigger();\n        }\n\n        public long used()\n        {\n            return allocated;\n        }\n\n        public float reclaimingRatio()\n        {\n            float r = reclaiming / (float) limit;\n            if (Float.isNaN(r))\n                return 0;\n            return r;\n        }\n\n        public float usedRatio()\n        {\n            float r = allocated / (float) limit;\n            if (Float.isNaN(r))\n                return 0;\n            return r;\n        }\n\n        public MemtableAllocator.SubAllocator newAllocator()\n        {\n            return new MemtableAllocator.SubAllocator(this);\n        }\n\n        public WaitQueue hasRoom()\n        {\n            return hasRoom;\n        }\n    }\n\n    private static final AtomicLongFieldUpdater<SubPool> reclaimingUpdater = AtomicLongFieldUpdater.newUpdater(SubPool.class, \"reclaiming\");\n    private static final AtomicLongFieldUpdater<SubPool> allocatedUpdater = AtomicLongFieldUpdater.newUpdater(SubPool.class, \"allocated\");\n    private static final AtomicLongFieldUpdater<SubPool> nextCleanUpdater = AtomicLongFieldUpdater.newUpdater(SubPool.class, \"nextClean\");\n\n}\n","binary":"false","copies":"75","sample_repo_name":"codefollower/Cassandra-Research","sample_ref":"refs/heads/trunk","sample_path":"src/java/org/apache/cassandra/utils/memory/MemtablePool.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"44f331789f41dc595525fe45ad0f1f639cb20ea7","size":"1946","content":"package com.shapesecurity.shift.parser.miscellaneous;\n\nimport com.shapesecurity.functional.data.ImmutableList;\nimport com.shapesecurity.functional.data.Maybe;\nimport com.shapesecurity.shift.ast.*;\nimport com.shapesecurity.shift.ast.operators.UpdateOperator;\nimport com.shapesecurity.shift.parser.ParserTestCase;\nimport com.shapesecurity.shift.parser.JsError;\n\nimport org.junit.Test;\n\npublic class SemicolonsTest extends ParserTestCase {\n    @Test\n    public void testStatements() throws JsError {\n        testScript(\"function f() { return\\n; }\", new FunctionDeclaration(false, new BindingIdentifier(\"f\"), new FormalParameters(ImmutableList.nil(), Maybe.nothing()),\n                new FunctionBody(ImmutableList.nil(), ImmutableList.list(new ReturnStatement(Maybe.nothing())))));\n\n        testScript(\"if(null) null\\n;else null;\", new IfStatement(\n                new LiteralNullExpression(),\n                new ExpressionStatement(new LiteralNullExpression()),\n                Maybe.just(new ExpressionStatement(new LiteralNullExpression()))\n        ));\n    }\n\n    @Test\n    public void testImportExport() throws JsError {\n        testModule(\"import \\\"a\\\"\\n;\", new Module(\n                ImmutableList.nil(),\n                ImmutableList.list(\n                new Import(Maybe.nothing(), ImmutableList.nil(), \"a\"))));\n\n        testModule(\"export {}\\n;\", new Module(\n                ImmutableList.nil(),\n                ImmutableList.list(\n                        new ExportLocals(ImmutableList.nil()))));\n\n        testModule(\"export function f(){}\\n;\", new Module(\n                ImmutableList.nil(),\n                ImmutableList.list(\n                        new Export(new FunctionDeclaration(false, new BindingIdentifier(\"f\"), new FormalParameters(ImmutableList.nil(), Maybe.nothing()),\n                                new FunctionBody(ImmutableList.nil(), ImmutableList.nil()))),\n                        new EmptyStatement())));\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"shapesecurity/shift-java","sample_ref":"refs/heads/es2016","sample_path":"src/test/java/com/shapesecurity/shift/parser/miscellaneous/SemicolonsTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"805b901c8e5ec6837e256f3ce70d4280ef57b4b7","size":"4474","content":"/*\n * Copyright 2014 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.shapesecurity.shift.reducer;\n\nimport com.shapesecurity.functional.data.ImmutableList;\nimport com.shapesecurity.functional.data.Maybe;\nimport com.shapesecurity.shift.ast.IdentifierExpression;\nimport com.shapesecurity.shift.ast.ObjectExpression;\nimport com.shapesecurity.shift.ast.ReturnStatement;\nimport com.shapesecurity.shift.ast.Script;\nimport com.shapesecurity.shift.parser.JsError;\nimport com.shapesecurity.shift.parser.Parser;\n\nimport org.jetbrains.annotations.NotNull;\nimport org.junit.Test;\n\nimport java.io.IOException;\n\npublic class ReducerTest extends VisitorTestCase {\n    private void count(String source, int expectedCount, Counter counter) throws JsError {\n        Script script = Parser.parseScript(source);\n        assertEquals(expectedCount, Director.reduceScript(counter, script).intValue());\n    }\n\n    private void countLibrary(String fileName, int expectedCount, Counter counter) throws JsError, IOException {\n        String source = readFile(\"libraries/\" + fileName);\n        Script script = Parser.parseScript(source);\n        assertEquals(expectedCount, Director.reduceScript(counter, script).intValue());\n    }\n\n    @Test\n    public void testSimpleCounter() throws JsError {\n        count(\"({})\", 1, new Counter() {\n            @NotNull\n            @Override\n            public Integer reduceObjectExpression(\n                    @NotNull ObjectExpression node,\n                    @NotNull ImmutableList<Integer> properties) {\n                return 1;\n            }\n        });\n\n        count(\"({a:1,b:2})\", 1, new Counter() {\n            @NotNull\n            @Override\n            public Integer reduceObjectExpression(\n                    @NotNull ObjectExpression node,\n                    @NotNull ImmutableList<Integer> properties) {\n                return 1;\n            }\n        });\n\n        count(\"{a:1,b}\", 0, new Counter() {\n            @NotNull\n            @Override\n            public Integer reduceObjectExpression(\n                    @NotNull ObjectExpression node,\n                    @NotNull ImmutableList<Integer> properties) {\n                return 1;\n            }\n        });\n\n        count(\"{a:1,b}\", 0, new Counter() {\n            @NotNull\n            @Override\n            public Integer reduceObjectExpression(\n                    @NotNull ObjectExpression node,\n                    @NotNull ImmutableList<Integer> properties) {\n                return 1;\n            }\n        });\n\n        count(\"+{get a() { return 0; }, set a(v) { return v; } }\", 1, new Counter() {\n            @NotNull\n            @Override\n            public Integer reduceIdentifierExpression(@NotNull IdentifierExpression node) {\n                return 1;\n            }\n        });\n\n        count(\"+{get a() { return 0; }, set a(v) { return v; } }\", 2, new Counter() {\n            @NotNull\n            @Override\n            public Integer reduceReturnStatement(\n                    @NotNull ReturnStatement node,\n                    @NotNull Maybe<Integer> expression) {\n                return expression.orJust(0) + 1;\n            }\n        });\n    }\n\n    @SuppressWarnings(\"MagicNumber\")\n    @Test\n    public void testLibraryCounter() throws JsError, IOException {\n        Counter counter = new Counter() {\n            @NotNull\n            @Override\n            public Integer reduceReturnStatement(\n                    @NotNull ReturnStatement node,\n                    @NotNull Maybe<Integer> expression) {\n                return expression.orJust(0) + 1;\n            }\n        };\n        countLibrary(\"backbone-1.1.0.js\", 123, counter);\n        countLibrary(\"underscore-1.5.2.js\", 185, counter);\n        countLibrary(\"jquery-1.9.1.js\", 568, counter);\n        countLibrary(\"angular-1.2.5.js\", 719, counter);\n        countLibrary(\"mootools-1.4.5.js\", 696, counter);\n        countLibrary(\"yui-3.12.0.js\", 205, counter);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"shapesecurity/shift-java","sample_ref":"refs/heads/es2016","sample_path":"src/test/java/com/shapesecurity/shift/reducer/ReducerTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6e265c51090c509d7719467ec452f020c73741bb","size":"3996","content":"/*================================================================================\r\nCopyright (c) 2008 VMware, Inc. All Rights Reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification, \r\nare permitted provided that the following conditions are met:\r\n\r\n * Redistributions of source code must retain the above copyright notice, \r\nthis list of conditions and the following disclaimer.\r\n\r\n * Redistributions in binary form must reproduce the above copyright notice, \r\nthis list of conditions and the following disclaimer in the documentation \r\nand/or other materials provided with the distribution.\r\n\r\n * Neither the name of VMware, Inc. nor the names of its contributors may be used\r\nto endorse or promote products derived from this software without specific prior \r\nwritten permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \r\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \r\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \r\nIN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, \r\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \r\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \r\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \r\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \r\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \r\nPOSSIBILITY OF SUCH DAMAGE.\r\n================================================================================*/\r\n\r\npackage com.vmware.vim25.mo.samples.network;\r\n\r\nimport java.net.URL;\r\n\r\nimport com.vmware.vim25.HostService;\r\nimport com.vmware.vim25.HostServiceInfo;\r\nimport com.vmware.vim25.mo.Folder;\r\nimport com.vmware.vim25.mo.HostServiceSystem;\r\nimport com.vmware.vim25.mo.HostSystem;\r\nimport com.vmware.vim25.mo.InventoryNavigator;\r\nimport com.vmware.vim25.mo.ServiceInstance;\r\n\r\n/**\r\n * http://vijava.sf.net\r\n * @author Steve Jin\r\n */\r\n\r\npublic class FlipNetworkService\r\n{\r\n  public static void main(String[] args) throws Exception \r\n  {\r\n    if(args.length != 3)\r\n    {\r\n      System.out.println(\"Usage: java FlipNetworkService \" +\r\n          \"<url> <username> <password>\");\r\n      return;\r\n    }\r\n\r\n    ServiceInstance si = new ServiceInstance(\r\n        new URL(args[0]), args[1], args[2], true);\r\n\r\n    String hostname = \"sjin-dev1.eng.vmware.com\";\r\n    Folder rootFolder = si.getRootFolder();\r\n    HostSystem host = null;\r\n    host = (HostSystem) new InventoryNavigator(\r\n        rootFolder).searchManagedEntity(\"HostSystem\", hostname);\r\n\r\n    if(host==null)\r\n    {\r\n      System.out.println(\"Cannot find the host:\" + hostname);\r\n      si.getServerConnection().logout();\r\n      return;\r\n    }\r\n    \r\n    HostServiceSystem hss = host.getHostServiceSystem();\r\n    \r\n    HostServiceInfo hsi = hss.getServiceInfo();\r\n    HostService[] ss = hsi.getService();\r\n    for(int i=0; ss!=null && i<ss.length; i++)\r\n    {\r\n      printService(ss[i]);\r\n      if(ss[i].isRunning())\r\n      {\r\n        hss.stopService(ss[i].getKey());\r\n        System.out.println(\"Service stopped.\");\r\n      }\r\n      else\r\n      {\r\n        hss.startService(ss[i].getKey());\r\n        System.out.println(\"Service started.\");\r\n      }\r\n    }\r\n    si.getServerConnection().logout();\r\n  }\r\n  \r\n  static void printService(HostService si)\r\n  {\r\n    System.out.println(\"\\nKey:\" + si.getKey());\r\n    System.out.println(\"Label:\" + si.getLabel());\r\n    System.out.println(\"Policy:\" + si.getPolicy());\r\n    System.out.println(\"Required:\" + si.isRequired());\r\n    System.out.print(\"RuleSet:\");\r\n    String[] rules = si.getRuleset();\r\n    for(int j=0; rules!=null && j<rules.length; j++)\r\n    {\r\n      System.out.print(rules[j] + \" \");\r\n    }\r\n    System.out.println(\"\\nRunning:\" + si.isRunning());\r\n    System.out.println(\"Uninstallable:\" + si.isUninstallable());\r\n  }\r\n}\r\n","binary":"false","copies":"4","sample_repo_name":"yavijava/yavijava-samples","sample_ref":"refs/heads/gradle","sample_path":"src/main/java/com/vmware/vim25/mo/samples/network/FlipNetworkService.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3ac2713d3c2f254307e5fa21a529bb7ec09eb694","size":"2046","content":"/*================================================================================\nCopyright (c) 2013 Steve Jin. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification, \nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, \nthis list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, \nthis list of conditions and the following disclaimer in the documentation \nand/or other materials provided with the distribution.\n\n* Neither the name of VMware, Inc. nor the names of its contributors may be used\nto endorse or promote products derived from this software without specific prior \nwritten permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \nIN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, \nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE.\n================================================================================*/\n\npackage com.vmware.vim25;\n\n/**\n * @author Steve Jin (http://www.doublecloud.org)\n * @version 5.1\n */\n\n@SuppressWarnings(\"all\")\npublic class SnapshotIncompatibleDeviceInVm extends SnapshotFault {\n    public LocalizedMethodFault fault;\n\n    public LocalizedMethodFault getFault() {\n        return this.fault;\n    }\n\n    public void setFault(LocalizedMethodFault fault) {\n        this.fault = fault;\n    }\n}","binary":"false","copies":"5","sample_repo_name":"yavijava/yavijava","sample_ref":"refs/heads/gradle","sample_path":"src/main/java/com/vmware/vim25/SnapshotIncompatibleDeviceInVm.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"05a9e4788896854e11668ec6b44b186f98fe7031","size":"2038","content":"/*================================================================================\nCopyright (c) 2013 Steve Jin. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification, \nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, \nthis list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, \nthis list of conditions and the following disclaimer in the documentation \nand/or other materials provided with the distribution.\n\n* Neither the name of VMware, Inc. nor the names of its contributors may be used\nto endorse or promote products derived from this software without specific prior \nwritten permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \nIN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, \nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE.\n================================================================================*/\n\npackage com.vmware.vim25;\n\n/**\n * @author Steve Jin (http://www.doublecloud.org)\n * @version 5.1\n */\n\n@SuppressWarnings(\"all\")\npublic class ClusterCreatedEvent extends ClusterEvent {\n    public FolderEventArgument parent;\n\n    public FolderEventArgument getParent() {\n        return this.parent;\n    }\n\n    public void setParent(FolderEventArgument parent) {\n        this.parent = parent;\n    }\n}","binary":"false","copies":"5","sample_repo_name":"yavijava/yavijava","sample_ref":"refs/heads/gradle","sample_path":"src/main/java/com/vmware/vim25/ClusterCreatedEvent.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"af4289707959c804df1eaa9cde4925c76cea04a9","size":"2202","content":"/*================================================================================\nCopyright (c) 2013 Steve Jin. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification, \nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, \nthis list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, \nthis list of conditions and the following disclaimer in the documentation \nand/or other materials provided with the distribution.\n\n* Neither the name of VMware, Inc. nor the names of its contributors may be used\nto endorse or promote products derived from this software without specific prior \nwritten permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \nIN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, \nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE.\n================================================================================*/\n\npackage com.vmware.vim25;\n\n/**\n * @author Steve Jin (http://www.doublecloud.org)\n * @version 5.1\n */\n\n@SuppressWarnings(\"all\")\npublic class MultipleCertificatesVerifyFaultThumbprintData extends DynamicData {\n    public int port;\n    public String thumbprint;\n\n    public int getPort() {\n        return this.port;\n    }\n\n    public String getThumbprint() {\n        return this.thumbprint;\n    }\n\n    public void setPort(int port) {\n        this.port = port;\n    }\n\n    public void setThumbprint(String thumbprint) {\n        this.thumbprint = thumbprint;\n    }\n}","binary":"false","copies":"5","sample_repo_name":"yavijava/yavijava","sample_ref":"refs/heads/gradle","sample_path":"src/main/java/com/vmware/vim25/MultipleCertificatesVerifyFaultThumbprintData.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6294e01302fc1e3d28af605121f1d66ac4b7503f","size":"1830","content":"/*================================================================================\nCopyright (c) 2013 Steve Jin. All Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without modification, \nare permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, \nthis list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice, \nthis list of conditions and the following disclaimer in the documentation \nand/or other materials provided with the distribution.\n\n* Neither the name of VMware, Inc. nor the names of its contributors may be used\nto endorse or promote products derived from this software without specific prior \nwritten permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND \nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. \nIN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, \nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR \nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, \nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) \nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE \nPOSSIBILITY OF SUCH DAMAGE.\n================================================================================*/\n\npackage com.vmware.vim25;\n\n/**\n * @author Steve Jin (http://www.doublecloud.org)\n * @version 5.1\n */\n\n@SuppressWarnings(\"all\")\npublic class OvfConnectedDevice extends OvfHardwareExport {\n}","binary":"false","copies":"5","sample_repo_name":"yavijava/yavijava","sample_ref":"refs/heads/gradle","sample_path":"src/main/java/com/vmware/vim25/OvfConnectedDevice.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6a1130865ab89269b4fad7f95a6a9699344f708b","size":"873","content":"package com.google.android.apps.common.testing.ui.espresso;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport java.util.List;\n\n/**\n * Indicates that an {@link IdlingResource}, which has been registered with the framework, has not\n * idled within the allowed time.\n *\n * Since it is not safe to proceed with test execution while the registered resource is busy (as it\n * is likely to cause inconsistent results in the test), this is an unrecoverable error. The test\n * author should verify that the {@link IdlingResource} interface has been implemented correctly.\n */\npublic final class IdlingResourceTimeoutException extends RuntimeException\n    implements EspressoException {\n\n  public IdlingResourceTimeoutException(List<String> resourceNames) {\n    super(String.format(\"Wait for %s to become idle timed out\", checkNotNull(resourceNames)));\n  }\n}\n","binary":"false","copies":"8","sample_repo_name":"JakeWharton/double-espresso","sample_ref":"refs/heads/gradle","sample_path":"espresso/src/main/java/com/google/android/apps/common/testing/ui/espresso/IdlingResourceTimeoutException.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c00d685ce46f4e0dc1e178a44a738b1b93c338ee","size":"541","content":"package org.visallo.web.clientapi.model;\n\npublic class ClientApiEdgeInfo {\n    private final String edgeId;\n    private final String label;\n    private final String vertexId;\n\n    public ClientApiEdgeInfo(String edgeId, String label, String vertexId) {\n        this.edgeId = edgeId;\n        this.label = label;\n        this.vertexId = vertexId;\n    }\n\n    public String getEdgeId() {\n        return edgeId;\n    }\n\n    public String getLabel() {\n        return label;\n    }\n\n    public String getVertexId() {\n        return vertexId;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"v5analytics/visallo","sample_ref":"refs/heads/master","sample_path":"web/client-api/src/main/java/org/visallo/web/clientapi/model/ClientApiEdgeInfo.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3be28cebeec9cbd93ecffd5f6a4bd3cbf40a8aeb","size":"2939","content":"package org.maxgamer.rs.network.io.packet.player;\n\nimport org.maxgamer.rs.model.action.WalkAction;\nimport org.maxgamer.rs.model.entity.mob.persona.player.Player;\nimport org.maxgamer.rs.model.item.ItemStack;\nimport org.maxgamer.rs.model.map.Location;\nimport org.maxgamer.rs.model.map.object.GameObject;\nimport org.maxgamer.rs.model.map.path.AStar;\nimport org.maxgamer.rs.model.map.path.Path;\nimport org.maxgamer.rs.network.io.packet.PacketProcessor;\nimport org.maxgamer.rs.network.io.packet.RSIncomingPacket;\n\nimport co.paralleluniverse.fibers.SuspendExecution;\n\n/**\n * @author netherfoam\n */\npublic class ItemOnObjectHandler implements PacketProcessor<Player> {\n\tpublic static final int OPCODE = 11;\n\n\t@Override\n\tpublic void process(final Player player, RSIncomingPacket in) throws Exception {\n\t\t//Opcode 30, 4 bytes\n\t\t\n\t\t//in.readLEInt(); //not sure\n\t\tin.readLEInt();\n\t\tin.readLEShortA();\n\t\tint itemUsed = in.readShort();\n\t\tint objX = in.readShort();\n\t\t@SuppressWarnings(\"unused\")\n\t\tboolean run = in.readByteS() != 0 ? true : false;\n\t\tint objectId = in.readShortA();\n\t\tint objY = in.readLEShortA();\n\t\t\n\t\tLocation l = new Location(player.getMap(), objX, objY, player.getLocation().z);\n\t\t\n\t\tif(player.getLocation().near(l, 25) == false){\n\t\t\tplayer.getCheats().log(20, \"Player attempted to use an item on an object that was too far away!\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfinal ItemStack item;\n\t\ttry{\n\t\t\titem = ItemStack.create(itemUsed);\n\t\t}\n\t\tcatch(RuntimeException e){\n\t\t\tplayer.getCheats().log(1, \"Player attempted to use an item on an object. The item ID does not exist.\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif(player.getInventory().contains(item) == false){\n\t\t\tplayer.getCheats().log(20, \"Player attempted to use an item they do not have on an object\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tfor(final GameObject g : l.getNearby(GameObject.class, 0)){\n\t\t\tif(g.getId() == objectId){\n\t\t\t\tif(g.getName() == null || g.getName().equals(\"null\")){\n\t\t\t\t\tplayer.getCheats().log(10, \"Player attempted to use an item on an object which has no name.\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tAStar finder = new AStar(20);\n\t\t\t\tPath path = finder.findPath(player.getLocation(), g.getLocation(), g.getLocation().add(g.getSizeX() - 1, g.getSizeY() - 1), player.getSizeX(), player.getSizeY(), g);\n\t\t\t\t\n\t\t\t\tif (path.hasFailed()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!path.isEmpty()) {\n\t\t\t\t\t// Given our pathfinding algorithm, it ignores the object.\n\t\t\t\t\t// Thus the path leads into the corner of the object. So we\n\t\t\t\t\t// delete the last step, if one is created.\n\t\t\t\t\tpath.removeLast();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tplayer.getActions().clear();\n\t\t\t\tif (!path.isEmpty()) {\n\t\t\t\t\tWalkAction walk = new WalkAction(player, path) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void run() throws SuspendExecution {\n\t\t\t\t\t\t\tsuper.run();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Then use the object\n\t\t\t\t\t\t\tplayer.use(g, item);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tplayer.getActions().queue(walk);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tplayer.use(g, item);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tplayer.use(g, item);\n\t\t\t}\n\t\t}\n\t}\n}","binary":"false","copies":"1","sample_repo_name":"netherfoam/Titan","sample_ref":"refs/heads/master","sample_path":"src/org/maxgamer/rs/network/io/packet/player/ItemOnObjectHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"34a37334a1126528172b34f11573aa3abdcc4a24","size":"2301","content":"package com.homeautomationclient;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.view.KeyEvent;\n\nimport com.facebook.react.LifecycleState;\nimport com.facebook.react.ReactInstanceManager;\nimport com.facebook.react.ReactRootView;\nimport com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;\nimport com.facebook.react.shell.MainReactPackage;\nimport com.facebook.soloader.SoLoader;\n\npublic class MainActivity extends Activity implements DefaultHardwareBackBtnHandler {\n\n    private ReactInstanceManager mReactInstanceManager;\n    private ReactRootView mReactRootView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mReactRootView = new ReactRootView(this);\n\n        mReactInstanceManager = ReactInstanceManager.builder()\n                .setApplication(getApplication())\n                .setBundleAssetName(\"index.android.bundle\")\n                .setJSMainModuleName(\"index.android\")\n                .addPackage(new MainReactPackage())\n                .setUseDeveloperSupport(BuildConfig.DEBUG)\n                .setInitialLifecycleState(LifecycleState.RESUMED)\n                .build();\n\n        mReactRootView.startReactApplication(mReactInstanceManager, \"HomeAutomationClient\", null);\n\n        setContentView(mReactRootView);\n    }\n\n    @Override\n    public boolean onKeyUp(int keyCode, KeyEvent event) {\n        if (keyCode == KeyEvent.KEYCODE_MENU && mReactInstanceManager != null) {\n            mReactInstanceManager.showDevOptionsDialog();\n            return true;\n        }\n        return super.onKeyUp(keyCode, event);\n    }\n\n    @Override\n    public void onBackPressed() {\n      if (mReactInstanceManager != null) {\n        mReactInstanceManager.onBackPressed();\n      } else {\n        super.onBackPressed();\n      }\n    }\n\n    @Override\n    public void invokeDefaultOnBackPressed() {\n      super.onBackPressed();\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n\n        if (mReactInstanceManager != null) {\n            mReactInstanceManager.onPause();\n        }\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n\n        if (mReactInstanceManager != null) {\n            mReactInstanceManager.onResume(this);\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"chkr1011/CK.HomeAutomation","sample_ref":"refs/heads/master","sample_path":"App/HA4IoT.NativeApp/android/app/src/main/java/com/homeautomationclient/MainActivity.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"496a05ece7de623470e826776c53f28b96e98118","size":"2401","content":"package com.ibaguo.mqa.solr;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.InputStreamReader;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.List;\nimport java.util.Map;\n\nimport com.google.gson.Gson;\n\npublic class TranslateApi {\n\n\t\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t\tString dst = translate(\"\u767e\u5ea6\u7ffb\u8bd1API\u6d4b\u8bd5\");\n\n\t}\n\n\tpublic static String translate(String source) {\n\t\tString api_url;\n\t\ttry {\n\n\t\t\tFileReader fr = new FileReader(new File(\"data/questions-train.txt\"));\n\t\t\tBufferedReader reader = new BufferedReader(fr);\n\t\t\tString ll = \"\";\n\t\t\twhile ((ll = reader.readLine()) != null) {\n\t\t\t\tString result = \"\";\n\t\t\t\tString str = ll.substring(2);\n\t\t\t\tapi_url = new StringBuilder(\n\t\t\t\t\t\t\"http://openapi.baidu.com/public/2.0/bmt/translate?client_id=OG5Bkftx5iVgTLSEvqu4TeOv&from=auto&to=auto&\")\n\t\t\t\t\t\t\t\t.append(\"&q=\" + str).toString();\n\t\t\t\tString urlNameString = api_url;\n\t\t\t\tURL realUrl = new URL(urlNameString);\n\t\t\t\t// \u6253\u5f00\u548cURL\u4e4b\u95f4\u7684\u8fde\u63a5\n\t\t\t\tURLConnection connection = realUrl.openConnection();\n\t\t\t\t// \u8bbe\u7f6e\u901a\u7528\u7684\u8bf7\u6c42\u5c5e\u6027\n\t\t\t\tconnection.setRequestProperty(\"accept\", \"*/*\");\n\t\t\t\tconnection.setRequestProperty(\"connection\", \"Keep-Alive\");\n\t\t\t\tconnection.setRequestProperty(\"user-agent\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)\");\n\t\t\t\t// \u5efa\u7acb\u5b9e\u9645\u7684\u8fde\u63a5\n\t\t\t\tconnection.connect();\n\t\t\t\t// \u83b7\u53d6\u6240\u6709\u54cd\u5e94\u5934\u5b57\u6bb5\n\t\t\t\tMap<String, List<String>> map = connection.getHeaderFields();\n\t\t\t\t// \u904d\u5386\u6240\u6709\u7684\u54cd\u5e94\u5934\u5b57\u6bb5\n//\t\t\t\tfor (String key : map.keySet()) {\n//\t\t\t\t\tSystem.out.println(key + \"--->\" + map.get(key));\n//\t\t\t\t}\n\t\t\t\t// \u5b9a\u4e49 BufferedReader\u8f93\u5165\u6d41\u6765\u8bfb\u53d6URL\u7684\u54cd\u5e94\n\t\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n\t\t\t\tString line;\n\t\t\t\twhile ((line = in.readLine()) != null) {\n\t\t\t\t\tresult += line;\n\t\t\t\t}\n//\t\t\t\tSystem.out.println(result);\n\t\t\t\tGson gson=new Gson();\n\t\t\t\tTranslateMode translateMode=gson.fromJson(result, TranslateMode.class);\n\t\t\t\t\n\t\t\t\tif(translateMode!=null&&translateMode.getTrans_result()!=null&&translateMode.getTrans_result().size()==1)\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(new String(translateMode.getTrans_result().get(0).getDst().getBytes(),\"UTF8\"));\n\t\t\t\t} \n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n}","binary":"false","copies":"1","sample_repo_name":"changwu/mqa","sample_ref":"refs/heads/master","sample_path":"src/com/ibaguo/mqa/solr/TranslateApi.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"dd5e13fcc6df6367e06774a3eb58b56a67faeee7","size":"2793","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\npackage ims.nursing.forms.careplanaddaction;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic final class ConfigFlags extends ims.framework.FormConfigFlags implements Serializable\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tpublic final CAREPLAN_ACTION_TEXT_LENGTHClass CAREPLAN_ACTION_TEXT_LENGTH;\r\n\r\n\tpublic ConfigFlags(ims.framework.ConfigFlag configFlags)\r\n\t{\r\n\t\tsuper(configFlags);\r\n\r\n\t\tCAREPLAN_ACTION_TEXT_LENGTH = new CAREPLAN_ACTION_TEXT_LENGTHClass(configFlags);\r\n\t}\r\n\r\n\tpublic final class CAREPLAN_ACTION_TEXT_LENGTHClass implements Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\tprivate final ims.framework.ConfigFlag configFlags;\r\n\r\n\t\tpublic CAREPLAN_ACTION_TEXT_LENGTHClass(ims.framework.ConfigFlag configFlags)\r\n\t\t{\r\n\t\t\tthis.configFlags = configFlags;\r\n\t\t}\r\n\r\n\t\tpublic Integer getValue()\r\n\t\t{\r\n\t\t\treturn (Integer)configFlags.get(\"CAREPLAN_ACTION_TEXT_LENGTH\");\r\n\t\t}\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Nursing/src/ims/nursing/forms/careplanaddaction/ConfigFlags.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"dfeadaa9bbc75fb376a3388c5ed3a3cca6a88e46","size":"1827","content":"/*******************************************************************************\n * Copyright 2011, 2012 Chris Banes.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *******************************************************************************/\npackage io.apptik.multiview.galleryview.scaleimage.scrollerproxy;\n\nimport android.content.Context;\nimport android.widget.Scroller;\n\npublic class PreGingerScroller extends ScrollerProxy {\n\n    private final Scroller mScroller;\n\n    public PreGingerScroller(Context context) {\n        mScroller = new Scroller(context);\n    }\n\n    @Override\n    public boolean computeScrollOffset() {\n        return mScroller.computeScrollOffset();\n    }\n\n    @Override\n    public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY,\n                      int overX, int overY) {\n        mScroller.fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY);\n    }\n\n    @Override\n    public void forceFinished(boolean finished) {\n        mScroller.forceFinished(finished);\n    }\n\n    public boolean isFinished() {\n        return mScroller.isFinished();\n    }\n\n    @Override\n    public int getCurrX() {\n        return mScroller.getCurrX();\n    }\n\n    @Override\n    public int getCurrY() {\n        return mScroller.getCurrY();\n    }\n}","binary":"false","copies":"1","sample_repo_name":"apptik/MultiView","sample_ref":"refs/heads/master","sample_path":"galleryview/src/main/java/io/apptik/multiview/galleryview/scaleimage/scrollerproxy/PreGingerScroller.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"c9fb2c66e72cb58548f846a108f474af99942c88","size":"5718","content":"package org.nem.core.test;\n\nimport org.nem.core.model.*;\nimport org.nem.core.model.observers.*;\nimport org.nem.core.model.primitive.Amount;\nimport org.nem.core.serialization.*;\nimport org.nem.core.time.TimeInstant;\n\nimport java.util.*;\nimport java.util.function.Consumer;\n\n/**\n * A mock Transaction implementation.\n */\npublic class MockTransaction extends Transaction {\n\tprivate static final int TYPE = 124;\n\tprivate static final int VERSION = 1;\n\tpublic static final TimeInstant TIMESTAMP = new TimeInstant(1122448);\n\tpublic static final TimeInstant DEADLINE = TIMESTAMP.addHours(2);\n\tpublic static final Amount DEFAULT_FEE = Amount.fromNem(6);\n\n\tprivate int customField;\n\n\tprivate Collection<Account> otherAccounts = new ArrayList<>();\n\tprivate Collection<Transaction> childTransactions = new ArrayList<>();\n\n\tprivate Consumer<TransactionObserver> transferAction = o -> NotificationUtils.notifyDebit(o, this.getSigner(), this.getFee());\n\n\tprivate final List<Notification> notifications = new ArrayList<>();\n\tprivate int numTransferCalls;\n\n\t/**\n\t * Creates a mock transaction.\n\t */\n\tpublic MockTransaction() {\n\t\tthis(Utils.generateRandomAccount());\n\t}\n\n\t/**\n\t * Creates a mock transaction.\n\t *\n\t * @param sender The transaction sender's account.\n\t */\n\tpublic MockTransaction(final Account sender) {\n\t\tthis(sender, 0);\n\t}\n\n\t/**\n\t * Creates a mock transaction.\n\t *\n\t * @param timeStamp The transaction's timestamp.\n\t */\n\tpublic MockTransaction(final TimeInstant timeStamp) {\n\t\tthis(0, timeStamp);\n\t}\n\n\t/**\n\t * Creates a mock transaction.\n\t *\n\t * @param sender The transaction sender's account.\n\t * @param customField The initial custom field value.\n\t */\n\tpublic MockTransaction(final Account sender, final int customField) {\n\t\tsuper(TYPE, VERSION, TIMESTAMP, sender);\n\t\tthis.customField = customField;\n\t\tthis.setDeadline(DEADLINE);\n\t}\n\n\t/**\n\t * Creates a mock transaction.\n\t *\n\t * @param customField The initial custom field value.\n\t * @param timeStamp The transaction timestamp.\n\t */\n\tpublic MockTransaction(final int customField, final TimeInstant timeStamp) {\n\t\tthis(Utils.generateRandomAccount(), customField, timeStamp);\n\t}\n\n\t/**\n\t * Creates a mock transaction.\n\t *\n\t * @param sender The transaction sender's account.\n\t * @param customField The initial custom field value.\n\t * @param timeStamp The transaction timestamp.\n\t */\n\tpublic MockTransaction(final Account sender, final int customField, final TimeInstant timeStamp) {\n\t\tsuper(TYPE, VERSION, timeStamp, sender);\n\t\tthis.customField = customField;\n\t\tthis.setDeadline(timeStamp.addHours(2));\n\t}\n\n\t/**\n\t * Creates a mock transaction.\n\t * This overload is intended to be used for comparison tests.\n\t *\n\t * @param customField The initial custom field value.\n\t * @param timeStamp The transaction timestamp.\n\t */\n\tpublic MockTransaction(final int type, final int customField, final TimeInstant timeStamp) {\n\t\tsuper(type, VERSION, timeStamp, Utils.generateRandomAccount());\n\t\tthis.customField = customField;\n\t\tthis.setDeadline(timeStamp.addHours(2));\n\t}\n\n\t/**\n\t * Creates a mock transaction.\n\t * This overload is intended to be used for comparison tests.\n\t *\n\t * @param type The transaction type.\n\t * @param version The transaction version.\n\t * @param timeStamp The transaction timestamp.\n\t * @param fee The transaction fee.\n\t */\n\tpublic MockTransaction(final int type, final int version, final TimeInstant timeStamp, final long fee) {\n\t\tsuper(type, version, timeStamp, Utils.generateRandomAccount());\n\t\tthis.setFee(new Amount(fee));\n\t\tthis.setDeadline(timeStamp.addHours(2));\n\t}\n\n\t/**\n\t * Deserializes a MockTransaction.\n\t *\n\t * @param deserializer The deserializer to use.\n\t */\n\tpublic MockTransaction(final Deserializer deserializer) {\n\t\tsuper(deserializer.readInt(\"type\"), DeserializationOptions.VERIFIABLE, deserializer);\n\t\tthis.customField = deserializer.readInt(\"customField\");\n\t}\n\n\t/**\n\t * Gets the number of times transfer was called.\n\t *\n\t * @return The number of times transfer was called.\n\t */\n\tpublic int getNumTransferCalls() {\n\t\treturn this.numTransferCalls;\n\t}\n\n\t/**\n\t * Gets the custom field value.\n\t *\n\t * @return The custom field value.\n\t */\n\tpublic int getCustomField() {\n\t\treturn this.customField;\n\t}\n\n\t/**\n\t * Sets an action that should be executed when transfer is called.\n\t *\n\t * @param transferAction The action.\n\t */\n\tpublic void setTransferAction(final Consumer<TransactionObserver> transferAction) {\n\t\tthis.transferAction = transferAction;\n\t}\n\n\t/**\n\t * Adds a notification that gets fired when transfer is called.\n\t *\n\t * @param notification The notification.\n\t */\n\tpublic void addNotification(final Notification notification) {\n\t\tthis.notifications.add(notification);\n\t}\n\n\t/**\n\t * Sets the other accounts.\n\t *\n\t * @param accounts The other accounts.\n\t */\n\tpublic void setOtherAccounts(final Collection<Account> accounts) {\n\t\tthis.otherAccounts = accounts;\n\t}\n\n\t/**\n\t * Sets the child transactions.\n\t *\n\t * @param transactions The child transactions.\n\t */\n\tpublic void setChildTransactions(final Collection<Transaction> transactions) {\n\t\tthis.childTransactions = transactions;\n\t}\n\n\t@Override\n\tprotected Collection<Account> getOtherAccounts() {\n\t\treturn this.otherAccounts;\n\t}\n\n\t@Override\n\tpublic Collection<Transaction> getChildTransactions() {\n\t\treturn this.childTransactions;\n\t}\n\n\t@Override\n\tprotected void serializeImpl(final Serializer serializer) {\n\t\tsuper.serializeImpl(serializer);\n\t\tserializer.writeInt(\"customField\", this.customField);\n\t}\n\n\t@Override\n\tprotected void transfer(final TransactionObserver observer) {\n\t\tthis.transferAction.accept(observer);\n\t\tthis.notifications.forEach(observer::notify);\n\t\t++this.numTransferCalls;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn String.format(\"Mock %d\", this.customField);\n\t}\n}","binary":"false","copies":"1","sample_repo_name":"NewEconomyMovement/nem.core","sample_ref":"refs/heads/master","sample_path":"src/test/java/org/nem/core/test/MockTransaction.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"90771fa9a424bf7d3b1c32f8cafdca05cbd6287d","size":"1431","content":"/*\n * Dice heroes is a turn based rpg-strategy game where characters are dice.\n * Copyright (C) 2016 Vladislav Protsenko\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage com.vlaaad.dice.game.world.behaviours.processors.ai;\n\nimport com.vlaaad.dice.game.actions.imp.Attack;\nimport com.vlaaad.dice.game.config.abilities.Ability;\nimport com.vlaaad.dice.game.objects.Creature;\n\n/**\n * Created 12.02.14 by vlaaad\n */\npublic class TransformToObstacleProcessor extends AiDefaultProfessionAbilityProcessor {\n    public TransformToObstacleProcessor() {\n        super(\"archer\", \"transform-to-obstacle\");\n    }\n\n    @Override protected int preProcess(Creature creature, Ability ability) {\n        int near = Attack.findTargets(creature, creature.world).size;\n        if (near > 0)\n            return 3;\n        return -1;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"ratrecommends/dice-heroes","sample_ref":"refs/heads/master","sample_path":"main/src/com/vlaaad/dice/game/world/behaviours/processors/ai/TransformToObstacleProcessor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d8df1c7f2f7f0e89582dd64b0aab498a92f42128","size":"352","content":"package com.btcontract.wallet;\n\nimport android.app.Application;\nimport android.test.ApplicationTestCase;\n\n/**\n * <a href=\"http://d.android.com/tools/testing/testing_android.html\">Testing Fundamentals</a>\n */\npublic class ApplicationTest extends ApplicationTestCase<Application> {\n    public ApplicationTest() {\n        super(Application.class);\n    }\n}","binary":"false","copies":"1","sample_repo_name":"btcontract/VisualBitcoinWallet","sample_ref":"refs/heads/master","sample_path":"app/src/androidTest/java/com/btcontract/wallet/ApplicationTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"429a2995c3e77dd32f4ed5f6572ce879d9fdbd3f","size":"5121","content":"package se.kth.bbc.security.ua.authz;\n\nimport java.io.Serializable;\nimport java.net.SocketException;\nimport java.util.List;\nimport javax.ejb.EJB;\nimport javax.faces.bean.ManagedBean;\nimport javax.faces.bean.RequestScoped;\nimport javax.faces.context.ExternalContext;\nimport javax.faces.context.FacesContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport se.kth.bbc.security.audit.AuditManager;\nimport se.kth.bbc.security.audit.AuditUtil;\nimport se.kth.bbc.security.audit.UserAuditActions;\nimport se.kth.bbc.security.auth.AuthenticationConstants;\nimport se.kth.bbc.security.ua.PeopleAccountStatus;\nimport se.kth.bbc.security.ua.UserManager;\nimport se.kth.hopsworks.user.model.Users;\n \n@ManagedBean\n@RequestScoped\npublic class RoleEnforcementPoint implements Serializable {\n\n  \n  @EJB\n  protected UserManager userManager;\n\n  @EJB\n  private AuditManager am;\n\n  private boolean open_requests = false;\n  private int tabIndex;\n  private Users user;\n\n  public boolean isOpen_requests() {\n    return checkForRequests();\n  }\n\n  public void setOpen_requests(boolean open_reauests) {\n    this.open_requests = open_reauests;\n  }\n\n  public Users getUserFromSession() {\n    if (user == null) {\n      ExternalContext context = FacesContext.getCurrentInstance().\n              getExternalContext();\n      String userEmail = context.getUserPrincipal().getName();\n      user = userManager.findByEmail(userEmail);\n    }\n    return user;\n  }\n\n  public void setTabIndex(int index) {\n    this.tabIndex = index;\n  }\n\n  public int getTabIndex() {\n    int oldindex = tabIndex;\n    tabIndex = 0;\n    return oldindex;\n  }\n\n  private HttpServletRequest getRequest() {\n    return (HttpServletRequest) FacesContext.getCurrentInstance().\n            getExternalContext().getRequest();\n  }\n\n  /**\n   * Return systemwide admin for user administration\n   * <p>\n   * @return\n   */\n  public boolean isSYSAdmin() {\n    if (getRequest().getRemoteUser()!= null) {\n      Users p = userManager.findByEmail(getRequest().getRemoteUser());\n        return userManager.findGroups(p.getUid()).contains(\"SYS_ADMIN\");\n    } return false;\n  }\n\n  /**\n   * Return both system wide and study wide roles\n   * <p>\n   * @return\n   */\n  public boolean isResearcher() {\n    Users p = userManager.findByEmail(getRequest().getRemoteUser());\n    List<String> roles = userManager.findGroups(p.getUid());\n    return (roles.contains(\"BBC_RESEARCHER\") || roles.contains(\"BBC_ADMIN\")\n            || roles.contains(\"BBC_USER\"));\n  }\n\n  /**\n   * Return study owner role\n   * <p>\n   * @return\n   */\n  public boolean isBBCAdmin() {\n    Users p = userManager.findByEmail(getRequest().getRemoteUser());\n    return userManager.findGroups(p.getUid()).contains(\"BBC_ADMIN\");\n  }\n\n  public boolean isAnyAuthorizedResearcherRole() {\n\n    Users p = userManager.findByEmail(getRequest().getRemoteUser());\n    List<String> roles = userManager.findGroups(p.getUid());\n    return (roles.contains(\"BBC_ADMIN\") || roles.\n            contains(\"BBC_RESEARCHER\") || roles.contains(\"BBC_USER\") || roles.\n            contains(\"BBC_GUEST\"));\n  }\n\n  public boolean isAuditorRole() {\n\n    Users p = userManager.findByEmail(getRequest().getRemoteUser());\n    List<String> roles = userManager.findGroups(p.getUid());\n    return (roles.contains(\"AUDITOR\") || roles.contains(\"SYS_ADMIN\"));\n  }\n\n   \n  public boolean isOnlyAuditorRole() {\n\n    Users p = userManager.findByEmail(getRequest().getRemoteUser());\n    List<String> roles = userManager.findGroups(p.getUid());\n    return (roles.contains(\"AUDITOR\") && ! roles.contains(\"SYS_ADMIN\"));\n  }\n  /**\n   *\n   * @return\n   */\n  public boolean checkForRequests() {\n    if (isSYSAdmin()) {\n      //return false if no requests\n      open_requests = !(userManager.findAllByStatus(\n              PeopleAccountStatus.MOBILE_ACCOUNT_INACTIVE.getValue()).isEmpty())\n              || !(userManager.findAllByStatus(\n                      PeopleAccountStatus.YUBIKEY_ACCOUNT_INACTIVE.getValue()).\n              isEmpty());\n    }\n    return open_requests;\n  }\n\n  public boolean isLoggedIn() {\n    return getRequest().getRemoteUser() != null;\n  }\n\n  \n  public String openRequests() {\n    this.tabIndex = 1;\n    if (!userManager.findAllByStatus(\n            PeopleAccountStatus.MOBILE_ACCOUNT_INACTIVE.getValue()).isEmpty()) {\n      return \"mobUsers\";\n    }\n    return \"yubikeyUsers\";\n  }\n\n  \n  // MOVE OUT THIS\n  public String logOut() {\n    getRequest().getSession().invalidate();\n\n    FacesContext ctx = FacesContext.getCurrentInstance();\n    HttpSession sess = (HttpSession) ctx.getExternalContext().getSession(false);\n\n    String ip = AuditUtil.getIPAddress();\n    String browser = AuditUtil.getBrowserInfo();\n    String os = AuditUtil.getOSInfo();\n    String macAddress = AuditUtil.getMacAddress(ip);\n\n    am.registerLoginInfo(getUserFromSession(), UserAuditActions.LOGOUT.getValue(), ip,\n            browser, os, macAddress, UserAuditActions.SUCCESS.name());\n\n    userManager.setOnline(user.getUid(), AuthenticationConstants.IS_OFFLINE);\n    \n    if (null != sess) {\n      sess.invalidate();\n    }\n    return (\"welcome\");\n\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"hopshadoop/hopsworks","sample_ref":"refs/heads/master","sample_path":"src/main/java/se/kth/bbc/security/ua/authz/RoleEnforcementPoint.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9a36251a0cc9f6457c8280a7da146666cfdc3d34","size":"1809","content":"/*\n * JRakLibPlus is not affiliated with Jenkins Software LLC or RakNet.\n * This software is an enhanced port of RakLib https://github.com/PocketMine/RakLib.\n\n * This file is part of JRakLibPlus.\n *\n * JRakLibPlus is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * JRakLibPlus is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with JRakLibPlus.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage io.github.jython234.jraklibplus.protocol.raknet;\n\nimport io.github.jython234.jraklibplus.nio.Buffer;\nimport io.github.jython234.jraklibplus.protocol.RakNetPacket;\n\nimport static io.github.jython234.jraklibplus.JRakLibPlus.ID_CONNECTED_PING_OPEN_CONNECTIONS;\nimport static io.github.jython234.jraklibplus.JRakLibPlus.RAKNET_MAGIC;\n\n/**\n * ID_CONNECTED_PING_OPEN_CONNECTIONS Packet implementation\n *\n * @author jython234\n */\npublic class ConnectedPingOpenConnectionsPacket extends RakNetPacket {\n\n    public long pingID;\n\n    @Override\n    protected void _encode(Buffer buffer) {\n        buffer.putLong(pingID);\n        buffer.put(RAKNET_MAGIC);\n    }\n\n    @Override\n    protected void _decode(Buffer buffer) {\n        pingID = buffer.getLong();\n        //MAGIC\n    }\n\n    @Override\n    public byte getPID() {\n        return ID_CONNECTED_PING_OPEN_CONNECTIONS;\n    }\n\n    @Override\n    public int getSize() {\n        return 25;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"jython234/JRakLibPlus","sample_ref":"refs/heads/master","sample_path":"src/main/java/io/github/jython234/jraklibplus/protocol/raknet/ConnectedPingOpenConnectionsPacket.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"fc4515080be1439fca013385b31caad732e0472e","size":"10024","content":"/*\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.android.volley.toolbox;\n\nimport android.os.SystemClock;\n\nimport com.android.volley.AuthFailureError;\nimport com.android.volley.Cache;\nimport com.android.volley.Network;\nimport com.android.volley.NetworkError;\nimport com.android.volley.NetworkResponse;\nimport com.android.volley.NoConnectionError;\nimport com.android.volley.Request;\nimport com.android.volley.RetryPolicy;\nimport com.android.volley.ServerError;\nimport com.android.volley.TimeoutError;\nimport com.android.volley.VolleyError;\nimport com.android.volley.VolleyLog;\n\nimport org.apache.http.Header;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.StatusLine;\nimport org.apache.http.conn.ConnectTimeoutException;\nimport org.apache.http.impl.cookie.DateUtils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.MalformedURLException;\nimport java.net.SocketTimeoutException;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\n\n/**\n * A network performing Volley requests over an {@link com.android.volley.toolbox.HttpStack}.\n */\npublic class BasicNetwork implements Network {\n    protected static final boolean DEBUG = VolleyLog.DEBUG;\n\n    private static int SLOW_REQUEST_THRESHOLD_MS = 3000;\n\n    private static int DEFAULT_POOL_SIZE = 4096;\n\n    protected final HttpStack mHttpStack;\n\n    protected final ByteArrayPool mPool;\n\n    /**\n     * @param httpStack HTTP stack to be used\n     */\n    public BasicNetwork(HttpStack httpStack) {\n        // If a pool isn't passed in, then build a small default pool that will give us a lot of\n        // benefit and not use too much memory.\n        this(httpStack, new ByteArrayPool(DEFAULT_POOL_SIZE));\n    }\n\n    /**\n     * @param httpStack HTTP stack to be used\n     * @param pool a buffer pool that improves GC performance in copy operations\n     */\n    public BasicNetwork(HttpStack httpStack, ByteArrayPool pool) {\n        mHttpStack = httpStack;\n        mPool = pool;\n    }\n\n    @Override\n    public NetworkResponse performRequest(Request<?> request) throws VolleyError {\n        long requestStart = SystemClock.elapsedRealtime();\n        while (true) {\n            HttpResponse httpResponse = null;\n            byte[] responseContents = null;\n            Map<String, String> responseHeaders = new HashMap<String, String>();\n            try {\n                // Gather headers.\n                Map<String, String> headers = new HashMap<String, String>();\n                addCacheHeaders(headers, request.getCacheEntry());\n                httpResponse = mHttpStack.performRequest(request, headers);\n                StatusLine statusLine = httpResponse.getStatusLine();\n                int statusCode = statusLine.getStatusCode();\n\n                responseHeaders = convertHeaders(httpResponse.getAllHeaders());\n                // Handle cache validation.\n                if (statusCode == HttpStatus.SC_NOT_MODIFIED) {\n                    return new NetworkResponse(HttpStatus.SC_NOT_MODIFIED,\n                            request.getCacheEntry().data, responseHeaders, true);\n                }\n\n                responseContents = entityToBytes(httpResponse.getEntity());\n                // if the request is slow, log it.\n                long requestLifetime = SystemClock.elapsedRealtime() - requestStart;\n                logSlowRequests(requestLifetime, request, responseContents, statusLine);\n\n                if (statusCode != HttpStatus.SC_OK && statusCode != HttpStatus.SC_NO_CONTENT) {\n                    throw new IOException();\n                }\n                return new NetworkResponse(statusCode, responseContents, responseHeaders, false);\n            } catch (SocketTimeoutException e) {\n                attemptRetryOnException(\"socket\", request, new TimeoutError());\n            } catch (ConnectTimeoutException e) {\n                attemptRetryOnException(\"connection\", request, new TimeoutError());\n            } catch (MalformedURLException e) {\n                throw new RuntimeException(\"Bad URL \" + request.getUrl(), e);\n            } catch (IOException e) {\n                int statusCode = 0;\n                NetworkResponse networkResponse = null;\n                if (httpResponse != null) {\n                    statusCode = httpResponse.getStatusLine().getStatusCode();\n                } else {\n                    if(request.getCacheEntry() != null && request.getCacheEntry().data != null){\n                        return new NetworkResponse(HttpStatus.SC_NOT_MODIFIED,\n                                request.getCacheEntry().data, responseHeaders, true);\n                    }else{\n                        throw new NoConnectionError(e);\n                    }\n                }\n                VolleyLog.e(\"Unexpected response code %d for %s\", statusCode, request.getUrl());\n                if (responseContents != null) {\n                    networkResponse = new NetworkResponse(statusCode, responseContents,\n                            responseHeaders, false);\n                    if (statusCode == HttpStatus.SC_UNAUTHORIZED ||\n                            statusCode == HttpStatus.SC_FORBIDDEN) {\n                        attemptRetryOnException(\"auth\",\n                                request, new AuthFailureError(networkResponse));\n                    } else {\n                        // TODO: Only throw ServerError for 5xx status codes.\n                        throw new ServerError(networkResponse);\n                    }\n                } else {\n                    throw new NetworkError(networkResponse);\n                }\n            }\n        }\n    }\n\n    /**\n     * Logs requests that took over SLOW_REQUEST_THRESHOLD_MS to complete.\n     */\n    private void logSlowRequests(long requestLifetime, Request<?> request,\n            byte[] responseContents, StatusLine statusLine) {\n        if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {\n            VolleyLog.d(\"HTTP response for request=<%s> [lifetime=%d], [size=%s], \" +\n                    \"[rc=%d], [retryCount=%s]\", request, requestLifetime,\n                    responseContents != null ? responseContents.length : \"null\",\n                    statusLine.getStatusCode(), request.getRetryPolicy().getCurrentRetryCount());\n        }\n    }\n\n    /**\n     * Attempts to prepare the request for a retry. If there are no more attempts remaining in the\n     * request's retry policy, a timeout exception is thrown.\n     * @param request The request to use.\n     */\n    private static void attemptRetryOnException(String logPrefix, Request<?> request,\n            VolleyError exception) throws VolleyError {\n        RetryPolicy retryPolicy = request.getRetryPolicy();\n        int oldTimeout = request.getTimeoutMs();\n\n        try {\n            retryPolicy.retry(exception);\n        } catch (VolleyError e) {\n            request.addMarker(\n                    String.format(\"%s-timeout-giveup [timeout=%s]\", logPrefix, oldTimeout));\n            throw e;\n        }\n        request.addMarker(String.format(\"%s-retry [timeout=%s]\", logPrefix, oldTimeout));\n    }\n\n    private void addCacheHeaders(Map<String, String> headers, Cache.Entry entry) {\n        // If there's no cache entry, we're done.\n        if (entry == null) {\n            return;\n        }\n\n        if (entry.etag != null) {\n            headers.put(\"If-None-Match\", entry.etag);\n        }\n\n        if (entry.lastModified > 0) {\n            Date refTime = new Date(entry.lastModified);\n            headers.put(\"If-Modified-Since\", DateUtils.formatDate(refTime));\n        }\n    }\n\n    protected void logError(String what, String url, long start) {\n        long now = SystemClock.elapsedRealtime();\n        VolleyLog.v(\"HTTP ERROR(%s) %d ms to fetch %s\", what, (now - start), url);\n    }\n\n    /** Reads the contents of HttpEntity into a byte[]. */\n    private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {\n        PoolingByteArrayOutputStream bytes =\n                new PoolingByteArrayOutputStream(mPool, (int) entity.getContentLength());\n        byte[] buffer = null;\n        try {\n            InputStream in = entity.getContent();\n            if (in == null) {\n                throw new ServerError();\n            }\n            buffer = mPool.getBuf(1024);\n            int count;\n            while ((count = in.read(buffer)) != -1) {\n                bytes.write(buffer, 0, count);\n            }\n            return bytes.toByteArray();\n        } finally {\n            try {\n                // Close the InputStream and release the resources by \"consuming the content\".\n                entity.consumeContent();\n            } catch (IOException e) {\n                // This can happen if there was an exception above that left the entity in\n                // an invalid state.\n                VolleyLog.v(\"Error occured when calling consumingContent\");\n            }\n            mPool.returnBuf(buffer);\n            bytes.close();\n        }\n    }\n\n    /**\n     * Converts Headers[] to Map<String, String>.\n     */\n    protected static Map<String, String> convertHeaders(Header[] headers) {\n        Map<String, String> result = new TreeMap<String, String>(String.CASE_INSENSITIVE_ORDER);\n        for (int i = 0; i < headers.length; i++) {\n            result.put(headers[i].getName(), headers[i].getValue());\n        }\n        return result;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"SagaMusic/saga-android","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/android/volley/toolbox/BasicNetwork.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"22b32e0ec2ad7aca9ecf7eed7f93c690188fd347","size":"21308","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Catalin Tomozei using IMS Development Environment (version 1.51 build 2467.14786)\r\n// Copyright (C) 1995-2006 IMS MAXIMS plc. All rights reserved.\r\n\r\npackage ims.nursing.forms.planofcareactions;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport ims.configuration.AppRight;\r\nimport ims.configuration.gen.ConfigFlag;\r\nimport ims.core.vo.AuthoringInformationVo;\r\nimport ims.domain.exceptions.StaleObjectException;\r\nimport ims.framework.Control;\r\nimport ims.framework.FormName;\r\nimport ims.framework.enumerations.DialogResult;\r\nimport ims.framework.enumerations.FormMode;\r\nimport ims.framework.exceptions.CodingRuntimeException;\r\nimport ims.framework.exceptions.PresentationLogicException;\r\nimport ims.framework.utils.Color;\r\nimport ims.framework.utils.DateTime;\r\nimport ims.framework.utils.Time;\r\nimport ims.nursing.forms.planofcareactions.GenForm;\r\nimport ims.nursing.vo.PlanOfCareActionsSearchCriteriaVo;\r\nimport ims.nursing.vo.PlanOfCareActionsVo;\r\nimport ims.nursing.vo.PlanOfCareActionsVoCollection;\r\nimport ims.nursing.vo.PlanOfCareListVo;\r\nimport ims.nursing.vo.PlanOfCareListVoCollection;\r\nimport ims.nursing.vo.PlanOfCareNotingVo;\r\nimport ims.nursing.vo.PlanOfCareNotingVoCollection;\r\nimport ims.nursing.vo.lookups.PlanOfCareActionStatus;\r\nimport ims.nursing.vo.lookups.PlanOfCareInterval;\r\n\r\npublic class Logic extends BaseLogic\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tprotected void onFormOpen() throws ims.framework.exceptions.PresentationLogicException\r\n\t{\r\n\t\tinitialize();\r\n\t\t\r\n\t\t//WDEV-19389 \r\n\t\tif (!(form.getGlobalContext().Core.getCurrentCareContextIsNotNull() && form.getGlobalContext().Nursing.getPlanOfCareActionsSearchCriteriaIsNotNull() && form.getGlobalContext().Core.getCurrentCareContext().equals(form.getGlobalContext().Nursing.getPlanOfCareActionsSearchCriteria().getCareContext())))\r\n\t\t{\r\n\t\t\tform.getGlobalContext().Nursing.setPlanOfCareActionsSearchCriteria(null);\r\n\t\t}\r\n\t\t\r\n\t\tif(form.getGlobalContext().Nursing.getPlanOfCareActionsSearchCriteriaIsNotNull())\r\n\t\t{\r\n\t\t\tsetSearchCriteria(form.getGlobalContext().Nursing.getPlanOfCareActionsSearchCriteria());\r\n\t\t\tform.lyr1().showtabChronological();\r\n\t\t\tform.lyr1().tabChronological().setHeaderVisible(true);\r\n\t\t\tform.lyr1().tabNewActions().setHeaderVisible(false);\r\n\t\t\tlistAllActions();\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t\topen();\r\n\t\t//WDEV-19389 - end\r\n\t}\r\n\t\r\n\tprivate void open()\r\n\t{\r\n\t\tform.setMode(FormMode.VIEW);\r\n\t\tdisplayTabCronological();\r\n\t}\r\n\t\r\n\tprivate PlanOfCareActionsSearchCriteriaVo getSearchCriteria()\r\n\t{\r\n\t\tPlanOfCareActionsSearchCriteriaVo searchCriteria = new PlanOfCareActionsSearchCriteriaVo();\r\n\t\t\r\n\t\tsearchCriteria.setInterval(form.lyr1().tabChronological().cmbInterval().getValue());\r\n\t\tsearchCriteria.setFromDate(form.lyr1().tabChronological().dteStart().getValue());\r\n\t\tsearchCriteria.setToDate(form.lyr1().tabChronological().dteEnd().getValue());\r\n\t\tsearchCriteria.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());\r\n\t\t\r\n\t\treturn searchCriteria;\r\n\t}\r\n\t\r\n\t\r\n\tprivate void setSearchCriteria(PlanOfCareActionsSearchCriteriaVo planOfCareActionsSearchCriteriaVo)\r\n\t{\r\n\t\tform.lyr1().tabChronological().cmbInterval().setValue(planOfCareActionsSearchCriteriaVo.getInterval());\t\r\n\t\tform.lyr1().tabChronological().dteStart().setValue(planOfCareActionsSearchCriteriaVo.getFromDate());\r\n\t\tform.lyr1().tabChronological().dteEnd().setValue(planOfCareActionsSearchCriteriaVo.getToDate());\r\n\t}\r\n\t\r\n\tprivate void displayTabNewActions() \r\n\t{\r\n\t\tform.lyr1().showtabNewActions();\r\n\t\tform.lyr1().tabNewActions().setHeaderVisible(true);\r\n\t\tform.lyr1().tabChronological().setHeaderVisible(false);\r\n\t\t\r\n\t\tform.setMode(FormMode.EDIT);\r\n\t\tform.lyr1().tabNewActions().grdActions().getRows().clear();;\r\n\t\t\t\r\n\t\tform.lyr1().tabNewActions().customAuthoring().initializeComponent();\r\n\t\tform.lyr1().tabNewActions().setcustomAuthoringEnabled(false);\r\n\t\t\r\n\t\tPlanOfCareListVoCollection list = domain.listPlanOfCare\r\n\t\t\t(form.getGlobalContext().Core.getCurrentCareContext());\r\n\t\t\r\n\t\tif(list != null)\r\n\t\t{\r\n\t\t\tfor(int i = 0; i < list.size(); i++)\r\n\t\t\t{\r\n\t\t\t\taddNewActionRowRecord(list.get(i));\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\t\t\r\n\tprivate boolean returnFlagStatus()\r\n\t{\r\n\t\treturn engine.hasRight(AppRight.CAN_CONFIRM_NURSING_DOCUMENTATION);\r\n\t}\r\n\t\r\n\tprivate void addNewActionRowRecord(PlanOfCareListVo record) \r\n\t{\t\r\n\t\tif(record == null)\r\n\t\t\treturn;\r\n\t\t\t\r\n\t\tGenForm.lyr1Layer.tabNewActionsContainer.grdActionsRow \r\n\t\trow = form.lyr1().tabNewActions().grdActions().getRows().newRow();\r\n\t\t\t\r\n\t\trow.setColPoc(record.getTitle());\r\n\t\t\r\n\t\tif (record.getLevelOfIntervention().equals(Color.Red))\r\n\t\t\trow.setColImage(form.getImages().Core.RedSqaure);\r\n\t\tif (record.getLevelOfIntervention().equals(Color.Yellow))\r\n\t\t\trow.setColImage(form.getImages().Core.YellowSquare);\r\n\t\tif (record.getLevelOfIntervention().equals(Color.Green))\r\n\t\t\trow.setColImage(form.getImages().Core.GreenSquare);\r\n\t\t\r\n\t\trow.setValue(record);\t\r\n\t}\r\n\r\n\tprivate boolean save() \r\n\t{\r\n\t\tPlanOfCareActionsVoCollection recordColl = populateDataFromScreen();\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tif(recordColl != null)\r\n\t\t{\r\n\t\t\tPlanOfCareNotingVo recordNoting = populateDataFromScreenForNoting(recordColl);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tString[] uiErrors = getUiErrors();\r\n\t\t\tString[] errors = recordNoting.validate(uiErrors);\r\n\t\t\tif(errors != null && errors.length > 0)\r\n\t\t\t{\r\n\t\t\t\tengine.showErrors(errors);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\ttry\r\n\t\t\t{\t\r\n\t\t\t\tdomain.saveNewActions(recordColl, recordNoting);\t\r\n\t\t\t}\r\n\t\t\tcatch(StaleObjectException e)\r\n\t\t\t{\r\n\t\t\t\tengine.showMessage(ConfigFlag.UI.STALE_OBJECT_MESSAGE.getValue());\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t\r\n\t\t}\r\n\t\treturn false;\t\r\n\t}\r\n\t\r\n\tprivate PlanOfCareNotingVo populateDataFromScreenForNoting(PlanOfCareActionsVoCollection voColl)\r\n\t{\r\n\t\tif (voColl == null)\r\n\t\t\treturn new PlanOfCareNotingVo();\r\n\t\t\r\n\t\tPlanOfCareNotingVo pocNoting = new PlanOfCareNotingVo();\r\n\t\t\r\n\t\tpocNoting.setCareContext(form.getGlobalContext().Core.getCurrentCareContext());\r\n\t\t\r\n\t\tif ( voColl.size() != 0 && voColl.get(0).getAuthoringInformation() != null)\r\n\t\t{\r\n\t\t\tAuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();\r\n\t\t\tvoAuthoringInformation.setAuthoringDateTime(voColl.get(0).getAuthoringInformation().getAuthoringDateTime());\r\n\t\t\tvoAuthoringInformation.setAuthoringHcp(voColl.get(0).getAuthoringInformation().getAuthoringHcp());\r\n\t\t\tpocNoting.setAuthoringInformation(voAuthoringInformation);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tAuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();\r\n\t\t\tvoAuthoringInformation.setAuthoringDateTime(form.lyr1().tabNewActions().customAuthoring().getValue().getAuthoringDateTime());\r\n\t\t\tvoAuthoringInformation.setAuthoringHcp(form.lyr1().tabNewActions().customAuthoring().getValue().getAuthoringHcp());\r\n\t\t\tpocNoting.setAuthoringInformation(voAuthoringInformation);\r\n\t\t}\r\n\t\t\r\n\t\tif (!returnFlagStatus())\r\n\t\t{\r\n\t\t\tpocNoting.setActionStatus(PlanOfCareActionStatus.REQUIRES_CONFIRMATION);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tpocNoting.setActionStatus(PlanOfCareActionStatus.ACTIVE);\r\n\t\t}\r\n\t\t\r\n\t\tpocNoting.setActions(voColl);\r\n\t\t\r\n\t\treturn pocNoting;\r\n\t}\r\n\t\r\n\tprivate PlanOfCareActionsVoCollection populateDataFromScreen() \r\n\t{\r\n\t\tPlanOfCareActionsVoCollection coColl = new PlanOfCareActionsVoCollection();\r\n\t\r\n\t\tfor(int x = 0; x < form.lyr1().tabNewActions().grdActions().getRows().size(); x++)\r\n\t\t{\r\n\t\t\tPlanOfCareListVo rowValue = form.lyr1().tabNewActions().grdActions().getRows().get(x).getValue();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tString action = form.lyr1().tabNewActions().grdActions().getRows().get(x).getColAction();\r\n//\t\t\tif(validateActionText(action))\r\n//\t\t\t\treturn null;\r\n\t\t\t\r\n\t\t\tPlanOfCareActionsVo\tnewActionVo = new PlanOfCareActionsVo();\r\n\t\t\r\n\t\t\tif (rowValue != null && action != null && action.length() > 0)\r\n\t\t\t{\r\n\t\t\t\t//Authoring Component\r\n\t\t\t\tif (form.lyr1().tabNewActions().customAuthoring().getValue().getAuthoringDateTimeIsNotNull() &&\r\n\t\t\t\t\tform.lyr1().tabNewActions().customAuthoring().getValue().getAuthoringHcpIsNotNull())\r\n\t\t\t\t{\r\n\t\t\t\t\tAuthoringInformationVo voAuthoringInformation = new AuthoringInformationVo();\r\n\t\t\t\t\tvoAuthoringInformation.setAuthoringDateTime(form.lyr1().tabNewActions().customAuthoring().getValue().getAuthoringDateTime());\r\n\t\t\t\t\tvoAuthoringInformation.setAuthoringHcp(form.lyr1().tabNewActions().customAuthoring().getValue().getAuthoringHcp());\r\n\t\t\t\t\tnewActionVo.setAuthoringInformation(voAuthoringInformation);\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t//Action\r\n\t\t\t\tnewActionVo.setAction(action);\r\n\t\t\t\t\r\n\t\t\t\t//PlanOfCare\r\n\t\t\t\tnewActionVo.setPlanOfCare(rowValue);\r\n\t\t\t\t\r\n\t\t\t\t//add row to collection\r\n\t\t\t\tcoColl.add(newActionVo);\r\n\t\t\t\t\r\n\t\t\t}\t\t\t\t\r\n\t\t\t\r\n\t\t}\t\r\n/*\t\tString [] error = coColl.validate();\r\n\t\t\r\n\t\t\t\t\t\r\n\t\t\r\n\t\tif(error != null && error.length != 0)\r\n\t\t{\r\n\t\t\t\tengine.showErrors(error);\r\n\t\t\t\treturn null;\r\n\t\t}*/\r\n\t\t\r\n\t\treturn coColl;\r\n\t}\r\n\r\n\tprivate String[] getUiErrors() \r\n\t{\r\n\t\tArrayList errors = new ArrayList();\r\n\t\t\r\n\t\tif (form.lyr1().tabNewActions().customAuthoring().getValue() != null) \r\n\t\t{\r\n\t\t\tif (form.lyr1().tabNewActions().customAuthoring().getValue().getAuthoringHcp() == null) \r\n\t\t\t{\r\n\t\t\t\terrors.add(\"Authoring Hcp is mandatory\");\r\n\t\t\t}\r\n\t\t\tif (form.lyr1().tabNewActions().customAuthoring().getValue() .getAuthoringDateTime() == null) \r\n\t\t\t{\r\n\t\t\t\terrors.add(\"Authoring Date/Time is mandatory\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (errors.size() > 0) \r\n\t\t{\r\n\t\t\tString[] searchErrors = new String[errors.size()];\r\n\t\t\terrors.toArray(searchErrors);\r\n\t\t\tengine.showErrors(\"Invalid \tPlanOfCare Actions\", searchErrors);\r\n\t\t\treturn searchErrors;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprivate void displayTabCronological() \r\n\t{\r\n\t\tform.lyr1().showtabChronological();\r\n\t\tform.lyr1().tabChronological().setHeaderVisible(true);\r\n\t\tform.lyr1().tabNewActions().setHeaderVisible(false);\r\n\t\tform.lyr1().tabChronological().grdChronological().getRows().clear();\r\n\t\tform.lyr1().tabChronological().cmbInterval().setValue(PlanOfCareInterval.HOURS72);\r\n\t\tform.lyr1().tabChronological().dteStart().setValue(null);\r\n\t\tform.lyr1().tabChronological().dteEnd().setValue(null);\r\n\t\t//list last 72 hours\r\n\t\tpopulateChronologicalGrig(domain.listSearchNoting((new DateTime()).addHours(-72), new DateTime(), form.getGlobalContext().Core.getCurrentCareContext()));\r\n\t}\r\n\t\t\r\n\tprivate void populateChronologicalGrig(PlanOfCareNotingVoCollection voPocNoting)\r\n\t{\r\n\t\tif (voPocNoting != null && voPocNoting.size() > 0)\r\n\t\t{\r\n\t\t\tfor(int x = 0; x < voPocNoting.size(); x++)\r\n\t\t\t{\r\n\t\t\t\r\n\t\t\t\tGenForm.lyr1Layer.tabChronologicalContainer.grdChronologicalRow row = null;\r\n \r\n\t\t\t\trow = form.lyr1().tabChronological().grdChronological().getRows().newRow();\r\n\t\t\t\trow.setBold(true);\r\n\t\r\n\t\t\t\tif (voPocNoting.get(x).getReviewingDateTimeIsNotNull() &&\r\n\t\t\t\t\t\tvoPocNoting.get(x).getReviewingHCPIsNotNull())\r\n\t\t\t\t{\r\n\t\t\t\t\trow.setColDateTime(voPocNoting.get(x).getAuthoringInformation().getAuthoringDateTime()+\r\n\t\t\t\t\t\t\t\" \"+\"hrs\"+\" \"+voPocNoting.get(x).getAuthoringInformation().getAuthoringHcp()+ \r\n\t\t\t\t\t\t\t(voPocNoting.get(x).getActionStatusIsNotNull() ? \" - \"+voPocNoting.get(x).getActionStatus().getText() : \"\")+\r\n\t\t\t\t\t\t\t\" Reviewing by: \"+voPocNoting.get(x).getReviewingHCP()+\" on \"+voPocNoting.get(x).getReviewingDateTime());\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\trow.setColDateTime(voPocNoting.get(x).getAuthoringInformation().getAuthoringDateTime()+\r\n\t\t\t\t\t\t\" \"+\"hrs\"+\" \"+voPocNoting.get(x).getAuthoringInformation().getAuthoringHcp()+ \r\n\t\t\t\t\t\t(voPocNoting.get(x).getActionStatusIsNotNull() ? \" - \"+voPocNoting.get(x).getActionStatus().getText() : \"\"));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(int i=0; i<voPocNoting.get(x).getActions().size(); i++)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tPlanOfCareActionsVo voPocItem = voPocNoting.get(x).getActions().get(i);\r\n\t\t\t\t\r\n\t\t\t\t\tGenForm.lyr1Layer.tabChronologicalContainer.grdChronologicalRow rowAction = \r\n\t\t\t\t\t\trow.getRows().newRow();\r\n\t\t\t\t\r\n\t\t\t\t\trowAction.setColDateTime(voPocItem.getPlanOfCare().getTitle().toUpperCase()+\" - \"+ voPocItem.getAction());\r\n\t\t\t\t\trowAction.setTooltip(voPocItem.getPlanOfCare().getTitle().toUpperCase()+\" - \"+ voPocItem.getAction());//WDEV-15085\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (voPocItem.getPlanOfCare().getLevelOfIntervention().equals(Color.Red))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trowAction.setCollapsedImage(form.getImages().Core.RedSqaure);\r\n\t\t\t\t\t\trowAction.setExpandedImage(form.getImages().Core.RedSqaure);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (voPocItem.getPlanOfCare().getLevelOfIntervention().equals(Color.Yellow))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trowAction.setCollapsedImage(form.getImages().Core.YellowSquare);\r\n\t\t\t\t\t\trowAction.setExpandedImage(form.getImages().Core.YellowSquare);\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (voPocItem.getPlanOfCare().getLevelOfIntervention().equals(Color.Green))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trowAction.setCollapsedImage(form.getImages().Core.GreenSquare);\r\n\t\t\t\t\t\trowAction.setExpandedImage(form.getImages().Core.GreenSquare);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\trowAction.setColComments(voPocItem.getReview());\r\n\t\t\t\t\t\r\n\t\t\t\t\trowAction.setValue(voPocNoting.get(x));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\trow.setValue(voPocNoting.get(x));\r\n\t\t\t\trow.setExpanded(true);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void initialize()\r\n\t{\t\r\n\t\t//displayPocListTabOnly();\r\n\t\t//form.getContextMenus().getPlanOfCareNEWPOCItem().setVisible(true);\r\n\t}\r\n\t\r\n\tprotected void onFormModeChanged()\r\n\t{\r\n\t\t// TODO Add your code here.\r\n\t}\r\n\tprotected void onImbClearClick() throws ims.framework.exceptions.PresentationLogicException\r\n\t{\r\n\t\tclear();\r\n\t\tform.getGlobalContext().Nursing.setPlanOfCareActionsSearchCriteria(null); //WDEV-19389 \r\n\t}\r\n\tprivate void clear() \r\n\t{\r\n\t\tform.lyr1().tabChronological().grdChronological().getRows().clear();\r\n\t\tform.lyr1().tabChronological().cmbInterval().setValue(PlanOfCareInterval.HOURS72);\r\n\t\t//wdev-10721\r\n\t\tform.lyr1().tabChronological().dteStart().setValue(null);\r\n\t\tform.lyr1().tabChronological().dteEnd().setValue(null);\r\n\t\t//----------\r\n\t}\r\n\r\n\tprotected void onImbSearchClick() throws ims.framework.exceptions.PresentationLogicException\r\n\t{\r\n\t\tlistAllActions();\r\n\t}\r\n\t\r\n\tprivate void listAllActions() \r\n\t{\r\n\t\tform.lyr1().tabChronological().grdChronological().getRows().clear();\r\n\r\n\t\tif (form.lyr1().tabChronological().cmbInterval().getValue() == null &&\r\n\t\t\t\tform.lyr1().tabChronological().dteStart().getValue() == null && \r\n\t\t\t\tform.lyr1().tabChronological().dteEnd().getValue() == null)\r\n\t\t{\r\n\t\t\tengine.showMessage(\"Please enter some search criteria !\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\t\r\n\t\tDateTime startDate = null;\r\n\t\tDateTime endDate = null;\r\n\r\n\t\tif (form.lyr1().tabChronological().cmbInterval().getValue() != null)\r\n\t\t{\r\n\t\t\tPlanOfCareInterval hours = form.lyr1().tabChronological().cmbInterval().getValue();\r\n\t\t\t\r\n\t\t\tint hoursInput = -72;\r\n\t\t\tif (hours.equals(PlanOfCareInterval.HOURS12))\r\n\t\t\t\thoursInput = -12;\r\n\t\t\telse if (hours.equals(PlanOfCareInterval.HOURS24))\r\n\t\t\t\thoursInput = -24;\r\n\t\t\telse if (hours.equals(PlanOfCareInterval.HOURS36))\r\n\t\t\t\thoursInput = -36;\r\n\t\t\telse if (hours.equals(PlanOfCareInterval.HOURS48))\r\n\t\t\t\thoursInput = -48;\r\n\t\t\telse if (hours.equals(PlanOfCareInterval.HOURS72))\r\n\t\t\t\thoursInput = -72;\r\n\t\t\t\r\n\t\t\tstartDate = new DateTime().addHours(hoursInput);\r\n\t\t\tendDate = new DateTime();\r\n\t\t\tpopulateChronologicalGrig(domain.listSearchNoting(startDate, endDate, form.getGlobalContext().Core.getCurrentCareContext()));\r\n\t\t\t\r\n\t\t\tif(form.lyr1().tabChronological().grdChronological().getRows().size() == 0)\r\n\t\t\t\tengine.showMessage(\"No records found.\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (form.lyr1().tabChronological().dteStart().getValue() != null \r\n\t\t\t\t\t&& form.lyr1().tabChronological().dteEnd().getValue() != null \r\n\t\t\t\t\t&& form.lyr1().tabChronological().dteStart().getValue().isGreaterThan(\r\n\t\t\t\t\t\t\tform.lyr1().tabChronological().dteEnd().getValue()))\r\n\t\t\t{\r\n\t\t\t\tengine.showMessage(\"The Start Date is greater than End Date!\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tTime timeStart = new Time(0, 0), timeEnd = new Time(23, 59);\r\n\r\n\t\t\t\tif(form.lyr1().tabChronological().dteStart().getValue() != null)\r\n\t\t\t\t\tstartDate = new DateTime(form.lyr1().tabChronological().dteStart().getValue(), timeStart);\r\n\t\t\t\t\r\n\t\t\t\tif(form.lyr1().tabChronological().dteEnd().getValue() != null)\r\n\t\t\t\t\tendDate = new DateTime(form.lyr1().tabChronological().dteEnd().getValue(), timeEnd);\r\n\r\n\t\t\t\tpopulateChronologicalGrig(domain.listSearchNoting(startDate, endDate, form.getGlobalContext().Core.getCurrentCareContext()));\r\n\r\n\t\t\t\tif(form.lyr1().tabChronological().grdChronological().getRows().size() == 0)\r\n\t\t\t\t\tengine.showMessage(\"No records found.\");\r\n\t\t\t}\t\t\r\n\t\t}\r\n\t\t\r\n\t\tform.getGlobalContext().Nursing.setPlanOfCareActionsSearchCriteria(getSearchCriteria()); //WDEV-19389 \r\n\t\t//clear dte\r\n\t\t//form.lyr1().tabChronological().dteStart().setValue(null);\r\n\t\t//form.lyr1().tabChronological().dteEnd().setValue(null);\t\r\n\t}\r\n\t\r\n\tprotected void onBtnCancelClick() throws PresentationLogicException \r\n\t{\r\n\t\tform.setMode(FormMode.VIEW);\r\n\t\tform.lyr1().showtabChronological();\r\n\t\tform.lyr1().tabChronological().setHeaderVisible(true);\r\n\t\tform.lyr1().tabNewActions().setHeaderVisible(false);\r\n\t}\r\n\r\n\tprotected void onBtnNewClick() throws PresentationLogicException \r\n\t{\r\n\t\tdisplayTabNewActions();\r\n\t}\r\n\r\n\tprotected void onBtnSaveClick() throws PresentationLogicException \r\n\t{\r\n\t\tif (save())\r\n\t\t\topen();\r\n\t}\r\n\r\n\tprotected void onGrdChronologicalSelectionChanged() throws PresentationLogicException \r\n\t{\r\n\t\tif (form.lyr1().tabChronological().grdChronological().getSelectedRow().getValue() != null)\r\n\t\t{\r\n\t\t\tPlanOfCareNotingVo voItem = form.lyr1().tabChronological().grdChronological().getSelectedRow().getValue();\r\n\t\t\t\r\n\t\t\tif (voItem.getActionStatusIsNotNull() &&\r\n\t\t\t\t\tvoItem.getActionStatus().equals(PlanOfCareActionStatus.REQUIRES_CONFIRMATION) &&\r\n\t\t\t\t\treturnFlagStatus())\r\n\t\t\t{\r\n\t\t\t\tif (voItem.getActionStatus().equals(PlanOfCareActionStatus.REQUIRES_CONFIRMATION))\r\n\t\t\t\t{\r\n\t\t\t\t\tform.getContextMenus().getGenericGridAddItem().setText(\"Review Actions\");\r\n\t\t\t\t\tform.getContextMenus().getGenericGridAddItem().setVisible(true);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tform.getContextMenus().getGenericGridAddItem().setVisible(false);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tform.getContextMenus().getGenericGridAddItem().setVisible(false);\r\n\t\t\t}\r\n\t\t\tform.getGlobalContext().setPlanOfCareActionsReview(voItem);\r\n\t\t}\r\n\t}\r\n\t\r\n\tprotected void onContextMenuItemClick(int menuItemID, Control sender) throws PresentationLogicException\r\n\t{\r\n\t\tif (sender == null)\r\n\t\t\tthrow new CodingRuntimeException(\"sender is null : onContextMenuItemClick\");\r\n\t\tif (sender.equals(form.lyr1().tabChronological().grdChronological()))\r\n\t\t{\r\n\t\t\tswitch (menuItemID)\r\n\t\t\t{\r\n\t\t\t\tcase GenForm.ContextMenus.GenericGrid.Add :\r\n\t\t\t\t\topenForm();\r\n\t\t\t\t\tbreak;\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void openForm() \r\n\t{\r\n\t\tengine.open(form.getForms().Nursing.PlanOfCareActionsReview);\r\n\t}\r\n\r\n\tprotected void onFormDialogClosed(FormName formName, DialogResult result) throws PresentationLogicException \r\n\t{\r\n\t\tinitialize();\r\n\t\t\topen();\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onCmbIntervalValueChanged() throws PresentationLogicException\r\n\t{\r\n\t\tform.lyr1().tabChronological().dteStart().setValue(null);\r\n\t\tform.lyr1().tabChronological().dteEnd().setValue(null);\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onDteEndValueChanged() throws PresentationLogicException\r\n\t{\r\n\t\tform.lyr1().tabChronological().cmbInterval().setValue(null);\r\n\t}\r\n\r\n\t@Override\r\n\tprotected void onDteStartValueChanged() throws PresentationLogicException\r\n\t{\r\n\t\tform.lyr1().tabChronological().cmbInterval().setValue(null);\r\n\t}\r\n//\tprivate boolean validateActionText(String Action)\r\n//\t{\r\n//\t\tif(Action.length()>= 256 )\r\n//\t\t{\r\n//\t\t\tengine.showMessage(\"Action lenght cannot exceed 255 characters\");\r\n//\t\t\treturn true;\r\n//\t\t}\r\n//\t\treturn false;\r\n//\t}\r\n//\t\r\n\t\r\n\t\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Nursing/src/ims/nursing/forms/planofcareactions/Logic.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"665b52fa483296ca3aefedaa056558c36591f211","size":"28275","content":"/*\n *  Copyright 2011-2015 Cojen.org\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\npackage org.cojen.tupl;\n\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport java.security.GeneralSecurityException;\n\nimport java.util.BitSet;\nimport java.util.EnumSet;\n\nimport java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;\n\nimport org.cojen.tupl.io.FileFactory;\nimport org.cojen.tupl.io.FilePageArray;\nimport org.cojen.tupl.io.OpenOption;\nimport org.cojen.tupl.io.PageArray;\nimport org.cojen.tupl.io.StripedPageArray;\n\nimport org.cojen.tupl.util.Latch;\n\nimport static java.lang.System.arraycopy;\n\nimport static org.cojen.tupl.PageOps.*;\nimport static org.cojen.tupl.Utils.*;\n\n/**\n * Low-level support for storing fixed size pages in a single file. Page size should be a\n * multiple of the file system allocation unit, which is typically 4096 bytes. The minimum\n * allowed page size is 512 bytes, and the maximum is 2^31.\n *\n * <p>Existing pages cannot be updated, and no changes are permanently applied until\n * commit is called. This design allows full recovery following a crash, by rolling back\n * all changes to the last successful commit. All changes before the commit are still\n * stored in the file, allowing the interval between commits to be quite long.\n *\n * <p>Any exception thrown while performing an operation on the DurablePageDb\n * causes it to close. This prevents further damage if the in-memory state is\n * now inconsistent with the persistent state. The DurablePageDb must be\n * re-opened to restore to a clean state.\n *\n * @author Brian S O'Neill\n */\nfinal class DurablePageDb extends PageDb {\n    /*\n\n    Header format for first and second pages in file, which is always 512 bytes:\n\n    +------------------------------------------+\n    | long: magic number                       |\n    | int:  page size                          |\n    | int:  commit number                      |\n    | int:  checksum                           |\n    | page manager header (140 bytes)          |\n    +------------------------------------------+\n    | reserved (96 bytes)                      |\n    +------------------------------------------+\n    | extra data (256 bytes)                   |\n    +------------------------------------------+\n\n    */\n\n    private static final long MAGIC_NUMBER = 6529720411368701212L;\n\n    // Indexes of entries in header node.\n    private static final int I_MAGIC_NUMBER     = 0;\n    private static final int I_PAGE_SIZE        = I_MAGIC_NUMBER + 8;\n    private static final int I_COMMIT_NUMBER    = I_PAGE_SIZE + 4;\n    private static final int I_CHECKSUM         = I_COMMIT_NUMBER + 4;\n    private static final int I_MANAGER_HEADER   = I_CHECKSUM + 4;\n    private static final int I_EXTRA_DATA       = 256;\n\n    private static final int MINIMUM_PAGE_SIZE = 512;\n\n    private final Crypto mCrypto;\n    private final SnapshotPageArray mPageArray;\n    private final PageManager mPageManager;\n\n    private final Latch mHeaderLatch;\n    // Commit number is the highest one which has been committed.\n    private int mCommitNumber;\n\n    /**\n     * @param factory optional\n     * @param cache optional\n     * @param crypto optional\n     */\n    static DurablePageDb open(boolean explicitPageSize, int pageSize,\n                              File[] files, FileFactory factory, EnumSet<OpenOption> options,\n                              PageCache cache, Crypto crypto, boolean destroy)\n        throws IOException\n    {\n        while (true) {\n            try {\n                return new DurablePageDb\n                    (openPageArray(pageSize, files, factory, options), cache, crypto, destroy);\n            } catch (WrongPageSize e) {\n                if (explicitPageSize) {\n                    throw e.rethrow();\n                }\n                pageSize = e.mActual;\n                explicitPageSize = true;\n            }\n        }\n    }\n\n    /**\n     * @param cache optional\n     * @param crypto optional\n     */\n    static DurablePageDb open(PageArray rawArray, PageCache cache, Crypto crypto, boolean destroy)\n        throws IOException\n    {\n        try {\n            return new DurablePageDb(rawArray, cache, crypto, destroy);\n        } catch (WrongPageSize e) {\n            throw e.rethrow();\n        }\n    }\n\n    private static PageArray openPageArray(int pageSize, File[] files, FileFactory factory,\n                                           EnumSet<OpenOption> options)\n        throws IOException\n    {\n        checkPageSize(pageSize);\n\n        if (!options.contains(OpenOption.CREATE)) {\n            for (File file : files) {\n                if (!file.exists()) {\n                    throw new DatabaseException(\"File does not exist: \" + file);\n                }\n            }\n        }\n\n        if (files.length == 0) {\n            throw new IllegalArgumentException(\"No files provided\");\n        }\n\n        if (files.length == 1) {\n            return new FilePageArray(pageSize, files[0], factory, options);\n        }\n\n        PageArray[] arrays = new PageArray[files.length];\n        for (int i=0; i<files.length; i++) {\n            arrays[i] = new FilePageArray(pageSize, files[i], factory, options);\n        }\n\n        return new StripedPageArray(arrays);\n    }\n\n    private static void checkPageSize(int pageSize) {\n        if (pageSize < MINIMUM_PAGE_SIZE) {\n            throw new IllegalArgumentException\n                (\"Page size is too small: \" + pageSize + \" < \" + MINIMUM_PAGE_SIZE);\n        }\n    }\n\n    private DurablePageDb(final PageArray rawArray, final PageCache cache,\n                          final Crypto crypto, final boolean destroy)\n        throws IOException, WrongPageSize\n    {\n        mCrypto = crypto;\n\n        PageArray array = crypto == null ? rawArray : new CryptoPageArray(rawArray, crypto);\n\n        mPageArray = new SnapshotPageArray(array, rawArray, cache);\n        mHeaderLatch = new Latch();\n\n        try {\n            int pageSize = mPageArray.pageSize();\n            checkPageSize(pageSize);\n\n            if (destroy || mPageArray.isEmpty()) {\n                // Newly created file.\n                mPageManager = new PageManager(mPageArray);\n                mCommitNumber = -1;\n\n                // Commit twice to ensure both headers have valid data.\n                /*P*/ byte[] header = p_calloc(pageSize);\n                try {\n                    commit(false, header, null);\n                    commit(false, header, null);\n                } finally {\n                    p_delete(header);\n                }\n\n                mPageArray.setPageCount(2);\n            } else {\n                // Opened an existing file.\n\n                // Previous header commit operation might have been interrupted before final\n                // header sync completed. Pages cannot be safely recycled without this.\n                mPageArray.sync(false);\n\n                /*P*/ byte[] header0 = p_null();\n                /*P*/ byte[] header1 = p_null();\n\n                try {\n                    final /*P*/ byte[] header;\n                    final int commitNumber;\n                    findHeader: {\n                        int pageSize0;\n                        int commitNumber0, commitNumber1;\n                        CorruptDatabaseException ex0;\n\n                        try {\n                            header0 = readHeader(0);\n                            commitNumber0 = p_intGetLE(header0, I_COMMIT_NUMBER);\n                            pageSize0 = p_intGetLE(header0, I_PAGE_SIZE);\n                            ex0 = null;\n                        } catch (CorruptDatabaseException e) {\n                            header0 = p_null();\n                            commitNumber0 = -1;\n                            pageSize0 = pageSize;\n                            ex0 = e;\n                        }\n\n                        if (pageSize0 != pageSize) {\n                            throw new WrongPageSize(pageSize, pageSize0);\n                        }\n\n                        try {\n                            header1 = readHeader(1);\n                            commitNumber1 = p_intGetLE(header1, I_COMMIT_NUMBER);\n                        } catch (CorruptDatabaseException e) {\n                            if (ex0 != null) {\n                                // File is completely unusable.\n                                throw ex0;\n                            }\n                            header = header0;\n                            commitNumber = commitNumber0;\n                            break findHeader;\n                        }\n\n                        int pageSize1 = p_intGetLE(header1, I_PAGE_SIZE);\n                        if (pageSize0 != pageSize1) {\n                            throw new CorruptDatabaseException\n                                (\"Mismatched page sizes: \" + pageSize0 + \" != \" + pageSize1);\n                        }\n\n                        if (header0 == p_null()) {\n                            header = header1;\n                            commitNumber = commitNumber1;\n                        } else {\n                            // Modulo comparison.\n                            int diff = commitNumber1 - commitNumber0;\n                            if (diff > 0) {\n                                header = header1;\n                                commitNumber = commitNumber1;\n                            } else if (diff < 0) {\n                                header = header0;\n                                commitNumber = commitNumber0;\n                            } else {\n                                throw new CorruptDatabaseException\n                                    (\"Both headers have same commit number: \" + commitNumber0);\n                            }\n                        }\n                    }\n\n                    mHeaderLatch.acquireExclusive();\n                    mCommitNumber = commitNumber;\n                    mHeaderLatch.releaseExclusive();\n\n                    mPageManager = new PageManager(mPageArray, header, I_MANAGER_HEADER);\n                } finally {\n                    p_delete(header0);\n                    p_delete(header1);\n                }\n            }\n        } catch (WrongPageSize e) {\n            delete();\n            closeQuietly(null, this);\n            throw e;\n        } catch (Throwable e) {\n            delete();\n            throw closeOnFailure(e);\n        }\n    }\n\n    /**\n     * Must be called when object is no longer referenced.\n     */\n    @Override\n    void delete() {\n        if (mPageManager != null) {\n            mPageManager.delete();\n        }\n    }\n\n    @Override\n    public boolean isDurable() {\n        return true;\n    }\n\n    @Override\n    public int allocMode() {\n        return 0;\n    }\n\n    @Override\n    public Node allocLatchedNode(LocalDatabase db, int mode) throws IOException {\n        long nodeId = allocPage();\n        try {\n            Node node = db.allocLatchedNode(nodeId, mode);\n            node.mId = nodeId;\n            return node;\n        } catch (Throwable e) {\n            try {\n                recyclePage(nodeId);\n            } catch (Throwable e2) {\n                e.addSuppressed(e2);\n            }\n            throw e;\n        }\n    }\n\n    @Override\n    public int pageSize() {\n        return mPageArray.pageSize();\n    }\n\n    @Override\n    public long pageCount() throws IOException {\n        return mPageArray.getPageCount();\n    }\n\n    @Override\n    public void pageLimit(long limit) {\n        mPageManager.pageLimit(limit);\n    }\n\n    @Override\n    public long pageLimit() {\n        return mPageManager.pageLimit();\n    }\n\n    @Override\n    public void pageLimitOverride(long bytes) {\n        mPageManager.pageLimitOverride(bytes);\n    }\n\n    @Override\n    public Stats stats() {\n        Stats stats = new Stats();\n        mPageManager.addTo(stats);\n        return stats;\n    }\n\n    @Override\n    public BitSet tracePages() throws IOException {\n        BitSet pages = new BitSet();\n        mPageManager.markAllPages(pages);\n        mPageManager.traceFreePages(pages);\n        return pages;\n    }\n\n    @Override\n    public void readPage(long id, /*P*/ byte[] page) throws IOException {\n        try {\n            mPageArray.readPage(id, page, 0, pageSize());\n        } catch (Throwable e) {\n            throw closeOnFailure(e);\n        }\n    }\n\n    @Override\n    public long allocPage() throws IOException {\n        mCommitLock.acquireShared();\n        try {\n            return mPageManager.allocPage();\n        } catch (DatabaseException e) {\n            if (e.isRecoverable()) {\n                throw e;\n            }\n            throw closeOnFailure(e);\n        } catch (Throwable e) {\n            throw closeOnFailure(e);\n        } finally {\n            mCommitLock.releaseShared();\n        }\n    }\n\n    @Override\n    public void writePage(long id, /*P*/ byte[] page) throws IOException {\n        checkId(id);\n        mPageArray.writePage(id, page, 0);\n    }\n\n    @Override\n    public /*P*/ byte[] evictPage(long id, /*P*/ byte[] page) throws IOException {\n        checkId(id);\n        return mPageArray.evictPage(id, page);\n    }\n\n    @Override\n    public void cachePage(long id, /*P*/ byte[] page) throws IOException {\n        mPageArray.cachePage(id, page);\n    }\n\n    @Override\n    public void uncachePage(long id) throws IOException {\n        mPageArray.uncachePage(id);\n    }\n\n    @Override\n    public void deletePage(long id) throws IOException {\n        checkId(id);\n        mCommitLock.acquireShared();\n        try {\n            mPageManager.deletePage(id);\n        } catch (IOException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw closeOnFailure(e);\n        } finally {\n            mCommitLock.releaseShared();\n        }\n        mPageArray.uncachePage(id);\n    }\n\n    @Override\n    public void recyclePage(long id) throws IOException {\n        checkId(id);\n        mCommitLock.acquireShared();\n        try {\n            try {\n                mPageManager.recyclePage(id);\n            } catch (IOException e) {\n                mPageManager.deletePage(id);\n            }\n        } catch (IOException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw closeOnFailure(e);\n        } finally {\n            mCommitLock.releaseShared();\n        }\n    }\n\n    @Override\n    public long allocatePages(long pageCount) throws IOException {\n        if (pageCount <= 0) {\n            return 0;\n        }\n\n        Stats stats = new Stats();\n        mPageManager.addTo(stats);\n        pageCount -= stats.freePages;\n\n        if (pageCount <= 0) {\n            return 0;\n        }\n\n        final ReadLock lock = mCommitLock.readLock();\n\n        for (int i=0; i<pageCount; i++) {\n            lock.lock();\n            try {\n                mPageManager.allocAndRecyclePage();\n            } catch (Throwable e) {\n                throw closeOnFailure(e);\n            } finally {\n                lock.unlock();\n            }\n        }\n\n        return pageCount;\n    }\n\n    @Override\n    public long directPagePointer(long id) throws IOException {\n        return mPageArray.directPagePointer(id);\n    }\n\n    @Override\n    public long copyPage(long srcId, long dstId) throws IOException {\n        return mPageArray.copyPage(srcId, dstId);\n    }\n\n    @Override\n    public boolean compactionStart(long targetPageCount) throws IOException {\n        mCommitLock.acquireExclusive();\n        try {\n            return mPageManager.compactionStart(targetPageCount);\n        } catch (Throwable e) {\n            throw closeOnFailure(e);\n        } finally {\n            mCommitLock.releaseExclusive();\n        }\n    }\n\n    @Override\n    public boolean compactionScanFreeList() throws IOException {\n        try {\n            return mPageManager.compactionScanFreeList(mCommitLock);\n        } catch (Throwable e) {\n            throw closeOnFailure(e);\n        }\n    }\n\n    @Override\n    public boolean compactionVerify() throws IOException {\n        // Only performs reads and so no commit lock is required. Holding it would block\n        // checkpoints during reserve list scan, which is not desirable.\n        return mPageManager.compactionVerify();\n    }\n\n    @Override\n    public boolean compactionEnd() throws IOException {\n        try {\n            return mPageManager.compactionEnd(mCommitLock);\n        } catch (Throwable e) {\n            throw closeOnFailure(e);\n        }\n    }\n\n    @Override\n    public boolean truncatePages() throws IOException {\n        return mPageManager.truncatePages();\n    }\n\n    @Override\n    public int extraCommitDataOffset() {\n        return I_EXTRA_DATA;\n    }\n\n    @Override\n    public void commit(boolean resume, /*P*/ byte[] header, final CommitCallback callback)\n        throws IOException\n    {\n        mCommitLock.acquireExclusive();\n        mCommitLock.acquireShared();\n\n        mHeaderLatch.acquireShared();\n        final int commitNumber = mCommitNumber + 1;\n        mHeaderLatch.releaseShared();\n\n        // Downgrade and keep read lock. This prevents another commit from\n        // starting concurrently.\n        mCommitLock.releaseExclusive();\n\n        try {\n            try {\n                if (!resume) {\n                    mPageManager.commitStart(header, I_MANAGER_HEADER);\n                }\n                if (callback != null) {\n                    // Invoke the callback to ensure all dirty pages get written.\n                    callback.prepare(resume, header);\n                }\n            } catch (DatabaseException e) {\n                if (e.isRecoverable()) {\n                    throw e;\n                } else {\n                    throw closeOnFailure(e);\n                }\n            }\n\n            try {\n                commitHeader(header, commitNumber);\n                mPageManager.commitEnd(header, I_MANAGER_HEADER);\n            } catch (Throwable e) {\n                throw closeOnFailure(e);\n            }\n        } finally {\n            mCommitLock.releaseShared();\n        }\n    }\n\n    @Override\n    public void readExtraCommitData(byte[] extra) throws IOException {\n        try {\n            mHeaderLatch.acquireShared();\n            try {\n                readPartial(mCommitNumber & 1, I_EXTRA_DATA, extra, 0, extra.length);\n            } finally {\n                mHeaderLatch.releaseShared();\n            }\n        } catch (Throwable e) {\n            throw closeOnFailure(e);\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        close(null);\n    }\n\n    @Override\n    public void close(Throwable cause) throws IOException {\n        if (mPageArray != null) {\n            mPageArray.close(cause);\n        }\n    }\n\n    /**\n     * Wraps the output stream if it needs to be encrypted.\n     */\n    OutputStream encrypt(OutputStream out) throws IOException {\n        if (mCrypto != null) {\n            try {\n                out = mCrypto.newEncryptingStream(0, out);\n            } catch (GeneralSecurityException e) {\n                throw new DatabaseException(e);\n            }\n        }\n        return out;\n    }\n\n    /**\n     * Wraps the input stream if it needs to be decrypted.\n     */\n    InputStream decrypt(InputStream in) throws IOException {\n        if (mCrypto != null) {\n            try {\n                in = mCrypto.newDecryptingStream(0, in);\n            } catch (GeneralSecurityException e) {\n                throw new DatabaseException(e);\n            }\n        }\n        return in;\n    }\n\n    /**\n     * @see SnapshotPageArray#beginSnapshot\n     */\n    Snapshot beginSnapshot(LocalDatabase db) throws IOException {\n        mHeaderLatch.acquireShared();\n        try {\n            long pageCount, redoPos;\n            /*P*/ byte[] header = p_alloc(MINIMUM_PAGE_SIZE);\n            try {\n                mPageArray.readPage(mCommitNumber & 1, header, 0, MINIMUM_PAGE_SIZE);\n                pageCount = PageManager.readTotalPageCount(header, I_MANAGER_HEADER);\n                redoPos = LocalDatabase.readRedoPosition(header, I_EXTRA_DATA); \n            } finally {\n                p_delete(header);\n            }\n            return mPageArray.beginSnapshot(db, pageCount, redoPos);\n        } finally {\n            mHeaderLatch.releaseShared();\n        }\n    }\n\n    /**\n     * @param factory optional\n     * @param cache optional\n     * @param crypto optional\n     * @param in snapshot source; does not require extra buffering; auto-closed\n     */\n    static PageDb restoreFromSnapshot(int pageSize, File[] files, FileFactory factory,\n                                      EnumSet<OpenOption> options,\n                                      PageCache cache, Crypto crypto, InputStream in)\n        throws IOException\n    {\n        if (options.contains(OpenOption.READ_ONLY)) {\n            throw new DatabaseException(\"Cannot restore into a read-only file\");\n        }\n\n        byte[] buffer;\n        /*P*/ byte[] bufferPage;\n        PageArray pa;\n        long index = 0;\n\n        if (crypto != null) {\n            buffer = new byte[pageSize];\n            bufferPage = p_transfer(buffer);\n            pa = openPageArray(pageSize, files, factory, options);\n            if (!pa.isEmpty()) {\n                throw new DatabaseException(\"Cannot restore into a non-empty file\");\n            }\n        } else {\n            // Figure out what the actual page size is.\n\n            buffer = new byte[MINIMUM_PAGE_SIZE];\n            readFully(in, buffer, 0, buffer.length);\n\n            long magic = decodeLongLE(buffer, I_MAGIC_NUMBER);\n            if (magic != MAGIC_NUMBER) {\n                throw new CorruptDatabaseException(\"Wrong magic number: \" + magic);\n            }\n\n            pageSize = decodeIntLE(buffer, I_PAGE_SIZE);\n            pa = openPageArray(pageSize, files, factory, options);\n\n            if (!pa.isEmpty()) {\n                throw new DatabaseException(\"Cannot restore into a non-empty file\");\n            }\n\n            if (pageSize != buffer.length) {\n                byte[] newBuffer = new byte[pageSize];\n                arraycopy(buffer, 0, newBuffer, 0, buffer.length);\n                readFully(in, newBuffer, buffer.length, pageSize - buffer.length);\n                buffer = newBuffer;\n            }\n\n            bufferPage = p_transfer(buffer);\n            try {\n                pa.writePage(index, bufferPage);\n                index++;\n            } catch (Throwable e) {\n                p_delete(bufferPage);\n                throw e;\n            }\n        }\n\n        return restoreFromSnapshot(cache, crypto, in, buffer, bufferPage, pa, index);\n    }\n\n    /**\n     * @param cache optional\n     * @param crypto optional\n     * @param in snapshot source; does not require extra buffering; auto-closed\n     */\n    static PageDb restoreFromSnapshot(PageArray pa, PageCache cache, Crypto crypto, InputStream in)\n        throws IOException\n    {\n        if (!pa.isEmpty()) {\n            throw new DatabaseException(\"Cannot restore into a non-empty file\");\n        }\n\n        byte[] buffer = new byte[pa.pageSize()];\n        /*P*/ byte[] bufferPage = p_transfer(buffer);\n\n        return restoreFromSnapshot(cache, crypto, in, buffer, bufferPage, pa, 0);\n    }\n\n    private static PageDb restoreFromSnapshot(PageCache cache, Crypto crypto, InputStream in,\n                                              byte[] buffer, /*P*/ byte[] bufferPage,\n                                              PageArray pa, long index)\n        throws IOException\n    {\n        try {\n            while (true) {\n                try {\n                    readFully(in, buffer, 0, buffer.length);\n                } catch (EOFException e) {\n                    break;\n                }\n                pa.writePage(index, p_transferTo(buffer, bufferPage));\n                index++;\n            }\n\n            // Ensure newly restored snapshot is durable and also ensure that PageArray (if a\n            // MappedPageArray) no longer considers itself to be empty.\n            pa.sync(true);\n        } finally {\n            p_delete(bufferPage);\n            closeQuietly(null, in);\n        }\n\n        try {\n            return new DurablePageDb(pa, cache, crypto, false);\n        } catch (WrongPageSize e) {\n            throw e.rethrow();\n        }\n    }\n\n    private IOException closeOnFailure(Throwable e) throws IOException {\n        throw Utils.closeOnFailure(this, e);\n    }\n\n    private static void checkId(long id) {\n        if (id <= 1) {\n            throw new IllegalArgumentException(\"Illegal page id: \" + id);\n        }\n    }\n\n    /**\n     * @param header array length is full page\n     */\n    private void commitHeader(final /*P*/ byte[] header, final int commitNumber)\n        throws IOException\n    {\n        final PageArray array = mPageArray;\n\n        p_longPutLE(header, I_MAGIC_NUMBER, MAGIC_NUMBER);\n        p_intPutLE (header, I_PAGE_SIZE, array.pageSize());\n        p_intPutLE (header, I_COMMIT_NUMBER, commitNumber);\n\n        // Durably write the new page store header before returning\n        // from this method, to ensure that the manager doesn't start\n        // returning uncommitted pages. This would prevent rollback\n        // from working because the old pages would get overwritten.\n        setHeaderChecksum(header);\n\n        // Write multiple header copies in the page, in case special recovery is required.\n        int dupCount = pageSize() / MINIMUM_PAGE_SIZE;\n        for (int i=1; i<dupCount; i++) {\n            p_copy(header, 0, header, i * MINIMUM_PAGE_SIZE, MINIMUM_PAGE_SIZE);\n        }\n\n        // Ensure all writes are flushed before flushing the header. There's\n        // otherwise no ordering guarantees. Metadata should also be flushed\n        // first, because the header won't affect it.\n        array.sync(true);\n\n        mHeaderLatch.acquireExclusive();\n        try {\n            array.writePage(commitNumber & 1, header);\n            mCommitNumber = commitNumber;\n        } finally {\n            mHeaderLatch.releaseExclusive();\n        }\n\n        // Final sync to ensure the header is durable.\n        array.syncPage(commitNumber & 1);\n    }\n\n    private static int setHeaderChecksum(/*P*/ byte[] header) {\n        // Clear checksum field before computing.\n        p_intPutLE(header, I_CHECKSUM, 0);\n        int checksum = p_crc32(header, 0, MINIMUM_PAGE_SIZE);\n        p_intPutLE(header, I_CHECKSUM, checksum);\n        return checksum;\n    }\n\n    private /*P*/ byte[] readHeader(int id) throws IOException {\n        /*P*/ byte[] header = p_alloc(MINIMUM_PAGE_SIZE);\n\n        try {\n            try {\n                mPageArray.readPage(id, header, 0, MINIMUM_PAGE_SIZE);\n            } catch (EOFException e) {\n                throw new CorruptDatabaseException(\"File is smaller than expected\");\n            }\n\n            long magic = p_longGetLE(header, I_MAGIC_NUMBER);\n            if (magic != MAGIC_NUMBER) {\n                throw new CorruptDatabaseException(\"Wrong magic number: \" + magic);\n            }\n\n            int checksum = p_intGetLE(header, I_CHECKSUM);\n\n            int newChecksum = setHeaderChecksum(header);\n            if (newChecksum != checksum) {\n                throw new CorruptDatabaseException\n                    (\"Header checksum mismatch: \" + newChecksum + \" != \" + checksum);\n            }\n\n            return header;\n        } catch (Throwable e) {\n            p_delete(header);\n            throw e;\n        }\n    }\n\n    private void readPartial(long index, int start, byte[] buf, int offset, int length)\n        throws IOException\n    {\n        /*P*/ byte[] page = p_alloc(start + length);\n        try {\n            mPageArray.readPage(index, page, 0, start + length);\n            p_copyToArray(page, start, buf, offset, length);\n        } finally {\n            p_delete(page);\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"cojen/Tupl","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/cojen/tupl/DurablePageDb.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1a26c170c74ff4968d1e3a46a07a2ae2d95ed438","size":"5647","content":"/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S\u00e1nchez (luciano@uniovi.es)\r\n    J. Alcal\u00e1-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc\u00eda (sglopez@ujaen.es)\r\n    A. Fern\u00e1ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\npackage keel.Algorithms.Genetic_Rule_Learning.Corcoran;\r\n\r\n/**\r\n * <p>Title: Instance</p>\r\n * <p>Description: Structure for an instance used in the data-set</p>\r\n * @author Written by Jos\u00e9 Ram\u00f3n Cano de Amo (University of Jaen) 08/02/2004\r\n * @author Modified by Alberto Fern\u00e1ndez (University of Granada) 11/27/2004\r\n * @version 1.1\r\n * @since JDK1.4\r\n */\r\npublic class Instance {\r\n\r\n    /**\r\n     *  It stores an instance in the form attr, attr, attr, class\r\n     */\r\n\r\n    private double muest[];\r\n    private int clas;\r\n    private long posFile; // position in the file\r\n    private int tam;\r\n    private int covered;\r\n\r\n    /**\r\n     * Builder\r\n     * @param m an array of attributes\r\n     * @param cl the class of the instance\r\n     * @param size the size of the instance (number of attributes)\r\n     */\r\n    public Instance(double m[], int cl, int size) {\r\n        super();\r\n        muest = m;\r\n        clas = cl;\r\n        tam = size;\r\n        covered = 0;\r\n    }\r\n\r\n    /**\r\n     * Builder without data\r\n     * @param size the size of the instance (number of attributes)\r\n     */\r\n    public Instance(int size) {\r\n        super();\r\n        tam = size;\r\n        muest = new double[tam];\r\n    }\r\n\r\n    /**\r\n     * It returns the class of the example\r\n     * @return the class\r\n     */\r\n    public int getClas() {\r\n        return clas;\r\n    }\r\n\r\n    /**\r\n     * It returns the example itself (array of values)\r\n     * @return the complete example\r\n     */\r\n    public double[] getMuest() {\r\n        return muest;\r\n    }\r\n\r\n    /**\r\n     * It assigns the class\r\n     * @param i class id\r\n     */\r\n    public void setClass(int i) {\r\n        clas = i;\r\n    }\r\n\r\n    /**\r\n     * It assigns the values for the instance\r\n     * @param ds an array of values for the instance\r\n     */\r\n    public void setMuest(double[] ds) {\r\n        int i;\r\n        for (i = 0; i < tam; i++) {\r\n            muest[i] = ds[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * It returns the position of the example in the input data file\r\n     * @return the file position\r\n     */\r\n    public long getPosFile() {\r\n        return posFile;\r\n    }\r\n\r\n    /**\r\n     * It assigns the position of the example in the input data file\r\n     * @param l file position\r\n     */\r\n    public void setPosFile(long l) {\r\n        posFile = l;\r\n    }\r\n\r\n    /**\r\n     * It returns the value of the attribute i-th of the example\r\n     * @param i attribute position\r\n     * @return attribute vaule\r\n     */\r\n    public double getAttribute(int i) {\r\n        return muest[i];\r\n    }\r\n\r\n    /**\r\n     * It returns the number of attributes of the example\r\n     * @return number of attributes\r\n     */\r\n    public int getNattributes() {\r\n        return tam;\r\n    }\r\n\r\n    /**\r\n     * It sets a value for an attribute\r\n     * @param i attribute position\r\n     * @param val new value\r\n     */\r\n    public void setAttribute(int i, double val) {\r\n        muest[i] = val;\r\n    }\r\n\r\n    /**\r\n     * It shows the content of the example\r\n     */\r\n    public void print() {\r\n        int i;\r\n\r\n        System.out.print(\"\\nPos \" + posFile + \": \");\r\n        for (i = 0; i < tam; i++) {\r\n            System.out.print(\" \" + muest[i]);\r\n        }\r\n        System.out.print(\"  Cl: \" + clas);\r\n    }\r\n\r\n    /**\r\n     * It makes a copy of the example\r\n     * @return a new cloned example\r\n     */\r\n    public Instance copy() {\r\n        Instance m = new Instance(tam);\r\n        m.setMuest(muest);\r\n        m.setClass(clas);\r\n        m.setPosFile(posFile);\r\n        return m;\r\n    }\r\n\r\n    /**\r\n     * It compares if two examples are the same\r\n     * @param m Example to compare\r\n     * @return True if they are the same. False in other case\r\n     */\r\n    public boolean compare(Instance m) {\r\n        boolean iguales = true;\r\n        for (int i = 0; i < this.getNattributes() && iguales; i++) {\r\n            iguales = (this.getAttribute(i) == m.getAttribute(i));\r\n        }\r\n        return iguales;\r\n    }\r\n\r\n    /**\r\n     * It returns the \"covered\" value, that is, the number of rules that covers the example\r\n     * @return the number of rules that covers the example\r\n     */\r\n    public int getCovered() {\r\n        return covered;\r\n    }\r\n\r\n    /**\r\n     * It gives a \"covered\" value\r\n     * @param value new value\r\n     */\r\n    public void setCovered(int value) {\r\n        covered = value;\r\n    }\r\n\r\n    /**\r\n     * Increments the \"covered\" value\r\n     */\r\n    public void addCovered() {\r\n        covered++;\r\n    }\r\n\r\n}\r\n\r\n","binary":"false","copies":"1","sample_repo_name":"SCI2SUGR/KEEL","sample_ref":"refs/heads/master","sample_path":"src/keel/Algorithms/Genetic_Rule_Learning/Corcoran/Instance.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"450fcff37ec12f684629a328e0b699c6a143356b","size":"2348","content":"/*\r\n * Copyright (c) 2012-2015 The original author or authors\r\n * ------------------------------------------------------\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * and Apache License v2.0 which accompanies this distribution.\r\n *\r\n * The Eclipse Public License is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * The Apache License v2.0 is available at\r\n * http://www.opensource.org/licenses/apache2.0.php\r\n *\r\n * You may elect to redistribute this code under either of these licenses.\r\n */\r\npackage org.emsg.smart_connector.commons.config;\r\n\r\nimport org.emsg.smart_connector.commons.constants.Constants;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.Reader;\r\nimport java.text.ParseException;\r\nimport java.util.Properties;\r\n\r\n/**\r\n * Configuration that loads file from the classpath\r\n *\r\n * @author shuttle\r\n */\r\npublic class ClasspathConfig implements IConfig {\r\n\r\n    private static final Logger LOG = LoggerFactory.getLogger(ClasspathConfig.class);\r\n\r\n    private final Properties m_properties;\r\n\r\n    public ClasspathConfig() {\r\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\r\n        InputStream is = classLoader.getResourceAsStream(Constants.CONFIG_PATH);\r\n        if (is == null) {\r\n            throw new RuntimeException(\"Can't locate the resource \\\"server.conf\\\"\");\r\n        }\r\n        Reader configReader = new InputStreamReader(is);\r\n        ConfigurationParser confParser = new ConfigurationParser();\r\n        try {\r\n            confParser.parse(configReader);\r\n        } catch (ParseException pex) {\r\n            LOG.warn(\"An error occurred in parsing configuration, fallback on default configuration\", pex);\r\n        }\r\n        m_properties = confParser.getProperties();\r\n    }\r\n\r\n    @Override\r\n    public void setProperty(String name, String value) {\r\n        m_properties.setProperty(name, value);\r\n    }\r\n\r\n    @Override\r\n    public String getProperty(String name) {\r\n        return m_properties.getProperty(name);\r\n    }\r\n\r\n    @Override\r\n    public String getProperty(String name, String defaultValue) {\r\n        return m_properties.getProperty(name, defaultValue);\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"sn3009/EasyMessage","sample_ref":"refs/heads/master","sample_path":"smart-connector/src/main/java/org/emsg/smart_connector/commons/config/ClasspathConfig.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8ec5cba9726fd99bcb5421601f4a2a4f8aca7014","size":"5282","content":"\n/* First created by JCasGen Wed Jan 14 12:58:27 GMT 2015 */\n//Dstl (c) Crown Copyright 2015\npackage uk.gov.dstl.baleen.types.semantic;\n\nimport org.apache.uima.jcas.JCas;\nimport org.apache.uima.jcas.JCasRegistry;\nimport org.apache.uima.cas.impl.CASImpl;\nimport org.apache.uima.cas.impl.FSGenerator;\nimport org.apache.uima.cas.FeatureStructure;\nimport org.apache.uima.cas.impl.TypeImpl;\nimport org.apache.uima.cas.Type;\nimport org.apache.uima.cas.impl.FeatureImpl;\nimport org.apache.uima.cas.Feature;\nimport uk.gov.dstl.baleen.types.Base_Type;\n\n/** Type to represent named entities - values that are assigned a semantic type.\n * Updated by JCasGen Wed Apr 13 13:23:16 BST 2016\n * @generated */\npublic class Entity_Type extends Base_Type {\n  /** @generated \n   * @return the generator for this type\n   */\n  @Override\n  protected FSGenerator getFSGenerator() {return fsGenerator;}\n  /** @generated */\n  private final FSGenerator fsGenerator = \n    new FSGenerator() {\n      public FeatureStructure createFS(int addr, CASImpl cas) {\n  \t\t\t if (Entity_Type.this.useExistingInstance) {\n  \t\t\t   // Return eq fs instance if already created\n  \t\t     FeatureStructure fs = Entity_Type.this.jcas.getJfsFromCaddr(addr);\n  \t\t     if (null == fs) {\n  \t\t       fs = new Entity(addr, Entity_Type.this);\n  \t\t\t   Entity_Type.this.jcas.putJfsFromCaddr(addr, fs);\n  \t\t\t   return fs;\n  \t\t     }\n  \t\t     return fs;\n        } else return new Entity(addr, Entity_Type.this);\n  \t  }\n    };\n  /** @generated */\n  @SuppressWarnings (\"hiding\")\n  public final static int typeIndexID = Entity.typeIndexID;\n  /** @generated \n     @modifiable */\n  @SuppressWarnings (\"hiding\")\n  public final static boolean featOkTst = JCasRegistry.getFeatOkTst(\"uk.gov.dstl.baleen.types.semantic.Entity\");\n \n  /** @generated */\n  final Feature casFeat_value;\n  /** @generated */\n  final int     casFeatCode_value;\n  /** @generated\n   * @param addr low level Feature Structure reference\n   * @return the feature value \n   */ \n  public String getValue(int addr) {\n        if (featOkTst && casFeat_value == null)\n      jcas.throwFeatMissing(\"value\", \"uk.gov.dstl.baleen.types.semantic.Entity\");\n    return ll_cas.ll_getStringValue(addr, casFeatCode_value);\n  }\n  /** @generated\n   * @param addr low level Feature Structure reference\n   * @param v value to set \n   */    \n  public void setValue(int addr, String v) {\n        if (featOkTst && casFeat_value == null)\n      jcas.throwFeatMissing(\"value\", \"uk.gov.dstl.baleen.types.semantic.Entity\");\n    ll_cas.ll_setStringValue(addr, casFeatCode_value, v);}\n    \n  \n \n  /** @generated */\n  final Feature casFeat_isNormalised;\n  /** @generated */\n  final int     casFeatCode_isNormalised;\n  /** @generated\n   * @param addr low level Feature Structure reference\n   * @return the feature value \n   */ \n  public boolean getIsNormalised(int addr) {\n        if (featOkTst && casFeat_isNormalised == null)\n      jcas.throwFeatMissing(\"isNormalised\", \"uk.gov.dstl.baleen.types.semantic.Entity\");\n    return ll_cas.ll_getBooleanValue(addr, casFeatCode_isNormalised);\n  }\n  /** @generated\n   * @param addr low level Feature Structure reference\n   * @param v value to set \n   */    \n  public void setIsNormalised(int addr, boolean v) {\n        if (featOkTst && casFeat_isNormalised == null)\n      jcas.throwFeatMissing(\"isNormalised\", \"uk.gov.dstl.baleen.types.semantic.Entity\");\n    ll_cas.ll_setBooleanValue(addr, casFeatCode_isNormalised, v);}\n    \n  \n \n  /** @generated */\n  final Feature casFeat_subType;\n  /** @generated */\n  final int     casFeatCode_subType;\n  /** @generated\n   * @param addr low level Feature Structure reference\n   * @return the feature value \n   */ \n  public String getSubType(int addr) {\n        if (featOkTst && casFeat_subType == null)\n      jcas.throwFeatMissing(\"subType\", \"uk.gov.dstl.baleen.types.semantic.Entity\");\n    return ll_cas.ll_getStringValue(addr, casFeatCode_subType);\n  }\n  /** @generated\n   * @param addr low level Feature Structure reference\n   * @param v value to set \n   */    \n  public void setSubType(int addr, String v) {\n        if (featOkTst && casFeat_subType == null)\n      jcas.throwFeatMissing(\"subType\", \"uk.gov.dstl.baleen.types.semantic.Entity\");\n    ll_cas.ll_setStringValue(addr, casFeatCode_subType, v);}\n    \n  \n\n\n\n  /** initialize variables to correspond with Cas Type and Features\n\t * @generated\n\t * @param jcas JCas\n\t * @param casType Type \n\t */\n  public Entity_Type(JCas jcas, Type casType) {\n    super(jcas, casType);\n    casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType, getFSGenerator());\n\n \n    casFeat_value = jcas.getRequiredFeatureDE(casType, \"value\", \"uima.cas.String\", featOkTst);\n    casFeatCode_value  = (null == casFeat_value) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_value).getCode();\n\n \n    casFeat_isNormalised = jcas.getRequiredFeatureDE(casType, \"isNormalised\", \"uima.cas.Boolean\", featOkTst);\n    casFeatCode_isNormalised  = (null == casFeat_isNormalised) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_isNormalised).getCode();\n\n \n    casFeat_subType = jcas.getRequiredFeatureDE(casType, \"subType\", \"uima.cas.String\", featOkTst);\n    casFeatCode_subType  = (null == casFeat_subType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_subType).getCode();\n\n  }\n}\n\n\n\n    ","binary":"false","copies":"1","sample_repo_name":"dstl/baleen","sample_ref":"refs/heads/master","sample_path":"baleen/baleen-uima/src/main/java/uk/gov/dstl/baleen/types/semantic/Entity_Type.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"32e72ba401331b14cca1375cd78163f747381363","size":"37329","content":"package org.khelekore.parjac.semantics;\n\nimport java.io.IOException;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Deque;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.stream.Collectors;\n\nimport org.khelekore.parjac.CompilerDiagnosticCollector;\nimport org.khelekore.parjac.NoSourceDiagnostics;\nimport org.khelekore.parjac.SourceDiagnostics;\nimport org.khelekore.parjac.lexer.ParsePosition;\nimport org.khelekore.parjac.tree.*;\n\npublic class ClassSetter {\n    private final ClassInformationProvider cip;\n    private final SyntaxTree tree;\n    private final CompilerDiagnosticCollector diagnostics;\n    private final DottedName packageName;\n    private final ImportHandler ih = new ImportHandler ();\n    private Deque<BodyPart> containingTypes = new ArrayDeque<> ();\n    private final Map<TreeNode, TypeHolder> types = new HashMap<> ();\n    private TypeHolder currentTypes = null;\n\n    private final static String[] EMTPY = new String[0];\n\n    /** High level description:\n     *  For each class:\n     *      Setup a Scope\n     *      Find fields, set type on them, add to scope of class\n     *      Find methods, set type on arguments and add to scope of method\n     *      Set type of expression\n     */\n    public static void fillInClasses (ClassInformationProvider cip,\n\t\t\t\t      List<SyntaxTree> trees,\n\t\t\t\t      CompilerDiagnosticCollector diagnostics) {\n\tList<ClassSetter> classSetters =\n\t    trees.stream ().map (t -> new ClassSetter (cip, t, diagnostics)).collect (Collectors.toList ());\n\tif (diagnostics.hasError ())\n\t    return;\n\n\tclassSetters.parallelStream ().forEach (cs -> cs.registerSuperTypes ());\n\n\t// Fill in correct classes\n\t// Depending on order we may not have correct parents on first try.\n\t// We collect the trees that fails and tries again\n\tQueue<ClassSetter> rest = new ConcurrentLinkedQueue<> ();\n\tclassSetters.parallelStream ().forEach (cs -> cs.addScopes (rest, 0));\n\t// TODO: we probably need to loop until rest is empty\n\tif (!rest.isEmpty ()) {\n\t    Queue<ClassSetter> rest2 = new ConcurrentLinkedQueue<> ();\n\t    rest.parallelStream ().forEach (cs -> cs.addScopes (rest2, 1));\n\t}\n\tif (diagnostics.hasError ())\n\t    return;\n\tclassSetters.parallelStream ().forEach (cs -> cs.checkUnusedImport ());\n    }\n\n    public ClassSetter (ClassInformationProvider cip, SyntaxTree tree,\n\t\t\tCompilerDiagnosticCollector diagnostics) {\n\tthis.cip = cip;\n\tthis.tree = tree;\n\tthis.diagnostics = diagnostics;\n\n\tCompilationUnit cu = tree.getCompilationUnit ();\n\tpackageName = cu.getPackage ();\n\tih.addDefaultPackages ();\n\tcu.getImports ().forEach (i -> i.visit (ih));\n    }\n\n    public void registerSuperTypes () {\n\tSuperTypeRegistrator str = new SuperTypeRegistrator ();\n\ttree.getCompilationUnit ().visit (str);\n    }\n\n    private class SuperTypeRegistrator implements TreeVisitor, ErrorHandler {\n\t@Override public boolean visit (NormalClassDeclaration c) {\n\t    pushType (c, c.getBody (), c.getTypeParameters ());\n\t    ClassType superclass = c.getSuperClass ();\n\t    if (superclass != null)\n\t\tsetType (superclass, this);\n\t    visitSuperInterfaces (c.getSuperInterfaces (), this);\n\t    return true;\n\t}\n\n\t@Override public boolean visit (EnumDeclaration e) {\n\t    pushType (e, e.getBody (), null);\n\t    visitSuperInterfaces (e.getSuperInterfaces (), this);\n\t    return true;\n\t}\n\n\t@Override public boolean visit (NormalInterfaceDeclaration i) {\n\t    pushType (i, i.getBody (), i.getTypeParameters ());\n\t    ExtendsInterfaces ei = i.getExtendsInterfaces ();\n\t    if (ei != null)\n\t\tvisitSuperInterfaces (ei.get (), this);\n\t    return true;\n\t}\n\n\t@Override public boolean visit (AnnotationTypeDeclaration a) {\n\t    pushType (a, a.getBody (), null);\n\t    return true;\n\t}\n\n\tprivate void pushType (TreeNode type, TreeNode body, TypeParameters tps) {\n\t    String fqn = cip.getFullName (type);\n\t    containingTypes.push (new BodyPart (fqn, body));\n\t    registerTypeParameters (type, tps, this);\n\t}\n\n\t@Override public void endType () {\n\t    containingTypes.pop ();\n\t    currentTypes = currentTypes.parent;\n\t}\n\n\t@Override public boolean mayReport () {\n\t    return true;\n\t}\n\n\t@Override public void setIncomplete () {\n\t    // ignore\n\t}\n    }\n\n    public void addScopes (Queue<ClassSetter> rest, int level) {\n\tScopeSetter ss = new ScopeSetter (level);\n\ttree.getCompilationUnit ().visit (ss);\n\tif (!ss.completed ())\n\t    rest.add (this);\n    }\n\n    public void checkUnusedImport () {\n\tList<ImportDeclaration> imports = tree.getCompilationUnit ().getImports ();\n\timports.stream ().filter (i -> !i.hasBeenUsed ()).forEach (i -> checkUnusedImport (i));\n    }\n\n    private void checkUnusedImport (ImportDeclaration i) {\n\tif (i instanceof SingleStaticImportDeclaration) {\n\t    SingleStaticImportDeclaration si = (SingleStaticImportDeclaration)i;\n\t    String full = si.getFullName ();\n\t    String fqn = si.getName ().getDotName ();\n\t    String field = si.getInnerId ();\n\t    if (!hasVisibleType (full) && cip.getFieldInformation (fqn, field) == null) {\n\t\tdiagnostics.report (SourceDiagnostics.error (tree.getOrigin (), i.getParsePosition (),\n\t\t\t\t\t\t\t     \"Type %s has no symbol: %s\", fqn, field));\n\t\treturn;\n\t    }\n\t}\n\tdiagnostics.report (SourceDiagnostics.warning (tree.getOrigin (),\n\t\t\t\t\t\t       i.getParsePosition (),\n\t\t\t\t\t\t       \"Unused import\"));\n    }\n\n    private class ScopeSetter implements TreeVisitor, ErrorHandler {\n\tprivate final int level;\n\tprivate Scope currentScope = null;\n\tprivate boolean completed = true;\n\n\tpublic ScopeSetter (int level) {\n\t    this.level = level;\n\t}\n\n\t@Override public boolean mayReport () {\n\t    return level > 0;\n\t}\n\n\t@Override public void setIncomplete () {\n\t    completed = false;\n\t}\n\n\tpublic boolean completed () {\n\t    return completed;\n\t}\n\n\t@Override public boolean visit (NormalClassDeclaration c) {\n\t    String fqn = cip.getFullName (c);\n\t    pushType (c, fqn, c.getBody ());\n\t    addScopeAndFields (fqn, c, c.getBody ());\n\t    return true;\n\t}\n\n\t@Override public boolean visit (EnumDeclaration e) {\n\t    String fqn = cip.getFullName (e);\n\t    pushType (e, fqn, e.getBody ());\n\t    addScopeAndFields (fqn, e, e.getBody ());\n\t    return true;\n\t}\n\n\t@Override public boolean visit (NormalInterfaceDeclaration i) {\n\t    String fqn = cip.getFullName (i);\n\t    pushType (i, fqn, i.getBody ());\n\t    addScopeAndFields (fqn, i, i.getBody ());\n\t    return true;\n\t}\n\n\t@Override public boolean visit (AnnotationTypeDeclaration a) {\n\t    String fqn = cip.getFullName (a);\n\t    pushType (a, fqn, a.getBody ());\n\t    addScopeAndFields (fqn, a, a.getBody ());\n\t    return true;\n\t}\n\n\tprivate void pushType (TreeNode type, String fqn, TreeNode body) {\n\t    containingTypes.push (new BodyPart (fqn, body));\n\t    currentTypes = types.get (type);\n\t}\n\n\t@Override public void endType () {\n\t    if (completed) {\n\t\tBodyPart bp = containingTypes.pop ();\n\t\tregisterMethods (bp);\n\t\tif (!bp.hasConstructor)\n\t\t    checkUnassignedFields (bp.body, bp.fqn);\n\t    }\n\t    currentScope = currentScope.endScope ();\n\t    currentTypes = currentTypes.parent;\n\t}\n\n\t@Override public boolean anonymousClass (TreeNode from, ClassType ct, ClassBody b) {\n\t    addScope (b, Scope.Type.CLASS);\n\t    if (ct.getFullName () != null) {\n\t\tcontainingTypes.push (new BodyPart (ct.getFullName (), null));\n\t\tString fqn = cip.getFullName (b);\n\t\tcontainingTypes.push (new BodyPart (fqn, b));\n\t\treturn true;\n\t    }\n\t    // No need to continue here\n\t    // TODO: do we need to produce errors or warnings?\n\t    return false;\n\t}\n\n\t@Override public void endAnonymousClass (ClassType ct, ClassBody b) {\n\t    if (ct.getFullName () != null) {\n\t\tregisterMethods (containingTypes.pop ());\n\t\tcontainingTypes.pop ();\n\t    }\n\t    currentScope = currentScope.endScope ();\n\t}\n\n\t// TODO: handle InstanceInitializer and StaticInitializer, they need scope\n\n\t@Override public boolean visit (ConstructorDeclaration c) {\n\t    containingTypes.peek ().hasConstructor = true;\n\t    registerTypeParameters (c, c.getTypeParameters (), this);\n\t    setTypes (c.getParameters (), this);\n\t    setThrowsTypes (c.getThrows ());\n\t    addScopeAndParameters (c, c.getParameters ());\n\t    return true;\n\t}\n\n\t@Override public void endConstructor (ConstructorDeclaration c) {\n\t    currentScope = currentScope.endScope ();\n\t    currentTypes = currentTypes.parent;\n\t    checkUnassignedFields (c, containingTypes.peek ().fqn);\n\t}\n\n\tprivate void checkUnassignedFields (TreeNode owner, String fqn) {\n\t    for (FieldInformation<?> fi : cip.getFields (fqn)) {\n\t\tif (fi.isFinal () && !currentScope.isAssignedOrInitialized (fi) &&\n\t\t    !(fi.getVariableDeclaration() instanceof EnumConstant)) {\n\t\t    diagnostics.report (SourceDiagnostics.error (tree.getOrigin (), owner.getParsePosition (),\n\t\t\t\t\t\t\t\t \"Uninitialized final field: %s\", fi.getName ()));\n\t\t}\n\t    }\n\t    currentScope.clearFieldAssignments ();\n\t}\n\n\t@Override public boolean visit (FieldDeclaration f) {\n\t    setType (f.getType (), ScopeSetter.this);\n\t    return true;\n\t}\n\n\t@Override public boolean visit (EnumConstant c) {\n\t    c.setType (containingTypes.peek ().fqn);\n\t    return true;\n\t}\n\n\t@Override public boolean visit (MethodDeclaration m) {\n\t    registerTypeParameters (m, m.getTypeParameters (), this);\n\t    Result r = m.getResult ();\n\t    if (r instanceof Result.TypeResult)\n\t\tsetType (r.getReturnType (), this);\n\t    setTypes (m.getParameters (), this);\n\t    setThrowsTypes (m.getThrows ());\n\t    addScopeAndParameters (m, m.getParameters ());\n\t    return true;\n\t}\n\n\tprivate void setThrowsTypes (Throws t) {\n\t    if (t != null)\n\t\tfor (ClassType ct : t.getTypes ())\n\t\t    setType (ct, this);\n\t}\n\n\t@Override public void endMethod (MethodDeclaration m) {\n\t    currentScope = currentScope.endScope ();\n\t    currentTypes = currentTypes.parent;\n\t}\n\n\t@Override public boolean visit (Block b) {\n\t    addScope (b, Scope.Type.LOCAL);\n\t    return true;\n\t}\n\n\t@Override public void endBlock () {\n\t    currentScope = currentScope.endScope ();\n\t}\n\n\t@Override public boolean visit (Assignment a) {\n\t    TreeNode lhs = a.lhs ();\n\t    lhs.visit (this);\n\t    a.rhs ().visit (this);\n\t    Scope.FindResult fr = getVariable (lhs);\n\t    if (fr != null && fr.fi.isFinal ()) {\n\t\tif (fr.scope.isAssignedOrInitialized (fr.fi))\n\t\t    diagnostics.report (SourceDiagnostics.error (tree.getOrigin (), a.getParsePosition (),\n\t\t\t\t\t\t\t\t \"%s marked as final may not be assigned here\",\n\t\t\t\t\t\t\t\t fr.fi.getVariableDeclaration ().getClass ().getSimpleName ()));\n\t\tfr.scope.setAssigned (fr.fi);\n\t    }\n\t    return false;\n\t}\n\n\tprivate Scope.FindResult getVariable (TreeNode tn) {\n\t    if (tn instanceof DottedName) {\n\t\tDottedName dn = (DottedName)tn;\n\t\tTreeNode fn = dn.getFieldAccess ();\n\t\tScope.FindResult fr = null;\n\t\tif (fn instanceof FieldAccess) {\n\t\t    FieldAccess fa = (FieldAccess)fn;\n\t\t    if (fa.getFrom () instanceof PrimaryNoNewArray.ThisPrimary) {\n\t\t\tString id = fa.getFieldId ();\n\t\t\tfr = currentScope.find (cip, id, false, false, diagnostics);\n\t\t    }\n\t\t} else if (fn instanceof Identifier) {\n\t\t    Identifier i = (Identifier)fn;\n\t\t    fr = currentScope.find (cip, i.get (), false, false, diagnostics);\n\t\t}\n\t\tif (fr != null)\n\t\t    return fr;\n\t    }\n\t    return null;\n\t}\n\n\t@Override public boolean visit (ClassInstanceCreationExpression c) {\n\t    TreeNode from = c.getFrom ();\n\t    if (from == null) {\n\t\tsetType (c.getId (), this);\n\t    } else {\n\t\tfrom.visit (this);\n\t\treplaceAndSetType (from);\n\t\tif (from.getExpressionType () != null) {\n\t\t    Deque<BodyPart> save = containingTypes;\n\t\t    containingTypes = new ArrayDeque<> ();\n\t\t    ExpressionType type = from.getExpressionType ();\n\t\t    if (type != null)\n\t\t\tcontainingTypes.push (new BodyPart (type.getClassName (), null));\n\t\t    setType (c.getId (), this);\n\t\t    containingTypes = save;\n\t\t} else {\n\t\t    setIncomplete ();\n\t\t    if (mayReport ())\n\t\t\tdiagnostics.report (SourceDiagnostics.error (tree.getOrigin (), c.getParsePosition (),\n\t\t\t\t\t\t\t\t     \"Unknown expression type for: %s\", from));\n\t\t}\n\t    }\n\t    return true;\n\t}\n\n\t@Override public boolean visit (MethodInvocation m) {\n\t    TreeNode on = m.getOn ();\n\t    if (on != null)\n\t\treplaceAndSetType (on);\n\t    ArgumentList al = m.getArgumentList ();\n\t    if (al != null) {\n\t\tList<TreeNode> ls = al.get ();\n\t\tfor (int i = 0, s = ls.size (); i < s; i++) {\n\t\t    replaceAndSetType (ls.get (i));\n\t\t}\n\t    }\n\t    return true;\n\t}\n\n\t@Override public boolean visit (ArrayCreationExpression ace) {\n\t    setType (ace.getType (), this);\n\t    return true;\n\t}\n\n\t@Override public boolean visit (LambdaExpression l) {\n\t    TreeNode params = l.getParameters ();\n\t    if (params != null) {\n\t\taddScope (l, Scope.Type.LOCAL);\n\t\tif (params instanceof Identifier) {\n\t\t    currentScope.tryToAdd (cip, new LambdaParameter ((Identifier)params), tree, diagnostics);\n\t\t} else if (params instanceof InferredFormalParameterList) {\n\t\t    InferredFormalParameterList ls = (InferredFormalParameterList)params;\n\t\t    for (Identifier i : ls.getIdentifiers ()) {\n\t\t\tcurrentScope.tryToAdd (cip, new LambdaParameter (i), tree, diagnostics);\n\t\t    }\n\t\t} else if (params instanceof FormalParameterList) {\n\t\t    addParameterList ((FormalParameterList)params);\n\t\t}\n\t    }\n\t    return true;\n\t}\n\n\t@Override public void endLambda (LambdaExpression l) {\n\t    TreeNode params = l.getParameters ();\n\t    if (params != null)\n\t\tcurrentScope = currentScope.endScope ();\n\t}\n\n\t@Override public boolean visit (LocalVariableDeclaration l) {\n\t    setType (l.getType (), this);\n\t    for (VariableDeclarator v : l.getVariables ().get ()) {\n\t\tTreeNode tn = v.getInitializer ();\n\t\tif (tn != null)\n\t\t    tn.visit (this);\n\t\tcurrentScope.tryToAdd (cip, l, v, tree, diagnostics);\n\t    }\n\t    return false;\n\t}\n\n\t@Override public boolean visit (CastExpression c) {\n\t    setType (c.getType (), this);\n\t    return true;\n\t}\n\n\t@Override public void visit (Identifier i) {\n\t    String id = i.get ();\n\t    Scope.FindResult fr = currentScope.find (cip, id, currentScope.isStatic (), true, diagnostics);\n\t    if (fr == null) {\n\t\tStaticFieldAccess sfa = findStaticImportedField (id);\n\t\tif (sfa != null) {\n\t\t    ClassType from = getClassType (sfa.fqn, i.getParsePosition ());\n\t\t    FieldAccess fa = new FieldAccess (from, id, i.getParsePosition ());\n\t\t    fa.setReturnType (sfa.field.getExpressionType ());\n\t\t    i.setActual (fa);\n\t\t} else {\n\t\t    diagnostics.report (SourceDiagnostics.error (tree.getOrigin (), i.getParsePosition (),\n\t\t\t\t\t\t\t\t \"Cannot find symbol: %s\", i.get ()));\n\t\t}\n\t    }\n\t}\n\n\tprivate StaticFieldAccess findStaticImportedField (String name) {\n\t    ImportHandler.StaticImportType sit = ih.ssid.get (name);\n\t    String fqn = null;\n\t    if (sit != null) {\n\t\tfqn = sit.containingClass;\n\t\tFieldInformation<?> fi = cip.getFieldInformation (fqn, name);\n\t\tif (fi != null) {\n\t\t    sit.ssid.markUsed ();\n\t\t    return new StaticFieldAccess (fqn, fi);\n\t\t}\n\t    }\n\t    for (StaticImportOnDemandDeclaration siod : ih.siod) {\n\t\tfqn = siod.getName ().getDotName ();\n\t\tFieldInformation<?> fi = cip.getFieldInformation (fqn, name);\n\t\tif (fi != null) {\n\t\t    siod.markUsed ();\n\t\t    return new StaticFieldAccess (fqn, fi);\n\t\t}\n\t    }\n\t    return null;\n\t}\n\n\t@Override public void visit (DottedName d) {\n\t    d.setChainedFieldAccess (replaceWithChainedFieldAccess (d, currentScope, this));\n\t}\n\n\tprivate TreeNode replaceWithChainedFieldAccess (DottedName dn, Scope scope, ErrorHandler eh) {\n\t    TreeNode current = null;\n\t    final ParsePosition pos = dn.getParsePosition ();\n\t    StringBuilder sb = new StringBuilder ();\n\t    ClassType ct = null;\n\t    List<String> parts = dn.getParts ();\n\t    for (int i = 0, s = parts.size (); i < s; i++) {\n\t\tString p = parts.get (i);\n\t\tif (i == 0) {\n\t\t    Scope.FindResult fr = scope.find (cip, p, scope.isStatic (), true, diagnostics);\n\t\t    if (fr != null) {\n\t\t\tcurrent = getFieldOrLocalAccess (p, pos, fr);\n\t\t\tcontinue;\n\t\t    }\n\t\t} else {\n\t\t    sb.append (\".\");\n\t\t}\n\t\tsb.append (p);\n\t\tResolvedClass outerClass = ct == null ? resolve (sb.toString (), pos, eh) : null;\n\t\tif (outerClass != null) {\n\t\t    DottedName pdn = new DottedName (parts.subList (0, i + 1), pos);\n\t\t    ct = pdn.toClassType ();\n\t\t    ct.setFullName (outerClass.type);\n\t\t    ct.setTypeParameter (outerClass.tp);\n\t\t    current = ct;\n\t\t    continue;\n\t\t}\n\t\tif (current != null) {\n\t\t    current = new FieldAccess (current, p, pos);\n\t\t} else {\n\t\t    current = new Identifier (p, pos);\n\t\t}\n\t    }\n\t    return current;\n\t}\n\n\tprivate TreeNode getFieldOrLocalAccess (String p, ParsePosition pos, Scope.FindResult fr) {\n\t    FieldInformation<?> fi = fr.fi;\n\t    if (!isField (fi))\n\t\treturn new Identifier (p, pos, fi.getExpressionType ());\n\t    FieldDeclaration fd = (FieldDeclaration)fi.getVariableDeclaration ();\n\t    if (FlagsHelper.isStatic (fd.getFlags ())) {\n\t\tFieldAccess fa = new FieldAccess (getStatic (fi.getOwner (), pos), p, pos);\n\t\tfa.setReturnType (fi.getExpressionType ());\n\t\treturn fa;\n\t    }\n\n\t    if (fr.containingClass == cip.getType (containingTypes.peek ().fqn)) {\n\t\tTreeNode from = fi.getOwner () == fr.containingClass ? getThis (pos) : getSuperThis (pos, cip.getFullName (fi.getOwner ()));\n\t\tFieldAccess fa = new FieldAccess (from, p, pos);\n\t\tfa.setReturnType (fi.getExpressionType ());\n\t\treturn fa;\n\t    }\n\t    FieldAccess fa = new FieldAccess (getDottedThis (fi.getOwner (), pos), p, pos);\n\t    fa.setReturnType (fi.getExpressionType ());\n\t    return fa;\n\t}\n\n\tprivate boolean isField (FieldInformation<?> fi) {\n\t    return fi.getVariableDeclaration () instanceof FieldDeclaration;\n\t}\n\n\tprivate TreeNode getThis (ParsePosition pos) {\n\t    PrimaryNoNewArray.ThisPrimary t = new PrimaryNoNewArray.ThisPrimary (pos);\n\t    t.setExpressionType (ExpressionType.getObjectType (containingTypes.peek ().fqn));\n\t    return t;\n\t}\n\n\tprivate TreeNode getSuperThis (ParsePosition pos, String fqn) {\n\t    return new PrimaryNoNewArray.SuperThisPrimary (pos, fqn);\n\t}\n\n\tprivate TreeNode getStatic (TreeNode owner, ParsePosition pos) {\n\t    String fqn = cip.getFullName (owner);\n\t    return getClassType (fqn, pos);\n\t}\n\n\tprivate TreeNode getDottedThis (TreeNode owner, ParsePosition pos) {\n\t    String fqn = cip.getFullName (owner);\n\t    ClassType ct = getClassType (fqn, pos);\n\t    return new PrimaryNoNewArray.DottedThis (ct, pos);\n\t}\n\n\t@Override public boolean visit (BasicForStatement f) {\n\t    addScope (f, Scope.Type.LOCAL);\n\t    return true;\n\t}\n\n\t@Override public boolean visit (EnhancedForStatement f) {\n\t    addScope (f, Scope.Type.LOCAL);\n\t    return true;\n\t}\n\n\t@Override public void endFor () {\n\t    currentScope = currentScope.endScope ();\n\t}\n\n\t@Override public boolean visit (SwitchBlock s) {\n\t    addScope (s, Scope.Type.LOCAL);\n\t    return true;\n\t}\n\n\t@Override public  void endSwitchBlock () {\n\t    currentScope = currentScope.endScope ();\n\t}\n\n\t@Override public boolean visit (CatchClause c) {\n\t    addScope (c, Scope.Type.LOCAL);\n\t    CatchFormalParameter cfp = c.getFormalParameter ();\n\t    currentScope.tryToAdd (cip, cfp, tree, diagnostics);\n\t    return true;\n\t}\n\n\t@Override public void endCatchClause (CatchClause c) {\n\t    currentScope = currentScope.endScope ();\n\t}\n\n\t@Override public boolean visit (CatchType c) {\n\t    c.getTypes ().forEach (ct -> setType (ct, this));\n\n\t    List<ClassType> cts = c.getTypes ();\n\t    ExpressionType et = cts.get (0).getExpressionType ();\n\t    for (int i = 1, s = cts.size (); i < s; i++) {\n\t\t// TODO: find common super class\n\t\tet = ExpressionType.getObjectType (\"java.lang.Exception\");\n\t    }\n\t    c.setExpressionType (et);\n\n\t    return true;\n\t}\n\n\tprivate void replaceAndSetType (TreeNode tn) {\n\t    if (tn instanceof Identifier && tn.getExpressionType () == null) {\n\t\tIdentifier i = (Identifier)tn;\n\t\tScope.FindResult fr = currentScope.find (cip, i.get (), currentScope.isStatic (), true, diagnostics);\n\t\tif (fr != null) {\n\t\t    i.setActual (new Identifier (i.get (), i.getParsePosition (), fr.fi.getExpressionType ()));\n\t\t}\n\t    }\n\t}\n\n\tprivate void addScopeAndFields (String fqn, FlaggedType ft, TreeNode part) {\n\t    addScope (ft, Scope.Type.CLASS, false);\n\t}\n\n\tprivate void addScopeAndParameters (FlaggedType ft, FormalParameterList fpl) {\n\t    addScope (ft, Scope.Type.LOCAL, true);\n\t    addParameterList (fpl);\n\t}\n\n\tprivate void addParameterList (FormalParameterList fpl) {\n\t    if (fpl != null) {\n\t\tNormalFormalParameterList pl = fpl.getParameters ();\n\t\tif (pl != null) {\n\t\t    List<FormalParameter> ls = pl.getFormalParameters ();\n\t\t    if (ls != null)\n\t\t\tls.forEach (fp -> currentScope.tryToAdd (cip, fp, tree, diagnostics));\n\t\t    LastFormalParameter lfp = pl.getLastFormalParameter ();\n\t\t    if (lfp != null) {\n\t\t\tcurrentScope.tryToAdd (cip, lfp, tree, diagnostics);\n\t\t    }\n\t\t}\n\t    }\n\t}\n\n\tprivate void addScope (FlaggedType ft, Scope.Type type, boolean ignoreFieldShadowing) {\n\t    currentScope = new Scope (ft, currentScope, type, FlagsHelper.isStatic (ft.getFlags ()), ignoreFieldShadowing);\n\t}\n\n\tprivate void addScope (TreeNode tn, Scope.Type type) {\n\t    boolean isStatic = currentScope != null && currentScope.isStatic ();\n\t    currentScope = new Scope (tn, currentScope, type, isStatic, false);\n\t}\n\n\tprivate void registerMethods (BodyPart bp) {\n\t    MethodRegistrator mr = new MethodRegistrator (bp.fqn);\n\t    bp.body.visit (mr);\n\t    cip.registerMethods (bp.fqn, mr.methods);\n\t}\n\n\tprivate class MethodRegistrator extends SiblingVisitor {\n\t    private final String fqn;\n\t    private final Map<String, List<MethodInformation>> methods = new HashMap<> ();\n\n\t    public MethodRegistrator (String fqn) {\n\t\tthis.fqn = fqn;\n\t    }\n\n\t    @Override public boolean visit (ConstructorDeclaration c) {\n\t\taddMethod (new MethodInformation (fqn,\n\t\t\t\t\t\t  c.getFlags (),\n\t\t\t\t\t\t  \"<init>\",\n\t\t\t\t\t\t  c.getDescription (),\n\t\t\t\t\t\t  null,   // TODO: fill in\n\t\t\t\t\t\t  EMTPY)); // TODO: fill in\n\t\treturn false;\n\t    }\n\n\t    @Override public boolean visit (MethodDeclaration m) {\n\t\taddMethod (new MethodInformation (fqn,\n\t\t\t\t\t\t  m.getFlags (),\n\t\t\t\t\t\t  m.getMethodName (),\n\t\t\t\t\t\t  m.getDescription (),\n\t\t\t\t\t\t  null,   // TODO: fill in\n\t\t\t\t\t\t  EMTPY)); // TODO: fill in\n\t\treturn false;\n\t    }\n\n\t    private void addMethod (MethodInformation mi) {\n\t\tString name = mi.getName ();\n\t\tList<MethodInformation> ls = methods.get (name);\n\t\tif (ls == null) {\n\t\t    ls = new ArrayList<> ();\n\t\t    methods.put (name, ls);\n\t\t}\n\t\tls.add (mi);\n\t    }\n\t}\n\n\t@Override public void visit (PrimaryNoNewArray.ThisPrimary t) {\n\t    t.setExpressionType (ExpressionType.getObjectType (containingTypes.peek ().fqn));\n\t}\n    }\n\n    private static class BodyPart {\n\tprivate final String fqn;\n\tprivate final TreeNode body;\n\tprivate boolean hasConstructor = false;\n\n\tpublic BodyPart (String fqn, TreeNode body) {\n\t    this.fqn = fqn;\n\t    this.body = body;\n\t}\n\n\t@Override public String toString () {\n\t    return getClass ().getSimpleName () + \"{\" + fqn + \", \" + body + \"}\";\n\t}\n    }\n\n    private void visitSuperInterfaces (InterfaceTypeList superInterfaces, ErrorHandler eh) {\n\tif (superInterfaces != null)\n\t    setTypes (superInterfaces, eh);\n    }\n\n    private void registerTypeParameters (TreeNode tn, TypeParameters tps, ErrorHandler eh) {\n\tMap<String, TypeParameter> tt;\n\tif (tps != null) {\n\t    tt = new HashMap<> ();\n\t    for (TypeParameter tp : tps.get ()) {\n\t\tcip.registerTypeParameter (containingTypes.peek ().fqn, tp);\n\t\ttt.put (tp.getId (), tp);\n\t\tcheckClasses (tp, eh);\n\t    }\n\t} else {\n\t    tt = Collections.emptyMap ();\n\t}\n\tcurrentTypes = new TypeHolder (currentTypes, tt);\n\ttypes.put (tn, currentTypes);\n    }\n\n    private void checkClasses (TypeParameter tp, ErrorHandler eh) {\n\tTypeBound b = tp.getTypeBound ();\n\tif (b != null) {\n\t    setType (b.getType (), eh);\n\t    List<AdditionalBound> ls = b.getAdditionalBounds ();\n\t    if (ls != null) {\n\t\tls.forEach (ab -> setType (ab.getType (), eh));\n\t    }\n\t}\n    }\n\n    private void setTypes (InterfaceTypeList ls, ErrorHandler eh) {\n\tif (ls == null)\n\t    return;\n\tfor (ClassType ct : ls.get ())\n\t    setType (ct, eh);\n    }\n\n    private void setTypes (FormalParameterList ls, ErrorHandler eh) {\n\tif (ls == null)\n\t    return;\n\n\tNormalFormalParameterList fps = ls.getParameters ();\n\tif (fps != null) {\n\t    List<FormalParameter> args = fps.getFormalParameters ();\n\t    if (args != null) {\n\t\tfor (FormalParameter fp : args)\n\t\t    setType (fp.getType (), eh);\n\t    }\n\t    LastFormalParameter lfp = fps.getLastFormalParameter ();\n\t    if (lfp != null) {\n\t\tsetType (lfp.getType (), eh);\n\t    }\n\t}\n    }\n\n    private void setType (TreeNode type, ErrorHandler eh) {\n\tif (type instanceof PrimitiveTokenType) {\n\t    return;\n\t}\n\tif (type instanceof PrimitiveType) {\n\t    return;\n\t}\n\tif (type instanceof ClassType) {\n\t    ClassType ct = (ClassType)type;\n\t    if (ct.getFullName () != null) // already set?\n\t\treturn;\n\t    // \"List\" and \"java.util.List\" are easy to resolve\n\t    String id1 = getId (ct, \".\");\n\t    ResolvedClass fqn = resolve (id1, ct.getParsePosition (), eh);\n\t    if (fqn == null && ct.size () > 1) {\n\t\t// ok, someone probably wrote something like \"HashMap.Entry\" or\n\t\t// \"java.util.HashMap.Entry\" which is somewhat problematic, but legal\n\t\tfqn = tryAllParts (ct, eh);\n\t    }\n\t    if (fqn == null) {\n\t\teh.setIncomplete ();\n\t\tif (eh.mayReport ()) {\n\t\t    diagnostics.report (SourceDiagnostics.error (tree.getOrigin (), ct.getParsePosition (),\n\t\t\t\t\t\t\t\t \"Failed to find class: %s\", id1));\n\t\t}\n\t\treturn;\n\t    }\n\t    ct.setFullName (fqn.type);\n\t    ct.setTypeParameter (fqn.tp);\n\t    for (SimpleClassType sct : ct.get ()) {\n\t\tTypeArguments tas = sct.getTypeArguments ();\n\t\tif (tas != null)\n\t\t    tas.getTypeArguments ().forEach (tn -> setType (tn, eh));\n\t    }\n\t} else if (type instanceof ArrayType) {\n\t    ArrayType at = (ArrayType)type;\n\t    setType (at.getType (), eh);\n\t} else if (type instanceof Wildcard) {\n\t    Wildcard wc = (Wildcard)type;\n\t    WildcardBounds wb = wc.getBounds ();\n\t    if (wb != null)\n\t\tsetType (wb.getClassType (), eh);\n\t} else {\n\t    eh.setIncomplete ();\n\t    if (eh.mayReport ()) {\n\t\tdiagnostics.report (SourceDiagnostics.error (tree.getOrigin (), type.getParsePosition (),\n\t\t\t\t\t\t\t     \"Unhandled type: %s, %s\",\n\t\t\t\t\t\t\t     type.getClass ().getName (), type));\n\t    }\n\t}\n    }\n\n    private String getId (ClassType ct, String join) {\n\tif (ct.size () == 1)\n\t    return ct.get ().get (0).getId ();\n\treturn ct.get ().stream ().map (s -> s.getId ()).collect (Collectors.joining (join));\n    }\n\n    /** Try to find an outer class that has the inner classes for misdirected outer classes.\n     */\n    private ResolvedClass tryAllParts (ClassType ct, ErrorHandler eh) {\n\tStringBuilder sb = new StringBuilder ();\n\tList<SimpleClassType> scts = ct.get ();\n\t// group package names to class \"java.util.HashMap\"\n\tfor (int i = 0, s = scts.size (); i < s; i++) {\n\t    SimpleClassType sct = scts.get (i);\n\t    if (i > 0)\n\t\tsb.append (\".\");\n\t    sb.append (sct.getId ());\n\t    ResolvedClass outerClass = resolve (sb.toString (), ct.getParsePosition (), eh);\n\t    if (outerClass != null) {\n\t\t// Ok, now check if Entry is an inner class either directly or in super class\n\t\tString fqn = checkForInnerClasses (scts, i + 1, outerClass.type, eh);\n\t\tif (fqn != null)\n\t\t    return new ResolvedClass (fqn);\n\t    }\n\t}\n\treturn null;\n    }\n\n    private String checkForInnerClasses (List<SimpleClassType> scts, int i, String outerClass,\n\t\t\t\t\t ErrorHandler eh) {\n\tString currentOuterClass = outerClass;\n\tfor (int s = scts.size (); i < s; i++) {\n\t    SimpleClassType sct = scts.get (i);\n\t    String directInnerClass = currentOuterClass + \"$\" + sct.getId ();\n\t    if (hasVisibleType (directInnerClass)) {\n\t\tcurrentOuterClass = directInnerClass;\n\t    } else {\n\t\tcurrentOuterClass = checkSuperClasses (currentOuterClass, sct.getId (), eh);\n\t\tif (currentOuterClass == null)\n\t\t    return null;\n\t    }\n\t}\n\treturn currentOuterClass;\n    }\n\n    private ResolvedClass resolve (String id, ParsePosition pos, ErrorHandler eh) {\n\tTypeParameter tp = getTypeParameter (id);\n\tif (tp != null) {\n\t    return new ResolvedClass (tp);\n\t}\n\n\tif (hasVisibleType (id))\n\t    return new ResolvedClass (id);\n\n\tString fqn = resolveInnerClass (id, eh);\n\tif (fqn == null)\n\t    fqn = resolveUsingImports (id, pos);\n\tif (fqn != null)\n\t    return new ResolvedClass (fqn);\n\treturn null;\n    }\n\n    private static class ResolvedClass {\n\tpublic final String type;\n\tpublic final TypeParameter tp;\n\n\tpublic ResolvedClass (String type) {\n\t    this.type = type;\n\t    this.tp = null;\n\t}\n\n\tpublic ResolvedClass (TypeParameter tp) {\n\t    this.type = tp.getExpressionType ().getClassName ();\n\t    this.tp = tp;\n\t}\n    }\n\n    private String resolveInnerClass (String id, ErrorHandler eh) {\n\t// Check for inner class\n\tfor (BodyPart ctn : containingTypes) {\n\t    String icn = ctn.fqn + \"$\" + id;\n\t    if (hasVisibleType (icn))\n\t\treturn icn;\n\t}\n\n\t// Check for inner class of super classes\n\tfor (BodyPart ctn : containingTypes) {\n\t    String fqn = checkSuperClasses (ctn.fqn, id, eh);\n\t    if (fqn != null)\n\t\treturn fqn;\n\t}\n\treturn null;\n    }\n\n    private String checkSuperClasses (String fullCtn, String id, ErrorHandler eh) {\n\tif (fullCtn == null)\n\t    return null;\n\tList<String> superclasses = getSuperClasses (fullCtn, eh);\n\tfor (String superclass : superclasses) {\n\t    String icn = superclass + \"$\" + id;\n\t    if (hasVisibleType (icn))\n\t\treturn icn;\n\t    String ssn = checkSuperClasses (superclass, id, eh);\n\t    if (ssn != null)\n\t\treturn ssn;\n\t}\n\treturn null;\n    }\n\n    private List<String> getSuperClasses (String type, ErrorHandler eh) {\n\ttry {\n\t    Optional<List<String>> supers = cip.getSuperTypes (type, false);\n\t    return supers.isPresent () ? supers.get () : Collections.emptyList ();\n\t} catch (IOException e) {\n\t    eh.setIncomplete ();\n\t    if (eh.mayReport ())\n\t\tdiagnostics.report (new NoSourceDiagnostics (\"Failed to load class: \" + type, e));\n\t}\n\treturn Collections.emptyList ();\n    }\n\n    private String resolveUsingImports (String id, ParsePosition pos) {\n\tImportHolder i = ih.stid.get (id);\n\tif (i != null && hasVisibleType (i.cas.name)) {\n\t    i.markUsed ();\n\t    return i.cas.name;\n\t}\n\tString fqn;\n\tfqn = tryPackagename (id, pos);\n\tif (fqn != null && hasVisibleType (fqn))\n\t    return fqn;\n\tfqn = trySingleStaticImport (id);\n\tif (fqn != null && hasVisibleType (fqn))\n\t    return fqn;\n\tfqn = tryTypeImportOnDemand (id, pos);\n\tif (fqn != null) // already checked cip.hasType\n\t    return fqn;\n\tfqn = tryStaticImportOnDemand (id);\n\tif (fqn != null) // already checked cip.hasType\n\t    return fqn;\n\n\treturn null;\n    }\n\n    private TypeParameter getTypeParameter (String id) {\n\tTypeHolder th = currentTypes;\n\twhile (th != null) {\n\t    TypeParameter tp = th.types.get (id);\n\t    if (tp != null)\n\t\treturn tp;\n\t    th = th.parent;\n\t}\n\treturn null;\n    }\n\n    private String tryPackagename (String id, ParsePosition pos) {\n\tif (packageName == null)\n\t    return null;\n\treturn packageName.getDotName () + \".\" + id;\n    }\n\n    private String tryTypeImportOnDemand (String id, ParsePosition pos) {\n\tList<String> matches = new ArrayList<> ();\n\tfor (ImportHolder ih : ih.tiod) {\n\t    String t = ih.cas.name + ih.cas.sep + id;\n\t    if (hasVisibleType (t)) {\n\t\tmatches.add (t);\n\t\tih.markUsed ();\n\t    }\n\t}\n\tif (matches.size () > 1) {\n\t    diagnostics.report (SourceDiagnostics.error (tree.getOrigin (), pos,\n\t\t\t\t\t\t\t \"Ambigous type: %s: %s\", id, matches));\n\t}\n\tif (matches.isEmpty ())\n\t    return null;\n\treturn matches.get (0);\n    }\n\n    private String trySingleStaticImport (String id) {\n\tImportHandler.StaticImportType sit = ih.ssid.get (id);\n\tif (sit == null)\n\t    return null;\n\tsit.ssid.markUsed ();\n\treturn sit.fullName;\n    }\n\n    private String tryStaticImportOnDemand (String id) {\n\tfor (StaticImportOnDemandDeclaration siod : ih.siod) {\n\t    String fqn = siod.getName ().getDotName () + \"$\" + id;\n\t    if (hasVisibleType (fqn)) {\n\t\tsiod.markUsed ();\n\t\treturn fqn;\n\t    }\n\t}\n\treturn null;\n    }\n\n    private class ImportHandler implements ImportVisitor {\n\tprivate final Map<String, ImportHolder> stid = new HashMap<> ();\n\tprivate final List<ImportHolder> tiod = new ArrayList<> ();\n\tprivate final Map<String, StaticImportType> ssid = new HashMap<> ();\n\tprivate final List<StaticImportOnDemandDeclaration> siod = new ArrayList<> ();\n\n\tpublic void visit (SingleTypeImportDeclaration i) {\n\t    DottedName dn = i.getName ();\n\t    ClassAndSeparator cas = getClassName (dn);\n\t    if (!hasVisibleType (cas.name)) {\n\t\tdiagnostics.report (SourceDiagnostics.error (tree.getOrigin (), i.getParsePosition (),\n\t\t\t\t\t\t\t     \"Type not found: %s\", cas.name));\n\t\ti.markUsed (); // Unused, but already flagged as bad, don't want multiple lines\n\t    }\n\t    ImportHolder prev = stid.put (dn.getLastPart (), new ImportHolder (i, cas));\n\t    if (prev != null) {\n\t\tdiagnostics.report (SourceDiagnostics.error (tree.getOrigin (), i.getParsePosition (),\n\t\t\t\t\t\t\t     \"Name clash for: %s\", dn.getLastPart ()));\n\t    }\n\t}\n\n\tpublic void visit (TypeImportOnDemandDeclaration i) {\n\t    tiod.add (new ImportHolder (i, getClassName (i.getName ())));\n\t}\n\n\tpublic void visit (SingleStaticImportDeclaration i) {\n\t    String fqn = i.getName ().getDotName ();\n\t    if (!hasVisibleType (fqn)) {\n\t\tdiagnostics.report (SourceDiagnostics.error (tree.getOrigin (), i.getParsePosition (),\n\t\t\t\t\t\t\t     \"Type not found: %s\", fqn));\n\t\ti.markUsed (); // Unused, but already flagged as bad, don't want multiple lines\n\t\treturn;\n\t    }\n\n\t    ssid.put (i.getInnerId (), new StaticImportType (i));\n\t}\n\n\tpublic void visit (StaticImportOnDemandDeclaration i) {\n\t    siod.add (i);\n\t}\n\n\tprivate ClassAndSeparator getClassName (DottedName dn) {\n\t    StringBuilder sb = new StringBuilder ();\n\t    char sep = '.';\n\t    for (String c : dn.getParts ()) {\n\t\tif (sb.length () > 0)\n\t\t    sb.append (sep);\n\t\tsb.append (c);\n\t\tif (hasVisibleType (sb.toString ()))\n\t\t    sep = '$';\n\t    }\n\t    return new ClassAndSeparator (sb.toString (), sep);\n\t}\n\n\tprivate void addDefaultPackages () {\n\t    tiod.add (new ImportHolder (null, new ClassAndSeparator (\"java.lang\", '.')));\n\t}\n\n\tprivate class StaticImportType {\n\t    private final SingleStaticImportDeclaration ssid;\n\t    private final String containingClass;\n\t    private final String fullName;\n\n\t    public StaticImportType (SingleStaticImportDeclaration ssid) {\n\t\tthis.ssid = ssid;\n\t\tcontainingClass = getClassName (ssid.getName ()).name;\n\t\tfullName = containingClass + \"$\" + ssid.getInnerId ();\n\t    }\n\t}\n    }\n\n    private boolean hasVisibleType (String fqn) {\n\tString topLevelClass = containingTypes.isEmpty () ? null : containingTypes.peekLast ().fqn;\n\treturn hasVisibleType (fqn, topLevelClass);\n    }\n\n    private boolean hasVisibleType (String fqn, String topLevelClass) {\n\tLookupResult r = cip.hasVisibleType (fqn);\n\tif (!r.getFound ())\n\t    return false;\n\tif (FlagsHelper.isPublic (r.getAccessFlags ())) {\n\t    return true;\n\t} else if (FlagsHelper.isProtected (r.getAccessFlags ())) {\n\t    return samePackage (fqn, packageName) || insideSuperClass (fqn);\n\t} else if (FlagsHelper.isPrivate (r.getAccessFlags ())) {\n\t    return sameTopLevelClass (fqn, topLevelClass);\n\t}\n\t// No access level\n\treturn samePackage (fqn, packageName);\n    }\n\n    private boolean samePackage (String fqn, DottedName pkg) {\n\tString start = pkg == null ? \"\" : pkg.getDotName ();\n\treturn fqn.length () > start.length () && fqn.startsWith (start) &&\n\t    fqn.indexOf ('.', fqn.length ()) == -1;\n    }\n\n    private boolean insideSuperClass (String fqn) {\n\tfor (BodyPart c : containingTypes)\n\t    if (insideSuperClass (fqn, c.fqn))\n\t\treturn true;\n\treturn false;\n    }\n\n    private boolean insideSuperClass (String fqn, String currentClass) {\n\ttry {\n\t    Optional<List<String>> supers = cip.getSuperTypes (currentClass, false);\n\t    if (supers.isPresent ()) {\n\t\tfor (String s :  supers.get ()) {\n\t\t    if (fqn.length () > s.length () && fqn.startsWith (s) &&\n\t\t\tfqn.charAt (s.length ()) == '$') {\n\t\t\treturn true;\n\t\t    }\n\t\t    if (insideSuperClass (fqn, s))\n\t\t\treturn true;\n\t\t}\n\t    }\n\t} catch (IOException e) {\n\t    return false;\n\t}\n\treturn false;\n    }\n\n    private ClassType getClassType (String fqn, ParsePosition pos) {\n\tClassType ct = new ClassType (null, pos);\n\tct.setFullName (fqn);\n\treturn ct;\n    }\n\n    private boolean sameTopLevelClass (String fqn, String topLevelClass) {\n\treturn fqn.length () > topLevelClass.length () && fqn.startsWith (topLevelClass) &&\n\t    fqn.charAt (topLevelClass.length ()) == '$';\n    }\n\n    private static class ImportHolder {\n\tprivate final ImportDeclaration i;\n\tprivate final ClassAndSeparator cas;\n\tpublic ImportHolder (ImportDeclaration i, ClassAndSeparator cas) {\n\t    this.i = i;\n\t    this.cas = cas;\n\t}\n\n\tpublic void markUsed () {\n\t    if (i != null)\n\t\ti.markUsed ();\n\t}\n    }\n\n    private static class ClassAndSeparator {\n\tprivate final String name;\n\tprivate final char sep;\n\n\tpublic ClassAndSeparator (String name, char sep) {\n\t    this.name = name;\n\t    this.sep = sep;\n\t}\n    }\n\n    private static class StaticFieldAccess {\n\tprivate final String fqn;\n\tprivate final FieldInformation<?> field;\n\n\tpublic StaticFieldAccess (String fqn, FieldInformation<?> field) {\n\t    this.fqn = fqn;\n\t    this.field = field;\n\t}\n    }\n\n    private static class TypeHolder {\n\tprivate final TypeHolder parent;\n\tprivate final Map<String, TypeParameter> types;\n\n\tpublic TypeHolder (TypeHolder parent, Map<String, TypeParameter> types) {\n\t    this.parent = parent;\n\t    this.types = types;\n\t}\n    }\n\n    private interface ErrorHandler {\n\tboolean mayReport ();\n\tvoid setIncomplete ();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"robert-olofsson/parjac","sample_ref":"refs/heads/master","sample_path":"src/org/khelekore/parjac/semantics/ClassSetter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"126597eb28aa2ab52803a0e639b235fd26694d79","size":"519","content":"package models;\n\nimport com.alvazan.orm.api.base.anno.NoSqlEntity;\nimport com.alvazan.orm.api.base.anno.NoSqlId;\nimport com.alvazan.orm.api.base.anno.NoSqlIndexed;\n\n@NoSqlEntity\npublic class AppProperty {\n\n\t@NoSqlIndexed\n\t@NoSqlId(usegenerator=false)\n\tprivate String name;\n\n\tprivate String value;\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic String getValue() {\n\t\treturn value;\n\t}\n\n\tpublic void setValue(String value) {\n\t\tthis.value = value;\n\t}\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"deanhiller/databus","sample_ref":"refs/heads/master","sample_path":"webapp/app/models/AppProperty.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d11e380cafa5eaee9a448e79cfa539f7eeda8b7e","size":"1397","content":"package com.pogofish.jadt;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\n\nimport java.io.FileNotFoundException;\n\nimport org.junit.Test;\n\n\n/**\n * Test the Version thingy does its thingy\n * \n * @author jiry\n *\n */\npublic class VersionTest {\n\t@Test\n\tpublic void testHappy() {\n\t\tfinal String version = new Version().getVersion();\n\t\tassertTrue(\"bad version information '\" + version + \"'. Did you set the resource directory as a source directory?\", version.equals(\"${pom.version}\") || version.matches(\"[0-9]+\\\\.[0-9]+\\\\.[0-9]+.*\"));\n\t}\n\t\n\t@Test\n\tpublic void testMissingFile() throws Throwable {\n\t    try {\n    \t    final Version version = new Version();\n    \t    version.MODULE_PROPERTIES = \"foo.bar\";\n    \t    final String result = version.getVersion();\n    \t    fail(\"did not get exception, got \" + result);\n\t    } catch (RuntimeException e) {\n\t        try {\n\t            throw(e.getCause());\n\t        } catch (FileNotFoundException e2) {\n\t            // what's expected, yay!\n\t        }\n\t    }\n\t}\n\t\n    @Test\n    public void testMissingProperty() throws Throwable {\n        final Version version = new Version();\n        version.MODULE_VERSION = \"foo.bar\";\n        final String result = version.getVersion();\n        assertEquals(\"unknown version, could not find property foo.bar in module.properties\", result);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"JamesIry/jADT","sample_ref":"refs/heads/master","sample_path":"jADT-core/src/test/java/com/pogofish/jadt/VersionTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"94af36cd09d89d9d11d58c187521c584e7692908","size":"434","content":"package example;\n\nimport javax.enterprise.context.RequestScoped;\nimport javax.inject.Inject;\nimport javax.ws.rs.DefaultValue;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.QueryParam;\n\n@RequestScoped\n@Path(\"hello\")\npublic class HelloResource {\n\n    @Inject\n    private Hello hello;\n\n    @GET\n    public String say(@QueryParam(\"name\") @DefaultValue(\"world\") String name) {\n        return hello.say(name);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"backpaper0/sandbox","sample_ref":"refs/heads/master","sample_path":"jersey2_15-cdi-example/src/main/java/example/HelloResource.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6b6053547ef2142bfd755d42283d16abde5b0a8a","size":"3661","content":"package controllers.dialogControllers;\r\n\r\nimport controllers.Controller;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Label;\r\nimport objects.Song;\r\nimport objects.StopTimeInfo;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class ControllerSetStopTime extends DialogController implements Initializable {\r\n    public static final int hoursInDay = 24;\r\n\r\n\r\n    @FXML\r\n    private Button buttonOk, buttonCancel, buttonDelete;\r\n    @FXML\r\n    private Label labelHours, labelMinute, labelSecond;\r\n    @FXML\r\n    private ComboBox<Integer> comboboxHours, comboboxMinute, comboboxSecond;\r\n\r\n    private StopTimeInfo stopTimeInfo;\r\n\r\n    private boolean isCancel = true;\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        for (int i = Song.INDEX_ZERO; i < hoursInDay; i++) {\r\n            comboboxHours.getItems().add(i);\r\n        }\r\n        for (int i = Song.INDEX_ZERO; i < Data.SECOND_IN_MINUTE; i++) {\r\n            comboboxMinute.getItems().add(i);\r\n        }\r\n        for (int i = Song.INDEX_ZERO; i < Data.SECOND_IN_MINUTE; i++) {\r\n            comboboxSecond.getItems().add(i);\r\n        }\r\n    }\r\n\r\n    public void setStopTimeInfo(StopTimeInfo stopTimeInfo) {\r\n        isCancel = false;\r\n        this.stopTimeInfo = stopTimeInfo;\r\n        comboboxHours.getSelectionModel().select(stopTimeInfo.getHours());\r\n        comboboxMinute.getSelectionModel().select(stopTimeInfo.getMinute());\r\n        comboboxSecond.getSelectionModel().select(stopTimeInfo.getSecond());\r\n    }\r\n\r\n    public void setResourceBundle(ResourceBundle resourceBundle) {\r\n        labelHours.setText(resourceBundle.getString(\"key.dialog.stopTime.hours\"));\r\n        labelMinute.setText(resourceBundle.getString(\"key.dialog.stopTime.minute\"));\r\n        labelSecond.setText(resourceBundle.getString(\"key.dialog.stopTime.second\"));\r\n\r\n        buttonOk.setText(resourceBundle.getString(\"key.button.ok\"));\r\n        buttonCancel.setText(resourceBundle.getString(\"key.button.cancel\"));\r\n        buttonDelete.setText(resourceBundle.getString(\"key.button.delete\"));\r\n    }\r\n\r\n    public void close(ActionEvent actionEvent) {\r\n        (((Node) actionEvent.getSource()).getScene().getWindow()).hide();\r\n    }\r\n\r\n    public void refreshStopTimeInfo() {\r\n        stopTimeInfo.setHours(comboboxHours.getValue());\r\n        stopTimeInfo.setMinute(comboboxMinute.getValue());\r\n        stopTimeInfo.setSecond(comboboxSecond.getValue());\r\n    }\r\n\r\n    public void deleteStopTime() {\r\n        comboboxHours.getSelectionModel().select(StopTimeInfo.DEFAULT_VALUES);\r\n        comboboxMinute.getSelectionModel().select(StopTimeInfo.DEFAULT_VALUES);\r\n        comboboxSecond.getSelectionModel().select(StopTimeInfo.DEFAULT_VALUES);\r\n\r\n        refreshStopTimeInfo();\r\n    }\r\n\r\n    public void actionButtonPressed(ActionEvent actionEvent) {\r\n        if (!(actionEvent.getSource() instanceof Button)) {\r\n            return;\r\n        }\r\n\r\n        switch (((Button) actionEvent.getSource()).getId()) {\r\n            case \"buttonOk\":\r\n                refreshStopTimeInfo();\r\n                close(actionEvent);\r\n                break;\r\n            case \"buttonCancel\":\r\n                isCancel = true;\r\n                close(actionEvent);\r\n                break;\r\n            case \"buttonDelete\":\r\n                deleteStopTime();\r\n                close(actionEvent);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public boolean isCancel() {\r\n        return isCancel;\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"pashkobohdan/Music-Player","sample_ref":"refs/heads/master","sample_path":"src/controllers/dialogControllers/ControllerSetStopTime.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f6b430fd3f0ba8e6728f0f79c1a4af568ccae3d8","size":"3235","content":"/*\n * This file is part of AirReceiver.\n *\n * AirReceiver is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * AirReceiver is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n\n * You should have received a copy of the GNU General Public License\n * along with AirReceiver.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage org.dyndns.jkiddo.raop.server.airreceiver;\n\nimport java.nio.charset.Charset;\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport org.jboss.netty.channel.ChannelHandlerContext;\nimport org.jboss.netty.channel.ChannelStateEvent;\nimport org.jboss.netty.channel.MessageEvent;\nimport org.jboss.netty.channel.SimpleChannelHandler;\nimport org.jboss.netty.handler.codec.http.HttpRequest;\nimport org.jboss.netty.handler.codec.http.HttpResponse;\n\n/**\n * Logs RTSP requests and responses.\n */\npublic class RtspLoggingHandler extends SimpleChannelHandler\n{\n\tprivate static final Logger s_logger = Logger.getLogger(RtspLoggingHandler.class.getName());\n\n\t@Override\n\tpublic void channelConnected(final ChannelHandlerContext ctx, final ChannelStateEvent e) throws Exception\n\t{\n\t\ts_logger.info(\"Client \" + e.getChannel().getRemoteAddress() + \" connected on \" + e.getChannel().getLocalAddress());\n\t}\n\n\t@Override\n\tpublic void messageReceived(final ChannelHandlerContext ctx, final MessageEvent evt) throws Exception\n\t{\n\t\ttry\n\t\t{\n\t\t\tfinal HttpRequest req = (HttpRequest) evt.getMessage();\n\n\t\t\tfinal Level level = Level.FINE;\n\t\t\tif(s_logger.isLoggable(level))\n\t\t\t{\n\t\t\t\tfinal String content = req.getContent().toString(Charset.defaultCharset());\n\n\t\t\t\tfinal StringBuilder s = new StringBuilder();\n\t\t\t\ts.append(\">\");\n\t\t\t\ts.append(req.getMethod());\n\t\t\t\ts.append(\" \");\n\t\t\t\ts.append(req.getUri());\n\t\t\t\ts.append(\"\\n\");\n\t\t\t\tfor(final Map.Entry<String, String> header : req.headers())\n\t\t\t\t{\n\t\t\t\t\ts.append(\"  \");\n\t\t\t\t\ts.append(header.getKey());\n\t\t\t\t\ts.append(\": \");\n\t\t\t\t\ts.append(header.getValue());\n\t\t\t\t\ts.append(\"\\n\");\n\t\t\t\t}\n\t\t\t\ts.append(content);\n\t\t\t\ts_logger.log(Level.FINE, s.toString());\n\t\t\t}\n\t\t}\n\t\tcatch(final Exception e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tsuper.messageReceived(ctx, evt);\n\t}\n\n\t@Override\n\tpublic void writeRequested(final ChannelHandlerContext ctx, final MessageEvent evt) throws Exception\n\t{\n\t\tfinal HttpResponse resp = (HttpResponse) evt.getMessage();\n\n\t\tfinal Level level = Level.FINE;\n\t\tif(s_logger.isLoggable(level))\n\t\t{\n\t\t\tfinal StringBuilder s = new StringBuilder();\n\t\t\ts.append(\"<\");\n\t\t\ts.append(resp.getStatus().getCode());\n\t\t\ts.append(\" \");\n\t\t\ts.append(resp.getStatus().getReasonPhrase());\n\t\t\ts.append(\"\\n\");\n\t\t\tfor(final Map.Entry<String, String> header : resp.headers())\n\t\t\t{\n\t\t\t\ts.append(\"  \");\n\t\t\t\ts.append(header.getKey());\n\t\t\t\ts.append(\": \");\n\t\t\t\ts.append(header.getValue());\n\t\t\t\ts.append(\"\\n\");\n\t\t\t}\n\t\t\ts_logger.log(Level.FINE, s.toString());\n\t\t}\n\n\t\tsuper.writeRequested(ctx, evt);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"jkiddo/jolivia","sample_ref":"refs/heads/master","sample_path":"jolivia.airplay/src/main/java/org/dyndns/jkiddo/raop/server/airreceiver/RtspLoggingHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2a964f47d7bad9132cf4bc63e924d9311c9d45e2","size":"5910","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.icps.instantiation.vo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.Iterator;\r\nimport ims.framework.enumerations.SortOrder;\r\n\r\n/**\r\n * Linked to ICPs.Instantiation.PatientICPPhase business object (ID: 1100100003).\r\n */\r\npublic class PatientICPPhaseRefVoCollection extends ims.vo.ValueObjectCollection implements ims.domain.IDomainCollectionGetter, ims.vo.ImsCloneable, Iterable<PatientICPPhaseRefVo>\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tprivate ArrayList<PatientICPPhaseRefVo> col = new ArrayList<PatientICPPhaseRefVo>();\r\n\tpublic final String getBoClassName()\r\n\t{\r\n\t\treturn \"ims.icps.instantiation.domain.objects.PatientICPPhase\";\r\n\t}\r\n\tpublic ims.domain.IDomainGetter[] getIDomainGetterItems()\r\n\t{\r\n\t\tims.domain.IDomainGetter[] result = new ims.domain.IDomainGetter[col.size()];\r\n\t\tcol.toArray(result);\r\n\t\treturn result;\r\n\t}\r\n\tpublic boolean add(PatientICPPhaseRefVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tif(this.col.indexOf(value) < 0)\r\n\t\t{\r\n\t\t\treturn this.col.add(value);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tpublic boolean add(int index, PatientICPPhaseRefVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tif(this.col.indexOf(value) < 0)\r\n\t\t{\r\n\t\t\tthis.col.add(index, value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tpublic void clear()\r\n\t{\r\n\t\tthis.col.clear();\r\n\t}\r\n\tpublic void remove(int index)\r\n\t{\r\n\t\tthis.col.remove(index);\r\n\t}\r\n\tpublic int size()\r\n\t{\r\n\t\treturn this.col.size();\r\n\t}\r\n\tpublic int indexOf(PatientICPPhaseRefVo instance)\r\n\t{\r\n\t\treturn col.indexOf(instance);\r\n\t}\r\n\tpublic PatientICPPhaseRefVo get(int index)\r\n\t{\r\n\t\treturn this.col.get(index);\r\n\t}\r\n\tpublic boolean set(int index, PatientICPPhaseRefVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tthis.col.set(index, value);\r\n\t\treturn true;\r\n\t}\r\n\tpublic void remove(PatientICPPhaseRefVo instance)\r\n\t{\r\n\t\tif(instance != null)\r\n\t\t{\r\n\t\t\tint index = indexOf(instance);\r\n\t\t\tif(index >= 0)\r\n\t\t\t\tremove(index);\r\n\t\t}\r\n\t}\r\n\tpublic boolean contains(PatientICPPhaseRefVo instance)\r\n\t{\r\n\t\treturn indexOf(instance) >= 0;\r\n\t}\r\n\tpublic Object clone()\r\n\t{\r\n\t\tPatientICPPhaseRefVoCollection clone = new PatientICPPhaseRefVoCollection();\r\n\r\n\t\tfor(int x = 0; x < this.col.size(); x++)\r\n\t\t{\r\n\t\t\tif(this.col.get(x) != null)\r\n\t\t\t\tclone.col.add((PatientICPPhaseRefVo)this.col.get(x).clone());\r\n\t\t\telse\r\n\t\t\t\tclone.col.add(null);\r\n\t\t}\r\n\t\treturn clone;\r\n\t}\r\n\tpublic boolean isValidated()\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\tpublic String[] validate()\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\tpublic PatientICPPhaseRefVo[] toArray()\r\n\t{\r\n\t\tPatientICPPhaseRefVo[] arr = new PatientICPPhaseRefVo[col.size()];\r\n\t\tcol.toArray(arr);\r\n\t\treturn arr;\r\n\t}\r\n\tpublic PatientICPPhaseRefVoCollection sort()\r\n\t{\r\n\t\treturn sort(SortOrder.ASCENDING);\r\n\t}\r\n\tpublic PatientICPPhaseRefVoCollection sort(SortOrder order)\r\n\t{\r\n\t\treturn sort(new PatientICPPhaseRefVoComparator(order));\r\n\t}\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tpublic PatientICPPhaseRefVoCollection sort(Comparator comparator)\r\n\t{\r\n\t\tCollections.sort(this.col, comparator);\r\n\t\treturn this;\r\n\t}\r\n\tpublic Iterator<PatientICPPhaseRefVo> iterator()\r\n\t{\r\n\t\treturn col.iterator();\r\n\t}\r\n\t@Override\r\n\tprotected ArrayList getTypedCollection()\r\n\t{\r\n\t\treturn col;\r\n\t}\r\n\tprivate class PatientICPPhaseRefVoComparator implements Comparator\r\n\t{\r\n\t\tprivate int direction = 1;\r\n\t\tpublic PatientICPPhaseRefVoComparator()\r\n\t\t{\r\n\t\t\tthis(SortOrder.ASCENDING);\r\n\t\t}\r\n\t\tpublic PatientICPPhaseRefVoComparator(SortOrder order)\r\n\t\t{\r\n\t\t\tif (order == SortOrder.DESCENDING)\r\n\t\t\t{\r\n\t\t\t\tthis.direction = -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic int compare(Object obj1, Object obj2)\r\n\t\t{\r\n\t\t\tPatientICPPhaseRefVo voObj1 = (PatientICPPhaseRefVo)obj1;\r\n\t\t\tPatientICPPhaseRefVo voObj2 = (PatientICPPhaseRefVo)obj2;\r\n\t\t\treturn direction*(voObj1.compareTo(voObj2));\r\n\t\t}\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/ValueObjects/src/ims/icps/instantiation/vo/PatientICPPhaseRefVoCollection.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"705897b07bd42d810482b93f12a455950cd76409","size":"898","content":"package fr.lteconsulting.hexacss.client;\n\nimport com.google.gwt.core.client.EntryPoint;\nimport com.google.gwt.user.client.ui.RootLayoutPanel;\n\nimport fr.lteconsulting.hexa.client.css.ThemeManager;\n\n/**\n * This sample displays the {@link BootstrapShowcase} widget written with UiBinder.\n * \n * This widget uses HexaCss to bind to the CSS files, and uses the {@link ThemeManager}\n * to switch between different Bootstrap themes.\n * \n * The theme files directly come from free Bootstrap CSS files that can be found on :\n * - Bootswatch : https://bootswatch.com/\n * - Bootstrap Zero : http://bootstrapzero.com/\n * \n * @author Arnaud Tournier\n * (c) LTE Consulting - 2015\n * http://www.lteconsulting.fr\n *\n */\npublic class Application implements EntryPoint\n{\n\t@Override\n\tpublic void onModuleLoad()\n\t{\n\t\tBootstrapShowcase showCase = new BootstrapShowcase();\n\t\tRootLayoutPanel.get().add( showCase );\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"ltearno/hexa.tools","sample_ref":"refs/heads/master","sample_path":"hexa.css.samples/sample4/src/main/java/fr/lteconsulting/hexacss/client/Application.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"68981972e38674307074a436fc5190aef5b3c851","size":"14313","content":"/*\n * Copyright (C) 2012,2013,2014,2015 Renard Wellnitz.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage com.renard.ocr.documents.creation.crop;\n\nimport android.graphics.Matrix;\nimport android.graphics.Point;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.util.Log;\n\nimport static com.renard.ocr.documents.creation.crop.CropHighlightView.*;\n\n/**\n * Created by renard on 26/02/15.\n */\npublic class CroppingTrapezoid {\n\n    private final static String LOG_TAG = CroppingTrapezoid.class.getSimpleName();\n    private final float[] mPoints = new float[8];\n    private final float[] mMappedPoints = new float[8];\n    private final Rect mImageRect;\n\n    public CroppingTrapezoid(RectF cropRect, Rect imageRect) {\n        mImageRect = new Rect(imageRect);\n        mPoints[0] = cropRect.left;\n        mPoints[1] = cropRect.top;\n        mPoints[2] = cropRect.right;\n        mPoints[3] = cropRect.top;\n        mPoints[4] = cropRect.right;\n        mPoints[5] = cropRect.bottom;\n        mPoints[6] = cropRect.left;\n        mPoints[7] = cropRect.bottom;\n    }\n\n\n    public Rect getBoundingRect() {\n        return getBoundingRect(mPoints);\n    }\n\n    private float[] getBoundingPoints(Matrix matrix) {\n        final Rect boundingRect = getBoundingRect(mPoints);\n        float[] points = new float[4];\n        points[0] = boundingRect.left;\n        points[1] = boundingRect.top;\n        points[2] = boundingRect.right;\n        points[3] = boundingRect.bottom;\n        matrix.mapPoints(points);\n        return points;\n    }\n\n    public Rect getPerspectiveCorrectedBoundingRect() {\n        float[] p = mMappedPoints;\n        System.arraycopy(mPoints, 0, p, 0, 8);\n        float w1 = p[2] - p[0];\n        float w2 = p[4] - p[6];\n        float h1 = p[7] - p[1];\n        float h2 = p[5] - p[3];\n        float diffH = w1 - w2;\n        float diffV = h1 - h2;\n        if (diffH < 0) {\n            float scale = (Math.abs(diffH) + w2) / w2;\n            h1 *= (scale);\n            h2 *= (scale);\n            //move top up\n            p[1] = p[7] - h1;\n            p[3] = p[5] - h2;\n        } else {\n            float scale = (diffH + w1) / w1;\n            h1 *= scale;\n            h2 *= scale;\n            //move bottom down\n            p[7] = p[1] + h1;\n            p[5] = p[3] + h2;\n        }\n        if (diffV < 0) {\n            float scale = (Math.abs(diffV) + h2) / h2;\n            w1 *= scale;\n            w2 *= scale;\n            //move left to left\n            p[0] = p[2] - w1;\n            p[6] = p[4] - w2;\n        } else {\n            float scale = (diffV + h1) / h1;\n            w1 *= scale;\n            w2 *= scale;\n            //move right to right\n            p[2] = p[0] + w1;\n            p[4] = p[6] + w2;\n        }\n        return getBoundingRect(mMappedPoints);\n    }\n\n    public Rect getBoundingRect(Matrix matrix) {\n        float[] points = getBoundingPoints(matrix);\n        int left = (int) Math.min(points[0], points[2]);\n        int right = (int) Math.max(points[0], points[2]);\n        int top = (int) Math.min(points[1], points[3]);\n        int bottom = (int) Math.max(points[1], points[3]);\n\n        return new Rect(left, top, right, bottom);\n    }\n\n    public float[] getScreenPoints(Matrix matrix) {\n        matrix.mapPoints(mMappedPoints, mPoints);\n        return mMappedPoints;\n    }\n\n    public float[] getPoints() {\n        return mPoints;\n    }\n\n    public Point getTopLeft() {\n        return new Point((int) mPoints[0], (int) mPoints[1]);\n    }\n\n    public Point getTopRight() {\n        return new Point((int) mPoints[2], (int) mPoints[3]);\n    }\n\n    public Point getBottomRight() {\n        return new Point((int) mPoints[4], (int) mPoints[5]);\n    }\n\n    public Point getBottomLeft() {\n        return new Point((int) mPoints[6], (int) mPoints[7]);\n    }\n\n    // moves the cropping trapezoid by (dx, dy) in image space.\n    public void moveBy(float dx, float dy) {\n        final Rect boundingRect = getBoundingRect();\n        dx = capDx(dx, boundingRect);\n        dy = capDy(dy, boundingRect);\n\n        for (int i = 0; i < 8; i += 2) {\n            mPoints[i] += dx;\n            mPoints[i + 1] += dy;\n        }\n        capPoints(GROW_NONE);\n    }\n\n    private float capDy(float dy, Rect boundingRect) {\n        if ((boundingRect.bottom + dy) >= mImageRect.bottom) {\n            dy = mImageRect.bottom-boundingRect.bottom;\n        } else if ((boundingRect.top + dy) <= mImageRect.top) {\n            dy = mImageRect.top-boundingRect.top;\n        }\n        return dy;\n    }\n\n    private float capDx(float dx, Rect boundingRect) {\n        if ((boundingRect.right + dx) >= mImageRect.right) {\n            dx = mImageRect.right-boundingRect.right;\n        } else if (mImageRect.left >= (boundingRect.left + dx)) {\n            dx = mImageRect.left-boundingRect.left;\n        }\n        return dx;\n    }\n\n\n    // Grows the cropping trapezoid by (dx, dy) in image space.\n    public void growBy(int edge, float dx, float dy) {\n//        final Rect boundingRect = getBoundingRect();\n//        dx = capDx(dx, boundingRect);\n//        dy = capDy(dy, boundingRect);\n\n\n        if ((GROW_LEFT_EDGE | GROW_TOP_EDGE) == edge) {\n            mPoints[0] += dx;\n            mPoints[1] += dy;\n            capPoints(edge);\n            return;\n        }\n        if ((GROW_RIGHT_EDGE | GROW_TOP_EDGE) == edge) {\n            mPoints[2] += dx;\n            mPoints[3] += dy;\n            capPoints(edge);\n            return;\n        }\n        if ((GROW_RIGHT_EDGE | GROW_BOTTOM_EDGE) == edge) {\n            mPoints[4] += dx;\n            mPoints[5] += dy;\n            capPoints(edge);\n            return;\n        }\n        if ((GROW_LEFT_EDGE | GROW_BOTTOM_EDGE) == edge) {\n            mPoints[6] += dx;\n            mPoints[7] += dy;\n            capPoints(edge);\n            return;\n        }\n        if ((GROW_LEFT_EDGE) == edge) {\n            mPoints[0] += dx;\n            mPoints[1] += dy;\n            mPoints[6] += dx;\n            mPoints[7] += dy;\n        }\n        if ((GROW_RIGHT_EDGE) == edge) {\n            mPoints[2] += dx;\n            mPoints[3] += dy;\n            mPoints[4] += dx;\n            mPoints[5] += dy;\n        }\n        if ((GROW_TOP_EDGE) == edge) {\n            mPoints[0] += dx;\n            mPoints[1] += dy;\n            mPoints[2] += dx;\n            mPoints[3] += dy;\n        }\n        if ((GROW_BOTTOM_EDGE) == edge) {\n            mPoints[4] += dx;\n            mPoints[5] += dy;\n            mPoints[6] += dx;\n            mPoints[7] += dy;\n        }\n\n\n        capPoints(edge);\n    }\n\n\n    public int getHit(float x, float y, float hysteresis) {\n        int retval = GROW_NONE;\n\n        final boolean touchesTopLeft = calculateDistanceToPoint(mPoints[0], mPoints[1], x, y) <= hysteresis;\n        if (touchesTopLeft) {\n            Log.i(LOG_TAG, \"top left\");\n            return GROW_LEFT_EDGE | GROW_TOP_EDGE;\n        }\n        final boolean touchesTopRight = calculateDistanceToPoint(mPoints[2], mPoints[3], x, y) <= hysteresis;\n        if (touchesTopRight) {\n            Log.i(LOG_TAG, \"top right\");\n            return GROW_RIGHT_EDGE | GROW_TOP_EDGE;\n        }\n        final boolean touchesBottomRight = calculateDistanceToPoint(mPoints[4], mPoints[5], x, y) <= hysteresis;\n        if (touchesBottomRight) {\n            Log.i(LOG_TAG, \"bottom right\");\n            return GROW_RIGHT_EDGE | GROW_BOTTOM_EDGE;\n        }\n        final boolean touchesBottomLeft = calculateDistanceToPoint(mPoints[6], mPoints[7], x, y) <= hysteresis;\n        if (touchesBottomLeft) {\n            Log.i(LOG_TAG, \"bottom left\");\n            return GROW_LEFT_EDGE | GROW_BOTTOM_EDGE;\n        }\n\n        final double topDistance = calculateDistanceToLine(mPoints[0], mPoints[1], mPoints[2], mPoints[3], x, y);\n        if (topDistance <= hysteresis) {\n            Log.i(LOG_TAG, \"top\");\n            retval |= GROW_TOP_EDGE;\n        }\n        final double rightDistance = calculateDistanceToLine(mPoints[2], mPoints[3], mPoints[4], mPoints[5], x, y);\n        if (rightDistance <= hysteresis) {\n            Log.i(LOG_TAG, \"right\");\n            retval |= GROW_RIGHT_EDGE;\n        }\n        final double bottomDistance = calculateDistanceToLine(mPoints[6], mPoints[7], mPoints[4], mPoints[5], x, y);\n        if (bottomDistance <= hysteresis) {\n            Log.i(LOG_TAG, \"bottom\");\n            retval |= GROW_BOTTOM_EDGE;\n        }\n        final double leftDistance = calculateDistanceToLine(mPoints[0], mPoints[1], mPoints[6], mPoints[7], x, y);\n        if (leftDistance <= hysteresis) {\n            Log.i(LOG_TAG, \"left\");\n            retval |= GROW_LEFT_EDGE;\n        }\n\n        // Not near any edge but maybe inside the trapezoid\n        if (retval == GROW_NONE) {\n            //check if it is inside the trapezoid\n            float xCross = calculateXCrossing(mPoints[2], mPoints[3], mPoints[4], mPoints[5], x, y);\n            if (xCross < (x - hysteresis)) {\n                //point is outside to right of trapezoid\n                return retval;\n            }\n            xCross = calculateXCrossing(mPoints[0], mPoints[1], mPoints[6], mPoints[7], x, y);\n            if (xCross > (x + hysteresis)) {\n                //point is outside to left of trapezoid\n                return retval;\n            }\n            float yCross = calculateYCrossing(mPoints[0], mPoints[1], mPoints[2], mPoints[3], x, y);\n            if (yCross > (y + hysteresis)) {\n                //point is outside to the top of trapezoid\n                return retval;\n            }\n            yCross = calculateYCrossing(mPoints[4], mPoints[5], mPoints[6], mPoints[7], x, y);\n            if (yCross < (y - hysteresis)) {\n                //point is outside to the bottom of trapezoid\n                return retval;\n            }\n            Log.i(LOG_TAG, \"move\");\n            retval = MOVE;\n        }\n\n        return retval;\n    }\n\n    private Rect getBoundingRect(float[] p) {\n        //return new Rect(Math.round(r.left), Math.round(r.top), Math.round(r.right), Math.round(r.bottom));\n\n        int left = (int) Math.min(p[0], p[6]);\n        int right = (int) Math.max(p[2], p[4]);\n        int top = (int) Math.min(p[1], p[3]);\n        int bottom = (int) Math.max(p[5], p[7]);\n\n        return new Rect(left, top, right, bottom);\n    }\n\n    private void capPoints(final int edge) {\n        mPoints[0] = Math.max(0, mPoints[0]); //left\n        mPoints[1] = Math.max(0, mPoints[1]); //top\n        mPoints[2] = Math.min(mImageRect.right, mPoints[2]); //right\n        mPoints[3] = Math.max(0, mPoints[3]); //top\n        mPoints[4] = Math.min(mImageRect.right, mPoints[4]); //right\n        mPoints[5] = Math.min(mImageRect.bottom, mPoints[5]); //bottom\n        mPoints[6] = Math.max(0, mPoints[6]); //left\n        mPoints[7] = Math.min(mImageRect.bottom, mPoints[7]); //bottom\n        //lef top always to left of right top\n        final float cap = 50f;\n        final float leftBound = Math.max(mPoints[0], mPoints[6]) + cap;\n        final float rightBound = Math.min(mPoints[2], mPoints[4]) - cap;\n        final float topBound = Math.max(mPoints[1], mPoints[3]) + cap;\n        final float bottomBound = Math.min(mPoints[7], mPoints[5]) - cap;\n\n        if ((GROW_LEFT_EDGE & edge) > 0) {\n            mPoints[0] = Math.min(mPoints[0], rightBound);\n            mPoints[6] = Math.min(mPoints[6], rightBound);\n        }\n        if ((GROW_RIGHT_EDGE & edge) > 0) {\n            mPoints[2] = Math.max(mPoints[2], leftBound);\n            mPoints[4] = Math.max(mPoints[4], leftBound);\n        }\n        if ((GROW_TOP_EDGE & edge) > 0) {\n            mPoints[1] = Math.min(mPoints[1], bottomBound);\n            mPoints[3] = Math.min(mPoints[3], bottomBound);\n        }\n        if ((GROW_BOTTOM_EDGE & edge) > 0) {\n            mPoints[7] = Math.max(mPoints[7], topBound);\n            mPoints[5] = Math.max(mPoints[5], topBound);\n        }\n\n\n    }\n\n    private double calculateDistanceToLine(float x1, float y1, float x2, float y2, float x, float y) {\n        if ((x > x1 && x < x2) || (y > y1 && y < y2)) {\n            if (x1 == x2) {\n                return Math.abs(x1 - x);\n            }\n            float mTop = getRiseOfLine(x1, y1, x2, y2);\n            float nTop = getYCrossingOfLine(x1, y1, mTop);\n            if (mTop == 0) {\n                return Math.abs(nTop - y);\n            }\n            float mCross = -1 / mTop;\n            float nCross = getYCrossingOfLine(x, y, mCross);\n            float xCross = (nTop - nCross) / (mCross - mTop);\n            float yCross = mCross * xCross + nCross;\n            return calculateDistanceToPoint(xCross, yCross, x, y);\n        } else {\n            return Double.MAX_VALUE;\n        }\n    }\n\n    private double calculateDistanceToPoint(float x1, float y1, float x, float y) {\n        return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\n    }\n\n    private float calculateXCrossing(float x1, float y1, float x2, float y2, float x, float y) {\n        if (x1 == x2) {\n            return x1;\n        }\n        float mTop = getRiseOfLine(x1, y1, x2, y2);\n        float nTop = getYCrossingOfLine(x1, y1, mTop);\n        float xCross = getXOnLine(y, mTop, nTop);\n        return xCross;\n    }\n\n    private float getXOnLine(float y, float mTop, float nTop) {\n        return (y - nTop) / mTop;\n    }\n\n    private float calculateYCrossing(float x1, float y1, float x2, float y2, float x, float y) {\n        if (y1 == y2) {\n            return y1;\n        }\n        float mTop = getRiseOfLine(x1, y1, x2, y2);\n        float nTop = getYCrossingOfLine(x1, y1, mTop);\n        float xCross = getXOnLine(y, mTop, nTop);\n        return mTop * xCross + nTop;\n    }\n\n    private float getYCrossingOfLine(float x1, float y1, float mTop) {\n        return y1 - mTop * x1;\n    }\n\n    private float getRiseOfLine(float x1, float y1, float x2, float y2) {\n        return (y1 - y2) / (x1 - x2);\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"renard314/textfairy","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/renard/ocr/documents/creation/crop/CroppingTrapezoid.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2de5fd9c4319a0665b87ef40a8f435874b1f2793","size":"2269","content":"/*\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npackage org.apache.commons.math.stat.regression;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\n\r\npublic abstract class MultipleLinearRegressionAbstractTest {\r\n\r\n    protected MultipleLinearRegression regression;\r\n\r\n    @Before\r\n    public void setUp(){\r\n        regression = createRegression();\r\n    }\r\n\r\n    protected abstract MultipleLinearRegression createRegression();\r\n    \r\n    protected abstract int getNumberOfRegressors();\r\n    \r\n    protected abstract int getSampleSize();\r\n\r\n    @Test\r\n    public void canEstimateRegressionParameters(){\r\n        double[] beta = regression.estimateRegressionParameters();        \r\n        assertEquals(getNumberOfRegressors(), beta.length);\r\n    }\r\n\r\n    @Test\r\n    public void canEstimateResiduals(){\r\n        double[] e = regression.estimateResiduals();\r\n        assertEquals(getSampleSize(), e.length);\r\n    }\r\n    \r\n    @Test\r\n    public void canEstimateRegressionParametersVariance(){\r\n        double[][] variance = regression.estimateRegressionParametersVariance();\r\n        assertEquals(getNumberOfRegressors(), variance.length);\r\n    }\r\n\r\n    @Test\r\n    public void canEstimateRegressandVariance(){\r\n        if (getSampleSize() > getNumberOfRegressors()) {\r\n            double variance = regression.estimateRegressandVariance();\r\n            assertTrue(variance > 0.0);\r\n        }\r\n    }   \r\n\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"SpoonLabs/astor","sample_ref":"refs/heads/master","sample_path":"examples/Math-issue-288/src/test/java/org/apache/commons/math/stat/regression/MultipleLinearRegressionAbstractTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"33a16aacfce3d35847d1f64528e035ecb194dbe7","size":"1455","content":"package com.heinrichreimersoftware.materialintro.view.parallax;\n\nimport android.os.Bundle;\nimport android.support.annotation.FloatRange;\nimport android.support.annotation.Nullable;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.heinrichreimersoftware.materialintro.app.SlideFragment;\n\nimport java.util.LinkedList;\nimport java.util.Queue;\n\npublic class ParallaxSlideFragment extends SlideFragment implements Parallaxable {\n    @Nullable\n    private Parallaxable parallaxLayout;\n\n    @Override\n    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n        parallaxLayout = findParallaxLayout(view);\n    }\n\n    public Parallaxable findParallaxLayout(View root) {\n        Queue<View> queue = new LinkedList<>();\n        queue.add(root);\n        while (!queue.isEmpty()) {\n            View child = queue.remove();\n            if (child instanceof Parallaxable) {\n                return (Parallaxable) child;\n            }\n            else if (child instanceof ViewGroup) {\n                ViewGroup viewGroup = (ViewGroup) child;\n                for (int i = viewGroup.getChildCount() - 1; i >= 0; i--) {\n                    queue.add(viewGroup.getChildAt(i));\n                }\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public void setOffset(@FloatRange(from = -1.0, to = 1.0) float offset) {\n        if (parallaxLayout != null)\n            parallaxLayout.setOffset(offset);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"HeinrichReimer/material-intro","sample_ref":"refs/heads/master","sample_path":"library/src/main/java/com/heinrichreimersoftware/materialintro/view/parallax/ParallaxSlideFragment.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"037606af0ce9c7f13ab82111bf8ca6eaa550a167","size":"1433","content":"\npackage com.linkedin.restli.examples.greetings.client;\n\nimport javax.annotation.Generated;\nimport com.linkedin.restli.client.RestliRequestOptions;\nimport com.linkedin.restli.client.base.FindRequestBuilderBase;\nimport com.linkedin.restli.common.ResourceSpec;\nimport com.linkedin.restli.examples.greetings.api.Greeting;\n\n\n/**\n * This resource method performs automatic projection for the custom metadata and automatic projection\n *  for paging. This particular resource method also varies on what it sets total to.\n *  The caveat with this test is that it incorrectly assigns a non null value for the total\n *  even though the MaskTree says to exclude it.\n * \n */\n@Generated(value = \"com.linkedin.pegasus.generator.JavaCodeUtil\", comments = \"Rest.li Request Builder\", date = \"Thu Mar 31 14:16:23 PDT 2016\")\npublic class PagingMetadataProjectionsFindByMetadataAutomaticPagingAutomaticPartialNullIncorrectRequestBuilder\n    extends FindRequestBuilderBase<Long, Greeting, PagingMetadataProjectionsFindByMetadataAutomaticPagingAutomaticPartialNullIncorrectRequestBuilder>\n{\n\n\n    public PagingMetadataProjectionsFindByMetadataAutomaticPagingAutomaticPartialNullIncorrectRequestBuilder(String baseUriTemplate, ResourceSpec resourceSpec, RestliRequestOptions requestOptions) {\n        super(baseUriTemplate, Greeting.class, resourceSpec, requestOptions);\n        super.name(\"metadataAutomaticPagingAutomaticPartialNullIncorrect\");\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"linkedin/parseq","sample_ref":"refs/heads/master","sample_path":"contrib/parseq-restli-client/src/test/java/com/linkedin/restli/examples/greetings/client/PagingMetadataProjectionsFindByMetadataAutomaticPagingAutomaticPartialNullIncorrectRequestBuilder.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6ed900999f516ccd198018c1fc4fdb0c048a0531","size":"2212","content":"package org.zwobble.mammoth.tests.html;\n\nimport org.junit.Test;\nimport org.zwobble.mammoth.internal.html.Html;\nimport org.zwobble.mammoth.internal.html.HtmlNode;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.zwobble.mammoth.internal.util.Lists.list;\nimport static org.zwobble.mammoth.internal.util.Maps.map;\n\npublic class HtmlWriteTests {\n    @Test\n    public void textNodesAreWrittenAsPlainText() {\n        assertEquals(\n            \"Dark Blue\",\n            write(Html.text(\"Dark Blue\")));\n    }\n\n    @Test\n    public void textNodesAreHtmlEscaped() {\n        assertEquals(\n            \"&gt;&lt;&amp;\",\n            write(Html.text(\"><&\")));\n    }\n\n    @Test\n    public void doubleQuotesInTextNodesArentHtmlEscaped() {\n        assertEquals(\n            \"&gt;&lt;&amp;\\\"\",\n            write(Html.text(\"><&\\\"\")));\n    }\n\n    @Test\n    public void canWriteSelfClosingElement() {\n        assertEquals(\n            \"<br />\",\n            write(Html.selfClosingElement(\"br\")));\n    }\n\n    @Test\n    public void canWriteSelfClosingElementWithAttributes() {\n        assertEquals(\n            \"<img class=\\\"external\\\" src=\\\"http://example.com\\\" />\",\n            write(Html.selfClosingElement(\"img\", map(\"class\", \"external\", \"src\", \"http://example.com\"))));\n    }\n\n    @Test\n    public void canWriteElementWithNoChildren() {\n        assertEquals(\n            \"<p></p>\",\n            write(Html.element(\"p\")));\n    }\n\n    @Test\n    public void canWriteElementWithChildren() {\n        assertEquals(\n            \"<div><p></p><ul></ul></div>\",\n            write(Html.element(\"div\", list(\n                Html.element(\"p\"),\n                Html.element(\"ul\")))));\n    }\n\n    @Test\n    public void canWriteElementWithAttributes() {\n        assertEquals(\n            \"<a class=\\\"external\\\" href=\\\"http://example.com\\\"></a>\",\n            write(Html.element(\"a\", map(\"class\", \"external\", \"href\", \"http://example.com\"))));\n    }\n\n    @Test\n    public void attributeValuesAreEscaped() {\n        assertEquals(\n            \"<a href=\\\"&gt;&lt;&amp;&quot;\\\"></a>\",\n            write(Html.element(\"a\", map(\"href\", \"><&\\\"\"))));\n    }\n\n    private String write(HtmlNode node) {\n        return Html.write(list(node));\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"mwilliamson/java-mammoth","sample_ref":"refs/heads/master","sample_path":"src/test/java/org/zwobble/mammoth/tests/html/HtmlWriteTests.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"afae41acb478465683f3270f9f63b55eb55d98e6","size":"1204","content":"/*\n * This file is part of Spoutcraft.\n *\n * Copyright (c) 2011 SpoutcraftDev <http://spoutcraft.org/>\n * Spoutcraft is licensed under the GNU Lesser General Public License.\n *\n * Spoutcraft is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Spoutcraft is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.spoutcraft.api.material.block;\n\nimport org.spoutcraft.api.material.Plant;\n\npublic class Grass extends GenericBlock implements Plant{\n\tpublic Grass(String name) {\n\t\tsuper(name, 2);\n\t}\n\n\tpublic boolean isHasGrowthStages() {\n\t\treturn false;\n\t}\n\n\tpublic int getNumGrowthStages() {\n\t\treturn 0;\n\t}\n\n\tpublic int getMinimumLightToGrow() {\n\t\treturn 9;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"Spoutcraft/Spoutcraft","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/spoutcraft/api/material/block/Grass.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c12d2abc4d68d5d2ac87700e2a06bb39a0f92e2c","size":"1514","content":"/*******************************************************************************\r\n * Copyright (c) 2006, 2008 Abstratt Technologies\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *    Rafael Chaves (Abstratt Technologies) - initial API and implementation\r\n *******************************************************************************/\r\npackage com.abstratt.mdd.internal.ui.model;\r\n\r\nimport java.util.Comparator;\r\n\r\n/**\r\n * Sorts the model object children according to the order returned by\r\n * UIModelObject.getChildrenTypes().\r\n */\r\npublic class ModelChildrenComparator implements Comparator {\r\n\r\n    public int compare(Object arg0, Object arg1) {\r\n        UIModelObject model0 = (UIModelObject) arg0;\r\n        UIModelObject model1 = (UIModelObject) arg1;\r\n        int i0 = getIndex(model0);\r\n        int i1 = getIndex(model1);\r\n        return i0 - i1;\r\n    }\r\n\r\n    protected int getIndex(UIModelObject target) {\r\n        Class targetType = target.getNode().getBaseNode().getClass();\r\n        Class[] types = target.getParent().getChildrenTypes();\r\n        for (int i = 0; i < types.length; i++) {\r\n            Class type = types[i];\r\n            if (type == targetType) {\r\n                return i;\r\n            }\r\n        }\r\n        throw new IllegalArgumentException();\r\n    }\r\n}","binary":"false","copies":"1","sample_repo_name":"abstratt/textuml","sample_ref":"refs/heads/master","sample_path":"plugins/com.abstratt.mdd.frontend.textuml.ui/src/com/abstratt/mdd/internal/ui/model/ModelChildrenComparator.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"d6ba4b3502b7890270d9c088087acfd402f216b8","size":"4005","content":"package com.emc.ecs.cloudfoundry.broker.model;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport org.springframework.cloud.servicebroker.model.DashboardClient;\nimport org.springframework.cloud.servicebroker.model.Plan;\nimport org.springframework.cloud.servicebroker.model.ServiceDefinition;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ServiceDefinitionProxy {\n    private String id;\n    private String name;\n    private String description;\n    private String type;\n    private Boolean bindable;\n    private Boolean planUpdatable;\n    private List<String> tags;\n    private Map<String, Object> metadata = new HashMap<>();\n    private Map<String, Object> serviceSettings = new HashMap<>();\n    private List<PlanProxy> plans;\n    private List<String> requires;\n    private DashboardClientProxy dashboardClient;\n\n    public ServiceDefinitionProxy() {\n\tsuper();\n    }\n\n    public ServiceDefinitionProxy(String id, String name, String description,\n\t    Boolean bindable, Boolean planUpdatable, List<String> tags,\n\t    Map<String, Object> serviceSettings, Map<String, Object> metadata,\n\t    List<PlanProxy> plans, List<String> requires,\n\t    DashboardClientProxy dashboardClient) {\n\tsuper();\n\tthis.id = id;\n\tthis.name = name;\n\tthis.description = description;\n\tthis.bindable = bindable;\n\tthis.planUpdatable = planUpdatable;\n\tthis.tags = tags;\n\tthis.serviceSettings = serviceSettings;\n\tthis.metadata = metadata;\n\tthis.plans = plans;\n\tthis.requires = requires;\n\tthis.dashboardClient = dashboardClient;\n    }\n\n    public ServiceDefinition unproxy() {\n\tList<Plan> realPlans = null;\n\tif (plans != null)\n\t    realPlans = plans.stream().map(p -> p.unproxy())\n\t\t    .collect(Collectors.toList());\n\n\tDashboardClient realDashboardClient = null;\n\tif (dashboardClient != null)\n\t    realDashboardClient = dashboardClient.unproxy();\n\n\treturn new ServiceDefinition(id, name, description, bindable,\n\t\tplanUpdatable, realPlans, tags, metadata, requires,\n\t\trealDashboardClient);\n    }\n\n    public String getId() {\n\treturn id;\n    }\n\n    public void setId(String id) {\n\tthis.id = id;\n    }\n\n    public String getName() {\n\treturn name;\n    }\n\n    public void setName(String name) {\n\tthis.name = name;\n    }\n\n    public String getDescription() {\n\treturn description;\n    }\n\n    public void setDescription(String description) {\n\tthis.description = description;\n    }\n\n    public Boolean getBindable() {\n\treturn bindable;\n    }\n\n    public void setBindable(Boolean bindable) {\n\tthis.bindable = bindable;\n    }\n\n    public Boolean getPlanUpdatable() {\n\treturn planUpdatable;\n    }\n\n    public void setPlanUpdatable(Boolean planUpdatable) {\n\tthis.planUpdatable = planUpdatable;\n    }\n\n    public List<String> getTags() {\n\treturn tags;\n    }\n\n    public void setTags(List<String> tags) {\n\tthis.tags = tags;\n    }\n\n    public Map<String, Object> getMetadata() {\n\treturn metadata;\n    }\n\n    public void setMetadata(Map<String, Object> metadata) {\n\tthis.metadata = metadata;\n    }\n\n    public List<PlanProxy> getPlans() {\n\treturn plans;\n    }\n\n    public void setPlans(List<PlanProxy> plans) {\n\tthis.plans = plans;\n    }\n\n    public List<String> getRequires() {\n\treturn requires;\n    }\n\n    public void setRequires(List<String> requires) {\n\tthis.requires = requires;\n    }\n\n    public DashboardClientProxy getDashboardClient() {\n\treturn dashboardClient;\n    }\n\n    public void setDashboardClient(DashboardClientProxy dashboardClient) {\n\tthis.dashboardClient = dashboardClient;\n    }\n\n    public PlanProxy findPlan(String planId) {\n\treturn plans.stream().filter(p -> p.getId().equals(planId)).findFirst()\n\t\t.get();\n    }\n\n    public Map<String, Object> getServiceSettings() {\n\treturn serviceSettings;\n    }\n\n    public void setServiceSettings(Map<String, Object> serviceSettings) {\n\tthis.serviceSettings = serviceSettings;\n    }\n\n    public String getType() {\n\treturn type;\n    }\n\n    public void setType(String type) {\n\tthis.type = type;\n    }\n}","binary":"false","copies":"1","sample_repo_name":"spiegela/ecs-cf-service-broker","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/emc/ecs/cloudfoundry/broker/model/ServiceDefinitionProxy.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"397e3f12da0046e3b60fea10b12aa0a5cf0728d1","size":"1193","content":"package com.camunda.demo.dmn.feel.operator;\n\nimport org.camunda.bpm.dmn.engine.DmnEngine;\nimport org.camunda.bpm.dmn.engine.impl.DefaultDmnEngineConfiguration;\nimport org.camunda.bpm.engine.ProcessEngine;\nimport org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\nimport org.camunda.bpm.engine.impl.cfg.ProcessEnginePlugin;\n\npublic class CustomFeelProcessEnginePlugin implements ProcessEnginePlugin {\n\n\tpublic void preInit(ProcessEngineConfigurationImpl processEngineConfiguration) {\n\t\t// cannot do this here because historyLevel (and maybe others) are not\n\t\t// yet initialized\n\t}\n\n\tpublic void postInit(ProcessEngineConfigurationImpl processEngineConfiguration) {\n\t\t// so do it here\n\t\tDefaultDmnEngineConfiguration dmnEngineConfiguration = (DefaultDmnEngineConfiguration) processEngineConfiguration.getDmnEngineConfiguration();\n\t\tdmnEngineConfiguration.setFeelEngineFactory(new CustomFeelEngineFactory());\n\t\tDmnEngine dmnEngine = dmnEngineConfiguration.buildEngine();\n\n\t\tprocessEngineConfiguration.setDmnEngineConfiguration(dmnEngineConfiguration);\n\t\tprocessEngineConfiguration.setDmnEngine(dmnEngine);\n\n\t}\n\n\tpublic void postProcessEngineBuild(ProcessEngine processEngine) {\n\t}\n\n}","binary":"false","copies":"1","sample_repo_name":"camunda/camunda-consulting","sample_ref":"refs/heads/master","sample_path":"snippets/dmn-collection-contains/src/main/java/com/camunda/demo/dmn/feel/operator/CustomFeelProcessEnginePlugin.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"76b66a13f063875c5da3bc7ec892f7d8901acbdf","size":"7043","content":"/*\n * Copyright 2015 Bridje Framework.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.bridje.vfs;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.util.List;\n\n/**\n * This interface represents the virtual file system for Bridje, it provides\n * methods to mount and file files and folder into the system.\n */\npublic interface VfsService\n{\n    /**\n     * Finds the virtual folder by the given path.\n     *\n     * @param path the path of the folder.\n     * @return The folder founded or {@literal null} if it does not exists.\n     */\n    VirtualFolder findFolder(String path);\n\n    /**\n     * Finds the virtual folder by the given path.\n     *\n     * @param path the path of the folder.\n     * @return The folder founded or null if it does not exists.\n     */\n    VirtualFolder findFolder(Path path);\n\n    /**\n     * Finds the virtual file by the given path.\n     *\n     * @param path the path of the file.\n     * @return The file founded or null if it does not exists.\n     */\n    VirtualFile findFile(String path);\n\n    /**\n     * Finds the virtual file by the given path.\n     *\n     * @param path the path of the file.\n     * @return The file founded or null if it does not exists.\n     */\n    VirtualFile findFile(Path path);\n\n    /**\n     * Finds the virtual file by the given path. And reads it content to a new\n     * instance of the result class.\n     *\n     * @param <T> The type of the result class.\n     * @param path the path of the file.\n     * @param resultCls The result class that the files need to be parsed to.\n     *\n     * @return The file founded or null if it does not exists.\n     * @throws java.io.IOException If any input-output error occurs reading the file.\n     */\n    <T> T findFile(String path, Class<T> resultCls) throws IOException;\n\n    /**\n     * Finds the virtual file by the given path. And reads it content to a new\n     * instance of the result class.\n     *\n     * @param <T> The type of the result class.\n     * @param path the path of the file.\n     * @param resultCls The result class that the files need to be parsed to.\n     * @return The file founded or null if it does not exists.\n     * @throws java.io.IOException If any input-output error occurs reading the file.\n     */\n    <T> T findFile(Path path, Class<T> resultCls) throws IOException;\n\n    /**\n     * List all the folders children to this folder.\n     *\n     * @return The children folders of this folder.\n     */\n    List<VirtualFolder> listFolders();\n\n    /**\n     * List all the files children to this folder.\n     *\n     * @return The children files of this folder.\n     */\n    List<VirtualFile> listFiles();\n\n    /**\n     * List all the folders children to this folder.\n     *\n     * @param query The regular expression to filter the folders names.\n     * @return The children folders of this folder.\n     */\n    List<VirtualFolder> listFolders(String query);\n\n    /**\n     * List all the files children to this folder.\n     *\n     * @param query The regular expression to filter the files names.\n     * @return The children files of this folder.\n     */\n    List<VirtualFile> listFiles(String query);\n\n    /**\n     * Mounts a new source into the given path.\n     *\n     * @param path The path to mount the source.\n     * @param source The virtual file system source object to be mounted.\n     */\n    void mount(Path path, VfsSource source);\n\n    /**\n     * Mounts a new source into the given path.\n     *\n     * @param path The path to mount the source.\n     * @param source The virtual file system source object to be mounted.\n     */\n    void mount(String path, VfsSource source);\n\n    /**\n     * Mounts a new class path resource vfs source into the given path.\n     *\n     * @param path The path to mount the source.\n     * @param resource The class path resource folder to be mounted.\n     * @throws java.io.IOException If any input-output exception occurs.\n     * @throws java.net.URISyntaxException If an invalid resource is provided.\n     */\n    void mountResource(Path path, String resource) throws IOException, URISyntaxException;\n\n    /**\n     * Mounts a new class path resource vfs source into the given path.\n     *\n     * @param path The path to mount the source.\n     * @param resource The class path resource folder to be mounted.\n     * @throws java.io.IOException If any input-output exception occurs.\n     * @throws java.net.URISyntaxException If an invalid resource is provided.\n     */\n    void mountResource(String path, String resource) throws IOException, URISyntaxException;\n\n    /**\n     * Mounts a new file vfs source into the given path.\n     *\n     * @param path The path to mount the source.\n     * @param file The folder to be mounted.\n     */\n    void mountFile(Path path, File file);\n\n    /**\n     * Mounts a new file vfs source into the given path.\n     *\n     * @param path The path to mount the source.\n     * @param file The folder to be mounted.\n     */\n    void mountFile(String path, File file);\n    \n\n    /**\n     * Mounts a new file vfs source into the given path.\n     *\n     * @param path The path to mount the source.\n     * @param file The folder to be mounted.\n     */\n    void mountFile(Path path, String file);\n\n    /**\n     * Mounts a new file vfs source into the given path.\n     *\n     * @param path The path to mount the source.\n     * @param file The folder to be mounted.\n     */\n    void mountFile(String path, String file);\n\n    /**\n     * Navigates the vfs tree from this folder, matching all the child folders\n     * recursively.\n     *\n     * @param visitor The visitor to accept the files.\n     */\n    void travel(VirtualFileVisitor visitor);\n\n    /**\n     * Navigates the vfs tree from this folder, matching all the child folders\n     * recursively.\n     *\n     * @param visitor The visitor to accept the folders.\n     */\n    void travel(VirtualFolderVisitor visitor);\n\n    /**\n     * Navigates the vfs tree from this folder, matching all the child folders\n     * recursively.\n     *\n     * @param visitor The visitor to accept the files.\n     * @param query The regular expression to math the files full path.\n     */\n    void travel(VirtualFileVisitor visitor, String query);\n\n    /**\n     * Navigates the vfs tree from this folder, matching all the child folders\n     * recursively.\n     *\n     * @param visitor The visitor to accept the folders.\n     * @param query The regular expression to math the folders full path.\n     */\n    void travel(VirtualFolderVisitor visitor, String query);\n}\n","binary":"false","copies":"1","sample_repo_name":"bridje/bridje-framework","sample_ref":"refs/heads/master","sample_path":"bridje-vfs/src/main/java/org/bridje/vfs/VfsService.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a3f3096fee17edb48c9097f1108cc0a84399a3d6","size":"96508","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.pathways.forms.externaleventmappingsconfiguration;\r\n\r\nimport ims.framework.*;\r\nimport ims.framework.controls.*;\r\nimport ims.framework.enumerations.*;\r\nimport ims.framework.utils.RuntimeAnchoring;\r\n\r\npublic class GenForm extends FormBridge\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tpublic boolean canProvideData(IReportSeed[] reportSeeds)\r\n\t{\r\n\t\treturn new ReportDataProvider(reportSeeds, this.getFormReportFields()).canProvideData();\r\n\t}\r\n\tpublic boolean hasData(IReportSeed[] reportSeeds)\r\n\t{\r\n\t\treturn new ReportDataProvider(reportSeeds, this.getFormReportFields()).hasData();\r\n\t}\r\n\tpublic IReportField[] getData(IReportSeed[] reportSeeds)\r\n\t{\r\n\t\treturn getData(reportSeeds, false);\r\n\t}\r\n\tpublic IReportField[] getData(IReportSeed[] reportSeeds, boolean excludeNulls)\r\n\t{\r\n\t\treturn new ReportDataProvider(reportSeeds, this.getFormReportFields(), excludeNulls).getData();\r\n\t}\r\n\tpublic static class lyrDetailsLayer extends Layer\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\tpublic static class tabEventMappingDetailsContainer extends LayerBridge\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic static class cmbDetailComboBox extends ComboBoxBridge\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\t\r\n\t\t\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Image image)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Color textColor)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t\t\t}\r\n\t\t\t\tpublic boolean removeRow(ims.pathways.vo.lookups.PathwaysDetail value)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.control.removeRow(value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.pathways.vo.lookups.PathwaysDetail getValue()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (ims.pathways.vo.lookups.PathwaysDetail)super.control.getValue();\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setValue(ims.pathways.vo.lookups.PathwaysDetail value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.setValue(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpublic static class cmbGroupComboBox extends ComboBoxBridge\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\t\r\n\t\t\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Image image)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Color textColor)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t\t\t}\r\n\t\t\t\tpublic boolean removeRow(ims.pathways.vo.lookups.PathwaysGroup value)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.control.removeRow(value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.pathways.vo.lookups.PathwaysGroup getValue()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (ims.pathways.vo.lookups.PathwaysGroup)super.control.getValue();\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setValue(ims.pathways.vo.lookups.PathwaysGroup value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.setValue(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpublic static class cmbProviderComboBox extends ComboBoxBridge\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\t\r\n\t\t\t\tpublic void newRow(ims.ocrr.vo.ProviderSystemVo value, String text)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Image image)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Color textColor)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t\t\t}\r\n\t\t\t\tpublic boolean removeRow(ims.ocrr.vo.ProviderSystemVo value)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.control.removeRow(value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.ocrr.vo.ProviderSystemVo getValue()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (ims.ocrr.vo.ProviderSystemVo)super.control.getValue();\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setValue(ims.ocrr.vo.ProviderSystemVo value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.setValue(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpublic void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)\r\n\t\t\t{\r\n\t\t\t\tsuper.container.setTabActivatedEvent(delegate);\r\n\t\t\t}\r\n\t\t\tprotected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception\r\n\t\t\t{\r\n\t\t\t\tif(form == null)\r\n\t\t\t\t\tthrow new RuntimeException(\"Invalid form\");\r\n\t\t\t\tif(appForm == null)\r\n\t\t\t\t\tthrow new RuntimeException(\"Invalid application form\");\r\n\t\t\t\tif(control == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(loader == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(form_images_local == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(contextMenus == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(startControlID == null)\r\n\t\t\t\t\tthrow new RuntimeException(\"Invalid startControlID\");\r\n\t\t\t\tif(designSize == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(runtimeSize == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(startTabIndex == null)\r\n\t\t\t\t\tthrow new RuntimeException(\"Invalid startTabIndex\");\r\n\t\t\r\n\t\t\r\n\t\t\t\t// Label Controls\r\n\t\t\t\tRuntimeAnchoring anchoringHelper1 = new RuntimeAnchoring(designSize, runtimeSize, 424, 16, 77, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1000), new Integer(anchoringHelper1.getX()), new Integer(anchoringHelper1.getY()), new Integer(anchoringHelper1.getWidth()), new Integer(anchoringHelper1.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Description :\", new Integer(1), null, new Integer(0)}));\r\n\t\t\t\tRuntimeAnchoring anchoringHelper2 = new RuntimeAnchoring(designSize, runtimeSize, 16, 96, 45, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1001), new Integer(anchoringHelper2.getX()), new Integer(anchoringHelper2.getY()), new Integer(anchoringHelper2.getWidth()), new Integer(anchoringHelper2.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Detail :\", new Integer(1), null, new Integer(0)}));\r\n\t\t\t\tRuntimeAnchoring anchoringHelper3 = new RuntimeAnchoring(designSize, runtimeSize, 16, 56, 46, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1002), new Integer(anchoringHelper3.getX()), new Integer(anchoringHelper3.getY()), new Integer(anchoringHelper3.getWidth()), new Integer(anchoringHelper3.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Group :\", new Integer(1), null, new Integer(0)}));\r\n\t\t\t\tRuntimeAnchoring anchoringHelper4 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1003), new Integer(anchoringHelper4.getX()), new Integer(anchoringHelper4.getY()), new Integer(anchoringHelper4.getWidth()), new Integer(anchoringHelper4.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Provider :\", new Integer(1), null, new Integer(0)}));\r\n\t\t\r\n\t\t\t\t// TextBox Controls\r\n\t\t\t\tRuntimeAnchoring anchoringHelper5 = new RuntimeAnchoring(designSize, runtimeSize, 360, 96, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tsuper.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1004), new Integer(anchoringHelper5.getX()), new Integer(anchoringHelper5.getY()), new Integer(anchoringHelper5.getWidth()), new Integer(anchoringHelper5.getHeight()), new Integer(startTabIndex.intValue() + 14), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, \"\", \"\"}));\r\n\t\t\t\tRuntimeAnchoring anchoringHelper6 = new RuntimeAnchoring(designSize, runtimeSize, 360, 56, 40, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tsuper.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1005), new Integer(anchoringHelper6.getX()), new Integer(anchoringHelper6.getY()), new Integer(anchoringHelper6.getWidth()), new Integer(anchoringHelper6.getHeight()), new Integer(startTabIndex.intValue() + 12), ControlState.DISABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFT,Boolean.FALSE, new Integer(0), Boolean.FALSE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, \"\", \"\"}));\r\n\t\t\t\tRuntimeAnchoring anchoringHelper7 = new RuntimeAnchoring(designSize, runtimeSize, 424, 40, 368, 112, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);\r\n\t\t\t\tsuper.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1006), new Integer(anchoringHelper7.getX()), new Integer(anchoringHelper7.getY()), new Integer(anchoringHelper7.getWidth()), new Integer(anchoringHelper7.getHeight()), new Integer(startTabIndex.intValue() + 15), ControlState.DISABLED, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,Boolean.TRUE, new Integer(255), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, \"\", \"\"}));\r\n\t\t\r\n\t\t\t\t// ComboBox Controls\r\n\t\t\t\tRuntimeAnchoring anchoringHelper8 = new RuntimeAnchoring(designSize, runtimeSize, 88, 96, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tComboBox m_cmbDetailTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1007), new Integer(anchoringHelper8.getX()), new Integer(anchoringHelper8.getY()), new Integer(anchoringHelper8.getWidth()), new Integer(anchoringHelper8.getHeight()), new Integer(startTabIndex.intValue() + 13), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});\r\n\t\t\t\taddControl(m_cmbDetailTemp);\r\n\t\t\t\tcmbDetailComboBox cmbDetail = (cmbDetailComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbDetailComboBox.class, m_cmbDetailTemp);\r\n\t\t\t\tsuper.addComboBox(cmbDetail);\r\n\t\t\t\tRuntimeAnchoring anchoringHelper9 = new RuntimeAnchoring(designSize, runtimeSize, 88, 56, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tComboBox m_cmbGroupTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1008), new Integer(anchoringHelper9.getX()), new Integer(anchoringHelper9.getY()), new Integer(anchoringHelper9.getWidth()), new Integer(anchoringHelper9.getHeight()), new Integer(startTabIndex.intValue() + 11), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});\r\n\t\t\t\taddControl(m_cmbGroupTemp);\r\n\t\t\t\tcmbGroupComboBox cmbGroup = (cmbGroupComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbGroupComboBox.class, m_cmbGroupTemp);\r\n\t\t\t\tsuper.addComboBox(cmbGroup);\r\n\t\t\t\tRuntimeAnchoring anchoringHelper10 = new RuntimeAnchoring(designSize, runtimeSize, 88, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tComboBox m_cmbProviderTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1009), new Integer(anchoringHelper10.getX()), new Integer(anchoringHelper10.getY()), new Integer(anchoringHelper10.getWidth()), new Integer(anchoringHelper10.getHeight()), new Integer(startTabIndex.intValue() + 10), ControlState.DISABLED, ControlState.UNKNOWN,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.TRUE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});\r\n\t\t\t\taddControl(m_cmbProviderTemp);\r\n\t\t\t\tcmbProviderComboBox cmbProvider = (cmbProviderComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbProviderComboBox.class, m_cmbProviderTemp);\r\n\t\t\t\tsuper.addComboBox(cmbProvider);\r\n\t\t\t}\r\n\r\n\t\t\tpublic TextBox txtDetail()\r\n\t\t\t{\r\n\t\t\t\treturn (TextBox)super.getControl(4);\r\n\t\t\t}\r\n\t\t\tpublic TextBox txtGroup()\r\n\t\t\t{\r\n\t\t\t\treturn (TextBox)super.getControl(5);\r\n\t\t\t}\r\n\t\t\tpublic TextBox txtDescription()\r\n\t\t\t{\r\n\t\t\t\treturn (TextBox)super.getControl(6);\r\n\t\t\t}\r\n\t\t\tpublic cmbDetailComboBox cmbDetail()\r\n\t\t\t{\r\n\t\t\t\treturn (cmbDetailComboBox)super.getComboBox(0);\r\n\t\t\t}\r\n\t\t\tpublic cmbGroupComboBox cmbGroup()\r\n\t\t\t{\r\n\t\t\t\treturn (cmbGroupComboBox)super.getComboBox(1);\r\n\t\t\t}\r\n\t\t\tpublic cmbProviderComboBox cmbProvider()\r\n\t\t\t{\r\n\t\t\t\treturn (cmbProviderComboBox)super.getComboBox(2);\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic static class tabEventMappingSpecialtyContainer extends LayerBridge\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic static class cmbSpecialtyComboBox extends ComboBoxBridge\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\t\r\n\t\t\t\tpublic void newRow(ims.core.vo.lookups.Specialty value, String text)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t\t\t}\r\n\t\t\t\tpublic boolean removeRow(ims.core.vo.lookups.Specialty value)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.control.removeRow(value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.core.vo.lookups.Specialty getValue()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (ims.core.vo.lookups.Specialty)super.control.getValue();\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setValue(ims.core.vo.lookups.Specialty value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.control.setValue(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpublic static class grdSpecialtyRow extends GridRowBridge\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\t\r\n\t\t\t\tprotected grdSpecialtyRow(GridRow row)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper(row);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void showOpened(int column)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.showOpened(column);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setCoImgReadOnly(boolean value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.setReadOnly(0, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic boolean isCoImgReadOnly()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.row.isReadOnly(0);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void showCoImgOpened()\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.showOpened(0);\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.framework.utils.Image getCoImg()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (ims.framework.utils.Image)super.row.get(0);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setCoImg(ims.framework.utils.Image value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.set(0, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setCellCoImgTooltip(String value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.setTooltip(0, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setColConsultantReadOnly(boolean value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.setReadOnly(1, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic boolean isColConsultantReadOnly()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.row.isReadOnly(1);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void showColConsultantOpened()\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.showOpened(1);\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.framework.controls.GridMutableComboBox getColConsultant()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new ims.framework.controls.GridMutableComboBox(super.row, 1);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setCellColConsultantTooltip(String value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.setTooltip(1, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setColClinicCodeReadOnly(boolean value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.setReadOnly(2, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic boolean isColClinicCodeReadOnly()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.row.isReadOnly(2);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void showColClinicCodeOpened()\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.showOpened(2);\r\n\t\t\t\t}\r\n\t\t\t\tpublic String getColClinicCode()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (String)super.row.get(2);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setColClinicCode(String value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.set(2, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setCellColClinicCodeTooltip(String value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.setTooltip(2, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.pathways.vo.ExternalEventMappingVo getValue()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (ims.pathways.vo.ExternalEventMappingVo)super.row.getValue();\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setValue(ims.pathways.vo.ExternalEventMappingVo value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.row.setValue(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpublic static class grdSpecialtyRowCollection extends GridRowCollectionBridge\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\t\r\n\t\t\t\tprivate grdSpecialtyRowCollection(GridRowCollection collection)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper(collection);\r\n\t\t\t\t}\r\n\t\t\t\tpublic grdSpecialtyRow get(int index)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new grdSpecialtyRow(super.collection.get(index));\r\n\t\t\t\t}\r\n\t\t\t\tpublic grdSpecialtyRow newRow()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new grdSpecialtyRow(super.collection.newRow());\r\n\t\t\t\t}\r\n\t\t\t\tpublic grdSpecialtyRow newRow(boolean autoSelect)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new grdSpecialtyRow(super.collection.newRow(autoSelect));\r\n\t\t\t\t}\r\n\t\t\t\tpublic grdSpecialtyRow newRowAt(int index)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new grdSpecialtyRow(super.collection.newRowAt(index));\r\n\t\t\t\t}\r\n\t\t\t\tpublic grdSpecialtyRow newRowAt(int index, boolean autoSelect)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new grdSpecialtyRow(super.collection.newRowAt(index, autoSelect));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpublic static class grdSpecialtyGrid extends GridBridge\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\t\r\n\t\t\t\tprivate void addImageColumn(String caption, int captionAlignment, int alignment, int width, boolean canGrow, int sortOrder)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.grid.addImageColumn(caption, captionAlignment, alignment, width, canGrow, sortOrder);\r\n\t\t\t\t}\r\n\t\t\t\tprivate void addMutableComboBoxColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean canBeEmpty, boolean autoPostBack, boolean bold, boolean searchable, boolean canGrow, int maxDropDownItems)\r\n\t\t\t\t{\r\n\t\t\t\t\t super.grid.addMutableComboBoxColumn(caption, captionAlignment, alignment, width, readOnly, canBeEmpty, autoPostBack, bold, searchable, canGrow, maxDropDownItems);\r\n\t\t\t\t}\r\n\t\t\t\tprivate void addStringColumn(String caption, int captionAlignment, int alignment, int width, boolean readOnly, boolean bold, int sortOrder, int maxLength, boolean canGrow, ims.framework.enumerations.CharacterCasing casing)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.grid.addStringColumn(caption, captionAlignment, alignment, width, readOnly, bold, sortOrder, maxLength, canGrow, casing);\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.pathways.vo.ExternalEventMappingVoCollection getValues()\r\n\t\t\t\t{\r\n\t\t\t\t\tims.pathways.vo.ExternalEventMappingVoCollection listOfValues = new ims.pathways.vo.ExternalEventMappingVoCollection();\r\n\t\t\t\t\tfor(int x = 0; x < this.getRows().size(); x++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlistOfValues.add(this.getRows().get(x).getValue());\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn listOfValues;\r\n\t\t\t\t}\r\n\t\t\t\tpublic ims.pathways.vo.ExternalEventMappingVo getValue()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn (ims.pathways.vo.ExternalEventMappingVo)super.grid.getValue();\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setValue(ims.pathways.vo.ExternalEventMappingVo value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.grid.setValue(value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic grdSpecialtyRow getSelectedRow()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.grid.getSelectedRow() == null ? null : new grdSpecialtyRow(super.grid.getSelectedRow());\r\n\t\t\t\t}\r\n\t\t\t\tpublic int getSelectedRowIndex()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.grid.getSelectedRowIndex();\r\n\t\t\t\t}\r\n\t\t\t\tpublic grdSpecialtyRowCollection getRows()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn new grdSpecialtyRowCollection(super.grid.getRows());\r\n\t\t\t\t}\r\n\t\t\t\tpublic grdSpecialtyRow getRowByValue(ims.pathways.vo.ExternalEventMappingVo value)\r\n\t\t\t\t{\r\n\t\t\t\t\tGridRow row = super.grid.getRowByValue(value);\r\n\t\t\t\t\treturn row == null?null:new grdSpecialtyRow(row);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setCoImgHeaderTooltip(String value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.grid.setColumnHeaderTooltip(0, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic String getCoImgHeaderTooltip()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.grid.getColumnHeaderTooltip(0);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setColConsultantHeaderTooltip(String value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.grid.setColumnHeaderTooltip(1, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic String getColConsultantHeaderTooltip()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.grid.getColumnHeaderTooltip(1);\r\n\t\t\t\t}\r\n\t\t\t\tpublic void setColClinicCodeHeaderTooltip(String value)\r\n\t\t\t\t{\r\n\t\t\t\t\tsuper.grid.setColumnHeaderTooltip(2, value);\r\n\t\t\t\t}\r\n\t\t\t\tpublic String getColClinicCodeHeaderTooltip()\r\n\t\t\t\t{\r\n\t\t\t\t\treturn super.grid.getColumnHeaderTooltip(2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tpublic void setTabActivatedEvent(ims.framework.delegates.TabActivated delegate)\r\n\t\t\t{\r\n\t\t\t\tsuper.container.setTabActivatedEvent(delegate);\r\n\t\t\t}\r\n\t\t\tprotected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception\r\n\t\t\t{\r\n\t\t\t\tif(form == null)\r\n\t\t\t\t\tthrow new RuntimeException(\"Invalid form\");\r\n\t\t\t\tif(appForm == null)\r\n\t\t\t\t\tthrow new RuntimeException(\"Invalid application form\");\r\n\t\t\t\tif(control == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(loader == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(form_images_local == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(contextMenus == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(startControlID == null)\r\n\t\t\t\t\tthrow new RuntimeException(\"Invalid startControlID\");\r\n\t\t\t\tif(designSize == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(runtimeSize == null); // this is to avoid eclipse warning only.\r\n\t\t\t\tif(startTabIndex == null)\r\n\t\t\t\t\tthrow new RuntimeException(\"Invalid startTabIndex\");\r\n\t\t\r\n\t\t\r\n\t\t\t\t// Label Controls\r\n\t\t\t\tRuntimeAnchoring anchoringHelper11 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 63, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1010), new Integer(anchoringHelper11.getX()), new Integer(anchoringHelper11.getY()), new Integer(anchoringHelper11.getWidth()), new Integer(anchoringHelper11.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Specialty :\", new Integer(1), null, new Integer(0)}));\r\n\t\t\r\n\t\t\t\t// ComboBox Controls\r\n\t\t\t\tRuntimeAnchoring anchoringHelper12 = new RuntimeAnchoring(designSize, runtimeSize, 88, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\t\t\tComboBox m_cmbSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1011), new Integer(anchoringHelper12.getX()), new Integer(anchoringHelper12.getY()), new Integer(anchoringHelper12.getWidth()), new Integer(anchoringHelper12.getHeight()), new Integer(startTabIndex.intValue() + 16), ControlState.DISABLED, ControlState.ENABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.TRUE, new Integer(-1)});\r\n\t\t\t\taddControl(m_cmbSpecialtyTemp);\r\n\t\t\t\tcmbSpecialtyComboBox cmbSpecialty = (cmbSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSpecialtyComboBox.class, m_cmbSpecialtyTemp);\r\n\t\t\t\tsuper.addComboBox(cmbSpecialty);\r\n\t\t\r\n\t\t\t\t// Grid Controls\r\n\t\t\t\tRuntimeAnchoring anchoringHelper13 = new RuntimeAnchoring(designSize, runtimeSize, 16, 48, 384, 120, ims.framework.enumerations.ControlAnchoring.ALL);\r\n\t\t\t\tGrid m_grdSpecialtyTemp = (Grid)factory.getControl(Grid.class, new Object[] { control, new Integer(startControlID.intValue() + 1012), new Integer(anchoringHelper13.getX()), new Integer(anchoringHelper13.getY()), new Integer(anchoringHelper13.getWidth()), new Integer(anchoringHelper13.getHeight()), new Integer(startTabIndex.intValue() + 17), ControlState.READONLY, ControlState.EDITABLE, ims.framework.enumerations.ControlAnchoring.ALL,Boolean.TRUE, Boolean.FALSE, new Integer(24), Boolean.TRUE, contextMenus.Pathways.contextMenuExternalEventMappingsSpecialty, Boolean.FALSE, Boolean.FALSE, new Integer(0), null, Boolean.FALSE, Boolean.TRUE});\r\n\t\t\t\taddControl(m_grdSpecialtyTemp);\r\n\t\t\t\tgrdSpecialtyGrid grdSpecialty = (grdSpecialtyGrid)GridFlyweightFactory.getInstance().createGridBridge(grdSpecialtyGrid.class, m_grdSpecialtyTemp);\r\n\t\t\t\tgrdSpecialty.addImageColumn(\" \", 0, 0, 20, true, 0);\r\n\t\t\t\tgrdSpecialty.addMutableComboBoxColumn(\"Consultant\", 0, 0, 250, false, true, true, false, true, true, -1);\r\n\t\t\t\tgrdSpecialty.addStringColumn(\"Clinic Code\", 0, 0, -1, false, false, 0, 10, true, ims.framework.enumerations.CharacterCasing.NORMAL);\r\n\t\t\t\tsuper.addGrid(grdSpecialty);\r\n\t\t\t}\r\n\r\n\t\t\tpublic cmbSpecialtyComboBox cmbSpecialty()\r\n\t\t\t{\r\n\t\t\t\treturn (cmbSpecialtyComboBox)super.getComboBox(0);\r\n\t\t\t}\r\n\t\t\tpublic grdSpecialtyGrid grdSpecialty()\r\n\t\t\t{\r\n\t\t\t\treturn (grdSpecialtyGrid)super.getGrid(0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprotected void setContext(Form form, ims.framework.interfaces.IAppForm appForm, Control control, FormLoader loader, Images form_images_local, ContextMenus contextMenus, Integer startControlID, ims.framework.utils.SizeInfo designSize, ims.framework.utils.SizeInfo runtimeSize, Integer startTabIndex, boolean skipContextValidation) throws Exception\r\n\t\t{\r\n\t\t\tif(form == null)\r\n\t\t\t\tthrow new RuntimeException(\"Invalid form\");\r\n\t\t\tif(appForm == null)\r\n\t\t\t\tthrow new RuntimeException(\"Invalid application form\");\r\n\t\t\tif(control == null); // this is to avoid eclipse warning only.\r\n\t\t\tif(loader == null); // this is to avoid eclipse warning only.\r\n\t\t\tif(form_images_local == null); // this is to avoid eclipse warning only.\r\n\t\t\tif(contextMenus == null); // this is to avoid eclipse warning only.\r\n\t\t\tif(startControlID == null)\r\n\t\t\t\tthrow new RuntimeException(\"Invalid startControlID\");\r\n\t\t\tif(designSize == null); // this is to avoid eclipse warning only.\r\n\t\t\tif(runtimeSize == null); // this is to avoid eclipse warning only.\r\n\t\t\tif(startTabIndex == null)\r\n\t\t\t\tthrow new RuntimeException(\"Invalid startTabIndex\");\r\n\t\t\tRuntimeAnchoring anchoringHelper14 = new RuntimeAnchoring(designSize, runtimeSize, 16, 376, 816, 200, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);\r\n\t\t\tContainer m_tabEventMappingDetails = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1013), new Integer(anchoringHelper14.getX()), new Integer(anchoringHelper14.getY()), new Integer(anchoringHelper14.getWidth()), new Integer(anchoringHelper14.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,\"Event Mapping Details\", new Integer(startControlID.intValue() + 0), new Boolean(true), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});\r\n\t\t\ttabEventMappingDetailsContainer m_tabEventMappingDetailsContainer = (tabEventMappingDetailsContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEventMappingDetailsContainer.class, m_tabEventMappingDetails, factory);\r\n\t\t\tsuper.addContainer(m_tabEventMappingDetails, m_tabEventMappingDetailsContainer);\r\n\t\t\tims.framework.utils.SizeInfo m_tabEventMappingDetailsDesignSize = new ims.framework.utils.SizeInfo(816, 200);\r\n\t\t\tims.framework.utils.SizeInfo m_tabEventMappingDetailsRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper14.getWidth(), anchoringHelper14.getHeight());\r\n\t\t\tm_tabEventMappingDetailsContainer.setContext(form, appForm, m_tabEventMappingDetails, loader, form_images_local, contextMenus, startControlID, m_tabEventMappingDetailsDesignSize, m_tabEventMappingDetailsRuntimeSize, startTabIndex, skipContextValidation);\r\n\t\t\tRuntimeAnchoring anchoringHelper15 = new RuntimeAnchoring(designSize, runtimeSize, 16, 376, 816, 200, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT);\r\n\t\t\tContainer m_tabEventMappingSpecialty = (Container)factory.getControl(Container.class, new Object[] { control, new Integer(startControlID.intValue() + 1014), new Integer(anchoringHelper15.getX()), new Integer(anchoringHelper15.getY()), new Integer(anchoringHelper15.getWidth()), new Integer(anchoringHelper15.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFTRIGHT,\"Event Mapping Specialty\", new Integer(startControlID.intValue() + 0), new Boolean(false), new Boolean(false), new Boolean(true), new Boolean(true), new Boolean(false), new Boolean(false)});\r\n\t\t\ttabEventMappingSpecialtyContainer m_tabEventMappingSpecialtyContainer = (tabEventMappingSpecialtyContainer)LayerBridgeFlyweightFactory.getInstance().createLayerBridge(tabEventMappingSpecialtyContainer.class, m_tabEventMappingSpecialty, factory);\r\n\t\t\tsuper.addContainer(m_tabEventMappingSpecialty, m_tabEventMappingSpecialtyContainer);\r\n\t\t\tims.framework.utils.SizeInfo m_tabEventMappingSpecialtyDesignSize = new ims.framework.utils.SizeInfo(816, 200);\r\n\t\t\tims.framework.utils.SizeInfo m_tabEventMappingSpecialtyRuntimeSize = new ims.framework.utils.SizeInfo(anchoringHelper15.getWidth(), anchoringHelper15.getHeight());\r\n\t\t\tm_tabEventMappingSpecialtyContainer.setContext(form, appForm, m_tabEventMappingSpecialty, loader, form_images_local, contextMenus, startControlID, m_tabEventMappingSpecialtyDesignSize, m_tabEventMappingSpecialtyRuntimeSize, startTabIndex, skipContextValidation);\r\n\t\t}\r\n\t\tpublic void hide()\r\n\t\t{\r\n\t\t\ttabEventMappingDetails().setVisible(false);\r\n\t\t\ttabEventMappingSpecialty().setVisible(false);\r\n\t\t}\r\n\t\tpublic void settabEventMappingDetailsEnabled(boolean value)\r\n\t\t{\r\n\t\t\ttabEventMappingDetails().setEnabled(value);\r\n\t\t}\r\n\t\tpublic void settabEventMappingSpecialtyEnabled(boolean value)\r\n\t\t{\r\n\t\t\ttabEventMappingSpecialty().setEnabled(value);\r\n\t\t}\r\n\t\tpublic void showtabEventMappingDetails()\r\n\t\t{\r\n\t\t\ttabEventMappingSpecialty().setVisible(false);\r\n\t\t\ttabEventMappingDetails().setVisible(true);\r\n\t\t}\r\n\t\tpublic void showtabEventMappingSpecialty()\r\n\t\t{\r\n\t\t\ttabEventMappingDetails().setVisible(false);\r\n\t\t\ttabEventMappingSpecialty().setVisible(true);\r\n\t\t}\r\n\r\n\t\tpublic tabEventMappingDetailsContainer tabEventMappingDetails()\r\n\t\t{\r\n\t\t\treturn (tabEventMappingDetailsContainer)super.layers.get(0);\r\n\t\t}\r\n\t\tpublic tabEventMappingSpecialtyContainer tabEventMappingSpecialty()\r\n\t\t{\r\n\t\t\treturn (tabEventMappingSpecialtyContainer)super.layers.get(1);\r\n\t\t}\r\n\t}\r\n\tpublic static class cmbSearchProviderComboBox extends ComboBoxBridge\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\r\n\t\tpublic void newRow(ims.ocrr.vo.ProviderSystemVo value, String text)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text);\r\n\t\t}\r\n\t\tpublic void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Image image)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t}\r\n\t\tpublic void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t}\r\n\t\tpublic void newRow(ims.ocrr.vo.ProviderSystemVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t}\r\n\t\tpublic boolean removeRow(ims.ocrr.vo.ProviderSystemVo value)\r\n\t\t{\r\n\t\t\treturn super.control.removeRow(value);\r\n\t\t}\r\n\t\tpublic ims.ocrr.vo.ProviderSystemVo getValue()\r\n\t\t{\r\n\t\t\treturn (ims.ocrr.vo.ProviderSystemVo)super.control.getValue();\r\n\t\t}\r\n\t\tpublic void setValue(ims.ocrr.vo.ProviderSystemVo value)\r\n\t\t{\r\n\t\t\tsuper.control.setValue(value);\r\n\t\t}\r\n\t}\r\n\tpublic static class cmbSearchSpecialtyComboBox extends ComboBoxBridge\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\r\n\t\tpublic void newRow(ims.core.vo.lookups.Specialty value, String text)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text);\r\n\t\t}\r\n\t\tpublic void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t}\r\n\t\tpublic void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t}\r\n\t\tpublic void newRow(ims.core.vo.lookups.Specialty value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t}\r\n\t\tpublic boolean removeRow(ims.core.vo.lookups.Specialty value)\r\n\t\t{\r\n\t\t\treturn super.control.removeRow(value);\r\n\t\t}\r\n\t\tpublic ims.core.vo.lookups.Specialty getValue()\r\n\t\t{\r\n\t\t\treturn (ims.core.vo.lookups.Specialty)super.control.getValue();\r\n\t\t}\r\n\t\tpublic void setValue(ims.core.vo.lookups.Specialty value)\r\n\t\t{\r\n\t\t\tsuper.control.setValue(value);\r\n\t\t}\r\n\t}\r\n\tpublic static class cmbSearchDetailComboBox extends ComboBoxBridge\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\r\n\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text);\r\n\t\t}\r\n\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Image image)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t}\r\n\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t}\r\n\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysDetail value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t}\r\n\t\tpublic boolean removeRow(ims.pathways.vo.lookups.PathwaysDetail value)\r\n\t\t{\r\n\t\t\treturn super.control.removeRow(value);\r\n\t\t}\r\n\t\tpublic ims.pathways.vo.lookups.PathwaysDetail getValue()\r\n\t\t{\r\n\t\t\treturn (ims.pathways.vo.lookups.PathwaysDetail)super.control.getValue();\r\n\t\t}\r\n\t\tpublic void setValue(ims.pathways.vo.lookups.PathwaysDetail value)\r\n\t\t{\r\n\t\t\tsuper.control.setValue(value);\r\n\t\t}\r\n\t}\r\n\tpublic static class cmbSearchGroupComboBox extends ComboBoxBridge\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\r\n\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text);\r\n\t\t}\r\n\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Image image)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t}\r\n\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t}\r\n\t\tpublic void newRow(ims.pathways.vo.lookups.PathwaysGroup value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t}\r\n\t\tpublic boolean removeRow(ims.pathways.vo.lookups.PathwaysGroup value)\r\n\t\t{\r\n\t\t\treturn super.control.removeRow(value);\r\n\t\t}\r\n\t\tpublic ims.pathways.vo.lookups.PathwaysGroup getValue()\r\n\t\t{\r\n\t\t\treturn (ims.pathways.vo.lookups.PathwaysGroup)super.control.getValue();\r\n\t\t}\r\n\t\tpublic void setValue(ims.pathways.vo.lookups.PathwaysGroup value)\r\n\t\t{\r\n\t\t\tsuper.control.setValue(value);\r\n\t\t}\r\n\t}\r\n\tpublic static class qmbSearchConsultantComboBox extends ComboBoxBridge\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\r\n\t\tpublic void newRow(ims.core.vo.MedicLiteVo value, String text)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text);\r\n\t\t}\r\n\t\tpublic void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Image image)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image);\r\n\t\t}\r\n\t\tpublic void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, textColor);\r\n\t\t}\r\n\t\tpublic void newRow(ims.core.vo.MedicLiteVo value, String text, ims.framework.utils.Image image, ims.framework.utils.Color textColor)\r\n\t\t{\r\n\t\t\tsuper.control.newRow(value, text, image, textColor);\r\n\t\t}\r\n\t\tpublic boolean removeRow(ims.core.vo.MedicLiteVo value)\r\n\t\t{\r\n\t\t\treturn super.control.removeRow(value);\r\n\t\t}\r\n\t\tpublic ims.core.vo.MedicLiteVo getValue()\r\n\t\t{\r\n\t\t\treturn (ims.core.vo.MedicLiteVo)super.control.getValue();\r\n\t\t}\r\n\t\tpublic void setValue(ims.core.vo.MedicLiteVo value)\r\n\t\t{\r\n\t\t\tsuper.control.setValue(value);\r\n\t\t}\r\n\t\tpublic void setEditedText(String text)\r\n\t\t{\r\n\t\t\tsuper.control.setEditedText(text);\r\n\t\t}\r\n\t\tpublic String getEditedText()\r\n\t\t{\r\n\t\t\treturn super.control.getEditedText();\r\n\t\t}\r\n\t}\r\n\tprivate void validateContext(ims.framework.Context context)\r\n\t{\r\n\t\tif(context == null)\r\n\t\t\treturn;\r\n\t}\r\n\tpublic boolean supportsRecordedInError()\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tpublic ims.vo.ValueObject getRecordedInErrorVo()\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\tprotected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context) throws Exception\r\n\t{\r\n\t\tsetContext(loader, form, appForm, factory, context, Boolean.FALSE, new Integer(0), null, null, new Integer(0));\r\n\t}\r\n\tprotected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, Context context, Boolean skipContextValidation) throws Exception\r\n\t{\r\n\t\tsetContext(loader, form, appForm, factory, context, skipContextValidation, new Integer(0), null, null, new Integer(0));\r\n\t}\r\n\tprotected void setContext(FormLoader loader, Form form, ims.framework.interfaces.IAppForm appForm, UIFactory factory, ims.framework.Context context, Boolean skipContextValidation, Integer startControlID, ims.framework.utils.SizeInfo runtimeSize, ims.framework.Control control, Integer startTabIndex) throws Exception\r\n\t{\r\n\t\tif(loader == null); // this is to avoid eclipse warning only.\r\n\t\tif(factory == null); // this is to avoid eclipse warning only.\r\n\t\tif(runtimeSize == null); // this is to avoid eclipse warning only.\r\n\t\tif(appForm == null)\r\n\t\t\tthrow new RuntimeException(\"Invalid application form\");\r\n\t\tif(startControlID == null)\r\n\t\t\tthrow new RuntimeException(\"Invalid startControlID\");\r\n\t\tif(control == null); // this is to avoid eclipse warning only.\r\n\t\tif(startTabIndex == null)\r\n\t\t\tthrow new RuntimeException(\"Invalid startTabIndex\");\r\n\t\tthis.context = context;\r\n\t\tthis.componentIdentifier = startControlID.toString();\r\n\t\tthis.formInfo = form.getFormInfo();\r\n\t\r\n\t\tif(skipContextValidation == null || !skipContextValidation.booleanValue())\r\n\t\t{\r\n\t\t\tvalidateContext(context);\r\n\t\t}\r\n\t\r\n\t\tsuper.setContext(form);\r\n\r\n\t\tform.setDarkHeight(95);\r\n\t\tims.framework.utils.SizeInfo designSize = new ims.framework.utils.SizeInfo(848, 632);\r\n\t\tif(runtimeSize == null)\r\n\t\t\truntimeSize = designSize;\r\n\t\tform.setWidth(runtimeSize.getWidth());\r\n\t\tform.setHeight(runtimeSize.getHeight());\r\n\t\tsuper.setImageReferences(ImageReferencesFlyweightFactory.getInstance().create(Images.class));\r\n\t\tsuper.setLocalContext(new LocalContext(context, form.getFormInfo(), componentIdentifier));\r\n\r\n\t\t// Context Menus\r\n\t\tcontextMenus = new ContextMenus();\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsSpecialty = factory.createMenu(startControlID.intValue() + 1);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsSpecialtyAddItem = factory.createMenuItem(startControlID.intValue() + 1, \"Add\", true, false, new Integer(102179), true, false);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsSpecialty.add(contextMenus.Pathways.contextMenuExternalEventMappingsSpecialtyAddItem);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsSpecialtyRemoveItem = factory.createMenuItem(startControlID.intValue() + 2, \"Remove\", true, false, new Integer(102300), true, false);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsSpecialty.add(contextMenus.Pathways.contextMenuExternalEventMappingsSpecialtyRemoveItem);\r\n\t\tform.registerMenu(contextMenus.Pathways.contextMenuExternalEventMappingsSpecialty);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappings = factory.createMenu(startControlID.intValue() + 2);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsNewItem = factory.createMenuItem(startControlID.intValue() + 3, \"New Provider\", true, false, new Integer(102179), true, false);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsNewItem);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsEditItem = factory.createMenuItem(startControlID.intValue() + 4, \"Edit Provider\", true, false, new Integer(102150), true, false);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsEditItem);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsAddItem = factory.createMenuItem(startControlID.intValue() + 5, \"Add Specialty\", true, false, new Integer(103110), true, false);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsAddItem);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsEditSpecialtyItem = factory.createMenuItem(startControlID.intValue() + 6, \"Edit Specialty\", true, false, new Integer(102150), true, false);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsEditSpecialtyItem);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsAddConsultantItem = factory.createMenuItem(startControlID.intValue() + 7, \"Add Consultant\", true, false, new Integer(103140), true, false);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsAddConsultantItem);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappingsEditConsultantItem = factory.createMenuItem(startControlID.intValue() + 8, \"Edit Consultant\", true, false, new Integer(102150), true, false);\r\n\t\tcontextMenus.Pathways.contextMenuExternalEventMappings.add(contextMenus.Pathways.contextMenuExternalEventMappingsEditConsultantItem);\r\n\t\tform.registerMenu(contextMenus.Pathways.contextMenuExternalEventMappings);\r\n\r\n\r\n\t\t// Layer Clasess\r\n\t\tlyrDetailsLayer m_lyrDetailsLayer = (lyrDetailsLayer)LayerFlyweightFactory.getInstance().createLayer(lyrDetailsLayer.class, this, factory);\r\n\t\tsuper.addLayer(m_lyrDetailsLayer);\r\n\t\tm_lyrDetailsLayer.setContext(form, appForm, control, loader, this.getImages(), contextMenus, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation);\r\n\r\n\t\t// Label Controls\r\n\t\tRuntimeAnchoring anchoringHelper16 = new RuntimeAnchoring(designSize, runtimeSize, 392, 64, 101, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1015), new Integer(anchoringHelper16.getX()), new Integer(anchoringHelper16.getY()), new Integer(anchoringHelper16.getWidth()), new Integer(anchoringHelper16.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Provider System:\", new Integer(1), null, new Integer(0)}));\r\n\t\tRuntimeAnchoring anchoringHelper17 = new RuntimeAnchoring(designSize, runtimeSize, 16, 40, 42, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1016), new Integer(anchoringHelper17.getX()), new Integer(anchoringHelper17.getY()), new Integer(anchoringHelper17.getWidth()), new Integer(anchoringHelper17.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Detail:\", new Integer(1), null, new Integer(0)}));\r\n\t\tRuntimeAnchoring anchoringHelper18 = new RuntimeAnchoring(designSize, runtimeSize, 392, 40, 70, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1017), new Integer(anchoringHelper18.getX()), new Integer(anchoringHelper18.getY()), new Integer(anchoringHelper18.getWidth()), new Integer(anchoringHelper18.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Consultant:\", new Integer(1), null, new Integer(0)}));\r\n\t\tRuntimeAnchoring anchoringHelper19 = new RuntimeAnchoring(designSize, runtimeSize, 392, 16, 71, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1018), new Integer(anchoringHelper19.getX()), new Integer(anchoringHelper19.getY()), new Integer(anchoringHelper19.getWidth()), new Integer(anchoringHelper19.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Clinic Code:\", new Integer(1), null, new Integer(0)}));\r\n\t\tRuntimeAnchoring anchoringHelper20 = new RuntimeAnchoring(designSize, runtimeSize, 16, 16, 43, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1019), new Integer(anchoringHelper20.getX()), new Integer(anchoringHelper20.getY()), new Integer(anchoringHelper20.getWidth()), new Integer(anchoringHelper20.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Group:\", new Integer(1), null, new Integer(0)}));\r\n\t\tRuntimeAnchoring anchoringHelper21 = new RuntimeAnchoring(designSize, runtimeSize, 16, 64, 60, 17, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tsuper.addControl(factory.getControl(Label.class, new Object[] { control, new Integer(startControlID.intValue() + 1020), new Integer(anchoringHelper21.getX()), new Integer(anchoringHelper21.getY()), new Integer(anchoringHelper21.getWidth()), new Integer(anchoringHelper21.getHeight()), ControlState.UNKNOWN, ControlState.UNKNOWN, ims.framework.enumerations.ControlAnchoring.TOPLEFT, \"Specialty:\", new Integer(1), null, new Integer(0)}));\r\n\r\n\t\t// Button Controls\r\n\t\tRuntimeAnchoring anchoringHelper22 = new RuntimeAnchoring(designSize, runtimeSize, 16, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);\r\n\t\tsuper.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1021), new Integer(anchoringHelper22.getX()), new Integer(anchoringHelper22.getY()), new Integer(anchoringHelper22.getWidth()), new Integer(anchoringHelper22.getHeight()), new Integer(startTabIndex.intValue() + 18), ControlState.ENABLED, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, \"New\", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));\r\n\t\tRuntimeAnchoring anchoringHelper23 = new RuntimeAnchoring(designSize, runtimeSize, 96, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT);\r\n\t\tsuper.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1022), new Integer(anchoringHelper23.getX()), new Integer(anchoringHelper23.getY()), new Integer(anchoringHelper23.getWidth()), new Integer(anchoringHelper23.getHeight()), new Integer(startTabIndex.intValue() + 19), ControlState.UNKNOWN, ControlState.HIDDEN, ims.framework.enumerations.ControlAnchoring.BOTTOMLEFT, \"Edit\", Boolean.TRUE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));\r\n\t\tRuntimeAnchoring anchoringHelper24 = new RuntimeAnchoring(designSize, runtimeSize, 674, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);\r\n\t\tsuper.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1023), new Integer(anchoringHelper24.getX()), new Integer(anchoringHelper24.getY()), new Integer(anchoringHelper24.getWidth()), new Integer(anchoringHelper24.getHeight()), new Integer(startTabIndex.intValue() + 20), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, \"Save\", Boolean.FALSE, null, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));\r\n\t\tRuntimeAnchoring anchoringHelper25 = new RuntimeAnchoring(designSize, runtimeSize, 754, 592, 75, 23, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT);\r\n\t\tsuper.addControl(factory.getControl(Button.class, new Object[] { control, new Integer(startControlID.intValue() + 1024), new Integer(anchoringHelper25.getX()), new Integer(anchoringHelper25.getY()), new Integer(anchoringHelper25.getWidth()), new Integer(anchoringHelper25.getHeight()), new Integer(startTabIndex.intValue() + 21), ControlState.HIDDEN, ControlState.ENABLED, ims.framework.enumerations.ControlAnchoring.BOTTOMRIGHT, \"Cancel\", Boolean.FALSE, null, Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, ims.framework.utils.Color.Default, ims.framework.utils.Color.Default }));\r\n\r\n\t\t// TextBox Controls\r\n\t\tRuntimeAnchoring anchoringHelper26 = new RuntimeAnchoring(designSize, runtimeSize, 496, 16, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\r\n\t\tsuper.addControl(factory.getControl(TextBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1025), new Integer(anchoringHelper26.getX()), new Integer(anchoringHelper26.getY()), new Integer(anchoringHelper26.getWidth()), new Integer(anchoringHelper26.getHeight()), new Integer(startTabIndex.intValue() + 2), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.FALSE, new Integer(10), Boolean.TRUE, Boolean.FALSE, null, null, Boolean.FALSE, ims.framework.enumerations.CharacterCasing.NORMAL, ims.framework.enumerations.TextTrimming.NONE, \"\", \"\"}));\r\n\r\n\t\t// ComboBox Controls\r\n\t\tRuntimeAnchoring anchoringHelper27 = new RuntimeAnchoring(designSize, runtimeSize, 496, 64, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\r\n\t\tComboBox m_cmbSearchProviderTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1026), new Integer(anchoringHelper27.getX()), new Integer(anchoringHelper27.getY()), new Integer(anchoringHelper27.getWidth()), new Integer(anchoringHelper27.getHeight()), new Integer(startTabIndex.intValue() + 6), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});\r\n\t\taddControl(m_cmbSearchProviderTemp);\r\n\t\tcmbSearchProviderComboBox cmbSearchProvider = (cmbSearchProviderComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchProviderComboBox.class, m_cmbSearchProviderTemp);\r\n\t\tsuper.addComboBox(cmbSearchProvider);\r\n\t\tRuntimeAnchoring anchoringHelper28 = new RuntimeAnchoring(designSize, runtimeSize, 88, 64, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tComboBox m_cmbSearchSpecialtyTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1027), new Integer(anchoringHelper28.getX()), new Integer(anchoringHelper28.getY()), new Integer(anchoringHelper28.getWidth()), new Integer(anchoringHelper28.getHeight()), new Integer(startTabIndex.intValue() + 5), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});\r\n\t\taddControl(m_cmbSearchSpecialtyTemp);\r\n\t\tcmbSearchSpecialtyComboBox cmbSearchSpecialty = (cmbSearchSpecialtyComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchSpecialtyComboBox.class, m_cmbSearchSpecialtyTemp);\r\n\t\tsuper.addComboBox(cmbSearchSpecialty);\r\n\t\tRuntimeAnchoring anchoringHelper29 = new RuntimeAnchoring(designSize, runtimeSize, 88, 40, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tComboBox m_cmbSearchDetailTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1028), new Integer(anchoringHelper29.getX()), new Integer(anchoringHelper29.getY()), new Integer(anchoringHelper29.getWidth()), new Integer(anchoringHelper29.getHeight()), new Integer(startTabIndex.intValue() + 3), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});\r\n\t\taddControl(m_cmbSearchDetailTemp);\r\n\t\tcmbSearchDetailComboBox cmbSearchDetail = (cmbSearchDetailComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchDetailComboBox.class, m_cmbSearchDetailTemp);\r\n\t\tsuper.addComboBox(cmbSearchDetail);\r\n\t\tRuntimeAnchoring anchoringHelper30 = new RuntimeAnchoring(designSize, runtimeSize, 88, 16, 288, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFT);\r\n\t\tComboBox m_cmbSearchGroupTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1029), new Integer(anchoringHelper30.getX()), new Integer(anchoringHelper30.getY()), new Integer(anchoringHelper30.getWidth()), new Integer(anchoringHelper30.getHeight()), new Integer(startTabIndex.intValue() + 1), ControlState.ENABLED, ControlState.DISABLED,ims.framework.enumerations.ControlAnchoring.TOPLEFT ,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.FALSE, new Integer(1), null, Boolean.FALSE, new Integer(-1)});\r\n\t\taddControl(m_cmbSearchGroupTemp);\r\n\t\tcmbSearchGroupComboBox cmbSearchGroup = (cmbSearchGroupComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(cmbSearchGroupComboBox.class, m_cmbSearchGroupTemp);\r\n\t\tsuper.addComboBox(cmbSearchGroup);\r\n\r\n\t\t// Query ComboBox Controls\r\n\t\tRuntimeAnchoring anchoringHelper31 = new RuntimeAnchoring(designSize, runtimeSize, 496, 40, 256, 21, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT);\r\n\t\tComboBox m_qmbSearchConsultantTemp = (ComboBox)factory.getControl(ComboBox.class, new Object[] { control, new Integer(startControlID.intValue() + 1030), new Integer(anchoringHelper31.getX()), new Integer(anchoringHelper31.getY()), new Integer(anchoringHelper31.getWidth()), new Integer(anchoringHelper31.getHeight()), new Integer(startTabIndex.intValue() + 4), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPLEFTRIGHT,Boolean.TRUE, Boolean.FALSE, SortOrder.NONE, Boolean.TRUE, new Integer(1), null, Boolean.FALSE, new Integer(-1), Boolean.FALSE});\r\n\t\taddControl(m_qmbSearchConsultantTemp);\r\n\t\tqmbSearchConsultantComboBox qmbSearchConsultant = (qmbSearchConsultantComboBox)ComboBoxFlyweightFactory.getInstance().createComboBoxBridge(qmbSearchConsultantComboBox.class, m_qmbSearchConsultantTemp);\r\n\t\tsuper.addComboBox(qmbSearchConsultant);\r\n\r\n\t\t// Dynamic Grid Controls\r\n\t\tRuntimeAnchoring anchoringHelper32 = new RuntimeAnchoring(designSize, runtimeSize, 16, 104, 816, 256, ims.framework.enumerations.ControlAnchoring.ALL);\r\n\t\tsuper.addControl(factory.getControl(DynamicGrid.class, new Object[] { control, new Integer(startControlID.intValue() + 1031), new Integer(anchoringHelper32.getX()), new Integer(anchoringHelper32.getY()), new Integer(anchoringHelper32.getWidth()), new Integer(anchoringHelper32.getHeight()), new Integer(startTabIndex.intValue() + 9), ControlState.EDITABLE, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.ALL, contextMenus.Pathways.contextMenuExternalEventMappings, Boolean.FALSE, Boolean.TRUE, Boolean.TRUE}));\r\n\r\n\t\t// Image Buttons Controls\r\n\t\tRuntimeAnchoring anchoringHelper33 = new RuntimeAnchoring(designSize, runtimeSize, 802, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);\r\n\t\tsuper.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1032), new Integer(anchoringHelper33.getX()), new Integer(anchoringHelper33.getY()), new Integer(anchoringHelper33.getWidth()), new Integer(anchoringHelper33.getHeight()), new Integer(startTabIndex.intValue() + 8), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.ClearEnabled24, this.getImages().Core.ClearDisabled24, \"Clear\", Boolean.FALSE, Boolean.FALSE, Boolean.TRUE, Boolean.FALSE, null}));\r\n\t\tRuntimeAnchoring anchoringHelper34 = new RuntimeAnchoring(designSize, runtimeSize, 768, 12, 30, 30, ims.framework.enumerations.ControlAnchoring.TOPRIGHT);\r\n\t\tsuper.addControl(factory.getControl(ImageButton.class, new Object[] { control, new Integer(startControlID.intValue() + 1033), new Integer(anchoringHelper34.getX()), new Integer(anchoringHelper34.getY()), new Integer(anchoringHelper34.getWidth()), new Integer(anchoringHelper34.getHeight()), new Integer(startTabIndex.intValue() + 7), ControlState.ENABLED, ControlState.DISABLED, ims.framework.enumerations.ControlAnchoring.TOPRIGHT, this.getImages().Core.FindEnabled24, this.getImages().Core.FindDisabled24, \"Search\", Boolean.FALSE, Boolean.TRUE, Boolean.TRUE, Boolean.FALSE, null}));\r\n\t}\r\n\r\n\r\n\r\n\tpublic Images getImages()\r\n\t{\r\n\t\treturn (Images)super.getImageReferences();\r\n\t}\r\n\tpublic lyrDetailsLayer lyrDetails()\r\n\t{\r\n\t\treturn (lyrDetailsLayer)super.getLayer(0);\r\n\t}\r\n\tpublic Button btnNew()\r\n\t{\r\n\t\treturn (Button)super.getControl(8);\r\n\t}\r\n\tpublic Button btnEdit()\r\n\t{\r\n\t\treturn (Button)super.getControl(9);\r\n\t}\r\n\tpublic Button btnSave()\r\n\t{\r\n\t\treturn (Button)super.getControl(10);\r\n\t}\r\n\tpublic Button btnCancel()\r\n\t{\r\n\t\treturn (Button)super.getControl(11);\r\n\t}\r\n\tpublic TextBox txtSearchClinicCode()\r\n\t{\r\n\t\treturn (TextBox)super.getControl(12);\r\n\t}\r\n\tpublic cmbSearchProviderComboBox cmbSearchProvider()\r\n\t{\r\n\t\treturn (cmbSearchProviderComboBox)super.getComboBox(0);\r\n\t}\r\n\tpublic cmbSearchSpecialtyComboBox cmbSearchSpecialty()\r\n\t{\r\n\t\treturn (cmbSearchSpecialtyComboBox)super.getComboBox(1);\r\n\t}\r\n\tpublic cmbSearchDetailComboBox cmbSearchDetail()\r\n\t{\r\n\t\treturn (cmbSearchDetailComboBox)super.getComboBox(2);\r\n\t}\r\n\tpublic cmbSearchGroupComboBox cmbSearchGroup()\r\n\t{\r\n\t\treturn (cmbSearchGroupComboBox)super.getComboBox(3);\r\n\t}\r\n\tpublic qmbSearchConsultantComboBox qmbSearchConsultant()\r\n\t{\r\n\t\treturn (qmbSearchConsultantComboBox)super.getComboBox(4);\r\n\t}\r\n\tpublic DynamicGrid dyngrdList()\r\n\t{\r\n\t\treturn (DynamicGrid)super.getControl(18);\r\n\t}\r\n\tpublic ImageButton imbClear()\r\n\t{\r\n\t\treturn (ImageButton)super.getControl(19);\r\n\t}\r\n\tpublic ImageButton imbSearch()\r\n\t{\r\n\t\treturn (ImageButton)super.getControl(20);\r\n\t}\r\n\r\n\tpublic static class Images implements java.io.Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\tprivate final class ImageHelper extends ims.framework.utils.ImagePath\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\r\n\t\t\tprivate ImageHelper(int id, String path, Integer width, Integer height)\r\n\t\t\t{\r\n\t\t\t\tsuper(id, path, width, height);\r\n\t\t\t}\r\n\t\t}\r\n\t\tprivate Images()\r\n\t\t{\r\n\t\t\tCore = new CoreImages();\r\n\t\t\tOCRR = new OCRRImages();\r\n\t\t\tAdmin = new AdminImages();\r\n\t\t}\r\n\t\tpublic final class CoreImages implements java.io.Serializable\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tprivate CoreImages()\r\n\t\t\t{\r\n\t\t\t\tFindEnabled24 = new ImageHelper(102175, \"Images/Core/Find_24.png\", new Integer(24), new Integer(24));\r\n\t\t\t\tFindDisabled24 = new ImageHelper(102172, \"Images/Core/FindDisabled_24.png\", new Integer(24), new Integer(24));\r\n\t\t\t\tClearEnabled24 = new ImageHelper(102174, \"Images/Core/ClearEnabled_24.png\", new Integer(24), new Integer(24));\r\n\t\t\t\tClearDisabled24 = new ImageHelper(102173, \"Images/Core/ClearDisabled_24.png\", new Integer(24), new Integer(24));\r\n\t\t\t\tPerson = new ImageHelper(102200, \"Images/Core/User-Properties-4.gif\", new Integer(16), new Integer(16));\r\n\t\t\t\tTreeView = new ImageHelper(102206, \"Images/Core/Tree View.gif\", new Integer(16), new Integer(16));\r\n\t\t\t}\r\n\t\t\tpublic final ims.framework.utils.Image FindEnabled24;\r\n\t\t\tpublic final ims.framework.utils.Image FindDisabled24;\r\n\t\t\tpublic final ims.framework.utils.Image ClearEnabled24;\r\n\t\t\tpublic final ims.framework.utils.Image ClearDisabled24;\r\n\t\t\tpublic final ims.framework.utils.Image Person;\r\n\t\t\tpublic final ims.framework.utils.Image TreeView;\r\n\t\t}\r\n\t\tpublic final class OCRRImages implements java.io.Serializable\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tprivate OCRRImages()\r\n\t\t\t{\r\n\t\t\t\tProvider = new ImageHelper(116115, \"Images/OCRR/system_provider.png\", new Integer(16), new Integer(16));\r\n\t\t\t}\r\n\t\t\tpublic final ims.framework.utils.Image Provider;\r\n\t\t}\r\n\t\tpublic final class AdminImages implements java.io.Serializable\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tprivate AdminImages()\r\n\t\t\t{\r\n\t\t\t\tMemberOfStaff = new ImageHelper(103133, \"Images/Admin/User-Offline.gif\", new Integer(16), new Integer(16));\r\n\t\t\t}\r\n\t\t\tpublic final ims.framework.utils.Image MemberOfStaff;\r\n\t\t}\r\n\t\tpublic final CoreImages Core;\r\n\t\tpublic final OCRRImages OCRR;\r\n\t\tpublic final AdminImages Admin;\r\n\t}\r\n\tpublic LocalContext getLocalContext()\r\n\t{\r\n\t\treturn (LocalContext)super.getLocalCtx();\r\n\t}\r\n\tpublic class LocalContext extends ContextBridge\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\r\n\t\tpublic LocalContext(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)\r\n\t\t{\r\n\t\t\tsuper.setContext(context);\r\n\t\t\tString prefix = formInfo.getLocalVariablesPrefix();\r\n\t\t\tcxl_EditedRecord = new ims.framework.ContextVariable(\"EditedRecord\", prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_\" + componentIdentifier + \"\");\r\n\t\t\tcxl_EditedRecords = new ims.framework.ContextVariable(\"EditedRecords\", prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecords_\" + componentIdentifier + \"\");\r\n\t\t\tcxl_ProviderVoColl = new ims.framework.ContextVariable(\"ProviderVoColl\", prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__ProviderVoColl_\" + componentIdentifier + \"\");\r\n\t\t\tcxl_ParentRow = new ims.framework.ContextVariable(\"ParentRow\", prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__ParentRow_\" + componentIdentifier + \"\");\r\n\t\t\tcxl_SelectedContextMenu = new ims.framework.ContextVariable(\"SelectedContextMenu\", prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__SelectedContextMenu_\" + componentIdentifier + \"\");\r\n\t\t\tcxl_ToBeRemoveColl = new ims.framework.ContextVariable(\"ToBeRemoveColl\", prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__ToBeRemoveColl_\" + componentIdentifier + \"\");\r\n\t\t}\r\n\t\t\r\n\t\tpublic boolean getEditedRecordIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cxl_EditedRecord.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.pathways.vo.ExternalEventMappingVo getEditedRecord()\r\n\t\t{\r\n\t\t\treturn (ims.pathways.vo.ExternalEventMappingVo)cxl_EditedRecord.getValue(context);\r\n\t\t}\r\n\t\tpublic void setEditedRecord(ims.pathways.vo.ExternalEventMappingVo value)\r\n\t\t{\r\n\t\t\tcxl_EditedRecord.setValue(context, value);\r\n\t\t}\r\n\t\tprivate ims.framework.ContextVariable cxl_EditedRecord = null;\r\n\t\tpublic boolean getEditedRecordsIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cxl_EditedRecords.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.pathways.vo.ExternalEventMappingVoCollection getEditedRecords()\r\n\t\t{\r\n\t\t\treturn (ims.pathways.vo.ExternalEventMappingVoCollection)cxl_EditedRecords.getValue(context);\r\n\t\t}\r\n\t\tpublic void setEditedRecords(ims.pathways.vo.ExternalEventMappingVoCollection value)\r\n\t\t{\r\n\t\t\tcxl_EditedRecords.setValue(context, value);\r\n\t\t}\r\n\t\tprivate ims.framework.ContextVariable cxl_EditedRecords = null;\r\n\t\tpublic boolean getProviderVoCollIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cxl_ProviderVoColl.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.ocrr.vo.ProviderSystemVoCollection getProviderVoColl()\r\n\t\t{\r\n\t\t\treturn (ims.ocrr.vo.ProviderSystemVoCollection)cxl_ProviderVoColl.getValue(context);\r\n\t\t}\r\n\t\tpublic void setProviderVoColl(ims.ocrr.vo.ProviderSystemVoCollection value)\r\n\t\t{\r\n\t\t\tcxl_ProviderVoColl.setValue(context, value);\r\n\t\t}\r\n\t\tprivate ims.framework.ContextVariable cxl_ProviderVoColl = null;\r\n\t\tpublic boolean getParentRowIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cxl_ParentRow.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic DynamicGridRow getParentRow()\r\n\t\t{\r\n\t\t\treturn (DynamicGridRow)cxl_ParentRow.getValue(context);\r\n\t\t}\r\n\t\tpublic void setParentRow(DynamicGridRow value)\r\n\t\t{\r\n\t\t\tcxl_ParentRow.setValue(context, value);\r\n\t\t}\r\n\t\tprivate ims.framework.ContextVariable cxl_ParentRow = null;\r\n\t\tpublic boolean getSelectedContextMenuIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cxl_SelectedContextMenu.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.pathways.vo.enums.ExternalEventMappings getSelectedContextMenu()\r\n\t\t{\r\n\t\t\treturn (ims.pathways.vo.enums.ExternalEventMappings)cxl_SelectedContextMenu.getValue(context);\r\n\t\t}\r\n\t\tpublic void setSelectedContextMenu(ims.pathways.vo.enums.ExternalEventMappings value)\r\n\t\t{\r\n\t\t\tcxl_SelectedContextMenu.setValue(context, value);\r\n\t\t}\r\n\t\tprivate ims.framework.ContextVariable cxl_SelectedContextMenu = null;\r\n\t\tpublic boolean getToBeRemoveCollIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cxl_ToBeRemoveColl.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.pathways.vo.ExternalEventMappingVoCollection getToBeRemoveColl()\r\n\t\t{\r\n\t\t\treturn (ims.pathways.vo.ExternalEventMappingVoCollection)cxl_ToBeRemoveColl.getValue(context);\r\n\t\t}\r\n\t\tpublic void setToBeRemoveColl(ims.pathways.vo.ExternalEventMappingVoCollection value)\r\n\t\t{\r\n\t\t\tcxl_ToBeRemoveColl.setValue(context, value);\r\n\t\t}\r\n\t\tprivate ims.framework.ContextVariable cxl_ToBeRemoveColl = null;\r\n\t}\r\n\r\n\tpublic final class ContextMenus implements java.io.Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\tpublic PathwaysNamespace Pathways = new PathwaysNamespace();\r\n\t\tpublic final class PathwaysNamespace implements java.io.Serializable\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic final class ExternalEventMappingsSpecialty implements java.io.Serializable\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\tpublic static final int Add = 1;\r\n\t\t\t\tpublic static final int Remove = 2;\r\n\t\t\t}\r\n\t\t\tpublic void disableAllExternalEventMappingsSpecialtyMenuItems()\r\n\t\t\t{\r\n\t\t\t\tthis.contextMenuExternalEventMappingsSpecialtyAddItem.setEnabled(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsSpecialtyRemoveItem.setEnabled(false);\r\n\t\t\t}\r\n\t\t\tpublic void hideAllExternalEventMappingsSpecialtyMenuItems()\r\n\t\t\t{\r\n\t\t\t\tthis.contextMenuExternalEventMappingsSpecialtyAddItem.setVisible(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsSpecialtyRemoveItem.setVisible(false);\r\n\t\t\t}\r\n\t\t\tprivate Menu contextMenuExternalEventMappingsSpecialty;\r\n\t\t\tpublic ReadOnlyMenuItem getExternalEventMappingsSpecialtyAddItem()\r\n\t\t\t{\r\n\t\t\t\treturn this.contextMenuExternalEventMappingsSpecialtyAddItem;\r\n\t\t\t}\r\n\t\t\tprivate MenuItem contextMenuExternalEventMappingsSpecialtyAddItem;\r\n\t\t\tpublic ReadOnlyMenuItem getExternalEventMappingsSpecialtyRemoveItem()\r\n\t\t\t{\r\n\t\t\t\treturn this.contextMenuExternalEventMappingsSpecialtyRemoveItem;\r\n\t\t\t}\r\n\t\t\tprivate MenuItem contextMenuExternalEventMappingsSpecialtyRemoveItem;\r\n\t\t\tpublic final class ExternalEventMappings implements java.io.Serializable\r\n\t\t\t{\r\n\t\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\t\tpublic static final int New = 3;\r\n\t\t\t\tpublic static final int Edit = 4;\r\n\t\t\t\tpublic static final int Add = 5;\r\n\t\t\t\tpublic static final int EditSpecialty = 6;\r\n\t\t\t\tpublic static final int AddConsultant = 7;\r\n\t\t\t\tpublic static final int EditConsultant = 8;\r\n\t\t\t}\r\n\t\t\tpublic void disableAllExternalEventMappingsMenuItems()\r\n\t\t\t{\r\n\t\t\t\tthis.contextMenuExternalEventMappingsNewItem.setEnabled(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsEditItem.setEnabled(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsAddItem.setEnabled(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsEditSpecialtyItem.setEnabled(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsAddConsultantItem.setEnabled(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsEditConsultantItem.setEnabled(false);\r\n\t\t\t}\r\n\t\t\tpublic void hideAllExternalEventMappingsMenuItems()\r\n\t\t\t{\r\n\t\t\t\tthis.contextMenuExternalEventMappingsNewItem.setVisible(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsEditItem.setVisible(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsAddItem.setVisible(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsEditSpecialtyItem.setVisible(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsAddConsultantItem.setVisible(false);\r\n\t\t\t\tthis.contextMenuExternalEventMappingsEditConsultantItem.setVisible(false);\r\n\t\t\t}\r\n\t\t\tprivate Menu contextMenuExternalEventMappings;\r\n\t\t\tpublic ReadOnlyMenuItem getExternalEventMappingsNewItem()\r\n\t\t\t{\r\n\t\t\t\treturn this.contextMenuExternalEventMappingsNewItem;\r\n\t\t\t}\r\n\t\t\tprivate MenuItem contextMenuExternalEventMappingsNewItem;\r\n\t\t\tpublic ReadOnlyMenuItem getExternalEventMappingsEditItem()\r\n\t\t\t{\r\n\t\t\t\treturn this.contextMenuExternalEventMappingsEditItem;\r\n\t\t\t}\r\n\t\t\tprivate MenuItem contextMenuExternalEventMappingsEditItem;\r\n\t\t\tpublic ReadOnlyMenuItem getExternalEventMappingsAddItem()\r\n\t\t\t{\r\n\t\t\t\treturn this.contextMenuExternalEventMappingsAddItem;\r\n\t\t\t}\r\n\t\t\tprivate MenuItem contextMenuExternalEventMappingsAddItem;\r\n\t\t\tpublic ReadOnlyMenuItem getExternalEventMappingsEditSpecialtyItem()\r\n\t\t\t{\r\n\t\t\t\treturn this.contextMenuExternalEventMappingsEditSpecialtyItem;\r\n\t\t\t}\r\n\t\t\tprivate MenuItem contextMenuExternalEventMappingsEditSpecialtyItem;\r\n\t\t\tpublic ReadOnlyMenuItem getExternalEventMappingsAddConsultantItem()\r\n\t\t\t{\r\n\t\t\t\treturn this.contextMenuExternalEventMappingsAddConsultantItem;\r\n\t\t\t}\r\n\t\t\tprivate MenuItem contextMenuExternalEventMappingsAddConsultantItem;\r\n\t\t\tpublic ReadOnlyMenuItem getExternalEventMappingsEditConsultantItem()\r\n\t\t\t{\r\n\t\t\t\treturn this.contextMenuExternalEventMappingsEditConsultantItem;\r\n\t\t\t}\r\n\t\t\tprivate MenuItem contextMenuExternalEventMappingsEditConsultantItem;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate ContextMenus contextMenus;\r\n\tpublic ContextMenus getContextMenus()\r\n\t{\r\n\t\treturn this.contextMenus;\r\n\t}\r\n\r\n\tprivate IReportField[] getFormReportFields()\r\n\t{\r\n\t\tif(this.context == null)\r\n\t\t\treturn null;\r\n\t\tif(this.reportFields == null)\r\n\t\t\tthis.reportFields = new ReportFields(this.context, this.formInfo, this.componentIdentifier).getReportFields();\r\n\t\treturn this.reportFields;\r\n\t}\r\n\tprivate class ReportFields\r\n\t{\r\n\t\tpublic ReportFields(Context context, ims.framework.FormInfo formInfo, String componentIdentifier)\r\n\t\t{\r\n\t\t\tthis.context = context;\r\n\t\t\tthis.formInfo = formInfo;\r\n\t\t\tthis.componentIdentifier = componentIdentifier;\r\n\t\t}\r\n\t\tpublic IReportField[] getReportFields()\r\n\t\t{\r\n\t\t\tString prefix = formInfo.getLocalVariablesPrefix();\r\n\t\t\tIReportField[] fields = new IReportField[150];\r\n\t\t\tfields[0] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-ID\", \"ID_Patient\");\r\n\t\t\tfields[1] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-SEX\", \"Sex\");\r\n\t\t\tfields[2] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-DOB\", \"Dob\");\r\n\t\t\tfields[3] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-DOD\", \"Dod\");\r\n\t\t\tfields[4] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-RELIGION\", \"Religion\");\r\n\t\t\tfields[5] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-ISACTIVE\", \"IsActive\");\r\n\t\t\tfields[6] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-ETHNICORIGIN\", \"EthnicOrigin\");\r\n\t\t\tfields[7] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-MARITALSTATUS\", \"MaritalStatus\");\r\n\t\t\tfields[8] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-SCN\", \"SCN\");\r\n\t\t\tfields[9] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-SOURCEOFINFORMATION\", \"SourceOfInformation\");\r\n\t\t\tfields[10] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-TIMEOFDEATH\", \"TimeOfDeath\");\r\n\t\t\tfields[11] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-ISQUICKREGISTRATIONPATIENT\", \"IsQuickRegistrationPatient\");\r\n\t\t\tfields[12] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-CURRENTRESPONSIBLECONSULTANT\", \"CurrentResponsibleConsultant\");\r\n\t\t\tfields[13] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-DEMENTIABREACHDATETIME\", \"DementiaBreachDateTime\");\r\n\t\t\tfields[14] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-DEMENTIAWORKLISTSTATUS\", \"DementiaWorklistStatus\");\r\n\t\t\tfields[15] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-MRNSTATUS\", \"MRNStatus\");\r\n\t\t\tfields[16] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-HASSCANNEDCASENOTEFOLDERS\", \"HasScannedCaseNoteFolders\");\r\n\t\t\tfields[17] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-ISCONFIDENTIAL\", \"IsConfidential\");\r\n\t\t\tfields[18] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-TIMEOFBIRTH\", \"TimeOfBirth\");\r\n\t\t\tfields[19] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientShort\", \"BO-1001100000-PATIENTCATEGORY\", \"PatientCategory\");\r\n\t\t\tfields[20] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientFilter\", \"BO-1001100000-ID\", \"ID_Patient\");\r\n\t\t\tfields[21] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientFilter\", \"BO-1001100000-SEX\", \"Sex\");\r\n\t\t\tfields[22] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientFilter\", \"BO-1001100000-DOB\", \"Dob\");\r\n\t\t\tfields[23] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentClinicalContact\", \"BO-1004100003-ID\", \"ID_ClinicalContact\");\r\n\t\t\tfields[24] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentClinicalContact\", \"BO-1004100003-SPECIALTY\", \"Specialty\");\r\n\t\t\tfields[25] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentClinicalContact\", \"BO-1004100003-CONTACTTYPE\", \"ContactType\");\r\n\t\t\tfields[26] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentClinicalContact\", \"BO-1004100003-STARTDATETIME\", \"StartDateTime\");\r\n\t\t\tfields[27] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentClinicalContact\", \"BO-1004100003-ENDDATETIME\", \"EndDateTime\");\r\n\t\t\tfields[28] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentClinicalContact\", \"BO-1004100003-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[29] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentClinicalContact\", \"BO-1004100003-ISCLINICALNOTECREATED\", \"IsClinicalNoteCreated\");\r\n\t\t\tfields[30] = new ims.framework.ReportField(this.context, \"_cvp_Core.RecordingHCP\", \"BO-1006100000-ID\", \"ID_Hcp\");\r\n\t\t\tfields[31] = new ims.framework.ReportField(this.context, \"_cvp_Core.RecordingHCP\", \"BO-1006100000-HCPTYPE\", \"HcpType\");\r\n\t\t\tfields[32] = new ims.framework.ReportField(this.context, \"_cvp_Core.RecordingHCP\", \"BO-1006100000-ISACTIVE\", \"IsActive\");\r\n\t\t\tfields[33] = new ims.framework.ReportField(this.context, \"_cvp_Core.RecordingHCP\", \"BO-1006100000-ISHCPARESPONSIBLEHCP\", \"IsHCPaResponsibleHCP\");\r\n\t\t\tfields[34] = new ims.framework.ReportField(this.context, \"_cvp_Core.RecordingHCP\", \"BO-1006100000-ISARESPONSIBLEEDCLINICIAN\", \"IsAResponsibleEDClinician\");\r\n\t\t\tfields[35] = new ims.framework.ReportField(this.context, \"_cvp_Core.RecordingHCP\", \"BO-1006100000-ISHCPAENDOSCOPIST\", \"IsHCPaEndoscopist\");\r\n\t\t\tfields[36] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentCareContext\", \"BO-1004100019-ID\", \"ID_CareContext\");\r\n\t\t\tfields[37] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentCareContext\", \"BO-1004100019-CONTEXT\", \"Context\");\r\n\t\t\tfields[38] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentCareContext\", \"BO-1004100019-ORDERINGHOSPITAL\", \"OrderingHospital\");\r\n\t\t\tfields[39] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentCareContext\", \"BO-1004100019-ESTIMATEDDISCHARGEDATE\", \"EstimatedDischargeDate\");\r\n\t\t\tfields[40] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentCareContext\", \"BO-1004100019-STARTDATETIME\", \"StartDateTime\");\r\n\t\t\tfields[41] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentCareContext\", \"BO-1004100019-ENDDATETIME\", \"EndDateTime\");\r\n\t\t\tfields[42] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentCareContext\", \"BO-1004100019-LOCATIONTYPE\", \"LocationType\");\r\n\t\t\tfields[43] = new ims.framework.ReportField(this.context, \"_cvp_Core.CurrentCareContext\", \"BO-1004100019-RESPONSIBLEHCP\", \"ResponsibleHCP\");\r\n\t\t\tfields[44] = new ims.framework.ReportField(this.context, \"_cvp_Core.EpisodeofCareShort\", \"BO-1004100018-ID\", \"ID_EpisodeOfCare\");\r\n\t\t\tfields[45] = new ims.framework.ReportField(this.context, \"_cvp_Core.EpisodeofCareShort\", \"BO-1004100018-CARESPELL\", \"CareSpell\");\r\n\t\t\tfields[46] = new ims.framework.ReportField(this.context, \"_cvp_Core.EpisodeofCareShort\", \"BO-1004100018-SPECIALTY\", \"Specialty\");\r\n\t\t\tfields[47] = new ims.framework.ReportField(this.context, \"_cvp_Core.EpisodeofCareShort\", \"BO-1004100018-RELATIONSHIP\", \"Relationship\");\r\n\t\t\tfields[48] = new ims.framework.ReportField(this.context, \"_cvp_Core.EpisodeofCareShort\", \"BO-1004100018-STARTDATE\", \"StartDate\");\r\n\t\t\tfields[49] = new ims.framework.ReportField(this.context, \"_cvp_Core.EpisodeofCareShort\", \"BO-1004100018-ENDDATE\", \"EndDate\");\r\n\t\t\tfields[50] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-ID\", \"ID_ClinicalNotes\");\r\n\t\t\tfields[51] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-CLINICALNOTE\", \"ClinicalNote\");\r\n\t\t\tfields[52] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-NOTETYPE\", \"NoteType\");\r\n\t\t\tfields[53] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-DISCIPLINE\", \"Discipline\");\r\n\t\t\tfields[54] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-CLINICALCONTACT\", \"ClinicalContact\");\r\n\t\t\tfields[55] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-ISDERIVEDNOTE\", \"IsDerivedNote\");\r\n\t\t\tfields[56] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-FORREVIEW\", \"ForReview\");\r\n\t\t\tfields[57] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-FORREVIEWDISCIPLINE\", \"ForReviewDiscipline\");\r\n\t\t\tfields[58] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-REVIEWINGDATETIME\", \"ReviewingDateTime\");\r\n\t\t\tfields[59] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-ISCORRECTED\", \"IsCorrected\");\r\n\t\t\tfields[60] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-ISTRANSCRIBED\", \"IsTranscribed\");\r\n\t\t\tfields[61] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-SOURCEOFNOTE\", \"SourceOfNote\");\r\n\t\t\tfields[62] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-RECORDINGDATETIME\", \"RecordingDateTime\");\r\n\t\t\tfields[63] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-INHOSPITALREPORT\", \"InHospitalReport\");\r\n\t\t\tfields[64] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[65] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.CurrentClinicalNote\", \"BO-1011100000-NOTECLASSIFICATION\", \"NoteClassification\");\r\n\t\t\tfields[66] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-ID\", \"ID_NAESReferral\");\r\n\t\t\tfields[67] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-DATEREFERRALRECEIVED\", \"DateReferralReceived\");\r\n\t\t\tfields[68] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-DATEOFSURGERY\", \"DateOfSurgery\");\r\n\t\t\tfields[69] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-REFERRINGHOSPITAL\", \"ReferringHospital\");\r\n\t\t\tfields[70] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-REFERRINGDOCTOR\", \"ReferringDoctor\");\r\n\t\t\tfields[71] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-REFERRALREASON\", \"ReferralReason\");\r\n\t\t\tfields[72] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-SECONDARYSURGERY\", \"SecondarySurgery\");\r\n\t\t\tfields[73] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-UNDERLYINGREASON\", \"UnderlyingReason\");\r\n\t\t\tfields[74] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-AFFECTEDEYE\", \"AffectedEye\");\r\n\t\t\tfields[75] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-IMPLANT\", \"Implant\");\r\n\t\t\tfields[76] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-IMPLANTTYPE\", \"ImplantType\");\r\n\t\t\tfields[77] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-INTERPRETERREQUIRED\", \"InterpreterRequired\");\r\n\t\t\tfields[78] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-LANGUAGE\", \"Language\");\r\n\t\t\tfields[79] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-LANGUAGEIFOTHER\", \"LanguageIfOther\");\r\n\t\t\tfields[80] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-REFERREDBY\", \"ReferredBy\");\r\n\t\t\tfields[81] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-_6WEEKKPI\", \"SixWeekKPI\");\r\n\t\t\tfields[82] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-_3WEEKKPI\", \"ThreeWeekKPI\");\r\n\t\t\tfields[83] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-PREFERREDCLINIC\", \"PreferredClinic\");\r\n\t\t\tfields[84] = new ims.framework.ReportField(this.context, \"_cvp_Naes.Referral\", \"BO-1097100004-NOTES\", \"Notes\");\r\n\t\t\tfields[85] = new ims.framework.ReportField(this.context, \"_cvp_STHK.AvailableBedsListFilter\", \"BO-1014100009-ID\", \"ID_BedSpaceState\");\r\n\t\t\tfields[86] = new ims.framework.ReportField(this.context, \"_cvp_STHK.PendingEmergencyAdmissionsFilter\", \"BO-1014100011-ID\", \"ID_PendingEmergencyAdmission\");\r\n\t\t\tfields[87] = new ims.framework.ReportField(this.context, \"_cvp_STHK.PendingEmergencyAdmissionsFilter\", \"BO-1014100011-ADMISSIONSTATUS\", \"AdmissionStatus\");\r\n\t\t\tfields[88] = new ims.framework.ReportField(this.context, \"_cvp_STHK.PendingDischargesListFilter\", \"BO-1014100000-ID\", \"ID_InpatientEpisode\");\r\n\t\t\tfields[89] = new ims.framework.ReportField(this.context, \"_cvp_STHK.PendingDischargesListFilter\", \"BO-1014100000-ESTDISCHARGEDATE\", \"EstDischargeDate\");\r\n\t\t\tfields[90] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.ExtendedClinicalNotesListFilter\", \"BO-1011100000-ID\", \"ID_ClinicalNotes\");\r\n\t\t\tfields[91] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.ExtendedClinicalNotesListFilter\", \"BO-1011100000-FORREVIEW\", \"ForReview\");\r\n\t\t\tfields[92] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.ExtendedClinicalNotesListFilter\", \"BO-1011100000-FORREVIEWDISCIPLINE\", \"ForReviewDiscipline\");\r\n\t\t\tfields[93] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.ExtendedClinicalNotesListFilter\", \"BO-1011100000-NOTECLASSIFICATION\", \"NoteClassification\");\r\n\t\t\tfields[94] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.ExtendedClinicalNotesListFilter\", \"BO-1011100000-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[95] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientClinicalNotesSearchCriteria\", \"BO-1011100000-ID\", \"ID_ClinicalNotes\");\r\n\t\t\tfields[96] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientClinicalNotesSearchCriteria\", \"BO-1011100000-NOTETYPE\", \"NoteType\");\r\n\t\t\tfields[97] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientClinicalNotesSearchCriteria\", \"BO-1011100000-FORREVIEW\", \"ForReview\");\r\n\t\t\tfields[98] = new ims.framework.ReportField(this.context, \"_cvp_Core.PatientClinicalNotesSearchCriteria\", \"BO-1011100000-FORREVIEWDISCIPLINE\", \"ForReviewDiscipline\");\r\n\t\t\tfields[99] = new ims.framework.ReportField(this.context, \"_cvp_Nursing.ObservationFormsSearchCriteria\", \"BO-1011100002-ID\", \"ID_ObservationForm\");\r\n\t\t\tfields[100] = new ims.framework.ReportField(this.context, \"_cvp_Nursing.ObservationFormsSearchCriteria\", \"BO-1011100002-FORMTYPE\", \"FormType\");\r\n\t\t\tfields[101] = new ims.framework.ReportField(this.context, \"_cvp_Nursing.ObservationFormsSearchCriteria\", \"BO-1011100002-DETAILS\", \"Details\");\r\n\t\t\tfields[102] = new ims.framework.ReportField(this.context, \"_cvp_Nursing.ObservationFormsSearchCriteria\", \"BO-1011100002-DATETIMESTART\", \"DateTimeStart\");\r\n\t\t\tfields[103] = new ims.framework.ReportField(this.context, \"_cvp_Nursing.ObservationFormsSearchCriteria\", \"BO-1011100002-DATETIMESTOP\", \"DateTimeStop\");\r\n\t\t\tfields[104] = new ims.framework.ReportField(this.context, \"_cvp_Nursing.ObservationFormsSearchCriteria\", \"BO-1011100002-ISSTOPPED\", \"IsStopped\");\r\n\t\t\tfields[105] = new ims.framework.ReportField(this.context, \"_cvp_Nursing.ObservationFormsSearchCriteria\", \"BO-1011100002-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[106] = new ims.framework.ReportField(this.context, \"_cvp_Nursing.ObservationFormsSearchCriteria\", \"BO-1011100002-CLINICALCONTACT\", \"ClinicalContact\");\r\n\t\t\tfields[107] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesAdmSearchCriteia\", \"BO-1072100034-ID\", \"ID_MedicationOverview\");\r\n\t\t\tfields[108] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesAdmSearchCriteia\", \"BO-1072100034-TYPE\", \"Type\");\r\n\t\t\tfields[109] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesAdmSearchCriteia\", \"BO-1072100034-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[110] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesDisSearchCriteria\", \"BO-1072100034-ID\", \"ID_MedicationOverview\");\r\n\t\t\tfields[111] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesDisSearchCriteria\", \"BO-1072100034-TYPE\", \"Type\");\r\n\t\t\tfields[112] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesDisSearchCriteria\", \"BO-1072100034-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[113] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesOPDSearchCriteria\", \"BO-1072100034-ID\", \"ID_MedicationOverview\");\r\n\t\t\tfields[114] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesOPDSearchCriteria\", \"BO-1072100034-TYPE\", \"Type\");\r\n\t\t\tfields[115] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesOPDSearchCriteria\", \"BO-1072100034-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[116] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesPatSearchCriteria\", \"BO-1072100034-ID\", \"ID_MedicationOverview\");\r\n\t\t\tfields[117] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesPatSearchCriteria\", \"BO-1072100034-TYPE\", \"Type\");\r\n\t\t\tfields[118] = new ims.framework.ReportField(this.context, \"_cvp_Clinical.MedMultipleDosesPatSearchCriteria\", \"BO-1072100034-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[119] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-ID\", \"ID_Urinalysis\");\r\n\t\t\tfields[120] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-NOABNORMALITYDETECTED\", \"NoAbnormalityDetected\");\r\n\t\t\tfields[121] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-LEUCOCYTES\", \"Leucocytes\");\r\n\t\t\tfields[122] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-PROTEIN\", \"Protein\");\r\n\t\t\tfields[123] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-BLOOD\", \"Blood\");\r\n\t\t\tfields[124] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-KETONES\", \"Ketones\");\r\n\t\t\tfields[125] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-ASCORBICACID\", \"AscorbicAcid\");\r\n\t\t\tfields[126] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-GLUCOSE\", \"Glucose\");\r\n\t\t\tfields[127] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-BILIRUBIN\", \"Bilirubin\");\r\n\t\t\tfields[128] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-UROBILINOGEN\", \"Urobilinogen\");\r\n\t\t\tfields[129] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-NITRATE\", \"Nitrate\");\r\n\t\t\tfields[130] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-PH\", \"PH\");\r\n\t\t\tfields[131] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-SPECIFICGRAVITY\", \"SpecificGravity\");\r\n\t\t\tfields[132] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-NOSAMPLE\", \"NoSample\");\r\n\t\t\tfields[133] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-ISACTIVE\", \"IsActive\");\r\n\t\t\tfields[134] = new ims.framework.ReportField(this.context, \"_cvp_Core.UrinalysisSearchCriteria\", \"BO-1022100012-CARECONTEXT\", \"CareContext\");\r\n\t\t\tfields[135] = new ims.framework.ReportField(this.context, \"_cvp_Core.PDSPatientFilterSearchCriteria\", \"BO-1001100000-ID\", \"ID_Patient\");\r\n\t\t\tfields[136] = new ims.framework.ReportField(this.context, \"_cvp_Core.PDSPatientFilterSearchCriteria\", \"BO-1001100000-SEX\", \"Sex\");\r\n\t\t\tfields[137] = new ims.framework.ReportField(this.context, \"_cvp_Core.PDSPatientFilterSearchCriteria\", \"BO-1001100000-DOB\", \"Dob\");\r\n\t\t\tfields[138] = new ims.framework.ReportField(this.context, \"_cvp_Core.LocalPatientFilterSearchCriteria\", \"BO-1001100000-ID\", \"ID_Patient\");\r\n\t\t\tfields[139] = new ims.framework.ReportField(this.context, \"_cvp_Core.LocalPatientFilterSearchCriteria\", \"BO-1001100000-SEX\", \"Sex\");\r\n\t\t\tfields[140] = new ims.framework.ReportField(this.context, \"_cvp_Core.LocalPatientFilterSearchCriteria\", \"BO-1001100000-DOB\", \"Dob\");\r\n\t\t\tfields[141] = new ims.framework.ReportField(this.context, \"_cvp_Core.PasEvent\", \"BO-1014100003-ID\", \"ID_PASEvent\");\r\n\t\t\tfields[142] = new ims.framework.ReportField(this.context, \"_cvp_Correspondence.CorrespondenceDetails\", \"BO-1052100001-ID\", \"ID_CorrespondenceDetails\");\r\n\t\t\tfields[143] = new ims.framework.ReportField(this.context, \"_cvp_RefMan.CatsReferral\", \"BO-1004100035-ID\", \"ID_CatsReferral\");\r\n\t\t\tfields[144] = new ims.framework.ReportField(this.context, prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_\" + componentIdentifier, \"BO-1089100004-ID\", \"ID_ExternalEventMapping\");\r\n\t\t\tfields[145] = new ims.framework.ReportField(this.context, prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_\" + componentIdentifier, \"BO-1089100004-GROUP\", \"Group\");\r\n\t\t\tfields[146] = new ims.framework.ReportField(this.context, prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_\" + componentIdentifier, \"BO-1089100004-DETAIL\", \"Detail\");\r\n\t\t\tfields[147] = new ims.framework.ReportField(this.context, prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_\" + componentIdentifier, \"BO-1089100004-SPECIALTY\", \"Specialty\");\r\n\t\t\tfields[148] = new ims.framework.ReportField(this.context, prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_\" + componentIdentifier, \"BO-1089100004-CLINICCODE\", \"ClinicCode\");\r\n\t\t\tfields[149] = new ims.framework.ReportField(this.context, prefix + \"_lv_Pathways.ExternalEventMappingsConfiguration.__internal_x_context__EditedRecord_\" + componentIdentifier, \"BO-1089100004-DESCRIPTION\", \"Description\");\r\n\t\t\treturn fields;\r\n\t\t}\r\n\t\tprotected Context context = null;\r\n\t\tprotected ims.framework.FormInfo formInfo;\r\n\t\tprotected String componentIdentifier;\r\n\t}\r\n\tpublic String getUniqueIdentifier()\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\tprivate Context context = null;\r\n\tprivate ims.framework.FormInfo formInfo = null;\r\n\tprivate String componentIdentifier;\r\n\tprivate IReportField[] reportFields = null;\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Pathways/src/ims/pathways/forms/externaleventmappingsconfiguration/GenForm.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"49bfc3fbca786d0c2ecda47c324321e3434fb9bc","size":"5569","content":"package com.eatthepath.jeospatial.util;\n\nimport com.eatthepath.jeospatial.GeospatialPoint;\n\n/**\n * <p>A simple geospatial point implementation. Simple geospatial points\n * calculate distance to other points using the Haversine Formula.</p>\n * \n * @author <a href=\"mailto:jon.chambers@gmail.com\">Jon Chambers</a>\n */\npublic class SimpleGeospatialPoint implements GeospatialPoint {\n\tprivate double latitude;\n\tprivate double longitude;\n\t\n    /**\n     * Constructs a new geospatial point at the given latitude and longitude\n     * coordinates.\n     * \n     * @param latitude the latitude of this point in degrees\n     * @param longitude the longitude of this point in degrees\n     * \n     * @throws IllegalArgumentException\n     *             if the given latitude is outside of the allowable range\n     */\n\tpublic SimpleGeospatialPoint(double latitude, double longitude) {\n\t\tthis.setLatitude(latitude);\n\t\tthis.setLongitude(longitude);\n\t}\n\t\n\t/**\n\t * Constructs a new geospatial point at the same coordinates as the given\n\t * point.\n\t * \n\t * @param p the point whose location should be used for this point\n\t */\n\tpublic SimpleGeospatialPoint(GeospatialPoint p) {\n\t\tthis(p.getLatitude(), p.getLongitude());\n\t}\n\t\n    /**\n     * Sets the latitude of this point.\n     * \n     * @param latitude the latitude of this point in degrees\n     * \n     * @throws IllegalArgumentException\n     *             if the given latitude is outside of the allowable range\n     */\n\tpublic void setLatitude(double latitude) {\n\t    if(latitude < -90 || latitude > 90) {\n\t        throw new IllegalArgumentException(\"Latitude must be in the range -90 (inclusive) to +90 (inclusive).\");\n\t    }\n\t    \n\t\tthis.latitude = latitude;\n\t}\n\t\n\t/**\n\t * Returns the latitude of this point.\n\t * \n\t * @return the latitude of this point in degrees\n\t */\n\t@Override\n\tpublic double getLatitude() {\n\t\treturn this.latitude;\n\t}\n\t\n\t/**\n\t * Sets the longitude of this point.\n\t * \n\t * @param longitude the longitude of this point in degrees\n\t */\n\tpublic void setLongitude(double longitude) {\n\t\tthis.longitude = ((longitude + 180) % 360) - 180;\n\t}\n\t\n\t/**\n\t * Returns the longitude of this point.\n\t * \n\t * @return the longitude of this point in degrees\n\t */\n\t@Override\n\tpublic double getLongitude() {\n\t\treturn this.longitude;\n\t}\n\t\n\t/**\n\t * Returns the \"great circle\" distance to another geospatial point.\n\t * \n\t * @param otherPoint the other point to which to calculate distance \n\t * \n\t * @return the great circle distance, in meters, between the two points\n\t */\n\tpublic double getDistanceTo(GeospatialPoint otherPoint) {\n\t\treturn this.getDistanceTo(otherPoint.getLatitude(), otherPoint.getLongitude());\n\t}\n\t\n    /**\n     * Returns the \"great circle\" distance to another geospatial point.\n     * \n     * @param latitude\n     *            the latitude, in degrees, of the other point to which to\n     *            calculate distance\n     * @param longitude\n     *            the longitude, in degrees, of the other point to which to\n     *            calculate distance\n     * \n     * @return the great circle distance, in meters, between the two points\n     */\n\t@Override\n    public double getDistanceTo(double latitude, double longitude) {\n\t    double lat1 = Math.toRadians(this.getLatitude());\n        double lon1 = Math.toRadians(this.getLongitude());\n        double lat2 = Math.toRadians(latitude);\n        double lon2 = Math.toRadians(longitude);\n        \n        double angle = 2 * Math.asin(Math.min(1, Math.sqrt(this.haversine(lat2 - lat1) + Math.cos(lat1) * Math.cos(lat2) * this.haversine(lon2 - lon1))));\n        \n        return angle * GeospatialPoint.EARTH_RADIUS;\n    }\n\n    /**\n\t * Returns the haversine of the given angle.\n\t * \n\t * @param theta the angle, in radians, for which to calculate the haversine\n\t * \n\t * @return the haversine of the given angle\n\t * \n\t * @see http://en.wikipedia.org/wiki/Versine\n\t */\n\tprivate double haversine(double theta) {\n\t    double x = Math.sin(theta / 2);\n\t    \n\t    return (x * x);\n\t}\n\n\t/**\n\t * Returns a human-readable {@code String} representation of this point.\n\t * \n\t * @return a {@code String} representation of this point\n\t */\n\t@Override\n\tpublic String toString() {\n\t\treturn \"SimpleGeospatialPoint [latitude=\" + latitude + \", longitude=\"\n\t\t\t\t+ longitude + \"]\";\n\t}\n\n\t/**\n\t * Generates a hash code value for this point.\n\t * \n\t * @return a hash code value for this point\n\t */\n\t@Override\n\tpublic int hashCode() {\n\t\tfinal int prime = 31;\n\t\tint result = 1;\n\t\tlong temp;\n\t\ttemp = Double.doubleToLongBits(this.getLatitude());\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\ttemp = Double.doubleToLongBits(this.getLongitude());\n\t\tresult = prime * result + (int) (temp ^ (temp >>> 32));\n\t\treturn result;\n\t}\n\t\n    /**\n     * Compares this point to another object. The other object is considered\n     * equal if it is not {@code null}, is also a {@code SimpleGeospatialPoint}\n     * (or a subclass thereof), and has the same latitude and longitude as this\n     * point.\n     * \n     * @return {@code true} if the other object is equal to this point or\n     *         {@code false} otherwise\n     */\n\t@Override\n\tpublic boolean equals(Object obj) {\n\t\tif (this == obj)\n\t\t\treturn true;\n\t\tif (obj == null)\n\t\t\treturn false;\n\t\tif(!(obj instanceof GeospatialPoint))\n\t\t    return false;\n\t\tGeospatialPoint other = (GeospatialPoint) obj;\n\t\tif (Double.doubleToLongBits(latitude) != Double\n\t\t\t\t.doubleToLongBits(other.getLatitude()))\n\t\t\treturn false;\n\t\tif (Double.doubleToLongBits(longitude) != Double\n\t\t\t\t.doubleToLongBits(other.getLongitude()))\n\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"jchambers/jeospatial","sample_ref":"refs/heads/master","sample_path":"src/com/eatthepath/jeospatial/util/SimpleGeospatialPoint.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"fc68fd3216a5f416a0b9e411338da004378d0803","size":"714","content":"package core.framework.api.module;\n\nimport core.framework.api.web.service.WebServiceRequestSigner;\nimport core.framework.impl.module.ModuleContext;\nimport core.framework.impl.web.service.WebServiceClient;\n\n/**\n * @author neo\n */\npublic final class WebServiceClientConfig {     // returned from APIConfig, must be public to be called\n    private final ModuleContext context;\n    private final WebServiceClient client;\n\n    public WebServiceClientConfig(ModuleContext context, WebServiceClient client) {\n        this.context = context;\n        this.client = client;\n    }\n\n    public void signBy(WebServiceRequestSigner signer) {\n        if (!context.isTest()) {\n            client.signBy(signer);\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"neowu/core-ng-project","sample_ref":"refs/heads/master","sample_path":"core-ng/src/main/java/core/framework/api/module/WebServiceClientConfig.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9fe6cce8771d6ebc61b5654b9a77d37b634d0d5e","size":"2487","content":"/*\n * Copyright (c) 1998-2015 Caucho Technology -- all rights reserved\n *\n * This file is part of Baratine(TM)\n *\n * Each copy or derived work must preserve the copyright notice and this\n * notice unmodified.\n *\n * Baratine is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Baratine is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty\n * of NON-INFRINGEMENT.  See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Baratine; if not, write to the\n *\n *   Free Software Foundation, Inc.\n *   59 Temple Place, Suite 330\n *   Boston, MA 02111-1307  USA\n *\n * @author Scott Ferguson\n */\n\npackage com.caucho.v5.amp;\n\nimport io.baratine.service.ServiceException;\n\n/**\n * General AMP exception\n */\n@SuppressWarnings(\"serial\")\npublic class AmpException extends ServiceException {\n  private ErrorAmp _ampError;\n  \n  public AmpException()\n  {\n  }\n\n  public AmpException(ErrorCodeAmp code, String msg)\n  {\n    super(msg);\n  }\n\n  public AmpException(String msg)\n  {\n    super(msg);\n  }\n\n  public AmpException(Throwable e)\n  {\n    super(e);\n  }\n\n  public AmpException(String msg, Throwable e)\n  {\n    super(msg, e);\n  }\n\n  public AmpException(ErrorAmp ampError)\n  {\n    super(ampError.getMessage());\n    \n    _ampError = ampError;\n  }\n\n  public AmpException(ErrorAmp ampError, Throwable cause)\n  {\n    super(ampError.getMessage(), cause);\n    \n    _ampError = ampError;\n  }\n\n  public ErrorAmp getActorError()\n  {\n    return _ampError;\n  }\n\n  public ErrorAmp createActorError()\n  {\n    /*\n    return new AmpError(AmpError.TYPE_CANCEL,\n                          AmpError.INTERNAL_SERVER_ERROR,\n                          toString());\n                          */\n    return null;\n  }\n\n  /**\n   * Rethrow the exception to include the proper stack trace.\n   */\n  @Override\n  public AmpException rethrow(String msg)\n  {\n    return new AmpException(msg, this);\n  }\n\n  public static ServiceException createAndRethrow(Throwable exn)\n  {\n    if (exn instanceof ServiceException) {\n      return ((ServiceException) exn).rethrow();\n    }\n    else {\n      return new AmpException(exn);\n    }\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"baratine/baratine","sample_ref":"refs/heads/master","sample_path":"core/src/main/java/com/caucho/v5/amp/AmpException.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d4f5bffeb746db27e66ff151e89021a91a706eb9","size":"2630","content":"/*\n * Copyright (c) 2016 Brocade Communications Systems, Inc. and others.  All rights reserved.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v1.0 which accompanies this distribution,\n * and is available at http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.opendaylight.yangtools.yang.stmt;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.FileNotFoundException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.text.ParseException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport org.junit.Test;\nimport org.opendaylight.yangtools.yang.common.QName;\nimport org.opendaylight.yangtools.yang.common.QNameModule;\nimport org.opendaylight.yangtools.yang.common.SimpleDateFormatUtil;\nimport org.opendaylight.yangtools.yang.model.api.DataSchemaNode;\nimport org.opendaylight.yangtools.yang.model.api.LeafSchemaNode;\nimport org.opendaylight.yangtools.yang.model.api.SchemaContext;\nimport org.opendaylight.yangtools.yang.model.api.TypeDefinition;\nimport org.opendaylight.yangtools.yang.model.api.type.EnumTypeDefinition;\nimport org.opendaylight.yangtools.yang.parser.spi.meta.ReactorException;\n\npublic class Bug2872Test {\n\n    @Test\n    public void test() throws ReactorException, FileNotFoundException, URISyntaxException, ParseException {\n        final SchemaContext schema = StmtTestUtils.parseYangSources(\"/bugs/bug2872\");\n        assertNotNull(schema);\n\n        final Date revision = SimpleDateFormatUtil.getRevisionFormat().parse(\"2016-06-08\");\n        final QNameModule bug2872module = QNameModule.create(new URI(\"bug2872\"), revision);\n        final QName foo = QName.create(bug2872module, \"bar\");\n\n        final DataSchemaNode dataSchemaNode = schema.getDataChildByName(foo);\n        assertTrue(dataSchemaNode instanceof LeafSchemaNode);\n        final LeafSchemaNode myLeaf = (LeafSchemaNode) dataSchemaNode;\n\n        final TypeDefinition<?> type = myLeaf.getType();\n        assertTrue(type instanceof EnumTypeDefinition);\n        final EnumTypeDefinition myEnum = (EnumTypeDefinition) type;\n\n        final List<EnumTypeDefinition.EnumPair> values = myEnum.getValues();\n        assertEquals(2, values.size());\n\n        final List<String> valueNames = new ArrayList<>();\n        for (EnumTypeDefinition.EnumPair pair : values) {\n            valueNames.add(pair.getName());\n        }\n        assertTrue(valueNames.contains(\"value-one\"));\n        assertTrue(valueNames.contains(\"value-two\"));\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"opendaylight/yangtools","sample_ref":"refs/heads/master","sample_path":"yang/yang-parser-impl/src/test/java/org/opendaylight/yangtools/yang/stmt/Bug2872Test.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9573fd157330d4c0a068dd8b88a008d9f0f5a522","size":"382","content":"package s2jh.biz.crawl.test;\r\n\r\nimport lab.s2jh.module.crawl.service.test.CrawlServiceTest;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class AmacCrawlServiceTest extends CrawlServiceTest {\r\n\r\n    @Test\r\n    public void startup() throws Exception {\r\n        crawlService.startup(buildDefaultCrawlConfig(), \"http://gs.amac.org.cn/amac-infodisc/res/pof/manager/index.html\").get();\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"xautlx/s2jh4net","sample_ref":"refs/heads/master","sample_path":"src/test/java/s2jh/biz/crawl/test/AmacCrawlServiceTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8fa1ef7a9bc99faf6a6137967dae89d065472fa2","size":"653","content":"package com.deerweather.app.model;\n\n/**\n * Created by DELL-PC on 2015/6/22.\n */\npublic class Province {\n    private int id;\n    private String provinceName;\n    private String provinceCode;\n\n    public int getId() {\n        return id;\n    }\n    public void setId(int id){\n        this.id = id;\n    }\n\n    public String getProvinceName() {\n        return provinceName;\n    }\n    public void setProvinceName(String provinceName){\n        this.provinceName = provinceName;\n    }\n    public String getProvinceCode() {\n        return provinceCode;\n    }\n    public void setProvinceCode(String provinceCode) {\n        this.provinceCode = provinceCode;\n    }\n}","binary":"false","copies":"1","sample_repo_name":"Gdeeer/deerweather","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/deerweather/app/model/Province.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8a0b478cd6814c7b324b94f7daa4dff769f5cc75","size":"2013","content":"package se.lth.cs.srl.preprocessor.tokenization;\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport edu.stanford.nlp.ling.Word;\nimport edu.stanford.nlp.process.PTBTokenizer;\nimport opennlp.tools.tokenize.TokenizerME;\nimport opennlp.tools.tokenize.TokenizerModel;\nimport se.lth.cs.srl.corpus.StringInText;\n\npublic class OpenNLPToolsTokenizerWrapper implements Tokenizer {\n\tprivate int startpos = 0;\n\n\topennlp.tools.tokenize.Tokenizer tokenizer;\n\n\tpublic OpenNLPToolsTokenizerWrapper(\n\t\t\topennlp.tools.tokenize.Tokenizer tokenizerImplementation) {\n\t\tthis.tokenizer = tokenizerImplementation;\n\t}\n\n\t@Override\n\tpublic String[] tokenize(String sentence) {\n\t\tString[] tokens = tokenizer.tokenize(sentence);\n\t\tString[] withRoot = new String[tokens.length + 1];\n\t\t// withRoot[0]=\"<root>\";\n\t\twithRoot[0] = is2.io.CONLLReader09.ROOT;\n\t\tSystem.arraycopy(tokens, 0, withRoot, 1, tokens.length);\n\t\treturn withRoot;\n\t}\n\n\tpublic static OpenNLPToolsTokenizerWrapper loadOpenNLPTokenizer(\n\t\t\tFile modelFile) throws IOException {\n\t\tBufferedInputStream modelIn = new BufferedInputStream(\n\t\t\t\tnew FileInputStream(modelFile.toString()));\n\t\topennlp.tools.tokenize.Tokenizer tokenizer = new TokenizerME(\n\t\t\t\tnew TokenizerModel(modelIn));\n\t\treturn new OpenNLPToolsTokenizerWrapper(tokenizer);\n\t}\n\n\t@Override\n\tpublic StringInText[] tokenizeplus(String sentence) {\n\t\tReader r = new StringReader(sentence);\n\t\tList<StringInText> l = new ArrayList<StringInText>();\n\t\tfor (String s : tokenize(sentence)) {\n\t\t\tWord w = new Word(s);\n\t\t\tl.add(new StringInText(w.word(), w.beginPosition() + startpos, w\n\t\t\t\t\t.endPosition() + startpos));\n\t\t}\n\t\tStringInText[] tok = new StringInText[l.size()];\n\t\t// tok[0]=new StringInText(is2.io.CONLLReader09.ROOT,0,0);\n\t\tint i = 0;\n\t\tfor (StringInText s : l)\n\t\t\ttok[i++] = s;\n\n\t\tstartpos += (1 + sentence.length());\n\n\t\treturn tok;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"microth/mateplus","sample_ref":"refs/heads/master","sample_path":"src/se/lth/cs/srl/preprocessor/tokenization/OpenNLPToolsTokenizerWrapper.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"30523673c4fa6ecbd1ff8651c0bd1d92bfb2807e","size":"799","content":"// License information is available from LICENSE file\npackage io.jxcore.node;\n\nimport io.jxcore.node.jxcore.JXcoreCallback;\nimport java.util.ArrayList;\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.graphics.Point;\nimport android.provider.Settings.SettingNotFoundException;\nimport android.view.Display;\nimport android.view.WindowManager;\nimport android.util.Log;\n\npublic class JXcoreExtension {\n  public static String TAG = \"Flickerstrip\";\n  public static void LoadExtensions() {\n    jxcore.RegisterMethod(\"Log\", new JXcoreCallback() {\n      @SuppressLint(\"NewApi\")\n      @Override\n      public void Receiver(ArrayList<Object> params, String callbackId) {\n        for (Object p : params) {\n            Log.v(TAG,p.toString());\n        }\n      }\n    });\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"Flickerstrip/FlickerstripApp","sample_ref":"refs/heads/master","sample_path":"src/cordova/android/JXcoreExtension.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b6feb74c0ed54bfb19f3d2998c5dee1b1c6efb10","size":"7539","content":"package com.wingman.client.ui.util;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n *  The ComponentBorderResizer allows you to resize a component by dragging a border of the component.\n */\npublic class ComponentBorderResizer extends MouseAdapter {\n\n    private static Map<Integer, Integer> cursors = new HashMap<>();\n    {\n        cursors.put(1, Cursor.N_RESIZE_CURSOR);\n        cursors.put(2, Cursor.W_RESIZE_CURSOR);\n        cursors.put(4, Cursor.S_RESIZE_CURSOR);\n        cursors.put(8, Cursor.E_RESIZE_CURSOR);\n        cursors.put(3, Cursor.NW_RESIZE_CURSOR);\n        cursors.put(9, Cursor.NE_RESIZE_CURSOR);\n        cursors.put(6, Cursor.SW_RESIZE_CURSOR);\n        cursors.put(12, Cursor.SE_RESIZE_CURSOR);\n    }\n\n    private Insets dragInsets = new Insets(5, 5, 5, 5);\n    private Dimension snapSize = new Dimension(1, 1);\n\n    private int direction;\n    private static final int NORTH = 1;\n    private static final int WEST = 2;\n    private static final int SOUTH = 4;\n    private static final int EAST = 8;\n\n    private Cursor sourceCursor;\n    private boolean resizing;\n    private Rectangle bounds;\n    private Point pressed;\n    private boolean autoScrolls;\n\n    /**\n     *  Convenience constructor. <br>\n     *  All borders are resizable in increments of a single pixel. <br>\n     *  Components must be registered separately.\n     */\n    public ComponentBorderResizer(Component... components) {\n        for (Component component : components) {\n            component.addMouseListener( this );\n            component.addMouseMotionListener( this );\n        }\n    }\n\n    @Override\n    public void mouseMoved(MouseEvent e) {\n        Component source = e.getComponent();\n        Point location = e.getPoint();\n        direction = 0;\n\n        if (location.x < dragInsets.left) {\n            direction += WEST;\n        }\n\n        if (location.x > source.getWidth() - dragInsets.right - 1) {\n            direction += EAST;\n        }\n\n        if (location.y < dragInsets.top) {\n            direction += NORTH;\n        }\n\n        if (location.y > source.getHeight() - dragInsets.bottom - 1) {\n            direction += SOUTH;\n        }\n\n        if (direction == 0) {\n            source.setCursor(sourceCursor);\n        } else {\n            Cursor cursor = Cursor.getPredefinedCursor(cursors.get(direction));\n            source.setCursor(cursor);\n        }\n    }\n\n    @Override\n    public void mouseEntered(MouseEvent e) {\n        if (!resizing) {\n            Component source = e.getComponent();\n            sourceCursor = source.getCursor();\n        }\n    }\n\n    @Override\n    public void mouseExited(MouseEvent e) {\n        if (!resizing) {\n            Component source = e.getComponent();\n            source.setCursor(sourceCursor);\n        }\n    }\n\n    @Override\n    public void mousePressed(MouseEvent e) {\n        if (direction == 0) {\n            return;\n        }\n\n        resizing = true;\n\n        Component source = e.getComponent();\n        pressed = e.getPoint();\n        SwingUtilities.convertPointToScreen(pressed, source);\n        bounds = source.getBounds();\n\n        if (source instanceof JComponent) {\n            JComponent jc = (JComponent)source;\n            autoScrolls = jc.getAutoscrolls();\n            jc.setAutoscrolls(false);\n        }\n    }\n\n    /**\n     *  Restore the original state of the Component\n     */\n    @Override\n    public void mouseReleased(MouseEvent e) {\n        resizing = false;\n\n        Component source = e.getComponent();\n        source.setCursor(sourceCursor);\n\n        if (source instanceof JComponent) {\n            ((JComponent)source).setAutoscrolls(autoScrolls);\n        }\n    }\n\n    /**\n     *  Resize the component ensuring location and size is within the bounds\n     *  of the parent container and that the size is within the minimum and\n     *  maximum constraints.\n     *\n     *  All calculations are done using the bounds of the component when the\n     *  resizing started.\n     */\n    @Override\n    public void mouseDragged(MouseEvent e) {\n        if (!resizing) {\n            return;\n        }\n\n        Component source = e.getComponent();\n        Point dragged = e.getPoint();\n        SwingUtilities.convertPointToScreen(dragged, source);\n\n        changeBounds(source, direction, bounds, pressed, dragged);\n    }\n\n    private void changeBounds(Component source, int direction, Rectangle bounds, Point pressed, Point current) {\n        Dimension minimumSize = source.getMinimumSize();\n        Dimension maximumSize = source.getMaximumSize();\n\n        int x = bounds.x;\n        int y = bounds.y;\n        int width = bounds.width;\n        int height = bounds.height;\n\n        if (WEST == (direction & WEST)) {\n            int drag = getDragDistance(pressed.x, current.x, snapSize.width);\n            int maximum = Math.min(width + x, maximumSize.width);\n            drag = getDragBounded(drag, snapSize.width, width, minimumSize.width, maximum);\n\n            x -= drag;\n            width += drag;\n        }\n\n        if (NORTH == (direction & NORTH)) {\n            int drag = getDragDistance(pressed.y, current.y, snapSize.height);\n            int maximum = Math.min(height + y, maximumSize.height);\n            drag = getDragBounded(drag, snapSize.height, height, minimumSize.height, maximum);\n\n            y -= drag;\n            height += drag;\n        }\n\n        if (EAST == (direction & EAST)) {\n            int drag = getDragDistance(current.x, pressed.x, snapSize.width);\n            Dimension boundingSize = getBoundingSize(source);\n            int maximum = Math.min(boundingSize.width - x, maximumSize.width);\n            drag = getDragBounded(drag, snapSize.width, width, minimumSize.width, maximum);\n            width += drag;\n        }\n\n        if (SOUTH == (direction & SOUTH)) {\n            int drag = getDragDistance(current.y, pressed.y, snapSize.height);\n            Dimension boundingSize = getBoundingSize(source);\n            int maximum = Math.min(boundingSize.height - y, maximumSize.height);\n            drag = getDragBounded(drag, snapSize.height, height, minimumSize.height, maximum);\n            height += drag;\n        }\n\n        source.setBounds(x, y, width, height);\n        source.validate();\n    }\n\n    /**\n     *  Determines how far the mouse has moved from where dragging started.\n     */\n    private int getDragDistance(int larger, int smaller, int snapSize) {\n        int halfway = snapSize / 2;\n        int drag = larger - smaller;\n        drag += (drag < 0) ? -halfway : halfway;\n        drag = (drag / snapSize) * snapSize;\n        return drag;\n    }\n\n    /**\n     *  Adjusts the drag value to be within the minimum and maximum range.\n     */\n    private int getDragBounded(int drag, int snapSize, int dimension, int minimum, int maximum) {\n        while (dimension + drag < minimum) {\n            drag += snapSize;\n        }\n        while (dimension + drag > maximum) {\n            drag -= snapSize;\n        }\n        return drag;\n    }\n\n    /**\n     *  Keeps the size of the component within the bounds of its parent.\n     */\n    private Dimension getBoundingSize(Component source) {\n        if (source instanceof Window) {\n            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n            Rectangle bounds = env.getMaximumWindowBounds();\n            return new Dimension(bounds.width, bounds.height);\n        } else {\n            return source.getParent().getSize();\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"Wingman/wingman","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/wingman/client/ui/util/ComponentBorderResizer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ba607a346ce39628a11319bbaa4589b7c90008d7","size":"19888","content":"/* -*- Mode: java; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// API class\n\npackage org.mozilla.javascript;\n\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\n\n/**\n * Factory class that Rhino runtime uses to create new {@link Context}\n * instances.  A <code>ContextFactory</code> can also notify listeners\n * about context creation and release.\n * <p>\n * When the Rhino runtime needs to create new {@link Context} instance during\n * execution of {@link Context#enter()} or {@link Context}, it will call\n * {@link #makeContext()} of the current global ContextFactory.\n * See {@link #getGlobal()} and {@link #initGlobal(ContextFactory)}.\n * <p>\n * It is also possible to use explicit ContextFactory instances for Context\n * creation. This is useful to have a set of independent Rhino runtime\n * instances under single JVM. See {@link #call(ContextAction)}.\n * <p>\n * The following example demonstrates Context customization to terminate\n * scripts running more then 10 seconds and to provide better compatibility\n * with JavaScript code using MSIE-specific features.\n * <pre>\n * import org.mozilla.javascript.*;\n *\n * class MyFactory extends ContextFactory\n * {\n *\n *     // Custom {@link Context} to store execution time.\n *     private static class MyContext extends Context\n *     {\n *         long startTime;\n *     }\n *\n *     static {\n *         // Initialize GlobalFactory with custom factory\n *         ContextFactory.initGlobal(new MyFactory());\n *     }\n *\n *     // Override {@link #makeContext()}\n *     protected Context makeContext()\n *     {\n *         MyContext cx = new MyContext();\n *         // Make Rhino runtime to call observeInstructionCount\n *         // each 10000 bytecode instructions\n *         cx.setInstructionObserverThreshold(10000);\n *         return cx;\n *     }\n *\n *     // Override {@link #hasFeature(Context, int)}\n *     public boolean hasFeature(Context cx, int featureIndex)\n *     {\n *         // Turn on maximum compatibility with MSIE scripts\n *         switch (featureIndex) {\n *             case {@link Context#FEATURE_NON_ECMA_GET_YEAR}:\n *                 return true;\n *\n *             case {@link Context#FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME}:\n *                 return true;\n *\n *             case {@link Context#FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER}:\n *                 return true;\n *\n *             case {@link Context#FEATURE_PARENT_PROTO_PROPERTIES}:\n *                 return false;\n *         }\n *         return super.hasFeature(cx, featureIndex);\n *     }\n *\n *     // Override {@link #observeInstructionCount(Context, int)}\n *     protected void observeInstructionCount(Context cx, int instructionCount)\n *     {\n *         MyContext mcx = (MyContext)cx;\n *         long currentTime = System.currentTimeMillis();\n *         if (currentTime - mcx.startTime > 10*1000) {\n *             // More then 10 seconds from Context creation time:\n *             // it is time to stop the script.\n *             // Throw Error instance to ensure that script will never\n *             // get control back through catch or finally.\n *             throw new Error();\n *         }\n *     }\n *\n *     // Override {@link #doTopCall(Callable,\n                               Context, Scriptable,\n                               Scriptable, Object[])}\n *     protected Object doTopCall(Callable callable,\n *                                Context cx, Scriptable scope,\n *                                Scriptable thisObj, Object[] args)\n *     {\n *         MyContext mcx = (MyContext)cx;\n *         mcx.startTime = System.currentTimeMillis();\n *\n *         return super.doTopCall(callable, cx, scope, thisObj, args);\n *     }\n *\n * }\n *\n * </pre>\n */\n\npublic class ContextFactory\n{\n    private static volatile boolean hasCustomGlobal;\n    private static ContextFactory global = new ContextFactory();\n\n    private volatile boolean sealed;\n\n    private final Object listenersLock = new Object();\n    private volatile Object listeners;\n    private boolean disabledListening;\n    private ClassLoader applicationClassLoader;\n\n    /**\n     * Listener of {@link Context} creation and release events.\n     */\n    public interface Listener\n    {\n        /**\n         * Notify about newly created {@link Context} object.\n         */\n        public void contextCreated(Context cx);\n\n        /**\n         * Notify that the specified {@link Context} instance is no longer\n         * associated with the current thread.\n         */\n        public void contextReleased(Context cx);\n    }\n\n    /**\n     * Get global ContextFactory.\n     *\n     * @see #hasExplicitGlobal()\n     * @see #initGlobal(ContextFactory)\n     */\n    public static ContextFactory getGlobal()\n    {\n        return global;\n    }\n\n    /**\n     * Check if global factory was set.\n     * Return true to indicate that {@link #initGlobal(ContextFactory)} was\n     * already called and false to indicate that the global factory was not\n     * explicitly set.\n     *\n     * @see #getGlobal()\n     * @see #initGlobal(ContextFactory)\n     */\n    public static boolean hasExplicitGlobal()\n    {\n        return hasCustomGlobal;\n    }\n\n    /**\n     * Set global ContextFactory.\n     * The method can only be called once.\n     *\n     * @see #getGlobal()\n     * @see #hasExplicitGlobal()\n     */\n    public synchronized static void initGlobal(ContextFactory factory)\n    {\n        if (factory == null) {\n            throw new IllegalArgumentException();\n        }\n        if (hasCustomGlobal) {\n            throw new IllegalStateException();\n        }\n        hasCustomGlobal = true;\n        global = factory;\n    }\n\n    public interface GlobalSetter {\n        public void setContextFactoryGlobal(ContextFactory factory);\n        public ContextFactory getContextFactoryGlobal();\n    }\n\n    public synchronized static GlobalSetter getGlobalSetter() {\n        if (hasCustomGlobal) {\n            throw new IllegalStateException();\n        }\n        hasCustomGlobal = true;\n        class GlobalSetterImpl implements GlobalSetter {\n            public void setContextFactoryGlobal(ContextFactory factory) {\n                global = factory == null ? new ContextFactory() : factory;\n            }\n            public ContextFactory getContextFactoryGlobal() {\n                return global;\n            }\n        }\n        return new GlobalSetterImpl();\n    }\n\n    /**\n     * Create new {@link Context} instance to be associated with the current\n     * thread.\n     * This is a callback method used by Rhino to create {@link Context}\n     * instance when it is necessary to associate one with the current\n     * execution thread. <tt>makeContext()</tt> is allowed to call\n     * {@link Context#seal(Object)} on the result to prevent\n     * {@link Context} changes by hostile scripts or applets.\n     */\n    protected Context makeContext()\n    {\n        return new Context(this);\n    }\n\n    /**\n     * Implementation of {@link Context#hasFeature(int featureIndex)}.\n     * This can be used to customize {@link Context} without introducing\n     * additional subclasses.\n     */\n    protected boolean hasFeature(Context cx, int featureIndex)\n    {\n        int version;\n        switch (featureIndex) {\n          case Context.FEATURE_NON_ECMA_GET_YEAR:\n           /*\n            * During the great date rewrite of 1.3, we tried to track the\n            * evolving ECMA standard, which then had a definition of\n            * getYear which always subtracted 1900.  Which we\n            * implemented, not realizing that it was incompatible with\n            * the old behavior...  now, rather than thrash the behavior\n            * yet again, we've decided to leave it with the - 1900\n            * behavior and point people to the getFullYear method.  But\n            * we try to protect existing scripts that have specified a\n            * version...\n            */\n            version = cx.getLanguageVersion();\n            return (version == Context.VERSION_1_0\n                    || version == Context.VERSION_1_1\n                    || version == Context.VERSION_1_2);\n\n          case Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME:\n            return false;\n\n          case Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER:\n            return true;\n\n          case Context.FEATURE_TO_STRING_AS_SOURCE:\n            version = cx.getLanguageVersion();\n            return version == Context.VERSION_1_2;\n\n          case Context.FEATURE_PARENT_PROTO_PROPERTIES:\n            return true;\n\n          case Context.FEATURE_E4X:\n            version = cx.getLanguageVersion();\n            return (version == Context.VERSION_DEFAULT\n                    || version >= Context.VERSION_1_6);\n\n          case Context.FEATURE_DYNAMIC_SCOPE:\n            return false;\n\n          case Context.FEATURE_STRICT_VARS:\n            return false;\n\n          case Context.FEATURE_STRICT_EVAL:\n            return false;\n\n          case Context.FEATURE_LOCATION_INFORMATION_IN_ERROR:\n            return false;\n\n          case Context.FEATURE_STRICT_MODE:\n            return false;\n\n          case Context.FEATURE_WARNING_AS_ERROR:\n            return false;\n\n          case Context.FEATURE_ENHANCED_JAVA_ACCESS:\n            return false;\n\n          case Context.FEATURE_V8_EXTENSIONS:\n            return true;\n\n          case Context.FEATURE_OLD_UNDEF_NULL_THIS:\n              return cx.getLanguageVersion() <= Context.VERSION_1_7;\n\n          case Context.FEATURE_ENUMERATE_IDS_FIRST:\n              return cx.getLanguageVersion() >= Context.VERSION_ES6;\n        }\n        // It is a bug to call the method with unknown featureIndex\n        throw new IllegalArgumentException(String.valueOf(featureIndex));\n    }\n\n    private boolean isDom3Present() {\n        Class<?> nodeClass = Kit.classOrNull(\"org.w3c.dom.Node\");\n        if (nodeClass == null) return false;\n        // Check to see whether DOM3 is present; use a new method defined in\n        // DOM3 that is vital to our implementation\n        try {\n            nodeClass.getMethod(\"getUserData\", new Class<?>[] { String.class });\n            return true;\n        } catch (NoSuchMethodException e) {\n            return false;\n        }\n    }\n\n    /**\n     * Provides a default\n     * {@link org.mozilla.javascript.xml.XMLLib.Factory XMLLib.Factory}\n     * to be used by the <code>Context</code> instances produced by this\n     * factory. See {@link Context#getE4xImplementationFactory} for details.\n     *\n     * May return null, in which case E4X functionality is not supported in\n     * Rhino.\n     *\n     * The default implementation now prefers the DOM3 E4X implementation.\n     */\n    protected org.mozilla.javascript.xml.XMLLib.Factory\n        getE4xImplementationFactory()\n    {\n        // Must provide default implementation, rather than abstract method,\n        // so that past implementors of ContextFactory do not fail at runtime\n        // upon invocation of this method.\n        // Note that the default implementation returns null if we\n        // neither have XMLBeans nor a DOM3 implementation present.\n\n        if (isDom3Present()) {\n            return org.mozilla.javascript.xml.XMLLib.Factory.create(\n                \"org.mozilla.javascript.xmlimpl.XMLLibImpl\"\n            );\n        } else {\n            return null;\n        }\n    }\n\n\n    /**\n     * Create class loader for generated classes.\n     * This method creates an instance of the default implementation\n     * of {@link GeneratedClassLoader}. Rhino uses this interface to load\n     * generated JVM classes when no {@link SecurityController}\n     * is installed.\n     * Application can override the method to provide custom class loading.\n     */\n    protected GeneratedClassLoader createClassLoader(final ClassLoader parent)\n    {\n        return AccessController.doPrivileged(new PrivilegedAction<DefiningClassLoader>() {\n            public DefiningClassLoader run(){\n                return new DefiningClassLoader(parent);\n            }\n        });\n    }\n\n    /**\n     * Get ClassLoader to use when searching for Java classes.\n     * Unless it was explicitly initialized with\n     * {@link #initApplicationClassLoader(ClassLoader)} the method returns\n     * null to indicate that Thread.getContextClassLoader() should be used.\n     */\n    public final ClassLoader getApplicationClassLoader()\n    {\n        return applicationClassLoader;\n    }\n\n    /**\n     * Set explicit class loader to use when searching for Java classes.\n     *\n     * @see #getApplicationClassLoader()\n     */\n    public final void initApplicationClassLoader(ClassLoader loader)\n    {\n        if (loader == null)\n            throw new IllegalArgumentException(\"loader is null\");\n        if (!Kit.testIfCanLoadRhinoClasses(loader))\n            throw new IllegalArgumentException(\n                \"Loader can not resolve Rhino classes\");\n\n        if (this.applicationClassLoader != null)\n            throw new IllegalStateException(\n                \"applicationClassLoader can only be set once\");\n        checkNotSealed();\n\n        this.applicationClassLoader = loader;\n    }\n\n    /**\n     * Execute top call to script or function.\n     * When the runtime is about to execute a script or function that will\n     * create the first stack frame with scriptable code, it calls this method\n     * to perform the real call. In this way execution of any script\n     * happens inside this function.\n     */\n    protected Object doTopCall(Callable callable,\n                               Context cx, Scriptable scope,\n                               Scriptable thisObj, Object[] args)\n    {\n        Object result = callable.call(cx, scope, thisObj, args);\n        return result instanceof ConsString ? result.toString() : result;\n    }\n\n    /**\n     * Implementation of\n     * {@link Context#observeInstructionCount(int instructionCount)}.\n     * This can be used to customize {@link Context} without introducing\n     * additional subclasses.\n     */\n    protected void observeInstructionCount(Context cx, int instructionCount) {\n    }\n\n    protected void onContextCreated(Context cx)\n    {\n        Object listeners = this.listeners;\n        for (int i = 0; ; ++i) {\n            Listener l = (Listener)Kit.getListener(listeners, i);\n            if (l == null)\n                break;\n            l.contextCreated(cx);\n        }\n    }\n\n    protected void onContextReleased(Context cx)\n    {\n        Object listeners = this.listeners;\n        for (int i = 0; ; ++i) {\n            Listener l = (Listener)Kit.getListener(listeners, i);\n            if (l == null)\n                break;\n            l.contextReleased(cx);\n        }\n    }\n\n    public final void addListener(Listener listener)\n    {\n        checkNotSealed();\n        synchronized (listenersLock) {\n            if (disabledListening) {\n                throw new IllegalStateException();\n            }\n            listeners = Kit.addListener(listeners, listener);\n        }\n    }\n\n    public final void removeListener(Listener listener)\n    {\n        checkNotSealed();\n        synchronized (listenersLock) {\n            if (disabledListening) {\n                throw new IllegalStateException();\n            }\n            listeners = Kit.removeListener(listeners, listener);\n        }\n    }\n\n    /**\n     * The method is used only to implement\n     * Context.disableStaticContextListening()\n     */\n    final void disableContextListening()\n    {\n        checkNotSealed();\n        synchronized (listenersLock) {\n            disabledListening = true;\n            listeners = null;\n        }\n    }\n\n    /**\n     * Checks if this is a sealed ContextFactory.\n     * @see #seal()\n     */\n    public final boolean isSealed()\n    {\n        return sealed;\n    }\n\n    /**\n     * Seal this ContextFactory so any attempt to modify it like to add or\n     * remove its listeners will throw an exception.\n     * @see #isSealed()\n     */\n    public final void seal()\n    {\n        checkNotSealed();\n        sealed = true;\n    }\n\n    protected final void checkNotSealed()\n    {\n        if (sealed) throw new IllegalStateException();\n    }\n\n    /**\n     * Call {@link ContextAction#run(Context cx)}\n     * using the {@link Context} instance associated with the current thread.\n     * If no Context is associated with the thread, then\n     * {@link #makeContext()} will be called to construct\n     * new Context instance. The instance will be temporary associated\n     * with the thread during call to {@link ContextAction#run(Context)}.\n     *\n     * @see ContextFactory#call(ContextAction)\n     * @see Context#call(ContextFactory factory, Callable callable,\n     *                   Scriptable scope, Scriptable thisObj,\n     *                   Object[] args)\n     */\n    public final Object call(ContextAction action)\n    {\n        return Context.call(this, action);\n    }\n\n    /**\n     * Get a context associated with the current thread, creating one if need\n     * be. The Context stores the execution state of the JavaScript engine, so\n     * it is required that the context be entered before execution may begin.\n     * Once a thread has entered a Context, then getCurrentContext() may be\n     * called to find the context that is associated with the current thread.\n     * <p>\n     * Calling <code>enterContext()</code> will return either the Context\n     * currently associated with the thread, or will create a new context and\n     * associate it with the current thread. Each call to\n     * <code>enterContext()</code> must have a matching call to\n     * {@link Context#exit()}.\n     * <pre>\n     *      Context cx = contextFactory.enterContext();\n     *      try {\n     *          ...\n     *          cx.evaluateString(...);\n     *      } finally {\n     *          Context.exit();\n     *      }\n     * </pre>\n     * Instead of using <tt>enterContext()</tt>, <tt>exit()</tt> pair consider\n     * using {@link #call(ContextAction)} which guarantees proper association\n     * of Context instances with the current thread.\n     * With this method the above example becomes:\n     * <pre>\n     *      ContextFactory.call(new ContextAction() {\n     *          public Object run(Context cx) {\n     *              ...\n     *              cx.evaluateString(...);\n     *              return null;\n     *          }\n     *      });\n     * </pre>\n     * @return a Context associated with the current thread\n     * @see Context#getCurrentContext()\n     * @see Context#exit()\n     * @see #call(ContextAction)\n     */\n    public Context enterContext()\n    {\n        return enterContext(null);\n    }\n\n    /**\n     * @deprecated use {@link #enterContext()} instead\n     * @return a Context associated with the current thread\n     */\n    @Deprecated\n    public final Context enter()\n    {\n        return enterContext(null);\n    }\n\n    /**\n     * @deprecated Use {@link Context#exit()} instead.\n     */\n    @Deprecated\n    public final void exit()\n    {\n        Context.exit();\n    }\n\n    /**\n     * Get a Context associated with the current thread, using the given\n     * Context if need be.\n     * <p>\n     * The same as <code>enterContext()</code> except that <code>cx</code>\n     * is associated with the current thread and returned if the current thread\n     * has no associated context and <code>cx</code> is not associated with any\n     * other thread.\n     * @param cx a Context to associate with the thread if possible\n     * @return a Context associated with the current thread\n     * @see #enterContext()\n     * @see #call(ContextAction)\n     * @throws IllegalStateException if <code>cx</code> is already associated\n     * with a different thread\n     */\n    public final Context enterContext(Context cx)\n    {\n        return Context.enter(cx, this);\n    }\n}","binary":"false","copies":"1","sample_repo_name":"mozilla/rhino","sample_ref":"refs/heads/master","sample_path":"src/org/mozilla/javascript/ContextFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"03ae441b22aca68fe191041d2c947d3f3638a485","size":"5973","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.clinical.vo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.Iterator;\r\nimport ims.framework.enumerations.SortOrder;\r\n\r\n/**\r\n * Linked to clinical.MedicationOverview business object (ID: 1072100034).\r\n */\r\npublic class MedicationOverviewRefVoCollection extends ims.vo.ValueObjectCollection implements ims.domain.IDomainCollectionGetter, ims.vo.ImsCloneable, Iterable<MedicationOverviewRefVo>\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tprivate ArrayList<MedicationOverviewRefVo> col = new ArrayList<MedicationOverviewRefVo>();\r\n\tpublic final String getBoClassName()\r\n\t{\r\n\t\treturn \"ims.clinical.domain.objects.MedicationOverview\";\r\n\t}\r\n\tpublic ims.domain.IDomainGetter[] getIDomainGetterItems()\r\n\t{\r\n\t\tims.domain.IDomainGetter[] result = new ims.domain.IDomainGetter[col.size()];\r\n\t\tcol.toArray(result);\r\n\t\treturn result;\r\n\t}\r\n\tpublic boolean add(MedicationOverviewRefVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tif(this.col.indexOf(value) < 0)\r\n\t\t{\r\n\t\t\treturn this.col.add(value);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tpublic boolean add(int index, MedicationOverviewRefVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tif(this.col.indexOf(value) < 0)\r\n\t\t{\r\n\t\t\tthis.col.add(index, value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tpublic void clear()\r\n\t{\r\n\t\tthis.col.clear();\r\n\t}\r\n\tpublic void remove(int index)\r\n\t{\r\n\t\tthis.col.remove(index);\r\n\t}\r\n\tpublic int size()\r\n\t{\r\n\t\treturn this.col.size();\r\n\t}\r\n\tpublic int indexOf(MedicationOverviewRefVo instance)\r\n\t{\r\n\t\treturn col.indexOf(instance);\r\n\t}\r\n\tpublic MedicationOverviewRefVo get(int index)\r\n\t{\r\n\t\treturn this.col.get(index);\r\n\t}\r\n\tpublic boolean set(int index, MedicationOverviewRefVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tthis.col.set(index, value);\r\n\t\treturn true;\r\n\t}\r\n\tpublic void remove(MedicationOverviewRefVo instance)\r\n\t{\r\n\t\tif(instance != null)\r\n\t\t{\r\n\t\t\tint index = indexOf(instance);\r\n\t\t\tif(index >= 0)\r\n\t\t\t\tremove(index);\r\n\t\t}\r\n\t}\r\n\tpublic boolean contains(MedicationOverviewRefVo instance)\r\n\t{\r\n\t\treturn indexOf(instance) >= 0;\r\n\t}\r\n\tpublic Object clone()\r\n\t{\r\n\t\tMedicationOverviewRefVoCollection clone = new MedicationOverviewRefVoCollection();\r\n\r\n\t\tfor(int x = 0; x < this.col.size(); x++)\r\n\t\t{\r\n\t\t\tif(this.col.get(x) != null)\r\n\t\t\t\tclone.col.add((MedicationOverviewRefVo)this.col.get(x).clone());\r\n\t\t\telse\r\n\t\t\t\tclone.col.add(null);\r\n\t\t}\r\n\t\treturn clone;\r\n\t}\r\n\tpublic boolean isValidated()\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\tpublic String[] validate()\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\tpublic MedicationOverviewRefVo[] toArray()\r\n\t{\r\n\t\tMedicationOverviewRefVo[] arr = new MedicationOverviewRefVo[col.size()];\r\n\t\tcol.toArray(arr);\r\n\t\treturn arr;\r\n\t}\r\n\tpublic MedicationOverviewRefVoCollection sort()\r\n\t{\r\n\t\treturn sort(SortOrder.ASCENDING);\r\n\t}\r\n\tpublic MedicationOverviewRefVoCollection sort(SortOrder order)\r\n\t{\r\n\t\treturn sort(new MedicationOverviewRefVoComparator(order));\r\n\t}\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tpublic MedicationOverviewRefVoCollection sort(Comparator comparator)\r\n\t{\r\n\t\tCollections.sort(this.col, comparator);\r\n\t\treturn this;\r\n\t}\r\n\tpublic Iterator<MedicationOverviewRefVo> iterator()\r\n\t{\r\n\t\treturn col.iterator();\r\n\t}\r\n\t@Override\r\n\tprotected ArrayList getTypedCollection()\r\n\t{\r\n\t\treturn col;\r\n\t}\r\n\tprivate class MedicationOverviewRefVoComparator implements Comparator\r\n\t{\r\n\t\tprivate int direction = 1;\r\n\t\tpublic MedicationOverviewRefVoComparator()\r\n\t\t{\r\n\t\t\tthis(SortOrder.ASCENDING);\r\n\t\t}\r\n\t\tpublic MedicationOverviewRefVoComparator(SortOrder order)\r\n\t\t{\r\n\t\t\tif (order == SortOrder.DESCENDING)\r\n\t\t\t{\r\n\t\t\t\tthis.direction = -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic int compare(Object obj1, Object obj2)\r\n\t\t{\r\n\t\t\tMedicationOverviewRefVo voObj1 = (MedicationOverviewRefVo)obj1;\r\n\t\t\tMedicationOverviewRefVo voObj2 = (MedicationOverviewRefVo)obj2;\r\n\t\t\treturn direction*(voObj1.compareTo(voObj2));\r\n\t\t}\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/ValueObjects/src/ims/clinical/vo/MedicationOverviewRefVoCollection.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"f32cc44cf5aac3ca18fd3e76faaa82dc3edc5a6f","size":"2422","content":"//////////////////////////////////////////////////////////////////////////////////////////\n// Copyright (c) 2016, Jo\u00e3o Vitor Verona Biazibetti - All Rights Reserved                /\n//                                                                                       /\n// Licensed under the GNU General Public License v3;                                     /\n// you may not use this file except in compliance with the License.                      /\n//                                                                                       /\n// You may obtain a copy of the License at                                               /\n//     http://www.gnu.org/licenses/gpl.html                                              /\n//                                                                                       /\n// Unless required by applicable law or agreed to in writing, software                   /\n// distributed under the License is distributed on an \"AS IS\" BASIS,                     /\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.              /\n// See the License for the specific language governing permissions and                   /\n// limitations under the License.                                                        /\n//                                                                                       /\n// Written by Jo\u00e3o Vitor Verona Biazibetti <joaaoverona@gmail.com>, March 2016           /\n// https://www.github.com/BloodShura                                                     /\n//////////////////////////////////////////////////////////////////////////////////////////\n\npackage br.shura.team.mpsbot.ui.tasks;\n\nimport br.shura.coding.styling.Styling;\nimport br.shura.coding.styling.attribute.defaults.Bold;\nimport br.shura.coding.styling.attribute.defaults.Foreground;\nimport br.shura.coding.styling.style.BoundedStyle;\nimport br.shura.team.mpsbot.venusext.Helper;\nimport br.shura.x.color.Color;\n\n/**\n * TaskOutputStyling.java\n *\n * @author <a href=\"https://www.github.com/BloodShura\">BloodShura</a> (Jo\u00e3o Vitor Verona Biazibetti)\n * @contact joaaoverona@gmail.com\n * @date 25/06/16 - 23:38\n * @since GAMMA - 0x3\n */\npublic class TaskOutputStyling extends Styling {\n  public TaskOutputStyling() {\n    BoundedStyle style = createBoundedStyle(Helper.REGEX_PREFIX, \"\\n\");\n\n    style.add(new Bold());\n    style.add(new Foreground(Color.ORANGE_RED));\n  }\n}","binary":"false","copies":"1","sample_repo_name":"BloodShura/MPSBot","sample_ref":"refs/heads/master","sample_path":"src/br/shura/team/mpsbot/ui/tasks/TaskOutputStyling.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1dcf24f279deac79f2203b0e1b1c507a69826f5f","size":"1146","content":"/**\n * Copyright (c) 2010-2013, openHAB.org and others.\n *\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n */\npackage org.openhab.io.habmin.services.bundle;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.xml.bind.annotation.XmlRootElement;\n\n/**\n * This is a java bean that is used with JAXB to serialize items\n * to XML or JSON.\n *\n * @author Chris Jackson\n * @since 1.3.0\n *\n */\n@XmlRootElement(name=\"binding\")\npublic class BindingBean {\n\n\tpublic String bundle;\n\tpublic String name;\n\tpublic String pid;\n\tpublic String type;\n\tpublic String author;\n\tpublic String version;\n\tpublic String oh_version;\n\tpublic String link;\n\tpublic String osgiVersion;\n\n\tpublic List<BindingConfigBean> generalconfig = new ArrayList<BindingConfigBean>();\n\tpublic List<BindingConfigBean> interfaceconfig = new ArrayList<BindingConfigBean>();\n\tpublic List<BindingConfigBean> itemconfig = new ArrayList<BindingConfigBean>();\n\n\tpublic BindingBean() {}\n}\n","binary":"false","copies":"1","sample_repo_name":"jenskastensson/openhab","sample_ref":"refs/heads/master","sample_path":"bundles/io/org.openhab.io.habmin/src/main/java/org/openhab/io/habmin/services/bundle/BindingBean.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"69b63560e37b21f88bc0af8c964a7d344e96b4eb","size":"2281","content":"/*\n *  Copyright 1997-2011 teatrove.org\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage org.teatrove.teaapps.contexts;\n\n/**\n * Custom Tea context that allow the template to throw errors that may get\n * propogated to {@link ServletException} causing the given response to fail.\n * \n * @author Scott Jappinen\n */\npublic class TemplateExceptionContext {\n\n    /**\n     * Throw a template exception with no message or cause.\n     * \n     * @throws TemplateException the generated error\n     */\n\tpublic void throwTemplateException() \n\t    throws TemplateException {\n\t    \n\t\tthrow new TemplateException();\n\t}\n\n\t/**\n\t * Throw a template exception with the given message.\n\t * \n\t * @param message The message to include in the exception\n\t * \n\t * @throws TemplateException the generated error\n\t */\n    public void throwTemplateException(String message) \n        throws TemplateException {\n        \n        throw new TemplateException(message);\n    }\n    \n    /**\n     * Throw a template exception with the given cause.\n     * \n     * @param cause The cause to include in the exception\n     * \n     * @throws TemplateException the generated error\n     */\n    public void throwTemplateException(Throwable cause) \n        throws TemplateException {\n        \n        throw new TemplateException(cause);\n    }\n    \n    /**\n     * Throw a template exception with the given message and cause.\n     * \n     * @param message The message to include in the exception\n     * @param cause The cause to include in the exception\n     * \n     * @throws TemplateException the generated error\n     */\n    public void throwTemplateException(String message, Throwable cause) \n        throws TemplateException {\n        \n        throw new TemplateException(message, cause);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"teatrove/teatrove","sample_ref":"refs/heads/master","sample_path":"teaapps/src/main/java/org/teatrove/teaapps/contexts/TemplateExceptionContext.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9de8363cdc80778fb6502c47afb33b1dd8c57ba9","size":"1839","content":"/*\n * Copyright 2013-2015 must-be.org\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.mustbe.consulo.csharp.lang.psi.impl.source.resolve.handlers;\n\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\nimport org.mustbe.consulo.RequiredReadAction;\nimport org.mustbe.consulo.csharp.lang.psi.CSharpReferenceExpression;\nimport org.mustbe.consulo.csharp.lang.psi.impl.source.resolve.CSharpResolveOptions;\nimport org.mustbe.consulo.dotnet.resolve.DotNetGenericExtractor;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.ResolveResult;\nimport com.intellij.util.Processor;\n\n/**\n * @author VISTALL\n * @since 28.07.2015\n */\npublic class ExpressionOrTypeLikeKindProcessor implements KindProcessor\n{\n\t@RequiredReadAction\n\t@Override\n\tpublic void process(@NotNull CSharpResolveOptions options,\n\t\t\t@NotNull DotNetGenericExtractor defaultExtractor,\n\t\t\t@Nullable PsiElement forceQualifierElement,\n\t\t\t@NotNull Processor<ResolveResult> processor)\n\t{\n\t\toptions.kind(CSharpReferenceExpression.ResolveToKind.ANY_MEMBER);\n\t\tnew AnyMemberKindProcessor().process(options, defaultExtractor, forceQualifierElement, processor);\n\n\t\toptions.kind(CSharpReferenceExpression.ResolveToKind.TYPE_LIKE);\n\t\tnew TypeLikeKindProcessor().process(options, defaultExtractor, forceQualifierElement, processor);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"consulo/consulo-csharp","sample_ref":"refs/heads/master","sample_path":"csharp-psi-impl/src/org/mustbe/consulo/csharp/lang/psi/impl/source/resolve/handlers/ExpressionOrTypeLikeKindProcessor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"77505cae01924dbe90668dfba5613077dd64352b","size":"4646","content":"package cn.reactnative.modules.update;\n\nimport android.app.Activity;\nimport android.content.Intent;\n\nimport com.facebook.react.bridge.Promise;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.bridge.ReactContextBaseJavaModule;\nimport com.facebook.react.bridge.ReactMethod;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.bridge.UiThreadUtil;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by tdzl2003 on 3/31/16.\n */\npublic class UpdateModule extends ReactContextBaseJavaModule{\n    UpdateContext updateContext;\n\n    public UpdateModule(ReactApplicationContext reactContext, UpdateContext updateContext) {\n        super(reactContext);\n        this.updateContext = updateContext;\n    }\n\n    public UpdateModule(ReactApplicationContext reactContext) {\n        this(reactContext, new UpdateContext(reactContext.getApplicationContext()));\n    }\n\n    @Override\n    public Map<String, Object> getConstants() {\n        final Map<String, Object> constants = new HashMap<>();\n        constants.put(\"downloadRootDir\", updateContext.getRootDir());\n        constants.put(\"packageVersion\", updateContext.getPackageVersion());\n        constants.put(\"currentVersion\", updateContext.getCurrentVersion());\n        boolean isFirstTime = updateContext.isFirstTime();\n        constants.put(\"isFirstTime\", isFirstTime);\n        if (isFirstTime) {\n            updateContext.clearFirstTime();\n        }\n        boolean isRolledBack = updateContext.isRolledBack();\n        constants.put(\"isRolledBack\", isRolledBack);\n        if (isRolledBack) {\n            updateContext.clearRollbackMark();\n        }\n        return constants;\n    }\n\n    @Override\n    public String getName() {\n        return \"RCTHotUpdate\";\n    }\n\n    @ReactMethod\n    public void downloadUpdate(ReadableMap options, final Promise promise){\n        String url = options.getString(\"updateUrl\");\n        String hash = options.getString(\"hashName\");\n        updateContext.downloadFile(url, hash, new UpdateContext.DownloadFileListener() {\n            @Override\n            public void onDownloadCompleted() {\n                promise.resolve(null);\n            }\n\n            @Override\n            public void onDownloadFailed(Throwable error) {\n                promise.reject(error);\n            }\n        });\n    }\n\n    @ReactMethod\n    public void downloadPatchFromPackage(ReadableMap options, final Promise promise){\n        String url = options.getString(\"updateUrl\");\n        String hash = options.getString(\"hashName\");\n        updateContext.downloadPatchFromApk(url, hash, new UpdateContext.DownloadFileListener() {\n            @Override\n            public void onDownloadCompleted() {\n                promise.resolve(null);\n            }\n\n            @Override\n            public void onDownloadFailed(Throwable error) {\n                promise.reject(error);\n            }\n        });\n    }\n\n    @ReactMethod\n    public void downloadPatchFromPpk(ReadableMap options, final Promise promise){\n        String url = options.getString(\"updateUrl\");\n        String hash = options.getString(\"hashName\");\n        String originHash = options.getString(\"originHashName\");\n        updateContext.downloadPatchFromPpk(url, hash, originHash, new UpdateContext.DownloadFileListener() {\n            @Override\n            public void onDownloadCompleted() {\n                promise.resolve(null);\n            }\n\n            @Override\n            public void onDownloadFailed(Throwable error) {\n                promise.reject(error);\n            }\n        });\n    }\n\n    @ReactMethod\n    public void reloadUpdate(ReadableMap options) {\n        final String hash = options.getString(\"hashName\");\n\n        UiThreadUtil.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                updateContext.switchVersion(hash);\n                Activity activity = getCurrentActivity();\n                Intent intent = activity.getIntent();\n                activity.finish();\n                activity.startActivity(intent);\n            }\n        });\n    }\n\n    @ReactMethod\n    public void setNeedUpdate(ReadableMap options) {\n        final String hash = options.getString(\"hashName\");\n\n        UiThreadUtil.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                updateContext.switchVersion(hash);\n            }\n        });\n    }\n\n    @ReactMethod\n    public void markSuccess() {\n        UiThreadUtil.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                updateContext.markSuccess();\n            }\n        });\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"reactnativecn/react-native-pushy","sample_ref":"refs/heads/master","sample_path":"android/src/main/java/cn/reactnative/modules/update/UpdateModule.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"cc42bb9e7359b6fa1639a93a27e6a180ec002870","size":"1728","content":"/*\n * Copyright (c) 1998-2015 Caucho Technology -- all rights reserved\n *\n * This file is part of Baratine(TM)\n *\n * Each copy or derived work must preserve the copyright notice and this\n * notice unmodified.\n *\n * Baratine is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Baratine is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty\n * of NON-INFRINGEMENT.  See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Baratine; if not, write to the\n *\n *   Free Software Foundation, Inc.\n *   59 Temple Place, Suite 330\n *   Boston, MA 02111-1307  USA\n *\n * @author Scott Ferguson\n */\n\npackage com.caucho.v5.bartender.link;\n\nimport com.caucho.v5.bartender.BartenderSystem;\nimport com.caucho.v5.bartender.ServerBartender;\n\n/**\n * The bartender: scheme addresses servers known to the system. The address\n * is the IP local address of the target server.\n * \n * bartender://192.168.1.10:6810\n */\npublic class SchemeBartenderSystem extends SchemeBartenderBase\n{\n  public SchemeBartenderSystem(BartenderSystem bartender,\n                         ServerLinkBartenderBuilder builder,\n                         ServerBartender selfServer)\n  {\n    super(bartender, builder, selfServer);\n  }\n  \n  @Override\n  public String address()\n  {\n    return \"bartender:\";\n  }\n  \n  protected boolean isSystem()\n  {\n    return true;\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"baratine/baratine","sample_ref":"refs/heads/master","sample_path":"framework/src/main/java/com/caucho/v5/bartender/link/SchemeBartenderSystem.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c75ecc0f83cccf5b37fbba43695a1c0338026aa9","size":"772","content":"/* This file was generated by SableCC (http://www.sablecc.org/). */\n\npackage com.abstratt.mdd.frontend.textuml.grammar.node;\n\nimport com.abstratt.mdd.frontend.textuml.grammar.analysis.*;\n\n@SuppressWarnings(\"nls\")\npublic final class TDot extends Token\n{\n    public TDot()\n    {\n        super.setText(\".\");\n    }\n\n    public TDot(int line, int pos)\n    {\n        super.setText(\".\");\n        setLine(line);\n        setPos(pos);\n    }\n\n    @Override\n    public Object clone()\n    {\n      return new TDot(getLine(), getPos());\n    }\n\n    public void apply(Switch sw)\n    {\n        ((Analysis) sw).caseTDot(this);\n    }\n\n    @Override\n    public void setText(@SuppressWarnings(\"unused\") String text)\n    {\n        throw new RuntimeException(\"Cannot change TDot text.\");\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"abstratt/textuml","sample_ref":"refs/heads/master","sample_path":"plugins/com.abstratt.mdd.frontend.textuml.grammar/src-gen/com/abstratt/mdd/frontend/textuml/grammar/node/TDot.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0789f7523e45c6484db094b72d5e51c867a8cec8","size":"566","content":"\npackage com.microsoft.bingads.reporting;\n\nimport java.util.Collection;\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\n\npublic class Adapter6\n    extends XmlAdapter<String, Collection<AdTypeReportFilter>>\n{\n\n\n    public Collection<AdTypeReportFilter> unmarshal(String value) {\n        return (com.microsoft.bingads.reporting.AdTypeReportFilterConverter.convertToList(value));\n    }\n\n    public String marshal(Collection<AdTypeReportFilter> value) {\n        return (com.microsoft.bingads.reporting.AdTypeReportFilterConverter.convertToString(value));\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"BingAds/BingAds-Java-SDK","sample_ref":"refs/heads/master","sample_path":"proxies/com/microsoft/bingads/reporting/Adapter6.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"71493358aadf64eb855faa4386300c777b53e386","size":"1256","content":"package com.cyc.baseclient.util;\n\n/*\n * #%L\n * File: CycWorkerEvent.java\n * Project: Base Client\n * %%\n * Copyright (C) 2013 - 2016 Cycorp, Inc.\n * %%\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * #L%\n */\n\nimport com.cyc.baseclient.ui.SwingWorker;\nimport com.cyc.baseclient.ui.CycWorker;\nimport java.util.*;\n\n/**\n * This is an event object for CycWorker events. It is currently\n * an unmodified subclass of EventObject, but more functionality may\n * be added in the future.\n */\npublic class CycWorkerEvent extends EventObject {\n    \n    /** \n     * Creates a new instance of CycWorkerEvent.\n     * @param source The CycWorker that is generating this event.\n     **/\n    public CycWorkerEvent(Object source) {\n        super(source);\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"cycorp/api-suite","sample_ref":"refs/heads/master","sample_path":"core-client/base-client/src/main/java/com/cyc/baseclient/util/CycWorkerEvent.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"13df1d7225d90c37f8e5b402f1bf9300ae71e725","size":"6796","content":"package com.marklogic.spring.batch.core.repository.dao;\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.JAXBException;\n\nimport com.marklogic.spring.batch.jdbc.support.incrementer.UriIncrementer;\nimport org.springframework.batch.core.JobExecution;\nimport org.springframework.batch.core.StepExecution;\nimport org.springframework.batch.core.repository.dao.JobExecutionDao;\nimport org.springframework.batch.core.repository.dao.StepExecutionDao;\nimport org.springframework.util.Assert;\nimport org.springframework.util.ReflectionUtils;\n\nimport com.marklogic.client.DatabaseClient;\nimport com.marklogic.spring.batch.core.AdaptedStepExecution;\n\npublic class MarkLogicStepExecutionDao extends AbstractMarkLogicBatchMetadataDao implements StepExecutionDao {\n\n\tprivate JobExecutionDao jobExecutionDao;\n\t\n\tpublic MarkLogicStepExecutionDao(DatabaseClient databaseClient) {\n\t\tthis.databaseClient = databaseClient;\n\t\tthis.incrementer = new UriIncrementer();\n\t}\n\n\t@Override\n\tpublic void saveStepExecution(StepExecution stepExecution) {\n\t\tAssert.isTrue(stepExecution.getId() == null);\n\t\tAssert.isTrue(stepExecution.getVersion() == null);\n\t\t\n\t\tAssert.notNull(stepExecution.getJobExecutionId(), \"JobExecution must be saved already.\");\n\t\tJobExecution jobExecution = jobExecutionDao.getJobExecution(stepExecution.getJobExecution().getId());\n\t\tAssert.notNull(jobExecution, \"JobExecution must be saved already.\");\n\t\t\n\t\tvalidateStepExecution(stepExecution);\n\t\t\n\t\tstepExecution.setId(incrementer.nextLongValue());\n\t\tstepExecution.incrementVersion();\n\t\t\n\t\tList<StepExecution> stepExecutions = new ArrayList<>(stepExecution.getJobExecution().getStepExecutions());\n\t\tstepExecutions.add(stepExecution);\n\t\tjobExecution.addStepExecutions(stepExecutions);\n\t\tjobExecutionDao.updateJobExecution(jobExecution);\n\t\tlogger.info(\"insert step execution: \" + stepExecution.getId() + \",jobExecution:\" + jobExecution.getId());\n\t}\n\n\t@Override\n\tpublic void saveStepExecutions(Collection<StepExecution> stepExecutions) {\n\t\tAssert.notNull(stepExecutions, \"Attempt to save a null collection of step executions\");\n\n        if (!stepExecutions.isEmpty()) {\n        \t\n        \tLong jobExecutionId = stepExecutions.iterator().next().getJobExecutionId();\n        \tAssert.notNull(jobExecutionId, \"JobExecution must be saved already.\");\n    \t\tJobExecution jobExecution = jobExecutionDao.getJobExecution(jobExecutionId);\n    \t\tAssert.notNull(jobExecution, \"JobExecution must be saved already.\");\n        \t\n        \tList<StepExecution> stepExecutionList = new ArrayList<>();\n        \t\n        \tfor (StepExecution stepExecution : stepExecutions) {\n        \t\tAssert.isTrue(stepExecution.getId() == null);\n        \t\tAssert.isTrue(stepExecution.getVersion() == null);\n        \t\tvalidateStepExecution(stepExecution);\n        \t\t\n        \t\tstepExecution.setId(incrementer.nextLongValue());\n        \t\tstepExecution.incrementVersion();\n        \t\tstepExecutionList.add(stepExecution);\n        \t}\n        \t\n        \tjobExecution.addStepExecutions(stepExecutionList);\n        \tjobExecutionDao.updateJobExecution(jobExecution);\n        }\t\n\t}\n\n\t@Override\n\tpublic void updateStepExecution(StepExecution stepExecution) {\n\t\tvalidateStepExecution(stepExecution);\n\t\tAssert.notNull(stepExecution.getId(), \"StepExecution Id cannot be null. StepExecution must saved\"\n\t\t\t\t+ \" before it can be updated.\");\n\t\t\n\t\t\n\t\tAssert.notNull(stepExecution.getJobExecutionId(), \"JobExecution must be saved already.\");\n\t\tJobExecution jobExecution = jobExecutionDao.getJobExecution(stepExecution.getJobExecutionId());\n\t\tAssert.notNull(jobExecution, \"JobExecution must be saved already.\");\n\t\t\n\t\tvalidateStepExecution(stepExecution);\n\n\t\tCollection<StepExecution> stepExecutions = jobExecution.getStepExecutions();\n\t\tsynchronized (stepExecution) {\n\t\t\t\n\t\t\t\n\t\t\tfor (StepExecution se : stepExecutions) {\n\t\t\t\tif (se.getId().equals(stepExecution.getId())) {\n\t\t\t\t\tstepExecution.incrementVersion();\n\t\t\t\t\tcopy(stepExecution, se);\n\t\t\t\t}\n\t\t\t}\n\t\t\tList<StepExecution> steps = new ArrayList<>(stepExecutions);\n\t\t\tstepExecution.getJobExecution().addStepExecutions(steps);\n\t\t\tjobExecutionDao.updateJobExecution(jobExecution);\n\t\t\tlogger.info(\"update step execution: \" + stepExecution.getId() + \",jobExecution:\" + jobExecution.getId());\n\t\t}\n\t}\n\n\t@Override\n\tpublic StepExecution getStepExecution(JobExecution jobExecution, Long stepExecutionId) {\n\t\tJobExecution je = jobExecutionDao.getJobExecution(jobExecution.getId());\n\t\tif (je == null) {\n\t\t\treturn null;\n\t\t}\n\t\tList<StepExecution> executions = new ArrayList<>(je.getStepExecutions());\n\t\t\n\t\tif (executions.isEmpty()) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\tStepExecution execution = null;\n\t\tfor (StepExecution se : executions) {\n\t\t\tif (se.getId().equals(stepExecutionId)) {\n\t\t\t\texecution = se;\n\t\t\t}\n\t\t}\n\n\t\tif (execution == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn execution;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void addStepExecutions(JobExecution jobExecution) {\n\t\tCollection<StepExecution> stepExecutions = jobExecutionDao.getJobExecution(jobExecution.getId()).getStepExecutions();\n\t\tList<StepExecution> stepExecutionList = new ArrayList<>(stepExecutions);\n\t\tjobExecution.addStepExecutions(stepExecutionList);\n\n\t}\n\t\n\tprivate void validateStepExecution(StepExecution stepExecution) {\n\t\tAssert.notNull(stepExecution);\n\t\tAssert.notNull(stepExecution.getStepName(), \"StepExecution step name cannot be null.\");\n\t\tAssert.notNull(stepExecution.getStartTime(), \"StepExecution start time cannot be null.\");\n\t\tAssert.notNull(stepExecution.getStatus(), \"StepExecution status cannot be null.\");\n\t}\n\n\tprotected JAXBContext jaxbContext() {\n\t\tJAXBContext jaxbContext;\n\t\ttry {\n            jaxbContext = JAXBContext.newInstance(AdaptedStepExecution.class);\n        } catch (JAXBException ex) {\n            throw new RuntimeException(ex);\n        }\n\t\treturn jaxbContext;\n\t}\n\n\tpublic JobExecutionDao getJobExecutionDao() {\n\t\treturn jobExecutionDao;\n\t}\n\n\tpublic void setJobExecutionDao(JobExecutionDao jobExecutionDao) {\n\t\tthis.jobExecutionDao = jobExecutionDao;\n\t}\n/*\n\tprivate static StepExecution copy(StepExecution original) {\n\t\treturn (StepExecution) SerializationUtils.deserialize(SerializationUtils.serialize(original));\n\t}\n*/\n\tprivate static void copy(final StepExecution sourceExecution, final StepExecution targetExecution) {\n\t\t// Cheaper than full serialization is a reflective field copy, which is\n\t\t// fine for volatile storage\n\t\tReflectionUtils.doWithFields(StepExecution.class, new ReflectionUtils.FieldCallback() {\n\t\t\t@Override\n\t\t\tpublic void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {\n\t\t\t\tfield.setAccessible(true);\n\t\t\t\tfield.set(targetExecution, field.get(sourceExecution));\n\t\t\t}\n\t\t}, ReflectionUtils.COPYABLE_FIELDS);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"sastafford/marklogic-spring-batch","sample_ref":"refs/heads/master","sample_path":"core/src/main/java/com/marklogic/spring/batch/core/repository/dao/MarkLogicStepExecutionDao.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"72c9bd6d10e790b20f203c1ae82a3ed6c25a4c8f","size":"1678","content":"/*\n * Copyright (c) 2015-2015 Vladimir Schneider <vladimir.schneider@gmail.com>\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n * This file is based on the IntelliJ SimplePlugin tutorial\n *\n */\npackage com.vladsch.idea.multimarkdown;\n\nimport com.intellij.openapi.fileTypes.FileTypeConsumer;\nimport com.intellij.openapi.fileTypes.FileTypeFactory;\nimport org.jetbrains.annotations.NotNull;\n\npublic class MultiMarkdownFileTypeFactory extends FileTypeFactory {\n    final static public String DEFAULT_EXTENSION = \"md\";\n\n    final static public String[] EXTENSIONS = {DEFAULT_EXTENSION, \"mkd\", \"markdown\"};\n\n    static public String[] getExtensions() {\n        return EXTENSIONS;\n    }\n\n    @Override\n    public void createFileTypes(@NotNull FileTypeConsumer fileTypeConsumer) {\n        for (String extension : EXTENSIONS) {\n            fileTypeConsumer.consume(MultiMarkdownFileType.INSTANCE, extension);\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"vsch/idea-multimarkdown","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/vladsch/idea/multimarkdown/MultiMarkdownFileTypeFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"da2824bbc3e66af0d818976b78cac6b998ecc9a9","size":"2216","content":"/*\n *        _____                     __    _     _   _____ _\n *       |   __|___ ___ _ _ ___ ___|  |  |_|___| |_|  _  | |_ _ ___\n *       |__   | -_|  _| | | -_|  _|  |__| |_ -|  _|   __| | | |_ -|\n *       |_____|___|_|  \\_/|___|_| |_____|_|___|_| |__|  |_|___|___|\n *\n *  ServerListPlus - http://git.io/slp\n *  Copyright (c) 2014, Minecrell <https://github.com/Minecrell>\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage net.minecrell.serverlistplus.core.util;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic final class Randoms {\n    private Randoms() {}\n\n    public static Random get() {\n        return random();\n    }\n\n    private static ThreadLocalRandom random() {\n        return ThreadLocalRandom.current();\n    }\n\n    public static <T> Collection<T> shuffle(List<T> list) {\n        Collections.shuffle(list, random());\n        return list;\n    }\n\n    public static <T> T nextEntry(T[] array) {\n        if (Helper.isNullOrEmpty(array)) return null;\n        return array.length > 1 ? array[random().nextInt(array.length)] : array[0];\n    }\n\n    public static <T> T nextEntry(List<T> list) {\n        if (Helper.isNullOrEmpty(list)) return null;\n        return list.size() > 1 ? list.get(random().nextInt(list.size())) : list.get(0);\n    }\n\n    public static Integer nextNumber(IntegerRange range) {\n        if (range == null) return null;\n        return range.isSingle() ? range.from() : random().nextInt(range.from(), range.to());\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"Minecrell/ServerListPlus","sample_ref":"refs/heads/master","sample_path":"src/main/java/net/minecrell/serverlistplus/core/util/Randoms.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"11a7fd0d4f37e0efff362bfcce2d0dd0e7779c8e","size":"2870","content":"package ctci;\n\nimport java.util.LinkedList;\n\n/**\n * An animal shelter holds only dogs or cats.\n * The follow a strict 'first in first out' \n * policy. You either pick the oldest animal\n * or the oldest cat/dog if you have a preference.\n * Support enqueue, dequeue, dequeueDog, dequeueCat.\n * Implement such a data structure.\n * @author Debosmit\n *\n */\npublic class StackQueue3_7 {\n\t\n\tpublic enum Animal {\n\t\tDOG, CAT;\n\t}\n\t\n\tpublic static class AnimalQueueNode {\n\t\tAnimal kind;\n\t\tlong index;\n\t\t\n\t\tpublic AnimalQueueNode(Animal kind) {\n\t\t\tthis(kind, 0);\n\t\t}\n\t\t\n\t\tpublic AnimalQueueNode(Animal kind, long index) {\n\t\t\tthis.kind = kind;\n\t\t\tthis.index = index;\n\t\t}\n\t\t\n\t\tpublic String toString() {\n\t\t\treturn \"\" + kind + \"(\" + index + \")\";\n\t\t}\n\t}\n\t\n\t/** \n\t * not implementing the abstract class queue since\n\t * that would require writing more methods than is\n\t * required right now.\n\t * @author Debosmit\n\t */\n\tpublic static class AnimalQueue {\n\t\tLinkedList<AnimalQueueNode> dogList = new LinkedList<AnimalQueueNode>();\n\t\tLinkedList<AnimalQueueNode> catList = new LinkedList<AnimalQueueNode>();\n\t\tint curOrder = 0;\n\t\t\n\t\t/**\n\t\t * Adds node signifying either a dog or a cat to the\n\t\t * appropriate list. The value of the order variable \n\t\t * is updated accordingly.\n\t\t * @param kind\n\t\t */\n\t\tpublic void enqueue(Animal kind) {\n\t\t\tif(kind == Animal.DOG) {\n\t\t\t\tAnimalQueueNode newNode = new AnimalQueueNode(kind, ++curOrder);\n\t\t\t\tdogList.add(newNode);\n\t\t\t} else if(kind == Animal.CAT) {\n\t\t\t\tAnimalQueueNode newNode = new AnimalQueueNode(kind, ++curOrder);\n\t\t\t\tcatList.add(newNode);\n\t\t\t} else \n\t\t\t\tthrow new IllegalArgumentException(\"Only cats and dogs are \"\n\t\t\t\t\t\t+ \"supported right now\");\n\t\t}\n\t\t\n\t\t/**\n\t\t * @return get the head of the dog list\n\t\t */\n\t\tpublic AnimalQueueNode dequeueDog() {\n\t\t\treturn dogList.remove();\n\t\t}\n\t\t\n\t\t/**\n\t\t * @return get the head of the cat list\n\t\t */\n\t\tpublic AnimalQueueNode dequeueCat() {\n\t\t\treturn catList.remove();\n\t\t}\n\t\t\n\t\t/**\n\t\t * @return get the head of the list\n\t\t */\n\t\tpublic AnimalQueueNode dequeue() {\n\t\t\tif(dogList.size() == 0)\n\t\t\t\treturn dequeueCat();\n\t\t\telse if(catList.size() == 0)\n\t\t\t\treturn dequeueDog();\n\t\t\t\n\t\t\tAnimalQueueNode node = (dogList.peek().index < catList.peek().index) \n\t\t\t\t\t\t\t\t\t? dogList.remove() : catList.remove();\n\t\t\t\t\t\t\t\t\t\n\t\t\treturn node;\t\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tAnimalQueue queue = new AnimalQueue();\n\t\t\n\t\t// add 2 dogs\n\t\tqueue.enqueue(Animal.DOG);\n\t\tqueue.enqueue(Animal.DOG);\n\t\t\n\t\t// add 2 cats\n\t\tqueue.enqueue(Animal.CAT);\n\t\tqueue.enqueue(Animal.CAT);\n\t\t\n\t\t// add dog, cat\n\t\tqueue.enqueue(Animal.DOG);\n\t\tqueue.enqueue(Animal.CAT);\n\t\t\n\t\tSystem.out.println(\"First animal: \" + queue.dequeue());\n\t\tSystem.out.println(\"First cat: \" + queue.dequeueCat());\n\t\tSystem.out.println(\"First dog: \" + queue.dequeueDog());\n\t\tSystem.out.println(\"First animal: \" + queue.dequeue()); \t// should be cat\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"dray92/Programming-Questions","sample_ref":"refs/heads/master","sample_path":"ctci/StackQueue3_7.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"23ee21a3ab47d5c3a56a5c90951cfa9a959d9d0a","size":"1396","content":"/*\n * JSmart Framework - Java Web Development Framework\n * Copyright (c) 2015, Jeferson Albino da Silva, All rights reserved.\n * \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3.0 of the License, or (at your option) any later version.\n * \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library. If not, see <http://www.gnu.org/licenses/>.\n*/\n\npackage com.jsmartframework.web.json;\n\npublic final class AsyncEvent {\n\n    private String event;\n\n    private String execute;\n\n    private Boolean capture;\n\n    public String getEvent() {\n        return event;\n    }\n\n    public void setEvent(String event) {\n        this.event = event;\n    }\n\n    public String getExecute() {\n        return execute;\n    }\n\n    public void setExecute(String execute) {\n        this.execute = execute;\n    }\n\n    public Boolean getCapture() {\n        return capture;\n    }\n\n    public void setCapture(Boolean capture) {\n        this.capture = capture;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"jefalbino/jsmart-web","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/jsmartframework/web/json/AsyncEvent.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2347973537067ae1e677c6b47e4959cd653f87df","size":"1555","content":"package org.anarres.qemu.qapi.api;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\nimport javax.annotation.CheckForNull;\nimport javax.annotation.Nonnull;\nimport org.anarres.qemu.qapi.common.*;\n\n/**\n * Autogenerated class.\n *\n * <pre>QApiCommandDescriptor{name=trace-event-get-state, returns=[TraceEventInfo], data={name=str}}</pre>\n */\n// QApiCommandDescriptor{name=trace-event-get-state, returns=[TraceEventInfo], data={name=str}}\npublic class TraceEventGetStateCommand extends QApiCommand<TraceEventGetStateCommand.Arguments, TraceEventGetStateCommand.Response> {\n\t/** Compound arguments to a TraceEventGetStateCommand. */\n\t@JsonInclude(JsonInclude.Include.NON_EMPTY)\n\tpublic static class Arguments {\n\n\t\t@SuppressFBWarnings(\"NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR\")\n\t\t@JsonProperty(\"name\")\n\t\t@Nonnull\n\t\tpublic java.lang.String name;\n\n\t\tpublic Arguments() {\n\t\t}\n\n\t\tpublic Arguments(java.lang.String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n\t/** Response to a TraceEventGetStateCommand. */\n\tpublic static class Response extends QApiResponse<java.util.List<TraceEventInfo>> {\n\t}\n\n\t/** Constructs a new TraceEventGetStateCommand. */\n\tpublic TraceEventGetStateCommand(@Nonnull TraceEventGetStateCommand.Arguments argument) {\n\t\tsuper(\"trace-event-get-state\", Response.class, argument);\n\t}\n\n\t/** Constructs a new TraceEventGetStateCommand. */\n\tpublic TraceEventGetStateCommand(java.lang.String name) {\n\t\tthis(new Arguments(name));\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"shevek/qemu-java","sample_ref":"refs/heads/master","sample_path":"qemu-qapi/src/main/java/org/anarres/qemu/qapi/api/TraceEventGetStateCommand.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ced42b868deb6063a77d011473d0e9bdf91fe1d0","size":"9027","content":"/**\n * <a href=\"http://www.openolat.org\">\n * OpenOLAT - Online Learning and Training</a><br>\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n * you may not use this file except in compliance with the License.<br>\n * You may obtain a copy of the License at the\n * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache homepage</a>\n * <p>\n * Unless required by applicable law or agreed to in writing,<br>\n * software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n * See the License for the specific language governing permissions and <br>\n * limitations under the License.\n * <p>\n * Initial code contributed and copyrighted by<br>\n * frentix GmbH, http://www.frentix.com\n * <p>\n */\npackage org.olat.modules.video.manager;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.olat.core.CoreSpringFactory;\nimport org.olat.core.commons.persistence.DBFactory;\nimport org.olat.core.commons.services.image.Size;\nimport org.olat.core.commons.services.scheduler.JobWithDB;\nimport org.olat.core.commons.services.video.MovieService;\nimport org.olat.core.util.vfs.LocalFileImpl;\nimport org.olat.core.util.vfs.LocalFolderImpl;\nimport org.olat.modules.video.VideoManager;\nimport org.olat.modules.video.VideoModule;\nimport org.olat.modules.video.VideoTranscoding;\nimport org.olat.resource.OLATResource;\nimport org.quartz.JobExecutionContext;\nimport org.quartz.JobExecutionException;\nimport org.quartz.StatefulJob;\n\n/**\n * \n * Initial date: 06.05.2016<br>\n * @author srosse, stephane.rosse@frentix.com, http://www.frentix.com\n *\n */\npublic class VideoTranscodingJob extends JobWithDB implements StatefulJob {\n\n\t/**\n\t * \n\t * @see org.olat.core.commons.services.scheduler.JobWithDB#executeWithDB(org.quartz.JobExecutionContext)\n\t */\n\t@Override\n\tpublic void executeWithDB(JobExecutionContext context) throws JobExecutionException {\n\t\t// uses StatefulJob interface to prevent concurrent job execution\n\t\tdoExecute(context);\n\t}\n\n\t/**\n\t * Implementation of job execution\n\t * @param context\n\t * @return\n\t * @throws JobExecutionException\n\t */\n\tprivate boolean doExecute(JobExecutionContext context) throws JobExecutionException {\n\t\tVideoModule videoModule = CoreSpringFactory.getImpl(VideoModule.class);\n\t\tif (!videoModule.isTranscodingLocal()) {\n\t\t\tlog.debug(\"Skipping execution of video transcoding job, local transcoding disabled\");\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Find first one to work with\n\t\tVideoManager videoManager = CoreSpringFactory.getImpl(VideoManager.class);\n\t\tList<VideoTranscoding> videoTranscodings = videoManager.getVideoTranscodingsPendingAndInProgress();\n\t\tVideoTranscoding videoTranscoding = null;\n\t\tfor (VideoTranscoding videoTrans : videoTranscodings) {\n\t\t\tString transcoder = videoTrans.getTranscoder();\n\t\t\tif (transcoder == null) { \n\t\t\t\tlog.info(\"Start transcoding video with resolution::\" + videoTrans.getResolution()\n\t\t\t\t\t+ \" for video resource::\" + videoTrans.getVideoResource().getResourceableId());\n\t\t\t\tvideoTrans.setTranscoder(VideoTranscoding.TRANSCODER_LOCAL);\n\t\t\t\tvideoTranscoding = videoManager.updateVideoTranscoding(videoTrans);\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t} else if (transcoder.equals(VideoTranscoding.TRANSCODER_LOCAL)) {\n\t\t\t\tlog.info(\"Continue with transcoding video with resolution::\" + videoTrans.getResolution()\n\t\t\t\t\t+ \" for video resource::\" + videoTrans.getVideoResource().getResourceableId());\n\t\t\t\tvideoTranscoding = videoTrans;\t\t\t\t\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (videoTranscoding == null) {\n\t\t\tlog.debug(\"Skipping execution of video transcoding job, no pending video transcoding found in database\");\n\t\t\treturn false;\n\t\t}\n\t\t// Ready transcode, forke process now\n\t\tboolean success = forkTranscodingProcess(videoTranscoding);\n\t\t\n\t\t// Transcoding done, call execution again until no more videos to be\n\t\t// processed. If an error happend, don't continue to not get into a loop\n\t\tif (success) {\n\t\t\tsuccess = doExecute(context); \n\t\t}\n\t\treturn success;\n\t}\n\t\n\t/**\n\t * Internal helper to fork a process with handbrake and read the values from the process\n\t * @param videoTranscoding\n\t * @return true: all ok; false: an error happend along the way\n\t */\n\tprivate boolean forkTranscodingProcess(VideoTranscoding videoTranscoding) {\n\t\tOLATResource video = videoTranscoding.getVideoResource();\n\t\tVideoModule videoModule = CoreSpringFactory.getImpl(VideoModule.class);\n\t\tVideoManager videoManager = CoreSpringFactory.getImpl(VideoManager.class);\n\t\tFile masterFile = videoManager.getVideoFile(video);\n\t\tFile transcodingFolder = ((LocalFolderImpl)videoManager.getTranscodingContainer(video)).getBasefile();\n\t\tFile transcodedFile = new File(transcodingFolder,  Integer.toString(videoTranscoding.getResolution()) + masterFile.getName());\n\t\t// mark this as beeing transcoded by this local transcoder\n\t\tvideoTranscoding.setTranscoder(VideoTranscoding.TRANSCODER_LOCAL);\n\t\tvideoTranscoding = videoManager.updateVideoTranscoding(videoTranscoding);\n\t\t\n\t\tArrayList<String> cmd = new ArrayList<>();\n\t\tString tasksetConfig = videoModule.getTranscodingTasksetConfig();\n\t\tif (tasksetConfig != null && !\"Mac OS X\".equals(System.getProperty(\"os.name\"))) {\n\t\t\tcmd.add(\"taskset\");\n\t\t\tcmd.add(\"-c\");\n\t\t\tcmd.add(tasksetConfig);\t\t\t\n\t\t}\n\t\tcmd.add(\"HandBrakeCLI\");\n\t\tcmd.add(\"-i\"); \n\t\tcmd.add(masterFile.getAbsolutePath());\n\t\tcmd.add(\"-o\"); \n\t\tcmd.add(transcodedFile.getAbsolutePath());\n\t\tcmd.add(\"--optimize\");\n\t\tcmd.add(\"--preset\");\n\t\tcmd.add(\"Normal\");\n\t\tcmd.add(\"--height\");\n\t\tcmd.add(Integer.toString(videoTranscoding.getResolution()));\n\t\tcmd.add(\"--deinterlace\");\n\t\tcmd.add(\"--crop\");\n\t\tcmd.add(\"0:0:0:0\");\n\t\t\n\t\tProcess process = null;\n\t\ttry {\n\t\t\tif(log.isDebug()) {\n\t\t\t\tlog.debug(cmd.toString());\n\t\t\t}\n\t\t\tProcessBuilder builder = new ProcessBuilder(cmd);\n\t\t\tprocess = builder.start();\n\t\t\treturn updateVideoTranscodingFromProcessOutput(process, videoTranscoding, transcodedFile);\n\t\t} catch (IOException e) {\n\t\t\tlog.error (\"Could not spawn convert sub process\", e);\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (process != null) {\n\t\t\t\tprocess.destroy();\n\t\t\t\tprocess = null;\n\t\t\t}\t\t\t\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * Internal helper to deal with the handbrake console output and update the transcoding metadata\n\t * @param proc\n\t * @param videoTranscoding\n\t * @param transcodedFile\n\t * @return true: everything fine; false: an error happended somewhere\n\t */\n\tprivate final boolean updateVideoTranscodingFromProcessOutput(Process proc, VideoTranscoding videoTranscoding, File transcodedFile) {\n\t\tVideoManager videoManager = CoreSpringFactory.getImpl(VideoManager.class);\n\t\t\n\t\tStringBuilder errors = new StringBuilder();\n\t\tStringBuilder output = new StringBuilder();\n\t\tString line;\n\t\t\n\t\t// Read from standard input and parse percentages of transcoding process\n\t\tInputStream stdout = proc.getInputStream();\n\t\tInputStreamReader isr = new InputStreamReader(stdout);\n\t\tBufferedReader br = new BufferedReader(isr);\n\t\tline = null;\n\t\ttry {\n\t\t\twhile ((line = br.readLine()) != null) {\n\t\t\t\toutput.append(line);\n\t\t\t\t// Parse the percentage. Logline looks like this:\n\t\t\t\t// Encoding: task 1 of 1, 85.90 % (307.59 fps, avg 330.35 fps, ETA 00h00m05s)\n\t\t\t\tint start = line.indexOf(\",\");\n\t\t\t\tif (start != -1) {\n\t\t\t\t\tline = line.substring(start);\n\t\t\t\t\tint end = line.indexOf(\".\");\n\t\t\t\t\tif (end != -1 && end < 5) {\n\t\t\t\t\t\tString percent = line.substring(2, end);\n\t\t\t\t\t\tlog.debug(\"Output: \" + percent);\t\t\n\t\t\t\t\t\t// update version file for UI\n\t\t\t\t\t\tvideoTranscoding.setStatus(Integer.parseInt(percent));\n\t\t\t\t\t\tvideoTranscoding = videoManager.updateVideoTranscoding(videoTranscoding);\n\t\t\t\t\t\tDBFactory.getInstance().commitAndCloseSession();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\t//\n\t\t}\n\n\t\t// Read and ignore errors, Handbrake outputs a lot info on startup. Only\n\t\t// display errors in debug level\n \t\tInputStream stderr = proc.getErrorStream();\n\t\tInputStreamReader iserr = new InputStreamReader(stderr);\n\t\tBufferedReader berr = new BufferedReader(iserr);\n\t\tline = null;\n\t\ttry {\n\t\t\twhile ((line = berr.readLine()) != null) {\n\t\t\t\terrors.append(line);\n\t\t\t\tlog.debug(\"Error: \" + line);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\t//\n\t\t}\n\n\t\ttry {\n\t\t\t// On finish, update metadata file\n\t\t\tint exitValue = proc.waitFor();\n\t\t\tif (exitValue == 0) {\n\t\t\t\tMovieService movieService = CoreSpringFactory.getImpl(MovieService.class);\n\t\t\t\tSize videoSize = movieService.getSize(new LocalFileImpl(transcodedFile), VideoManagerImpl.FILETYPE_MP4);\n\t\t\t\tvideoTranscoding.setWidth(videoSize.getWidth());\n\t\t\t\tvideoTranscoding.setHeight(videoSize.getHeight());\n\t\t\t\tvideoTranscoding.setSize(transcodedFile.length());\n\t\t\t\tvideoTranscoding.setStatus(VideoTranscoding.TRANSCODING_STATUS_DONE);\n\t\t\t\tvideoTranscoding = videoManager.updateVideoTranscoding(videoTranscoding);\n\t\t\t\tDBFactory.getInstance().commitAndCloseSession();\n\t\t\t\treturn true;\n\t\t\t} \n\t\t\treturn false;\n\t\t} catch (InterruptedException e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"klemens/openolat","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/olat/modules/video/manager/VideoTranscodingJob.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"be3af4c425ea024118738a741c4b645b7e197daf","size":"2662","content":"/*\n *  Copyright 2014 Dan Haywood\n *\n *  Licensed under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied.  See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\npackage org.isisaddons.module.security.app.feature;\n\nimport org.apache.isis.applib.annotation.ActionSemantics;\nimport org.apache.isis.applib.annotation.MemberOrder;\nimport org.apache.isis.applib.annotation.Property;\nimport org.apache.isis.applib.annotation.SemanticsOf;\nimport org.apache.isis.applib.annotation.ViewModelLayout;\nimport org.apache.isis.core.metamodel.services.appfeat.ApplicationFeatureId;\n\n@SuppressWarnings(\"UnusedDeclaration\")\n@ViewModelLayout(paged=100)\npublic class ApplicationClassAction extends ApplicationClassMember {\n\n    public static abstract class PropertyDomainEvent<T> extends ApplicationClassMember.PropertyDomainEvent<ApplicationClassAction, T> {}\n\n    public static abstract class CollectionDomainEvent<T> extends ApplicationClassMember.CollectionDomainEvent<ApplicationClassAction, T> {}\n\n    public static abstract class ActionDomainEvent extends ApplicationClassMember.ActionDomainEvent<ApplicationClassAction> {}\n\n    // //////////////////////////////////////\n\n    //region > constructors\n\n    public ApplicationClassAction() {\n    }\n\n    public ApplicationClassAction(final ApplicationFeatureId featureId) {\n        super(featureId);\n    }\n    //endregion\n\n    // //////////////////////////////////////\n\n    //region > returnTypeName (property)\n\n    public static class ReturnTypeDomainEvent extends PropertyDomainEvent<String> {}\n\n    @Property(\n            domainEvent = ReturnTypeDomainEvent.class\n    )\n    @MemberOrder(name=\"Data Type\", sequence = \"2.6\")\n    public String getReturnType() {\n        return getFeature().getReturnTypeName();\n    }\n    //endregion\n\n    // //////////////////////////////////////\n\n    //region > actionSemantics (property)\n    public static class ActionSemanticsDomainEvent extends PropertyDomainEvent<ActionSemantics.Of> {}\n\n    @Property(\n            domainEvent = ActionSemanticsDomainEvent.class\n    )\n    @MemberOrder(name=\"Detail\", sequence = \"2.8\")\n    public SemanticsOf getActionSemantics() {\n        return getFeature().getActionSemantics();\n    }\n    //endregion\n\n}\n","binary":"false","copies":"1","sample_repo_name":"isisaddons/isis-module-security","sample_ref":"refs/heads/master","sample_path":"dom/src/main/java/org/isisaddons/module/security/app/feature/ApplicationClassAction.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"71e175d5ba78ea1cb660ba224d010c8ecfe920f7","size":"371","content":"package org.camunda.bpm.spring.boot.starter;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.junit.Test;\n\npublic class CamundaBpmVersionTest {\n\n  @Test\n  public void versionTest() {\n    String version = CamundaBpmVersion.getVersion();\n    assertTrue(\"expected sth. like 7.4.xx\", StringUtils.isNotBlank(version));\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"camunda/camunda-bpm-spring-boot-starter","sample_ref":"refs/heads/master","sample_path":"extension/camunda-spring-boot-starter/src/test/java/org/camunda/bpm/spring/boot/starter/CamundaBpmVersionTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9c727b432bb658a4349823fa8b143b9e77b89079","size":"753","content":"package fr.devoxx.sentimental.infra.adapter;\n\nimport java.sql.Timestamp;\n\nimport fr.devoxx.sentimental.annotation.Repository;\nimport fr.devoxx.sentimental.domain.Sentiment;\nimport fr.devoxx.sentimental.domain.Trend;\nimport fr.devoxx.sentimental.infra.AuditDAO;\nimport fr.devoxx.sentimental.infra.IdSequence;\n\n@Repository\npublic class TrendRepository implements Trend {\n\n\tprivate final AuditDAO auditDao;\n\n\tpublic TrendRepository(AuditDAO auditDao) {\n\t\tthis.auditDao = auditDao;\n\t}\n\n\tpublic void record(String sentence, Sentiment sentiment) {\n\t\tfinal Timestamp timestamp = new Timestamp(now());\n\t\tauditDao.insert(IdSequence.INSTANCE.next(), timestamp, sentence, sentiment.name());\n\t}\n\n\tprivate long now() {\n\t\treturn new java.util.Date().getTime();\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"cyriux/hexagonal-sentimental","sample_ref":"refs/heads/master","sample_path":"sentimental/src/main/java/fr/devoxx/sentimental/infra/adapter/TrendRepository.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ea9efa9ddb83637d7ffc2778e80c603b92334b90","size":"2187","content":"package cyano.poweradvantage.gui;\n\nimport cyano.poweradvantage.api.fluid.FluidPoweredEntity;\nimport cyano.poweradvantage.api.simple.SimpleMachineGUI;\nimport cyano.poweradvantage.math.Integer2D;\nimport net.minecraft.client.renderer.GlStateManager;\nimport net.minecraft.util.ResourceLocation;\nimport net.minecraftforge.fluids.FluidStack;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class FilteredFluidTankGUI extends SimpleMachineGUI{\n\n\t\n\tprivate static final Map<ResourceLocation,ResourceLocation> realTextureLocationCache = new HashMap<>();\n\t\n\tpublic FilteredFluidTankGUI(ResourceLocation image) {\n\t\tsuper(image,\n\t\t\t\tInteger2D.fromCoordinates(31, 31));\n\t}\n\t\n\t@Override \n\tpublic void drawGUIDecorations(Object srcEntity, GUIContainer guiContainer, int x, int y, float z){\n\t\t// draw indicator\n\t\tif(srcEntity instanceof FluidPoweredEntity){\n\t\t\tFluidStack fs = ((FluidPoweredEntity)srcEntity).getTank().getFluid();\n\t\t\tif(fs != null && ((FluidPoweredEntity)srcEntity).getTank().getFluidAmount() > 0){\n\t\t\t\tdrawFluidBar(fs,\n\t\t\t\t\t\t(float)fs.amount / (float)((FluidPoweredEntity)srcEntity).getTank().getCapacity(),\n\t\t\t\t\t\t80, 9,\n\t\t\t\t\t\tguiDisplayImage, guiContainer, x, y, z);\n\t\t\t}\n\t\t}\n\t\tGlStateManager.color(1f,1f,1f,1f); // reset tint\n\t\tguiContainer.mc.renderEngine.bindTexture(guiDisplayImage);\n\t\tguiContainer.drawTexturedModalRect(x+77, y+6, 176, 0, 22, 66); // x, y, textureOffsetX, textureOffsetY, width, height)\n\t}\n\n\n\tpublic static void drawFluidBar(FluidStack fs, float barHeight, int xPos, int yPos, \n\t\t\tResourceLocation displayImage, GUIContainer guiContainer, int x, int y, float zLevel){\n\t\tfinal int w = 16;\n\t\tfinal int barSlotHeight = 60;\n\t\tfinal int h = (int)(barSlotHeight * barHeight);\n\n\n\t\tFluidTankGUI.drawFluidFilledRectangle(guiContainer,fs,x+xPos,y+yPos+barSlotHeight-h,w,h,zLevel);\n\t\t//guiContainer.drawModalRectWithCustomSizedTexture(x+xPos, y+yPos+barSlotHeight-h, 0, 0, w, h, 16, h);//h * texPerPixel); // x, y, u, v, width, height, textureWidth, textureHeight\n\t\t\n\t\tguiContainer.mc.renderEngine.bindTexture(displayImage);\n\t\tguiContainer.drawTexturedModalRect(x+xPos-3, y+yPos-3, 176, 0, 22, 66); // x, y, textureOffsetX, textureOffsetY, width, height)\n\t}\n\t\n\n\n}\n","binary":"false","copies":"1","sample_repo_name":"cyanobacterium/PowerAdvantageAPI","sample_ref":"refs/heads/master","sample_path":"src/main/java/cyano/poweradvantage/gui/FilteredFluidTankGUI.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"258e555aa0928cbf944254fbfcfc0c9ecc71b69a","size":"83096","content":"/*\r\n *  Copyright 2008 biaoping.yin\r\n *\r\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n *  you may not use this file except in compliance with the License.\r\n *  You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n *  Unless required by applicable law or agreed to in writing, software\r\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n *  See the License for the specific language governing permissions and\r\n *  limitations under the License.\r\n */\r\npackage org.frameworkset.web.servlet;\r\n\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Method;\r\nimport java.security.Principal;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Enumeration;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.Map;\r\nimport java.util.Properties;\r\nimport java.util.Set;\r\n\r\nimport javax.servlet.ServletConfig;\r\nimport javax.servlet.ServletException;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport javax.servlet.jsp.PageContext;\r\n\r\nimport org.apache.log4j.Logger;\r\nimport org.frameworkset.http.converter.HttpMessageConverter;\r\nimport org.frameworkset.spi.BaseApplicationContext;\r\nimport org.frameworkset.spi.LifeCycleProcessorExecutor;\r\nimport org.frameworkset.spi.assemble.Pro;\r\nimport org.frameworkset.spi.assemble.ProList;\r\nimport org.frameworkset.spi.event.IocLifeCycleEventListener;\r\nimport org.frameworkset.spi.io.PropertiesLoaderUtils;\r\nimport org.frameworkset.spi.support.LocaleContextHolder;\r\nimport org.frameworkset.util.ClassUtils;\r\nimport org.frameworkset.util.DataFormatUtil;\r\nimport org.frameworkset.util.beans.BeansException;\r\nimport org.frameworkset.util.io.ClassPathResource;\r\nimport org.frameworkset.web.HttpRequestMethodNotSupportedException;\r\nimport org.frameworkset.web.multipart.MultipartException;\r\nimport org.frameworkset.web.multipart.MultipartHttpServletRequest;\r\nimport org.frameworkset.web.multipart.MultipartResolver;\r\nimport org.frameworkset.web.request.async.WebAsyncManager;\r\nimport org.frameworkset.web.request.async.WebAsyncUtils;\r\nimport org.frameworkset.web.servlet.context.RequestContextHolder;\r\nimport org.frameworkset.web.servlet.context.WebApplicationContext;\r\nimport org.frameworkset.web.servlet.handler.AbstractUrlHandlerMapping;\r\nimport org.frameworkset.web.servlet.handler.HandlerMappingsTable;\r\nimport org.frameworkset.web.servlet.handler.HandlerMeta;\r\nimport org.frameworkset.web.servlet.handler.HandlerUtils;\r\nimport org.frameworkset.web.servlet.handler.PathURLNotSetException;\r\nimport org.frameworkset.web.servlet.handler.annotations.AnnotationMethodHandlerAdapter;\r\nimport org.frameworkset.web.servlet.handler.annotations.DefaultAnnotationHandlerMapping;\r\nimport org.frameworkset.web.servlet.i18n.DefaultLocaleResolver;\r\nimport org.frameworkset.web.servlet.mvc.HttpRequestHandlerAdapter;\r\nimport org.frameworkset.web.servlet.mvc.ServletWebRequest;\r\nimport org.frameworkset.web.servlet.mvc.SimpleControllerHandlerAdapter;\r\nimport org.frameworkset.web.servlet.support.RequestContext;\r\nimport org.frameworkset.web.servlet.support.RequestContextUtils;\r\nimport org.frameworkset.web.servlet.support.RequestMethodHttpServletRequest;\r\nimport org.frameworkset.web.servlet.support.WebApplicationContextUtils;\r\nimport org.frameworkset.web.servlet.view.AbstractUrlBasedView;\r\nimport org.frameworkset.web.servlet.view.UrlBasedViewResolver;\r\nimport org.frameworkset.web.servlet.view.View;\r\nimport org.frameworkset.web.servlet.view.ViewResolver;\r\nimport org.frameworkset.web.ui.ThemeSource;\r\nimport org.frameworkset.web.util.UrlPathHelper;\r\nimport org.frameworkset.web.util.WebUtils;\r\n\r\nimport com.frameworkset.spi.assemble.BeanInstanceException;\r\nimport com.frameworkset.util.StringUtil;\r\n\r\n\r\n\r\n/**\r\n * <p>Title: DispatchServlet.java</p> \r\n * <p>Description: </p>\r\n * <p>bboss workgroup</p>\r\n * <p>Copyright (c) 2008</p>\r\n * @Date 2010-9-22\r\n * @author biaoping.yin\r\n * @version 1.0\r\n */\r\npublic class DispatchServlet extends BaseServlet {\r\n\tprivate static  Properties defaultStrategies;\r\n\t\r\n\tprivate String iocLifeCycleEventListeners;\r\n\tprivate String iocLifeCycleEventListenerParams;\r\n\tprivate List<IocLifeCycleEventListener> iocLifeCycleEventListenerList ;\r\n\t\r\n\tpublic static Properties getDefaultStrategies()\r\n\t{\r\n\t\treturn defaultStrategies;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\tpublic static void destory()\r\n\t{\r\n\t\tDispatchServlet.defaultStrategies = null;\r\n\t\tDispatchServlet.localeResolver = null;\r\n\t\tDispatchServlet.viewResolvers = null;\r\n\t\tDispatchServlet.webApplicationContext = null;\r\n\t\t\r\n\t\t\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Name of the class path resource (relative to the DispatcherServlet class)\r\n\t * that defines DispatcherServlet's default strategy names.\r\n\t */\r\n\tprivate static final String DEFAULT_STRATEGIES_PATH = \"DispatcherServlet.properties\";\r\n\tprivate static Logger logger = Logger.getLogger(DispatchServlet.class);\r\n\tstatic {\r\n\t\t// Load default strategy implementations from properties file.\r\n\t\t// This is currently strictly internal and not meant to be customized\r\n\t\t// by application developers.\r\n\t\ttry {\r\n//\t\t\t\r\n\t\t\t\r\n\t\t\tClassPathResource resource = new ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatchServlet.class);\r\n\t\t\tdefaultStrategies = PropertiesLoaderUtils.loadProperties(resource);\r\n\t\t}\r\n\t\tcatch (IOException ex) {\r\n\t\t\tthrow new IllegalStateException(\"Could not load 'DispatcherServlet.properties': \" + ex.getMessage());\r\n\t\t}\r\n\t}\r\n\t\r\n\t/** Should we dispatch an HTTP OPTIONS request to {@link #doService}? */\r\n\tprivate boolean dispatchOptionsRequest = false;\r\n\r\n\t/** Should we dispatch an HTTP TRACE request to {@link #doService}? */\r\n\tprivate boolean dispatchTraceRequest = false;\r\n\t\r\n\t/**\r\n\t * Well-known name for the MultipartResolver object in the bean factory for this namespace.\r\n\t */\r\n\tpublic static final String MULTIPART_RESOLVER_BEAN_NAME = \"multipartResolver\";\r\n\r\n\t/**\r\n\t * Well-known name for the LocaleResolver object in the bean factory for this namespace.\r\n\t */\r\n\tpublic static final String LOCALE_RESOLVER_BEAN_NAME = \"localeResolver\";\r\n\r\n\t/**\r\n\t * Well-known name for the ThemeResolver object in the bean factory for this namespace.\r\n\t */\r\n\tpublic static final String THEME_RESOLVER_BEAN_NAME = \"themeResolver\";\r\n\r\n\t/**\r\n\t * Well-known name for the HandlerMapping object in the bean factory for this namespace.\r\n\t * Only used when \"detectAllHandlerMappings\" is turned off.\r\n\t * @see #setDetectAllHandlerMappings\r\n\t */\r\n\tpublic static final String HANDLER_MAPPING_BEAN_NAME = \"handlerMapping\";\r\n\r\n\t/**\r\n\t * Well-known name for the HandlerAdapter object in the bean factory for this namespace.\r\n\t * Only used when \"detectAllHandlerAdapters\" is turned off.\r\n\t * @see #setDetectAllHandlerAdapters\r\n\t */\r\n//\tpublic static final String HANDLER_ADAPTER_BEAN_NAME = \"handlerAdapter\";\r\n\r\n\t/**\r\n\t * Well-known name for the HandlerExceptionResolver object in the bean factory for this\r\n\t * namespace. Only used when \"detectAllHandlerExceptionResolvers\" is turned off.\r\n\t * @see #setDetectAllHandlerExceptionResolvers\r\n\t */\r\n\tpublic static final String HANDLER_EXCEPTION_RESOLVER_BEAN_NAME = \"handlerExceptionResolver\";\r\n\r\n\t/**\r\n\t * Well-known name for the RequestToViewNameTranslator object in the bean factory for\r\n\t * this namespace.\r\n\t */\r\n\tpublic static final String REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME = \"viewNameTranslator\";\r\n\r\n\t/**\r\n\t * Well-known name for the ViewResolver object in the bean factory for this namespace.\r\n\t * Only used when \"detectAllViewResolvers\" is turned off.\r\n\t * @see #setDetectAllViewResolvers\r\n\t */\r\n\tpublic static final String VIEW_RESOLVER_BEAN_NAME = \"viewResolver\";\r\n\r\n\t/**\r\n\t * Request attribute to hold the currently chosen HandlerExecutionChain.\r\n\t * Only used for internal optimizations.\r\n\t */\r\n\tpublic static final String HANDLER_EXECUTION_CHAIN_ATTRIBUTE = DispatchServlet.class.getName() + \".HANDLER\";\r\n\r\n\t/**\r\n\t * Request attribute to hold the current web application context.\r\n\t * Otherwise only the global web app context is obtainable by tags etc.\r\n\t * @see RequestContextUtils#getWebApplicationContext\r\n\t */\r\n\tpublic static final String WEB_APPLICATION_CONTEXT_ATTRIBUTE = DispatchServlet.class.getName() + \".CONTEXT\";\r\n\r\n\t/**\r\n\t * Request attribute to hold the current LocaleResolver, retrievable by views.\r\n\t * @see RequestContextUtils#getLocaleResolver\r\n\t */\r\n\tpublic static final String LOCALE_RESOLVER_ATTRIBUTE = DispatchServlet.class.getName() + \".LOCALE_RESOLVER\";\r\n\r\n\t/**\r\n\t * Request attribute to hold the current ThemeResolver, retrievable by views.\r\n\t * @see RequestContextUtils#getThemeResolver\r\n\t */\r\n\tpublic static final String THEME_RESOLVER_ATTRIBUTE = DispatchServlet.class.getName() + \".THEME_RESOLVER\";\r\n\r\n\t/**\r\n\t * Request attribute to hold the current ThemeSource, retrievable by views.\r\n\t * @see RequestContextUtils#getThemeSource\r\n\t */\r\n\tpublic static final String THEME_SOURCE_ATTRIBUTE = DispatchServlet.class.getName() + \".THEME_SOURCE\";\r\n\r\n\r\n\t/**\r\n\t * Log category to use when no mapped handler is found for a request.\r\n\t */\r\n\tpublic static final String PAGE_NOT_FOUND_LOG_CATEGORY = \"org.frameworkset.web.servlet.PageNotFound\";\r\n\t\r\n\t\r\n\t/**\r\n\t * Log category to use when no mapped handler is found for a request.\r\n\t */\r\n\tpublic static final String messageConverters_KEY = \"org.frameworkset.web.servlet.messageConverters_KEY\";\r\n\t\r\n\t\r\n\r\n\r\n\r\n\r\n\t/**\r\n\t * Additional logger to use when no mapped handler is found for a request.\r\n\t */\r\n\tprotected static final Logger pageNotFoundLogger = Logger.getLogger(PAGE_NOT_FOUND_LOG_CATEGORY);\r\n\t\r\n\t/** List of ViewResolvers used by this servlet */\r\n\tprivate static List viewResolvers;\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t/** List of HandlerMappings used by this servlet */\r\n\tprivate HandlerMappingsTable handlerMappings;\r\n\t\r\n\t\r\n\t/** List of HandlerAdapters used by this servlet */\r\n//\tprivate List<HandlerAdapter> handlerAdapters;\r\n\t\r\n\torg.frameworkset.web.servlet.handler.annotations.AnnotationMethodHandlerAdapter annotationMethodHandlerAdapter;\r\n\torg.frameworkset.web.servlet.mvc.SimpleControllerHandlerAdapter simpleControllerHandlerAdapter;\t\r\n\torg.frameworkset.web.servlet.mvc.HttpRequestHandlerAdapter httpRequestHandlerAdapter; \r\n\t\r\n\t/** List of HandlerAdapters used by this servlet */\r\n\tprivate List<HandlerInterceptor> gloabelHandlerInterceptors;\r\n\t\r\n \r\n\tprivate  HttpMessageConverter[] messageConverters;\t\r\n\r\n\t\r\n\t/** Expose LocaleContext and RequestAttributes as inheritable for child threads? */\r\n\tprivate static boolean threadContextInheritable = false;\r\n\t\r\n\t/** MultipartResolver used by this servlet */\r\n\tprivate MultipartResolver multipartResolver;\r\n\t\r\n\t/** RequestToViewNameTranslator used by this servlet */\r\n\tprivate RequestToViewNameTranslator viewNameTranslator;\r\n\t\r\n\t/** List of HandlerExceptionResolvers used by this servlet */\r\n\tprivate List handlerExceptionResolvers;\r\n\t\r\n\t/** WebApplicationContext for this servlet */\r\n\tpublic  static WebApplicationContext webApplicationContext;\r\n\tprivate static String messagesources = null;\r\n\tprivate static String useCodeAsDefaultMessage = \"true\";\r\n\tpublic static String getMessagesources()\r\n\t{\r\n\t\treturn messagesources;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Set whether this servlet should dispatch an HTTP OPTIONS request to\r\n\t * the {@link #doService} method.\r\n\t * <p>Default is \"false\", applying {@link javax.servlet.http.HttpServlet}'s\r\n\t * default behavior (i.e. enumerating all standard HTTP request methods\r\n\t * as a response to the OPTIONS request).\r\n\t * <p>Turn this flag on if you prefer OPTIONS requests to go through the\r\n\t * regular dispatching chain, just like other HTTP requests. This usually\r\n\t * means that your controllers will receive those requests; make sure\r\n\t * that those endpoints are actually able to handle an OPTIONS request.\r\n\t * <p>Note that HttpServlet's default OPTIONS processing will be applied\r\n\t * in any case. Your controllers are simply available to override the\r\n\t * default headers and optionally generate a response body.\r\n\t */\r\n\tpublic void setDispatchOptionsRequest(boolean dispatchOptionsRequest) {\r\n\t\tthis.dispatchOptionsRequest = dispatchOptionsRequest;\r\n\t}\r\n\r\n\t/**\r\n\t * Set whether this servlet should dispatch an HTTP TRACE request to\r\n\t * the {@link #doService} method.\r\n\t * <p>Default is \"false\", applying {@link javax.servlet.http.HttpServlet}'s\r\n\t * default behavior (i.e. reflecting the message received back to the client).\r\n\t * <p>Turn this flag on if you prefer TRACE requests to go through the\r\n\t * regular dispatching chain, just like other HTTP requests. This usually\r\n\t * means that your controllers will receive those requests; make sure\r\n\t * that those endpoints are actually able to handle a TRACE request.\r\n\t * <p>Note that HttpServlet's default TRACE processing will be applied\r\n\t * in any case. Your controllers are simply available to override the\r\n\t * default headers and the default body, calling <code>response.reset()</code>\r\n\t * if necessary.\r\n\t */\r\n\tpublic void setDispatchTraceRequest(boolean dispatchTraceRequest) {\r\n\t\tthis.dispatchTraceRequest = dispatchTraceRequest;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Override HttpServlet's <code>getLastModified</code> method to evaluate\r\n\t * the Last-Modified value of the mapped handler.\r\n\t */\r\n\tprotected long getLastModified(HttpServletRequest request) {\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tString requestUri = new UrlPathHelper().getRequestUri(request);\r\n\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() +\r\n\t\t\t\t\t\"' determining Last-Modified value for [\" + requestUri + \"]\");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif(request instanceof RequestMethodHttpServletRequest)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\trequest = new RequestMethodHttpServletRequest(request);\r\n\t\t\t}\r\n\t\t\tHandlerExecutionChain mappedHandler = getHandler(request, true);\r\n\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null || mappedHandler.getHandler().getHandler() == null) {\r\n\t\t\t\t// Ignore -> will reappear on doService.\r\n\t\t\t\tlogger.debug(\"No handler found in getLastModified\");\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\r\n\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\r\n\t\t\tif (logger.isInfoEnabled()) {\r\n\t\t\t\tString requestUri = new UrlPathHelper().getRequestUri(request);\r\n\t\t\t\tlogger.debug(\"Last-Modified value for [\" + requestUri + \"] is: \" + lastModified);\r\n\t\t\t}\r\n\t\t\treturn lastModified;\r\n\t\t}\r\n\t\tcatch (Exception ex) {\r\n\t\t\t// Ignore -> will reappear on doService.\r\n\t\t\tlogger.error(\"Exception thrown in getLastModified\", ex);\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Return the HandlerExecutionChain for this request.\r\n\t * Try all handler mappings in order.\r\n\t * @param request current HTTP request\r\n\t * @param cache whether to cache the HandlerExecutionChain in a request attribute\r\n\t * @return the HandlerExceutionChain, or <code>null</code> if no handler could be found\r\n\t */\r\n\tprotected HandlerExecutionChain getHandler(HttpServletRequest request, boolean cache) throws Exception {\r\n\t\tHandlerExecutionChain handler =\r\n\t\t\t\t(HandlerExecutionChain) request.getAttribute(HANDLER_EXECUTION_CHAIN_ATTRIBUTE);\r\n\t\tif (handler != null) {\r\n\t\t\tif (!cache) {\r\n\t\t\t\trequest.removeAttribute(HANDLER_EXECUTION_CHAIN_ATTRIBUTE);\r\n\t\t\t}\r\n\t\t\treturn handler;\r\n\t\t}\r\n\t\thandler = this.handlerMappings.getHandler(request, this.getServletName());\r\n\t\tif (handler != null) {\r\n\t\t\tif (cache) {\r\n\t\t\t\trequest.setAttribute(HANDLER_EXECUTION_CHAIN_ATTRIBUTE, handler);\r\n\t\t\t}\r\n\t\t\treturn handler;\r\n\t\t}\r\n//\t\tIterator it = this.handlerMappings.iterator();\r\n//\t\twhile (it.hasNext()) {\r\n//\t\t\tHandlerMapping hm = (HandlerMapping) it.next();\r\n//\t\t\tif (logger.isTraceEnabled()) {\r\n//\t\t\t\tlogger.trace(\"Testing handler map [\" + hm  + \"] in DispatcherServlet with name '\" +\r\n//\t\t\t\t\t\tgetServletName() + \"'\");\r\n//\t\t\t}\r\n//\t\t\thandler = hm.getHandler(request);\r\n//\t\t\tif (handler != null) {\r\n//\t\t\t\tif (cache) {\r\n//\t\t\t\t\trequest.setAttribute(HANDLER_EXECUTION_CHAIN_ATTRIBUTE, handler);\r\n//\t\t\t\t}\r\n//\t\t\t\treturn handler;\r\n//\t\t\t}\r\n//\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return the HandlerAdapter for this handler object.\r\n\t * @param handler the handler object to find an adapter for\r\n\t * @throws ServletException if no HandlerAdapter can be found for the handler.\r\n\t * This is a fatal error.\r\n\t */\r\n\tprotected HandlerAdapter getHandlerAdapter(HandlerMeta handler) throws ServletException {\r\n//\t\tIterator it = this.handlerAdapters.iterator();\r\n//\t\twhile (it.hasNext()) {\r\n//\t\t\tHandlerAdapter ha = (HandlerAdapter) it.next();\r\n//\t\t\r\n//\t\t\tif (ha.supports(handler)) {\r\n//\t\t\t\treturn ha;\r\n//\t\t\t}\r\n//\t\t}\r\n\t\tif(this.annotationMethodHandlerAdapter.supports(handler))\r\n\t\t\treturn this.annotationMethodHandlerAdapter;\r\n\t\telse if(this.simpleControllerHandlerAdapter.supports(handler))\r\n\t\t\treturn this.simpleControllerHandlerAdapter;\r\n\t\telse if(this.httpRequestHandlerAdapter.supports(handler))\r\n\t\t\treturn httpRequestHandlerAdapter;\r\n\t\tthrow new ServletException(\"No adapter for handler [\" + handler.getHandlerName()  +\r\n\t\t\t\t\"]: Does your handler implement a supported interface like Controller?\");\r\n\t}\r\n\t\r\n//\t/**\r\n//\t * Process this request, publishing an event regardless of the outcome.\r\n//\t * <p>The actual event handling is performed by the abstract\r\n//\t * {@link #doService} template method.\r\n//\t */\r\n//\tprotected final void processRequest(HttpServletRequest request, HttpServletResponse response)\r\n//\t\t\tthrows ServletException, IOException {\r\n//\r\n//\t\tlong startTime = System.currentTimeMillis();\r\n//\t\tThrowable failureCause = null;\r\n//\r\n//\t\ttry {\r\n//\t\t\tdoService(request, response);\r\n//\t\t}\r\n//\t\tcatch (ServletException ex) {\r\n//\t\t\tfailureCause = ex;\r\n//\t\t\tthrow ex;\r\n//\t\t}\r\n//\t\tcatch (IOException ex) {\r\n//\t\t\tfailureCause = ex;\r\n//\t\t\tthrow ex;\r\n//\t\t}\r\n//\t\tcatch (Throwable ex) {\r\n//\t\t\tfailureCause = ex;\r\n//\t\t\tthrow new NestedServletException(\"Request processing failed\", ex);\r\n//\t\t}\r\n//\r\n//\t\tfinally {\r\n//\t\t\tif (failureCause != null) {\r\n////\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\r\n//\t\t\t}\r\n//\t\t\telse {\r\n//\t\t\t\tthis.logger.debug(\"Successfully completed request\");\r\n//\t\t\t}\r\n////\t\t\tif (this.publishEvents) {\r\n////\t\t\t\t// Whether or not we succeeded, publish an event.\r\n////\t\t\t\tlong processingTime = System.currentTimeMillis() - startTime;\r\n////\t\t\t\tthis.webApplicationContext.publishEvent(\r\n////\t\t\t\t\t\tnew ServletRequestHandledEvent(this,\r\n////\t\t\t\t\t\t\t\trequest.getRequestURI(), request.getRemoteAddr(),\r\n////\t\t\t\t\t\t\t\trequest.getMethod(), getServletConfig().getServletName(),\r\n////\t\t\t\t\t\t\t\tWebUtils.getSessionId(request), getUsernameForRequest(request),\r\n////\t\t\t\t\t\t\t\tprocessingTime, failureCause));\r\n////\t\t\t}\r\n//\t\t}\r\n//\t}\r\n\t\r\n\t/**\r\n\t * No handler found -> set appropriate HTTP response status.\r\n\t * @param request current HTTP request\r\n\t * @param response current HTTP response\r\n\t * @throws Exception if preparing the response failed\r\n\t */\r\n\tprotected void noHandlerFound(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n//\t\tif (pageNotFoundLogger.isWarnEnabled()) \r\n\t\t{\r\n\t\t\tString requestUri = new UrlPathHelper().getRequestUri(request);\r\n\t\t\tpageNotFoundLogger.warn(\"No mapping found for HTTP request with URI [\" +\r\n\t\t\t\t\trequestUri + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\r\n\t\t}\r\n\t\tresponse.sendError(HttpServletResponse.SC_NOT_FOUND);\r\n\t}\r\n\t\r\n\tprivate String contextAttribute = \"contextConfigLocation\";\r\n\tprivate boolean publishContext;\r\n\tprivate boolean cleanupAfterInclude;\r\n\t\r\n\t/** ThemeResolver used by this servlet */\r\n\tprivate ThemeResolver themeResolver;\r\n\tprivate String getContextAttributeName()\r\n\t{\r\n\t\treturn contextAttribute;\r\n\t}\r\n\t/**\r\n\t * Retrieve a <code>WebApplicationContext</code> from the <code>ServletContext</code>\r\n\t * attribute with the {@link #setContextAttribute configured name}. The\r\n\t * <code>WebApplicationContext</code> must have already been loaded and stored in the\r\n\t * <code>ServletContext</code> before this servlet gets initialized (or invoked).\r\n\t * <p>Subclasses may override this method to provide a different\r\n\t * <code>WebApplicationContext</code> retrieval strategy.\r\n\t * @return the WebApplicationContext for this servlet, or <code>null</code> if not found\r\n\t * @see #getContextAttribute()\r\n\t */\r\n\tprotected WebApplicationContext findWebApplicationContext() {\r\n\t\tString attrName = getContextAttributeName();\r\n\t\tif (attrName == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tWebApplicationContext wac =\r\n\t\t\t\tWebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName);\r\n//\t\tif (wac == null) {\r\n//\t\t\tthrow new IllegalStateException(\"No WebApplicationContext found: initializer not registered?\");\r\n//\t\t}\r\n\t\treturn wac;\r\n\t}\r\n\t/**\r\n\t * Overridden method of {@link HttpServletBean}, invoked after any bean properties\r\n\t * have been set. Creates this servlet's WebApplicationContext.\r\n\t * @throws Exception \r\n\t */\r\n\tprotected final void initServletBean(ServletConfig config) throws Exception {\r\n\t\tgetServletContext().log(\"Initializing Bboss MVC FrameworkServlet '\" + getServletName() + \"'\");\r\n//\t\tif (this.logger.isInfoEnabled()) {\r\n\t\t\tthis.logger.debug(\"FrameworkServlet '\" + getServletName() + \"': initialization started\");\r\n//\t\t}\r\n\t\tlong startTime = System.currentTimeMillis();\r\n\r\n\t\ttry {\r\n\t\t\tinitWebApplicationContext( config);\r\n//\t\t\tinitFrameworkServlet();\r\n\t\t}\r\n//\t\tcatch (ServletException ex) {\r\n//\t\t\tthis.logger.error(\"Context initialization failed\", ex);\r\n//\t\t\tthrow ex;\r\n//\t\t}\r\n\t\tcatch (Exception ex) {\r\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\r\n//\t\tif (this.logger.isInfoEnabled()) {\r\n\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\r\n\t\t\tthis.logger.debug(\"FrameworkServlet '\" + getServletName() + \"': initialization completed in \" +\r\n\t\t\t\t\telapsedTime + \" ms\");\r\n//\t\t}\r\n\t}\r\n\t\r\n\tprotected final void publishWebService(ServletConfig config)\r\n\t{\r\n\t\tString wsloadclass = \"org.frameworkset.spi.remote.webservice.WSLoader\";\r\n\t\tMethod publishAllWebService = null;\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tClass clazz = Class.forName(wsloadclass);\r\n\t\t\tpublishAllWebService = clazz.getMethod(\"publishAllWebService\", ClassLoader.class,ServletConfig.class);\r\n\t\t\t\r\n\t\t\t\r\n//\t\t\tWSLoader.publishAllWebService(this.getClass().getClassLoader(),config);\r\n\t\t\t\r\n\t\t} catch (Throwable e) {\r\n\t\t\tlogger.debug(\" Not found \"+wsloadclass + \" or \"+e.getMessage()+\" in classpath,Ignore publish mvc webservices.\");\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tif(publishAllWebService != null)\r\n\t\t\t{\r\n\t\t\t\tlogger.debug(\"Publish MVC webservice start.\");\r\n\t\t\t\tpublishAllWebService.invoke(null, this.getClass().getClassLoader(),config);\r\n\t\t\t\tlogger.debug(\"Publish MVC webservice finished.\");\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\tlogger.debug(\"Publish mvc webservices failed:\",e);\r\n\t\t} \r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize and publish the WebApplicationContext for this servlet.\r\n\t * <p>Delegates to {@link #createWebApplicationContext} for actual creation\r\n\t * of the context. Can be overridden in subclasses.\r\n\t * @return the WebApplicationContext instance\r\n\t * @throws BeansException if the context couldn't be initialized\r\n\t * @see #setContextClass\r\n\t * @see #setContextConfigLocation\r\n\t */\r\n\tprotected WebApplicationContext initWebApplicationContext(ServletConfig config) {\r\n\t\tWebApplicationContext wac = findWebApplicationContext();\r\n\t\tif (wac == null) {\r\n//\t\t\t// No fixed context defined for this servlet - create a local one.\r\n//\t\t\tWebApplicationContext parent =\r\n//\t\t\t\t\tWebApplicationContextUtils.getWebApplicationContext(getServletContext());\r\n\t\t\twac = createWebApplicationContext( config);\r\n\t\t}\r\n\r\n//\t\tif (!this.refreshEventReceived) {\r\n//\t\t\t// Apparently not a ConfigurableApplicationContext with refresh support:\r\n//\t\t\t// triggering initial onRefresh manually here.\r\n//\t\t\tonRefresh(wac);\r\n//\t\t}\r\n\t\t\r\n\r\n\t\tif (this.publishContext) {\r\n\t\t\t// Publish the context as a servlet context attribute.\r\n\t\t\tString attrName = getServletContextAttributeName();\r\n\t\t\tgetServletContext().setAttribute(attrName, wac);\r\n\t\t\tif (this.logger.isDebugEnabled()) {\r\n\t\t\t\tthis.logger.debug(\"Published WebApplicationContext of servlet '\" + getServletName() +\r\n\t\t\t\t\t\t\"' as ServletContext attribute with name [\" + attrName + \"]\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn wac;\r\n\t}\r\n\tprivate LifeCycleProcessorExecutor lifeCycleProcessorExecutor;\r\n\tprivate void startLifeCycleProcessor() {\r\n\t\tif(lifeCycleProcessorExecutor != null)\r\n\t\t{\r\n\t\t\tlifeCycleProcessorExecutor.startProcessor();\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void stopLifeCycleProcessor() {\r\n\t\tif(lifeCycleProcessorExecutor != null)\r\n\t\t{\r\n\t\t\tlifeCycleProcessorExecutor.stopProcessor();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Prefix for the ServletContext attribute for the WebApplicationContext.\r\n\t * The completion is the servlet name.\r\n\t */\r\n\tpublic static final String SERVLET_CONTEXT_PREFIX = DispatchServlet.class.getName() + \".CONTEXT.\";\r\n\t/**\r\n\t * Return the ServletContext attribute name for this servlet's WebApplicationContext.\r\n\t * <p>The default implementation returns\r\n\t * <code>SERVLET_CONTEXT_PREFIX + servlet name</code>.\r\n\t * @see #SERVLET_CONTEXT_PREFIX\r\n\t * @see #getServletName\r\n\t */\r\n\tpublic String getServletContextAttributeName() {\r\n\t\treturn SERVLET_CONTEXT_PREFIX + getServletName();\r\n\t}\r\n\r\n\t\r\n\t/**\r\n\t * Instantiate the WebApplicationContext for this servlet, either a default\r\n\t * \r\n\t * or a {@link #setContextClass custom context class}, if set.\r\n\t * <p>This implementation expects custom contexts to implement the\r\n\r\n\t * interface. Can be overridden in subclasses.\r\n\t * <p>Do not forget to register this servlet instance as application listener on the\r\n\t * created context (for triggering its {@link #onRefresh callback}, and to call\r\n\r\n\t * before returning the context instance.\r\n\t * @param parent the parent ApplicationContext to use, or <code>null</code> if none\r\n\t * @return the WebApplicationContext for this servlet\r\n\t * @throws BeansException if the context couldn't be initialized\r\n\r\n\t */\r\n\tprotected WebApplicationContext createWebApplicationContext(ServletConfig config)\r\n\t{\r\n\t\tString contextConfigLocation = config.getInitParameter(\"contextConfigLocation\");\r\n\t\t//start event\r\n\t\t\r\n\t\twebApplicationContext = WebApplicationContext.getWebApplicationContext(config.getServletContext(),contextConfigLocation);\r\n\t\t\r\n\t\treturn webApplicationContext;\r\n\t}\r\n\t//-------------------begin\r\n\tprivate static String getRequestUri(HttpServletRequest request) {\r\n\t\tString uri = (String) request.getAttribute(WebUtils.INCLUDE_REQUEST_URI_ATTRIBUTE);\r\n\t\tif (uri == null) {\r\n\t\t\turi = request.getRequestURI();\r\n\t\t}\r\n\t\treturn uri;\r\n\t}\r\n\t/**\r\n\t * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\r\n\t * for the actual dispatching.\r\n\t */\r\n\t@Override\r\n\tprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\r\n\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\r\n\t\t\t\t\t\" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\r\n\t\t}\r\n\r\n\t\t// Keep a snapshot of the request attributes in case of an include,\r\n\t\t// to be able to restore the original attributes after the include.\r\n\t\tMap<String, Object> attributesSnapshot = null;\r\n\t\tif (WebUtils.isIncludeRequest(request)) {\r\n\t\t\tattributesSnapshot = new HashMap<String, Object>();\r\n\t\t\tEnumeration<?> attrNames = request.getAttributeNames();\r\n\t\t\twhile (attrNames.hasMoreElements()) {\r\n\t\t\t\tString attrName = (String) attrNames.nextElement();\r\n\t\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(\"org.frameworkset.web.servlet\")) {\r\n\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Make framework objects available to handlers and view objects.\r\n\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\r\n\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\r\n\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\r\n\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\r\n\r\n\t\t\r\n\t\ttry {\r\n\t\t\tDataFormatUtil.initDateformatThreadLocal();\r\n\t\t\tdoDispatch(request, response);\r\n\t\t\t\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\t\r\n\t\t\tif (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\r\n\t\t\t\tDataFormatUtil.releaseDateformatThreadLocal();\r\n\t\t\t\t// Restore the original attribute snapshot, in case of an include.\r\n\t\t\t\tif (attributesSnapshot != null) {\r\n\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Process the actual dispatching to the handler.\r\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\r\n\t * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\r\n\t * to find the first that supports the handler class.\r\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\r\n\t * themselves to decide which methods are acceptable.\r\n\t * @param request current HTTP request\r\n\t * @param response current HTTP response\r\n\t * @throws Exception in case of any kind of processing failure\r\n\t */\r\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n\t\t/**yinbiaoping*/\r\n\t\tHttpServletRequest processedRequest = request;\r\n\t\tHandlerExecutionChain mappedHandler = null;\r\n\t\tboolean multipartRequestParsed = false;\r\n\r\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\r\n\r\n\t\ttry {\r\n\t\t\tModelAndView mv = null;\r\n\t\t\tException dispatchException = null;\r\n\t\t\tPageContext pageContext = RequestContextHolder.getPageContext();\r\n\t\t\ttry {\r\n\t\t\t\tprocessedRequest = checkMultipart(request);\r\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\r\n\r\n\t\t\t\t// Determine handler for the current request.\r\n\t\t\t\tmappedHandler = getHandler(processedRequest,false);\r\n\t\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null || mappedHandler.getHandler().getHandler() == null) {\r\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Determine handler adapter for the current request.\r\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\r\n\r\n\t\t\t\t// Process last-modified header, if supported by the handler.\r\n\t\t\t\tString method = request.getMethod();\r\n\t\t\t\tboolean isGet = \"GET\".equals(method);\r\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\r\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\r\n\t\t\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmappedHandler.addInterceptors(this.gloabelHandlerInterceptors);\r\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Actually invoke the handler.\r\n\t\t\t\tmv = ha.handle(processedRequest, response,pageContext, mappedHandler.getHandler());\r\n\r\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\r\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\tdispatchException = ex;\r\n\t\t\t}\r\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\r\n\t\t}\r\n\t\tcatch (Exception ex) {\r\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\r\n\t\t}\r\n\t\tcatch (Error err) {\r\n\t\t\ttriggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\r\n\t\t\t\t// Instead of postHandle and afterCompletion\r\n\t\t\t\tif (mappedHandler != null) {\r\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Clean up any resources used by a multipart request.\r\n\t\t\t\tif (multipartRequestParsed) {\r\n\t\t\t\t\tcleanupMultipart(processedRequest);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response,\r\n\t\t\tHandlerExecutionChain mappedHandler, Exception ex) throws Exception {\r\n\r\n\t\tif (mappedHandler != null) {\r\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, ex);\r\n\t\t}\r\n\t\tthrow ex;\r\n\t}\r\n\r\n\tprivate void triggerAfterCompletionWithError(HttpServletRequest request, HttpServletResponse response,\r\n\t\t\tHandlerExecutionChain mappedHandler, Error error) throws Exception {\r\n\r\n\t\tServletException ex = new NestedServletException(\"Handler processing failed\", error);\r\n\t\tif (mappedHandler != null) {\r\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, ex);\r\n\t\t}\r\n\t\tthrow ex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Do we need view name translation?\r\n\t */\r\n\tprivate void applyDefaultViewName(HttpServletRequest request, ModelAndView mv) throws Exception {\r\n\t\tif (mv != null && !mv.hasView()) {\r\n\t\t\tmv.setViewName(getDefaultViewName(request));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handle the result of handler selection and handler invocation, which is\r\n\t * either a ModelAndView or an Exception to be resolved to a ModelAndView.\r\n\t */\r\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\r\n\t\t\tHandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {\r\n\r\n\t\tboolean errorView = false;\r\n\r\n\t\tif (exception != null) {\r\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\r\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\r\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\r\n\t\t\t\tHandlerMeta handlerMeta = (mappedHandler != null ? mappedHandler.getHandler() : null);\r\n\t\t\t\tmv = processHandlerException(request, response, handlerMeta,exception);\r\n\t\t\t\terrorView = (mv != null);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Did the handler return a view to render?\r\n\t\tif (mv != null && !mv.wasCleared()) {\r\n\t\t\trender(mv, request, response);\r\n\t\t\tif (errorView) {\r\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" + getServletName() +\r\n\t\t\t\t\t\t\"': assuming HandlerAdapter completed request handling\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\r\n\t\t\t// Concurrent handling started during a forward\r\n\t\t\treturn;\r\n\t\t}\r\n/**yinbiaoping */\r\n\t\tif (mappedHandler != null) {\r\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\r\n\t\t}\r\n\t}\r\n\r\n//\t/**\r\n//\t * Build a LocaleContext for the given request, exposing the request's primary locale as current locale.\r\n//\t * <p>The default implementation uses the dispatcher's LocaleResolver to obtain the current locale,\r\n//\t * which might change during a request.\r\n//\t * @param request current HTTP request\r\n//\t * @return the corresponding LocaleContext\r\n//\t */\r\n//\t \r\n//\tprotected LocaleContext buildLocaleContext(final HttpServletRequest request) {\r\n//\t\tif (this.localeResolver instanceof LocaleContextResolver) {\r\n//\t\t\treturn ((LocaleContextResolver) this.localeResolver).resolveLocaleContext(request);\r\n//\t\t}\r\n//\t\telse {\r\n//\t\t\treturn new LocaleContext() {\r\n//\t\t\t\t@Override\r\n//\t\t\t\tpublic Locale getLocale() {\r\n//\t\t\t\t\treturn localeResolver.resolveLocale(request);\r\n//\t\t\t\t}\r\n//\t\t\t};\r\n//\t\t}\r\n//\t}\r\n\t//-------------------end\r\n\t\r\n\t\r\n//\t/**\r\n//\t * Exposes the DispatcherServlet-specific request attributes and\r\n//\t * delegates to {@link #doDispatch} for the actual dispatching.\r\n//\t */\r\n//\tprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n//\t\tif (logger.isDebugEnabled()) {\r\n//\t\t\tString requestUri = new UrlPathHelper().getRequestUri(request);\r\n//\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() +\r\n//\t\t\t\t\t\"' processing request for [\" + requestUri + \"]\");\r\n//\t\t}\r\n//\r\n//\t\t// Keep a snapshot of the request attributes in case of an include,\r\n//\t\t// to be able to restore the original attributes after the include.\r\n//\t\tMap attributesSnapshot = null;\r\n//\t\tif (WebUtils.isIncludeRequest(request)) {\r\n//\t\t\tlogger.debug(\"Taking snapshot of request attributes before include\");\r\n//\t\t\tattributesSnapshot = new HashMap();\r\n//\t\t\tEnumeration attrNames = request.getAttributeNames();\r\n//\t\t\twhile (attrNames.hasMoreElements()) {\r\n//\t\t\t\tString attrName = (String) attrNames.nextElement();\r\n//\t\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(\"org.frameworkset.web.servlet\")) {\r\n//\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n//\t\t}\r\n//\r\n//\t\t// Make framework objects available to handlers and view objects.\r\n//\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\r\n//\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\r\n//\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\r\n//\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\r\n//\r\n//\t\ttry {\r\n//\t\t\tDataFormatUtil.initDateformatThreadLocal();\r\n//\t\t\tdoDispatch(request, response);\r\n//\t\t}\r\n//\t\tfinally {\r\n//\t\t\tDataFormatUtil.releaseDateformatThreadLocal();\r\n//\t\t\t// Restore the original attribute snapshot, in case of an include.\r\n//\t\t\tif (attributesSnapshot != null) {\r\n//\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);\r\n//\t\t\t}\r\n//\t\t}\r\n//\t}\r\n\t\r\n\t/**\r\n\t * Restore the request attributes after an include.\r\n\t * @param request current HTTP request\r\n\t * @param attributesSnapshot the snapshot of the request attributes\r\n\t * before the include\r\n\t */\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tprivate void restoreAttributesAfterInclude(HttpServletRequest request, Map<?,?> attributesSnapshot) {\r\n\t\t// Need to copy into separate Collection here, to avoid side effects\r\n\t\t// on the Enumeration when removing attributes.\r\n\t\tSet<String> attrsToCheck = new HashSet<String>();\r\n\t\tEnumeration<?> attrNames = request.getAttributeNames();\r\n\t\twhile (attrNames.hasMoreElements()) {\r\n\t\t\tString attrName = (String) attrNames.nextElement();\r\n\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(\"org.frameworkset.web.servlet\")) {\r\n\t\t\t\tattrsToCheck.add(attrName);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Add attributes that may have been removed\r\n\t\tattrsToCheck.addAll((Set<String>) attributesSnapshot.keySet());\r\n\r\n\t\t// Iterate over the attributes to check, restoring the original value\r\n\t\t// or removing the attribute, respectively, if appropriate.\r\n\t\tfor (String attrName : attrsToCheck) {\r\n\t\t\tObject attrValue = attributesSnapshot.get(attrName);\r\n\t\t\tif (attrValue == null){\r\n\t\t\t\trequest.removeAttribute(attrName);\r\n\t\t\t}\r\n\t\t\telse if (attrValue != request.getAttribute(attrName)) {\r\n\t\t\t\trequest.setAttribute(attrName, attrValue);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Return this servlet's ThemeSource, if any; else return <code>null</code>.\r\n\t * <p>Default is to return the WebApplicationContext as ThemeSource,\r\n\t * provided that it implements the ThemeSource interface.\r\n\t * @return the ThemeSource, if any\r\n\t * @see #getWebApplicationContext()\r\n\t */\r\n\tpublic final ThemeSource getThemeSource() {\r\n\t\tif (getWebApplicationContext() instanceof ThemeSource) {\r\n\t\t\treturn (ThemeSource) getWebApplicationContext();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * \u8bbe\u7f6e\u8bed\u8a00\u73af\u5883\r\n\t * @param request\r\n\t */\r\n\tpublic static void setLocaleContext(final HttpServletRequest request)\r\n\t{\r\n\t\tLocaleContextHolder.setLocaleContext(buildLocaleContext(request), threadContextInheritable);\r\n\t}\r\n\t/**\r\n\t * Process the actual dispatching to the handler.\r\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\r\n\t * The HandlerAdapter will be obtained by querying the servlet's installed\r\n\t * HandlerAdapters to find the first that supports the handler class.\r\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or\r\n\t * handlers themselves to decide which methods are acceptable.\r\n\t * @param request current HTTP request\r\n\t * @param response current HTTP response\r\n\t * @throws Exception in case of any kind of processing failure\r\n\t */\r\n\t/**protected void doDispatch1(HttpServletRequest request, HttpServletResponse response) throws Exception {\r\n\t\trequest = new RequestMethodHttpServletRequest(request);\r\n\t\tHttpServletRequest processedRequest = request;\r\n\t\tHandlerExecutionChain mappedHandler = null;\r\n\t\tint interceptorIndex = -1;\r\n\r\n\t\t// Expose current LocaleResolver and request as LocaleContext.\r\n\t\tLocaleContext previousLocaleContext = null;\r\n\r\n\t\t// Expose current RequestAttributes to current thread.\r\n\t\tRequestAttributes previousRequestAttributes = null;\r\n\t\tServletRequestAttributes requestAttributes = null;\r\n\r\n\t\tif (logger.isTraceEnabled()) {\r\n\t\t\tlogger.trace(\"Bound request context to thread: \" + request);\r\n\t\t}\r\n\t\tPageContext pageContext = null;\r\n\t\tJspFactory fac= null;\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tpreviousLocaleContext = LocaleContextHolder.getLocaleContext();\r\n//\t\t\tLocaleContextHolder.setLocaleContext(buildLocaleContext(request), this.threadContextInheritable);\r\n\t\t\tsetLocaleContext(  request);\r\n\r\n\t\t\t// Expose current RequestAttributes to current thread.\r\n\t\t\tpreviousRequestAttributes = RequestContextHolder.getRequestAttributes();\r\n\t\t\tfac=JspFactory.getDefaultFactory();\r\n\t\t\tpageContext=fac.getPageContext(this, request,response, null, false, JspWriter.DEFAULT_BUFFER <= 0?8192:JspWriter.DEFAULT_BUFFER, true); \r\n\t\t\trequestAttributes = new ServletRequestAttributes(request, response,pageContext);\r\n\t\t\tRequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable);\r\n\t\t\tModelAndView mv = null;\r\n\t\t\tboolean errorView = false;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tprocessedRequest = checkMultipart(request);\r\n\r\n\t\t\t\t// Determine handler for the current request.\r\n\t\t\t\tmappedHandler = getHandler(processedRequest, false);\r\n\t\t\t\tif (mappedHandler == null \r\n\t\t\t\t\t\t|| mappedHandler.getHandler() == null \r\n\t\t\t\t\t\t|| mappedHandler.getHandler().getHandler() == null) {\r\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply preHandle methods of registered interceptors.\r\n\t\t\t\tmappedHandler.addInterceptors(this.gloabelHandlerInterceptors);\r\n\t\t\t\tHandlerInterceptor[] interceptors = mappedHandler.getInterceptors();\r\n\t\t\t\tif (interceptors != null) {\r\n\t\t\t\t\tfor (int i = 0; i < interceptors.length; i++) {\r\n\t\t\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\r\n\t\t\t\t\t\tif (!interceptor.preHandle(processedRequest, response, mappedHandler.getHandler())) {\r\n\t\t\t\t\t\t\ttriggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, null);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tinterceptorIndex = i;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Actually invoke the handler.\r\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\r\n\t\t\t\t\r\n//\t\t\t\tif(this.messageConverters != null && messageConverters.length > 0)\r\n//\t\t\t\t{\r\n//\t\t\t\t\ttry\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\trequest.setAttribute(messageConverters_KEY, this.messageConverters);\r\n//\t\t\t\t\t\tmv = ha.handle(processedRequest,response,  pageContext,mappedHandler.getHandler());\r\n//\t\t\t\t\t}\r\n//\t\t\t\t\tfinally\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\trequest.removeAttribute(messageConverters_KEY);\r\n//\t\t\t\t\t}\r\n//\t\t\t\t\t\r\n//\t\t\t\t}\r\n//\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tmv = ha.handle(processedRequest,response,  pageContext,mappedHandler.getHandler());\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Do we need view name translation?\r\n\t\t\t\tif (mv != null && !mv.hasView()) {\r\n\t\t\t\t\tmv.setViewName(getDefaultViewName(request));\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Apply postHandle methods of registered interceptors.\r\n\t\t\t\tif (interceptors != null) {\r\n\t\t\t\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\r\n\t\t\t\t\t\tinterceptor.postHandle(processedRequest, response, mappedHandler.getHandler(), mv);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (ModelAndViewDefiningException ex) {\r\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", ex);\r\n\t\t\t\tmv = ex.getModelAndView();\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\tHandlerMeta handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\r\n\t\t\t\tmv = processHandlerException(processedRequest, response, handler, ex);\r\n\t\t\t\terrorView = (mv != null);\r\n\t\t\t}\r\n\r\n\t\t\t// Did the handler return a view to render?\r\n\t\t\tif (mv != null && !mv.wasCleared()) {\r\n\t\t\t\trender(mv, processedRequest, response);\r\n\t\t\t\tif (errorView) {\r\n\t\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\t\tlogger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" +\r\n\t\t\t\t\t\t\tgetServletName() + \"': assuming HandlerAdapter completed request handling\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Trigger after-completion for successful outcome.\r\n\t\t\ttriggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, null);\r\n\t\t}\r\n\r\n\t\tcatch (Exception ex) {\r\n\t\t\t// Trigger after-completion for thrown exception.\r\n\t\t\ttriggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\t\tcatch (Error err) {\r\n\t\t\tServletException ex = new NestedServletException(\"Handler processing failed\", err);\r\n\t\t\t// Trigger after-completion for thrown exception.\r\n\t\t\ttriggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\t\tcatch (Throwable err) {\r\n\t\t\tServletException ex = new NestedServletException(\"Handler processing failed\", err);\r\n\t\t\t// Trigger after-completion for thrown exception.\r\n\t\t\ttriggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);\r\n\t\t\tthrow ex;\r\n\t\t}\r\n\r\n\t\tfinally {\r\n\t\t\t// Clean up any resources used by a multipart request.\r\n\t\t\ttry {\r\n\t\t\t\tif (processedRequest != request) {\r\n\t\t\t\t\tcleanupMultipart(processedRequest);\r\n\t\t\t\t}\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\t// Reset thread-bound context.\r\n\t\t\tRequestContextHolder.setRequestAttributes(previousRequestAttributes, this.threadContextInheritable);\r\n\t\t\tLocaleContextHolder.setLocaleContext(previousLocaleContext, this.threadContextInheritable);\r\n\r\n\t\t\t// Clear request attributes.\r\n\t\t\trequestAttributes.requestCompleted();\r\n\t\t\tif (logger.isTraceEnabled()) {\r\n\t\t\t\tlogger.trace(\"Cleared thread-bound request context: \" + request);\r\n\t\t\t}\r\n\t\t\tif(fac != null && pageContext != null)\r\n\t\t\t{\r\n\t\t\t\tfac.releasePageContext(pageContext);\r\n\t\t\t}\r\n\t\t}\r\n\t}*/\r\n\t\r\n\t/**\r\n\t * Clean up any resources used by the given multipart request (if any).\r\n\t * @param request current HTTP request\r\n\t * @see MultipartResolver#cleanupMultipart\r\n\t */\r\n\tprotected void cleanupMultipart(HttpServletRequest request) {\r\n\t\tif (request instanceof MultipartHttpServletRequest) {\r\n\t\t\tthis.multipartResolver.cleanupMultipart((MultipartHttpServletRequest) request);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @FIXME\r\n\t * Determine an error ModelAndView via the registered HandlerExceptionResolvers.\r\n\t * @param request current HTTP request\r\n\t * @param response current HTTP response\r\n\t * @param handler the executed handler, or <code>null</code> if none chosen at the time of\r\n\t * the exception (for example, if multipart resolution failed)\r\n\t * @param ex the exception that got thrown during handler execution\r\n\t * @return a corresponding ModelAndView to forward to\r\n\t * @throws Exception if no error ModelAndView found\r\n\t */\r\n\tprotected ModelAndView processHandlerException(\r\n\t\t\tHttpServletRequest request, HttpServletResponse response, HandlerMeta handlerMeta, Exception ex)\r\n\t\t\tthrows Exception {\r\n\r\n\t\t// Check registerer HandlerExceptionResolvers...\r\n\t\tModelAndView exMv = null;\r\n\t\tif(handlerExceptionResolvers != null)\r\n\t\t{\r\n\t\t\tfor (Iterator it = this.handlerExceptionResolvers.iterator(); exMv == null && it.hasNext();) {\r\n\t\t\t\tHandlerExceptionResolver resolver = (HandlerExceptionResolver) it.next();\r\n\t\t\t\texMv = resolver.resolveException(request, response, handlerMeta, ex);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (exMv != null) {\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tif(exMv.getView() != null && exMv.getView() instanceof AbstractUrlBasedView)\r\n\t\t\t\t{\r\n\t\t\t\t\t//\r\n\t\t\t\t\tAbstractUrlBasedView view = (AbstractUrlBasedView) exMv.getView();\r\n\t\t\t\t\tString url = view.getUrl();\r\n\t\t\t\t\tif(UrlBasedViewResolver.isPathVariable(url))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\turl = handlerMeta.getUrlPath(url,null,handlerMeta.getHandler(),request);\r\n\t\t\t\t\t\tview.setUrl(url);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(exMv != null && UrlBasedViewResolver.isPathVariable(exMv.getViewName()))\r\n\t\t\t\t{\r\n\t\t\t\t\texMv.setViewName(handlerMeta.getUrlPath(exMv.getViewName(),null,handlerMeta.getHandler(),request));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcatch(PathURLNotSetException ex1)\r\n\t\t\t{\r\n\t\t\t\treturn HandlerUtils.handleNoSuchRequestHandlingMethod(ex1, request, response);\r\n\t\t\t}\r\n//\t\t\tif (logger.isDebugEnabled()) \r\n\t\t\t{\r\n\t\t\t\tlogger.debug(\"Handler execution resulted in exception - forwarding to resolved error view: \" + exMv, ex);\r\n\t\t\t}\r\n\t\t\tWebUtils.exposeErrorRequestAttributes(request, ex, getServletName());\r\n\t\t\treturn exMv;\r\n\t\t}\r\n\r\n\t\t// Send default responses for well-known exceptions, if possible.\r\n\t\tif (ex instanceof HttpRequestMethodNotSupportedException && !response.isCommitted()) {\r\n\t\t\tString[] supportedMethods = ((HttpRequestMethodNotSupportedException) ex).getSupportedMethods();\r\n\t\t\tif (supportedMethods != null) {\r\n\t\t\t\tresponse.setHeader(\"Allow\", StringUtil.arrayToDelimitedString(supportedMethods, \", \"));\r\n\t\t\t}\r\n\t\t\tresponse.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ex.getMessage());\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tthrow ex;\r\n\t}\r\n\t/**\r\n\t * Translate the supplied request into a default view name.\r\n\t * @param request current HTTP servlet request\r\n\t * @return the view name (or <code>null</code> if no default found)\r\n\t * @throws Exception if view name translation failed\r\n\t */\r\n\tprotected String getDefaultViewName(HttpServletRequest request) throws Exception {\r\n\t\treturn this.viewNameTranslator.getViewName(request);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Trigger afterCompletion callbacks on the mapped HandlerInterceptors.\r\n\t * Will just invoke afterCompletion for all interceptors whose preHandle\r\n\t * invocation has successfully completed and returned true.\r\n\t * @param mappedHandler the mapped HandlerExecutionChain\r\n\t * @param interceptorIndex index of last interceptor that successfully completed\r\n\t * @param ex Exception thrown on handler execution, or <code>null</code> if none\r\n\t * @see HandlerInterceptor#afterCompletion\r\n\t */\r\n\tprivate void triggerAfterCompletion(\r\n\t\t\tHandlerExecutionChain mappedHandler, int interceptorIndex,\r\n\t\t\tHttpServletRequest request, HttpServletResponse response, Exception ex)\r\n\t\t\tthrows Exception {\r\n\r\n\t\t// Apply afterCompletion methods of registered interceptors.\r\n\t\tif (mappedHandler != null) {\r\n\t\t\tHandlerInterceptor[] interceptors = mappedHandler.getInterceptors();\r\n\t\t\tif (interceptors != null) {\r\n\t\t\t\tfor (int i = interceptorIndex; i >= 0; i--) {\r\n\t\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tinterceptor.afterCompletion(request, response, mappedHandler.getHandler(), ex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch (Throwable ex2) {\r\n\t\t\t\t\t\tlogger.error(\"HandlerInterceptor.afterCompletion threw exception\", ex2);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Convert the request into a multipart request, and make multipart resolver available.\r\n\t * If no multipart resolver is set, simply use the existing request.\r\n\t * @param request current HTTP request\r\n\t * @return the processed request (multipart wrapper if necessary)\r\n\t * @see MultipartResolver#resolveMultipart\r\n\t */\r\n\tprotected HttpServletRequest checkMultipart(HttpServletRequest request) throws MultipartException {\r\n\t\tif (this.multipartResolver != null && this.multipartResolver.isMultipart(request)) {\r\n\t\t\tif (request instanceof MultipartHttpServletRequest) {\r\n\t\t\t\tlogger.debug(\"Request is already a MultipartHttpServletRequest - if not in a forward, \" +\r\n\t\t\t\t\t\t\"this typically results from an additional MultipartFilter in web.xml\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.multipartResolver.resolveMultipart(request);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If not returned before: return original request.\r\n\t\treturn request;\r\n\t}\r\n\r\n\t/**\r\n\t * Return this servlet's WebApplicationContext.\r\n\t */\r\n\tpublic final WebApplicationContext getWebApplicationContext() {\r\n\t\treturn webApplicationContext;\r\n\t}\r\n\t/**\r\n\t * Render the given ModelAndView. This is the last stage in handling a request.\r\n\t * It may involve resolving the view by name.\r\n\t * @param mv the ModelAndView to render\r\n\t * @param request current HTTP servlet request\r\n\t * @param response current HTTP servlet response\r\n\t * @throws Exception if there's a problem rendering the view\r\n\t */\r\n\tprotected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)\r\n\t\t\tthrows Exception {\r\n\r\n\t\t// Determine locale for request and apply it to the response.\r\n//\t\tLocale locale = this.localeResolver.resolveLocale(request);\r\n\t\tLocale locale = RequestContextUtils.getRequestContextLocal(request);\r\n\t\tresponse.setLocale(locale);\r\n\r\n\t\tView view = null;\r\n\r\n\t\tif (mv.isReference()) {\r\n\t\t\t// We need to resolve the view name.\r\n\t\t\tview = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);\r\n\t\t\tif (view == null) {\r\n\t\t\t\tthrow new ServletException(\"Could not resolve view with name '\" + mv.getViewName() +\r\n\t\t\t\t\t\t\"' in servlet with name '\" + getServletName() + \"'\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// No need to lookup: the ModelAndView object contains the actual View object.\r\n\t\t\tview = mv.getView();\r\n\t\t\tif (view == null) {\r\n\t\t\t\tthrow new ServletException(\"ModelAndView [\" + mv + \"] neither contains a view name nor a \" +\r\n\t\t\t\t\t\t\"View object in servlet with name '\" + getServletName() + \"'\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Delegate to the View object for rendering.\r\n\t\tif (logger.isDebugEnabled()) {\r\n\t\t\tlogger.debug(\"Rendering view [\" + view + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\r\n\t\t}\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\t\r\n\t\t\tif(mv.hasErrors())\r\n\t\t\t\trequest.setAttribute(RequestContext.BIND_ERROR_MESSAGES_KEY, mv.getErrors());\r\n\t\t\tview.render(mv.getModelInternal(), request, response);\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\trequest.removeAttribute(RequestContext.BIND_ERROR_MESSAGES_KEY);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Resolve the given view name into a View object (to be rendered).\r\n\t * <p>Default implementations asks all ViewResolvers of this dispatcher.\r\n\t * Can be overridden for custom resolution strategies, potentially based\r\n\t * on specific model attributes or request parameters.\r\n\t * @param viewName the name of the view to resolve\r\n\t * @param model the model to be passed to the view\r\n\t * @param locale the current locale\r\n\t * @param request current HTTP servlet request\r\n\t * @return the View object, or <code>null</code> if none found\r\n\t * @throws Exception if the view cannot be resolved\r\n\t * (typically in case of problems creating an actual View object)\r\n\t * @see ViewResolver#resolveViewName\r\n\t */\r\n\tprotected View resolveViewName(String viewName, Map model, Locale locale, HttpServletRequest request)\r\n\t\t\tthrows Exception {\r\n\r\n\t\tfor (Iterator it = this.viewResolvers.iterator(); it.hasNext();) {\r\n\t\t\tViewResolver viewResolver = (ViewResolver) it.next();\r\n\t\t\tView view = viewResolver.resolveViewName(viewName, locale);\r\n\t\t\tif (view != null) {\r\n\t\t\t\treturn view;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tprotected void initMessagesources(ServletConfig config)\r\n\t{\r\n\t\tmessagesources = config.getInitParameter(\"messagesources\");\r\n\t\tif(messagesources == null)\r\n\t\t{\r\n\t\t\tmessagesources = DispatchServlet.getDefaultStrategies().getProperty(\"messageSource.basename\",\"/WEB-INF/messages\");\r\n\t\t}\r\n\t\tuseCodeAsDefaultMessage = config.getInitParameter(\"useCodeAsDefaultMessage\");\r\n\t\tif(useCodeAsDefaultMessage == null)\r\n\t\t{\r\n\t\t\tuseCodeAsDefaultMessage = DispatchServlet.getDefaultStrategies().getProperty(\"messageSource.useCodeAsDefaultMessage\",\"true\");\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tprotected void initWebsockets(ServletConfig config)\r\n\t{\r\n\t\tString WebSocketLoader = \"org.frameworkset.web.socket.config.WebSocketLoader\";\r\n\t\tMethod publishAllWebService = null;\r\n\t\ttry {\r\n\t\t\t\r\n\t\t\tpublishAllWebService = Class.forName(WebSocketLoader).getMethod(\"loadMvcWebSocketService\", ClassLoader.class,HandlerMappingsTable.class,ServletConfig.class);\r\n\t\t\t\r\n\t\t\t\r\n//\t\t\tWSLoader.publishAllWebService(this.getClass().getClassLoader(),config);\r\n\t\t\t\r\n\t\t} catch (Exception e) {\r\n\t\t\tlogger.debug(\" Not found \"+WebSocketLoader + \" or \"+e.getMessage()+\" in classpath,Ignore publish  WebSocket Services.\");\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tif(publishAllWebService != null)\r\n\t\t\t{\r\n\t\t\t\tlogger.debug(\"Publish WebSocket Services start.\");\r\n\t\t\t\tpublishAllWebService.invoke(null, this.getClass().getClassLoader(),this.handlerMappings,config);\r\n\t\t\t\tif(handlerMappings.getWebsocketLifecycleProcessor() != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.lifeCycleProcessorExecutor = new LifeCycleProcessorExecutor();\r\n\t\t\t\t\tthis.lifeCycleProcessorExecutor.setLifecycleProcessor(handlerMappings.getWebsocketLifecycleProcessor());\r\n\t\t\t\t}\r\n\t\t\t\tlogger.debug(\"Publish WebSocket Services  finished.\");\r\n\t\t\t}\r\n\t\t} catch (Exception e) {\r\n\t\t\tlogger.debug(\"Publish WebSocket Services failed:\",e);\r\n\t\t} \r\n\t\t\r\n\t}\r\n\tprivate Map<String,String> parserIocLifeCycleEventListenerParams(String iocLifeCycleEventListenerParams)\r\n\t{\r\n\t\tMap<String,String> paramMap = new HashMap<String,String>();\r\n\t\tif(iocLifeCycleEventListenerParams != null && iocLifeCycleEventListenerParams.trim().length() > 0)\r\n\t\t{\r\n\t\t\t\r\n\t\t\tString[] params = iocLifeCycleEventListenerParams.split(\"\\\\|\");\r\n\t\t\tfor(String param :params)\r\n\t\t\t{\r\n\t\t\t\tString[] pv = param.split(\"=\");\r\n\t\t\t\tparamMap.put(pv[0], pv[1]);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\treturn paramMap;\r\n\t}\r\n\tprotected void initIocLifeCycleEventListeners(ServletConfig config)\r\n\t{\r\n\t\tiocLifeCycleEventListeners = config.getInitParameter(\"iocLifeCycleEventListeners\");\r\n\t\tif(StringUtil.isNotEmpty(iocLifeCycleEventListeners ))\r\n\t\t{\r\n\t\t\t\r\n\t\t\tiocLifeCycleEventListenerParams = config.getInitParameter(\"iocLifeCycleEventListenerParams\");\r\n\t\t\tMap<String,String> params = parserIocLifeCycleEventListenerParams(iocLifeCycleEventListenerParams);\r\n\t\t\tString[]  iocLifeCycleEventListeners_ = iocLifeCycleEventListeners.split(\",\");\r\n\t\t\tthis.iocLifeCycleEventListenerList = new ArrayList<IocLifeCycleEventListener>();\r\n\t\t\tfor(String iocLifeCycleEventListener:iocLifeCycleEventListeners_)\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\tIocLifeCycleEventListener l = (IocLifeCycleEventListener)Class.forName(iocLifeCycleEventListener).newInstance();\r\n\t\t\t\t\tif(params != null && params.size() > 0)\r\n\t\t\t\t\t\tl.init(params);\r\n\t\t\t\t\tiocLifeCycleEventListenerList.add(l);\r\n\t\t\t\t} catch (InstantiationException e) {\r\n\t\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t} catch (IllegalAccessException e) {\r\n\t\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t} catch (ClassNotFoundException e) {\r\n\t\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Initialize the strategy objects that this servlet uses.\r\n\t * <p>May be overridden in subclasses in order to initialize\r\n\t * further strategy objects.\r\n\t * @throws Exception \r\n\t */\r\n\tprotected void init_(ServletConfig config) throws Exception {\r\n//\t\tloadCustomJars(config);\r\n\t\tinitMessagesources(config);\r\n\t\tthis.initIocLifeCycleEventListeners( config);\r\n\t\tfor(int i = 0; this.iocLifeCycleEventListenerList != null && i < this.iocLifeCycleEventListenerList.size(); i ++)\r\n\t\t{\r\n\t\t\tIocLifeCycleEventListener l = this.iocLifeCycleEventListenerList.get(i);\r\n\t\t\ttry {\r\n\t\t\t\tl.beforestart();\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tlogger.warn(\"before start WebApplicationContext:\",e);\r\n\t\t\t}\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tthis.initServletBean(config);\r\n\t\t\tpublishWebService(config);\r\n//\t\tWebApplicationContext context = this.initWebApplicationContext( config);\r\n\t\t\tinitMessageConverters(this.webApplicationContext);\r\n\t\t\tinitMultipartResolver(this.webApplicationContext);\r\n\t\t\tinitLocaleResolver(this.webApplicationContext);\r\n\t\t\tinitThemeResolver(this.webApplicationContext);\r\n\t\t\tinitHandlerMappings(this.webApplicationContext);\r\n\t\t\tinitHandlerAdapters(this.webApplicationContext);\r\n\t\t\tinitHandlerExceptionResolvers(this.webApplicationContext);\r\n\t\t\tinitRequestToViewNameTranslator(this.webApplicationContext);\r\n\t\t\tinitViewResolvers(this.webApplicationContext);\r\n\t\t\tinitGloabelHandlerInterceptors(this.webApplicationContext);\r\n\t\t\tinitWebsockets(config);\r\n\t\t\tstartLifeCycleProcessor(  );\r\n\t\t} catch (Exception e1) {\r\n\t\t\tlogger.warn(\"Init WebApplicationContext:\",e1);\r\n\t\t}\r\n\t\tfor(int i = 0; this.iocLifeCycleEventListenerList != null && i < this.iocLifeCycleEventListenerList.size(); i ++)\r\n\t\t{\r\n\t\t\tIocLifeCycleEventListener l = this.iocLifeCycleEventListenerList.get(i);\r\n\t\t\ttry {\r\n\t\t\t\tl.afterstart(webApplicationContext);\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tlogger.warn(\"After start WebApplicationContext:\",e);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate void initMessageConverters(\r\n\t\t\tWebApplicationContext webApplicationContext) {\r\n\t\tProList<Pro> list = webApplicationContext.getListProperty(\"httpMessageConverters\");\r\n\t\tif(list != null && list.size() > 0)\r\n\t\t{\r\n\t\t\tmessageConverters = new HttpMessageConverter[list.size()];\r\n\t\t\tfor(int i = 0; i < list.size(); i ++)\r\n\t\t\t{\r\n\t\t\t\tPro t = list.get(i);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis.messageConverters[i] = (HttpMessageConverter) t\r\n\t\t\t\t\t\t\t.getBean();\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\tSystem.out.println(\"load messageConvert failed:\" + t.getClazz());\r\n\t\t\t\t\tlogger.error(\"load messageConvert failed:\" + t.getClazz(), e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n//\tprivate void loadCustomJars(ServletConfig config)\r\n//\t{\r\n//\t\tString docbase = this.getServletContext().getRealPath(\"\");\r\n//\t\tString customJarsLocation = config.getInitParameter(\"customJarsLocation\");\r\n//\t\tlogger.debug(\"load custom Jars from Location:\\r\\n\" + customJarsLocation);\r\n//\t\tCustomClassLoader classLoader = (CustomClassLoader)getDefaultStrategy(null, CustomClassLoader.class);\r\n//\t\tclassLoader.initClassLoader(this.getClass().getClassLoader());\r\n//\t\tCustomJarsLauncher launcher = new CustomJarsLauncher();\r\n//\t\tlauncher.loadFromRepository(classLoader, docbase, customJarsLocation);\r\n//\t}\r\n\t\r\n\t/**\r\n\t * Initialize the ViewResolvers used by this class.\r\n\t * <p>If no ViewResolver beans are defined in the BeanFactory\r\n\t * for this namespace, we default to InternalResourceViewResolver.\r\n\t */\r\n\tprivate void initViewResolvers(BaseApplicationContext context) {\r\n\t\tthis.viewResolvers = null;\r\n\r\n//\t\tif (this.detectAllViewResolvers) {\r\n//\t\t\t// Find all ViewResolvers in the ApplicationContext,\r\n//\t\t\t// including ancestor contexts.\r\n//\t\t\tMap matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(\r\n//\t\t\t\t\tcontext, ViewResolver.class, true, false);\r\n//\t\t\tif (!matchingBeans.isEmpty()) {\r\n//\t\t\t\tthis.viewResolvers = new ArrayList(matchingBeans.values());\r\n//\t\t\t\t// We keep ViewResolvers in sorted order.\r\n//\t\t\t\tCollections.sort(this.viewResolvers, new OrderComparator());\r\n//\t\t\t}\r\n//\t\t}\r\n//\t\telse \r\n\t\t{\r\n\t\t\ttry {\r\n\t\t\t\tObject vr = context.getBeanObject(VIEW_RESOLVER_BEAN_NAME);\r\n\t\t\t\tthis.viewResolvers = Collections.singletonList(vr);\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\t// Ignore, we'll add a default ViewResolver later.\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Ensure we have at least one ViewResolver, by registering\r\n\t\t// a default ViewResolver if no other resolvers are found.\r\n\t\tif (this.viewResolvers == null) {\r\n\t\t\tthis.viewResolvers = getDefaultStrategies(context, ViewResolver.class);\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"No ViewResolvers found in servlet '\" + getServletName() + \"': using default\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the RequestToViewNameTranslator used by this servlet instance. If no\r\n\t * implementation is configured then we default to DefaultRequestToViewNameTranslator.\r\n\t */\r\n\tprivate void initRequestToViewNameTranslator(BaseApplicationContext context) {\r\n\t\ttry {\r\n\t\t\tthis.viewNameTranslator = (RequestToViewNameTranslator) context.getBeanObject(\r\n\t\t\t\t\tREQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME);\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Using RequestToViewNameTranslator [\" + this.viewNameTranslator + \"]\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception ex) {\r\n\t\t\t// We need to use the default.\r\n\t\t\ttry {\r\n\t\t\t\tthis.viewNameTranslator =\r\n\t\t\t\t\t\t(RequestToViewNameTranslator) getDefaultStrategy(context, RequestToViewNameTranslator.class);\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Unable to locate RequestToViewNameTranslator with name '\" +\r\n\t\t\t\t\t\tREQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME +\r\n\t\t\t\t\t\t\"': using default [\" + this.viewNameTranslator.getClass().getCanonicalName() + \"]\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Initialize the HandlerExceptionResolver used by this class.\r\n\t * <p>If no bean is defined with the given name in the BeanFactory\r\n\t * for this namespace, we default to no exception resolver.\r\n\t */\r\n\tprivate void initHandlerExceptionResolvers(BaseApplicationContext context) {\r\n\t\tthis.handlerExceptionResolvers = null;\r\n\r\n//\t\tif (this.detectAllHandlerExceptionResolvers) {\r\n//\t\t\t// Find all HandlerExceptionResolvers in the ApplicationContext,\r\n//\t\t\t// including ancestor contexts.\r\n//\t\t\tMap matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(\r\n//\t\t\t\t\tcontext, HandlerExceptionResolver.class, true, false);\r\n//\t\t\tif (!matchingBeans.isEmpty()) {\r\n//\t\t\t\tthis.handlerExceptionResolvers = new ArrayList(matchingBeans.values());\r\n//\t\t\t\t// We keep HandlerExceptionResolvers in sorted order.\r\n//\t\t\t\tCollections.sort(this.handlerExceptionResolvers, new OrderComparator());\r\n//\t\t\t}\r\n//\t\t}\r\n//\t\telse \r\n\t\t{\r\n\t\t\ttry {\r\n\t\t\t\tObject her = context.getBeanObject(\r\n\t\t\t\t\t\tHANDLER_EXCEPTION_RESOLVER_BEAN_NAME);\r\n\t\t\t\tthis.handlerExceptionResolvers = Collections.singletonList(her);\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\t// Ignore, no HandlerExceptionResolver is fine too.\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Just for consistency, check for default HandlerExceptionResolvers...\r\n\t\t// There aren't any in usual scenarios.\r\n\t\tif (this.handlerExceptionResolvers == null) {\r\n\t\t\tthis.handlerExceptionResolvers = getDefaultStrategies(context, HandlerExceptionResolver.class);\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"No HandlerExceptionResolvers found in servlet '\" + getServletName() + \"': using default\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.handlerExceptionResolvers != null && this.handlerExceptionResolvers.size() == 0)\r\n\t\t\tthis.handlerExceptionResolvers = null;\r\n\t}\r\n\t\r\n\tprivate void initGloabelHandlerInterceptors(BaseApplicationContext context)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tthis.gloabelHandlerInterceptors = (List<HandlerInterceptor>)context.\r\n\t\t\t\t\tgetBeanObject(\"org.frameworkset.web.servlet.gloabel.HandlerInterceptors\");\r\n\t\t}\r\n\t\tcatch (Exception e)\r\n\t\t{\r\n\t\t\tthis.gloabelHandlerInterceptors = new ArrayList<HandlerInterceptor>();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Initialize the HandlerAdapters used by this class.\r\n\t * <p>If no HandlerAdapter beans are defined in the BeanFactory\r\n\t * for this namespace, we default to SimpleControllerHandlerAdapter.\r\n\t */\r\n\tprivate void initHandlerAdapters(BaseApplicationContext context) {\r\n//\t\tthis.handlerAdapters = null;\r\n//\r\n////\t\tif (this.detectAllHandlerAdapters) {\r\n////\t\t\t// Find all HandlerAdapters in the ApplicationContext,\r\n////\t\t\t// including ancestor contexts.\r\n////\t\t\tMap matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(\r\n////\t\t\t\t\tcontext, HandlerAdapter.class, true, false);\r\n////\t\t\tif (!matchingBeans.isEmpty()) {\r\n////\t\t\t\tthis.handlerAdapters = new ArrayList(matchingBeans.values());\r\n////\t\t\t\t// We keep HandlerAdapters in sorted order.\r\n////\t\t\t\tCollections.sort(this.handlerAdapters, new OrderComparator());\r\n////\t\t\t}\r\n////\t\t}\r\n////\t\telse \r\n////\t\t{\r\n////\t\t\ttry {\r\n////\t\t\t\tObject ha = context.getBeanObject(HANDLER_ADAPTER_BEAN_NAME);\r\n////\t\t\t\tList temp = Collections.singletonList(ha);\r\n////\t\t\t\tthis.handlerAdapters = (List<HandlerAdapter>)temp;\r\n////\t\t\t}\r\n////\t\t\tcatch (Exception ex) {\r\n////\t\t\t\t// Ignore, we'll add a default HandlerAdapter later.\r\n////\t\t\t}\r\n////\t\t}\r\n//\r\n//\t\t// Ensure we have at least some HandlerAdapters, by registering\r\n//\t\t// default HandlerAdapters if no other adapters are found.\r\n//\t\tif (this.handlerAdapters == null) {\r\n//\t\t\tthis.handlerAdapters = getDefaultStrategies(context, HandlerAdapter.class);\r\n//\t\t\tif (logger.isDebugEnabled()) {\r\n//\t\t\t\tlogger.debug(\"No HandlerAdapters found in servlet '\" + getServletName() + \"': using default\");\r\n//\t\t\t}\r\n//\t\t}\r\n//\t\tif(handlerAdapters != null)\r\n//\t\t{\r\n//\t\t\tfor(HandlerAdapter adapter :handlerAdapters)\r\n//\t\t\t{\r\n//\t\t\t\tif(!adapter.containMessageConverters())\r\n//\t\t\t\t\tadapter.setMessageConverters(messageConverters);\r\n//\t\t\t}\r\n//\t\t}\r\n\t\t\r\n\t\tthis.annotationMethodHandlerAdapter = createDefaultStrategy(context, AnnotationMethodHandlerAdapter.class);\r\n\t\tif(!annotationMethodHandlerAdapter.containMessageConverters())\r\n\t\t\tannotationMethodHandlerAdapter.setMessageConverters(messageConverters);\r\n\t\t\r\n\t\tthis.simpleControllerHandlerAdapter = createDefaultStrategy(context, SimpleControllerHandlerAdapter.class);\r\n\t\tif(!simpleControllerHandlerAdapter.containMessageConverters())\r\n\t\t\tsimpleControllerHandlerAdapter.setMessageConverters(messageConverters);\r\n\t\t\r\n\t\tthis.httpRequestHandlerAdapter = createDefaultStrategy(context, HttpRequestHandlerAdapter.class);\r\n\t\tif(!httpRequestHandlerAdapter.containMessageConverters())\r\n\t\t\thttpRequestHandlerAdapter.setMessageConverters(messageConverters);\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the HandlerMappings used by this class.\r\n\t * <p>If no HandlerMapping beans are defined in the BeanFactory\r\n\t * for this namespace, we default to BeanNameUrlHandlerMapping.\r\n\t */\r\n\tprivate void initHandlerMappings(BaseApplicationContext context) {\r\n\t\tthis.handlerMappings = null;\r\n//\t\tthis.handlerMappings = (HandlerMappingsTable)context.getBeanObject(HANDLER_MAPPING_BEAN_NAME);\r\n//\t\tif (this.handlerMappings == null) {\r\n//\t\t\tList handlerMappings_ = getDefaultStrategies(context, HandlerMapping.class);\r\n//\t\t\thandlerMappings = (HandlerMappingsTable) context.createBean(HandlerMappingsTable.class);\r\n//\t\t\tinitHandlerMappings(handlerMappings_);\r\n//\t\t\thandlerMappings.setHandlerMappings(handlerMappings_);\r\n//\t\t\tif (logger.isDebugEnabled()) {\r\n//\t\t\t\tlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\r\n//\t\t\t}\r\n//\t\t}\r\n\t\thandlerMappings = (HandlerMappingsTable) context.createBean(HandlerMappingsTable.class);\r\n\t\t DefaultAnnotationHandlerMapping handlerMapping = (DefaultAnnotationHandlerMapping) context.createBean(DefaultAnnotationHandlerMapping.class);\r\n//\t\t @SuppressWarnings(\"unchecked\")\r\n//\t\tHandlerUrlMappingRegisterTable<String,HandlerMeta> registTable = (HandlerUrlMappingRegisterTable<String,HandlerMeta>) context.createBean(HandlerUrlMappingRegisterTable.class);\r\n//\t\t handlerMapping.setHandlerMap(registTable);\r\n\t\t _initHandlerMappings(handlerMapping);\r\n\t\t handlerMappings.setHandlerMapping(handlerMapping);\r\n////\t\t\tMap matchingBeans = BeanFactoryUtils.beansOfTypeIncludingAncestors(\r\n////\t\t\t\t\tcontext, HandlerMapping.class, true, false);\r\n////\t\t\tif (!matchingBeans.isEmpty()) {\r\n////\t\t\t\tthis.handlerMappings = new ArrayList(matchingBeans.values());\r\n////\t\t\t\t// We keep HandlerMappings in sorted order.\r\n////\t\t\t\tCollections.sort(this.handlerMappings, new OrderComparator());\r\n////\t\t\t}\r\n//\t\t\r\n////\t\telse \r\n//\t\t{\r\n//\t\t\ttry {\r\n//\t\t\t\tObject hm = context.getBeanObject(HANDLER_MAPPING_BEAN_NAME);\r\n//\t\t\t\tthis.handlerMappings = Collections.singletonList(hm);\r\n//\t\t\t}\r\n//\t\t\tcatch (Exception ex) {\r\n//\t\t\t\t// Ignore, we'll add a default HandlerMapping later.\r\n//\t\t\t}\r\n//\t\t}\r\n//\r\n//\t\t// Ensure we have at least one HandlerMapping, by registering\r\n//\t\t// a default HandlerMapping if no other mappings are found.\r\n//\t\tif (this.handlerMappings == null) {\r\n//\t\t\tthis.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\r\n//\t\t\tinitHandlerMappings();\r\n//\t\t\tif (logger.isDebugEnabled()) {\r\n//\t\t\t\tlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\r\n//\t\t\t}\r\n//\t\t}\r\n\t}\r\n//\tprivate void initHandlerMappings(List handlerMappings_)\r\n//\t{\r\n//\t\tif(handlerMappings_ != null && handlerMappings_.size() > 0)\r\n//\t\t{\r\n//\t\t\t\tfor(int i = 0; i < handlerMappings_.size(); i ++)\r\n//\t\t\t\t{\r\n//\t\t\t\t\tObject handler = handlerMappings_.get(i);\r\n//\t\t\t\t\tif(handler instanceof AbstractUrlHandlerMapping)\r\n//\t\t\t\t\t{\r\n//\t\t\t\t\t\t((AbstractUrlHandlerMapping)handler).setAlwaysUseFullPath(true);\r\n//\t\t\t\t\t}\r\n//\t\t\t\t}\r\n//\t\t}\r\n//\t}\r\n\tprivate void _initHandlerMappings(Object handler)\r\n\t{\r\n\t\t \r\n\t\t\tif(handler instanceof AbstractUrlHandlerMapping)\r\n\t\t\t{\r\n\t\t\t\t((AbstractUrlHandlerMapping)handler).setAlwaysUseFullPath(true);\r\n\t\t\t}\r\n\t\t\t\t \r\n\t\t \r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the ThemeResolver used by this class.\r\n\t * <p>If no bean is defined with the given name in the BeanFactory\r\n\t * for this namespace, we default to a FixedThemeResolver.\r\n\t */\r\n\tprivate void initThemeResolver(BaseApplicationContext context) {\r\n\t\ttry {\r\n\t\t\tthis.themeResolver = (ThemeResolver)\r\n\t\t\t\t\tcontext.getBeanObject(THEME_RESOLVER_BEAN_NAME);\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Using ThemeResolver [\" + this.themeResolver + \"]\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception ex) {\r\n\t\t\t// We need to use the default.\r\n\t\t\ttry {\r\n\t\t\t\tthis.themeResolver = (ThemeResolver) getDefaultStrategy(context, ThemeResolver.class);\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\t// TODO Auto-generated catch block\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Unable to locate ThemeResolver with name '\" + THEME_RESOLVER_BEAN_NAME +\r\n\t\t\t\t\t\t\"': using default [\" + this.themeResolver + \"]\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic static LocaleResolver getLocaleResolver(WebApplicationContext context)\r\n\t{\r\n\t\tif(localeResolver != null)\r\n\t\t{\r\n\t\t\treturn localeResolver;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tinitLocaleResolver(context);\r\n\t\t\treturn localeResolver;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tpublic static LocaleResolver getLocaleResolver()\r\n\t{\r\n\t\tif(localeResolver != null)\r\n\t\t{\r\n\t\t\treturn localeResolver;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tinitLocaleResolver(DispatchServlet.webApplicationContext);\r\n\t\t\treturn localeResolver;\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the LocaleResolver used by this class.\r\n\t * <p>If no bean is defined with the given name in the BeanFactory\r\n\t * for this namespace, we default to AcceptHeaderLocaleResolver.\r\n\t */\r\n\tpublic synchronized static void initLocaleResolver(WebApplicationContext context) {\r\n\t\tif(localeResolver == null)\r\n\t\t{\r\n\t\t\ttry {\r\n\t\t\t\tlocaleResolver = (LocaleResolver)\r\n\t\t\t\t\t\tcontext.getBeanObject(LOCALE_RESOLVER_BEAN_NAME);\r\n\t\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\t\tlogger.debug(\"Using LocaleResolver [\" + localeResolver + \"]\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (Exception ex) {\r\n\t\t\t\t// We need to use the default.\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlocaleResolver = (LocaleResolver) getDefaultStrategy(context, LocaleResolver.class);\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\tlocaleResolver = new DefaultLocaleResolver();\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\t\tlogger.debug(\"Unable to locate LocaleResolver with name '\" + LOCALE_RESOLVER_BEAN_NAME +\r\n\t\t\t\t\t\t\t\"': using default [\" + localeResolver + \"]\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Return the default strategy object for the given strategy interface.\r\n\t * <p>The default implementation delegates to {@link #getDefaultStrategies},\r\n\t * expecting a single object in the list.\r\n\t * @param context the current WebApplicationContext\r\n\t * @param strategyInterface the strategy interface\r\n\t * @return the corresponding strategy object\r\n\t * @throws BeansException if initialization failed\r\n\t * @see #getDefaultStrategies\r\n\t */\r\n\tpublic static Object getDefaultStrategy(BaseApplicationContext context, Class strategyInterface) throws BeanInstanceException {\r\n\t\tList strategies = getDefaultStrategies(context, strategyInterface);\r\n\t\tif (strategies.size() <= 0) {\r\n\t\t\tthrow new BeanInstanceException(\r\n\t\t\t\t\t\"DispatcherServlet needs exactly 1 strategy for interface [\" + strategyInterface.getName() + \"]\");\r\n\t\t}\r\n\t\treturn strategies.get(0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a List of default strategy objects for the given strategy interface.\r\n\t * <p>The default implementation uses the \"DispatcherServlet.properties\" file\r\n\t * (in the same package as the DispatcherServlet class) to determine the class names.\r\n\t * It instantiates the strategy objects through the context's BeanFactory.\r\n\t * @param context the current WebApplicationContext\r\n\t * @param strategyInterface the strategy interface\r\n\t * @return the List of corresponding strategy objects\r\n\t * @throws BeansException if initialization failed\r\n\t */\r\n\tpublic static List getDefaultStrategies(BaseApplicationContext context, Class strategyInterface) throws BeanInstanceException {\r\n\t\tString key = strategyInterface.getName();\r\n\t\tList strategies = null;\r\n\t\tString value = defaultStrategies.getProperty(key);\r\n\t\tif (value != null) {\r\n\t\t\tString[] classNames = StringUtil.commaDelimitedListToStringArray(value);\r\n\t\t\tstrategies = new ArrayList(classNames.length);\r\n\t\t\tfor (int i = 0; i < classNames.length; i++) {\r\n\t\t\t\tString className = classNames[i];\r\n//\t\t\t\tif (JdkVersion.getMajorJavaVersion() < JdkVersion.JAVA_15 && className.indexOf(\"Annotation\") != -1) {\r\n//\t\t\t\t\t// Skip Java 5 specific strategies when running on JDK 1.4...\r\n//\t\t\t\t\tcontinue;\r\n//\t\t\t\t}\r\n\t\t\t\ttry {\r\n\t\t\t\t\tClass clazz = ClassUtils.forName(className, DispatchServlet.class.getClassLoader());\r\n\t\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);\r\n\t\t\t\t\tstrategies.add(strategy);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (ClassNotFoundException ex) {\r\n\t\t\t\t\tthrow new BeanInstanceException(\r\n\t\t\t\t\t\t\t\"Could not find DispatcherServlet's default strategy class [\" + className +\r\n\t\t\t\t\t\t\t\"] for interface [\" + key + \"]\", ex);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (LinkageError err) {\r\n\t\t\t\t\tthrow new BeanInstanceException(\r\n\t\t\t\t\t\t\t\"Error loading DispatcherServlet's default strategy class [\" + className +\r\n\t\t\t\t\t\t\t\"] for interface [\" + key + \"]: problem with class file or dependent class\", err);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstrategies = Collections.EMPTY_LIST;\r\n\t\t}\r\n\t\treturn strategies;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Create a default strategy.\r\n\t * <p>The default implementation uses\r\n\r\n\t * @param context the current WebApplicationContext\r\n\t * @param clazz the strategy implementation class to instantiate\r\n\t * @throws BeansException if initialization failed\r\n\t * @return the fully configured strategy instance\r\n\r\n\t */\r\n\tprotected static <T> T createDefaultStrategy(BaseApplicationContext context, Class<T> clazz) throws BeanInstanceException {\r\n\t\t\r\n\t\tif(context != null)\r\n\t\t\treturn (T)context.createBean(clazz);\r\n\t\telse\r\n\t\t{\r\n\t\t\ttry {\r\n\t\t\t\treturn clazz.newInstance();\r\n\t\t\t} catch (InstantiationException e) {\r\n\t\t\t\tthrow new BeanInstanceException(e);\r\n\t\t\t} catch (IllegalAccessException e) {\r\n\t\t\t\tthrow new BeanInstanceException(e);\r\n\t\t\t}\r\n\t\t\t catch (Exception e) {\r\n\t\t\t\t\tthrow new BeanInstanceException(e);\r\n\t\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Initialize the MultipartResolver used by this class.\r\n\t * <p>If no bean is defined with the given name in the BeanFactory\r\n\t * for this namespace, no multipart handling is provided.\r\n\t */\r\n\tprivate void initMultipartResolver(WebApplicationContext context) {\r\n\t\ttry {\r\n\t\t\tthis.multipartResolver = (MultipartResolver)\r\n\t\t\t\t\tcontext.getBeanObject(MULTIPART_RESOLVER_BEAN_NAME);\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Using MultipartResolver [\" + this.multipartResolver + \"]\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (Exception ex) {\r\n\t\t\t// Default is no multipart resolver.\r\n\t\t\tthis.multipartResolver = null;\r\n\t\t\tif (logger.isDebugEnabled()) {\r\n\t\t\t\tlogger.debug(\"Unable to locate MultipartResolver with name '\"\t+ MULTIPART_RESOLVER_BEAN_NAME +\r\n\t\t\t\t\t\t\"': no multipart request handling provided\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t@Override\r\n\tpublic void init(ServletConfig config) throws ServletException {\r\n\t\t\r\n\t\tsuper.init(config);\r\n\t\ttry {\r\n\t\t\tinit_( config);\r\n\t\t}\r\n\t\tcatch(ServletException e)\r\n\t\t{\r\n\t\t\tthrow e;\r\n\t\t} catch (Exception e) {\r\n\t\t\t\r\n\t\t\tthrow new NestedServletException(\"\",e);\r\n\t\t}\r\n\t}\r\n\t\r\n//\t\r\n//\t/**\r\n//\t * Delegate GET requests to processRequest/doService.\r\n//\t * <p>Will also be invoked by HttpServlet's default implementation of <code>doHead</code>,\r\n//\t * with a <code>NoBodyResponse</code> that just captures the content length.\r\n//\t * @see #doService\r\n//\t * @see #doHead\r\n//\t */\r\n//\tprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\r\n//\t    throws ServletException, IOException {\r\n//\r\n//\t\tprocessRequest(request, response);\r\n//\t}\r\n\r\n//\t/**\r\n//\t * Delegate POST requests to {@link #processRequest}.\r\n//\t * @see #doService\r\n//\t */\r\n//\tprotected final void doPost(HttpServletRequest request, HttpServletResponse response)\r\n//\t    throws ServletException, IOException {\r\n//\r\n//\t\tprocessRequest(request, response);\r\n//\t}\r\n\r\n//\t/**\r\n//\t * Delegate PUT requests to {@link #processRequest}.\r\n//\t * @see #doService\r\n//\t */\r\n//\tprotected final void doPut(HttpServletRequest request, HttpServletResponse response)\r\n//\t    throws ServletException, IOException {\r\n//\r\n//\t\tprocessRequest(request, response);\r\n//\t}\r\n\r\n//\t/**\r\n//\t * Delegate DELETE requests to {@link #processRequest}.\r\n//\t * @see #doService\r\n//\t */\r\n//\tprotected final void doDelete(HttpServletRequest request, HttpServletResponse response)\r\n//\t    throws ServletException, IOException {\r\n//\r\n//\t\tprocessRequest(request, response);\r\n//\t}\r\n\r\n//\t/**\r\n//\t * Delegate OPTIONS requests to {@link #processRequest}, if desired.\r\n//\t * <p>Applies HttpServlet's standard OPTIONS processing first.\r\n//\t * @see #doService\r\n//\t */\r\n//\tprotected void doOptions(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n//\t\tsuper.doOptions(request, response);\r\n//\t\tif (this.dispatchOptionsRequest) {\r\n//\t\t\tprocessRequest(request, response);\r\n//\t\t}\r\n//\t}\r\n\r\n//\t/**\r\n//\t * Delegate TRACE requests to {@link #processRequest}, if desired.\r\n//\t * <p>Applies HttpServlet's standard TRACE processing first.\r\n//\t * @see #doService\r\n//\t */\r\n//\tprotected void doTrace(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\r\n//\t\tsuper.doTrace(request, response);\r\n//\t\tif (this.dispatchTraceRequest) {\r\n//\t\t\tprocessRequest(request, response);\r\n//\t\t}\r\n//\t}\r\n\r\n\r\n//\t\r\n\r\n\t/**\r\n\t * Determine the username for the given request.\r\n\t * <p>The default implementation takes the name of the UserPrincipal, if any.\r\n\t * Can be overridden in subclasses.\r\n\t * @param request current HTTP request\r\n\t * @return the username, or <code>null</code> if none found\r\n\t * @see javax.servlet.http.HttpServletRequest#getUserPrincipal()\r\n\t */\r\n\tprotected String getUsernameForRequest(HttpServletRequest request) {\r\n\t\tPrincipal userPrincipal = request.getUserPrincipal();\r\n\t\treturn (userPrincipal != null ? userPrincipal.getName() : null);\r\n\t}\r\n\r\n\tpublic static String getUseCodeAsDefaultMessage() {\r\n\t\treturn useCodeAsDefaultMessage;\r\n\t}\r\n\r\n\r\n\r\n\t@Override\r\n\tpublic void destroy() {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tsuper.destroy();\r\n//\t\tif(this.handlerAdapters != null)\r\n//\t\t{\r\n//\t\t\tfor(int i = 0 ; i < this.handlerAdapters.size() ;i ++)\r\n//\t\t\t{\r\n//\t\t\t\tHandlerAdapter ha = this.handlerAdapters.get(i);\r\n//\t\t\t\tha.destroy();\r\n//\t\t\t}\r\n//\t\t\tthis.handlerAdapters.clear();\r\n//\t\t\tthis.handlerAdapters = null;\r\n//\t\t}\r\n\t\tif(annotationMethodHandlerAdapter != null)\r\n\t\t\tthis.annotationMethodHandlerAdapter.destroy();\r\n\t\t\r\n\t\tif(simpleControllerHandlerAdapter != null)\r\n\t\t\tthis.simpleControllerHandlerAdapter.destroy();\r\n\t\t \r\n\t\tif(httpRequestHandlerAdapter != null)\r\n\t\t\tthis.httpRequestHandlerAdapter.destroy();\r\n\t\t\r\n\t\tstopLifeCycleProcessor();\r\n\t\tif(webApplicationContext != null)\r\n\t\t\tthis.webApplicationContext.destroy();\r\n\t\t\r\n\t\t \r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"bbossgroups/bboss","sample_ref":"refs/heads/master","sample_path":"bboss-mvc/src/org/frameworkset/web/servlet/DispatchServlet.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"02be96e8bc4f71171c68e1938d4bcbd9a8d757fc","size":"383","content":"package me.vsesh.ymaps_android_webview.ymaps_android_webview;\n\nimport android.app.Application;\nimport android.test.ApplicationTestCase;\n\n/**\n * <a href=\"http://d.android.com/tools/testing/testing_android.html\">Testing Fundamentals</a>\n */\npublic class ApplicationTest extends ApplicationTestCase<Application> {\n    public ApplicationTest() {\n        super(Application.class);\n    }\n}","binary":"false","copies":"1","sample_repo_name":"vsesh/ymaps-android-webview","sample_ref":"refs/heads/master","sample_path":"project/app/src/androidTest/java/me/vsesh/ymaps_android_webview/ymaps_android_webview/ApplicationTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"073ee7f16b53e55bedfdf3e2df8aa4579cdb62a7","size":"298","content":"package com.devesion.commons.obd.adapter.command.at;\n\n/**\n * Represents AT Reset Command.\n */\npublic class EnableBaudRateCommand extends AbstractAtCommand {\n\n\t@Override\n\tpublic String getOperands() {\n\t\treturn \"PP 0C ON\";\n\t}\n\n\t@Override\n\tpublic boolean checkResponseEnabled() {\n\t\treturn false;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"devesion/java-obd-adapter","sample_ref":"refs/heads/master","sample_path":"adapter/src/main/java/com/devesion/commons/obd/adapter/command/at/EnableBaudRateCommand.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"110fa9da5f3535ab9fcc84f38956ac5357a3be69","size":"533","content":"package com.link_intersystems.blog.model.anemic;\n\nimport java.math.BigDecimal;\n\npublic class OrderItem {\n\n\tprivate BigDecimal price;\n\n\tprivate int quantity;\n\n\tprivate String name;\n\n\tpublic BigDecimal getPrice() {\n\t\treturn price;\n\t}\n\n\tpublic void setPrice(BigDecimal price) {\n\t\tthis.price = price;\n\t}\n\n\tpublic int getQuantity() {\n\t\treturn quantity;\n\t}\n\n\tpublic void setQuantity(int quantity) {\n\t\tthis.quantity = quantity;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"link-intersystems/blog","sample_ref":"refs/heads/master","sample_path":"anemic-vs-rich-domain-model/src/main/java/com/link_intersystems/blog/model/anemic/OrderItem.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3db9aad18a3aa5a78983bfc22f61e811b5fb0dea","size":"2695","content":"package com.fasterxml.jackson.jr.ob.impl;\n\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Type;\n\nimport com.fasterxml.jackson.jr.ob.JSONObjectException;\n\n/**\n * @since 2.8 (formerly part of `BeanDefinition`)\n */\npublic final class BeanPropertyReader\n{\n    protected final String _name;\n\n    /**\n     * For non-trivial non-bean types\n     */\n    protected final ValueReader _valueReader;\n\n    /**\n     * Setter method to use, if any; null if none\n     */\n    protected final Method _setter;\n\n    /**\n     * Field to assign value to, if no setter method defined; null if none\n     */\n    protected final Field _field;\n\n    public BeanPropertyReader(String name, Field f, Method setter) {\n        if ((f == null) && (setter == null)) {\n            throw new IllegalArgumentException(\"Both `field` and `setter` can not be null\");\n        }\n        _name = name;\n        _field = f;\n        _setter = setter;\n        _valueReader = null;\n    }\n\n    protected BeanPropertyReader(BeanPropertyReader src, ValueReader vr) {\n        _name = src._name;\n        _field = src._field;\n        _setter = src._setter;\n        _valueReader = vr;\n    }\n\n    public BeanPropertyReader withReader(ValueReader vr) {\n        return new BeanPropertyReader(this, vr);\n    }\n\n    public Type genericSetterType() {\n        if (_setter != null) {\n            return _setter.getGenericParameterTypes()[0];\n        }\n        return _field.getGenericType();\n    }\n\n    public Class<?> rawSetterType() {\n        if (_setter != null) {\n            return _setter.getParameterTypes()[0];\n        }\n        return _field.getType();\n    }\n\n    public ValueReader getReader() { return _valueReader; }\n    public String getName() { return _name; }\n\n    public void setValueFor(Object bean, Object value) throws IOException\n    {\n        try {\n            if (_setter == null) {\n                _field.set(bean, value);\n            } else {\n                _setter.invoke(bean, value);\n            }\n        } catch (Exception e) {\n            Throwable t = e;\n            if (t instanceof InvocationTargetException) {\n                t = t.getCause();\n            }\n            throw new JSONObjectException(\"Failed to set property '\"+_name+\"'; exception \"+e.getClass().getName()+\"): \"\n                    +t.getMessage(), t);\n        }\n    }\n\n    protected String _bean() {\n        if (_setter != null) {\n            return _setter.getDeclaringClass().getName();\n        }\n        return _field.getDeclaringClass().getName();\n    }\n\n    @Override\n    public String toString() {\n        return _name;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"FasterXML/jackson-jr","sample_ref":"refs/heads/master","sample_path":"jr-objects/src/main/java/com/fasterxml/jackson/jr/ob/impl/BeanPropertyReader.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"592f1759cb2f812bd3661ad3dd288c82cd402c0a","size":"3205","content":"package act.util;\n\nimport org.osgl.$;\nimport org.osgl.util.C;\nimport org.osgl.util.E;\n\nimport java.lang.reflect.Modifier;\nimport java.util.Set;\n\npublic class ClassNode {\n\n    private ClassInfoRepository infoBase;\n    private String name;\n    private String canonicalName;\n    private int modifiers;\n    private ClassNode parent;\n    private Set<ClassNode> children = C.newSet();\n    private Set<ClassNode> interfaces = C.newSet();\n\n    ClassNode(String name, int modifiers, ClassInfoRepository infoBase) {\n        this(name, name.replace('$', '.'), modifiers, infoBase);\n    }\n\n    ClassNode(String name, String canonicalName, int modifiers, ClassInfoRepository infoBase) {\n        this(name, canonicalName, infoBase);\n        this.modifiers = modifiers;\n    }\n\n    ClassNode(String name, ClassInfoRepository infoBase) {\n        this(name, name.replace('$', '.'), infoBase);\n    }\n\n    ClassNode(String name, String canonicalName, ClassInfoRepository infoBase) {\n        E.NPE(name, infoBase);\n        this.name = name;\n        this.canonicalName = canonicalName;\n        this.infoBase = infoBase;\n    }\n\n    public String name() {\n        return name;\n    }\n\n    public String canonicalName() {\n        return canonicalName;\n    }\n\n    public ClassNode modifiers(int modifiers) {\n        this.modifiers = modifiers;\n        return this;\n    }\n\n    public int modifiers() {\n        return modifiers;\n    }\n\n    public boolean isPublic() {\n        return Modifier.isPublic(modifiers);\n    }\n\n    public boolean isAbstract() {\n        return Modifier.isAbstract(modifiers) || Modifier.isInterface(modifiers);\n    }\n\n    public boolean publicNotAbstract() {\n        return isPublic() && !isAbstract();\n    }\n\n    public ClassNode parent() {\n        return parent;\n    }\n\n    public ClassNode parent(String name) {\n        this.parent = infoBase.node(name);\n        this.parent.addChild(this);\n        return this;\n    }\n\n    public ClassNode addInterface(String name) {\n        ClassNode intf = infoBase.node(name);\n        this.interfaces.add(intf);\n        intf.addChild(this);\n        return this;\n    }\n\n    public ClassNode accept($.Function<ClassNode, ?> treeVisitor) {\n        for (ClassNode child : children) {\n            child.accept(treeVisitor);\n        }\n        treeVisitor.apply(this);\n        return this;\n    }\n\n    public ClassNode findPublicNotAbstract($.Function<ClassNode, ?> treeVisitor) {\n        return accept($.guardedVisitor(new $.Predicate<ClassNode>() {\n            @Override\n            public boolean test(ClassNode classNode) {\n                return classNode.publicNotAbstract();\n            }\n        }, treeVisitor));\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n\n    @Override\n    public int hashCode() {\n        return name.hashCode();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof ClassNode) {\n            ClassNode that = (ClassNode) obj;\n            return $.eq(that.name, this.name);\n        }\n        return false;\n    }\n\n    private ClassNode addChild(ClassNode node) {\n        children.add(node);\n        return this;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"actframework/actframework","sample_ref":"refs/heads/master","sample_path":"src/main/java/act/util/ClassNode.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"906a76d3d428fae760550e57549bf04078fbd3f9","size":"207","content":"package com.quollwriter.db;\n\nimport java.util.*;\n\nimport com.quollwriter.*;\nimport com.quollwriter.data.*;\n\npublic abstract class GeneralObjectProvider<E extends DataObject> implements ObjectProvider<E>\n{\n\n}","binary":"false","copies":"1","sample_repo_name":"garybentley/quollwriter","sample_ref":"refs/heads/master","sample_path":"src/com/quollwriter/db/GeneralObjectProvider.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0bff3adb18c5d2b01cb69f03c51395a4e27f9189","size":"4488","content":"// Copyright 2015 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage dfp.axis.v201605.producttemplateservice;\n\nimport com.google.api.ads.common.lib.auth.OfflineCredentials;\nimport com.google.api.ads.common.lib.auth.OfflineCredentials.Api;\nimport com.google.api.ads.dfp.axis.factory.DfpServices;\nimport com.google.api.ads.dfp.axis.utils.v201605.StatementBuilder;\nimport com.google.api.ads.dfp.axis.v201605.ProductTemplate;\nimport com.google.api.ads.dfp.axis.v201605.ProductTemplatePage;\nimport com.google.api.ads.dfp.axis.v201605.ProductTemplateServiceInterface;\nimport com.google.api.ads.dfp.axis.v201605.UpdateResult;\nimport com.google.api.ads.dfp.lib.client.DfpSession;\nimport com.google.api.client.auth.oauth2.Credential;\n\n/**\n * This example activates a product template. To determine which product templates exist,\n * run GetAllProductTemplates.java.\n *\n * Credentials and properties in {@code fromFile()} are pulled from the\n * \"ads.properties\" file. See README for more info.\n */\npublic class ActivateProductTemplates {\n\n  // Set the ID of the product template to activate.\n  private static final String PRODUCT_TEMPLATE_ID = \"INSERT_PRODUCT_TEMPLATE_ID_HERE\";\n\n  public static void runExample(DfpServices dfpServices, DfpSession session,\n      long productTemplateId) throws Exception {\n    // Get the ProductTemplateService.\n    ProductTemplateServiceInterface productTemplateService =\n        dfpServices.get(session, ProductTemplateServiceInterface.class);\n\n    // Create a statement to select a product template.\n    StatementBuilder statementBuilder = new StatementBuilder()\n        .where(\"WHERE id = :id\")\n        .orderBy(\"id ASC\")\n        .limit(StatementBuilder.SUGGESTED_PAGE_LIMIT)\n        .withBindVariableValue(\"id\", productTemplateId);\n\n    // Default for total result set size.\n    int totalResultSetSize = 0;\n\n    do {\n      // Get product templates by statement.\n      ProductTemplatePage page =\n          productTemplateService.getProductTemplatesByStatement(statementBuilder.toStatement());\n\n      if (page.getResults() != null) {\n        totalResultSetSize = page.getTotalResultSetSize();\n        int i = page.getStartIndex();\n        for (ProductTemplate productTemplate : page.getResults()) {\n          System.out.printf(\n              \"%d) Product template with ID %d will be activated.%n\", i++,\n              productTemplate.getId());\n        }\n      }\n\n      statementBuilder.increaseOffsetBy(StatementBuilder.SUGGESTED_PAGE_LIMIT);\n    } while (statementBuilder.getOffset() < totalResultSetSize);\n\n    System.out.printf(\"Number of product templates to be activated: %d%n\", totalResultSetSize);\n\n    if (totalResultSetSize > 0) {\n      // Remove limit and offset from statement.\n      statementBuilder.removeLimitAndOffset();\n\n      // Create action.\n      com.google.api.ads.dfp.axis.v201605.ActivateProductTemplates action =\n          new com.google.api.ads.dfp.axis.v201605.ActivateProductTemplates();\n\n      // Perform action.\n      UpdateResult result =\n          productTemplateService.performProductTemplateAction(\n              action, statementBuilder.toStatement());\n\n      if (result != null && result.getNumChanges() > 0) {\n        System.out.printf(\"Number of product templates activated: %d%n\", result.getNumChanges());\n      } else {\n        System.out.println(\"No product templates were activated.\");\n      }\n    }\n  }\n\n  public static void main(String[] args) throws Exception {\n    // Generate a refreshable OAuth2 credential.\n    Credential oAuth2Credential = new OfflineCredentials.Builder()\n        .forApi(Api.DFP)\n        .fromFile()\n        .build()\n        .generateCredential();\n\n    // Construct a DfpSession.\n    DfpSession session = new DfpSession.Builder()\n        .fromFile()\n        .withOAuth2Credential(oAuth2Credential)\n        .build();\n\n    DfpServices dfpServices = new DfpServices();\n\n    runExample(dfpServices, session, Long.parseLong(PRODUCT_TEMPLATE_ID));\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"googleads/googleads-java-lib","sample_ref":"refs/heads/master","sample_path":"examples/dfp_axis/src/main/java/dfp/axis/v201605/producttemplateservice/ActivateProductTemplates.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"c1a65a4857add2e57cf0f3f5b3843912eabd42b9","size":"1426","content":"/*\n * Copyright 2016 Andrew W. Buchanan (buchanan@difference.com)\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.difference.historybook.textutils;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\n\n/**\n * Interface to HTML text extraction functions \n */\npublic class HtmlTextExtractor {\n\t\n\tprivate final Document jsoup;\n\t\n\t/**\n\t * Constructor for HtmlTextExtractor\n\t * \n\t * @param body the textual representation of the page entity\n\t * @param url the url of the page. Useful if needing to canonicalize embedded URLs\n\t */\n\tpublic HtmlTextExtractor(String body, String url) {\n\t\tjsoup = Jsoup.parse(body, url);\n\t}\n\t\n\t/**\n\t * @return The title of the web page (or empty string if not found)\n\t */\n\tpublic String getTitle() {\n\t\treturn jsoup.title();\n\t}\n\t\n\t/**\n\t * @return The text extracted from the web page content (removing HTML)\n\t */\n\tpublic String getContent() {\n\t\treturn jsoup.text();\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"abuchanan920/historybook","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/difference/historybook/textutils/HtmlTextExtractor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bf546e9d88c68fb8498e522d521ce28b703edfc6","size":"3548","content":"// Copyright 2015 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage dfp.axis.v201605.activitygroupservice;\n\nimport com.google.api.ads.common.lib.auth.OfflineCredentials;\nimport com.google.api.ads.common.lib.auth.OfflineCredentials.Api;\nimport com.google.api.ads.dfp.axis.factory.DfpServices;\nimport com.google.api.ads.dfp.axis.utils.v201605.StatementBuilder;\nimport com.google.api.ads.dfp.axis.v201605.ActivityGroup;\nimport com.google.api.ads.dfp.axis.v201605.ActivityGroupPage;\nimport com.google.api.ads.dfp.axis.v201605.ActivityGroupServiceInterface;\nimport com.google.api.ads.dfp.axis.v201605.ActivityGroupStatus;\nimport com.google.api.ads.dfp.lib.client.DfpSession;\nimport com.google.api.client.auth.oauth2.Credential;\n\n/**\n * This example gets all active activity groups. To create activity groups,\n * run CreateActivityGroups.java.\n *\n * Credentials and properties in {@code fromFile()} are pulled from the\n * \"ads.properties\" file. See README for more info.\n */\npublic class GetActiveActivityGroups {\n\n  public static void runExample(DfpServices dfpServices, DfpSession session) throws Exception {\n    // Get the ActivityGroupService.\n    ActivityGroupServiceInterface activityGroupService =\n        dfpServices.get(session, ActivityGroupServiceInterface.class);\n\n    // Create a statement to only select active activity groups.\n    StatementBuilder statementBuilder = new StatementBuilder()\n        .where(\"status = :status\")\n        .orderBy(\"id ASC\")\n        .limit(StatementBuilder.SUGGESTED_PAGE_LIMIT)\n        .withBindVariableValue(\"status\", ActivityGroupStatus.ACTIVE.toString());\n\n    // Default for total result set size.\n    int totalResultSetSize = 0;\n\n    do {\n      // Get activity groups by statement.\n      ActivityGroupPage page =\n          activityGroupService.getActivityGroupsByStatement(statementBuilder.toStatement());\n\n      if (page.getResults() != null) {\n        totalResultSetSize = page.getTotalResultSetSize();\n        int i = page.getStartIndex();\n        for (ActivityGroup activityGroup : page.getResults()) {\n          System.out.printf(\n              \"%d) Activity group with ID %d and name '%s' was found.%n\", i++,\n              activityGroup.getId(), activityGroup.getName());\n        }\n      }\n\n      statementBuilder.increaseOffsetBy(StatementBuilder.SUGGESTED_PAGE_LIMIT);\n    } while (statementBuilder.getOffset() < totalResultSetSize);\n\n    System.out.printf(\"Number of results found: %d%n\", totalResultSetSize);\n  }\n\n  public static void main(String[] args) throws Exception {\n    // Generate a refreshable OAuth2 credential.\n    Credential oAuth2Credential = new OfflineCredentials.Builder()\n        .forApi(Api.DFP)\n        .fromFile()\n        .build()\n        .generateCredential();\n\n    // Construct a DfpSession.\n    DfpSession session = new DfpSession.Builder()\n        .fromFile()\n        .withOAuth2Credential(oAuth2Credential)\n        .build();\n\n    DfpServices dfpServices = new DfpServices();\n\n    runExample(dfpServices, session);\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"googleads/googleads-java-lib","sample_ref":"refs/heads/master","sample_path":"examples/dfp_axis/src/main/java/dfp/axis/v201605/activitygroupservice/GetActiveActivityGroups.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"85c07d2f8dac284781afadf47d5333b2ab998e4a","size":"2455","content":"/**\n * This file is part of Palmetto.\n *\n * Palmetto is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Palmetto is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Palmetto.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.aksw.palmetto.prob;\n\nimport org.aksw.palmetto.corpus.BooleanDocumentSupportingAdapter;\n\nimport com.carrotsearch.hppc.IntArrayList;\nimport com.carrotsearch.hppc.IntOpenHashSet;\nimport com.carrotsearch.hppc.ObjectObjectOpenHashMap;\n\npublic abstract class AbstractBooleanDocumentSupportingAdapterBasedTest implements BooleanDocumentSupportingAdapter {\n\n    protected int wordDocuments[][];\n    protected int numberOfDocuments;\n\n    public AbstractBooleanDocumentSupportingAdapterBasedTest(int[][] wordDocuments, int numberOfDocuments) {\n        this.wordDocuments = wordDocuments;\n        this.numberOfDocuments = numberOfDocuments;\n    }\n\n    @Override\n    public void getDocumentsWithWordsAsSet(ObjectObjectOpenHashMap<String, IntOpenHashSet> wordDocMapping) {\n        Object keys[] = (Object[]) wordDocMapping.keys;\n        Object values[] = (Object[]) wordDocMapping.values;\n        for (int i = 0; i < wordDocMapping.allocated.length; ++i) {\n            if (wordDocMapping.allocated[i]) {\n                ((IntOpenHashSet) values[i]).add(wordDocuments[Integer.parseInt((String) keys[i])]);\n            }\n        }\n    }\n\n    @Override\n    public void getDocumentsWithWords(ObjectObjectOpenHashMap<String, IntArrayList> wordDocMapping) {\n        Object keys[] = (Object[]) wordDocMapping.keys;\n        Object values[] = (Object[]) wordDocMapping.values;\n        for (int i = 0; i < wordDocMapping.allocated.length; ++i) {\n            if (wordDocMapping.allocated[i]) {\n                ((IntArrayList) values[i]).add(wordDocuments[Integer.parseInt((String) keys[i])]);\n            }\n        }\n    }\n\n    @Override\n    public int getNumberOfDocuments() {\n        return numberOfDocuments;\n    }\n\n    @Override\n    public void close() {\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"AKSW/Palmetto","sample_ref":"refs/heads/master","sample_path":"src/test/java/org/aksw/palmetto/prob/AbstractBooleanDocumentSupportingAdapterBasedTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1fd4449e321092433e57d96027466d4e789d1e8e","size":"4547","content":"package com.epam.wilma.sequence.formatters.helper;\n/*==========================================================================\nCopyright 2013-2016 EPAM Systems\n\nThis file is part of Wilma.\n\nWilma is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nWilma is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Wilma.  If not, see <http://www.gnu.org/licenses/>.\n===========================================================================*/\n\nimport com.epam.wilma.domain.http.WilmaHttpEntity;\nimport com.epam.wilma.domain.http.WilmaHttpRequest;\nimport com.epam.wilma.domain.http.WilmaHttpResponse;\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Test;\n\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.assertFalse;\nimport static org.testng.Assert.assertTrue;\n\n/**\n * Unit test for {@link WilmaHttpEntityUtils}.\n *\n * @author Balazs_Berkes\n */\npublic class WilmaHttpEntityUtilsTest {\n\n    private WilmaHttpEntityUtils underTest;\n\n    @BeforeMethod\n    public void setup() {\n        underTest = new WilmaHttpEntityUtils();\n    }\n\n    @Test\n    public void testIsJsonMessage() throws Exception {\n        //GIVEN\n        //WHEN\n        boolean jsonResult = underTest.isJsonMessage(requestOf(\"{\\\"property\\\":\\\"value\\\"}\"));\n        boolean jsonArrayResult = underTest.isJsonMessage(requestOf(\"{\\\"list\\\":[{\\\"key\\\":\\\"value\\\"},{\\\"key\\\":\\\"value\\\"}]}\"));\n        boolean xmlResult = underTest.isJsonMessage(requestOf(\"<root><child></child></root>\"));\n        boolean emptyResult = underTest.isJsonMessage(requestOf(\"\"));\n        boolean textResult = underTest.isJsonMessage(requestOf(\"simple text\"));\n        //THEN\n        assertTrue(jsonResult);\n        assertTrue(jsonArrayResult);\n        assertFalse(xmlResult);\n        assertFalse(emptyResult);\n        assertFalse(textResult);\n    }\n\n    @Test\n    public void testIsXmlMessage() throws Exception {\n        //GIVEN\n        //WHEN\n        boolean xmlResult = underTest.isXmlMessage(requestOf(\"<?xml version=\\\"1.0\\\"?><root><child></child></root>\"));\n        boolean soapResult = underTest.isXmlMessage(requestOf(soapMessage()));\n        boolean jsonResult = underTest.isXmlMessage(requestOf(\"{\\\"property\\\":\\\"value\\\"}\"));\n        //THEN\n        assertTrue(xmlResult);\n        assertTrue(soapResult);\n        assertFalse(jsonResult);\n    }\n\n    @Test\n    public void testIsSoapMessage() throws Exception {\n        //GIVEN\n        //WHEN\n        boolean soapResult = underTest.isSoapMessage(requestOf(soapMessage()));\n        boolean jsonResult = underTest.isSoapMessage(requestOf(\"{\\\"property\\\":\\\"value\\\"}\"));\n        boolean xmlResult = underTest.isSoapMessage(requestOf(\"<root><child></child></root>\"));\n        //THEN\n        assertTrue(soapResult);\n        assertFalse(jsonResult);\n        assertFalse(xmlResult);\n    }\n\n    private String soapMessage() {\n        return \"<?xml version=\\\"1.0\\\"?>\"\n                + \"<soap:Envelope xmlns:soap=\\\"http://www.w3.org/2001/12/soap-envelope\\\" soap:encodingStyle=\\\"http://www.w3.org/2001/12/soap-encoding\\\">\"\n                + \"<soap:Body xmlns:m=\\\"http://www.example.org/stock\\\"><m:GetStockPrice><m:StockName>IBM</m:StockName></m:GetStockPrice>\"\n                + \"</soap:Body></soap:Envelope>\";\n    }\n\n    private WilmaHttpEntity requestOf(final String body) {\n        WilmaHttpEntity entity = new WilmaHttpEntity();\n        entity.setBody(body);\n        return entity;\n    }\n\n    @Test\n    public void testGetWilmaMessageIdAtRequest() throws Exception {\n        //test the request part\n        WilmaHttpRequest request = new WilmaHttpRequest();\n        request.setWilmaMessageId(\"test\");\n        assertEquals(request.getWilmaMessageId(), \"test\");\n        assertEquals(request.getWilmaMessageLoggerId(), \"testreq\");\n    }\n\n    @Test\n    public void testGetWilmaMessageIdAtResponse() throws Exception {\n        //test the response part\n        WilmaHttpResponse response = new WilmaHttpResponse(false);\n        response.setWilmaMessageId(\"test\");\n        assertEquals(response.getWilmaMessageId(), \"test\");\n        assertEquals(response.getWilmaMessageLoggerId(), \"testresp\");\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"epam/Wilma","sample_ref":"refs/heads/master","sample_path":"wilma-application/modules/wilma-webapp/src/test/java/com/epam/wilma/sequence/formatters/helper/WilmaHttpEntityUtilsTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"352aabda84001fd14c7a389a54c88899f78c1db9","size":"1053","content":"package fr.toss.FF7Weapons;\n\nimport net.minecraft.entity.SharedMonsterAttributes;\nimport net.minecraft.entity.ai.attributes.AttributeModifier;\nimport net.minecraft.item.Item;\n\nimport com.google.common.collect.Multimap;\n\npublic class Zanmato extends FF7weapon\n{\nprivate float field_150934_a;\nprivate final Item.ToolMaterial field_150933_b;\n\npublic Zanmato(Item.ToolMaterial p_i45356_1_)\n\n{\n\t\n  super();\n  this.field_150933_b = p_i45356_1_;\n  setUnlocalizedName(\"Zanmato\");\n  this.field_150934_a = 52F + p_i45356_1_.getDamageVsEntity();\n}\n\npublic float func_150931_i()\n{\n    return this.field_150933_b.getDamageVsEntity();\n}\n\n\n public String getToolMaterialName()\n    {\n        return this.field_150933_b.toString();\n    }\n\n public Multimap getItemAttributeModifiers()\n    {\n        Multimap multimap = super.getItemAttributeModifiers();\n        multimap.put(SharedMonsterAttributes.attackDamage.getAttributeUnlocalizedName(), new AttributeModifier(field_111210_e, \"Weapon modifier\", (double)this.field_150934_a, 0));\n        return multimap;\n    }\n}\n\n\n\n\n","binary":"false","copies":"1","sample_repo_name":"GhostMonk3408/MidgarCrusade","sample_ref":"refs/heads/master","sample_path":"src/main/java/fr/toss/FF7Weapons/Zanmato.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"57817e411bff77cf6785523ca3afe0b66ea2ee17","size":"1996","content":"/*\r\n * This file is part of Log4Jdbc.\r\n *\r\n * Log4Jdbc is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * Log4Jdbc is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with Log4Jdbc.  If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n */\r\npackage fr.ms.lang.sync.impl;\r\n\r\nimport java.util.concurrent.atomic.AtomicLong;\r\n\r\nimport fr.ms.lang.delegate.SyncLong;\r\nimport fr.ms.lang.delegate.SyncLongFactory;\r\n\r\n/**\r\n *\r\n * @see <a href=\"http://marcosemiao4j.wordpress.com\">Marco4J</a>\r\n *\r\n *\r\n * @author Marco Semiao\r\n *\r\n */\r\npublic class AtomicLongImpl implements SyncLong {\r\n\r\n    private final static SyncLongFactory factory = new Factory();\r\n\r\n    private final AtomicLong atomicLong;\r\n\r\n    public AtomicLongImpl() {\r\n\tatomicLong = new AtomicLong();\r\n    }\r\n\r\n    public AtomicLongImpl(final long initialValue) {\r\n\tatomicLong = new AtomicLong(initialValue);\r\n    }\r\n\r\n    public long addAndGet(final long delta) {\r\n\treturn atomicLong.addAndGet(delta);\r\n    }\r\n\r\n    public long incrementAndGet() {\r\n\treturn atomicLong.incrementAndGet();\r\n    }\r\n\r\n    public long decrementAndGet() {\r\n\treturn atomicLong.decrementAndGet();\r\n    }\r\n\r\n    public long get() {\r\n\treturn atomicLong.get();\r\n    }\r\n\r\n    public static SyncLongFactory getSyncLongFactory() {\r\n\treturn factory;\r\n    }\r\n\r\n    private final static class Factory implements SyncLongFactory {\r\n\r\n\tpublic SyncLong newLong() {\r\n\t    return new AtomicLongImpl();\r\n\t}\r\n\r\n\tpublic SyncLong newLong(final long initialValue) {\r\n\t    return new AtomicLongImpl(initialValue);\r\n\t}\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"marcosemiao/log4jdbc","sample_ref":"refs/heads/master","sample_path":"core/log4jdbc-utils/src/main/java/fr/ms/lang/sync/impl/AtomicLongImpl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0b22ecc9a3c68b06fd7b4d541c947a3a217e161f","size":"2830","content":"package org.opentosca.toscaengine.xmlserializer.service.impl;\n\nimport java.io.File;\n\nimport org.opentosca.model.tosca.Definitions;\nimport org.opentosca.model.tosca.IToscaModelFactory;\nimport org.opentosca.model.tosca.ObjectFactory;\nimport org.opentosca.toscaengine.service.impl.ToscaEngineServiceImpl;\nimport org.opentosca.toscaengine.xmlserializer.service.IXMLSerializer;\nimport org.opentosca.toscaengine.xmlserializer.service.IXMLSerializerService;\nimport org.opentosca.util.fileaccess.service.IFileAccessService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Implementation of the interface\n * org.opentosca.toscaengine.xmlserializer.service.IXMLSerializerService\n * \n * @see org.opentosca.toscaengine.xmlserializer.service.IXMLSerializerService\n * \n * @author Christian Endres - endrescn@studi.informatik.uni-stuttgart.de\n * \n */\npublic class XMLSerializerServiceImpl implements IXMLSerializerService {\n\t\n\tprivate IXMLSerializer xmlSerializer;\n\tprivate IToscaModelFactory toscaModelFactory;\n\t\n\tprivate IFileAccessService fileAccessService = null;\n\t\n\tprivate Logger LOG = LoggerFactory.getLogger(ToscaEngineServiceImpl.class);\n\t\n\t\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tpublic IXMLSerializer getXmlSerializer() {\n\t\tif (this.xmlSerializer == null) {\n\t\t\tthis.LOG.error(\"There is no XMLSerializer initiated yet.\");\n\t\t}\n\t\treturn this.xmlSerializer;\n\t}\n\t\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tpublic IToscaModelFactory getToscaModelFactory() {\n\t\tif (this.toscaModelFactory == null) {\n\t\t\tthis.toscaModelFactory = new ObjectFactory();\n\t\t}\n\t\treturn this.toscaModelFactory;\n\t}\n\t\n\tpublic void bindIFileAccessService(IFileAccessService service) {\n\t\tif (service == null) {\n\t\t\tthis.LOG.error(\"Service IFileAccessService is null.\");\n\t\t} else {\n\t\t\tthis.LOG.debug(\"Bind of the IFileAccessService.\");\n\t\t\tthis.fileAccessService = service;\n\t\t\t\n\t\t\tif (this.xmlSerializer == null) {\n\t\t\t\t\n\t\t\t\tthis.LOG.debug(\"Create a new XMLSerializer.\");\n\t\t\t\tFile schemaFile = this.fileAccessService.getOpenToscaSchemaFile();\n\t\t\t\t\n\t\t\t\t// this boolean is for preventing a unused warning and to get\n\t\t\t\t// the Serialization working with validation easily if needed\n\t\t\t\tboolean trueForCreateValidation = false;\n\t\t\t\tif (trueForCreateValidation) {\n\t\t\t\t\tthis.LOG.debug(\"Create TOSCA XML Serialization with schema validation.\");\n\t\t\t\t\tthis.xmlSerializer = new XMLSerializerFactory().createSerializer(Definitions.class, schemaFile);\n\t\t\t\t} else {\n\t\t\t\t\tthis.LOG.debug(\"Create TOSCA XML Serialization without schema validation.\");\n\t\t\t\t\tthis.xmlSerializer = new XMLSerializerFactory().createSerializer(Definitions.class, null);\n\t\t\t\t}\n\t\t\t\tthis.xmlSerializer.setValidation(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void unbindIFileAccessService(IFileAccessService service) {\n\t\tthis.LOG.debug(\"Unbind of the IFileAccessService.\");\n\t\tthis.fileAccessService = null;\n\t}\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"OpenTOSCA/container","sample_ref":"refs/heads/master","sample_path":"org.opentosca.toscaengine.service/src/org/opentosca/toscaengine/xmlserializer/service/impl/XMLSerializerServiceImpl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"92097a7d72be5d40449ce0b0ec9c2f688c2d6c8c","size":"3660","content":"/*******************************************************************************\n * Created by Carlos Yaconi\n * Copyright 2015 Prey Inc. All rights reserved.\n * License: GPLv3\n * Full license at \"/LICENSE\"\n ******************************************************************************/\npackage com.prey.activities;\n\nimport android.Manifest;\nimport android.content.Intent;\nimport android.content.pm.ActivityInfo;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.preference.CheckBoxPreference;\nimport android.preference.Preference;\nimport android.preference.PreferenceActivity;\nimport android.preference.PreferenceCategory;\nimport android.support.v4.app.ActivityCompat;\n\nimport com.prey.PreyConfig;\nimport com.prey.PreyEmail;\nimport com.prey.PreyLogger;\nimport com.prey.PreyPermission;\nimport com.prey.PreyStatus;\nimport com.prey.R;\nimport com.prey.backwardcompatibility.FroyoSupport;\n\npublic class PreyConfigurationSMSActivity extends PreferenceActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        addPreferencesFromResource(R.xml.preferences_sms);\n\n\n        PreyStatus.getInstance().setPreyConfigurationActivityResume(true);\n        try {\n            CheckBoxPreference pSMS= (CheckBoxPreference)findPreference(\"PREFS_SMS_COMMAND\");\n            PreyConfig preyConfig = PreyConfig.getPreyConfig(getApplicationContext());\n            PreyLogger.i(\"preyConfig.isSmsCommand:\"+preyConfig.isSmsCommand());\n\n\n            pSMS.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {\n                @Override\n                public boolean onPreferenceChange(Preference preference, Object newValue) {\n                    CheckBoxPreference pSMS = (CheckBoxPreference) findPreference(\"PREFS_SMS_COMMAND\");\n                    PreyLogger.i(\"preyConfig.newValue:\" + newValue);\n                    boolean value=((Boolean) newValue).booleanValue();\n                    PreyConfig.getPreyConfig(getApplicationContext()).setSmsCommand(value);\n                    pSMS.setChecked(value);\n                    pSMS.setDefaultValue(value);\n                    if(value){\n                        requestPermission();;\n                    }\n                    return false;\n                }\n            });\n\n            if (!preyConfig.isSmsCommand()) {\n                pSMS.setChecked(false);\n                pSMS.setDefaultValue(false);\n            }else{\n                pSMS.setChecked(true);\n                pSMS.setDefaultValue(true);\n\n\n\n            }\n\n        } catch (Exception e) {\n        }\n\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n\n    }\n\n    private void requestPermission(){\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M){\n            if(!PreyPermission.canAccessSendSms(this)||!PreyPermission.canAccessReceiveSms(this)||!PreyPermission.canAccessReadSms(this)){\n                ActivityCompat.requestPermissions(this, INITIAL_PERMS, REQUEST_PERMISSIONS);\n            }\n        }\n    }\n\n\n    @Override\n    public void onBackPressed() {\n        Intent intent = new Intent(getApplicationContext(), PreyConfigurationActivity.class);\n        startActivity(intent);\n    }\n\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n\n    }\n\n    private static final int REQUEST_PERMISSIONS = 5;\n\n    private static final String[] INITIAL_PERMS={\n            Manifest.permission.SEND_SMS,\n            Manifest.permission.RECEIVE_SMS,\n            Manifest.permission.READ_SMS\n    };\n\n\n\n\n}\n\n","binary":"false","copies":"1","sample_repo_name":"prey/prey-android-client","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/prey/activities/PreyConfigurationSMSActivity.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9d33c7b433204a4ae5da5ee2c4c3ce3fe4f0b74a","size":"5640","content":"package com.cyanflxy.game.fragment;\n\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport com.cyanflxy.game.bean.EnemyProperty;\nimport com.cyanflxy.game.bean.ImageInfoBean;\nimport com.cyanflxy.game.bean.MapBean;\nimport com.cyanflxy.game.bean.MapElementBean;\nimport com.cyanflxy.game.driver.GameContext;\nimport com.cyanflxy.game.driver.ImageResourceManager;\nimport com.cyanflxy.game.widget.HeadView;\nimport com.github.cyanflxy.magictower.R;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class EnemyPropertyFragment extends BaseFragment {\n\n    private GameContext gameContext;\n    private ImageResourceManager imageManager;\n\n    private List<EnemyProperty> enemyList;\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        gameContext = GameContext.getInstance();\n        imageManager = gameContext.getImageResourceManager();\n\n        collectEnemyInfo();\n    }\n\n    private void collectEnemyInfo() {\n        enemyList = new ArrayList<>();\n        Set<String> nameSet = new HashSet<>();\n\n        MapBean map = gameContext.getCurrentMap();\n        for (MapElementBean mapElement : map.mapData) {\n            String name = mapElement.element;\n            ImageInfoBean info = imageManager.getImage(name);\n\n            if (info == null || info.type != ImageInfoBean.ImageType.enemy) {\n                continue;\n            }\n\n            if (nameSet.contains(name)) {\n                continue;\n            }\n\n            nameSet.add(name);\n            enemyList.add(new EnemyProperty(info));\n        }\n\n        if (enemyList.size() > 1) {\n            Collections.sort(enemyList);\n        }\n    }\n\n    @Nullable\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.fragment_enemy_property, container, false);\n    }\n\n    @Override\n    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n        super.onViewCreated(view, savedInstanceState);\n\n        view.findViewById(R.id.back).setOnClickListener(onCloseListener);\n\n        ListView listView = (ListView) view.findViewById(R.id.enemy_list);\n        listView.setAdapter(new EnemyAdapter());\n        listView.setEmptyView(view.findViewById(R.id.empty_view));\n    }\n\n    private class EnemyAdapter extends BaseAdapter {\n\n        @Override\n        public int getCount() {\n            return enemyList.size();\n        }\n\n        @Override\n        public Object getItem(int position) {\n            return enemyList.get(position);\n        }\n\n        @Override\n        public long getItemId(int position) {\n            return position;\n        }\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n            ViewHolder vh;\n\n            if (convertView == null) {\n                convertView = LayoutInflater.from(getActivity()).inflate(R.layout.view_enemy_property, parent, false);\n                convertView.findViewById(R.id.title_name).setVisibility(View.GONE);\n                convertView.findViewById(R.id.content_name).setVisibility(View.VISIBLE);\n                vh = new ViewHolder();\n\n                vh.headView = (HeadView) convertView.findViewById(R.id.enemy_head);\n                vh.headView.setImageManager(imageManager);\n                vh.nameView = (TextView) convertView.findViewById(R.id.enemy_name);\n                vh.hpView = (TextView) convertView.findViewById(R.id.hp);\n                vh.lostView = (TextView) convertView.findViewById(R.id.hp_lost);\n                vh.damageView = (TextView) convertView.findViewById(R.id.damage);\n                vh.defenseView = (TextView) convertView.findViewById(R.id.defense);\n                vh.expView = (TextView) convertView.findViewById(R.id.exp);\n                vh.moneyView = (TextView) convertView.findViewById(R.id.money);\n\n\n                convertView.setTag(vh);\n            } else {\n                vh = (ViewHolder) convertView.getTag();\n            }\n\n            EnemyProperty enemy = enemyList.get(position);\n\n            vh.headView.setImageInfo(imageManager.getImage(enemy.resourceName));\n            vh.nameView.setText(enemy.name);\n\n            vh.hpView.setText(String.valueOf(enemy.hp));\n            vh.damageView.setText(String.valueOf(enemy.damage));\n            vh.defenseView.setText(String.valueOf(enemy.defense));\n            vh.expView.setText(String.valueOf(enemy.exp));\n            vh.moneyView.setText(String.valueOf(enemy.money));\n\n            if (gameContext.getHero().damage <= enemy.defense) {\n                vh.lostView.setText(R.string.fight_fail);\n            } else {\n                int lostHp = gameContext.calculateHPDamage(enemy.hp, enemy.damage, enemy.defense, enemy.lifeDrain);\n                vh.lostView.setText(String.valueOf(lostHp));\n            }\n\n            return convertView;\n        }\n\n        @Override\n        public boolean isEnabled(int position) {\n            return false;\n        }\n\n    }\n\n    private class ViewHolder {\n        public HeadView headView;\n        public TextView nameView;\n\n        public TextView hpView;\n        public TextView lostView;\n\n        public TextView damageView;\n        public TextView defenseView;\n\n        public TextView moneyView;\n        public TextView expView;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"CyanFlxy/Alien","sample_ref":"refs/heads/master","sample_path":"MagicTower/src/main/java/com/cyanflxy/game/fragment/EnemyPropertyFragment.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f0cec5d440ef8f36c440fd437576a3b7bd75fdbe","size":"3283","content":"/*\n * Pore\n * Copyright (c) 2014-2016, Lapis <https://github.com/LapisBlue>\n *\n * The MIT License\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\npackage blue.lapis.pore.impl.entity;\n\nimport blue.lapis.pore.converter.wrapper.WrapperConverter;\n\nimport com.google.common.base.Preconditions;\nimport org.apache.commons.lang3.NotImplementedException;\nimport org.bukkit.entity.Entity;\nimport org.bukkit.entity.EntityType;\nimport org.bukkit.entity.TNTPrimed;\nimport org.spongepowered.api.data.value.mutable.MutableBoundedValue;\nimport org.spongepowered.api.entity.explosive.PrimedTNT;\n\npublic class PoreTNTPrimed extends PoreEntity implements TNTPrimed {\n\n    public static PoreTNTPrimed of(PrimedTNT handle) {\n        return WrapperConverter.of(PoreTNTPrimed.class, handle);\n    }\n\n    protected PoreTNTPrimed(PrimedTNT handle) {\n        super(handle);\n    }\n\n    @Override\n    public PrimedTNT getHandle() {\n        return (PrimedTNT) super.getHandle();\n    }\n\n    @Override\n    public EntityType getType() {\n        return EntityType.PRIMED_TNT;\n    }\n\n    @Override\n    public int getFuseTicks() {\n        return getHandle().getFuseData().getFuseDuration().get();\n    }\n\n    @Override\n    public void setFuseTicks(int fuseTicks) {\n        MutableBoundedValue<Integer> value = getHandle().getFuseData().getFuseDuration();\n        Preconditions.checkArgument(fuseTicks >= value.getMinValue() && fuseTicks <= value.getMaxValue(),\n                \"Value for fuse duration is outside acceptable range (\" + value.getMinValue() + \", \"\n                        + value.getMaxValue() + \")\");\n        getHandle().offer(value.set(fuseTicks));\n    }\n\n    @Override\n    public Entity getSource() {\n        return getHandle().getDetonator().isPresent() ? PoreEntity.of(getHandle().getDetonator().get()) : null;\n    }\n\n    @Override\n    public void setYield(float yield) {\n        throw new NotImplementedException(\"TODO\");\n    }\n\n    @Override\n    public float getYield() {\n        throw new NotImplementedException(\"TODO\");\n    }\n\n    @Override\n    public void setIsIncendiary(boolean isIncendiary) {\n        throw new NotImplementedException(\"TODO\");\n    }\n\n    @Override\n    public boolean isIncendiary() {\n        throw new NotImplementedException(\"TODO\");\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"LapisBlue/Pore","sample_ref":"refs/heads/master","sample_path":"src/main/java/blue/lapis/pore/impl/entity/PoreTNTPrimed.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6415093e9cb4808094b566912c50be92825208db","size":"2021","content":"/*\n * Copyright (c) 1998-2015 Caucho Technology -- all rights reserved\n *\n * This file is part of Baratine(TM)\n *\n * Each copy or derived work must preserve the copyright notice and this\n * notice unmodified.\n *\n * Baratine is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Baratine is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE, or any warranty\n * of NON-INFRINGEMENT.  See the GNU General Public License for more\n * details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Baratine; if not, write to the\n *\n *   Free Software Foundation, Inc.\n *   59 Temple Place, Suite 330\n *   Boston, MA 02111-1307  USA\n *\n * @author Scott Ferguson\n */\n\npackage com.caucho.v5.amp.message;\n\nimport com.caucho.v5.amp.spi.HeadersAmp;\nimport com.caucho.v5.amp.spi.InboxAmp;\nimport com.caucho.v5.amp.spi.MessageAmp;\nimport com.caucho.v5.amp.stub.StubAmp;\n\n/**\n * Build message for construction context.\n */\npublic class TraceMessage extends MessageAmpBase\n{\n  private String _id;\n  private MessageAmp _prev;\n  \n  private final HeadersAmp _headers;\n\n  public TraceMessage(String id, \n                      HeadersAmp headers,\n                      MessageAmp prev)\n  {\n    _id = id;\n    _headers = headers;\n    _prev = prev;\n  }\n  \n  @Override\n  public HeadersAmp getHeaders()\n  {\n    return _headers;\n  }\n  \n  public String getId()\n  {\n    return _id;\n  }\n  \n  public MessageAmp getPrev()\n  {\n    return _prev;\n  }\n  \n  @Override\n  public void invoke(InboxAmp mailbox, StubAmp actor)\n  {\n    throw new UnsupportedOperationException(getClass().getName());\n  }\n\n  @Override\n  public InboxAmp inboxTarget()\n  {\n    throw new UnsupportedOperationException(getClass().getName());\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"baratine/baratine","sample_ref":"refs/heads/master","sample_path":"core/src/main/java/com/caucho/v5/amp/message/TraceMessage.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4778fdf477bc04abded7c99dd5941d2eb163792b","size":"1568","content":"/*******************************************************************************\n * Copyright 2014 United States Government as represented by the\n * Administrator of the National Aeronautics and Space Administration.\n * All Rights Reserved.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *   http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ******************************************************************************/\npackage gov.nasa.ensemble.core.plan.formula.js;\n\nimport java.util.List;\n\nimport org.mozilla.javascript.Scriptable;\nimport org.mozilla.javascript.ScriptableObject;\n\npublic class ScriptableList extends ScriptableObject {\n\t\n\tprivate final List list;\n\t\n\tpublic ScriptableList(List value) {\n\t\tthis.list = value;\n\t}\n\t\n\tpublic List getList() {\n\t\treturn list;\n\t}\n\n\t@Override\n\tpublic Object get(String name, Scriptable start) {\n\t\tif (\"length\".equals(name)) {\n\t\t\treturn list.size();\n\t\t}\n\t\treturn super.get(name, start);\n\t}\n\n\t@Override\n\tpublic Object get(int index, Scriptable start) {\n\t\treturn JSUtils.unwrap(list.get(index));\n\t}\n\n\t@Override\n\tpublic String getClassName() {\n\t\treturn \"List\";\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"nasa/OpenSPIFe","sample_ref":"refs/heads/master","sample_path":"gov.nasa.ensemble.core.plan.formula.js/src/gov/nasa/ensemble/core/plan/formula/js/ScriptableList.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"16fc483705bf21dc70d2bdea3b20743a4b4ff6a9","size":"12504","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Rory Fitzpatrick using IMS Development Environment (version 1.71 build 3853.21665)\r\n// Copyright (C) 1995-2010 IMS MAXIMS. All rights reserved.\r\n\r\npackage ims.clinical.domain.impl;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport ims.admin.domain.HcpAdmin;\r\nimport ims.admin.domain.MosAdmin;\r\nimport ims.admin.domain.impl.HcpAdminImpl;\r\nimport ims.admin.domain.impl.MosAdminImpl;\r\nimport ims.clinical.domain.ClinicalNoteDrawing;\r\nimport ims.clinical.domain.base.impl.BaseExtendedClinicalNotesImpl;\r\nimport ims.core.admin.domain.objects.ClinicalContact;\r\nimport ims.core.admin.vo.ClinicalContactRefVo;\r\nimport ims.core.clinical.domain.objects.ClinicalNotes;\r\nimport ims.core.clinical.vo.ClinicalNotesRefVo;\r\nimport ims.core.resource.people.domain.objects.Hcp;\r\nimport ims.core.resource.people.domain.objects.Medic;\r\nimport ims.core.resource.people.domain.objects.Nurse;\r\nimport ims.core.resource.people.domain.objects.Therapist;\r\nimport ims.core.resource.people.vo.MemberOfStaffRefVo;\r\nimport ims.core.vo.ClinicalContactShortVo;\r\nimport ims.core.vo.ClinicalContactVo;\r\nimport ims.core.vo.ClinicalNotesVo;\r\nimport ims.core.vo.ClinicalNotesVoCollection;\r\nimport ims.core.vo.HcpFilter;\r\nimport ims.core.vo.HcpLiteVo;\r\nimport ims.core.vo.MemberOfStaffShortVo;\r\nimport ims.core.vo.MemberOfStaffVo;\r\nimport ims.core.vo.domain.ClinicalContactShortVoAssembler;\r\nimport ims.core.vo.domain.ClinicalNotesVoAssembler;\r\nimport ims.core.vo.domain.HcpAssembler;\r\nimport ims.core.vo.domain.HcpLiteVoAssembler;\r\nimport ims.core.vo.domain.MedicVoAssembler;\r\nimport ims.core.vo.domain.NurseVoAssembler;\r\nimport ims.core.vo.domain.TherapistVoAssembler;\r\nimport ims.core.vo.lookups.ClinicalNoteType;\r\nimport ims.core.vo.lookups.SourceOfNote;\r\nimport ims.domain.DomainFactory;\r\nimport ims.domain.exceptions.DomainInterfaceException;\r\nimport ims.domain.exceptions.DomainRuntimeException;\r\nimport ims.domain.exceptions.StaleObjectException;\r\nimport ims.domain.exceptions.UniqueKeyViolationException;\r\nimport ims.domain.lookups.LookupService;\r\nimport ims.framework.FormName;\r\nimport ims.framework.enumerations.SystemLogLevel;\r\nimport ims.framework.enumerations.SystemLogType;\r\nimport ims.framework.exceptions.CodingRuntimeException;\r\nimport ims.framework.interfaces.IAppUser;\r\nimport ims.framework.interfaces.ILocation;\r\nimport ims.framework.interfaces.ISystemLog;\r\nimport ims.reports.ReportEngine;\r\nimport ims.vo.ValueObject;\r\n\r\npublic class ExtendedClinicalNotesImpl extends BaseExtendedClinicalNotesImpl\r\n{\r\n\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t/**\r\n\t* saveClinicalNotes\r\n\t*/\r\n\tpublic ims.core.vo.ClinicalNotesVo saveClinicalNotes(ims.core.vo.ClinicalNotesVo clinicalNotesVo) throws ims.domain.exceptions.StaleObjectException\r\n\t{\r\n\t\t// Ensure the value object has been validated\r\n\t\tif (!clinicalNotesVo.isValidated())\r\n\t\t\tthrow new DomainRuntimeException(\"Clinical Notes has not been validated\");\r\n\t\t\r\n\t\tDomainFactory factory = getDomainFactory();\r\n\t\t\r\n\t\tStringBuffer hql = new StringBuffer(\"select p from ClinicalNotes p left join p.noteType as l1_1\");\r\n\t\t\r\n\t\tif (clinicalNotesVo.getClinicalContact() == null)\r\n\t\t{\r\n\t\t\tClinicalNotes doClinNotes = ClinicalNotesVoAssembler.extractClinicalNotes(factory, clinicalNotesVo);\r\n\t\t\tfactory.save(doClinNotes);\r\n\t\t\treturn ClinicalNotesVoAssembler.create(doClinNotes);\r\n\t\t}\t\t\r\n\t\tif(clinicalNotesVo.getID_ClinicalNotes()== null \r\n\t\t\t&& clinicalNotesVo.getClinicalContact().getID_ClinicalContactIsNotNull())\r\n\t\t{\r\n\t\t\thql.append(\" where (p.clinicalContact.id = \" + clinicalNotesVo.getClinicalContact().getID_ClinicalContact() + \r\n\t\t\t\t\t\t\t\"and l1_1.id <> -882 and l1_1 <> -883)\"); \r\n\t\t\t\t\t\t\t// clinicalNote.noteType != ( SUMARIONADMISION(-882) and DISCHARGENOTE(-883)) \r\n\t\t\tList<?> list = (factory.find(hql.toString()));\r\n\t\t\t\r\n\t\t\tif(list.size() > 0)\r\n\t\t\t{\r\n\t\t\t\tClinicalNotesVoCollection doClinNotes = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(list);\r\n\t\t\t\tif (doClinNotes.get(0).getSourceOfNote() != null &&\r\n\t\t\t\t\t\t!(doClinNotes.get(0).getSourceOfNote().getId() == (getDomLookup(SourceOfNote.CLINICALCLINICALNOTE).getId())))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new DomainRuntimeException(\"A record exists for this clinical contact, the screen will be refreshed\");\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\r\n\t\t\r\n\t\tClinicalNotes doClinNotes = ClinicalNotesVoAssembler.extractClinicalNotes(factory, clinicalNotesVo);\r\n\t\tClinicalContact doClinicalContact = getCurrentClinicalContact(clinicalNotesVo.getClinicalContact());\r\n\t\tdoClinNotes.setClinicalContact(doClinicalContact);\r\n\t\t\r\n\t\tfactory.save(doClinNotes);\r\n\r\n\t\treturn ClinicalNotesVoAssembler.create(doClinNotes);\r\n\t}\r\n\r\n\tprivate ClinicalContact getCurrentClinicalContact(ClinicalContactRefVo refVo) \r\n\t{\r\n\t\tif (refVo == null)\r\n\t\t\treturn null;\r\n\t\t\r\n\t\tDomainFactory factory = getDomainFactory();\r\n\t\tClinicalContact domClinicalContact = (ClinicalContact)factory.getDomainObject(ClinicalContact.class, refVo.getID_ClinicalContact()); \r\n\t\t\r\n\t\treturn domClinicalContact;\r\n\t}\r\n\t\r\n\t/**\r\n\t* getClinicalNotes\r\n\t*/\r\n\tpublic ims.core.vo.ClinicalNotesVo getClinicalNotes(ims.core.admin.vo.ClinicalContactRefVo contactVo) \r\n\t{\r\n\t\tDomainFactory factory = getDomainFactory();\r\n\t\tStringBuffer hql = new StringBuffer(\" from ClinicalNotes clinnote where \"); \r\n\t\tString andStr = \" \";\r\n\t\r\n\t\tArrayList<String> markers = new ArrayList<String>();\r\n\t\tArrayList<Integer> values = new ArrayList<Integer>();\r\n\t\r\n\t\thql.append(andStr + \" clinnote.clinicalContact.id = :ccId\");\r\n\t\t\tmarkers.add(\"ccId\");\r\n\t\tvalues.add(contactVo.getID_ClinicalContact());\r\n\t\tandStr = \" and \";\t\r\n\r\n\t\tList<?> listNotes = factory.find(hql.toString(), markers,values);\r\n\t\tif(listNotes != null && listNotes.size() > 0)\r\n\t\t{ \r\n\t\t\tClinicalNotesVoCollection voColl = ClinicalNotesVoAssembler.createClinicalNotesVoCollectionFromClinicalNotes(listNotes);\r\n\t\t\tif(voColl != null && voColl.size() > 0)\r\n\t\t\t\treturn voColl.get(0);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic MemberOfStaffVo getMemberOfStaff(MemberOfStaffShortVo mos)\r\n\t{\r\n\t\tMosAdmin mosAdmin = (MosAdmin)getDomainImpl(MosAdminImpl.class);\r\n\t\treturn mosAdmin.getMemberOfStaff(mos);\r\n\t}\r\n\r\n\tpublic ClinicalContactVo getClinicalContact(Integer nId) \r\n\t{\r\n\t\tClinicalNoteDrawing clinImpl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);\r\n\t\treturn clinImpl.getClinicalContact(nId);\r\n\t}\r\n\r\n\tpublic ClinicalContactShortVo saveClinicalContact(ClinicalContactShortVo clinicalContactVo) throws StaleObjectException \r\n\t{\r\n\t\tClinicalNoteDrawing clinImpl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);\r\n\t\treturn clinImpl.saveClinicalContact(clinicalContactVo);\r\n\t}\r\n\t\r\n\tpublic ClinicalNotesVo getClinicalNotesForContact(ClinicalContactRefVo clinicalContactRefId) \r\n\t{\r\n\t\tClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);\r\n\t\treturn impl.getClinicalNotesForContact(clinicalContactRefId);\r\n\t}\r\n\r\n\tpublic ims.core.vo.ClinicalNotesVo getClinicalNote(ClinicalNotesRefVo clinicalNoteRefVo)\r\n\t{\r\n\t\tClinicalNoteDrawing impl = (ClinicalNoteDrawing)getDomainImpl(ClinicalNoteDrawingImpl.class);\r\n\t\treturn impl.getClinicalNotes(clinicalNoteRefVo.getID_ClinicalNotes());\r\n\r\n\t}\r\n\r\n\tpublic ClinicalNotesVo saveClinicalNotesAndClinicalContact(ClinicalNotesVo clinicalNote, ClinicalContactShortVo clinicalContact) throws DomainInterfaceException, StaleObjectException, UniqueKeyViolationException\r\n\t{\r\n\t\tif (clinicalNote == null)\r\n\t\t\tthrow new DomainRuntimeException(\"Clinical Notes is null\");\r\n\t\t// Ensure the value object has been validated\r\n\t\tif (!clinicalNote.isValidated())\r\n\t\t\tthrow new DomainRuntimeException(\"Clinical Notes has not been validated\");\r\n\t\t\r\n\t\tDomainFactory factory = getDomainFactory();\r\n\t\t\r\n\t\t\r\n\t\t//is new clinical note and is created for a clinical contact\r\n\t\tif (!clinicalNote.getID_ClinicalNotesIsNotNull() && clinicalNote.getClinicalContactIsNotNull())\r\n\t\t{\r\n\t\t\tif (!clinicalNote.getClinicalContact().getID_ClinicalContactIsNotNull())\r\n\t\t\t\tthrow new DomainRuntimeException(\"The clinical contact from the clinical notes has no valid id\");\r\n\t\t\tif (clinicalContact == null)\r\n\t\t\t\tthrow new DomainRuntimeException(\"The clinical contact you provided should not be null \");\r\n\t\t\tif (!clinicalNote.getClinicalContact().getID_ClinicalContact().equals(clinicalContact.getID_ClinicalContact()))\r\n\t\t\t\tthrow new DomainRuntimeException(\"The clinical contact you provided should be the same with the clinical contact from the clinical note \");\r\n\t\t\t\r\n\t\t\tString query = \"select distinct cn.sourceOfNote.id from ClinicalNotes as cn where \" +\r\n\t\t\t\t\t\t\t\"(cn.clinicalContact.id = :ClinicalContact_id and \" +\r\n\t\t\t\t\t\t\t\"cn.noteType.id not in (\"+\r\n\t\t\t\t\t\t\tClinicalNoteType.SUMMARYATADMISSION.getID()+\",\"+ClinicalNoteType.DISCHARGENOTE.getID()+\") and cn.isRIE is null )\";\r\n\t\t\t\r\n\t\t\tList<?> nodeTypes = factory.find(query, \"ClinicalContact_id\", clinicalNote.getClinicalContact().getID_ClinicalContact());\r\n\t\t\t\r\n\t\t\tif (nodeTypes != null && nodeTypes.size() > 0)\r\n\t\t\t{\r\n\t\t\t\tif (SourceOfNote.CLINICALCLINICALNOTE.getID() == ((Integer)nodeTypes.get(0)).intValue())\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow new CodingRuntimeException(\"A clinical note has been created by another user, the screen will be refreshed\");\r\n\t\t\t\t}\r\n\t\t\t\tthrow new CodingRuntimeException(\"ANOTHER_NOTE_FOR_CLINICAL_CONTACT\");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//save clinicalcontact\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tClinicalContact extractClinicalContact = ClinicalContactShortVoAssembler.extractClinicalContact(factory,clinicalContact);\r\n\t\t\t// It is possible that somebody changed the clinical contact . So,  as  this is a background operation\r\n\t\t\t//we should get latest version to avoid stale.\r\n\t\t\tfactory.refresh(extractClinicalContact);\r\n\t\t\textractClinicalContact.setIsClinicalNoteCreated(Boolean.TRUE);\r\n\t\t\tfactory.save(extractClinicalContact);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tclinicalContact = ClinicalContactShortVoAssembler.create(extractClinicalContact);\r\n\t\t\tclinicalNote.setClinicalContact(clinicalContact);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\tClinicalNotes doClinNotes = ClinicalNotesVoAssembler.extractClinicalNotes(factory, clinicalNote);\r\n\t\tfactory.save(doClinNotes);\r\n\t\treturn ClinicalNotesVoAssembler.create(doClinNotes);\r\n\t\t\r\n\t}\r\n\r\n\tpublic HcpLiteVo getHcpLiteVoFOrMosID(Integer mosId) \r\n\t{\r\n\t\tif (mosId == null) \r\n\t\t\treturn null;\r\n\r\n\t\tDomainFactory factory = getDomainFactory();\r\n\t\tString hql = \" from Hcp h \" +\r\n\t\t\" where h.mos.id = :mosId\";\r\n\r\n\t\tString[] names = new String[]{\"mosId\"};\r\n\t\tObject[] vals = new Object[]{mosId};\r\n\t\tList hcpList = factory.find(hql,names, vals);\r\n\r\n\t\tif (hcpList != null && hcpList.size() > 0)\r\n\t\t\treturn HcpLiteVoAssembler.create((Hcp)hcpList.get(0));\r\n\r\n\t\treturn null;\r\n\t\t\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Clinical/src/ims/clinical/domain/impl/ExtendedClinicalNotesImpl.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"1ca11fc87d3f62dbd0683f342c39144e63650c6e","size":"2031","content":"package com.client.core.formtrigger.model.helper.impl;\n\nimport com.bullhornsdk.data.api.BullhornData;\nimport com.bullhornsdk.data.model.entity.core.standard.ClientCorporation;\nimport com.bullhornsdk.data.model.entity.core.standard.CorporateUser;\nimport com.bullhornsdk.data.model.entity.core.standard.JobOrder;\nimport com.client.core.formtrigger.model.helper.AbstractFormTriggerHelper;\nimport com.client.core.formtrigger.model.form.impl.FormJobOrderDto;\n\n/**\n * Holds and keeps data needed for validations to minimize the number of API calls.\n * \n * BullhornAPI, formJobOrderDto and updatingUserID are required and therefore set to final.\n * \n * @author magnus.palm\n * \n */\npublic class JobOrderFormTriggerHelper extends AbstractFormTriggerHelper<FormJobOrderDto, JobOrder> {\n\n\tprivate CorporateUser jobOwner;\n\tprivate ClientCorporation clientCorpration;\n\n\tpublic JobOrderFormTriggerHelper(FormJobOrderDto formJobOrderDto, Integer updatingUserID, BullhornData bullhornData) {\n\t\tsuper(formJobOrderDto, updatingUserID, bullhornData);\n\t}\n\n    public JobOrderFormTriggerHelper(JobOrder jobOrder, Integer updatingUserID, BullhornData bullhornData) {\n        super(FormJobOrderDto.instantiateFromJobOrder(jobOrder), updatingUserID, bullhornData);\n        this.newEntity = jobOrder;\n    }\n\n\t/**\n\t * Gets the owner of the job\n\t * \n\t * @return a CorporateUserDto\n\t */\n\tpublic CorporateUser getJobOwner() {\n\t\tif (jobOwner == null) {\n\t\t\tsetJobOwner(findCorporateUser(getFormValues().getUserID()));\n\t\t}\n\n\t\treturn jobOwner;\n\t}\n\n\tpublic void setJobOwner(CorporateUser jobOwner) {\n\t\tthis.jobOwner = jobOwner;\n\t}\n\n\t/**\n\t * Gets the client corporation connected to the job\n\t * \n\t * @return a ClientCorporationDto\n\t */\n\tpublic ClientCorporation getClientCorpration() {\n\t\tif (clientCorpration == null) {\n\t\t\tsetClientCorpration(findClientCorporation(getFormValues().getClientCorporationID()));\n\t\t}\n\n\t\treturn clientCorpration;\n\t}\n\n\tpublic void setClientCorpration(ClientCorporation clientCorpration) {\n\t\tthis.clientCorpration = clientCorpration;\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"bullhorn/starter-kit-spring-maven","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/client/core/formtrigger/model/helper/impl/JobOrderFormTriggerHelper.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"29f12ff69077eaae14990d849214a2e3ddbc3f11","size":"11007","content":"/*\n *  Copyright 1997-2011 teatrove.org\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\npackage org.teatrove.trove.generics;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.GenericDeclaration;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * \n *\n * @author Nick Hagan\n */\npublic class TypeVariableHandler\n    extends AbstractGenericHandler<TypeVariable<?>> {\n\n    private GenericType rawType;\n\n    public TypeVariableHandler(GenericType rootType,\n                               TypeVariable<?> genericType) {\n        super(rootType, genericType);\n    }\n\n    @Override\n    public GenericType getRawType() {\n        if (this.rawType == null) {\n            this.rawType = this.getRawType0();\n        }\n\n        return this.rawType;\n    }\n\n    @Override\n    public int getDimensions() {\n        return this.getRawType().getDimensions();\n    }\n\n    @Override\n    public GenericType getComponentType() {\n        return this.getRawType().getComponentType();\n    }\n\n    @Override\n    public GenericType getRootComponentType() {\n        return this.getRawType().getRootComponentType();\n    }\n\n    @Override\n    public GenericType[] getTypeArguments() {\n        return this.getRawType().getTypeArguments();\n    }\n\n    @SuppressWarnings(\"rawtypes\")\n    protected GenericType getRawType0() {\n        TypeVariable<?> variable = this.getGenericType();\n\n        // if no declaring root, try to resolve from type bounds\n        // default to Object when type bounds does not exist\n        GenericType rootType = this.getRootType();\n        if (rootType == null) {\n            Type[] bounds = variable.getBounds();\n            if (bounds.length == 1) {\n                return new GenericType(bounds[0]);\n            }\n\n            // no bounds found, so default to object\n            return new GenericType(Object.class);\n        }\n\n        // otherwise, try to detect from the root object down to either the\n        // method or class declaration encompassing the type variable\n        String name = variable.getName();\n\n        TypeParameter[] parameters = this.getTypeParameters(variable);\n        for (int i = 0; i < parameters.length; i++) {\n            TypeVariable<?> var = parameters[i].getParameter();\n\n            // search for matching variable in the list of type params\n            // from either the method, constructor or class declarations\n            String variableName = parameters[i].getName();\n            if (variableName.equals(name)) {\n                GenericDeclaration declaration = var.getGenericDeclaration();\n\n                // attempt to resolve the declared type argument of the\n                // parameterized class by walking from the root to the\n                // declared class\n                GenericType result = null;\n                if (declaration instanceof Class) {\n                    result = resolveType\n                    (\n                        (Class) declaration,\n                        this.getRootType(), parameters[i].getIndex()\n                    );\n                }\n\n                // if unable to traverse the type, default to looking up\n                // result from the bounds of the type\n                if (result == null) {\n                    Type[] bounds = var.getBounds();\n                    if (bounds.length == 1) {\n                        result =\n                            new GenericType(this.getRootType(), bounds[0]);\n                    }\n                }\n\n                // return if result found\n                if (result != null) {\n                    return result;\n                }\n\n                // otherwise, break and return object\n                break;\n            }\n        }\n\n        // unable to resolve, so default to object\n        return new GenericType(Object.class);\n    }\n\n    protected GenericType resolveType(Class<?> typeClass,\n                                      GenericType current, int index) {\n\n        // use actual type if current not in tree\n        if (!typeClass.isAssignableFrom(current.getType())) {\n            return null;\n        }\n\n        // use current type if matches\n        else if (typeClass.equals(current.getType())) {\n            GenericType[] args = current.getTypeArguments();\n            if (args != null && args.length > index) {\n                return args[index];\n            }\n\n            return null;\n        }\n\n        // check if supertype matches\n        GenericType supertype = current.getSupertype();\n        if (supertype != null &&\n            typeClass.isAssignableFrom(supertype.getType())) {\n\n            // resolve type variable if supertype matches the type class\n            if (supertype.getType().equals(typeClass)) {\n                return resolveSubtype(supertype, index);\n            }\n\n            // otherwise recursively check the supertype on up the chain\n            GenericType result =\n                resolveType(typeClass, supertype, index);\n\n            // if type found, return...otherwise, continue on to interfaces\n            if (result != null) {\n                return result;\n            }\n        }\n\n        // check if any interface matches\n        GenericType[] ifaces = current.getInterfaces();\n        for (int j = 0; j < ifaces.length; j++) {\n            GenericType iface = ifaces[j];\n\n            // ignore if type class not in hiearchy of type clsas\n            if (!typeClass.isAssignableFrom(iface.getType())) {\n                continue;\n            }\n\n            // resolve type variable if match found\n            if (iface.getType().equals(typeClass)) {\n                return resolveSubtype(iface, index);\n            }\n\n            // otherwise recursively check the supertype on up the chain\n            GenericType result = resolveType(typeClass, iface, index);\n\n            // return if type found...otherwise, check remaining interfaces\n            if (result != null) {\n                return result;\n            }\n        }\n\n        // none found so return null for no match\n        return null;\n    }\n\n    protected GenericType resolveSubtype(GenericType type, int index) {\n        GenericType result = null;\n        Class<?> actualType = type.getType();\n        Type genericType = type.getGenericType();\n\n        // resolve against parameterized types\n        if (genericType != null) {\n            result = resolveSubtype(genericType, index);\n        }\n\n        // attempt to resolve against type variables\n        if (result == null && actualType != null) {\n            result = resolveSubtype(actualType, index);\n        }\n\n        // none found so return null for no match\n        return result;\n    }\n\n    protected GenericType resolveSubtype(Type genericType, int index) {\n        // check for available type arguments\n        GenericType generic =\n            new GenericType(this.getRootType(), genericType);\n\n        GenericType[] arguments = generic.getTypeArguments();\n        if (arguments != null && arguments.length > index) {\n            return arguments[index].getRawType();\n        }\n\n        // none found so return null for no match\n        return null;\n    }\n\n    protected GenericType resolveSubtype(Class<?> type, int index) {\n        // attempt to resolve against type variables\n        TypeVariable<?>[] variables = type.getTypeParameters();\n        if (variables.length > index) {\n            TypeVariable<?> variable = variables[index];\n            Type[] bounds = variable.getBounds();\n            if (bounds.length == 1) {\n                return new GenericType(this.getRootType(), bounds[0]);\n            }\n        }\n\n        // none found so return null for no match\n        return null;\n    }\n\n    protected TypeParameter[] getTypeParameters(TypeVariable<?> variable) {\n        Map<String, TypeParameter> parameters =\n            new LinkedHashMap<String, TypeParameter>();\n\n        GenericDeclaration declaration = variable.getGenericDeclaration();\n\n        // handle method declarations\n        // - pull variables from method, then declaring class\n        // - method types override (or hide) class types, so ignore those\n        if (declaration instanceof Method) {\n            Method method = (Method) declaration;\n            addTypeParameters(parameters, method);\n\n            Class<?> declaringClass = method.getDeclaringClass();\n            addTypeParameters(parameters, declaringClass);\n        }\n\n        // handle constructor declarations\n        // - pull variables from constructor, then declaring class\n        // - ctor types override (or hide) class types, so ignore those\n        else if (declaration instanceof Constructor) {\n            Constructor<?> ctor = (Constructor<?>) declaration;\n            addTypeParameters(parameters, ctor);\n\n            Class<?> declaringClass = ctor.getDeclaringClass();\n            addTypeParameters(parameters, declaringClass);\n        }\n\n        // handle class declarations\n        else if (declaration instanceof Class) {\n            Class<?> declaringClass = (Class<?>) declaration;\n            addTypeParameters(parameters, declaringClass);\n        }\n\n        // default to just pull from declaration\n        else {\n            addTypeParameters(parameters, declaration);\n        }\n\n        // convert to array form\n        int size = parameters.size();\n        return parameters.values().toArray(new TypeParameter[size]);\n    }\n\n    protected void addTypeParameters(Map<String, TypeParameter> parameters,\n                                     GenericDeclaration declaration) {\n        TypeVariable<?>[] types = declaration.getTypeParameters();\n        for (int i = 0; i < types.length; i++) {\n            TypeVariable<?> type = types[i];\n            String name = type.getName();\n            if (!parameters.containsKey(name)) {\n                parameters.put(name, new TypeParameter(type, i));\n            }\n        }\n    }\n\n    protected static class TypeParameter {\n        private final TypeVariable<?> parameter;\n        private final int index;\n\n        public TypeParameter(TypeVariable<?> parameter, int index) {\n            this.parameter = parameter;\n            this.index = index;\n        }\n\n        public String getName() {\n            return this.parameter.getName();\n        }\n\n        public TypeVariable<?> getParameter() {\n            return this.parameter;\n        }\n\n        public int getIndex() {\n            return this.index;\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"teatrove/teatrove","sample_ref":"refs/heads/master","sample_path":"trove/src/main/java/org/teatrove/trove/generics/TypeVariableHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5ee434e5502d95252252e4a07a8f2261a9b6f510","size":"11660","content":"package com.izhbg.typz.sso.auth.service.imp;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport javax.annotation.Resource;\r\n\r\nimport org.hibernate.annotations.common.util.StringHelper;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.transaction.annotation.Transactional;\r\n\r\nimport com.izhbg.typz.base.common.redis.CacheKey;\r\nimport com.izhbg.typz.base.common.redis.Cacheable;\r\nimport com.izhbg.typz.base.common.service.ServiceException;\r\nimport com.izhbg.typz.base.mapper.BeanMapper;\r\nimport com.izhbg.typz.base.page.Page;\r\nimport com.izhbg.typz.base.util.Constants;\r\nimport com.izhbg.typz.base.util.IdGenerator;\r\nimport com.izhbg.typz.base.util.StringUtils;\r\nimport com.izhbg.typz.sso.auth.dto.TXtJg;\r\nimport com.izhbg.typz.sso.auth.dto.TXtJgYh;\r\nimport com.izhbg.typz.sso.auth.dto.TXtYh;\r\nimport com.izhbg.typz.sso.auth.dto.TXtYhGnjs;\r\nimport com.izhbg.typz.sso.auth.dto.TXtYhQuery;\r\nimport com.izhbg.typz.sso.auth.manager.TXtJgManager;\r\nimport com.izhbg.typz.sso.auth.manager.TXtJgYhManager;\r\nimport com.izhbg.typz.sso.auth.manager.TXtYhGnjsManager;\r\nimport com.izhbg.typz.sso.auth.manager.TXtYhManager;\r\nimport com.izhbg.typz.sso.auth.service.TXtJgService;\r\nimport com.izhbg.typz.sso.auth.service.TXtYhService;\r\nimport com.izhbg.typz.sso.util.SimplePasswordEncoder;\r\nimport com.izhbg.typz.sso.util.SpringSecurityUtils;\r\n/**\r\n* @author caixl \r\n* @date 2016-5-20 \u4e0a\u53488:49:48 \r\n*\r\n */\r\n@Transactional\r\n@Service(\"tXtYhService\")\r\npublic class TXtYhServiceImp implements TXtYhService{\r\n\r\n\tprivate TXtJgYhManager tXtJgYhManager;\r\n\t\r\n\tprivate TXtJgManager tXtJgManager;\r\n\t\r\n\tprivate TXtYhManager tXtYhManager;\r\n\t\r\n\tprivate BeanMapper beanMapper = new BeanMapper();\r\n\t\r\n\tprivate TXtJgService tXtJgService;\r\n\t\r\n\tprivate TXtYhGnjsManager tXtYhGnjsManager;\r\n\t\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic TXtJg findJgByYhId(String yhId) throws Exception {\r\n\t\tif(StringHelper.isEmpty(yhId))\r\n\t\t\tthrow new ServiceException(\"\u53c2\u6570\u4e3a\u7a7a,\u6839\u636e\u7528\u6237\u83b7\u53d6\u7ed3\u6784\u5931\u8d25\");\r\n\t\tTXtJgYh tXtJgYh = tXtJgYhManager.findUniqueBy(\"yhId\", yhId);\r\n\t\tif(tXtJgYh==null)\r\n\t\t\tthrow new ServiceException(\"\u8be5\u7528\u6237\u6ca1\u6709\u5206\u914d\u5f52\u5c5e\u673a\u6784\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\");\r\n\t\treturn tXtJgManager.findUniqueBy(\"jgId\", tXtJgYh.getJgId());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void add(TXtYh tXtYh) throws Exception {\r\n\t\tif(tXtYh==null)\r\n\t\t\tthrow new ServiceException(\"\u53c2\u6570\u4e3a\u7a7a\uff0c\u4fdd\u5b58\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\r\n\t\ttXtYhManager.save(tXtYh);\r\n\t}\r\n\t@Override\r\n\tpublic void add(TXtYh tXtYh, String[] jgIds) throws Exception {\r\n\t\tthis.add(tXtYh);\r\n\t\tif(jgIds!=null)\r\n\t\t\tfor(int i = 0; i < jgIds.length; i++){\r\n\t\t\t\tTXtJgYh jgyh = new TXtJgYh();\r\n\t\t\t\tjgyh.setJgId(jgIds[i]);\r\n\t\t\t\tjgyh.setYhId(tXtYh.getYhId());\r\n\t\t\t\tjgyh.setDuId(IdGenerator.getInstance().getUniqTime()+\"\");\r\n\t\t\t\ttXtJgYhManager.save(jgyh);\r\n\t\t\t}\r\n\t}\r\n\t@Override\r\n\tpublic void delete(String yhId) throws Exception {\r\n\t\tif(StringHelper.isEmpty(yhId))\r\n\t\t\tthrow new ServiceException(\"\u53c2\u6570\u4e3a\u7a7a\uff0c\u5220\u9664\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\r\n\t\tTXtYh yh = tXtYhManager.findUniqueBy(\"yhId\", yhId);\r\n\t\tyh.setScBj(1);\r\n\t\ttXtYhManager.update(yh);\r\n\t\tList<TXtJgYh> objs1 = tXtJgYhManager.findBy(\"yhId\", yhId);\r\n\t\tList<TXtYhGnjs> objs2 = tXtYhGnjsManager.findBy(\"yhId\", yhId);\r\n\t\tif(objs1!=null&&objs1.size()>0)\r\n\t\t\tfor(TXtJgYh tj:objs1)\r\n\t\t\t\ttXtJgYhManager.remove(tj);\r\n\t\tif(objs2!=null&&objs2.size()>0)\r\n\t\t\tfor(TXtYhGnjs tyg:objs2)\r\n\t\t\t\ttXtYhGnjsManager.remove(tyg);\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void deleteByIds(String[] yhIds) throws Exception {\r\n\t\tif(yhIds==null||yhIds.length<=0)\r\n\t\t\tthrow new ServiceException(\"\u53c2\u6570\u4e3a\u7a7a\uff0c\u5220\u9664\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\r\n\t\tList<String> lst = new ArrayList<String>();\r\n\t\tfor(String s : yhIds) \r\n\t\t\tlst.add(s);\r\n\t\tList<TXtYh> itemLst = (List<TXtYh>)tXtYhManager.findByIds(lst);\r\n\t\t\r\n\t\tfor(TXtYh item : itemLst ){\r\n\t\t\titem.setScBj(new Integer(Constants.DELETE_STATE));\r\n\t\t\ttXtYhManager.update(item);\r\n\t\t}\r\n\t\tList<TXtJgYh> objs1 = null;\r\n\t\tList<TXtYhGnjs> objs2 = null;\r\n\t\tfor(String s : yhIds) {\r\n\t\t\tobjs1 = tXtJgYhManager.findBy(\"yhId\", s);\r\n\t\t\tobjs2 = tXtYhGnjsManager.findBy(\"yhId\", s);\r\n\t\t\tif(objs1!=null&&objs1.size()>0)\r\n\t\t\t\tfor(TXtJgYh tj:objs1)\r\n\t\t\t\t\ttXtJgYhManager.remove(tj);\r\n\t\t\tif(objs2!=null&&objs2.size()>0)\r\n\t\t\t\tfor(TXtYhGnjs tyg:objs2)\r\n\t\t\t\t\ttXtYhGnjsManager.remove(tyg);\r\n\t\t}\r\n\t}\r\n\t@Override\r\n\tpublic void resetPassword(String[] yhIds,String defaultPas) throws Exception {\r\n\t\tif(yhIds==null||yhIds.length<=0)\r\n\t\t\tthrow new ServiceException(\"\u53c2\u6570\u4e3a\u7a7a\uff0c\u91cd\u7f6e\u5bc6\u7801\u5931\u8d25\");\r\n\t\tList<String> lst = new ArrayList<String>();\r\n\t\tfor(String s : yhIds) \r\n\t\t\tlst.add(s);\r\n\t\tList<TXtYh> itemLst = (List<TXtYh>)tXtYhManager.findByIds(lst);\r\n\t\t\r\n\t\tfor(TXtYh item : itemLst ){\r\n\t\t\titem.setMm(defaultPas);\r\n\t\t\ttXtYhManager.update(item);\r\n\t\t}\r\n\t}\r\n\t@Override\r\n\tpublic TXtYh findByYhId(String yhId) throws Exception {\r\n\t\tif(StringHelper.isEmpty(yhId))\r\n\t\t\tthrow new ServiceException(\"\u53c2\u6570\u4e3a\u7a7a\uff0c\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\r\n\t\treturn tXtYhManager.findUniqueBy(\"yhId\", yhId);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic TXtYh findByYhDm(String yhDm) throws Exception {\r\n\t\tif(StringHelper.isEmpty(yhDm))\r\n\t\t\tthrow new ServiceException(\"\u53c2\u6570\u4e3a\u7a7a\uff0c\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\r\n\t\treturn tXtYhManager.findUniqueBy(\"yhDm\", yhDm);\r\n\t\t\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void update(TXtYh tXtYh) throws Exception {\r\n\t\tif(tXtYh==null)\r\n\t\t\tthrow new ServiceException(\"\u53c2\u6570\u4e3a\u7a7a,\u4fdd\u5b58\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\r\n\t\tTXtYh dest = this.findByYhId(tXtYh.getYhId());\r\n\t\tbeanMapper.copy(tXtYh, dest);\r\n\t\ttXtYhManager.update(dest);\r\n\t}\r\n\t@Override\r\n\tpublic void update(TXtYh tXtYh, String jgId) throws Exception {\r\n\t\tthis.update(tXtYh);\r\n\t\tList<TXtJgYh> objs = tXtJgYhManager.findBy(\"yhId\", tXtYh.getYhId());\r\n\t\tBoolean save = true;\r\n\t\tif(objs != null) \r\n\t\t\tfor(TXtJgYh o : objs) {\r\n\t\t\t\ttXtYh.setJgId(o.getJgId());\r\n\t\t\t\tif(o.getJgId().equals(jgId))\r\n\t\t\t\t\tsave = false;\r\n\t\t\t\telse\r\n\t\t\t\t\ttXtJgYhManager.remove(o);\r\n\t\t\t}\r\n\t\tif(save){\r\n\t\t\tTXtJgYh jgyh = new TXtJgYh();\r\n\t\t\tjgyh.setJgId(jgId);\r\n\t\t\tjgyh.setYhId(tXtYh.getYhId());\r\n\t\t\tjgyh.setDuId(IdGenerator.getInstance().getUniqTime()+\"\");\r\n\t\t\ttXtJgYhManager.save(jgyh);\r\n\t\t}\r\n\t}\r\n\t@Override\r\n\tpublic Page queryYhPageList(Page page,TXtYhQuery tXtYhQuery)\r\n\t\t\tthrows Exception {\r\n\t\t//\u7ec4\u7ec7\u7ba1\u7406 \u5f53\u524d\u767b\u9646\u7528\u6237 \u6240\u5728\u7684\u5e94\u7528  \u5207\u4e3a\u6839\u8282\u70b9\u7684 \u9879\r\n\t\tTXtYh currentYh = tXtYhManager.findUniqueBy(\"yhId\", SpringSecurityUtils.getCurrentUserId());\r\n\t\tif(currentYh==null)\r\n\t\t\tthrow new ServiceException(\"\u975e\u6cd5\u7528\u6237\uff0c\u8bf7\u91cd\u65b0\u64cd\u4f5c\");\r\n\t\t\r\n\t\tStringBuffer sb = new StringBuffer(\"select DISTINCT a.yhId  \");\r\n\t\tsb.append(\" from TXtYh a ,TXtJgYh b where a.yhId=b.yhId and a.yhId!='is8v1wz7g0eyl86iz7g1'\")\r\n\t\t  .append(getWhere(tXtYhQuery))\r\n\t\t  .append(getOrder(page));\r\n\t\t\r\n\t\tpage = tXtYhManager.pagedQuery(sb.toString(), page.getPageNo(), page.getPageSize(), setWhere(tXtYhQuery));\r\n\t\tList<String> list = (List<String>) page.getResult();\r\n\t\tList<TXtYh> listYh=null;\r\n\t\tif(list!=null&&list.size()>0)\r\n\t\t\tlistYh = tXtYhManager.findByIds(list);\r\n\t\tpage.setResult(listYh);\r\n\t\treturn page;\r\n\t}\r\n\t\r\n\tpublic String getOrder(Page page) {\r\n\t\treturn StringHelper.isNotEmpty(page.getOrderBy()) ? \"order by \"+page.getOrderBy() +\" \"+ page.getOrder() : \" order by a.xgRq desc \";\r\n\t}\r\n\tpublic String getOrderColumn(Page page) {\r\n\t\treturn StringHelper.isNotEmpty(page.getOrderBy()) ? \", \" + page.getOrderBy() : \", a.xgRq \";\r\n\t}\r\n\t/**\r\n\t * \u7ec4\u88c5\u67e5\u8be2sql\r\n\t * @param tXtYhQuery\r\n\t * @return\r\n\t */\r\n\tpublic String getWhere(TXtYhQuery tXtYhQuery)throws Exception {\r\n\t\tStringBuffer sb = new StringBuffer(\" and a.scBj=\" + Constants.UN_DELETE_STATE + \" \");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getSjjgId())) {//\u795e\u5947\u5440\u3002\r\n\t\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getIncludeFlag())) {\r\n\t\t\t\tList<String> organs = new ArrayList<String>();\r\n\t\t\t\torgans = getOrgan(tXtYhQuery.getSjjgId(),organs);\r\n\t\t\t\tStringBuilder sbd = new StringBuilder();\r\n\t\t\t\tfor(String str : organs) {\r\n\t\t\t\t\tsbd.append(\"'\").append(str).append(\"',\");\r\n\t\t\t\t}\r\n\t\t\t\tsbd.deleteCharAt(sbd.length()-1);\r\n\t\t\t\tsb.append(\" and b.jgId in(\"+sbd.toString()+\") \");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tsb.append(\" and b.jgId ='\" + tXtYhQuery.getSjjgId() + \"' \");\r\n\t\t}else{\r\n\t\t\tsb.append(\" and b.jgId ='false' \");\r\n\t\t}\t \r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getYhId()))\r\n\t\t\tsb.append(\" and a.yhId like :yhId \");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getYhDm()))\r\n\t\t\tsb.append(\" and a.yhDm like :yhDm \");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getYhMc()))\r\n\t\t\tsb.append(\" and a.yhMc like :yhMc \");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getYxBj()))\r\n\t\t\tsb.append(\" and a.yxBj = :yxBj \");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getScBj()))\r\n\t\t\tsb.append(\" and a.scBj = :scBj \");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getCurrentAppId()))\r\n\t\t\tsb.append(\" and a.appId = :appId \");\r\n\t\treturn sb.toString();\r\n\t}\r\n\t/**\r\n\t * \u67e5\u8be2\u6761\u4ef6 \u8d4b\u503c\r\n\t * @param tXtYhQuery\r\n\t * @return\r\n\t */\r\n\tpublic Map<String, Object> setWhere(TXtYhQuery tXtYhQuery) {\r\n\t\t Map<String, Object> params = new HashMap<String, Object>();\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getYhId())) \r\n\t\t\tparams.put(\"yhId\",\"%\" + tXtYhQuery.getYhId().trim() + \"%\");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getYhDm())) \r\n\t\t\tparams.put(\"yhDm\",\"%\" + tXtYhQuery.getYhDm().trim() + \"%\");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getYhMc()))\r\n\t\t\tparams.put(\"yhMc\",\"%\" + tXtYhQuery.getYhMc().trim() + \"%\");\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getYxBj()))\r\n\t\t\tparams.put(\"yxBj\",Integer.parseInt(tXtYhQuery.getYxBj().trim()));\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getScBj()))\r\n\t\t\tparams.put(\"scBj\",tXtYhQuery.getScBj().trim());\r\n\t\tif(StringHelper.isNotEmpty(tXtYhQuery.getCurrentAppId()))\r\n\t\t\tparams.put(\"appId\",tXtYhQuery.getCurrentAppId());\r\n\t\t\r\n\t\treturn params;\r\n\t\t\t\r\n\t}\r\n\t/**\r\n\t * \u7ec4\u88c5\u670d\u52a1\r\n\t * @param organId\r\n\t * @param organs\r\n\t * @return\r\n\t */\r\n\tpublic List<String> getOrgan(String organId,List<String> organs) throws Exception{\r\n\t\torgans.add(organId);\r\n\t\tList<String> temp = tXtJgService.getOrganIds(organId);\r\n\t\tfor(String s : temp)\r\n\t\t\torgans=getOrgan(s,organs);\r\n\t\treturn organs;\r\n\t}\r\n\t@Override\r\n\tpublic void removeYhFromJg(String[] yhIds, String jgId) throws Exception {\r\n\t\tList<String> lst = new ArrayList<String>();\r\n\t\tString temp_sql =  \"select duId from TXtJgYh where yhId=? and jgId=? \";\r\n\t\tObject obj = null;\r\n\t\tfor(String s : yhIds) \r\n\t\t{\r\n\t\t\tobj = tXtJgYhManager.findUnique(temp_sql, s,jgId);\r\n\t\t\tif(obj!=null){\r\n\t\t\t\tlst.add(obj.toString());\r\n\t\t\t}\r\n\t\t}\r\n\t\tList<TXtJgYh> txtjgyh = null;\r\n\t\tif(lst.size()>0)\r\n\t\t\ttxtjgyh = tXtJgYhManager.findByIds(lst);\r\n\t\tif(txtjgyh!=null&&txtjgyh.size()>0)\r\n\t\t{\r\n\t\t\tfor(TXtJgYh tx:txtjgyh){\r\n\t\t\t\ttXtJgYhManager.remove(tx);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t@Override\r\n\tpublic void updGUserStatus(String[] yhIds) throws Exception {\r\n\t\tList<String> lst = new ArrayList<String>();\r\n\t\tfor(String s : yhIds) \r\n\t\t\tlst.add(s);\r\n\t\tList<TXtYh> itemLst = (List<TXtYh>)tXtYhManager.findByIds(lst);\r\n\t\t\r\n\t\tfor(TXtYh item : itemLst ){\r\n\t\t\tif(item.getYxBj()!=null&&item.getYxBj()==2){\r\n\t\t\t\titem.setYxBj(1);\r\n\t\t\t}else{\r\n\t\t\t\titem.setYxBj(2);\r\n\t\t\t}\r\n\t\t\ttXtYhManager.update(item);\r\n\t\t}\r\n\t}\r\n\t@Resource\r\n\tpublic void settXtJgYhManager(TXtJgYhManager tXtJgYhManager) {\r\n\t\tthis.tXtJgYhManager = tXtJgYhManager;\r\n\t}\r\n\t\r\n\t@Resource\r\n\tpublic void settXtJgManager(TXtJgManager tXtJgManager) {\r\n\t\tthis.tXtJgManager = tXtJgManager;\r\n\t}\r\n\t@Resource\r\n\tpublic void settXtYhManager(TXtYhManager tXtYhManager) {\r\n\t\tthis.tXtYhManager = tXtYhManager;\r\n\t}\r\n\t@Resource\r\n\tpublic void settXtJgService(TXtJgService tXtJgService) {\r\n\t\tthis.tXtJgService = tXtJgService;\r\n\t}\r\n\t@Resource\r\n\tpublic void settXtYhGnjsManager(TXtYhGnjsManager tXtYhGnjsManager) {\r\n\t\tthis.tXtYhGnjsManager = tXtYhGnjsManager;\r\n\t}\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\t\r\n\r\n\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"izhbg/typz","sample_ref":"refs/heads/master","sample_path":"typz-all/typz-sso/src/main/java/com/izhbg/typz/sso/auth/service/imp/TXtYhServiceImp.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"60b8db157511e39ba7f60aceab616cb153069145","size":"693","content":"package org.apache.cloudstack.framework.ws.jackson;\n\nimport com.fasterxml.jackson.core.Version;\nimport com.fasterxml.jackson.databind.Module;\n\n/**\n * This module extends SimpleModle so that our annotations can be processed.\n */\npublic class CSJacksonAnnotationModule extends Module {\n\n    @Override\n    public String getModuleName() {\n        return \"CloudStackSupplementalModule\";\n    }\n\n    @Override\n    public Version version() {\n        return new Version(1, 0, 0, \"\", \"org.apache.cloudstack\", \"cloudstack-framework-rest\");\n    }\n\n    @Override\n    public void setupModule(final SetupContext ctx) {\n        ctx.appendAnnotationIntrospector(new CSJacksonAnnotationIntrospector());\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"MissionCriticalCloud/cosmic","sample_ref":"refs/heads/master","sample_path":"cosmic-core/framework/rest/src/main/java/org/apache/cloudstack/framework/ws/jackson/CSJacksonAnnotationModule.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"36ac3ef66829fa39fad611e5af884ba1bb6ada64","size":"1221","content":"package com.example;\n\nimport static com.jayway.restassured.RestAssured.get;\nimport static com.jayway.restassured.RestAssured.post;\nimport static org.hamcrest.Matchers.*;\n\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.restexpress.RestExpress;\n\nimport com.example.Main;\nimport com.jayway.restassured.response.ValidatableResponse;\n\npublic class MyResourceTest\n{\n\tprivate static RestExpress server;\n\tprivate static final String BASE_URL = \"http://localhost:8080/myapp\";\n\n\t@BeforeClass\n\tpublic static void beforeClass() throws Exception\n\t{\n\t\tString[] env =\n\t\t{\n\t\t\t\"dev\"\n\t\t};\n\t\tserver = Main.startServer(env);\n\t}\n\n\t@AfterClass\n\tpublic static void afterClass()\n\t{\n\t\tserver.shutdown();\n\t}\n\n\t@Test\n\tpublic void testRead()\n\t{\n\t\tValidatableResponse response = get(BASE_URL + \"/myresource\").then();\n\t\tresponse.assertThat().statusCode(200);\n\t\tresponse.assertThat().body(equalTo(\"Got it!\"));\n\t}\n\n\t@Test\n\tpublic void testCreate()\n\t{\n\t\tValidatableResponse response = post(BASE_URL + \"/myresource\").then();\n\t\tresponse.statusCode(200);\n\t\tresponse.body(\"name\", equalTo(\"todd\"));\n\t\tresponse.body(\"href\", equalTo(\"http://www.toddfredrich.com/\"));\n\t\tresponse.body(\"id\", not(equalTo(null)));\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"RestExpress/RestExpress-Examples","sample_ref":"refs/heads/master","sample_path":"vs-jersey/restexpress/src/test/java/com/example/MyResourceTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5c89151714f3a4823352a7d27d0f9b4095f46ed6","size":"1632","content":"package org.xcolab.utils.sitemonitor.config;\n\nimport java.util.List;\n\nimport org.simpleframework.xml.Element;\nimport org.simpleframework.xml.ElementList;\n\npublic class EmailNotificationConfig {\n\n\t@ElementList(inline = true, entry = \"to\")\n\tprivate List<String> to;\n\n\t@Element\n\tprivate String from;\n\n\t@Element(required = true)\n\tprivate String smtphost;\n\n\t@Element(required = false)\n\tprivate String smtpuser;\n\n\t@Element(required = false)\n\tprivate String smtppassword;\n\n\t@Element(required = true)\n\tprivate String subject;\n\n\t@Element(required = false, name = \"smtpport\")\n\tprivate int port;\n\n\t@Element(required = false, name = \"smtpusetsl\")\n\tprivate boolean useTsl;\n\n\tpublic List<String> getTo() {\n\t\treturn to;\n\t}\n\n\tpublic void setTo(List<String> to) {\n\t\tthis.to = to;\n\t}\n\n\tpublic String getFrom() {\n\t\treturn from;\n\t}\n\n\tpublic void setFrom(String from) {\n\t\tthis.from = from;\n\t}\n\n\tpublic String getSmtphost() {\n\t\treturn smtphost;\n\t}\n\n\tpublic void setSmtphost(String smtphost) {\n\t\tthis.smtphost = smtphost;\n\t}\n\n\tpublic String getSmtpuser() {\n\t\treturn smtpuser;\n\t}\n\n\tpublic void setSmtpuser(String smtpuser) {\n\t\tthis.smtpuser = smtpuser;\n\t}\n\n\tpublic String getSmtppassword() {\n\t\treturn smtppassword;\n\t}\n\n\tpublic void setSmtppassword(String smtppassword) {\n\t\tthis.smtppassword = smtppassword;\n\t}\n\n\tpublic String getSubject() {\n\t\treturn subject;\n\t}\n\n\tpublic void setSubject(String subject) {\n\t\tthis.subject = subject;\n\t}\n\n\tpublic int getPort() {\n\t\treturn port;\n\t}\n\n\tpublic void setPort(int port) {\n\t\tthis.port = port;\n\t}\n\n\tpublic boolean isUseTsl() {\n\t\treturn useTsl;\n\t}\n\n\tpublic void setUseTsl(boolean useTsl) {\n\t\tthis.useTsl = useTsl;\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"CCI-MIT/XCoLab","sample_ref":"refs/heads/master","sample_path":"other/site-monitor/src/main/java/org/xcolab/utils/sitemonitor/config/EmailNotificationConfig.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0313cadb5298928e4cd8ec6d57ea0e4d890cbc1c","size":"2606","content":"package com.eharmony.pho.query.builder;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport com.eharmony.pho.query.QueryOperationType;\nimport com.eharmony.pho.query.QueryUpdate;\nimport com.eharmony.pho.query.QueryUpdateImpl;\nimport com.eharmony.pho.query.criterion.Criterion;\nimport com.eharmony.pho.query.criterion.Restrictions;\n\n/**\n * Builder for saving objects\n * \n * @param <T>\n *            the entity type being saved\n */\npublic class QueryUpdateBuilder<T> {\n\n    private final T entity;\n    private List<Criterion> criteria = new ArrayList<Criterion>();\n    private List<String> selectedFields = Collections.emptyList();\n    private QueryOperationType queryOperationType = QueryOperationType.UPDATE;\n\n    public QueryUpdateBuilder(final T entity) {\n        this.entity = entity;\n    }\n\n    public static <T> QueryUpdateBuilder<T> builderFor(final T entity) {\n        return new QueryUpdateBuilder<T>(entity);\n    }\n\n    public QueryUpdateBuilder<T> create() {\n        queryOperationType = QueryOperationType.INSERT;\n        return this;\n    }\n\n    public QueryUpdateBuilder<T> create(List<String> selectedFields) {\n        queryOperationType = QueryOperationType.INSERT;\n        this.selectedFields = selectedFields;\n        return this;\n    }\n\n    public QueryUpdateBuilder<T> update() {\n        queryOperationType = QueryOperationType.UPDATE;\n        return this;\n    }\n\n    public QueryUpdateBuilder<T> update(List<String> selectedFields) {\n        queryOperationType = QueryOperationType.UPDATE;\n        this.selectedFields = selectedFields;\n        return this;\n    }\n\n    public QueryUpdateBuilder<T> add(Criterion criterion) {\n        criteria.add(criterion);\n        return this;\n    }\n\n    public QueryUpdateBuilder<T> setSelectedFields(String... selectedFields) {\n        this.selectedFields = Arrays.asList(selectedFields);\n        return this;\n    }\n\n    public QueryUpdate<T> build() {\n        // if criteria.size == 0, rootCriterion = null\n        Criterion rootCriterion = null;\n        if (criteria.size() == 1) {\n            rootCriterion = criteria.get(0);\n        } else if (criteria.size() > 1) {\n            rootCriterion = Restrictions.and(criteria.toArray(new Criterion[criteria.size()]));\n        }\n        return new QueryUpdateImpl<T>(entity, rootCriterion, selectedFields, queryOperationType);\n    }\n\n    @Override\n    public String toString() {\n        return \"QueryBuilder [entityClass=\" + entity.getClass() + \", criteria=\" + criteria + \", selectedFields=\"\n                + selectedFields + \"]\";\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"eHarmony/pho","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/eharmony/pho/query/builder/QueryUpdateBuilder.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3ccb357b80f2d3c8ab03e1079316a07f136414e0","size":"1170","content":"/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\npackage org.anarres.qemu.manager;\n\nimport java.io.ByteArrayOutputStream;\n\n/**\n *\n * @author shevek\n */\npublic class IOBuffer extends ByteArrayOutputStream {\n\n    private static final int SIZE = 4096;\n    private static final int ALLOC = SIZE + SIZE >> 2;\n    private byte[] history = new byte[0];\n\n    public IOBuffer() {\n        super(ALLOC);\n    }\n\n    private void capture() {\n        if (count > SIZE - 256) {\n            this.history = super.toByteArray();\n            super.buf = new byte[ALLOC];\n            super.count = 0;\n        }\n    }\n\n    @Override\n    public synchronized void write(byte[] b, int off, int len) {\n        super.write(b, off, len);\n        capture();\n    }\n\n    @Override\n    public synchronized void write(int b) {\n        super.write(b);\n        capture();\n    }\n\n    @Override\n    public synchronized byte[] toByteArray() {\n        byte[] out = new byte[history.length + count];\n        System.arraycopy(history, 0, out, 0, history.length);\n        System.arraycopy(super.buf, 0, out, history.length, count);\n        return out;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"shevek/qemu-java","sample_ref":"refs/heads/master","sample_path":"qemu-manager/src/main/java/org/anarres/qemu/manager/IOBuffer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"28c1ce1e409f4fb04e1cd5dfa0552f6b1a6ecdf5","size":"82428","content":"/*\n * #%L\n * Alfresco Data model classes\n * %%\n * Copyright (C) 2005 - 2016 Alfresco Software Limited\n * %%\n * This file is part of the Alfresco software. \n * If the software was purchased under a paid Alfresco license, the terms of \n * the paid license agreement will prevail.  Otherwise, the software is \n * provided under the following open source license terms:\n * \n * Alfresco is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * Alfresco is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.\n * #L%\n */\npackage org.alfresco.opencmis.search;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.StringTokenizer;\r\n\r\nimport org.alfresco.opencmis.dictionary.CMISDictionaryService;\r\nimport org.alfresco.opencmis.dictionary.PropertyDefinitionWrapper;\r\nimport org.alfresco.opencmis.dictionary.TypeDefinitionWrapper;\r\nimport org.alfresco.opencmis.search.CMISQueryOptions.CMISQueryMode;\r\nimport org.alfresco.repo.search.impl.parsers.CMISLexer;\r\nimport org.alfresco.repo.search.impl.parsers.CMISParser;\r\nimport org.alfresco.repo.search.impl.parsers.FTSParser;\r\nimport org.alfresco.repo.search.impl.parsers.FTSQueryException;\r\nimport org.alfresco.repo.search.impl.parsers.FTSQueryParser;\r\nimport org.alfresco.repo.search.impl.querymodel.Argument;\r\nimport org.alfresco.repo.search.impl.querymodel.ArgumentDefinition;\r\nimport org.alfresco.repo.search.impl.querymodel.Column;\r\nimport org.alfresco.repo.search.impl.querymodel.Constraint;\r\nimport org.alfresco.repo.search.impl.querymodel.Constraint.Occur;\r\nimport org.alfresco.repo.search.impl.querymodel.Function;\r\nimport org.alfresco.repo.search.impl.querymodel.FunctionArgument;\r\nimport org.alfresco.repo.search.impl.querymodel.FunctionEvaluationContext;\r\nimport org.alfresco.repo.search.impl.querymodel.JoinType;\r\nimport org.alfresco.repo.search.impl.querymodel.ListArgument;\r\nimport org.alfresco.repo.search.impl.querymodel.LiteralArgument;\r\nimport org.alfresco.repo.search.impl.querymodel.Order;\r\nimport org.alfresco.repo.search.impl.querymodel.Ordering;\r\nimport org.alfresco.repo.search.impl.querymodel.ParameterArgument;\r\nimport org.alfresco.repo.search.impl.querymodel.PredicateMode;\r\nimport org.alfresco.repo.search.impl.querymodel.PropertyArgument;\r\nimport org.alfresco.repo.search.impl.querymodel.Query;\r\nimport org.alfresco.repo.search.impl.querymodel.QueryModelException;\r\nimport org.alfresco.repo.search.impl.querymodel.QueryModelFactory;\r\nimport org.alfresco.repo.search.impl.querymodel.QueryOptions.Connective;\r\nimport org.alfresco.repo.search.impl.querymodel.Selector;\r\nimport org.alfresco.repo.search.impl.querymodel.SelectorArgument;\r\nimport org.alfresco.repo.search.impl.querymodel.Source;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.BaseComparison;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.Child;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.Descendant;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.Equals;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.Exists;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.GreaterThan;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.GreaterThanOrEquals;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.In;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.LessThan;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.LessThanOrEquals;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.Like;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.NotEquals;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.PropertyAccessor;\r\nimport org.alfresco.repo.search.impl.querymodel.impl.functions.Score;\r\nimport org.alfresco.service.cmr.dictionary.DataTypeDefinition;\r\nimport org.alfresco.service.cmr.repository.datatype.DefaultTypeConverter;\r\nimport org.alfresco.service.namespace.QName;\r\nimport org.alfresco.util.CachingDateFormat;\r\nimport org.antlr.runtime.ANTLRStringStream;\r\nimport org.antlr.runtime.CharStream;\r\nimport org.antlr.runtime.CommonTokenStream;\r\nimport org.antlr.runtime.RecognitionException;\r\nimport org.antlr.runtime.tree.CommonTree;\r\nimport org.apache.chemistry.opencmis.commons.enums.BaseTypeId;\r\nimport org.apache.chemistry.opencmis.commons.enums.CapabilityJoin;\r\nimport org.apache.chemistry.opencmis.commons.enums.PropertyType;\r\nimport org.apache.chemistry.opencmis.commons.exceptions.CmisInvalidArgumentException;\r\n\r\n/**\r\n * @author andyh\r\n */\r\npublic class CMISQueryParser\r\n{\r\n    private enum EscapeMode\r\n    {\r\n        LITERAL, LIKE, CONTAINS;\r\n    }\r\n\r\n    private CMISQueryOptions options;\r\n\r\n    private CMISDictionaryService cmisDictionaryService;\r\n\r\n    private CapabilityJoin joinSupport;\r\n\r\n    private BaseTypeId[] validScopes;\r\n\r\n    private boolean hasScore = false;\r\n\r\n    private boolean hasContains = false;\r\n\r\n    public CMISQueryParser(CMISQueryOptions options, CMISDictionaryService cmisDictionaryService,\r\n            CapabilityJoin joinSupport)\r\n    {\r\n        this.options = options;\r\n        this.cmisDictionaryService = cmisDictionaryService;\r\n        this.joinSupport = joinSupport;\r\n        this.validScopes = (options.getQueryMode() == CMISQueryMode.CMS_STRICT) ? CmisFunctionEvaluationContext.STRICT_SCOPES\r\n                : CmisFunctionEvaluationContext.ALFRESCO_SCOPES;\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    public Query parse(QueryModelFactory factory, FunctionEvaluationContext functionEvaluationContext)\r\n    {\r\n\r\n        CMISParser parser = null;\r\n        try\r\n        {\r\n            CharStream cs = new ANTLRStringStream(options.getQuery());\r\n            CMISLexer lexer = new CMISLexer(cs);\r\n            CommonTokenStream tokens = new CommonTokenStream(lexer);\r\n            parser = new CMISParser(tokens);\r\n            parser.setStrict(options.getQueryMode() == CMISQueryMode.CMS_STRICT);\r\n            CommonTree queryNode = (CommonTree) parser.query().getTree();\r\n\r\n            CommonTree sourceNode = (CommonTree) queryNode.getFirstChildWithType(CMISParser.SOURCE);\r\n            Source source = buildSource(sourceNode, joinSupport, factory);\r\n            Map<String, Selector> selectors = source.getSelectors();\r\n            ArrayList<Column> columns = buildColumns(queryNode, factory, selectors, options.getQuery());\r\n\r\n            HashMap<String, Column> columnMap = new HashMap<String, Column>();\r\n            for (Column column : columns)\r\n            {\r\n                if (columnMap.containsKey(column.getAlias()))\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Duplicate column alias for \" + column.getAlias());\r\n                } else\r\n                {\r\n                    columnMap.put(column.getAlias(), column);\r\n                }\r\n            }\r\n\r\n            ArrayList<Ordering> orderings = buildOrderings(queryNode, factory, selectors, columns);\r\n\r\n            Constraint constraint = null;\r\n            CommonTree orNode = (CommonTree) queryNode.getFirstChildWithType(CMISParser.DISJUNCTION);\r\n            if (orNode != null)\r\n            {\r\n                constraint = buildDisjunction(orNode, factory, functionEvaluationContext, selectors, columnMap);\r\n            }\r\n\r\n            Query query = factory.createQuery(columns, source, constraint, orderings);\r\n\r\n            // TODO: validate query and use of ID, function arguments matching\r\n            // up etc\r\n\r\n            if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n            {\r\n                if (hasScore && !hasContains)\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Function SCORE() used without matching CONTAINS() function\");\r\n                }\r\n            }\r\n\r\n            return query;\r\n        } catch (RecognitionException e)\r\n        {\r\n            if (parser != null)\r\n            {\r\n                String[] tokenNames = parser.getTokenNames();\r\n                String hdr = parser.getErrorHeader(e);\r\n                String msg = parser.getErrorMessage(e, tokenNames);\r\n                throw new CmisInvalidArgumentException(hdr + \"\\n\" + msg, e);\r\n            }\r\n        }\r\n        throw new CmisInvalidArgumentException(\"Failed to parse\");\r\n    }\r\n\r\n    /**\r\n     * @param orNode CommonTree\r\n     * @param factory QueryModelFactory\r\n     * @param functionEvaluationContext FunctionEvaluationContext\r\n     * @param selectors Map<String, Selector>\r\n     * @param columnMap HashMap<String, Column>\r\n     * @return Constraint\r\n     */\r\n    private Constraint buildDisjunction(CommonTree orNode, QueryModelFactory factory,\r\n            FunctionEvaluationContext functionEvaluationContext, Map<String, Selector> selectors,\r\n            HashMap<String, Column> columnMap)\r\n    {\r\n        List<Constraint> constraints = new ArrayList<Constraint>(orNode.getChildCount());\r\n        for (int i = 0; i < orNode.getChildCount(); i++)\r\n        {\r\n            CommonTree andNode = (CommonTree) orNode.getChild(i);\r\n            Constraint constraint = buildConjunction(andNode, factory, functionEvaluationContext, selectors, columnMap);\r\n            constraints.add(constraint);\r\n        }\r\n        if (constraints.size() == 1)\r\n        {\r\n            return constraints.get(0);\r\n        } else\r\n        {\r\n            return factory.createDisjunction(constraints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param andNode CommonTree\r\n     * @param factory QueryModelFactory\r\n     * @param functionEvaluationContext FunctionEvaluationContext\r\n     * @param selectors Map<String, Selector>\r\n     * @param columnMap HashMap<String, Column>\r\n     * @return Constraint\r\n     */\r\n    private Constraint buildConjunction(CommonTree andNode, QueryModelFactory factory,\r\n            FunctionEvaluationContext functionEvaluationContext, Map<String, Selector> selectors,\r\n            HashMap<String, Column> columnMap)\r\n    {\r\n        List<Constraint> constraints = new ArrayList<Constraint>(andNode.getChildCount());\r\n        for (int i = 0; i < andNode.getChildCount(); i++)\r\n        {\r\n            CommonTree notNode = (CommonTree) andNode.getChild(i);\r\n            Constraint constraint = buildNegation(notNode, factory, functionEvaluationContext, selectors, columnMap);\r\n            constraints.add(constraint);\r\n        }\r\n        if (constraints.size() == 1 && constraints.get(0).getOccur() != Occur.EXCLUDE)\r\n        {\r\n            return constraints.get(0);\r\n        } else\r\n        {\r\n            return factory.createConjunction(constraints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param notNode CommonTree\r\n     * @param factory QueryModelFactory\r\n     * @param functionEvaluationContext FunctionEvaluationContext\r\n     * @param selectors Map<String, Selector>\r\n     * @param columnMap HashMap<String, Column>\r\n     * @return Constraint\r\n     */\r\n    private Constraint buildNegation(CommonTree notNode, QueryModelFactory factory,\r\n            FunctionEvaluationContext functionEvaluationContext, Map<String, Selector> selectors,\r\n            HashMap<String, Column> columnMap)\r\n    {\r\n        if (notNode.getType() == CMISParser.NEGATION)\r\n        {\r\n            Constraint constraint = buildTest((CommonTree) notNode.getChild(0), factory, functionEvaluationContext,\r\n                    selectors, columnMap);\r\n            constraint.setOccur(Occur.EXCLUDE);\r\n            return constraint;\r\n        } else\r\n        {\r\n            return buildTest(notNode, factory, functionEvaluationContext, selectors, columnMap);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param testNode CommonTree\r\n     * @param factory QueryModelFactory\r\n     * @param functionEvaluationContext FunctionEvaluationContext\r\n     * @param selectors Map<String, Selector>\r\n     * @param columnMap HashMap<String, Column>\r\n     * @return Constraint\r\n     */\r\n    private Constraint buildTest(CommonTree testNode, QueryModelFactory factory,\r\n            FunctionEvaluationContext functionEvaluationContext, Map<String, Selector> selectors,\r\n            HashMap<String, Column> columnMap)\r\n    {\r\n        if (testNode.getType() == CMISParser.DISJUNCTION)\r\n        {\r\n            return buildDisjunction(testNode, factory, functionEvaluationContext, selectors, columnMap);\r\n        } else\r\n        {\r\n            return buildPredicate(testNode, factory, functionEvaluationContext, selectors, columnMap);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param predicateNode CommonTree\r\n     * @param factory QueryModelFactory\r\n     * @param functionEvaluationContext FunctionEvaluationContext\r\n     * @param selectors Map<String, Selector>\r\n     * @param columnMap HashMap<String, Column>\r\n     * @return Constraint\r\n     */\r\n    private Constraint buildPredicate(CommonTree predicateNode, QueryModelFactory factory,\r\n            FunctionEvaluationContext functionEvaluationContext, Map<String, Selector> selectors,\r\n            Map<String, Column> columnMap)\r\n    {\r\n        String functionName;\r\n        Function function;\r\n        CommonTree argNode;\r\n        Map<String, Argument> functionArguments;\r\n        Argument arg;\r\n        switch (predicateNode.getType())\r\n        {\r\n        case CMISParser.PRED_CHILD:\r\n            functionName = Child.NAME;\r\n            function = factory.getFunction(functionName);\r\n            functionArguments = new LinkedHashMap<String, Argument>();\r\n            argNode = (CommonTree) predicateNode.getChild(0);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(Child.ARG_PARENT), factory, selectors,\r\n                    columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            if (predicateNode.getChildCount() > 1)\r\n            {\r\n                argNode = (CommonTree) predicateNode.getChild(1);\r\n                arg = getFunctionArgument(argNode, function.getArgumentDefinition(Child.ARG_SELECTOR), factory,\r\n                        selectors, columnMap, false);\r\n                if (!arg.isQueryable())\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"The property is not queryable: \" + argNode.getText());\r\n                }\r\n                functionArguments.put(arg.getName(), arg);\r\n            }\r\n            return factory.createFunctionalConstraint(function, functionArguments);\r\n        case CMISParser.PRED_COMPARISON:\r\n\r\n            switch (predicateNode.getChild(2).getType())\r\n            {\r\n            case CMISParser.EQUALS:\r\n                functionName = Equals.NAME;\r\n                function = factory.getFunction(functionName);\r\n                break;\r\n            case CMISParser.NOTEQUALS:\r\n                functionName = NotEquals.NAME;\r\n                function = factory.getFunction(functionName);\r\n                break;\r\n            case CMISParser.GREATERTHAN:\r\n                functionName = GreaterThan.NAME;\r\n                function = factory.getFunction(functionName);\r\n                break;\r\n            case CMISParser.GREATERTHANOREQUALS:\r\n                functionName = GreaterThanOrEquals.NAME;\r\n                function = factory.getFunction(functionName);\r\n                break;\r\n            case CMISParser.LESSTHAN:\r\n                functionName = LessThan.NAME;\r\n                function = factory.getFunction(functionName);\r\n                break;\r\n            case CMISParser.LESSTHANOREQUALS:\r\n                functionName = LessThanOrEquals.NAME;\r\n                function = factory.getFunction(functionName);\r\n                break;\r\n            default:\r\n                throw new CmisInvalidArgumentException(\"Unknown comparison function \"\r\n                        + predicateNode.getChild(2).getText());\r\n            }\r\n            functionArguments = new LinkedHashMap<String, Argument>();\r\n            argNode = (CommonTree) predicateNode.getChild(0);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(BaseComparison.ARG_MODE), factory,\r\n                    selectors, columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            argNode = (CommonTree) predicateNode.getChild(1);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(BaseComparison.ARG_LHS), factory,\r\n                    selectors, columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            argNode = (CommonTree) predicateNode.getChild(3);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(BaseComparison.ARG_RHS), factory,\r\n                    selectors, columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            checkPredicateConditionsForComparisons(function, functionArguments, functionEvaluationContext, columnMap);\r\n            return factory.createFunctionalConstraint(function, functionArguments);\r\n        case CMISParser.PRED_DESCENDANT:\r\n            functionName = Descendant.NAME;\r\n            function = factory.getFunction(functionName);\r\n            argNode = (CommonTree) predicateNode.getChild(0);\r\n            functionArguments = new LinkedHashMap<String, Argument>();\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(Descendant.ARG_ANCESTOR), factory,\r\n                    selectors, columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            if (predicateNode.getChildCount() > 1)\r\n            {\r\n                argNode = (CommonTree) predicateNode.getChild(1);\r\n                arg = getFunctionArgument(argNode, function.getArgumentDefinition(Descendant.ARG_SELECTOR), factory,\r\n                        selectors, columnMap, false);\r\n                functionArguments.put(arg.getName(), arg);\r\n            }\r\n            return factory.createFunctionalConstraint(function, functionArguments);\r\n        case CMISParser.PRED_EXISTS:\r\n            functionName = Exists.NAME;\r\n            function = factory.getFunction(functionName);\r\n            argNode = (CommonTree) predicateNode.getChild(0);\r\n            functionArguments = new LinkedHashMap<String, Argument>();\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(Exists.ARG_PROPERTY), factory, selectors,\r\n                    columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            arg = factory.createLiteralArgument(Exists.ARG_NOT, DataTypeDefinition.BOOLEAN,\r\n                    (predicateNode.getChildCount() > 1));\r\n            functionArguments.put(arg.getName(), arg);\r\n            // Applies to both single valued and multi-valued properties - no\r\n            // checks required\r\n            return factory.createFunctionalConstraint(function, functionArguments);\r\n        case CMISParser.PRED_FTS:\r\n            if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n            {\r\n                if (hasContains)\r\n                {\r\n                    throw new CmisInvalidArgumentException(\r\n                            \"Only one CONTAINS() function can be included in a single query statement.\");\r\n                }\r\n            }\r\n            String ftsExpression = predicateNode.getChild(0).getText();\r\n            ftsExpression = ftsExpression.substring(1, ftsExpression.length() - 1);\r\n            ftsExpression = unescape(ftsExpression, EscapeMode.CONTAINS);\r\n            Selector selector;\r\n            if (predicateNode.getChildCount() > 1)\r\n            {\r\n                String qualifier = predicateNode.getChild(1).getText();\r\n                selector = selectors.get(qualifier);\r\n                if (selector == null)\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"No selector for \" + qualifier);\r\n                }\r\n            } else\r\n            {\r\n                if (selectors.size() == 1)\r\n                {\r\n                    selector = selectors.get(selectors.keySet().iterator().next());\r\n                } else\r\n                {\r\n                    throw new CmisInvalidArgumentException(\r\n                            \"A selector must be specified when there are two or more selectors\");\r\n                }\r\n            }\r\n            Connective defaultConnective;\r\n            Connective defaultFieldConnective;\r\n            if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n            {\r\n                defaultConnective = Connective.AND;\r\n                defaultFieldConnective = Connective.AND;\r\n            } else\r\n            {\r\n                defaultConnective = options.getDefaultFTSConnective();\r\n                defaultFieldConnective = options.getDefaultFTSFieldConnective();\r\n            }\r\n            FTSParser.Mode mode;\r\n            if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n            {\r\n                mode = FTSParser.Mode.CMIS;\r\n            } else\r\n            {\r\n                if (defaultConnective == Connective.AND)\r\n                {\r\n                    mode = FTSParser.Mode.DEFAULT_CONJUNCTION;\r\n                } else\r\n                {\r\n                    mode = FTSParser.Mode.DEFAULT_DISJUNCTION;\r\n                }\r\n            }\r\n            Constraint ftsConstraint;\r\n            if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n            {\r\n                ftsConstraint = CMISFTSQueryParser.buildFTS(ftsExpression, factory, functionEvaluationContext,\r\n                        selector, columnMap, options.getDefaultFieldName());\r\n            } else\r\n            {\r\n                ftsConstraint = FTSQueryParser.buildFTS(ftsExpression, factory, functionEvaluationContext, selector,\r\n                        columnMap, mode, defaultFieldConnective, null, options.getDefaultFieldName(), FTSQueryParser.RerankPhase.SINGLE_PASS);\r\n            }\r\n            ftsConstraint.setBoost(1000.0f);\r\n            hasContains = true;\r\n            return ftsConstraint;\r\n        case CMISParser.PRED_IN:\r\n            functionName = In.NAME;\r\n            function = factory.getFunction(functionName);\r\n            functionArguments = new LinkedHashMap<String, Argument>();\r\n            argNode = (CommonTree) predicateNode.getChild(0);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(In.ARG_MODE), factory, selectors,\r\n                    columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            argNode = (CommonTree) predicateNode.getChild(1);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(In.ARG_PROPERTY), factory, selectors,\r\n                    columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            argNode = (CommonTree) predicateNode.getChild(2);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(In.ARG_LIST), factory, selectors,\r\n                    columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            arg = factory.createLiteralArgument(In.ARG_NOT, DataTypeDefinition.BOOLEAN,\r\n                    (predicateNode.getChildCount() > 3));\r\n            functionArguments.put(arg.getName(), arg);\r\n            checkPredicateConditionsForIn(functionArguments, functionEvaluationContext, columnMap);\r\n            return factory.createFunctionalConstraint(function, functionArguments);\r\n        case CMISParser.PRED_LIKE:\r\n            functionName = Like.NAME;\r\n            function = factory.getFunction(functionName);\r\n            functionArguments = new LinkedHashMap<String, Argument>();\r\n            argNode = (CommonTree) predicateNode.getChild(0);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(Like.ARG_PROPERTY), factory, selectors,\r\n                    columnMap, false);\r\n            functionArguments.put(arg.getName(), arg);\r\n            argNode = (CommonTree) predicateNode.getChild(1);\r\n            arg = getFunctionArgument(argNode, function.getArgumentDefinition(Like.ARG_EXP), factory, selectors,\r\n                    columnMap, true);\r\n            functionArguments.put(arg.getName(), arg);\r\n            arg = factory.createLiteralArgument(Like.ARG_NOT, DataTypeDefinition.BOOLEAN,\r\n                    (predicateNode.getChildCount() > 2));\r\n            functionArguments.put(arg.getName(), arg);\r\n            checkPredicateConditionsForLike(functionArguments, functionEvaluationContext, columnMap);\r\n            return factory.createFunctionalConstraint(function, functionArguments);\r\n        default:\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private void checkPredicateConditionsForIn(Map<String, Argument> functionArguments,\r\n            FunctionEvaluationContext functionEvaluationContext, Map<String, Column> columnMap)\r\n    {\r\n        if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n        {\r\n            PropertyArgument propertyArgument = (PropertyArgument) functionArguments.get(In.ARG_PROPERTY);\r\n            LiteralArgument modeArgument = (LiteralArgument) functionArguments.get(In.ARG_MODE);\r\n            String modeString = DefaultTypeConverter.INSTANCE.convert(String.class,\r\n                    modeArgument.getValue(functionEvaluationContext));\r\n            PredicateMode mode = PredicateMode.valueOf(modeString);\r\n            String propertyName = propertyArgument.getPropertyName();\r\n\r\n            Column column = columnMap.get(propertyName);\r\n            if (column != null)\r\n            {\r\n                // check for function type\r\n                if (column.getFunction().getName().equals(PropertyAccessor.NAME))\r\n                {\r\n                    PropertyArgument arg = (PropertyArgument) column.getFunctionArguments().get(\r\n                            PropertyAccessor.ARG_PROPERTY);\r\n                    propertyName = arg.getPropertyName();\r\n                } else\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Complex column reference not supoprted in LIKE \"\r\n                            + propertyName);\r\n                }\r\n            }\r\n\r\n            boolean isMultiValued = functionEvaluationContext.isMultiValued(propertyName);\r\n\r\n            switch (mode)\r\n            {\r\n            case ANY:\r\n                if (isMultiValued)\r\n                {\r\n                    break;\r\n                } else\r\n                {\r\n                    throw new QueryModelException(\"Predicate mode \" + PredicateMode.ANY\r\n                            + \" is not supported for IN and single valued properties\");\r\n                }\r\n            case SINGLE_VALUED_PROPERTY:\r\n                if (isMultiValued)\r\n                {\r\n                    throw new QueryModelException(\"Predicate mode \" + PredicateMode.SINGLE_VALUED_PROPERTY\r\n                            + \" is not supported for IN and multi-valued properties\");\r\n                } else\r\n                {\r\n                    break;\r\n                }\r\n            default:\r\n                throw new QueryModelException(\"Unsupported predicate mode \" + mode);\r\n            }\r\n\r\n            PropertyDefinitionWrapper propDef = cmisDictionaryService.findPropertyByQueryName(propertyName);\r\n            if (propDef.getPropertyDefinition().getPropertyType() == PropertyType.BOOLEAN)\r\n            {\r\n                throw new QueryModelException(\"In is not supported for properties of type Boolean\");\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private void checkPredicateConditionsForComparisons(Function function, Map<String, Argument> functionArguments,\r\n            FunctionEvaluationContext functionEvaluationContext, Map<String, Column> columnMap)\r\n    {\r\n        if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n        {\r\n            ((BaseComparison) function).setPropertyAndStaticArguments(functionArguments);\r\n            String propertyName = ((BaseComparison) function).getPropertyName();\r\n            LiteralArgument modeArgument = (LiteralArgument) functionArguments.get(BaseComparison.ARG_MODE);\r\n            String modeString = DefaultTypeConverter.INSTANCE.convert(String.class,\r\n                    modeArgument.getValue(functionEvaluationContext));\r\n            PredicateMode mode = PredicateMode.valueOf(modeString);\r\n\r\n            Column column = columnMap.get(propertyName);\r\n            if (column != null)\r\n            {\r\n                // check for function type\r\n                if (column.getFunction().getName().equals(PropertyAccessor.NAME))\r\n                {\r\n                    PropertyArgument arg = (PropertyArgument) column.getFunctionArguments().get(\r\n                            PropertyAccessor.ARG_PROPERTY);\r\n                    propertyName = arg.getPropertyName();\r\n                } else\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Complex column reference not supoprted in LIKE \"\r\n                            + propertyName);\r\n                }\r\n            }\r\n\r\n            boolean isMultiValued = functionEvaluationContext.isMultiValued(propertyName);\r\n\r\n            switch (mode)\r\n            {\r\n            case ANY:\r\n                if (isMultiValued)\r\n                {\r\n                    if (function.getName().equals(Equals.NAME))\r\n                    {\r\n                        break;\r\n                    } else\r\n                    {\r\n                        throw new QueryModelException(\"Predicate mode \" + PredicateMode.ANY + \" is only supported for \"\r\n                                + Equals.NAME + \" (and multi-valued properties).\");\r\n                    }\r\n                } else\r\n                {\r\n                    throw new QueryModelException(\"Predicate mode \" + PredicateMode.ANY + \" is not supported for \"\r\n                            + function.getName() + \" and single valued properties\");\r\n                }\r\n            case SINGLE_VALUED_PROPERTY:\r\n                if (isMultiValued)\r\n                {\r\n                    throw new QueryModelException(\"Predicate mode \" + PredicateMode.SINGLE_VALUED_PROPERTY\r\n                            + \" is not supported for \" + function.getName() + \" and multi-valued properties\");\r\n                } else\r\n                {\r\n                    break;\r\n                }\r\n            default:\r\n                throw new QueryModelException(\"Unsupported predicate mode \" + mode);\r\n            }\r\n\r\n            // limit support for ID and Boolean\r\n\r\n            PropertyDefinitionWrapper propDef = cmisDictionaryService.findPropertyByQueryName(propertyName);\r\n            if (propDef.getPropertyDefinition().getPropertyType() == PropertyType.ID)\r\n            {\r\n                if (function.getName().equals(Equals.NAME) || function.getName().equals(NotEquals.NAME))\r\n                {\r\n                    return;\r\n                } else\r\n                {\r\n                    throw new QueryModelException(\"Comparison \" + function.getName()\r\n                            + \" is not supported for properties of type ID\");\r\n                }\r\n            } else if (propDef.getPropertyDefinition().getPropertyType() == PropertyType.BOOLEAN)\r\n            {\r\n                if (function.getName().equals(Equals.NAME))\r\n                {\r\n                    return;\r\n                } else\r\n                {\r\n                    throw new QueryModelException(\"Comparison \" + function.getName()\r\n                            + \" is not supported for properties of type Boolean\");\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private void checkPredicateConditionsForLike(Map<String, Argument> functionArguments,\r\n            FunctionEvaluationContext functionEvaluationContext, Map<String, Column> columnMap)\r\n    {\r\n        if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n        {\r\n            PropertyArgument propertyArgument = (PropertyArgument) functionArguments.get(Like.ARG_PROPERTY);\r\n\r\n            boolean isMultiValued = functionEvaluationContext.isMultiValued(propertyArgument.getPropertyName());\r\n\r\n            if (isMultiValued)\r\n            {\r\n                throw new QueryModelException(\"Like is not supported for multi-valued properties\");\r\n            }\r\n\r\n            String cmisPropertyName = propertyArgument.getPropertyName();\r\n\r\n            Column column = columnMap.get(cmisPropertyName);\r\n            if (column != null)\r\n            {\r\n                // check for function type\r\n                if (column.getFunction().getName().equals(PropertyAccessor.NAME))\r\n                {\r\n                    PropertyArgument arg = (PropertyArgument) column.getFunctionArguments().get(\r\n                            PropertyAccessor.ARG_PROPERTY);\r\n                    cmisPropertyName = arg.getPropertyName();\r\n                } else\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Complex column reference not supoprted in LIKE \"\r\n                            + cmisPropertyName);\r\n                }\r\n            }\r\n\r\n            PropertyDefinitionWrapper propDef = cmisDictionaryService.findPropertyByQueryName(cmisPropertyName);\r\n            if (propDef.getPropertyDefinition().getPropertyType() != PropertyType.STRING)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"LIKE is only supported against String types\" + cmisPropertyName);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param queryNode CommonTree\r\n     * @param factory QueryModelFactory\r\n     * @param selectors Map<String, Selector> selectors\r\n     * @param columns List<Column>\r\n     * @return ArrayList<Ordering>\r\n     */\r\n    private ArrayList<Ordering> buildOrderings(CommonTree queryNode, QueryModelFactory factory,\r\n            Map<String, Selector> selectors, List<Column> columns)\r\n    {\r\n        ArrayList<Ordering> orderings = new ArrayList<Ordering>();\r\n        CommonTree orderNode = (CommonTree) queryNode.getFirstChildWithType(CMISParser.ORDER);\r\n        if (orderNode != null)\r\n        {\r\n            for (int i = 0; i < orderNode.getChildCount(); i++)\r\n            {\r\n                CommonTree current = (CommonTree) orderNode.getChild(i);\r\n\r\n                CommonTree columnRefNode = (CommonTree) current.getFirstChildWithType(CMISParser.COLUMN_REF);\r\n                if (columnRefNode != null)\r\n                {\r\n                    String columnName = columnRefNode.getChild(0).getText();\r\n                    String qualifier = \"\";\r\n                    if (columnRefNode.getChildCount() > 1)\r\n                    {\r\n                        qualifier = columnRefNode.getChild(1).getText();\r\n                    }\r\n\r\n                    Order order = Order.ASCENDING;\r\n\r\n                    if (current.getChild(1).getType() == CMISParser.DESC)\r\n                    {\r\n                        order = Order.DESCENDING;\r\n                    }\r\n\r\n                    Column orderColumn = null;\r\n\r\n                    if (qualifier.length() == 0)\r\n                    {\r\n                        Column match = null;\r\n                        for (Column column : columns)\r\n                        {\r\n                            if (column.getAlias().equals(columnName))\r\n                            {\r\n                                match = column;\r\n                                break;\r\n                            }\r\n                            if (column.getFunction().getName().equals(PropertyAccessor.NAME))\r\n                            {\r\n                                PropertyArgument arg = (PropertyArgument) column.getFunctionArguments().get(\r\n                                        PropertyAccessor.ARG_PROPERTY);\r\n                                String propertyName = arg.getPropertyName();\r\n                                if (propertyName.equals(columnName))\r\n                                {\r\n                                    match = column;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        // in strict mode the ordered column must be selected\r\n                        if ((options.getQueryMode() == CMISQueryMode.CMS_STRICT) && (match == null))\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Ordered column is not selected: \" + qualifier + \".\"\r\n                                    + columnName);\r\n                        }\r\n                        if (match == null)\r\n                        {\r\n\r\n                            Selector selector = selectors.get(qualifier);\r\n                            if (selector == null)\r\n                            {\r\n                                if ((qualifier.equals(\"\")) && (selectors.size() == 1))\r\n                                {\r\n                                    selector = selectors.get(selectors.keySet().iterator().next());\r\n                                } else\r\n                                {\r\n                                    throw new CmisInvalidArgumentException(\"No selector for \" + qualifier);\r\n                                }\r\n                            }\r\n\r\n                            TypeDefinitionWrapper typeDef = cmisDictionaryService.findTypeForClass(selector.getType(), validScopes);\r\n                            if (typeDef == null)\r\n                            {\r\n                                throw new CmisInvalidArgumentException(\"Type unsupported in CMIS queries: \"\r\n                                        + selector.getAlias());\r\n                            }\r\n                            PropertyDefinitionWrapper propDef = cmisDictionaryService\r\n                                    .findPropertyByQueryName(columnName);\r\n                            if (propDef == null)\r\n                            {\r\n                                throw new CmisInvalidArgumentException(\"Invalid column for \"\r\n                                        + typeDef.getTypeDefinition(false).getQueryName() + \".\" + columnName);\r\n                            }\r\n\r\n                            // Check column/property applies to selector/type\r\n\r\n                            if (typeDef.getPropertyById(propDef.getPropertyId()) == null)\r\n                            {\r\n                                throw new CmisInvalidArgumentException(\"Invalid column for \"\r\n                                        + typeDef.getTypeDefinition(false).getQueryName() + \".\" + columnName);\r\n                            }\r\n\r\n                            // check there is a matching selector\r\n\r\n                            if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n                            {\r\n                                boolean found = false;\r\n                                for (Column column : columns)\r\n                                {\r\n                                    if (column.getFunction().getName().equals(PropertyAccessor.NAME))\r\n                                    {\r\n                                        PropertyArgument pa = (PropertyArgument) column.getFunctionArguments().get(\r\n                                                PropertyAccessor.ARG_PROPERTY);\r\n                                        if (pa.getPropertyName().equals(propDef.getPropertyId()))\r\n                                        {\r\n                                            found = true;\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (!found)\r\n                                {\r\n                                    throw new CmisInvalidArgumentException(\"Ordered column is not selected: \"\r\n                                            + qualifier + \".\" + columnName);\r\n                                }\r\n                            }\r\n\r\n                            Function function = factory.getFunction(PropertyAccessor.NAME);\r\n                            Argument arg = factory.createPropertyArgument(PropertyAccessor.ARG_PROPERTY, propDef\r\n                                    .getPropertyDefinition().isQueryable(), propDef.getPropertyDefinition()\r\n                                    .isOrderable(), selector.getAlias(), propDef.getPropertyId());\r\n                            Map<String, Argument> functionArguments = new LinkedHashMap<String, Argument>();\r\n                            functionArguments.put(arg.getName(), arg);\r\n\r\n                            String alias = (selector.getAlias().length() > 0) ? selector.getAlias() + \".\"\r\n                                    + propDef.getPropertyId() : propDef.getPropertyId();\r\n\r\n                            match = factory.createColumn(function, functionArguments, alias);\r\n                        }\r\n\r\n                        orderColumn = match;\r\n                    } else\r\n                    {\r\n                        Selector selector = selectors.get(qualifier);\r\n                        if (selector == null)\r\n                        {\r\n                            if ((qualifier.equals(\"\")) && (selectors.size() == 1))\r\n                            {\r\n                                selector = selectors.get(selectors.keySet().iterator().next());\r\n                            } else\r\n                            {\r\n                                throw new CmisInvalidArgumentException(\"No selector for \" + qualifier);\r\n                            }\r\n                        }\r\n\r\n                        TypeDefinitionWrapper typeDef = cmisDictionaryService.findTypeForClass(selector.getType(), validScopes);\r\n                        if (typeDef == null)\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Type unsupported in CMIS queries: \"\r\n                                    + selector.getAlias());\r\n                        }\r\n                        PropertyDefinitionWrapper propDef = cmisDictionaryService.findPropertyByQueryName(columnName);\r\n                        if (propDef == null)\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Invalid column for \"\r\n                                    + typeDef.getTypeDefinition(false).getQueryName() + \".\" + columnName\r\n                                    + \" selector alias \" + selector.getAlias());\r\n                        }\r\n\r\n                        // check there is a matching selector\r\n\r\n                        if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n                        {\r\n                            boolean found = false;\r\n                            for (Column column : columns)\r\n                            {\r\n                                if (column.getFunction().getName().equals(PropertyAccessor.NAME))\r\n                                {\r\n                                    PropertyArgument pa = (PropertyArgument) column.getFunctionArguments().get(\r\n                                            PropertyAccessor.ARG_PROPERTY);\r\n                                    if (pa.getPropertyName().equals(propDef.getPropertyId()))\r\n                                    {\r\n                                        found = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!found)\r\n                            {\r\n                                throw new CmisInvalidArgumentException(\"Ordered column is not selected: \" + qualifier\r\n                                        + \".\" + columnName);\r\n                            }\r\n                        }\r\n\r\n                        Function function = factory.getFunction(PropertyAccessor.NAME);\r\n                        Argument arg = factory.createPropertyArgument(PropertyAccessor.ARG_PROPERTY, propDef\r\n                                .getPropertyDefinition().isQueryable(), propDef.getPropertyDefinition().isOrderable(),\r\n                                selector.getAlias(), propDef.getPropertyId());\r\n                        Map<String, Argument> functionArguments = new LinkedHashMap<String, Argument>();\r\n                        functionArguments.put(arg.getName(), arg);\r\n\r\n                        String alias = (selector.getAlias().length() > 0) ? selector.getAlias() + \".\"\r\n                                + propDef.getPropertyId() : propDef.getPropertyId();\r\n\r\n                        orderColumn = factory.createColumn(function, functionArguments, alias);\r\n                    }\r\n\r\n                    if (!orderColumn.isOrderable() || !orderColumn.isQueryable())\r\n                    {\r\n                        throw new CmisInvalidArgumentException(\"Ordering is not support for \" + orderColumn.getAlias());\r\n                    }\r\n\r\n                    Ordering ordering = factory.createOrdering(orderColumn, order);\r\n                    orderings.add(ordering);\r\n\r\n                }\r\n            }\r\n        }\r\n        return orderings;\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    private ArrayList<Column> buildColumns(CommonTree queryNode, QueryModelFactory factory,\r\n            Map<String, Selector> selectors, String query)\r\n    {\r\n        ArrayList<Column> columns = new ArrayList<Column>();\r\n        CommonTree starNode = (CommonTree) queryNode.getFirstChildWithType(CMISParser.ALL_COLUMNS);\r\n        if (starNode != null)\r\n        {\r\n            for (Selector selector : selectors.values())\r\n            {\r\n                TypeDefinitionWrapper typeDef = cmisDictionaryService.findTypeForClass(selector.getType(), validScopes);\r\n                if (typeDef == null)\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Type unsupported in CMIS queries: \" + selector.getAlias());\r\n                }\r\n                Collection<PropertyDefinitionWrapper> propDefs = typeDef.getProperties();\r\n                for (PropertyDefinitionWrapper definition : propDefs)\r\n                {\r\n                    Function function = factory.getFunction(PropertyAccessor.NAME);\r\n                    Argument arg = factory.createPropertyArgument(PropertyAccessor.ARG_PROPERTY, definition\r\n                            .getPropertyDefinition().isQueryable(), definition.getPropertyDefinition().isOrderable(),\r\n                            selector.getAlias(), definition.getPropertyId());\r\n                    Map<String, Argument> functionArguments = new LinkedHashMap<String, Argument>();\r\n                    functionArguments.put(arg.getName(), arg);\r\n                    String alias = (selector.getAlias().length() > 0) ? selector.getAlias() + \".\"\r\n                            + definition.getPropertyId() : definition.getPropertyId();\r\n                    Column column = factory.createColumn(function, functionArguments, alias);\r\n                    columns.add(column);\r\n                }\r\n            }\r\n        }\r\n\r\n        CommonTree columnsNode = (CommonTree) queryNode.getFirstChildWithType(CMISParser.COLUMNS);\r\n        if (columnsNode != null)\r\n        {\r\n            for (CommonTree columnNode : (List<CommonTree>) columnsNode.getChildren())\r\n            {\r\n                if (columnNode.getType() == CMISParser.ALL_COLUMNS)\r\n                {\r\n                    String qualifier = columnNode.getChild(0).getText();\r\n                    Selector selector = selectors.get(qualifier);\r\n                    if (selector == null)\r\n                    {\r\n                        if ((qualifier.equals(\"\")) && (selectors.size() == 1))\r\n                        {\r\n                            selector = selectors.get(selectors.keySet().iterator().next());\r\n                        } else\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"No selector for \" + qualifier + \" in \" + qualifier\r\n                                    + \".*\");\r\n                        }\r\n                    }\r\n\r\n                    TypeDefinitionWrapper typeDef = cmisDictionaryService.findTypeForClass(selector.getType(),\r\n                            validScopes);\r\n                    if (typeDef == null)\r\n                    {\r\n                        throw new CmisInvalidArgumentException(\"Type unsupported in CMIS queries: \"\r\n                                + selector.getAlias());\r\n                    }\r\n                    Collection<PropertyDefinitionWrapper> propDefs = typeDef.getProperties();\r\n                    for (PropertyDefinitionWrapper definition : propDefs)\r\n                    {\r\n                        Function function = factory.getFunction(PropertyAccessor.NAME);\r\n                        Argument arg = factory.createPropertyArgument(PropertyAccessor.ARG_PROPERTY, definition\r\n                                .getPropertyDefinition().isQueryable(), definition.getPropertyDefinition()\r\n                                .isOrderable(), selector.getAlias(), definition.getPropertyId());\r\n                        Map<String, Argument> functionArguments = new LinkedHashMap<String, Argument>();\r\n                        functionArguments.put(arg.getName(), arg);\r\n                        String alias = (selector.getAlias().length() > 0) ? selector.getAlias() + \".\"\r\n                                + definition.getPropertyId() : definition.getPropertyId();\r\n                        Column column = factory.createColumn(function, functionArguments, alias);\r\n                        columns.add(column);\r\n                    }\r\n                }\r\n\r\n                if (columnNode.getType() == CMISParser.COLUMN)\r\n                {\r\n                    CommonTree columnRefNode = (CommonTree) columnNode.getFirstChildWithType(CMISParser.COLUMN_REF);\r\n                    if (columnRefNode != null)\r\n                    {\r\n                        String columnName = columnRefNode.getChild(0).getText();\r\n                        String qualifier = \"\";\r\n                        if (columnRefNode.getChildCount() > 1)\r\n                        {\r\n                            qualifier = columnRefNode.getChild(1).getText();\r\n                        }\r\n                        Selector selector = selectors.get(qualifier);\r\n                        if (selector == null)\r\n                        {\r\n                            if ((qualifier.equals(\"\")) && (selectors.size() == 1))\r\n                            {\r\n                                selector = selectors.get(selectors.keySet().iterator().next());\r\n                            } else\r\n                            {\r\n                                throw new CmisInvalidArgumentException(\"No selector for \" + qualifier);\r\n                            }\r\n                        }\r\n\r\n                        TypeDefinitionWrapper typeDef = cmisDictionaryService.findTypeForClass(selector.getType(),\r\n                                validScopes);\r\n                        if (typeDef == null)\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Type unsupported in CMIS queries: \"\r\n                                    + selector.getAlias());\r\n                        }\r\n                        PropertyDefinitionWrapper propDef = cmisDictionaryService.findPropertyByQueryName(columnName);\r\n                        if (propDef == null)\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Invalid column for \"\r\n                                    + typeDef.getTypeDefinition(false).getQueryName() + \" \" + columnName);\r\n                        }\r\n\r\n                        // Check column/property applies to selector/type\r\n\r\n                        if (typeDef.getPropertyById(propDef.getPropertyId()) == null)\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Invalid column for \"\r\n                                    + typeDef.getTypeDefinition(false).getQueryName() + \".\" + columnName);\r\n                        }\r\n\r\n                        Function function = factory.getFunction(PropertyAccessor.NAME);\r\n                        Argument arg = factory.createPropertyArgument(PropertyAccessor.ARG_PROPERTY, propDef\r\n                                .getPropertyDefinition().isQueryable(), propDef.getPropertyDefinition().isOrderable(),\r\n                                selector.getAlias(), propDef.getPropertyId());\r\n                        Map<String, Argument> functionArguments = new LinkedHashMap<String, Argument>();\r\n                        functionArguments.put(arg.getName(), arg);\r\n\r\n                        String alias = (selector.getAlias().length() > 0) ? selector.getAlias() + \".\"\r\n                                + propDef.getPropertyId() : propDef.getPropertyId();\r\n                        if (columnNode.getChildCount() > 1)\r\n                        {\r\n                            alias = columnNode.getChild(1).getText();\r\n                        }\r\n\r\n                        Column column = factory.createColumn(function, functionArguments, alias);\r\n                        columns.add(column);\r\n\r\n                    }\r\n\r\n                    CommonTree functionNode = (CommonTree) columnNode.getFirstChildWithType(CMISParser.FUNCTION);\r\n                    if (functionNode != null)\r\n                    {\r\n                        CommonTree functionNameNode = (CommonTree) functionNode.getChild(0);\r\n                        Function function = factory.getFunction(functionNameNode.getText());\r\n                        if (function == null)\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Unknown function: \" + functionNameNode.getText());\r\n                        }\r\n                        Collection<ArgumentDefinition> definitions = function.getArgumentDefinitions().values();\r\n                        Map<String, Argument> functionArguments = new LinkedHashMap<String, Argument>();\r\n\r\n                        int childIndex = 2;\r\n                        for (ArgumentDefinition definition : definitions)\r\n                        {\r\n                            if (functionNode.getChildCount() > childIndex + 1)\r\n                            {\r\n                                CommonTree argNode = (CommonTree) functionNode.getChild(childIndex++);\r\n                                Argument arg = getFunctionArgument(argNode, definition, factory, selectors, null,\r\n                                        function.getName().equals(Like.NAME));\r\n                                functionArguments.put(arg.getName(), arg);\r\n                            } else\r\n                            {\r\n                                if (definition.isMandatory())\r\n                                {\r\n                                    // throw new\r\n                                    // CmisInvalidArgumentException(\"Insufficient\r\n                                    // aruments\r\n                                    // for function \" +\r\n                                    // ((CommonTree)\r\n                                    // functionNode.getChild(0)).getText() );\r\n                                    break;\r\n                                } else\r\n                                {\r\n                                    // ok\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        CommonTree rparenNode = (CommonTree) functionNode.getChild(functionNode.getChildCount() - 1);\r\n\r\n                        int start = getStringPosition(query, functionNode.getLine(),\r\n                                functionNode.getCharPositionInLine());\r\n                        int end = getStringPosition(query, rparenNode.getLine(), rparenNode.getCharPositionInLine());\r\n\r\n                        if (function.getName().equals(Score.NAME))\r\n                        {\r\n                            hasScore = true;\r\n                        }\r\n\r\n                        String alias;\r\n                        if (function.getName().equals(Score.NAME))\r\n                        {\r\n                            alias = \"SEARCH_SCORE\";\r\n                            // check no args\r\n                            if (functionNode.getChildCount() > 3)\r\n                            {\r\n                                throw new CmisInvalidArgumentException(\r\n                                        \"The function SCORE() is not allowed any arguments\");\r\n                            }\r\n                        } else\r\n                        {\r\n                            alias = query.substring(start, end + 1);\r\n                        }\r\n                        if (columnNode.getChildCount() > 1)\r\n                        {\r\n                            alias = columnNode.getChild(1).getText();\r\n                        }\r\n\r\n                        Column column = factory.createColumn(function, functionArguments, alias);\r\n                        columns.add(column);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return columns;\r\n    }\r\n\r\n    /**\r\n     * @param query String\r\n     * @param line int\r\n     * @param charPositionInLine int\r\n     * @return int\r\n     */\r\n    private int getStringPosition(String query, int line, int charPositionInLine)\r\n    {\r\n        StringTokenizer tokenizer = new StringTokenizer(query, \"\\n\\r\\f\");\r\n        String[] lines = new String[tokenizer.countTokens()];\r\n        int i = 0;\r\n        while (tokenizer.hasMoreElements())\r\n        {\r\n            lines[i++] = tokenizer.nextToken();\r\n        }\r\n\r\n        int position = 0;\r\n        for (i = 0; i < line - 1; i++)\r\n        {\r\n            position += lines[i].length();\r\n            position++;\r\n        }\r\n        return position + charPositionInLine;\r\n    }\r\n\r\n    private Argument getFunctionArgument(CommonTree argNode, ArgumentDefinition definition, QueryModelFactory factory,\r\n            Map<String, Selector> selectors, Map<String, Column> columnMap, boolean inLike)\r\n    {\r\n        if (argNode.getType() == CMISParser.COLUMN_REF)\r\n        {\r\n            PropertyArgument arg = buildColumnReference(definition.getName(), argNode, factory, selectors, columnMap);\r\n            if (!arg.isQueryable())\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Column refers to unqueryable property \" + arg.getPropertyName());\r\n            }\r\n            if (!selectors.containsKey(arg.getSelector()))\r\n            {\r\n                throw new CmisInvalidArgumentException(\"No table with alias \" + arg.getSelector());\r\n            }\r\n            return arg;\r\n        } else if (argNode.getType() == CMISParser.ID)\r\n        {\r\n            String id = argNode.getText();\r\n            if (selectors.containsKey(id))\r\n            {\r\n                SelectorArgument arg = factory.createSelectorArgument(definition.getName(), id);\r\n                if (!arg.isQueryable())\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Selector is not queryable \" + arg.getSelector());\r\n                }\r\n                return arg;\r\n            } else\r\n            {\r\n                PropertyDefinitionWrapper propDef = cmisDictionaryService.findPropertyByQueryName(id);\r\n                if (propDef == null || !propDef.getPropertyDefinition().isQueryable())\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Column refers to unqueryable property \"\r\n                            + definition.getName());\r\n                }\r\n                PropertyArgument arg = factory.createPropertyArgument(definition.getName(), propDef\r\n                        .getPropertyDefinition().isQueryable(), propDef.getPropertyDefinition().isOrderable(), \"\",\r\n                        propDef.getPropertyId());\r\n                return arg;\r\n            }\r\n        } else if (argNode.getType() == CMISParser.PARAMETER)\r\n        {\r\n            ParameterArgument arg = factory.createParameterArgument(definition.getName(), argNode.getText());\r\n            if (!arg.isQueryable())\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Parameter is not queryable \" + arg.getParameterName());\r\n            }\r\n            return arg;\r\n        } else if (argNode.getType() == CMISParser.NUMERIC_LITERAL)\r\n        {\r\n            CommonTree literalNode = (CommonTree) argNode.getChild(0);\r\n            if (literalNode.getType() == CMISParser.FLOATING_POINT_LITERAL)\r\n            {\r\n                QName type = DataTypeDefinition.DOUBLE;\r\n                Number value = Double.parseDouble(literalNode.getText());\r\n                if (value.floatValue() == value.doubleValue())\r\n                {\r\n                    type = DataTypeDefinition.FLOAT;\r\n                    value = Float.valueOf(value.floatValue());\r\n                }\r\n                LiteralArgument arg = factory.createLiteralArgument(definition.getName(), type, value);\r\n                return arg;\r\n            } else if (literalNode.getType() == CMISParser.DECIMAL_INTEGER_LITERAL)\r\n            {\r\n                QName type = DataTypeDefinition.LONG;\r\n                Number value = Long.parseLong(literalNode.getText());\r\n                if (value.intValue() == value.longValue())\r\n                {\r\n                    type = DataTypeDefinition.INT;\r\n                    value = Integer.valueOf(value.intValue());\r\n                }\r\n                LiteralArgument arg = factory.createLiteralArgument(definition.getName(), type, value);\r\n                return arg;\r\n            } else\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Invalid numeric literal \" + literalNode.getText());\r\n            }\r\n        } else if (argNode.getType() == CMISParser.STRING_LITERAL)\r\n        {\r\n            String text = argNode.getChild(0).getText();\r\n            text = text.substring(1, text.length() - 1);\r\n            text = unescape(text, inLike ? EscapeMode.LIKE : EscapeMode.LITERAL);\r\n            LiteralArgument arg = factory.createLiteralArgument(definition.getName(), DataTypeDefinition.TEXT, text);\r\n            return arg;\r\n        } else if (argNode.getType() == CMISParser.DATETIME_LITERAL)\r\n        {\r\n            String text = argNode.getChild(0).getText();\r\n            text = text.substring(1, text.length() - 1);\r\n            StringBuilder builder = new StringBuilder();\r\n            if (text.endsWith(\"Z\"))\r\n            {\r\n                builder.append(text.substring(0, text.length() - 1));\r\n                builder.append(\"+0000\");\r\n            } else\r\n            {\r\n                if (text.charAt(text.length() - 3) != ':')\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Invalid datetime literal \" + text);\r\n                }\r\n                // remove TZ colon ....\r\n                builder.append(text.substring(0, text.length() - 3));\r\n                builder.append(text.substring(text.length() - 2, text.length()));\r\n            }\r\n            text = builder.toString();\r\n\r\n            SimpleDateFormat df = CachingDateFormat.getCmisSqlDatetimeFormat();\r\n            Date date;\r\n            try\r\n            {\r\n                date = df.parse(text);\r\n            } catch (ParseException e)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Invalid datetime literal \" + text);\r\n            }\r\n            // Convert back :-)\r\n            String alfrescoDate = DefaultTypeConverter.INSTANCE.convert(String.class, date);\r\n            LiteralArgument arg = factory.createLiteralArgument(definition.getName(), DataTypeDefinition.TEXT,\r\n                    alfrescoDate);\r\n            return arg;\r\n        } else if (argNode.getType() == CMISParser.BOOLEAN_LITERAL)\r\n        {\r\n            String text = argNode.getChild(0).getText();\r\n            if (text.equalsIgnoreCase(\"TRUE\") || text.equalsIgnoreCase(\"FALSE\"))\r\n            {\r\n                LiteralArgument arg = factory\r\n                        .createLiteralArgument(definition.getName(), DataTypeDefinition.TEXT, text);\r\n                return arg;\r\n            } else\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Invalid boolean literal \" + text);\r\n            }\r\n\r\n        } else if (argNode.getType() == CMISParser.LIST)\r\n        {\r\n            ArrayList<Argument> arguments = new ArrayList<Argument>();\r\n            for (int i = 0; i < argNode.getChildCount(); i++)\r\n            {\r\n                CommonTree arg = (CommonTree) argNode.getChild(i);\r\n                arguments.add(getFunctionArgument(arg, definition, factory, selectors, columnMap, inLike));\r\n            }\r\n            ListArgument arg = factory.createListArgument(definition.getName(), arguments);\r\n            if (!arg.isQueryable())\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Not all members of the list are queryable\");\r\n            }\r\n            return arg;\r\n        } else if (argNode.getType() == CMISParser.ANY)\r\n        {\r\n            LiteralArgument arg = factory.createLiteralArgument(definition.getName(), DataTypeDefinition.TEXT,\r\n                    argNode.getText());\r\n            return arg;\r\n        } else if (argNode.getType() == CMISParser.SINGLE_VALUED_PROPERTY)\r\n        {\r\n            LiteralArgument arg = factory.createLiteralArgument(definition.getName(), DataTypeDefinition.TEXT,\r\n                    argNode.getText());\r\n            return arg;\r\n        } else if (argNode.getType() == CMISParser.NOT)\r\n        {\r\n            LiteralArgument arg = factory.createLiteralArgument(definition.getName(), DataTypeDefinition.TEXT,\r\n                    argNode.getText());\r\n            return arg;\r\n        } else if (argNode.getType() == CMISParser.FUNCTION)\r\n        {\r\n            CommonTree functionNameNode = (CommonTree) argNode.getChild(0);\r\n            Function function = factory.getFunction(functionNameNode.getText());\r\n            if (function == null)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Unknown function: \" + functionNameNode.getText());\r\n            }\r\n            Collection<ArgumentDefinition> definitions = function.getArgumentDefinitions().values();\r\n            Map<String, Argument> functionArguments = new LinkedHashMap<String, Argument>();\r\n\r\n            int childIndex = 2;\r\n            for (ArgumentDefinition currentDefinition : definitions)\r\n            {\r\n                if (argNode.getChildCount() > childIndex + 1)\r\n                {\r\n                    CommonTree currentArgNode = (CommonTree) argNode.getChild(childIndex++);\r\n                    Argument arg = getFunctionArgument(currentArgNode, currentDefinition, factory, selectors,\r\n                            columnMap, inLike);\r\n                    functionArguments.put(arg.getName(), arg);\r\n                } else\r\n                {\r\n                    if (definition.isMandatory())\r\n                    {\r\n                        // throw new CmisInvalidArgumentException(\"Insufficient\r\n                        // aruments\r\n                        // for function \" + ((CommonTree)\r\n                        // functionNode.getChild(0)).getText() );\r\n                        break;\r\n                    } else\r\n                    {\r\n                        // ok\r\n                    }\r\n                }\r\n            }\r\n            FunctionArgument arg = factory.createFunctionArgument(definition.getName(), function, functionArguments);\r\n            if (!arg.isQueryable())\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Not all function arguments refer to orderable arguments: \"\r\n                        + arg.getFunction().getName());\r\n            }\r\n            return arg;\r\n        } else\r\n        {\r\n            throw new CmisInvalidArgumentException(\"Invalid function argument \" + argNode.getText());\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    private Source buildSource(CommonTree source, CapabilityJoin joinSupport, QueryModelFactory factory)\r\n    {\r\n        if (source.getChildCount() == 1)\r\n        {\r\n            // single table reference\r\n            CommonTree singleTableNode = (CommonTree) source.getChild(0);\r\n            if (singleTableNode.getType() == CMISParser.TABLE)\r\n            {\r\n                if (joinSupport == CapabilityJoin.NONE)\r\n                {\r\n                    throw new UnsupportedOperationException(\"Joins are not supported\");\r\n                }\r\n                CommonTree tableSourceNode = (CommonTree) singleTableNode.getFirstChildWithType(CMISParser.SOURCE);\r\n                return buildSource(tableSourceNode, joinSupport, factory);\r\n\r\n            }\r\n            if (singleTableNode.getType() != CMISParser.TABLE_REF)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Expecting TABLE_REF token but found \"\r\n                        + singleTableNode.getText());\r\n            }\r\n            String tableName = singleTableNode.getChild(0).getText();\r\n            String alias = \"\";\r\n            if (singleTableNode.getChildCount() > 1)\r\n            {\r\n                alias = singleTableNode.getChild(1).getText();\r\n            }\r\n\r\n            TypeDefinitionWrapper typeDef = cmisDictionaryService.findTypeByQueryName(tableName);\r\n            if (typeDef == null)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Type is unsupported in query: \" + tableName);\r\n            }\r\n            if (typeDef.getBaseTypeId() != BaseTypeId.CMIS_POLICY)\r\n            {\r\n                if (!typeDef.getTypeDefinition(false).isQueryable())\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Type is not queryable \" + tableName + \" -> \"\r\n                            + typeDef.getTypeId());\r\n                }\r\n            }\r\n            return factory.createSelector(typeDef.getAlfrescoClass(), alias);\r\n        } else\r\n        {\r\n            if (joinSupport == CapabilityJoin.NONE)\r\n            {\r\n                throw new UnsupportedOperationException(\"Joins are not supported\");\r\n            }\r\n            CommonTree singleTableNode = (CommonTree) source.getChild(0);\r\n            if (singleTableNode.getType() != CMISParser.TABLE_REF)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Expecting TABLE_REF token but found \"\r\n                        + singleTableNode.getText());\r\n            }\r\n            String tableName = singleTableNode.getChild(0).getText();\r\n            String alias = \"\";\r\n            if (singleTableNode.getChildCount() == 2)\r\n            {\r\n                alias = singleTableNode.getChild(1).getText();\r\n            }\r\n            TypeDefinitionWrapper typeDef = cmisDictionaryService.findTypeByQueryName(tableName);\r\n            if (typeDef == null)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Type is unsupported in query \" + tableName);\r\n            }\r\n            if (typeDef.getBaseTypeId() != BaseTypeId.CMIS_POLICY)\r\n            {\r\n                if (!typeDef.getTypeDefinition(false).isQueryable())\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"Type is not queryable \" + tableName + \" -> \"\r\n                            + typeDef.getTypeId());\r\n                }\r\n            }\r\n\r\n            Source lhs = factory.createSelector(typeDef.getAlfrescoClass(), alias);\r\n\r\n            List<CommonTree> list = (List<CommonTree>) (source.getChildren());\r\n            for (CommonTree joinNode : list)\r\n            {\r\n                if (joinNode.getType() == CMISParser.JOIN)\r\n                {\r\n                    CommonTree rhsSource = (CommonTree) joinNode.getFirstChildWithType(CMISParser.SOURCE);\r\n                    Source rhs = buildSource(rhsSource, joinSupport, factory);\r\n\r\n                    JoinType joinType = JoinType.INNER;\r\n                    CommonTree joinTypeNode = (CommonTree) joinNode.getFirstChildWithType(CMISParser.LEFT);\r\n                    if (joinTypeNode != null)\r\n                    {\r\n                        joinType = JoinType.LEFT;\r\n                    }\r\n\r\n                    if ((joinType == JoinType.LEFT) && (joinSupport == CapabilityJoin.INNERONLY))\r\n                    {\r\n                        throw new UnsupportedOperationException(\"Outer joins are not supported\");\r\n                    }\r\n\r\n                    Constraint joinCondition = null;\r\n                    CommonTree joinConditionNode = (CommonTree) joinNode.getFirstChildWithType(CMISParser.ON);\r\n                    if (joinConditionNode != null)\r\n                    {\r\n                        PropertyArgument arg1 = buildColumnReference(Equals.ARG_LHS,\r\n                                (CommonTree) joinConditionNode.getChild(0), factory, null, null);\r\n                        if (!lhs.getSelectors().containsKey(arg1.getSelector())\r\n                                && !rhs.getSelectors().containsKey(arg1.getSelector()))\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"No table with alias \" + arg1.getSelector());\r\n                        }\r\n                        CommonTree functionNameNode = (CommonTree) joinConditionNode.getChild(1);\r\n                        if (functionNameNode.getType() != CMISParser.EQUALS)\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Only Equi-join is supported \"\r\n                                    + functionNameNode.getText());\r\n                        }\r\n                        Function function = factory.getFunction(Equals.NAME);\r\n                        if (function == null)\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"Unknown function: \" + functionNameNode.getText());\r\n                        }\r\n                        PropertyArgument arg2 = buildColumnReference(Equals.ARG_RHS,\r\n                                (CommonTree) joinConditionNode.getChild(2), factory, null, null);\r\n                        if (!lhs.getSelectors().containsKey(arg2.getSelector())\r\n                                && !rhs.getSelectors().containsKey(arg2.getSelector()))\r\n                        {\r\n                            throw new CmisInvalidArgumentException(\"No table with alias \" + arg2.getSelector());\r\n                        }\r\n                        Map<String, Argument> functionArguments = new LinkedHashMap<String, Argument>();\r\n                        functionArguments.put(arg1.getName(), arg1);\r\n                        functionArguments.put(arg2.getName(), arg2);\r\n                        joinCondition = factory.createFunctionalConstraint(function, functionArguments);\r\n                    }\r\n\r\n                    Source join = factory.createJoin(lhs, rhs, joinType, joinCondition);\r\n                    lhs = join;\r\n                }\r\n            }\r\n\r\n            return lhs;\r\n\r\n        }\r\n    }\r\n\r\n    public PropertyArgument buildColumnReference(String argumentName, CommonTree columnReferenceNode,\r\n            QueryModelFactory factory, Map<String, Selector> selectors, Map<String, Column> columnMap)\r\n    {\r\n        String cmisPropertyName = columnReferenceNode.getChild(0).getText();\r\n        String qualifier = \"\";\r\n        if (columnReferenceNode.getChildCount() > 1)\r\n        {\r\n            qualifier = columnReferenceNode.getChild(1).getText();\r\n        }\r\n\r\n        if ((qualifier == \"\") && (columnMap != null))\r\n        {\r\n            Column column = columnMap.get(cmisPropertyName);\r\n            if (column != null)\r\n            {\r\n                // check for function type\r\n                if (column.getFunction().getName().equals(PropertyAccessor.NAME))\r\n                {\r\n                    PropertyArgument arg = (PropertyArgument) column.getFunctionArguments().get(\r\n                            PropertyAccessor.ARG_PROPERTY);\r\n                    cmisPropertyName = arg.getPropertyName();\r\n                    qualifier = arg.getSelector();\r\n                } else\r\n                {\r\n                    // TODO: should be able to return non property arguments\r\n                    // The implementation should throw out what it can not\r\n                    // support at build time.\r\n                    throw new CmisInvalidArgumentException(\r\n                            \"Complex column reference unsupported (only direct column references are currently supported) \"\r\n                                    + cmisPropertyName);\r\n                }\r\n            }\r\n        }\r\n\r\n        PropertyDefinitionWrapper propDef = cmisDictionaryService.findPropertyByQueryName(cmisPropertyName);\r\n        if (propDef == null)\r\n        {\r\n            throw new CmisInvalidArgumentException(\"Unknown column/property \" + cmisPropertyName);\r\n        }\r\n\r\n        if (selectors != null)\r\n        {\r\n            Selector selector = selectors.get(qualifier);\r\n            if (selector == null)\r\n            {\r\n                if ((qualifier.equals(\"\")) && (selectors.size() == 1))\r\n                {\r\n                    selector = selectors.get(selectors.keySet().iterator().next());\r\n                } else\r\n                {\r\n                    throw new CmisInvalidArgumentException(\"No selector for \" + qualifier);\r\n                }\r\n            }\r\n\r\n            TypeDefinitionWrapper typeDef = cmisDictionaryService.findTypeForClass(selector.getType(), validScopes);\r\n            if (typeDef == null)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Type unsupported in CMIS queries: \" + selector.getAlias());\r\n            }\r\n\r\n            // Check column/property applies to selector/type\r\n\r\n            if (typeDef.getPropertyById(propDef.getPropertyId()) == null)\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Invalid column for \"\r\n                        + typeDef.getTypeDefinition(false).getQueryName() + \".\" + cmisPropertyName);\r\n            }\r\n        }\r\n\r\n        if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n        {\r\n            if (!propDef.getPropertyDefinition().isQueryable())\r\n            {\r\n                throw new CmisInvalidArgumentException(\"Column is not queryable \" + qualifier + \".\" + cmisPropertyName);\r\n            }\r\n        }\r\n        return factory.createPropertyArgument(argumentName, propDef.getPropertyDefinition().isQueryable(), propDef\r\n                .getPropertyDefinition().isOrderable(), qualifier, propDef.getPropertyId());\r\n    }\r\n\r\n    private String unescape(String string, EscapeMode mode)\r\n    {\r\n        StringBuilder builder = new StringBuilder(string.length());\r\n\r\n        boolean lastWasEscape = false;\r\n\r\n        for (int i = 0; i < string.length(); i++)\r\n        {\r\n            char c = string.charAt(i);\r\n            if (lastWasEscape)\r\n            {\r\n\r\n                // Need to keep escaping for like as we have the same escaping\r\n                if (mode == EscapeMode.LIKE)\r\n                {\r\n                    // Like does its own escaping - so pass through \\ % and _\r\n                    if (c == '\\'')\r\n                    {\r\n                        builder.append(c);\r\n                    } else if (c == '%')\r\n                    {\r\n                        builder.append('\\\\');\r\n                        builder.append(c);\r\n                    } else if (c == '_')\r\n                    {\r\n                        builder.append('\\\\');\r\n                        builder.append(c);\r\n                    } else if (c == '\\\\')\r\n                    {\r\n                        builder.append('\\\\');\r\n                        builder.append(c);\r\n                    } else\r\n                    {\r\n                        throw new UnsupportedOperationException(\"Unsupported escape pattern in <\" + string\r\n                                + \"> at position \" + i);\r\n                    }\r\n                } else if (mode == EscapeMode.CONTAINS)\r\n                {\r\n                    if (options.getQueryMode() == CMISQueryMode.CMS_STRICT)\r\n                    {\r\n                        if (c == '\\'')\r\n                        {\r\n                            builder.append(c);\r\n                        } else if (c == '\\\\')\r\n                        {\r\n                            builder.append('\\\\');\r\n                            builder.append(c);\r\n                        }\r\n\r\n                        else\r\n                        {\r\n                            throw new UnsupportedOperationException(\"Unsupported escape pattern in <\" + string\r\n                                    + \"> at position \" + i);\r\n                        }\r\n                    } else\r\n                    {\r\n                        if (c == '\\'')\r\n                        {\r\n                            builder.append(c);\r\n                        } else\r\n                        {\r\n                            builder.append(c);\r\n                        }\r\n                    }\r\n                } else if (mode == EscapeMode.LITERAL)\r\n                {\r\n                    if (c == '\\'')\r\n                    {\r\n                        builder.append(c);\r\n                    } else if (c == '\\\\')\r\n                    {\r\n                        builder.append(c);\r\n                    } else\r\n                    {\r\n                        throw new UnsupportedOperationException(\"Unsupported escape pattern in <\" + string\r\n                                + \"> at position \" + i);\r\n\r\n                    }\r\n                } else\r\n                {\r\n                    throw new UnsupportedOperationException(\"Unsupported escape pattern in <\" + string\r\n                            + \"> at position \" + i);\r\n\r\n                }\r\n                lastWasEscape = false;\r\n            } else\r\n            {\r\n                if (c == '\\\\')\r\n                {\r\n                    lastWasEscape = true;\r\n                } else\r\n                {\r\n                    builder.append(c);\r\n                }\r\n            }\r\n        }\r\n        if (lastWasEscape)\r\n        {\r\n            throw new FTSQueryException(\"Escape character at end of string \" + string);\r\n        }\r\n\r\n        return builder.toString();\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"Alfresco/community-edition","sample_ref":"refs/heads/master","sample_path":"projects/data-model/source/java/org/alfresco/opencmis/search/CMISQueryParser.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c2897966537cf4f968c6ac698b182d0690604e61","size":"2730","content":"package com.pluscubed.velociraptor;\n\nimport android.app.Notification;\nimport android.app.PendingIntent;\nimport android.content.Intent;\nimport android.support.v4.app.NotificationManagerCompat;\nimport android.support.v4.app.RemoteInput;\nimport android.support.v7.app.NotificationCompat;\n\nimport com.pluscubed.velociraptor.utils.Utils;\n\npublic class AutoView implements SpeedLimitView {\n\n    public static final int NOTIFICATION_AUTO = 42;\n    public static final String NOTIFICATION_AUTO_TAG = \"auto_tag\";\n\n    private SpeedLimitService service;\n\n    private long autoTimestamp;\n    private NotificationManagerCompat notificationManager;\n\n    public AutoView(SpeedLimitService service) {\n        this.service = service;\n        notificationManager = NotificationManagerCompat.from(service);\n    }\n\n    @Override\n    public void changeConfig() {\n\n    }\n\n    @Override\n    public void setSpeed(int speed, int speedLimitWarning) {\n\n    }\n\n    @Override\n    public void setSpeeding(boolean speeding) {\n\n    }\n\n    @Override\n    public void setDebuggingText(String text) {\n\n    }\n\n    @Override\n    public void setLimitText(String text) {\n        String notificationMessage = service.getString(R.string.notif_android_auto_limit, Utils.getUnitText(service, text));\n\n        if (autoTimestamp == 0) {\n            autoTimestamp = System.currentTimeMillis();\n        }\n\n        RemoteInput input = new RemoteInput.Builder(\"key\").build();\n        PendingIntent emptyPendingIntent = PendingIntent.getActivity(service, 42, new Intent(), PendingIntent.FLAG_CANCEL_CURRENT);\n        NotificationCompat.CarExtender.UnreadConversation conv =\n                new NotificationCompat.CarExtender.UnreadConversation.Builder(notificationMessage)\n                        .setLatestTimestamp(autoTimestamp)\n                        .setReadPendingIntent(emptyPendingIntent)\n                        .setReplyAction(emptyPendingIntent, input)\n                        .addMessage(notificationMessage)\n                        .build();\n        Notification notification = new NotificationCompat.Builder(service)\n                .extend(new NotificationCompat.CarExtender().setUnreadConversation(conv))\n                .setContentTitle(service.getString(R.string.notif_android_auto_title))\n                .setContentText(notificationMessage)\n                .setSmallIcon(R.drawable.ic_speedometer)\n                .build();\n        notificationManager.notify(NOTIFICATION_AUTO_TAG, NOTIFICATION_AUTO, notification);\n    }\n\n    @Override\n    public void updatePrefs() {\n\n    }\n\n    @Override\n    public void stop() {\n        if (notificationManager != null) {\n            notificationManager.cancel(NOTIFICATION_AUTO_TAG, NOTIFICATION_AUTO);\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"plusCubed/velociraptor","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/pluscubed/velociraptor/AutoView.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"cfcb632e14f068336ceb49ba86f762d726c01f0e","size":"3024","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.clinical.forms.vtecolourconfig;\r\n\r\npublic final class FormInfo extends ims.framework.FormInfo\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\tpublic FormInfo(Integer formId)\r\n\t{\r\n\t\tsuper(formId);\r\n\t}\r\n\tpublic String getNamespaceName()\r\n\t{\r\n\t\treturn \"Clinical\";\r\n\t}\r\n\tpublic String getFormName()\r\n\t{\r\n\t\treturn \"VTEColourConfig\";\r\n\t}\r\n\tpublic int getWidth()\r\n\t{\r\n\t\treturn 272;\r\n\t}\r\n\tpublic int getHeight()\r\n\t{\r\n\t\treturn 168;\r\n\t}\r\n\tpublic String[] getContextVariables()\r\n\t{\r\n\t\treturn new String[] { \"_cv_Clinical.VTEColourConfig\" };\r\n\t}\r\n\tpublic String getLocalVariablesPrefix()\r\n\t{\r\n\t\treturn \"_lv_Clinical.VTEColourConfig.__internal_x_context__\" + String.valueOf(getFormId());\r\n\t}\r\n\tpublic ims.framework.FormInfo[] getComponentsFormInfo()\r\n\t{\r\n\t\tims.framework.FormInfo[] componentsInfo = new ims.framework.FormInfo[0];\r\n\t\treturn componentsInfo;\r\n\t}\r\n\tpublic String getImagePath()\r\n\t{\r\n\t\treturn \"\";\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Clinical/src/ims/clinical/forms/vtecolourconfig/FormInfo.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"0e61de7ed296687dac2b56e45006c89ab2a5b245","size":"39807","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// Template ver. 1.1.2 - Last modified on 19/10/2005 13:00 by Barbara Worwood\r\n\r\npackage ims.dto.client;\r\n\r\n\r\nimport java.util.HashMap;\r\n\r\npublic final class Sd_sess_avail implements ims.vo.ImsCloneable\r\n{\r\n\tprivate static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(Sd_sess_avail.class);\r\n\t\r\n\tprivate Sd_sess_availFilter lastGetFilter = null;\r\n\tprivate final String serviceName = \"SD_SESS_AVAIL\";\r\n\tprivate boolean listInProgress = false;\r\n\tprivate ims.dto.ResultData lastResultData = null;\r\n\t/**\r\n\t * Represents the Data Transfer Object Connection used for this client object.\r\n\t */ \r\n\tpublic ims.dto.Connection Connection = null;\r\n\t/**\r\n\t * Represents the filter used by the current Data Transfer Object.\r\n\t */ \r\n\tpublic Sd_sess_availFilter Filter = new Sd_sess_availFilter();\t\t\t\r\n\t/**\r\n\t * Represents the filter used by the current Data Transfer Object to Insert/Update data.\r\n\t */ \r\n\tpublic Sd_sess_availEditFilter EditFilter = new Sd_sess_availEditFilter();\r\n\t/**\r\n\t * Contains the data records for the current Data Transfer Object\r\n\t */ \r\n\tpublic Sd_sess_availCollection DataCollection = new Sd_sess_availCollection();\r\n\r\n\t/**\r\n\t * Creates a new Sd_sess_avail Data Transfer Object.\r\n\t */ \r\n\tpublic Sd_sess_avail(ims.dto.Connection connection)\r\n\t{\t\r\n\t\tthis.Connection = connection;\r\n\t}\r\n\t/**\r\n\t * Returns the last result data after an insert or an update call\r\n\t */\r\n\tpublic ims.dto.ResultData getLastResultData()\r\n\t{\r\n\t\treturn this.lastResultData;\r\n\t}\r\n\t/**\r\n\t * Creates a new copy of the current Data Transfer Object\r\n\t */\r\n\tpublic Object clone()\r\n\t{\r\n\t\treturn cloneObject();\r\n\t}\r\n\t/**\r\n\t * Creates a new typed copy of the current Data Transfer Object\r\n\t */\r\n\tpublic Sd_sess_avail cloneObject()\r\n\t{\r\n\t\tSd_sess_avail cloneObject = new Sd_sess_avail(Connection);\r\n\t\t\t\r\n\t\tif(Filter != null)\r\n\t\t\tcloneObject.Filter = Filter.cloneObject();\t\t\t\r\n\t\t\t\t\t\r\n\t\tif(lastGetFilter != null)\r\n\t\t\tcloneObject.lastGetFilter = lastGetFilter.cloneObject();\r\n\t\telse\r\n\t\t\tcloneObject.lastGetFilter = null;\r\n\t\t\t\t\r\n\t\tfor(int x = 0; x < DataCollection.count(); x++)\r\n\t\t{\r\n\t\t\tint index = cloneObject.DataCollection.add();\r\n\t\t\t\r\n\t\t\tcloneObject.DataCollection.get(index).Sess_dt = DataCollection.get(x).Sess_dt;\r\n\t\t\tcloneObject.DataCollection.get(index).Total_tm = DataCollection.get(x).Total_tm;\r\n\t\t\tcloneObject.DataCollection.get(index).Rem_tm = DataCollection.get(x).Rem_tm;\r\n\t\t\tcloneObject.DataCollection.get(index).Sessd_stat = DataCollection.get(x).Sessd_stat;\r\n\t\t\tcloneObject.DataCollection.get(index).Sessd_act_ind = DataCollection.get(x).Sessd_act_ind;\r\n\t\t\tcloneObject.DataCollection.get(index).Grp_id = DataCollection.get(x).Grp_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Activ_id = DataCollection.get(x).Activ_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Lo_id = DataCollection.get(x).Lo_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Lo_sessiond_id = DataCollection.get(x).Lo_sessiond_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Lo_act_ind = DataCollection.get(x).Lo_act_ind;\r\n\t\t\tcloneObject.DataCollection.get(index).Mc_id = DataCollection.get(x).Mc_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Act_id = DataCollection.get(x).Act_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Act_sessiond_id = DataCollection.get(x).Act_sessiond_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Action_act_ind = DataCollection.get(x).Action_act_ind;\r\n\t\t\tcloneObject.DataCollection.get(index).Max_apps = DataCollection.get(x).Max_apps;\r\n\t\t\tcloneObject.DataCollection.get(index).Rem_apps = DataCollection.get(x).Rem_apps;\r\n\t\t\tcloneObject.DataCollection.get(index).Session_id = DataCollection.get(x).Session_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Sessiond_id = DataCollection.get(x).Sessiond_id;\r\n\t\t\tcloneObject.DataCollection.get(index).Sessiond_ids = DataCollection.get(x).Sessiond_ids;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\treturn cloneObject;\r\n\t}\r\n\t/**\r\n\t * Returns the Imx version\r\n\t */\t\r\n\tpublic String getImxVersion()\r\n\t{\r\n\t\treturn \"$Revision: 1.1 $\";\r\n\t}\r\n\t/**\r\n\t * Returns the Imx name\r\n\t */\t\r\n\tpublic String getImxName()\r\n\t{\r\n\t\treturn \"Sd_sess_avail.imx\".toLowerCase();\r\n\t}\r\n\t/**\r\n\t * Returns the number of records using the specified filter. This method always returns a non null result. The ID field holds the count result (when greater or equal to zero) or the error number (when less than zero).\r\n\t */\r\n\tpublic ims.dto.Result count()\r\n\t{\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.Count\");\r\n\t\t\t\r\n\t\tint result = Connection.count(serviceName, encodeNASFilter());\r\n\t\tif(result >= 0)\r\n\t\t\treturn new ims.dto.Result(result, \"No error detected. The count result is held in the ID field\", \"DTO.Client.Sd_sess_avail.Count\");\r\n\t\t\t\t\r\n\t\treturn Connection.getLastError();\t\t\t\t\r\n\t}\t\t\r\n\t/**\r\n\t * Returns the list of records using the specified filter. Use maxRecords to limit the number of records returned. If the result returned is not null an error occured.\r\n\t */\r\n\tpublic ims.dto.Result list(int maxRecords)\r\n\t{\r\n\t\tif(maxRecords <= 0)\r\n\t\t\treturn list();\t\t\r\n\t\t\t\t\r\n\t\treturn list(false, maxRecords);\r\n\t}\t\r\n\t/**\r\n\t* Returns the list of records using the specified filter. If the result returned is not null an error occured.\r\n\t*/\r\n\tpublic ims.dto.Result list()\r\n\t{\t\r\n\t\treturn list(true, 0);\r\n\t}\t\t\t\t\r\n\t/**\r\n\t* Returns one record using the specified filter. If the result returned is not null an error occured.\r\n\t*/\r\n\tpublic ims.dto.Result get()\r\n\t{\t\r\n\t\tDataCollection.clear();\r\n\t\t\t\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.Get\");\r\n\t\t\t\r\n\t\tims.dto.Result result = Connection.get(serviceName, encodeNASFilter());\r\n\t\tif(result != null)\r\n\t\t\treturn result;\r\n\t\t\t\r\n\t\tlastGetFilter = Filter.cloneObject();\t\t\t\t\t\t\r\n\t\tdecodeNASMessageWithRepeatingGroups();\t\t\r\n\t\t\t\r\n\t\treturn null;\r\n\t}\t\r\n\t/**\r\n\t* Returns one record using the specified filter. If the result returned is not null an error occured.\r\n\t*/\r\n\tpublic ims.dto.Result getLast()\r\n\t{\t\r\n\t\tDataCollection.clear();\r\n\t\t\t\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.Get\");\r\n\t\t\t\r\n\t\tims.dto.Result result = Connection.getLast(serviceName, encodeNASFilter());\r\n\t\tif(result != null)\r\n\t\t\treturn result;\r\n\t\t\t\r\n\t\tlastGetFilter = Filter.cloneObject();\t\t\t\t\t\t\r\n\t\tdecodeNASMessageWithRepeatingGroups();\t\r\n\t\t\t\r\n\t\treturn null;\r\n\t}\t\t\t\t\t\r\n\t/**\r\n\t* Performs data validation prior to update. If the result returned is not null an error occured.\r\n\t*/\r\n\tpublic ims.dto.Result getForUpdate()\r\n\t{\t\t\t\t\t\t\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.GetForUpdate\");\r\n\t\t\t\t\t\t\t\r\n\t\tif(lastGetFilter == null)\t\r\n\t\t\treturn new ims.dto.Result(\"Last get method failed or not called\", \"DTO.Client.Sd_sess_avail.GetForUpdate\");\r\n\t\t\t\r\n\t\tims.dto.Result result = Connection.getForUpdate(serviceName, encodeNASFilter(lastGetFilter));\r\n\t\tif(result != null)\r\n\t\t\treturn result;\r\n\t\t\t\r\n\t\tif(Connection.countResponseItems(Connection.getValueAt(6)) == 0)\r\n\t\t\treturn null;\r\n\t\t\t\r\n\t\tDataCollection.clear();\t\r\n\t\tdecodeNASMessageWithRepeatingGroups();\r\n\t\t\t\t\r\n\t\treturn new ims.dto.Result(\"The data was changed by another user\", \"DTO.Client.Sd_sess_avail.GetForUpdate\");\r\n\t}\t\t\r\n\t/**\r\n\t* Inserts a new record. This method always returns a non null result. The ID field holds the Unique ID for the inserted record (when greater than zero) or the error number (when less than zero). If the ID is zero, the record was inserted but the server did not returned the Unique ID.\r\n\t*/\r\n\tpublic ims.dto.Result insert()\r\n\t{\r\n\t\tthis.lastResultData = null;\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.Insert\");\r\n\t\t\t\t\t\r\n\t\tif(DataCollection.count() == 0)\r\n\t\t\treturn new ims.dto.Result(\"No data to insert\", \"DTO.Client.Sd_sess_avail.Insert\");\r\n\t\t\t\r\n\t\tif(DataCollection.count() > 1)\r\n\t\t\treturn new ims.dto.Result(\"Multiple object insert not allowed\", \"DTO.Client.Sd_sess_avail.Insert\");\r\n\t\t\t\r\n\t\tims.dto.Result result = Connection.insert(serviceName, encodeNASMessage());\r\n\t\tif(result != null)\r\n\t\t\treturn result;\r\n\t\t\t\t\t\r\n\t\tint recordID = 0;\r\n\t\t\t\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\trecordID = new Integer(Connection.getValueAt(2)).intValue();\r\n\t\t}\r\n\t\tcatch(NumberFormatException ex)\r\n\t\t{\r\n\t\t\treturn new ims.dto.Result(\"Invalid record ID returned\", \"DTO.Client.Sd_sess_avail.Insert\");\r\n\t\t}\r\n\t\t\r\n\t\tdecodeResultData();\r\n\t\t\r\n\t\treturn new ims.dto.Result(recordID, \"No error. The ID of the new record is in the ID field\", \"DTO.Client.Sd_sess_avail.Insert\");\r\n\t}\r\n\t/**\r\n\t * Executes a specific action. This method always returns a non null result.\r\n\t */\r\n\tpublic ims.dto.Result executeAction(String action)\r\n\t{\r\n\t\tthis.lastResultData = null;\r\n\t\tif(action.length() == 0)\r\n\t\t\treturn new ims.dto.Result(\"Invalid action name\", \"DTO.Client.Sd_sess_avail.ExecuteAction\");\r\n\t\t\t\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.ExecuteAction\");\r\n\t\t\r\n\t\tif(DataCollection.count() == 0)\r\n\t\t\treturn new ims.dto.Result(\"Data container is empty\", \"DTO.Client.Sd_sess_avail.ExecuteAction\");\r\n\t\t\t\r\n\t\tif(DataCollection.count() > 1)\r\n\t\t\treturn new ims.dto.Result(\"Multiple objects are not allowed\", \"DTO.Client.Sd_sess_avail.ExecuteAction\");\r\n\t\t\t\r\n\t\tims.dto.Result result = Connection.executeAction(serviceName, encodeNASMessage(), action);\r\n\t\tif(result != null)\r\n\t\t\treturn result;\r\n\t\t\t\r\n\t\tdecodeResultData();\r\n\t\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\treturn new ims.dto.Result(new Integer(Connection.getValueAt(2)).intValue(), \"No error\", \"DTO.Client.Sd_sess_avail.ExecuteAction\");\t\r\n\t\t}\r\n\t\tcatch(NumberFormatException ex)\r\n\t\t{\r\n\t\t\treturn new ims.dto.Result(\"Invalid server response\", \"DTO.Client.Sd_sess_avail.ExecuteAction\");\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Transfers a record. If the result returned is not null an error occured.\r\n\t */\r\n\tpublic ims.dto.Result transferData(String action)\r\n\t{\r\n\t\tif(action.length() == 0)\r\n\t\t\treturn new ims.dto.Result(\"Invalid action name\", \"DTO.Client.Sd_sess_avail.TransferData\");\r\n\t\t\t\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.TransferData\");\r\n\t\t\r\n\t\tif(DataCollection.count() == 0)\r\n\t\t\treturn new ims.dto.Result(\"No data to transfer\", \"DTO.Client.Sd_sess_avail.TransferData\");\r\n\t\t\t\r\n\t\tif(DataCollection.count() > 1)\r\n\t\t\treturn new ims.dto.Result(\"Multiple objects not allowed\", \"DTO.Client.Sd_sess_avail.TransferData\");\r\n\t\t\t\r\n\t\tims.dto.Result result = Connection.transferData(serviceName, encodeNASMessage(), action.toUpperCase());\r\n\t\tif(result != null)\r\n\t\t\treturn result;\r\n\t\t\r\n\t\tDataCollection.clear();\r\n\t\tdecodeNASMessageWithRepeatingGroups();\t\r\n\t\t\r\n\t\treturn null;\r\n\t}\r\n\t/**\r\n\t * Updates a record. If the result returned is not null an error occured.\r\n\t */\r\n\tpublic ims.dto.Result update()\r\n\t{\t\t\t\r\n\t\tthis.lastResultData = null;\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.Update\");\r\n\t\t\t\t\r\n\t\tif(DataCollection.count() == 0)\r\n\t\t\treturn new ims.dto.Result(\"No data to update\", \"DTO.Client.Sd_sess_avail.Update\");\t\r\n\t\t\t\r\n\t\tif(DataCollection.count() > 1)\r\n\t\t\treturn new ims.dto.Result(\"Multiple object update not allowed\", \"DTO.Client.Sd_sess_avail.Update\");\r\n\t\t\t\t\t\r\n\t\tims.dto.Result result = Connection.update(serviceName, encodeNASMessage());\r\n\t\tif(result != null)\r\n\t\t\treturn result;\r\n\t\t\t\r\n\t\tdecodeResultData();\r\n\t\t\t\r\n\t\treturn null;\r\n\t}\r\n\t\t\t\r\n\tprivate ims.dto.Result stopList()\r\n\t{\r\n\t\tif(!listInProgress)\r\n\t\t\treturn new ims.dto.Result(\"No active list running\", \"DTO.Client.Sd_sess_avail.StopList\");\r\n\t\t\t\t\r\n\t\tlistInProgress = false;\t\t\t\t\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\tprivate ims.dto.Result nextList()\r\n\t{\t\t\t\t\r\n\t\tlogger.debug(\"Sd_sess_avail nextList Entry\");\r\n\t\tims.dto.Result result = Connection.nextList(serviceName);\r\n\t\tif(result != null)\r\n\t\t\treturn result;\r\n\t\tlogger.debug(\"Sd_sess_avail After NextList \");\r\n\t\t\t\t\r\n\t\tdecodeNASMessage();\t\t\r\n\t\tlogger.debug(\"Sd_sess_avail After decode NasMsg NextList\");\r\n\t\treturn null;\r\n\t}\r\n\t\t\r\n\tprivate boolean canContinueToList(boolean loadAllRecords, int maxRecords)\r\n\t{\r\n\t\tif(!listInProgress)\r\n\t\t\treturn false;\t\t\t\t\r\n\t\tif(loadAllRecords)\r\n\t\t\treturn true;\t\t\t\r\n\t\treturn DataCollection.count() < maxRecords;\r\n\t}\r\n\t\r\n\tprivate ims.dto.Result list(boolean loadAllRecords, int maxRecords)\r\n\t{\t\r\n\t\tDataCollection.clear();\r\n\t\t\t\r\n\t\tims.dto.Result reLoginResult = Connection.reLogin();\r\n\t\tif(reLoginResult != null)\r\n\t\t\treturn new ims.dto.Result(reLoginResult.getMessage(), \"DTO.Client.Sd_sess_avail.List\");\r\n\t\t\t\t\t\t\t\r\n\t\tlistInProgress = true;\t\r\n\t\tlogger.debug(\"Sd_sess_avail Before List\");\r\n\t\t\r\n\t\tims.dto.Result result = Connection.list(serviceName, encodeNASFilter());\r\n\t\tif(result != null)\r\n\t\t{\r\n\t\t\tlistInProgress = false;\r\n\t\t\tif(result.getId() == -2) // NAS list empty\r\n\t\t\t\treturn null;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t\t\t\t\r\n\t\tlogger.debug(\"Sd_sess_avail After List\");\r\n\t\t\r\n\t\tif(decodeNASMessage() == 0)\r\n\t\t{\r\n\t\t\tlistInProgress = false;\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tlogger.debug(\"Sd_sess_avail After Parse Message\");\r\n\t\t\r\n\t\t\t\t\t\t\r\n\t\tims.dto.Result execResult = null;\r\n\t\twhile(execResult == null && canContinueToList(loadAllRecords, maxRecords))\r\n\t\t\texecResult = nextList();\r\n\t\t\t\t\t\t\r\n\t\tlistInProgress = false;\r\n\r\n\t\tif(execResult != null)\r\n\t\t{ \r\n\t\t\tif(execResult.getId() != -3) \r\n\t\t\t{\r\n\t\t\t\tConnection.stopList(serviceName);\r\n\t\t\t\treturn execResult;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tConnection.stopList(serviceName);\r\n\t\treturn null; \r\n\t}\t\r\n\r\n\tprivate String encodeNASFilter()\r\n\t{\r\n\t\treturn encodeNASFilter(Filter);\r\n\t}\r\n\tprivate String encodeNASFilter(Sd_sess_availFilter filter)\r\n\t{\r\n\t\tif(filter == null)\r\n\t\t\treturn \"\";\r\n\t\t\t\r\n\t\tStringBuffer filterString = new StringBuffer();\r\n\t\t\r\n\t\tif(Filter.Sess_dt != null && filter.Sess_dt.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"SESS_DT\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Sess_dt);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Total_tm != null && filter.Total_tm.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"TOTAL_TM\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Total_tm);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Rem_tm != null && filter.Rem_tm.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"REM_TM\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Rem_tm);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Sessd_stat != null && filter.Sessd_stat.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"SESSD_STAT\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Sessd_stat);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Sessd_act_ind != null && filter.Sessd_act_ind.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"SESSD_ACT_IND\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Sessd_act_ind);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Grp_id != null && filter.Grp_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"GRP_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Grp_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Activ_id != null && filter.Activ_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"ACTIV_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Activ_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Lo_id != null && filter.Lo_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"LO_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Lo_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Lo_sessiond_id != null && filter.Lo_sessiond_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"LO_SESSIOND_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Lo_sessiond_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Lo_act_ind != null && filter.Lo_act_ind.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"LO_ACT_IND\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Lo_act_ind);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Mc_id != null && filter.Mc_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"MC_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Mc_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Act_id != null && filter.Act_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"ACT_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Act_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Act_sessiond_id != null && filter.Act_sessiond_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"ACT_SESSIOND_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Act_sessiond_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Action_act_ind != null && filter.Action_act_ind.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"ACTION_ACT_IND\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Action_act_ind);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Max_apps != null && filter.Max_apps.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"MAX_APPS\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Max_apps);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Rem_apps != null && filter.Rem_apps.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"REM_APPS\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Rem_apps);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Session_id != null && filter.Session_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"SESSION_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Session_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Sessiond_id != null && filter.Sessiond_id.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"SESSIOND_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Sessiond_id);\r\n\t\t}\r\n\t\t\r\n\t\tif(Filter.Sessiond_ids != null && filter.Sessiond_ids.length()> 0)\r\n\t\t{\r\n\t\t\tif(filterString.length() > 0)\r\n\t\t\t\tfilterString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tfilterString.append(\"SESSIOND_IDS\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + filter.Sessiond_ids);\r\n\t\t}\r\n\t\t\r\n\t\treturn filterString.toString();\t\r\n\t}\r\n\t\r\n\tprivate String encodeNASMessage()\r\n\t{\r\n\t\tStringBuffer dataString = new StringBuffer();\r\n\t\tif(DataCollection.count() == 0)\r\n\t\t\treturn dataString.toString();\r\n\t\t\t\r\n\t\tSd_sess_availRecord data = (Sd_sess_availRecord)DataCollection.get(0);\r\n\t\t\r\n\t\tif(EditFilter.IncludeSess_dt)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"SESS_DT\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Sess_dt));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeTotal_tm)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"TOTAL_TM\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Total_tm));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeRem_tm)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"REM_TM\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Rem_tm));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeSessd_stat)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"SESSD_STAT\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Sessd_stat));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeSessd_act_ind)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"SESSD_ACT_IND\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Sessd_act_ind));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeGrp_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"GRP_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Grp_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeActiv_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"ACTIV_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Activ_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeLo_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"LO_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Lo_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeLo_sessiond_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"LO_SESSIOND_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Lo_sessiond_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeLo_act_ind)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"LO_ACT_IND\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Lo_act_ind));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeMc_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"MC_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Mc_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeAct_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"ACT_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Act_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeAct_sessiond_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"ACT_SESSIOND_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Act_sessiond_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeAction_act_ind)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"ACTION_ACT_IND\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Action_act_ind));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeMax_apps)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"MAX_APPS\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Max_apps));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeRem_apps)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"REM_APPS\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Rem_apps));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeSession_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"SESSION_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Session_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeSessiond_id)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"SESSIOND_ID\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Sessiond_id));\r\n\t\t}\r\n\t\t\r\n\t\tif(EditFilter.IncludeSessiond_ids)\r\n\t\t{\r\n\t\t\tif(dataString.length() > 0)\r\n\t\t\t\tdataString.append(ims.dto.NASMessageCodes.PAIRSEPARATOR);\r\n\t\t\tdataString.append(\"SESSIOND_IDS\" + ims.dto.NASMessageCodes.ATTRIBUTEVALUESEPARATOR + Connection.encodeFieldValue(data.Sessiond_ids));\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t\t\r\n\t\treturn dataString.toString();\t\r\n\t}\r\n\t\r\n\tprivate int decodeNASMessage()\r\n\t{\r\n\t\tString[] items = Connection.getResponseItems(Connection.getValueAt(6));\r\n\t\tif(items == null)\r\n\t\t\treturn 0;\r\n\t\tint records = items.length;\r\n\t\tif(records == 0)\r\n\t\t\treturn 0;\r\n\t\t\t\t\t\r\n\t\tfor(int x = 0; x < records; x++)\r\n\t\t{\r\n\t\t\tSd_sess_availRecord record = new Sd_sess_availRecord();\r\n\t\t\tHashMap valueItems = Connection.splitResponseItemToMap(items[x]);\r\n\t\t\t\r\n\t\t\trecord.Sess_dt = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESS_DT\"));\r\n\t\t\trecord.Total_tm = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"TOTAL_TM\"));\r\n\t\t\trecord.Rem_tm = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"REM_TM\"));\r\n\t\t\trecord.Sessd_stat = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSD_STAT\"));\r\n\t\t\trecord.Sessd_act_ind = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSD_ACT_IND\"));\r\n\t\t\trecord.Grp_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"GRP_ID\"));\r\n\t\t\trecord.Activ_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"ACTIV_ID\"));\r\n\t\t\trecord.Lo_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"LO_ID\"));\r\n\t\t\trecord.Lo_sessiond_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"LO_SESSIOND_ID\"));\r\n\t\t\trecord.Lo_act_ind = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"LO_ACT_IND\"));\r\n\t\t\trecord.Mc_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"MC_ID\"));\r\n\t\t\trecord.Act_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"ACT_ID\"));\r\n\t\t\trecord.Act_sessiond_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"ACT_SESSIOND_ID\"));\r\n\t\t\trecord.Action_act_ind = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"ACTION_ACT_IND\"));\r\n\t\t\trecord.Max_apps = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"MAX_APPS\"));\r\n\t\t\trecord.Rem_apps = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"REM_APPS\"));\r\n\t\t\trecord.Session_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSION_ID\"));\r\n\t\t\trecord.Sessiond_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSIOND_ID\"));\r\n\t\t\trecord.Sessiond_ids = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSIOND_IDS\"));\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\tDataCollection.add(record);\r\n\t\t}\t\r\n\t\t\r\n\t\treturn records;\r\n\t}\r\n\tprivate void decodeResultData()\r\n\t{\r\n\t\tthis.lastResultData = null;\r\n\t\tString[] items = Connection.getResponseItems(Connection.getValueAt(6));\r\n\t\tif(items == null)\r\n\t\t\treturn;\r\n\t\tint records = items.length;\r\n\t\tif(records == 0)\r\n\t\t\treturn;\r\n\t\t\r\n\t\tString[] valueItems = Connection.splitResponseItem(items[0]);\r\n\t\t\r\n\t\tthis.lastResultData = new ims.dto.ResultData();\r\n\t\tString attName = \"\";\r\n\t\tfor(int x = 0; x < valueItems.length; x++)\r\n\t\t{\r\n\t\t\tattName = Connection.getAttributeName(valueItems[x]);\r\n\t\t\tthis.lastResultData.add(attName, Connection.getValueFor(valueItems, attName));\r\n\t\t}\r\n\t}\r\n\tprivate int decodeNASMessageWithRepeatingGroups()\r\n\t{\r\n\t\tString[] items = Connection.getResponseItems(Connection.getValueAt(6));\r\n\t\tif(items == null)\r\n\t\t\treturn 0;\r\n\t\tint records = items.length;\r\n\t\tif(records == 0)\r\n\t\t\treturn 0;\r\n\t\t\t\r\n\t\tint recCount = 0;\r\n\t\tint rgCount = 0;\r\n\t\t\t\t\t\r\n\t\tfor(int x = 0; x < records; x++)\r\n\t\t{\r\n\t\t\tSd_sess_availRecord record = new Sd_sess_availRecord();\r\n\t\t\tString[] valueItems = Connection.splitResponseItem(items[x]);\r\n\t\t\t\r\n\t\t\trecord.Sess_dt = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESS_DT\"));\r\n\t\t\trecord.Total_tm = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"TOTAL_TM\"));\r\n\t\t\trecord.Rem_tm = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"REM_TM\"));\r\n\t\t\trecord.Sessd_stat = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSD_STAT\"));\r\n\t\t\trecord.Sessd_act_ind = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSD_ACT_IND\"));\r\n\t\t\trecord.Grp_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"GRP_ID\"));\r\n\t\t\trecord.Activ_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"ACTIV_ID\"));\r\n\t\t\trecord.Lo_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"LO_ID\"));\r\n\t\t\trecord.Lo_sessiond_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"LO_SESSIOND_ID\"));\r\n\t\t\trecord.Lo_act_ind = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"LO_ACT_IND\"));\r\n\t\t\trecord.Mc_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"MC_ID\"));\r\n\t\t\trecord.Act_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"ACT_ID\"));\r\n\t\t\trecord.Act_sessiond_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"ACT_SESSIOND_ID\"));\r\n\t\t\trecord.Action_act_ind = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"ACTION_ACT_IND\"));\r\n\t\t\trecord.Max_apps = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"MAX_APPS\"));\r\n\t\t\trecord.Rem_apps = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"REM_APPS\"));\r\n\t\t\trecord.Session_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSION_ID\"));\r\n\t\t\trecord.Sessiond_id = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSIOND_ID\"));\r\n\t\t\trecord.Sessiond_ids = Connection.decodeFieldValue(Connection.getValueFor(valueItems, \"SESSIOND_IDS\"));\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tDataCollection.add(record);\r\n\t\t}\t\r\n\t\t\r\n\t\treturn records;\r\n\t}\r\n\t\r\n\tpublic final class Sd_sess_availCollection\r\n\t{\r\n\t\tprivate java.util.ArrayList recordCollection = new java.util.ArrayList();\r\n\t\t\r\n\t\tpublic int add()\r\n\t\t{\r\n\t\t\tSd_sess_availRecord newRecord = new Sd_sess_availRecord();\r\n\t\t\trecordCollection.add(newRecord);\r\n\t\t\treturn count() - 1;\r\n\t\t}\r\n\t\tpublic int add(Sd_sess_availRecord record)\r\n\t\t{\r\n\t\t\trecordCollection.add(record);\r\n\t\t\treturn count() - 1;\r\n\t\t}\r\n\t\tpublic void clear()\r\n\t\t{\r\n\t\t\trecordCollection.clear();\r\n\t\t}\r\n\t\tpublic int count()\r\n\t\t{\r\n\t\t\treturn recordCollection.size();\r\n\t\t}\r\n\t\tpublic Sd_sess_availRecord get(int index)\r\n\t\t{\r\n\t\t\treturn (Sd_sess_availRecord)recordCollection.get(index);\r\n\t\t}\r\n\t\tpublic void remove(int index)\r\n\t\t{\r\n\t\t\trecordCollection.remove(index);\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic final class Sd_sess_availRecord\r\n\t{\r\n\t\tpublic String Sess_dt = \"\";\r\n\t\tpublic String Total_tm = \"\";\r\n\t\tpublic String Rem_tm = \"\";\r\n\t\tpublic String Sessd_stat = \"\";\r\n\t\tpublic String Sessd_act_ind = \"\";\r\n\t\tpublic String Grp_id = \"\";\r\n\t\tpublic String Activ_id = \"\";\r\n\t\tpublic String Lo_id = \"\";\r\n\t\tpublic String Lo_sessiond_id = \"\";\r\n\t\tpublic String Lo_act_ind = \"\";\r\n\t\tpublic String Mc_id = \"\";\r\n\t\tpublic String Act_id = \"\";\r\n\t\tpublic String Act_sessiond_id = \"\";\r\n\t\tpublic String Action_act_ind = \"\";\r\n\t\tpublic String Max_apps = \"\";\r\n\t\tpublic String Rem_apps = \"\";\r\n\t\tpublic String Session_id = \"\";\r\n\t\tpublic String Sessiond_id = \"\";\r\n\t\tpublic String Sessiond_ids = \"\";\r\n\t\t\t\t\r\n\t\t\r\n\t\tpublic void clear()\r\n\t\t{\r\n\t\t\tSess_dt = \"\";\r\n\t\t\tTotal_tm = \"\";\r\n\t\t\tRem_tm = \"\";\r\n\t\t\tSessd_stat = \"\";\r\n\t\t\tSessd_act_ind = \"\";\r\n\t\t\tGrp_id = \"\";\r\n\t\t\tActiv_id = \"\";\r\n\t\t\tLo_id = \"\";\r\n\t\t\tLo_sessiond_id = \"\";\r\n\t\t\tLo_act_ind = \"\";\r\n\t\t\tMc_id = \"\";\r\n\t\t\tAct_id = \"\";\r\n\t\t\tAct_sessiond_id = \"\";\r\n\t\t\tAction_act_ind = \"\";\r\n\t\t\tMax_apps = \"\";\r\n\t\t\tRem_apps = \"\";\r\n\t\t\tSession_id = \"\";\r\n\t\t\tSessiond_id = \"\";\r\n\t\t\tSessiond_ids = \"\";\r\n\t\t\t\r\n\t\t}\t\t\r\n\t}\r\n\t\t\r\n\t\t\r\n\tpublic final class Sd_sess_availFilter\r\n\t{\t\t\t\r\n\t\tpublic String Sess_dt = \"\";\r\n\t\tpublic String Total_tm = \"\";\r\n\t\tpublic String Rem_tm = \"\";\r\n\t\tpublic String Sessd_stat = \"\";\r\n\t\tpublic String Sessd_act_ind = \"\";\r\n\t\tpublic String Grp_id = \"\";\r\n\t\tpublic String Activ_id = \"\";\r\n\t\tpublic String Lo_id = \"\";\r\n\t\tpublic String Lo_sessiond_id = \"\";\r\n\t\tpublic String Lo_act_ind = \"\";\r\n\t\tpublic String Mc_id = \"\";\r\n\t\tpublic String Act_id = \"\";\r\n\t\tpublic String Act_sessiond_id = \"\";\r\n\t\tpublic String Action_act_ind = \"\";\r\n\t\tpublic String Max_apps = \"\";\r\n\t\tpublic String Rem_apps = \"\";\r\n\t\tpublic String Session_id = \"\";\r\n\t\tpublic String Sessiond_id = \"\";\r\n\t\tpublic String Sessiond_ids = \"\";\r\n\t\t\r\n\t\tpublic void clear()\r\n\t\t{\t\t\t\t\r\n\t\t\tSess_dt = \"\";\r\n\t\t\tTotal_tm = \"\";\r\n\t\t\tRem_tm = \"\";\r\n\t\t\tSessd_stat = \"\";\r\n\t\t\tSessd_act_ind = \"\";\r\n\t\t\tGrp_id = \"\";\r\n\t\t\tActiv_id = \"\";\r\n\t\t\tLo_id = \"\";\r\n\t\t\tLo_sessiond_id = \"\";\r\n\t\t\tLo_act_ind = \"\";\r\n\t\t\tMc_id = \"\";\r\n\t\t\tAct_id = \"\";\r\n\t\t\tAct_sessiond_id = \"\";\r\n\t\t\tAction_act_ind = \"\";\r\n\t\t\tMax_apps = \"\";\r\n\t\t\tRem_apps = \"\";\r\n\t\t\tSession_id = \"\";\r\n\t\t\tSessiond_id = \"\";\r\n\t\t\tSessiond_ids = \"\";\r\n\t\t}\t\r\n\t\tpublic Sd_sess_availFilter cloneObject()\r\n\t\t{\r\n\t\t\tSd_sess_availFilter newFilter = new Sd_sess_availFilter();\r\n\t\t\t\r\n\t\t\tnewFilter.Sess_dt = this.Sess_dt;\r\n\t\t\tnewFilter.Total_tm = this.Total_tm;\r\n\t\t\tnewFilter.Rem_tm = this.Rem_tm;\r\n\t\t\tnewFilter.Sessd_stat = this.Sessd_stat;\r\n\t\t\tnewFilter.Sessd_act_ind = this.Sessd_act_ind;\r\n\t\t\tnewFilter.Grp_id = this.Grp_id;\r\n\t\t\tnewFilter.Activ_id = this.Activ_id;\r\n\t\t\tnewFilter.Lo_id = this.Lo_id;\r\n\t\t\tnewFilter.Lo_sessiond_id = this.Lo_sessiond_id;\r\n\t\t\tnewFilter.Lo_act_ind = this.Lo_act_ind;\r\n\t\t\tnewFilter.Mc_id = this.Mc_id;\r\n\t\t\tnewFilter.Act_id = this.Act_id;\r\n\t\t\tnewFilter.Act_sessiond_id = this.Act_sessiond_id;\r\n\t\t\tnewFilter.Action_act_ind = this.Action_act_ind;\r\n\t\t\tnewFilter.Max_apps = this.Max_apps;\r\n\t\t\tnewFilter.Rem_apps = this.Rem_apps;\r\n\t\t\tnewFilter.Session_id = this.Session_id;\r\n\t\t\tnewFilter.Sessiond_id = this.Sessiond_id;\r\n\t\t\tnewFilter.Sessiond_ids = this.Sessiond_ids;\r\n\t\t\t\r\n\t\t\treturn newFilter;\r\n\t\t}\r\n\t}\r\n\tpublic final class Sd_sess_availEditFilter\r\n\t{\t\t\t\r\n\t\tpublic boolean IncludeSess_dt = true;\r\n\t\tpublic boolean IncludeTotal_tm = true;\r\n\t\tpublic boolean IncludeRem_tm = true;\r\n\t\tpublic boolean IncludeSessd_stat = true;\r\n\t\tpublic boolean IncludeSessd_act_ind = true;\r\n\t\tpublic boolean IncludeGrp_id = true;\r\n\t\tpublic boolean IncludeActiv_id = true;\r\n\t\tpublic boolean IncludeLo_id = true;\r\n\t\tpublic boolean IncludeLo_sessiond_id = true;\r\n\t\tpublic boolean IncludeLo_act_ind = true;\r\n\t\tpublic boolean IncludeMc_id = true;\r\n\t\tpublic boolean IncludeAct_id = true;\r\n\t\tpublic boolean IncludeAct_sessiond_id = true;\r\n\t\tpublic boolean IncludeAction_act_ind = true;\r\n\t\tpublic boolean IncludeMax_apps = true;\r\n\t\tpublic boolean IncludeRem_apps = true;\r\n\t\tpublic boolean IncludeSession_id = true;\r\n\t\tpublic boolean IncludeSessiond_id = true;\r\n\t\tpublic boolean IncludeSessiond_ids = true;\r\n\t\t\r\n\t\tpublic void includeAll()\r\n\t\t{\t\t\t\t\r\n\t\t\tIncludeSess_dt = true;\r\n\t\t\tIncludeTotal_tm = true;\r\n\t\t\tIncludeRem_tm = true;\r\n\t\t\tIncludeSessd_stat = true;\r\n\t\t\tIncludeSessd_act_ind = true;\r\n\t\t\tIncludeGrp_id = true;\r\n\t\t\tIncludeActiv_id = true;\r\n\t\t\tIncludeLo_id = true;\r\n\t\t\tIncludeLo_sessiond_id = true;\r\n\t\t\tIncludeLo_act_ind = true;\r\n\t\t\tIncludeMc_id = true;\r\n\t\t\tIncludeAct_id = true;\r\n\t\t\tIncludeAct_sessiond_id = true;\r\n\t\t\tIncludeAction_act_ind = true;\r\n\t\t\tIncludeMax_apps = true;\r\n\t\t\tIncludeRem_apps = true;\r\n\t\t\tIncludeSession_id = true;\r\n\t\t\tIncludeSessiond_id = true;\r\n\t\t\tIncludeSessiond_ids = true;\r\n\t\t}\t\r\n\t\tpublic void excludeAll()\r\n\t\t{\t\t\t\t\r\n\t\t\tIncludeSess_dt = false;\r\n\t\t\tIncludeTotal_tm = false;\r\n\t\t\tIncludeRem_tm = false;\r\n\t\t\tIncludeSessd_stat = false;\r\n\t\t\tIncludeSessd_act_ind = false;\r\n\t\t\tIncludeGrp_id = false;\r\n\t\t\tIncludeActiv_id = false;\r\n\t\t\tIncludeLo_id = false;\r\n\t\t\tIncludeLo_sessiond_id = false;\r\n\t\t\tIncludeLo_act_ind = false;\r\n\t\t\tIncludeMc_id = false;\r\n\t\t\tIncludeAct_id = false;\r\n\t\t\tIncludeAct_sessiond_id = false;\r\n\t\t\tIncludeAction_act_ind = false;\r\n\t\t\tIncludeMax_apps = false;\r\n\t\t\tIncludeRem_apps = false;\r\n\t\t\tIncludeSession_id = false;\r\n\t\t\tIncludeSessiond_id = false;\r\n\t\t\tIncludeSessiond_ids = false;\r\n\t\t}\r\n\t\tpublic Sd_sess_availEditFilter cloneObject()\r\n\t\t{\r\n\t\t\tSd_sess_availEditFilter newEditFilter = new Sd_sess_availEditFilter();\r\n\t\t\t\r\n\t\t\tnewEditFilter.IncludeSess_dt = this.IncludeSess_dt;\r\n\t\t\tnewEditFilter.IncludeTotal_tm = this.IncludeTotal_tm;\r\n\t\t\tnewEditFilter.IncludeRem_tm = this.IncludeRem_tm;\r\n\t\t\tnewEditFilter.IncludeSessd_stat = this.IncludeSessd_stat;\r\n\t\t\tnewEditFilter.IncludeSessd_act_ind = this.IncludeSessd_act_ind;\r\n\t\t\tnewEditFilter.IncludeGrp_id = this.IncludeGrp_id;\r\n\t\t\tnewEditFilter.IncludeActiv_id = this.IncludeActiv_id;\r\n\t\t\tnewEditFilter.IncludeLo_id = this.IncludeLo_id;\r\n\t\t\tnewEditFilter.IncludeLo_sessiond_id = this.IncludeLo_sessiond_id;\r\n\t\t\tnewEditFilter.IncludeLo_act_ind = this.IncludeLo_act_ind;\r\n\t\t\tnewEditFilter.IncludeMc_id = this.IncludeMc_id;\r\n\t\t\tnewEditFilter.IncludeAct_id = this.IncludeAct_id;\r\n\t\t\tnewEditFilter.IncludeAct_sessiond_id = this.IncludeAct_sessiond_id;\r\n\t\t\tnewEditFilter.IncludeAction_act_ind = this.IncludeAction_act_ind;\r\n\t\t\tnewEditFilter.IncludeMax_apps = this.IncludeMax_apps;\r\n\t\t\tnewEditFilter.IncludeRem_apps = this.IncludeRem_apps;\r\n\t\t\tnewEditFilter.IncludeSession_id = this.IncludeSession_id;\r\n\t\t\tnewEditFilter.IncludeSessiond_id = this.IncludeSessiond_id;\r\n\t\t\tnewEditFilter.IncludeSessiond_ids = this.IncludeSessiond_ids;\r\n\t\t\t\r\n\t\t\treturn newEditFilter;\r\n\t\t}\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/DTOClients/src/ims/dto/client/Sd_sess_avail.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"378de8a5af5209075c23acdca99b4332cf25bf54","size":"2936","content":"package fr.neraud.padlistener.provider.descriptor;\n\nimport android.content.ContentResolver;\nimport android.content.UriMatcher;\nimport android.net.Uri;\nimport android.provider.BaseColumns;\n\n/**\n * Descriptor for the PlayerMonsterProvider\n *\n * @author Neraud\n */\npublic class CapturedPlayerMonsterDescriptor {\n\n\tpublic static final String TABLE_NAME = \"player_monster\";\n\tprivate static final String AUTHORITY = \"fr.neraud.padlistener.provider.player_monster\";\n\tprivate static final String BASE_PATH = \"player_monster\";\n\n\tprivate static final UriMatcher URI_MATCHER = buildUriMatcher();\n\n\t/**\n\t * Paths used by the StatusProvider\n\t *\n\t * @author Neraud\n\t */\n\tpublic enum Paths {\n\n\t\tALL(1, BASE_PATH, ContentResolver.CURSOR_DIR_BASE_TYPE + \"/vnd.fr.neraud.padlistener.player_monster\"),\n\t\tALL_WITH_INFO(2, BASE_PATH + \"/withInfo\", ContentResolver.CURSOR_DIR_BASE_TYPE\n\t\t\t\t+ \"/vnd.fr.neraud.padlistener.player_monster_with_info\");\n\n\t\tprivate final int id;\n\t\tprivate final String path;\n\t\tprivate final String contentType;\n\n\t\tprivate Paths(int id, String path, String contentType) {\n\t\t\tthis.id = id;\n\t\t\tthis.path = path;\n\t\t\tthis.contentType = contentType;\n\t\t}\n\n\t\tpublic String getContentType() {\n\t\t\treturn contentType;\n\t\t}\n\t}\n\n\t/**\n\t * Fields used by the PlayerMonsterProvider\n\t *\n\t * @author Neraud\n\t */\n\tpublic enum Fields implements IField {\n\n\t\tCARD_ID(BaseColumns._ID),\n\t\tMONSTER_ID_JP(\"monster_id_jp\"),\n\t\tEXP(\"exp\"),\n\t\tLEVEL(\"level\"),\n\t\tSKILL_LEVEL(\"skillLevel\"),\n\t\tPLUS_HP(\"plusHp\"),\n\t\tPLUS_ATK(\"plusAtk\"),\n\t\tPLUS_RCV(\"plusRcv\"),\n\t\tAWAKENINGS(\"awakenings\");\n\n\t\tprivate final String colName;\n\n\t\tprivate Fields(String colName) {\n\t\t\tthis.colName = colName;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getColName() {\n\t\t\treturn colName;\n\t\t}\n\t}\n\n\t/**\n\t * Helper for the URIs\n\t *\n\t * @author Neraud\n\t */\n\tpublic static class UriHelper {\n\n\t\tprivate static final Uri CONTENT_URI = Uri.parse(\"content://\" + AUTHORITY).buildUpon().appendPath(BASE_PATH).build();\n\n\t\t/**\n\t\t * @return the Uri to access all the PlayerMonster\n\t\t */\n\t\tpublic static Uri uriForAll() {\n\t\t\treturn CONTENT_URI;\n\t\t}\n\n\t\t/**\n\t\t * @return the Uri to access all the PlayerMonster with info\n\t\t */\n\t\tpublic static Uri uriForAllWithInfo() {\n\t\t\tfinal Uri.Builder uriBuilder = CONTENT_URI.buildUpon();\n\t\t\turiBuilder.appendPath(\"withInfo\");\n\n\t\t\treturn uriBuilder.build();\n\t\t}\n\t}\n\n\tprivate static UriMatcher buildUriMatcher() {\n\t\tfinal UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);\n\n\t\tmatcher.addURI(AUTHORITY, Paths.ALL.path, Paths.ALL.id);\n\t\tmatcher.addURI(AUTHORITY, Paths.ALL_WITH_INFO.path, Paths.ALL_WITH_INFO.id);\n\n\t\treturn matcher;\n\t}\n\n\t/**\n\t * @param uri the Uri\n\t * @return the Paths matched by the uri\n\t */\n\tpublic static Paths matchUri(Uri uri) {\n\t\tfinal int match = URI_MATCHER.match(uri);\n\t\tfor (final Paths path : Paths.values()) {\n\t\t\tif (path.id == match) {\n\t\t\t\treturn path;\n\t\t\t}\n\t\t}\n\t\tthrow new UnsupportedOperationException(\"URI \" + uri + \" is not supported.\");\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"Neraud/PADListener","sample_ref":"refs/heads/master","sample_path":"PADListenerApp/src/main/java/fr/neraud/padlistener/provider/descriptor/CapturedPlayerMonsterDescriptor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"57677c3c1a50f51cb4a1438f94b31d3ceaaaefb6","size":"499","content":"package com.awsmithson.tcx2nikeplus.http;\n\nimport java.io.UnsupportedEncodingException;\n\nimport org.apache.http.entity.ContentType;\nimport org.apache.http.entity.mime.content.StringBody;\n\npublic class SpoofFileBody extends StringBody {\n\tprivate String _filename;\n\n\tpublic SpoofFileBody(final String text, String filename) throws UnsupportedEncodingException {\n\t\tsuper(text, ContentType.APPLICATION_XML);\n\t\t_filename = filename;\n\t}\n\n\t@Override\n\tpublic String getFilename() {\n\t\treturn _filename;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"angusws/tcx2nikeplus","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/awsmithson/tcx2nikeplus/http/SpoofFileBody.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"cd37aa5ed66504022c26e0e56034e5fa8c584cbb","size":"2676","content":"package hudson.plugins.warnings.parser;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Collection;\r\nimport java.util.Iterator;\r\n\r\nimport org.junit.Test;\r\nimport org.jvnet.hudson.test.Issue;\r\n\r\nimport static org.junit.Assert.assertEquals;\r\n\r\nimport hudson.plugins.analysis.util.model.FileAnnotation;\r\nimport hudson.plugins.analysis.util.model.Priority;\r\n\r\n/**\r\n * Tests the class {@link Pep8Parser}.\r\n *\r\n * @author Marvin Sch\u00fctz\r\n */\r\npublic class Pep8ParserTest extends ParserTester {\r\n    private static final String WARNING_TYPE = \"Pep8\";\r\n\r\n    /**\r\n     * Parses a file with W and E warnings.\r\n     *\r\n     * @throws IOException\r\n     *             if the file could not be read\r\n     */\r\n    @Test @Issue(\"32295\")\r\n    public void testParseSimpleAndComplexMessage() throws IOException {\r\n        Pep8Parser parser = new Pep8Parser();\r\n\r\n        Collection<FileAnnotation> warnings = parser.parse(openFile());\r\n\r\n        assertEquals(\"Wrong number of warnings detected.\", 8, warnings.size());\r\n\r\n        Iterator<FileAnnotation> iterator = warnings.iterator();\r\n        FileAnnotation warning = iterator.next();\r\n\r\n        checkWarning(warning, 69, 11, \"multiple imports on one line\", \"optparse.py\",\r\n                    WARNING_TYPE, \"E401\", Priority.NORMAL);\r\n        warning = iterator.next();\r\n\r\n        checkWarning(warning, 77, 1, \"expected 2 blank lines, found 1\", \"optparse.py\",\r\n                    WARNING_TYPE, \"E302\", Priority.NORMAL);\r\n        warning = iterator.next();\r\n\r\n        checkWarning(warning, 88, 5, \"expected 1 blank line, found 0\", \"optparse.py\",\r\n                    WARNING_TYPE, \"E301\", Priority.NORMAL);\r\n        warning = iterator.next();\r\n\r\n        checkWarning(warning, 222, 34, \"deprecated form of raising exception\", \"optparse.py\",\r\n                    WARNING_TYPE, \"W602\", Priority.LOW);\r\n        warning = iterator.next();\r\n\r\n        checkWarning(warning, 347, 31, \"whitespace before '('\", \"optparse.py\",\r\n                    WARNING_TYPE, \"E211\", Priority.NORMAL);\r\n        warning = iterator.next();\r\n\r\n        checkWarning(warning, 357, 17, \"whitespace after '{'\", \"optparse.py\",\r\n                    WARNING_TYPE, \"E201\", Priority.NORMAL);\r\n        warning = iterator.next();\r\n\r\n        checkWarning(warning, 472, 29, \"multiple spaces before operator\", \"optparse.py\",\r\n                    WARNING_TYPE, \"E221\", Priority.NORMAL);\r\n        warning = iterator.next();\r\n\r\n        checkWarning(warning, 544, 21, \".has_key() is deprecated, use 'in'\", \"optparse.py\",\r\n                    WARNING_TYPE, \"W601\", Priority.LOW);\r\n    }\r\n\r\n    @Override\r\n    protected String getWarningsFile() {\r\n        return \"pep8Test.txt\";\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"jenkinsci/warnings-plugin","sample_ref":"refs/heads/master","sample_path":"src/test/java/hudson/plugins/warnings/parser/Pep8ParserTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"28dfd0daa56cb9342c8ed22feffdb6ae6c0347de","size":"7861","content":"/**\n * This Java Class is part of the Impro-Visor Application\n *\n * Copyright (C) 2005-2012 Robert Keller and Harvey Mudd College\n *\n * Impro-Visor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Impro-Visor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * merchantability or fitness for a particular purpose.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Impro-Visor; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\npackage imp.com;\n\nimport imp.data.MelodyPart;\nimport imp.data.Part;\nimport imp.util.Trace;\nimport javax.swing.JFrame;\nimport javax.swing.JOptionPane;\n\n/**\n * A Command that pastes a Part over a section of a destination Part.\n * If it will overwrite existing notes, then it asks the user what to do.\n * @see         Command\n * @see         CommandManager\n * @see         Part\n * @see         PasteCommand\n * @author      Stephen Jones\n */\npublic class SafePasteCommand implements Command {\n\n    /**\n     * the Part to paste from\n     */\n    private Part source;\n\n    /**\n     * the Part to paste onto\n     */\n    private Part dest;\n\n    /**\n     * the slot to paste at\n     */\n    private int startSlot;\n\n    /**\n     * the PasteCommand used for the paste itself\n     */\n    private PasteCommand pasteCommand;\n\n    /**\n     * the JFrame to pop up the safe paste dialog from\n     */\n    private imp.gui.Notate notate = null;\n    \n    /**\n     * if dialog is set to false, then this will tell whether we should\n     * overwrite by default or not\n     */\n    private boolean overwrite = true;\n\n    /**\n     * if the paste will overwrite existing notes, pop up a dialog if this is\n     * set to true, otherwise go by the default overwrite boolean\n     */\n    private boolean dialog = false;\n\n    /**\n     * this command is undoable by default, but may be set to false\n     * if the paste is cancelled\n     */\n    private boolean undoable = true;\n\n    private boolean play = true;\n\n    /**\n     * Creates a new SafePasteCommand with default options for overwrite and\n     * dialog.\n     * @param source    the Part to paste from\n     * @param dest      the Part to paste onto\n     * @param startSlot the slot to paste at\n     */\n    public SafePasteCommand(Part source, Part dest, int startSlot) {\n        this.source = source;\n        this.dest = dest;\n        this.startSlot = startSlot;\n    }\n\n    /**\n     * Creates a new SafePasteCommand, specifying values for dialog and\n     * overwrite.\n     * @param source    the Part to paste from\n     * @param dest      the Part to paste onto\n     * @param startSlot the slot to paste at\n     * @param dialog    true if a dialog should be popped up\n     * @param overwrite true if the command should overwrite by default\n     */\n    public SafePasteCommand(Part source, Part dest, int startSlot, \n                        boolean dialog, boolean overwrite) {\n        this(source, dest, startSlot);\n        this.overwrite = overwrite;\n        this.dialog = dialog;\n    }\n    \n    /**\n     * Creates a new SafePasteCommand.\n     * @param source    the Part to paste from\n     * @param dest      the Part to paste onto\n     * @param startSlot the slot to paste at\n     * @param dialog    a boolean true if a dialog should be popped up\n     * @param overwrite a boolean true if the command should default overwrite\n     * @param frame     the JFrame to pop the dialog out of\n     */\n    public SafePasteCommand(Part source, Part dest, int startSlot, \n                        boolean dialog, boolean overwrite, \n                        imp.gui.Notate notate) {\n        this(source, dest, startSlot, dialog, overwrite);\n        this.notate = notate;\n    }\n\n    /**\n     * Executes the safe paste.\n     */\n    public void execute() {\n        Trace.log(2, \"Executing SaftePasteCommand\");\n        if(!dialog && overwrite) {\n            overwrite();\n            return;\n        }\n\n        // Keep a copy of the compressed source, just in case we need it.\n        int freeSlots = ((MelodyPart)dest).getFreeSlots(startSlot);\n        Part fitPart = source.fitPart(freeSlots);\n\n        if(dialog) {\n            if(freeSlots < source.size()) {\n                int OVERWRITE = 0;\n                int COMPRESS = 1;\n                int CANCEL = 2;\n\n                Object[] options;\n                String text;\n                Object defaultOption;\n\n                // If we can't compress don't give them the option\n                if(fitPart == null) {\n                    options = new Object[2];\n                    text = \"WARNING - Insertion will overwrite \" +\n                        \"exisiting notes.  There is not enough \" +\n                        \"room to compress insertion.  Do you want \" +\n                        \"to overwrite?\";\n                    CANCEL = 1;\n                }\n\n                // If we can compress, let them know\n                else {\n                    options = new Object[3];\n                    text = \"WARNING - Insertion will overwrite \" +\n                        \"existing notes.  Do you want to overwrite or \" +\n                        \"compress insertion?\";\n                }\n\n                options[OVERWRITE] = \"Overwrite\";\n                options[COMPRESS] = \"Compress\";\n                options[CANCEL] = \"Cancel\";\n                defaultOption = options[CANCEL];\n\n                int n = JOptionPane.showOptionDialog((JFrame)notate,\n                        text, \"Insert\",\n                        JOptionPane.YES_NO_CANCEL_OPTION, \n                        JOptionPane.QUESTION_MESSAGE,\n                        null,\n                        options,\n                        defaultOption);\n\n                // handle the user input\n                if(n == OVERWRITE) {\n                    overwrite();\n                    return;\n                }\n                else if(n == CANCEL) {\n                    cancel();\n                    return;\n                }\n                else if(n == COMPRESS) {\n                    compress(fitPart);\n                    return;\n                }\n            }\n            overwrite();\n            return;\n        }\n\n        // if they didn't pop up the dialog, and we can't compress, cancel\n        if(fitPart == null) {\n            cancel();\n            return;\n        }\n\n        compress(fitPart);\n    }\n\n    /**\n     * Pastes the source onto the dest.\n     */\n    private void overwrite() {\n        undoable = true;\n        pasteCommand = new PasteCommand(source, dest, startSlot, play);\n        \n        // selects the notes & rests just inserted\n        if (notate.getStaveAtTab(notate.getCurrTabIndex()) != null) {\n            notate.getStaveAtTab(notate.getCurrTabIndex()).setSelectionStart(\n                    startSlot);\n            notate.getStaveAtTab(notate.getCurrTabIndex()).setSelectionEnd(\n                    startSlot + source.size() - 1);\n\n        pasteCommand.execute();\n        }\n    }\n\n    /**\n     * Takes a compressed part, sets it as the source, then pastes.\n     */\n    private void compress(Part fitPart) {\n        source = fitPart;\n        overwrite();\n    }\n\n    /**\n     * Cancels the paste, and makes the Command undoable.\n     */\n    private void cancel() {\n        undoable = false;\n    }\n\n    /**\n     * Undoes the paste.\n     */\n    public void undo() {\n        pasteCommand.undo();\n    }\n\n    /**\n     * Redoes the paste.\n     */\n    public void redo() {\n        pasteCommand.redo();\n    }\n\n    public boolean isUndoable() {\n        return undoable;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"Impro-Visor/Impro-Visor","sample_ref":"refs/heads/master","sample_path":"src/imp/com/SafePasteCommand.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"6ac8143af1af1979887131e50f4ca9905fbf9ff8","size":"969","content":"package protocolsupport.protocol.packet.middleimpl.clientbound.play.v_1_8__1_9_r1__1_9_r2;\n\nimport java.io.IOException;\n\nimport protocolsupport.api.ProtocolVersion;\nimport protocolsupport.protocol.packet.ClientBoundPacket;\nimport protocolsupport.protocol.packet.middle.clientbound.play.MiddleEntityDestroy;\nimport protocolsupport.protocol.packet.middleimpl.PacketData;\nimport protocolsupport.utils.recyclable.RecyclableCollection;\nimport protocolsupport.utils.recyclable.RecyclableSingletonList;\n\npublic class EntityDestroy extends MiddleEntityDestroy<RecyclableCollection<PacketData>> {\n\n\t@Override\n\tpublic RecyclableCollection<PacketData> toData(ProtocolVersion version) throws IOException {\n\t\tPacketData serializer = PacketData.create(ClientBoundPacket.PLAY_ENTITY_DESTROY_ID, version);\n\t\tserializer.writeVarInt(entityIds.length);\n\t\tfor (int entityId : entityIds) {\n\t\t\tserializer.writeVarInt(entityId);\n\t\t}\n\t\treturn RecyclableSingletonList.create(serializer);\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"ProtocolSupport/ProtocolSupport","sample_ref":"refs/heads/master","sample_path":"src/protocolsupport/protocol/packet/middleimpl/clientbound/play/v_1_8__1_9_r1__1_9_r2/EntityDestroy.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7f0f067530e31c180965dd0229f6c207d5dd7219","size":"1903","content":"package farmsim.entities.predators;\n\nimport farmsim.Viewport;\nimport farmsim.util.Point;\n\n/**\n * Translates the viewport values into a form that is easier\n * to fit with the predator manager\n * @author r-portas\n *\n */\npublic class ViewportTranslator {\n\tprivate Viewport viewport;\n\t\n\tpublic ViewportTranslator() {\n\t\t// This will act as a fallback in case the viewport cannot be retrieved\n\t\tviewport = null;\n\t}\n\n\t/**\n\t * Sets the viewport of the translator\n\t * @param viewport The viewport to set to\n\t */\n\tpublic void setViewport(Viewport viewport) {\n\t\tif (viewport != null) {\n\t\t\tthis.viewport = viewport;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the top value\n\t * @return The top value\n\t */\n\tpublic int getTop() {\n\t\tif (viewport != null) {\n\t\t\treturn viewport.getY();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the bottom value\n\t * @return The bottom value\n\t */\n\tpublic int getBottom() {\n\t\tif (viewport != null) {\n\t\t\treturn viewport.getY() + viewport.getHeightTiles();\n\t\t} else {\n\t\t\treturn 100;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the right value\n\t * @return The right value\n\t */\n\tpublic int getRight() {\n\t\tif (viewport != null) {\n\t\t\treturn viewport.getX() + viewport.getWidthTiles();\n\t\t} else {\n\t\t\treturn 100;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the left value\n\t * @return The left value\n\t */\n\tpublic int getLeft() {\n\t\tif (viewport != null) {\n\t\t\treturn viewport.getX();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a point representing the bottom left\n\t * @return A point\n\t */\n\tpublic Point getBottomRight() {\n\t\tif (viewport != null) {\n\t\t\treturn new Point(viewport.getX() + viewport.getWidthTiles(), viewport.getY() + viewport.getHeightTiles());\n\t\t} else {\n\t\t\treturn new Point(100, 100);\n\t\t}\n\t}\n\t\n\t/**\n\t * Returns a point representing the top right\n\t * @return A point\n\t */\n\tpublic Point getTopLeft() {\n\t\tif (viewport != null) {\n\t\t\treturn new Point(viewport.getX(), viewport.getY());\n\t\t} else {\n\t\t\treturn new Point(0, 0);\n\t\t}\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"UQdeco2800/farmsim","sample_ref":"refs/heads/master","sample_path":"farmsim/src/main/java/farmsim/entities/predators/ViewportTranslator.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7d7afbb46bb5e35a134df3f34ea69d8f7950c3b4","size":"3945","content":"/*\n * This file is part of Hootenanny.\n *\n * Hootenanny is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * --------------------------------------------------------------------\n *\n * The following copyright notices are generated automatically. If you\n * have a new notice to add, please use the format:\n * \" * @copyright Copyright ...\"\n * This will properly maintain the copyright information. DigitalGlobe\n * copyrights will be updated automatically.\n *\n * @copyright Copyright (C) 2015, 2016 DigitalGlobe (http://www.digitalglobe.com/)\n */\npackage hoot.services.geo.zindex;\n\nimport java.util.Arrays;\n\n\n/**\n * Used to represent a bounding box in Z-Value space.\n */\nfinal public class LongBox {\n    static public String toBinary(long v, int bits) {\n        String format = String.format(\"%%%ds\", bits);\n        return String.format(format, Long.toBinaryString(v)).replace(\" \", \"0\");\n    }\n\n    long[] _min, _max;\n\n    public LongBox(long[] min, long[] max) {\n        assert (min.length == max.length);\n        _min = min;\n        _max = max;\n    }\n\n    public LongBox(LongBox box) {\n        _min = Arrays.copyOf(box._min, box._min.length);\n        _max = Arrays.copyOf(box._max, box._max.length);\n    }\n\n    public long calculateVolume() {\n        long result = 1;\n        for (int i = 0; i < _min.length; i++) {\n            result *= getWidth(i);\n        }\n        return result;\n    }\n\n    /**\n     * Returns true if at least one edge overlaps with one of the other boxes\n     * edges.\n     */\n    public boolean edgeOverlaps(LongBox b) {\n        boolean result = false;\n\n        for (int i = 0; i < _min.length; i++) {\n            result = result || b.getMin()[i] == getMax()[i] || b.getMin()[i] == b.getMin()[i]\n                    || b.getMax()[i] == b.getMax()[i];\n        }\n\n        return result;\n    }\n\n    public LongBox expand(int size) {\n        for (int i = 0; i < _min.length; i++) {\n            _min[i] -= size;\n            _max[i] += size;\n        }\n\n        return this;\n    }\n\n    public int getDimensions() {\n        return _min.length;\n    }\n\n    public long[] getMax() {\n        return _max;\n    }\n\n    public long[] getMin() {\n        return _min;\n    }\n\n    public long getWidth(int d) {\n        return _max[d] - _min[d] + 1;\n    }\n\n    public boolean in(long[] p) {\n        boolean result = true;\n        for (int i = 0; i < _min.length; i++) {\n            result = result && p[i] >= _min[i] && p[i] <= _max[i];\n        }\n        return result;\n    }\n\n    public boolean intersects(LongBox b) {\n        assert (b.getDimensions() == getDimensions());\n\n        boolean result = true;\n        for (int i = 0; i < _min.length; i++) {\n            result = result && b.getMin()[i] <= getMax()[i];\n            result = result && b.getMax()[i] >= getMin()[i];\n        }\n\n        return result;\n    }\n\n    public String toBinaryString(int bits) {\n        String result = \"{ \";\n        for (int i = 0; i < _min.length; i++) {\n            result += String.format(\"(%s : %s) \", toBinary(_min[i], bits), toBinary(_max[i], bits));\n        }\n        result += \"}\";\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        String result = \"{ \";\n        for (int i = 0; i < _min.length; i++) {\n            result += String.format(\"(%d : %d) \", _min[i], _max[i]);\n        }\n        result += \"}\";\n        return result;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"ngageoint/hootenanny","sample_ref":"refs/heads/master","sample_path":"hoot-services/src/main/java/hoot/services/geo/zindex/LongBox.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e8ad9514f3a4cbb89654ad145eb0b36f70e0f246","size":"34052","content":"/*\n *  DrMurkeDlg.java\n *  (FScape)\n *\n *  Copyright (c) 2001-2016 Hanns Holger Rutz. All rights reserved.\n *\n *  This software is published under the GNU General Public License v3+\n *\n *\n *\tFor further information, please contact Hanns Holger Rutz at\n *\tcontact@sciss.de\n */\n\npackage de.sciss.fscape.gui;\n\nimport de.sciss.fscape.io.GenericFile;\nimport de.sciss.fscape.prop.Presets;\nimport de.sciss.fscape.prop.PropertyArray;\nimport de.sciss.fscape.session.ModulePanel;\nimport de.sciss.fscape.util.Constants;\nimport de.sciss.fscape.util.Param;\nimport de.sciss.fscape.util.ParamSpace;\nimport de.sciss.fscape.util.Util;\nimport de.sciss.io.AudioFile;\nimport de.sciss.io.AudioFileDescr;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.io.EOFException;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DrMurkeDlg\n        extends ModulePanel {\n\n    // -------- private variables --------\n    private static final boolean verbose = false;\n\n    // Properties (defaults)\n    private static final int PR_INPUTFILE\t\t= 0;\t\t// pr.text\n    private static final int PR_CTRLFILE\t\t= 1;\n    private static final int PR_OUTPUTFILE\t\t= 2;\n    private static final int PR_OUTPUTTYPE\t\t= 0;\t\t// pr.intg\n    private static final int PR_OUTPUTRES\t\t= 1;\n    private static final int PR_GAINTYPE\t\t= 2;\n    private static final int PR_MODE\t\t\t= 3;\n    private static final int PR_CHANNELUP\t\t= 4;\n    private static final int PR_CHANNELDOWN\t\t= 5;\n    private static final int PR_SPACINGTYPE\t\t= 6;\n    private static final int PR_THRESHUP\t\t= 0;\t\t// pr.para\n    private static final int PR_THRESHDOWN\t\t= 1;\n    private static final int PR_DURUP\t\t\t= 2;\n    private static final int PR_DURDOWN\t\t\t= 3;\n    private static final int PR_ATTACK\t\t\t= 4;\n    private static final int PR_RELEASE\t\t\t= 5;\n    private static final int PR_GAIN\t\t\t= 6;\n    private static final int PR_SPACING\t\t\t= 7;\n\n    private static final String PRN_INPUTFILE\t\t= \"InputFile\";\n    private static final String PRN_CTRLFILE\t\t= \"CtrlFile\";\n    private static final String PRN_OUTPUTFILE\t\t= \"OutputFile\";\n    private static final String PRN_OUTPUTTYPE\t\t= \"OutputType\";\n    private static final String PRN_OUTPUTRES\t\t= \"OutputReso\";\n    private static final String PRN_MODE\t\t\t= \"Mode\";\n    private static final String PRN_CHANNELUP\t\t= \"ChannelUp\";\n    private static final String PRN_CHANNELDOWN\t\t= \"ChannelDown\";\n    private static final String PRN_SPACINGTYPE\t\t= \"SpacingType\";\n    private static final String PRN_THRESHUP\t\t= \"ThreshUp\";\n    private static final String PRN_THRESHDOWN\t\t= \"ThreshDown\";\n    private static final String PRN_DURUP\t\t\t= \"DurUp\";\n    private static final String PRN_DURDOWN\t\t\t= \"DurDown\";\n    private static final String PRN_ATTACK\t\t\t= \"Attack\";\n    private static final String PRN_RELEASE\t\t\t= \"Release\";\n    private static final String PRN_SPACING\t\t\t= \"Spacing\";\n\n    private static final String[]\tMODE_NAMES\t\t= { \"Keep Upper Chunks\", \"Keep Down Chunks\" };\n    private static final int\t\tMODE_UPPER\t\t= 0;\n    private static final int\t\tMODE_DOWN\t\t= 1;\n\n    private static final String[]\tCHANNEL_NAMES\t= { \"Take Maximum\", \"Take Minimum\" };\n    private static final int\t\tCHANNEL_MAX\t\t= 0;\n    private static final int\t\tCHANNEL_MIN\t\t= 1;\n\n    private static final String[]\tSPACING_NAMES\t= { \"Fixed Spacing:\", \"Original Spacing\" };\n    private static final int\t\tSPACING_FIXED\t= 0;\n    private static final int\t\tSPACING_ORIGINAL= 1;\n\n    private static final String\tprText[]\t\t= { \"\", \"\", \"\" };\n    private static final String\tprTextName[]\t= { PRN_INPUTFILE, PRN_CTRLFILE, PRN_OUTPUTFILE };\n    private static final int\tprIntg[]\t\t= { 0, 0, GAIN_UNITY, MODE_UPPER, CHANNEL_MIN, CHANNEL_MAX, SPACING_FIXED };\n    private static final String\tprIntgName[]\t= { PRN_OUTPUTTYPE, PRN_OUTPUTRES, PRN_GAINTYPE, PRN_MODE, PRN_CHANNELUP,\n                                                    PRN_CHANNELDOWN, PRN_SPACINGTYPE };\n    private static final Param\tprPara[]\t\t= { null, null, null, null, null, null, null, null };\n    private static final String\tprParaName[]\t= { PRN_THRESHUP, PRN_THRESHDOWN, PRN_DURUP, PRN_DURDOWN, PRN_ATTACK, PRN_RELEASE,\n                                                    PRN_GAIN, PRN_SPACING };\n\n    private static final int GG_INPUTFILE\t\t\t= GG_OFF_PATHFIELD\t+ PR_INPUTFILE;\n    private static final int GG_CTRLFILE\t\t\t= GG_OFF_PATHFIELD\t+ PR_CTRLFILE;\n    private static final int GG_OUTPUTFILE\t\t\t= GG_OFF_PATHFIELD\t+ PR_OUTPUTFILE;\n    private static final int GG_OUTPUTTYPE\t\t\t= GG_OFF_CHOICE\t\t+ PR_OUTPUTTYPE;\n    private static final int GG_OUTPUTRES\t\t\t= GG_OFF_CHOICE\t\t+ PR_OUTPUTRES;\n    private static final int GG_GAINTYPE\t\t\t= GG_OFF_CHOICE\t\t+ PR_GAINTYPE;\n    private static final int GG_MODE\t\t\t\t= GG_OFF_CHOICE\t\t+ PR_MODE;\n    private static final int GG_CHANNELUP\t\t\t= GG_OFF_CHOICE\t\t+ PR_CHANNELUP;\n    private static final int GG_CHANNELDOWN\t\t\t= GG_OFF_CHOICE\t\t+ PR_CHANNELDOWN;\n    private static final int GG_SPACINGTYPE\t\t\t= GG_OFF_CHOICE\t\t+ PR_SPACINGTYPE;\n    private static final int GG_THRESHUP\t\t\t= GG_OFF_PARAMFIELD\t+ PR_THRESHUP;\n    private static final int GG_THRESHDOWN\t\t\t= GG_OFF_PARAMFIELD\t+ PR_THRESHDOWN;\n    private static final int GG_DURUP\t\t\t\t= GG_OFF_PARAMFIELD\t+ PR_DURUP;\n    private static final int GG_DURDOWN\t\t\t\t= GG_OFF_PARAMFIELD\t+ PR_DURDOWN;\n    private static final int GG_ATTACK\t\t\t\t= GG_OFF_PARAMFIELD\t+ PR_ATTACK;\n    private static final int GG_RELEASE\t\t\t\t= GG_OFF_PARAMFIELD\t+ PR_RELEASE;\n    private static final int GG_GAIN\t\t\t\t= GG_OFF_PARAMFIELD\t+ PR_GAIN;\n    private static final int GG_SPACING\t\t\t\t= GG_OFF_PARAMFIELD\t+ PR_SPACING;\n\n    private static\tPropertyArray\tstatic_pr\t\t= null;\n    private static\tPresets\t\t\tstatic_presets\t= null;\n\n// -------- public methods --------\n\n    /**\n     *\t!! setVisible() bleibt dem Aufrufer ueberlassen\n     */\n    public DrMurkeDlg()\n    {\n        super( \"Dr Murke\" );\n        init2();\n    }\n\n    protected void buildGUI()\n    {\n        // einmalig PropertyArray initialisieren\n        if( static_pr == null ) {\n            static_pr\t\t\t= new PropertyArray();\n            static_pr.text\t\t= prText;\n            static_pr.textName\t= prTextName;\n            static_pr.intg\t\t= prIntg;\n            static_pr.intgName\t= prIntgName;\n//\t\t\tstatic_pr.bool\t\t= prBool;\n//\t\t\tstatic_pr.boolName\t= prBoolName;\n            static_pr.para\t\t= prPara;\n            static_pr.para[ PR_THRESHUP ]\t= new Param(   30.0, Param.FACTOR_AMP );\n            static_pr.para[ PR_THRESHDOWN ]\t= new Param(   20.0, Param.FACTOR_AMP );\n            static_pr.para[ PR_DURUP ]\t\t= new Param(  100.0, Param.ABS_MS );\n            static_pr.para[ PR_DURDOWN ]\t= new Param(   10.0, Param.ABS_MS );\n            static_pr.para[ PR_ATTACK ]\t\t= new Param(   10.0, Param.ABS_MS );\n            static_pr.para[ PR_RELEASE ]\t= new Param( 1000.0, Param.ABS_MS );\n            static_pr.para[ PR_SPACING ]\t= new Param( 1000.0, Param.ABS_MS );\n            static_pr.paraName\t= prParaName;\n//\t\t\tstatic_pr.superPr\t= DocumentFrame.static_pr;\n\n            fillDefaultAudioDescr( static_pr.intg, PR_OUTPUTTYPE, PR_OUTPUTRES );\n            fillDefaultGain( static_pr.para, PR_GAIN );\n            static_presets = new Presets( getClass(), static_pr.toProperties( true ));\n        }\n        presets\t= static_presets;\n        pr \t\t= (PropertyArray) static_pr.clone();\n\n    // -------- build GUI --------\n\n        final GridBagConstraints\tcon;\n\n        final PathField\t\t\tggInputFile, ggCtrlFile, ggOutputFile;\n        final PathField[]\t\tggInputs;\n        final ParamField\t\tggDurUp, ggDurDown, ggThreshUp, ggThreshDown, ggAttack, ggRelease, ggSpacing;\n        final ParamSpace[]\t\tspcDur, spcThresh;\n        final Component[]\t\tggGain;\n        final JComboBox\t\t\tggMode, ggChannelUp, ggChannelDown, ggSpacingType;\n\n        gui\t\t\t\t= new GUISupport();\n        con\t\t\t\t= gui.getGridBagConstraints();\n        con.insets\t\t= new Insets( 1, 2, 1, 2 );\n\n        final ItemListener il = new ItemListener() {\n            public void itemStateChanged( ItemEvent e )\n            {\n                int\t\t\tID\t\t\t= gui.getItemID( e );\n\n                switch( ID ) {\n                case GG_SPACINGTYPE:\n                    pr.intg[ ID - GG_OFF_CHOICE ] = ((JComboBox) e.getSource()).getSelectedIndex();\n                    reflectPropertyChanges();\n                    break;\n                }\n            }\n        };\n\n    // -------- Input-Gadgets --------\n        con.fill\t\t= GridBagConstraints.BOTH;\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n    gui.addLabel( new GroupLabel( \"Waveform I/O\", GroupLabel.ORIENT_HORIZONTAL,\n                                  GroupLabel.BRACE_NONE ));\n\n        ggInputFile\t\t= new PathField( PathField.TYPE_INPUTFILE + PathField.TYPE_FORMATFIELD,\n                                         \"Select input file\" );\n        ggInputFile.handleTypes( GenericFile.TYPES_SOUND );\n        con.gridwidth\t= 1;\n        con.weightx\t\t= 0.1;\n        gui.addLabel( new JLabel( \"Input file\", SwingConstants.RIGHT ));\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        con.weightx\t\t= 0.9;\n        gui.addPathField( ggInputFile, GG_INPUTFILE, null );\n\n        ggCtrlFile\t\t= new PathField( PathField.TYPE_INPUTFILE + PathField.TYPE_FORMATFIELD,\n                                         \"Select control file\" );\n        ggCtrlFile.handleTypes( GenericFile.TYPES_SOUND );\n        con.gridwidth\t= 1;\n        con.weightx\t\t= 0.1;\n        gui.addLabel( new JLabel( \"Control file\", SwingConstants.RIGHT ));\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        con.weightx\t\t= 0.9;\n        gui.addPathField( ggCtrlFile, GG_CTRLFILE, null );\n\n        ggOutputFile\t= new PathField( PathField.TYPE_OUTPUTFILE + PathField.TYPE_FORMATFIELD +\n                                         PathField.TYPE_RESFIELD, \"Select output file\" );\n        ggOutputFile.handleTypes( GenericFile.TYPES_SOUND );\n        ggInputs\t\t= new PathField[ 1 ];\n        ggInputs[ 0 ]\t= ggInputFile;\n        ggOutputFile.deriveFrom( ggInputs, \"$D0$F0Mur$E\" );\n        con.gridwidth\t= 1;\n        con.weightx\t\t= 0.1;\n        gui.addLabel( new JLabel( \"Output file\", SwingConstants.RIGHT ));\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        con.weightx\t\t= 0.9;\n        gui.addPathField( ggOutputFile, GG_OUTPUTFILE, null );\n        gui.registerGadget( ggOutputFile.getTypeGadget(), GG_OUTPUTTYPE );\n        gui.registerGadget( ggOutputFile.getResGadget(), GG_OUTPUTRES );\n\n        ggGain\t\t\t= createGadgets( GGTYPE_GAIN );\n        con.weightx\t\t= 0.1;\n        con.gridwidth\t= 1;\n        gui.addLabel( new JLabel( \"Gain\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        gui.addParamField( (ParamField) ggGain[ 0 ], GG_GAIN, null );\n        con.weightx\t\t= 0.5;\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        gui.addChoice( (JComboBox) ggGain[ 1 ], GG_GAINTYPE, null );\n\n    // -------- Settings-Gadgets --------\n        con.fill\t\t= GridBagConstraints.BOTH;\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n    gui.addLabel( new GroupLabel( \"Segmentation Settings\", GroupLabel.ORIENT_HORIZONTAL,\n                                  GroupLabel.BRACE_NONE ));\n\n        spcThresh\t\t= new ParamSpace[] {\n            Constants.spaces[ Constants.ratioAmpSpace ],\n            Constants.spaces[ Constants.decibelAmpSpace ]\n        };\n        spcDur\t\t\t= new ParamSpace[] {\n            Constants.spaces[ Constants.absMsSpace ]\n        };\n\n        ggThreshUp\t\t= new ParamField( spcThresh );\n        con.weightx\t\t= 0.1;\n        con.gridwidth\t= 1;\n        gui.addLabel( new JLabel( \"Up Thresh:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        gui.addParamField( ggThreshUp, GG_THRESHUP, null );\n\n        ggDurUp\t\t\t= new ParamField( spcDur );\n        con.weightx\t\t= 0.1;\n        gui.addLabel( new JLabel( \"Min. Up Duration:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        gui.addParamField( ggDurUp, GG_DURUP, null );\n\n        ggThreshDown\t= new ParamField( spcThresh );\n        con.weightx\t\t= 0.1;\n        con.gridwidth\t= 1;\n        gui.addLabel( new JLabel( \"Down Thresh:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        gui.addParamField( ggThreshDown, GG_THRESHDOWN, null );\n\n        ggDurDown\t\t= new ParamField( spcDur );\n        con.weightx\t\t= 0.1;\n        gui.addLabel( new JLabel( \"Min. Down Duration:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        gui.addParamField( ggDurDown, GG_DURDOWN, null );\n\n        ggChannelUp\t\t= new JComboBox();\n        for( int i = 0; i < CHANNEL_NAMES.length; i++ ) {\n            ggChannelUp.addItem( CHANNEL_NAMES[ i ]);\n        }\n        con.weightx\t\t= 0.1;\n        con.gridwidth\t= 1;\n        gui.addLabel( new JLabel( \"Multi-channel Up Treatment:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        gui.addChoice( ggChannelUp, GG_CHANNELUP, null );\n\n        ggAttack\t\t= new ParamField( spcDur );\n        con.weightx\t\t= 0.1;\n        gui.addLabel( new JLabel( \"Attack:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        gui.addParamField( ggAttack, GG_ATTACK, null );\n\n        ggChannelDown\t= new JComboBox();\n        for( int i = 0; i < CHANNEL_NAMES.length; i++ ) {\n            ggChannelDown.addItem( CHANNEL_NAMES[ i ]);\n        }\n        con.weightx\t\t= 0.1;\n        con.gridwidth\t= 1;\n        gui.addLabel( new JLabel( \"Multi-channel Down Treatment:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        gui.addChoice( ggChannelDown, GG_CHANNELDOWN, null );\n\n        ggRelease\t\t= new ParamField( spcDur );\n        con.weightx\t\t= 0.1;\n        gui.addLabel( new JLabel( \"Release:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        gui.addParamField( ggRelease, GG_RELEASE, null );\n\n        ggMode\t\t\t= new JComboBox();\n        for( int i = 0; i < MODE_NAMES.length; i++ ) {\n            ggMode.addItem( MODE_NAMES[ i ]);\n        }\n        con.weightx\t\t= 0.1;\n        con.gridwidth\t= 1;\n        gui.addLabel( new JLabel( \"Mode:\", SwingConstants.RIGHT ));\n        con.weightx\t\t= 0.4;\n        gui.addChoice( ggMode, GG_MODE, null );\n\n        ggSpacingType\t= new JComboBox();\n        for( int i = 0; i < SPACING_NAMES.length; i++ ) {\n            ggSpacingType.addItem( SPACING_NAMES[ i ]);\n        }\n        con.weightx\t\t= 0.1;\n        con.gridwidth\t= 1;\n        gui.addChoice( ggSpacingType, GG_SPACINGTYPE, il );\n        ggSpacing\t\t= new ParamField( spcDur );\n        con.weightx\t\t= 0.4;\n        con.gridwidth\t= GridBagConstraints.REMAINDER;\n        gui.addParamField( ggSpacing, GG_SPACING, null );\n\n        initGUI( this, FLAGS_PRESETS | FLAGS_PROGBAR, gui );\n    }\n\n    /**\n     *\tTransfer values from prop-array to GUI\n     */\n    public void fillGUI()\n    {\n        super.fillGUI();\n        super.fillGUI( gui );\n    }\n\n    /**\n     *\tTransfer values from GUI to prop-array\n     */\n    public void fillPropertyArray()\n    {\n        super.fillPropertyArray();\n        super.fillPropertyArray( gui );\n    }\n\n// -------- Processor Interface --------\n\n    protected void process()\n    {\n        // io\n        AudioFile\t\t\tinF\t\t= null;\n        AudioFile\t\t\tctrlF\t= null;\n        AudioFile\t\t\toutF\t= null;\n\n        float\t\t\t\tgain\t\t\t= 1.0f;\t\t\t// gain abs amp\n        final Param\t\t\tampRef\t\t\t= new Param( 1.0, Param.ABS_AMP );\t// transform-Referenz\n        float\t\t\t\tmaxAmp\t\t\t= 0.0f;\n\ntopLevel: try {\n\n        // ---- open input, output; init ----\n\n            // input\n            inF\t\t\t\t\t\t\t\t= AudioFile.openAsRead( new File( pr.text[ PR_INPUTFILE ]));\n            final AudioFileDescr inStream \t= inF.getDescr();\n            final int inChanNum\t\t\t\t= inStream.channels;\n            final long inLength\t\t\t\t= inStream.length;\n            // this helps to prevent errors from empty files!\n            if( (inLength < 1) || (inChanNum < 1) ) throw new EOFException( ERR_EMPTY );\n\n            ctrlF\t\t\t\t\t\t\t= AudioFile.openAsRead( new File( pr.text[ PR_CTRLFILE ]));\n            final AudioFileDescr ctrlStream\t= ctrlF.getDescr();\n            final int ctrlChanNum\t\t\t= ctrlStream.channels;\n            final long ctrlLength\t\t\t= ctrlStream.length;\n            // this helps to prevent errors from empty files!\n            if( (ctrlLength < 1) || (ctrlChanNum < 1)  ) throw new EOFException( ERR_EMPTY );\n//\t\t\tif( ctrlLength > inLength ) throw new IOException( ERR_LENGTH );\n\n            final double ctrlRate\t\t= (double) ctrlLength / (double) inLength;\n\n        // ---- open output ----\n            final PathField ggOutput\t= (PathField) gui.getItemObj( GG_OUTPUTFILE );\n            if( ggOutput == null ) throw new IOException( ERR_MISSINGPROP );\n            final AudioFileDescr outStream\t= new AudioFileDescr( inStream );\n            ggOutput.fillStream( outStream );\n            outF\t\t\t= AudioFile.openAsWrite( outStream );\n        // .... check running ....\n            if( !threadRunning ) break topLevel;\n\n            final AudioFile tmpF;\n            final boolean normalized = pr.intg[ PR_GAINTYPE ] == GAIN_UNITY;\n            if( normalized ) {\n                tmpF\t= createTempFile( outStream );\n            } else {\n                gain\t= (float) (Param.transform( pr.para[ PR_GAIN ], Param.ABS_AMP, ampRef, null )).value;\n                tmpF\t= null;\n            }\n        // .... check running ....\n            if( !threadRunning ) break topLevel;\n\n            long progOff\t\t= 0L;\n            final long progLen\t= ctrlLength * (normalized ? 2 : 1);\n\n            final float[][] inBuf\t= new float[ inChanNum ][   8192 ];\n            final float[][] outBuf\t= new float[ inChanNum ][   8192 ];\n            final float[][] ctrlBuf\t= new float[ ctrlChanNum ][ 8192 ];\n            final float[] ctrlFrame = new float[ ctrlChanNum ];\n\n            final float upThresh \t= (float) (Param.transform( pr.para[ PR_THRESHUP ],   Param.ABS_AMP, ampRef, null )).value;\n            final float dnThresh \t= (float) (Param.transform( pr.para[ PR_THRESHDOWN ], Param.ABS_AMP, ampRef, null )).value;\n            final long upCount\t\t= Math.max( 1L,\n                    (long) (AudioFileDescr.millisToSamples( inStream, pr.para[ PR_DURUP ].value) * ctrlRate + 0.5) );\n            final long dnCount\t \t= Math.max( 1L,\n                    (long) (AudioFileDescr.millisToSamples( inStream, pr.para[ PR_DURDOWN ].value) * ctrlRate + 0.5) );\n\n            final long fadeInFrames\t\t= (long) (AudioFileDescr.millisToSamples( inStream, pr.para[ PR_ATTACK ].value) + 0.5);\n            final long fadeOutFrames\t= (long) (AudioFileDescr.millisToSamples( inStream, pr.para[ PR_RELEASE ].value) + 0.5);\n\n            final ThreshFunc upFun;\n            if( pr.intg[ PR_CHANNELUP ] == CHANNEL_MAX ) {\n                upFun = new AboveFunc( new MaxFunc(), dnThresh );\n            } else {\n                upFun = new AboveFunc( new MinFunc(), dnThresh );\n            }\n            final ThreshFunc dnFun;\n            if( pr.intg[ PR_CHANNELDOWN ] == CHANNEL_MAX ) {\n                dnFun = new BelowFunc( new MaxFunc(), upThresh );\n            } else {\n                dnFun = new BelowFunc( new MinFunc(), upThresh );\n            }\n\n            final Track upTrack\t= new Track( \"up\", dnCount, upFun, pr.intg[ PR_MODE ] == MODE_UPPER );\n            final Track dnTrack\t= new Track( \"dn\", upCount, dnFun, pr.intg[ PR_MODE ] == MODE_DOWN );\n            upTrack.other\t= dnTrack;\n            dnTrack.other\t= upTrack;\n            Track current \t= dnTrack.write ? upTrack : dnTrack;\nif( verbose ) System.out.println( \"--> initial = \" + current.name );\n            final List<Fade> fades = new ArrayList<Fade>();\n\n//\t\t\tlong framesRead \t= 0L;\n            long ctrlRead\t\t= 0L;\n            long framesWritten\t= 0L;\n//\t\t\tlong framesSkipped\t= 0L;\n            long writeStart\t\t= 0L;\n            long gagaFrame = 0L;\n            Fade currentFade\t= null;\n            final boolean spcOrig = pr.intg[ PR_SPACINGTYPE ] == SPACING_ORIGINAL;\n            final long spcFrames = spcOrig ? 0L : (long) (AudioFileDescr.millisToSamples( inStream, pr.para[ PR_SPACING ].value) + 0.5);\n\n//final long spacing = fadeOutFrames; // 0L; // this could be another parameter one day...\n\n            while( threadRunning && ctrlRead < ctrlLength ) {\n                final int len = (int) Math.min( 8192, ctrlLength - ctrlRead );\n                ctrlF.readFrames( ctrlBuf, 0, len );\n\n                for( int i = 0; i < len; i++ ) {\n                    for( int ch = 0; ch < ctrlChanNum; ch++ ) {\n                        ctrlFrame[ ch ] = ctrlBuf[ ch ][ i ];\n                    }\n                    final boolean inTrack = current.fun.thresh( ctrlFrame );\n//\t\t\t\t\tboolean advance = current.write;\n//\t\t\t\t\tfinal boolean oldWrite = current.write;\n                    final long ctrlPos = ctrlRead + i;\n                    final long inFramePos = (long) (ctrlPos / ctrlRate + 0.5);\n                    if( inTrack ) {\n                        current.offCount = 0L; // begin frames-outside-thresh (\"off\"-track) counting again from zero\nif( verbose ) System.out.println( \"@\" + ctrlPos + \" : inTrack = \" + inTrack );\n                    } else {\n                        if( current.offCount == 0L ) {\n                            current.offFrame = inFramePos; // store beginning pos of going off-track\n                        }\n                        current.offCount++;\nif( verbose ) System.out.println( \"@\" + ctrlPos + \" : inTrack = \" + inTrack + \", offCount = \" + current.offCount + \" (\" + current.maxCount + \")\" );\n                        if( current.offCount >= current.maxCount ) {  // enough off-track frames to switch track\n                            if( current.write ) {\n//\t\t\t\t\t\t\t\tprocessTo( inFrame1 );\n                                currentFade.out( current.offFrame, fadeOutFrames );\n                                fades.add( currentFade );\n//\t\t\t\t\t\t\t\tfades.add( new Fade( inF, inBuf, inFrame1, inFrame1 - framesSkipped, 1f, 0f, fadeOutFrames ));\n//\t\t\t\t\t\t\t\tadvance = false;\n//\t\t\t\t\t\t\t\tgagaFrame += inFramePos - currentFade.inFadeInOffset + spacing;\n                                gagaFrame += inFramePos - writeStart + spcFrames;\n                                currentFade = null;\n                                final long len20 = Math.max( 0L, gagaFrame - fadeInFrames - framesWritten );\n                                final long len2 = spcOrig ? Math.min( inLength - framesWritten, len20 ) : len20;\nif( verbose ) System.out.println( \"--> write( \" + framesWritten + \", \" + len2 + \" ; gagaFrame = \" + gagaFrame );\n                                maxAmp = writeFrames( tmpF == null ? outF : tmpF, framesWritten, len2, outBuf, fades, maxAmp,\n                                        normalized, gain );\n                                framesWritten += len2;\n                            } else {\n//\t\t\t\t\t\t\t\twriteStart = framesWritten; // inFramePos;\n//\t\t\t\t\t\t\t\tfinal long inFrame1 = Math.max( 0L, (long) (current.offFrame / ctrlRate + 0.5) - fadeInFrames );\n                                final long inOffset = Math.max( 0L, current.offFrame - fadeInFrames );\n                                final long fadeIn2  = Math.min( fadeInFrames, current.offFrame - inOffset );\n                                writeStart = inOffset + fadeIn2;\n                                if( spcOrig ) {\n                                    final long tmp = inOffset + fadeIn2;\n                                    if( tmp < gagaFrame ) throw new IllegalArgumentException( \"Ooops. Assertion\" );\n                                    gagaFrame = tmp;\n                                }\n                                currentFade = new Fade( inF, inBuf, inOffset, gagaFrame - fadeIn2, fadeIn2 );\n//\t\t\t\t\t\t\t\tadvance = true;\n                            }\n                            current = current.other;\n                            current.offCount = 0L;\nif( verbose ) System.out.println( \"--> current = \" + current.name );\n                        }\n                    }\n                }\n                ctrlRead += len;\n                progOff\t += len;\n            // .... progress ....\n                setProgression( (float) progOff / (float) progLen );\n            }\n        // .... check running ....\n            if( !threadRunning ) break topLevel;\n\n            ctrlF.close();\n            ctrlF = null;\n\n            long maxNumFrames = 0L;\n            if( currentFade != null ) fades.add( currentFade );\n            if( spcOrig ) {\n                maxNumFrames = inLength - framesWritten;\n            } else {\n                for( int j = 0; j < fades.size(); j++ ) {\n                    final Fade f = (Fade) fades.get( j );\n                    maxNumFrames = Math.max( maxNumFrames, f.remaining( framesWritten ));\n                }\n            }\nif( verbose ) System.out.println( \"--> final write( \" + framesWritten + \", \" + maxNumFrames );\n            maxAmp = writeFrames( tmpF == null ? outF : tmpF, framesWritten, maxNumFrames, outBuf, fades, maxAmp,\n                    normalized, gain );\n\n            inF.close();\n            inF = null;\n\n            // adjust gain\n            if( normalized ) {\n                gain\t = (float) (Param.transform( pr.para[ PR_GAIN ], Param.ABS_AMP,\n                                    new Param( 1.0 / maxAmp, Param.ABS_AMP ), null )).value;\n                normalizeAudioFile( tmpF, outF, inBuf, gain, 1.0f );\n                deleteTempFile( tmpF );\n            }\n            setProgression( 1f );\n\n        // .... check running ....\n            if( !threadRunning ) break topLevel;\n\n        // ---- Finish ----\n            outF.close();\n            outF = null;\n\n//\t\t\tsetProgression( 1.0f );\n\n            // inform about clipping/ low level\n            maxAmp\t\t*= gain;\n            handleClipping( maxAmp );\n        }\n        catch( IOException e1 ) {\n            setError( e1 );\n        }\n\n    // ---- cleanup (topLevel) ----\n        if( outF != null ) {\n            outF.cleanUp();\n        }\n        if( inF != null ) {\n            inF.cleanUp();\n        }\n        if( ctrlF != null ) {\n            ctrlF.cleanUp();\n        }\n    } // process()\n\n// -------- private methods --------\n    private float writeFrames( AudioFile outF, long pos, long numFrames, float[][] outBuf, List fades, float maxAmp,\n                               boolean normalize, float gain ) throws IOException {\n        final long stop = pos + numFrames;\n        while( pos < stop ) {\n            final int len2 = (int) Math.min( 8192, stop - pos );\n            Util.clear( outBuf );\n            for( int j = fades.size() - 1; j >= 0; j-- ) {\n                final Fade f = (Fade) fades.get( j );\n                if( f.remaining( pos ) == 0L ) {\n                    fades.remove( j );\n                } else {\n                    f.process( outBuf, pos, 0, len2 );\n                }\n            }\n            maxAmp = Math.max( maxAmp, Util.maxAbs( outBuf, 0, len2 ));\n            if( !normalize ) {\n                Util.mult( outBuf, 0, len2, gain );\n            }\n            outF.writeFrames( outBuf, 0, len2 );\n            pos += len2;\n        }\n        return maxAmp;\n    }\n\n    private interface CollapseFunc {\n        float collapse(float[] chan);\n    }\n\n    private interface ThreshFunc {\n        boolean thresh(float[] chan);\n    }\n\n    private static class MinFunc implements CollapseFunc {\n        public float collapse( float[] chan ) {\n            float v = chan[ 0 ];\n            for( int i = 0; i < chan.length; i++ ) v = Math.min( v, chan[ i ]);\n            return v;\n        }\n    }\n\n    private static class MaxFunc implements CollapseFunc {\n        public float collapse( float[] chan ) {\n            float v = chan[ 0 ];\n            for( int i = 0; i < chan.length; i++ ) v = Math.max( v, chan[ i ]);\n            return v;\n        }\n    }\n\n    private static class AboveFunc implements ThreshFunc {\n        private final CollapseFunc collapse;\n        private final float thresh;\n\n        public AboveFunc( CollapseFunc collapse, float thresh ) {\n            this.collapse  = collapse;\n            this.thresh\t\t= thresh;\n        }\n\n        public boolean thresh( float[] chan ) {\n            return collapse.collapse( chan ) >= thresh;\n        }\n    }\n\n    private static class BelowFunc implements ThreshFunc {\n        private final CollapseFunc collapse;\n        private final float thresh;\n\n        public BelowFunc( CollapseFunc collapse, float thresh ) {\n            this.collapse  = collapse;\n            this.thresh\t\t= thresh;\n        }\n\n        public boolean thresh( float[] chan ) {\n            return collapse.collapse( chan ) < thresh;\n        }\n    }\n\n    private static class Track {\n        final String\t\tname;\n        final long\t\t\tmaxCount;\n        final ThreshFunc\tfun;\n        final boolean\t\twrite;\n        long\t\t\t\toffCount = 0L;\n        long\t\t\t\toffFrame;\n        Track\t\t\t\tother;\n\n        public Track( String name, long maxCount, ThreshFunc fun, boolean write ) {\n            this.name\t\t= name;\n            this.maxCount  \t= maxCount;\n            this.fun\t\t= fun;\n            this.write\t\t= write;\n        }\n    }\n\n    private static class Fade {\n        private final AudioFile\taf;\n        private final float[][]\tinBuf;\n        private final long\t\tinOffset;\t// this is the absolute offset in the input file\n        private long\t\t\tfadeOutOffset = -1L;  // this is the relative offset of the fadeout begin from the chunk start\n        private final long\t\toutOffset;\n        private final long\t\tfadeInFrames;\n        private long\t\t\tfadeOutFrames;\n        private long\t\t\tfadeOutStop;\n//\t\tprivate long\t\t\tprocessed = 0L;\n        private final long\t\tfileNumFrames;\n//\t\tprivate final long\t\tmaxChunkLen;\n\n        public Fade( AudioFile af, float[][] inBuf, long inOffset, long outOffset, long numFrames )\n        throws IOException {\n            this.af\t\t\t\t= af;\n            this.inBuf\t\t\t= inBuf;\n            this.inOffset\t\t= inOffset;\n            this.outOffset\t\t= outOffset;\n            this.fadeInFrames\t= numFrames;\n            fileNumFrames\t\t= af.getFrameNum();\n//\t\t\tmaxChunkLen\t\t\t= af.getFrameNum() - inOffset;\n        }\n\n        public void out( long inPos, long numFrames ) {\n            if( fadeOutOffset >= 0 ) throw new IllegalStateException( \"Duplicate call\" );\n            if( inPos < inOffset ) throw new IllegalArgumentException( \"\" + inOffset + \" -> \" + inPos );\n            fadeOutOffset\t= inPos - inOffset;\n            fadeOutFrames\t= numFrames;\n            fadeOutStop\t\t= Math.min( fileNumFrames - inOffset, fadeOutOffset + fadeOutFrames );\n        }\n\n        public long remaining( long outPos ) throws IOException {\n            return Math.max( 0L, (fadeOutOffset == -1L ? (fileNumFrames - inOffset) : fadeOutStop) - (outPos - outOffset) );\n        }\n\n\t\tpublic void process(float[][] outBuf, long outPos, int off, int len) throws IOException {\n\t\t\tif (verbose) System.out.println(\"process : \" + outPos + \" / \" + off + \" / \" + len);\n\t\t\tfadeIn(outBuf, outPos, off, len);\n\t\t\tfadeOut(outBuf, outPos, off, len);\n\t\t}\n\n\t\tprivate void fadeIn( float[][] outBuf, long outPos, int off, int len ) throws IOException {\n            final long start = outPos - outOffset;\n            final long add = Math.max( 0L, -start );\n            if( add >= len ) return;\n            final int addi = (int) add;\n\n//\t\t\tfinal long pos1\t\t= pos + addi;\n            final int off1\t\t= off + addi;\n            final int len1\t\t= len - addi;\n            final long start1\t= start + addi;\n\n            final long stop\t\t= fadeOutOffset == -1L ? start1 + len1 : Math.min( fadeOutOffset, start1 + len1 );\n            if( stop <= start1 ) return;\n            final int len2\t\t= (int) (stop - start1);\n\n            final long inPos = inOffset + start1;\n            final long add1\t = Math.max( 0L, -inPos );\n            if( add >= len2 ) return;\n            final int addi1  = (int) add1;\n            final int off2\t\t= off1 + addi1;\n            final int len3\t\t= len2 - addi1;\n            final long start2\t= start1 + addi1;\n            final long inPos1\t= inPos + addi1;\n\n//System.out.println( \"  start \" + start + \", add \" + add + \", off1 \" + off1 + \", len1 \" + len1 + \", start1 \" + start1 + \", len2 \" + len2 + \", inPos \" + inPos );\n            if( af.getFramePosition() != inPos1 ) af.seekFrame( inPos1 );\n            af.readFrames( inBuf, 0, len3 );\n            for( int i = 0, j = off2; i < len3; i++, j++ ) {\n                final float f = Math.max( 0f, Math.min( 1f, (float) (start2 + i) / (float) fadeInFrames ));\n                for( int ch = 0; ch < outBuf.length; ch++ ) {\n                    outBuf[ ch ][ j ] += inBuf[ ch ][ i ] * f;\n                }\n            }\n        }\n\n        private void fadeOut( float[][] outBuf, long outPos, int off, int len ) throws IOException {\n            if( fadeOutOffset == -1L ) return;\n\n            final long start = outPos - (outOffset + fadeOutOffset);\n            final long add = Math.max( 0L, -start );\n            if( add >= len ) return;\n            final int addi = (int) add;\n\n//\t\t\tfinal long pos1\t\t= pos + addi;\n            final int off1\t\t= off + addi;\n            final long start1\t= start + addi;\n\n            final long inPos \t= Math.min( fileNumFrames, inOffset + fadeOutOffset + start1 );\n            final int len1\t\t= (int) Math.min( len - addi, fileNumFrames - inPos );\n            if( af.getFramePosition() != inPos ) af.seekFrame( inPos );\n            af.readFrames( inBuf, 0, len1 );\n            for( int i = 0, j = off1; i < len1; i++, j++ ) {\n                final float f = Math.max( 0f, Math.min( 1f, 1f - ((float) (start1 + i) / (float) fadeOutFrames) ));\n                for( int ch = 0; ch < outBuf.length; ch++ ) {\n                    outBuf[ ch ][ j ] += inBuf[ ch ][ i ] * f;\n                }\n            }\n        }\n    }\n\n\tprotected void reflectPropertyChanges() {\n\t\tsuper.reflectPropertyChanges();\n\n\t\tComponent c;\n\n\t\tc = gui.getItemObj(GG_SPACING);\n\t\tif (c != null) {\n\t\t\tc.setEnabled(pr.intg[PR_SPACINGTYPE] == SPACING_FIXED);\n\t\t}\n\t}\n}","binary":"false","copies":"1","sample_repo_name":"Sciss/FScape","sample_ref":"refs/heads/master","sample_path":"src/main/java/de/sciss/fscape/gui/DrMurkeDlg.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2f8f018681543e64221ea8591fc79a45b791534f","size":"11749","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.admin.forms.providersystemadmin;\r\n\r\npublic abstract class BaseLogic extends Handlers\r\n{\r\n\tpublic final Class getDomainInterface() throws ClassNotFoundException\r\n\t{\r\n\t\treturn ims.admin.domain.ProviderSystemAdmin.class;\r\n\t}\r\n\tpublic final void setContext(ims.framework.UIEngine engine, GenForm form, ims.admin.domain.ProviderSystemAdmin domain)\r\n\t{\r\n\t\tsetContext(engine, form);\r\n\t\tthis.domain = domain;\r\n\t}\r\n\tprotected final void oncmbCategoryValueSet(Object value)\r\n\t{\r\n\t\tjava.util.ArrayList listOfValues = this.form.cmbCategory().getValues();\r\n\r\n\t\tif(value == null)\r\n\t\t{\r\n\t\t\tif(listOfValues != null && listOfValues.size() > 0)\r\n\t\t\t{\r\n\t\t\t\tfor(int x = 0; x < listOfValues.size(); x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tims.ocrr.vo.lookups.Category existingInstance = (ims.ocrr.vo.lookups.Category)listOfValues.get(x);\r\n\t\t\t\t\tif(!existingInstance.isActive())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbindcmbCategoryLookup();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(value instanceof ims.ocrr.vo.lookups.Category)\r\n\t\t{\r\n\t\t\tims.ocrr.vo.lookups.Category instance = (ims.ocrr.vo.lookups.Category)value;\r\n\r\n\t\t\tif(listOfValues != null)\r\n\t\t\t{\r\n\t\t\t\tif(listOfValues.size() == 0)\r\n\t\t\t\t\tbindcmbCategoryLookup();\r\n\r\n\t\t\t\tfor(int x = 0; x < listOfValues.size(); x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tims.ocrr.vo.lookups.Category existingInstance = (ims.ocrr.vo.lookups.Category)listOfValues.get(x);\r\n\t\t\t\t\tif(existingInstance.equals(instance))\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.form.cmbCategory().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());\r\n\t\t}\r\n\t}\r\n\tprotected final void bindcmbCategoryLookup()\r\n\t{\r\n\t\tthis.form.cmbCategory().clear();\r\n\t\tims.ocrr.vo.lookups.CategoryCollection lookupCollection = ims.ocrr.vo.lookups.LookupHelper.getCategory(this.domain.getLookupService());\r\n\t\tfor(int x = 0; x < lookupCollection.size(); x++)\r\n\t\t{\r\n\t\t\tthis.form.cmbCategory().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());\r\n\t\t}\r\n\t}\r\n\tprotected final void setcmbCategoryLookupValue(int id)\r\n\t{\r\n\t\tims.ocrr.vo.lookups.Category instance = ims.ocrr.vo.lookups.LookupHelper.getCategoryInstance(this.domain.getLookupService(), id);\r\n\t\tif(instance != null)\r\n\t\t\tthis.form.cmbCategory().setValue(instance);\r\n\t}\r\n\tprotected final void defaultcmbCategoryLookupValue()\r\n\t{\r\n\t\tthis.form.cmbCategory().setValue((ims.ocrr.vo.lookups.Category)domain.getLookupService().getDefaultInstance(ims.ocrr.vo.lookups.Category.class, engine.getFormName().getID(), ims.ocrr.vo.lookups.Category.TYPE_ID));\r\n\t}\r\n\tprotected final void oncmbPrimaryIdValueSet(Object value)\r\n\t{\r\n\t\tjava.util.ArrayList listOfValues = this.form.cmbPrimaryId().getValues();\r\n\r\n\t\tif(value == null)\r\n\t\t{\r\n\t\t\tif(listOfValues != null && listOfValues.size() > 0)\r\n\t\t\t{\r\n\t\t\t\tfor(int x = 0; x < listOfValues.size(); x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tims.core.vo.lookups.PatIdType existingInstance = (ims.core.vo.lookups.PatIdType)listOfValues.get(x);\r\n\t\t\t\t\tif(!existingInstance.isActive())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbindcmbPrimaryIdLookup();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(value instanceof ims.core.vo.lookups.PatIdType)\r\n\t\t{\r\n\t\t\tims.core.vo.lookups.PatIdType instance = (ims.core.vo.lookups.PatIdType)value;\r\n\r\n\t\t\tif(listOfValues != null)\r\n\t\t\t{\r\n\t\t\t\tif(listOfValues.size() == 0)\r\n\t\t\t\t\tbindcmbPrimaryIdLookup();\r\n\r\n\t\t\t\tfor(int x = 0; x < listOfValues.size(); x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tims.core.vo.lookups.PatIdType existingInstance = (ims.core.vo.lookups.PatIdType)listOfValues.get(x);\r\n\t\t\t\t\tif(existingInstance.equals(instance))\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.form.cmbPrimaryId().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());\r\n\t\t}\r\n\t}\r\n\tprotected final void bindcmbPrimaryIdLookup()\r\n\t{\r\n\t\tthis.form.cmbPrimaryId().clear();\r\n\t\tims.core.vo.lookups.PatIdTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getPatIdType(this.domain.getLookupService());\r\n\t\tfor(int x = 0; x < lookupCollection.size(); x++)\r\n\t\t{\r\n\t\t\tthis.form.cmbPrimaryId().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());\r\n\t\t}\r\n\t}\r\n\tprotected final void setcmbPrimaryIdLookupValue(int id)\r\n\t{\r\n\t\tims.core.vo.lookups.PatIdType instance = ims.core.vo.lookups.LookupHelper.getPatIdTypeInstance(this.domain.getLookupService(), id);\r\n\t\tif(instance != null)\r\n\t\t\tthis.form.cmbPrimaryId().setValue(instance);\r\n\t}\r\n\tprotected final void defaultcmbPrimaryIdLookupValue()\r\n\t{\r\n\t\tthis.form.cmbPrimaryId().setValue((ims.core.vo.lookups.PatIdType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.PatIdType.class, engine.getFormName().getID(), ims.core.vo.lookups.PatIdType.TYPE_ID));\r\n\t}\r\n\tprotected final void oncmbCodeSystemValueSet(Object value)\r\n\t{\r\n\t\tjava.util.ArrayList listOfValues = this.form.cmbCodeSystem().getValues();\r\n\r\n\t\tif(value == null)\r\n\t\t{\r\n\t\t\tif(listOfValues != null && listOfValues.size() > 0)\r\n\t\t\t{\r\n\t\t\t\tfor(int x = 0; x < listOfValues.size(); x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tims.core.vo.lookups.TaxonomyType existingInstance = (ims.core.vo.lookups.TaxonomyType)listOfValues.get(x);\r\n\t\t\t\t\tif(!existingInstance.isActive())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbindcmbCodeSystemLookup();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(value instanceof ims.core.vo.lookups.TaxonomyType)\r\n\t\t{\r\n\t\t\tims.core.vo.lookups.TaxonomyType instance = (ims.core.vo.lookups.TaxonomyType)value;\r\n\r\n\t\t\tif(listOfValues != null)\r\n\t\t\t{\r\n\t\t\t\tif(listOfValues.size() == 0)\r\n\t\t\t\t\tbindcmbCodeSystemLookup();\r\n\r\n\t\t\t\tfor(int x = 0; x < listOfValues.size(); x++)\r\n\t\t\t\t{\r\n\t\t\t\t\tims.core.vo.lookups.TaxonomyType existingInstance = (ims.core.vo.lookups.TaxonomyType)listOfValues.get(x);\r\n\t\t\t\t\tif(existingInstance.equals(instance))\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.form.cmbCodeSystem().newRow(instance, instance.getText(), instance.getImage(), instance.getTextColor());\r\n\t\t}\r\n\t}\r\n\tprotected final void bindcmbCodeSystemLookup()\r\n\t{\r\n\t\tthis.form.cmbCodeSystem().clear();\r\n\t\tims.core.vo.lookups.TaxonomyTypeCollection lookupCollection = ims.core.vo.lookups.LookupHelper.getTaxonomyType(this.domain.getLookupService());\r\n\t\tfor(int x = 0; x < lookupCollection.size(); x++)\r\n\t\t{\r\n\t\t\tthis.form.cmbCodeSystem().newRow(lookupCollection.get(x), lookupCollection.get(x).getText(), lookupCollection.get(x).getImage(), lookupCollection.get(x).getTextColor());\r\n\t\t}\r\n\t}\r\n\tprotected final void setcmbCodeSystemLookupValue(int id)\r\n\t{\r\n\t\tims.core.vo.lookups.TaxonomyType instance = ims.core.vo.lookups.LookupHelper.getTaxonomyTypeInstance(this.domain.getLookupService(), id);\r\n\t\tif(instance != null)\r\n\t\t\tthis.form.cmbCodeSystem().setValue(instance);\r\n\t}\r\n\tprotected final void defaultcmbCodeSystemLookupValue()\r\n\t{\r\n\t\tthis.form.cmbCodeSystem().setValue((ims.core.vo.lookups.TaxonomyType)domain.getLookupService().getDefaultInstance(ims.core.vo.lookups.TaxonomyType.class, engine.getFormName().getID(), ims.core.vo.lookups.TaxonomyType.TYPE_ID));\r\n\t}\r\n\tprotected void clearScreen()\r\n\t{\r\n\t\tthis.form.txtHL7Application().setValue(\"\");\r\n\t\tthis.form.cmbCategory().setValue(null);\r\n\t\tthis.form.txtSystemName().setValue(\"\");\r\n\t\tthis.form.cmbPrimaryId().setValue(null);\r\n\t\tthis.form.cmbCodeSystem().setValue(null);\r\n\t\tthis.form.txtSystemDescription().setValue(\"\");\r\n\t\tthis.form.intPort().setValue(null);\r\n\t\tthis.form.chkAssociateSafetyQuestionnaire().setValue(false);\r\n\t\tthis.form.chkAssociateReferralLetter().setValue(false);\r\n\t}\r\n\tprotected void populateScreenFromData(ims.ocrr.vo.ProviderSystemVo value)\r\n\t{\r\n\t\tclearScreen();\r\n\t\tif(value == null)\r\n\t\t\treturn;\r\n\r\n\t\tthis.form.txtHL7Application().setValue(value.getHl7ApplicationIsNotNull() ? value.getHl7Application(): null);\r\n\t\tthis.form.cmbCategory().setValue(value.getCategoryIsNotNull() ? value.getCategory() : null);\r\n\t\tthis.form.txtSystemName().setValue(value.getSystemNameIsNotNull() ? value.getSystemName(): null);\r\n\t\tthis.form.cmbPrimaryId().setValue(value.getPrimaryPatientIdIsNotNull() ? value.getPrimaryPatientId() : null);\r\n\t\tthis.form.cmbCodeSystem().setValue(value.getCodeSystemIsNotNull() ? value.getCodeSystem() : null);\r\n\t\tthis.form.txtSystemDescription().setValue(value.getDescriptionIsNotNull() ? value.getDescription(): null);\r\n\t\tthis.form.intPort().setValue(value.getIPPortIsNotNull() ? value.getIPPort() : null);\r\n\t\tif(value.getSendQuestionnaireIsNotNull())\r\n\t\t\tthis.form.chkAssociateSafetyQuestionnaire().setValue(value.getSendQuestionnaire().booleanValue());\r\n\t\tif(value.getSendReferralLetterIsNotNull())\r\n\t\t\tthis.form.chkAssociateReferralLetter().setValue(value.getSendReferralLetter().booleanValue());\r\n\t}\r\n\tprotected ims.ocrr.vo.ProviderSystemVo populateDataFromScreen(ims.ocrr.vo.ProviderSystemVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\tvalue = new ims.ocrr.vo.ProviderSystemVo();\r\n\r\n\t\tvalue.setHl7Application(this.form.txtHL7Application().getValue());\r\n\t\tvalue.setCategory(this.form.cmbCategory().getValue());\r\n\t\tvalue.setSystemName(this.form.txtSystemName().getValue());\r\n\t\tvalue.setPrimaryPatientId(this.form.cmbPrimaryId().getValue());\r\n\t\tvalue.setCodeSystem(this.form.cmbCodeSystem().getValue());\r\n\t\tvalue.setDescription(this.form.txtSystemDescription().getValue());\r\n\t\tvalue.setIPPort(this.form.intPort().getValue());\r\n\t\tvalue.setSendQuestionnaire(new Boolean(this.form.chkAssociateSafetyQuestionnaire().getValue()));\r\n\t\tvalue.setSendReferralLetter(new Boolean(this.form.chkAssociateReferralLetter().getValue()));\r\n\r\n\t\treturn value;\r\n\t}\r\n\tprotected ims.ocrr.vo.ProviderSystemVo populateDataFromScreen()\r\n\t{\r\n\t\treturn populateDataFromScreen(new ims.ocrr.vo.ProviderSystemVo());\r\n\t}\r\n\tpublic final void free()\r\n\t{\r\n\t\tsuper.free();\r\n\t\tdomain = null;\r\n\t}\r\n\t\r\n\tprotected ims.admin.domain.ProviderSystemAdmin domain;\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Admin/src/ims/admin/forms/providersystemadmin/BaseLogic.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"8a1c4056ca42cc65e20d07be3091db1e72d6bc66","size":"7850","content":"/*\n * Copyright (C) 2014 University of Bologna\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.most.pipeline;\n\nimport java.util.ArrayList;\nimport java.util.Set;\nimport java.util.TreeSet;\n\nimport org.most.DataBundle;\nimport org.most.MoSTApplication;\nimport org.most.input.GoogleActivityRecognitionInput;\nimport org.most.input.Input;\nimport org.most.input.InputAccelerometer;\nimport org.most.persistence.DBAdapter;\nimport org.most.weka.Features;\nimport org.most.weka.WekaClassifier;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.util.Log;\n\npublic class PipelineActivityRecognitionCompare extends Pipeline {\n\n\tpublic static final String PREF_KEY_DUMP_TO_DB = \"PipelineActivityRecognitionCompare.DumpToDB\";\n\tpublic static final boolean PREF_DEFAULT_DUMP_TO_DB = true;\n\tpublic static final String PREF_KEY_SEND_INTENT = \"PipelineActivityRecognitionCompare.SendIntent\";\n\tpublic static final boolean PREF_DEFAULT_SEND_INTENT = false;\n\tpublic static final String PREF_KEY_USER_ACTIVITY= \"PipelineActivityRecognitionCompare.activity\";\n\tpublic static final String PREF_DEFAULT_USER_ACTIVITY = \"unknown\";\n\t\n\t// intent\n\tpublic static final String KEY_ACTION = \"PipelineActivityRecognitionCompare\";\n\t\n\tpublic static final String KEY_USER_ACTIVITY = \"PipelineActivityRecognitionCompare.userActivity\";\n\t\n\tpublic final static String KEY_G_TIMESTAMP = \"PipelineActivityRecognitionCompare.gTimestamp\";\n\tpublic final static String KEY_G_CONFIDENCE = \"PipelineActivityRecognitionCompare.gConfidence\";\n\tpublic final static String KEY_G_RECOGNIZED_ACTIVITY = \"PipelineActivityRecognitionCompare.gActivityRecognition\";\n\n\tpublic final static String KEY_D_RECOGNIZED_ACTIVITY = \"PipelineActivityRecognitionCompare.dActivityRecognition\";\n\tpublic final static String KEY_D_TIMESTAMP = \"PipelineActivityRecognitionCompare.dTimestamp\";\n\n\n\t// persistence\t\n\t\n\tpublic final static String FLD_TIMESTAMP = \"TIMESTAMP\";\n\tpublic final static String FLD_USER_ACTIVITY = \"USER_ACTIVITY\";\n\t\n\tpublic final static String FLD_G_TIMESTAMP = \"G_TIMESTAMP\";\n\tpublic final static String FLD_G_CONFIDENCE = \"G_CONFIDENCE\";\n\tpublic final static String FLD_G_RECOGNIZED_ACTIVITY = \"G_RECOGNIZED_ACTIVITY\";\n\n\tpublic static final String FLD_D_TIMESTAMP = \"D_TIMESTAMP\";\n\tpublic static final String FLD_D_VALUE = \"D_RECOGNIZED_ACTIVITY\";\n\n\tpublic final static String TBL_ACTIVITY_RECOGNITION_COMPARE = \"ACTIVITY_RECOGNITION_COMPARE\";\n\n\tpublic static final String CREATE_ACTIVITY_RECOGNITION_COMPARE_TABLE = String\n\t\t\t.format(\"_ID INTEGER PRIMARY KEY, %s INT NOT NULL, %s TEXT NOT NULL, %s INT NOT NULL, %s TEXT NOT NULL, %s INT NOT NULL, %s INT NOT NULL, %s TEXT NOT NULL\",\n\t\t\t\t\tFLD_TIMESTAMP, FLD_USER_ACTIVITY, FLD_G_TIMESTAMP, FLD_G_RECOGNIZED_ACTIVITY, FLD_G_CONFIDENCE, FLD_D_TIMESTAMP,\n\t\t\t\t\tFLD_D_VALUE);\n\n\tprivate boolean _isDump;\n\tprivate boolean _isSend;\n\tprivate String _userActivity;\n\tprivate DBAdapter _dbAdapter;\n\n\tprivate ArrayList<Float> x;\n\tprivate ArrayList<Float> y;\n\tprivate ArrayList<Float> z;\n\tprivate Features f;\n\tprivate long startTime;\n\tprivate long lastGTimestamp;\n\tprivate long lastDTimestamp;\n\n\tString gActivityRecognition = \"\";\n\tint gConfidence = 0;\n\tlong gTimestamp = 0;\n\n\tString dActivityRecognition = \"\";\n\tlong dTimestamp = 0;\n\n\tpublic PipelineActivityRecognitionCompare(MoSTApplication context) {\n\t\tsuper(context);\n\t}\n\n\t@Override\n\tpublic void onInit() {\n\t\tx = new ArrayList<Float>();\n\t\ty = new ArrayList<Float>();\n\t\tz = new ArrayList<Float>();\n\t\tf = new Features();\n\t\tsuper.onInit();\n\t}\n\n\t@Override\n\tpublic boolean onActivate() {\n\t\t_isDump = getContext().getSharedPreferences(MoSTApplication.PREF_PIPELINES,\n\t\t\t\tContext.MODE_PRIVATE).getBoolean(PREF_KEY_DUMP_TO_DB, PREF_DEFAULT_DUMP_TO_DB);\n\t\t_isSend = getContext().getSharedPreferences(MoSTApplication.PREF_PIPELINES,\n\t\t\t\tContext.MODE_PRIVATE).getBoolean(PREF_KEY_SEND_INTENT, PREF_DEFAULT_SEND_INTENT);\n\t\t_userActivity = getContext().getSharedPreferences(MoSTApplication.PREF_PIPELINES,\n\t\t\t\tContext.MODE_PRIVATE).getString(PREF_KEY_USER_ACTIVITY, PREF_DEFAULT_USER_ACTIVITY);\n\t\t_dbAdapter = getContext().getDbAdapter();\n\t\tLog.e(PipelineActivityRecognitionCompare.class.getSimpleName(), \"Activated with \" + _userActivity);\n\t\treturn super.onActivate();\n\t}\n\n\tpublic synchronized void onData(DataBundle b) {\n\t\ttry {\n\n\t\t\tif (b.getInt(KEY_TYPE) == Input.Type.GOOGLE_ACTIVITY_RECOGNITION.toInt()) {\n\t\t\t\tgActivityRecognition = b\n\t\t\t\t\t\t.getString(GoogleActivityRecognitionInput.KEY_RECOGNIZED_ACTIVITY);\n\t\t\t\tgConfidence = b.getInt(GoogleActivityRecognitionInput.KEY_CONFIDENCE);\n\t\t\t\tgTimestamp = b.getLong(Input.KEY_TIMESTAMP);\n\t\t\t}\n\n\t\t\tif (b.getInt(KEY_TYPE) == Input.Type.ACCELEROMETER.toInt()) {\n\t\t\t\tfloat[] values = b.getFloatArray(InputAccelerometer.KEY_ACCELERATIONS);\n\t\t\t\tlong currentTime = System.currentTimeMillis();\n\n\t\t\t\tif ((x.size() == 0) && (y.size() == 0) && (z.size() == 0)) {\n\t\t\t\t\tstartTime = currentTime;\n\t\t\t\t}\n\t\t\t\tif (currentTime < startTime + 2000) {\n\t\t\t\t\tx.add(values[0]);\n\t\t\t\t\ty.add(values[1]);\n\t\t\t\t\tz.add(values[2]);\n\t\t\t\t} else {\n\t\t\t\t\tf.calcolaX(x);\n\t\t\t\t\tf.calcolaY(y);\n\t\t\t\t\tf.calcolaZ(z);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tint result = (int) WekaClassifier.classify(f.getFeatures());\n\t\t\t\t\t\tif (result == 0f)\n\t\t\t\t\t\t\tdActivityRecognition = \"staticoSulTavolo\";\n\t\t\t\t\t\telse if (result == 1)\n\t\t\t\t\t\t\tdActivityRecognition = \"staticoInTasca\";\n\t\t\t\t\t\telse if (result == 2)\n\t\t\t\t\t\t\tdActivityRecognition = \"camminando\";\n\t\t\t\t\t\telse if (result == 3)\n\t\t\t\t\t\t\tdActivityRecognition = \"correndo\";\n\t\t\t\t\t\tx.removeAll(x);\n\t\t\t\t\t\ty.removeAll(y);\n\t\t\t\t\t\tz.removeAll(z);\n\t\t\t\t\t\tdTimestamp = System.currentTimeMillis();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (dTimestamp != 0 && gTimestamp != 0) {\n\n\t\t\t\tif (Math.abs(gTimestamp - dTimestamp) < 4000) {\n\n\t\t\t\t\tif (lastGTimestamp != gTimestamp && lastDTimestamp != dTimestamp) {\n\n\t\t\t\t\t\tlastDTimestamp = dTimestamp;\n\t\t\t\t\t\tlastGTimestamp = gTimestamp;\n\t\t\t\t\t\t\n\t\t\t\t\t\tlong now = System.currentTimeMillis();\n\n\t\t\t\t\t\tif (_isDump || _isSend) {\n\n\t\t\t\t\t\t\tif (_isDump) {\n\t\t\t\t\t\t\t\tContentValues cv = new ContentValues();\n\t\t\t\t\t\t\t\tcv.put(FLD_USER_ACTIVITY, _userActivity);\n\t\t\t\t\t\t\t\tcv.put(FLD_TIMESTAMP, now);\n\t\t\t\t\t\t\t\tcv.put(FLD_G_TIMESTAMP, gTimestamp);\n\t\t\t\t\t\t\t\tcv.put(FLD_G_RECOGNIZED_ACTIVITY, gActivityRecognition);\n\t\t\t\t\t\t\t\tcv.put(FLD_G_CONFIDENCE, gConfidence);\n\t\t\t\t\t\t\t\tcv.put(FLD_D_TIMESTAMP, dTimestamp);\n\t\t\t\t\t\t\t\tcv.put(FLD_D_VALUE, dActivityRecognition);\n\t\t\t\t\t\t\t\t_dbAdapter.storeData(TBL_ACTIVITY_RECOGNITION_COMPARE, cv, true);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (_isSend) {\n\t\t\t\t\t\t\t\tIntent i = new Intent(KEY_ACTION);\n\t\t\t\t\t\t\t\ti.putExtra(KEY_TIMESTAMP, now);\n\t\t\t\t\t\t\t\ti.putExtra(KEY_USER_ACTIVITY, _userActivity);\n\t\t\t\t\t\t\t\ti.putExtra(KEY_G_TIMESTAMP, gTimestamp);\n\t\t\t\t\t\t\t\ti.putExtra(KEY_G_RECOGNIZED_ACTIVITY, gActivityRecognition);\n\t\t\t\t\t\t\t\ti.putExtra(KEY_G_CONFIDENCE, gConfidence);\n\t\t\t\t\t\t\t\ti.putExtra(KEY_D_TIMESTAMP, dTimestamp);\n\t\t\t\t\t\t\t\ti.putExtra(KEY_D_RECOGNIZED_ACTIVITY, dActivityRecognition);\n\t\t\t\t\t\t\t\t getContext().sendBroadcast(i);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tb.release();\n\t\t}\n\t}\n\n\t@Override\n\tpublic Type getType() {\n\t\treturn Type.ACTIVITY_RECOGNITION_COMPARE;\n\t}\n\n\t@Override\n\tpublic Set<Input.Type> getInputs() {\n\t\tSet<Input.Type> result = new TreeSet<Input.Type>();\n\t\tresult.add(Input.Type.GOOGLE_ACTIVITY_RECOGNITION);\n\t\tresult.add(Input.Type.ACCELEROMETER);\n\t\treturn result;\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"participactunibo/MoST","sample_ref":"refs/heads/master","sample_path":"src/org/most/pipeline/PipelineActivityRecognitionCompare.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"cef4c3fb39ba8f6e949b0e2c50b45f7fca9af0c2","size":"7344","content":"/**\n * DataCleaner (community edition)\n * Copyright (C) 2014 Neopost - Customer Information Management\n *\n * This copyrighted material is made available to anyone wishing to use, modify,\n * copy, or redistribute it subject to the terms and conditions of the GNU\n * Lesser General Public License, as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this distribution; if not, write to:\n * Free Software Foundation, Inc.\n * 51 Franklin Street, Fifth Floor\n * Boston, MA  02110-1301  USA\n */\npackage org.datacleaner.panels;\n\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.Icon;\nimport javax.swing.JButton;\nimport javax.swing.JOptionPane;\nimport javax.swing.SwingConstants;\n\nimport org.apache.metamodel.schema.ColumnType;\nimport org.apache.metamodel.schema.Schema;\nimport org.apache.metamodel.schema.Table;\nimport org.apache.metamodel.util.SimpleTableDef;\nimport org.datacleaner.util.IconUtils;\nimport org.datacleaner.util.ImageManager;\nimport org.datacleaner.util.SchemaFactory;\nimport org.datacleaner.util.StringUtils;\nimport org.datacleaner.util.WidgetFactory;\nimport org.datacleaner.util.WidgetUtils;\nimport org.datacleaner.widgets.Alignment;\nimport org.datacleaner.widgets.DCLabel;\nimport org.datacleaner.widgets.tabs.CloseableTabbedPane;\nimport org.datacleaner.widgets.tabs.TabCloseEvent;\nimport org.datacleaner.widgets.tabs.TabCloseListener;\n\n/**\n * A panel for letting the user build multiple {@link SimpleTableDef}s\n */\npublic class SimpleTableDefsPanel extends DCPanel {\n\n    private static final long serialVersionUID = 1L;\n\n    private static final Icon TABLE_ICON = ImageManager.get().getImageIcon(IconUtils.MODEL_TABLE,\n            IconUtils.ICON_SIZE_TAB);\n\n    private final CloseableTabbedPane _tabbedPane;\n    private final SchemaFactory _schemaFactory;\n    private final DCLabel _instructionsLabel;\n\n    private DCPanel _tabbedPaneContainer;\n\n    public SimpleTableDefsPanel() {\n        this(null);\n    }\n\n    public SimpleTableDefsPanel(SchemaFactory schemaFactory) {\n        this(schemaFactory, null);\n    }\n\n    public SimpleTableDefsPanel(SchemaFactory schemaFactory, SimpleTableDef[] tableDefs) {\n        super();\n        _schemaFactory = schemaFactory;\n        _tabbedPane = new CloseableTabbedPane();\n        _instructionsLabel = DCLabel.bright(\"Click 'Add table' above to define the first table.\");\n        _instructionsLabel.setFont(WidgetUtils.FONT_HEADER1);\n        _instructionsLabel.setHorizontalAlignment(SwingConstants.CENTER);\n        _instructionsLabel.setVerticalAlignment(SwingConstants.CENTER);\n\n        _tabbedPaneContainer = new DCPanel(CloseableTabbedPane.COLOR_BACKGROUND);\n        _tabbedPaneContainer.setLayout(new BorderLayout());\n\n        setLayout(new BorderLayout());\n\n        if (tableDefs == null || tableDefs.length == 0) {\n            setTabbedPaneVisible(false);\n        } else {\n            for (SimpleTableDef tableDef : tableDefs) {\n                addTableDef(tableDef);\n            }\n        }\n\n        add(WidgetUtils.decorateWithShadow(_tabbedPaneContainer), BorderLayout.CENTER);\n        add(createButtonPanel(), BorderLayout.NORTH);\n        setMinimumSize(new Dimension(400, 300));\n\n        _tabbedPane.addTabCloseListener(new TabCloseListener() {\n            @Override\n            public void tabClosed(TabCloseEvent ev) {\n                if (_tabbedPane.getTabCount() == 0) {\n                    setTabbedPaneVisible(false);\n                }\n            }\n        });\n    }\n\n    private void setTabbedPaneVisible(boolean showTabbedPane) {\n        _tabbedPaneContainer.removeAll();\n        if (showTabbedPane) {\n            _tabbedPaneContainer.add(_tabbedPane, BorderLayout.CENTER);\n        } else {\n            _tabbedPaneContainer.add(_instructionsLabel, BorderLayout.CENTER);\n        }\n        _tabbedPaneContainer.updateUI();\n    }\n\n    private DCPanel createButtonPanel() {\n        final JButton addButton = WidgetFactory.createSmallButton(IconUtils.ACTION_ADD_DARK);\n        addButton.setText(\"Add table\");\n        addButton.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                final String tableName = JOptionPane.showInputDialog(SimpleTableDefsPanel.this,\n                        \"What is the name of the table\", \"Add table\", JOptionPane.QUESTION_MESSAGE);\n                if (!StringUtils.isNullOrEmpty(tableName)) {\n                    SimpleTableDef tableDef = new SimpleTableDef(tableName, new String[0]);\n                    addTableDef(tableDef);\n                }\n            }\n        });\n\n        final DCPanel buttonPanel;\n\n        if (_schemaFactory != null) {\n            final JButton autoDetectButton = WidgetFactory.createSmallButton(IconUtils.ACTION_REFRESH);\n            autoDetectButton.setText(\"Auto-detect tables\");\n            autoDetectButton.addActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    removeAllTableDefs();\n\n                    Schema schema = _schemaFactory.createSchema();\n                    Table[] tables = schema.getTables();\n                    for (Table table : tables) {\n                        addTableDef(createTableDef(table));\n                    }\n                }\n            });\n            buttonPanel = DCPanel.flow(Alignment.RIGHT, 10, 10, addButton, autoDetectButton);\n        } else {\n            buttonPanel = DCPanel.flow(Alignment.RIGHT, 10, 10, addButton);\n        }\n\n        return buttonPanel;\n    }\n\n    private SimpleTableDef createTableDef(Table table) {\n        int columnCount = table.getColumnCount();\n        String[] names = new String[columnCount];\n        ColumnType[] types = new ColumnType[columnCount];\n        for (int i = 0; i < columnCount; i++) {\n            names[i] = table.getColumn(i).getName();\n            types[i] = table.getColumn(i).getType();\n        }\n        return new SimpleTableDef(table.getName(), names, types);\n    }\n\n    public void removeAllTableDefs() {\n        while (_tabbedPane.getTabCount() > 0) {\n            _tabbedPane.removeTabAt(_tabbedPane.getTabCount() - 1);\n        }\n    }\n\n    public void addTableDef(SimpleTableDef tableDef) {\n        _tabbedPane.addTab(tableDef.getName(), TABLE_ICON, new SimpleTableDefPanel(tableDef));\n        setTabbedPaneVisible(true);\n    }\n\n    public SimpleTableDef[] getTableDefs() {\n        final int tabCount = _tabbedPane.getTabCount();\n        final SimpleTableDef[] result = new SimpleTableDef[tabCount];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = getTableDef(i);\n        }\n        return result;\n    }\n\n    private SimpleTableDef getTableDef(int index) {\n        final Component component = _tabbedPane.getComponentAt(index);\n        final SimpleTableDefPanel panel = (SimpleTableDefPanel) component;\n        return panel.getTableDef();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"datacleaner/DataCleaner","sample_ref":"refs/heads/master","sample_path":"desktop/ui/src/main/java/org/datacleaner/panels/SimpleTableDefsPanel.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"20cacb09fbb4b8383cf073bbf57829505f5dc0a7","size":"2284","content":"/**\n* OWASP Benchmark Project v1.2\n*\n* This file is part of the Open Web Application Security Project (OWASP)\n* Benchmark Project. For details, please see\n* <a href=\"https://www.owasp.org/index.php/Benchmark\">https://www.owasp.org/index.php/Benchmark</a>.\n*\n* The OWASP Benchmark is free software: you can redistribute it and/or modify it under the terms\n* of the GNU General Public License as published by the Free Software Foundation, version 2.\n*\n* The OWASP Benchmark is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n* even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n* GNU General Public License for more details.\n*\n* @author Nick Sanidas <a href=\"https://www.aspectsecurity.com\">Aspect Security</a>\n* @created 2015\n*/\n\npackage org.owasp.benchmark.testcode;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(value=\"/trustbound-00/BenchmarkTest00669\")\npublic class BenchmarkTest00669 extends HttpServlet {\n\t\n\tprivate static final long serialVersionUID = 1L;\n\t\n\t@Override\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tdoPost(request, response);\n\t}\n\n\t@Override\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tresponse.setContentType(\"text/html\");\n\t\n\t\torg.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request );\n\t\tString param = scr.getTheParameter(\"BenchmarkTest00669\");\n\t\tif (param == null) param = \"\";\n\t\t\n\t\t\n\t\tString bar;\n\t\t\n\t\t// Simple if statement that assigns constant to bar on true condition\n\t\tint num = 86;\n\t\tif ( (7*42) - num > 200 )\n\t\t   bar = \"This_should_always_happen\"; \n\t\telse bar = param;\n\t\t\n\t\t\n\t\t// javax.servlet.http.HttpSession.putValue(java.lang.String^,java.lang.Object)\n\t\trequest.getSession().putValue( bar, \"10340\");\n\t\t\n\t\tresponse.getWriter().println(\n\"Item: '\" + org.owasp.benchmark.helpers.Utils.encodeForHTML(bar)\n\t\t\t+ \"' with value: 10340 saved in session.\"\n);\n\t}\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"OWASP/Benchmark","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/owasp/benchmark/testcode/BenchmarkTest00669.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b6dcb7196adc281d721bc72d0af34115d9adcac8","size":"366","content":"package me.tatarka.testsuperlongrecylerview;\n\nimport android.app.Application;\nimport android.test.ApplicationTestCase;\n\n/**\n * <a href=\"http://d.android.com/tools/testing/testing_android.html\">Testing Fundamentals</a>\n */\npublic class ApplicationTest extends ApplicationTestCase<Application> {\n    public ApplicationTest() {\n        super(Application.class);\n    }\n}","binary":"false","copies":"1","sample_repo_name":"evant/android-scroll-to-position-test","sample_ref":"refs/heads/master","sample_path":"app/src/androidTest/java/me/tatarka/testsuperlongrecylerview/ApplicationTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"229186780bd3b67a67590fbc5150d10f12302e05","size":"367","content":"package com.tapglue.android;\n\nimport org.junit.Test;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.core.IsEqual.equalTo;\n\n/**\n * Created by John on 3/29/16.\n */\npublic class TapglueIntegrationTest {\n\n    @Test\n    public void failingTest(){\n        Tapglue tapglue = new Tapglue();\n        assertThat(true, equalTo(false));\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"tapglue/android_sdk","sample_ref":"refs/heads/master","sample_path":"tapglue-android-sdk/src/integration-test/java/com/tapglue/tapgluesdk/TapglueIntegrationTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b024f7bc7472c4fcdbef7856ba64bf52c3e4d8ba","size":"6652","content":"// Copyright 2014 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.api.ads.common.lib.soap.axis;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\nimport com.google.api.ads.common.lib.conf.AdsApiConfiguration;\nimport com.google.api.ads.common.lib.exception.ServiceException;\nimport com.google.api.ads.common.lib.soap.SoapServiceDescriptor;\nimport com.google.api.ads.common.lib.soap.axis.testing.mocks.v201511.MockAxisCompatibleServiceDescriptor;\nimport com.google.api.ads.common.lib.soap.axis.testing.mocks.v201511.MockAxisServiceInterface;\nimport com.google.api.ads.common.lib.utils.NodeExtractor;\nimport com.google.common.collect.Maps;\nimport com.google.common.collect.Sets;\n\nimport org.apache.axis.EngineConfigurationFactory;\nimport org.apache.axis.client.Stub;\nimport org.apache.axis.message.SOAPHeaderElement;\nimport org.apache.axis.transport.http.HTTPConstants;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ExpectedException;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\n\nimport java.util.Map;\n\n/**\n * Tests for {@link AxisHandler}.\n */\n@RunWith(JUnit4.class)\npublic class AxisHandlerTest {\n\n  private AxisHandler axisHandler;\n  private Stub stub;\n  \n  @Mock\n  private EngineConfigurationFactory engineConfigurationFactory;\n  @Mock\n  private NodeExtractor nodeExtractor;\n  @Mock\n  private AdsApiConfiguration adsApiConfiguration;\n  \n  @Rule\n  public ExpectedException thrown = ExpectedException.none();\n  \n  @Before\n  public void setUp() throws Exception {\n    MockitoAnnotations.initMocks(this);\n    axisHandler = new AxisHandler(engineConfigurationFactory, nodeExtractor, adsApiConfiguration);\n    stub = axisHandler.createSoapClient(new MockAxisCompatibleServiceDescriptor());\n  }\n\n  @Test\n  public void testCreateSoapClient_failNotAxisCompatible() {\n    thrown.expect(ServiceException.class);\n    axisHandler.createSoapClient(Mockito.mock(SoapServiceDescriptor.class));\n  }\n  \n  @Test\n  public void testCreateSoapClient_axisCompatible() {\n    assertNotNull(\"createSoapClient returned a null Stub\", stub);\n    assertTrue(\"createSoapClient did not return an implementation of the service interface\",\n        stub instanceof MockAxisServiceInterface);\n    MockAxisServiceInterface mockAxisServiceInterface = (MockAxisServiceInterface) stub;\n    assertEquals(\"getTestMessage did not return the correct message\",\n        MockAxisServiceInterface.TEST_MESSAGE, mockAxisServiceInterface.getTestMessage());\n    String expectedPrefixedMessage = \"myPrefix.\" + MockAxisServiceInterface.TEST_MESSAGE;\n    assertEquals(\"getTestMessageWithPrefix did not return the correct message\",\n        expectedPrefixedMessage, mockAxisServiceInterface.getTestMessageWithPrefix(\"myPrefix.\"));\n  }\n  \n  @Test\n  public void testSetAndGetHeader_valid() {\n    axisHandler.setHeader(stub, \"namespace\", \"header\", \"foo\");\n    SOAPHeaderElement headerElement = (SOAPHeaderElement) axisHandler.getHeader(stub, \"header\");\n    assertNotNull(\"getHeader did not return the header that was just set\", headerElement);\n    assertEquals(\"value of the header did not match the value set\", \"foo\",\n        headerElement.getValue());\n  }\n  \n  @Test\n  public void testSetChildHeader_failParentMissing() {\n    thrown.expect(NullPointerException.class);\n    axisHandler.setHeaderChild(stub, \"parent\", \"child\", \"123\");\n  }\n  \n  @Test\n  public void testSetChildHeader_valid() {\n    Map<String, String> parentValue = Maps.newHashMap();\n    axisHandler.setHeader(stub, \"namespace\", \"parent\", parentValue);\n    String childValue = \"123\";\n    axisHandler.setHeaderChild(stub, \"parent\", \"child\", childValue);\n\n    assertEquals(\"Child was not set to the expected value on the parent header's underlying map\",\n        childValue, parentValue.get(\"child\"));\n\n    SOAPHeaderElement parentHeaderElement =\n        (SOAPHeaderElement) axisHandler.getHeader(stub, \"parent\");\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> actualParentValue =\n        (Map<String, String>) parentHeaderElement.getObjectValue();\n\n    String actualChildValue = actualParentValue.get(\"child\");\n    assertEquals(\"Child retrieved by navigating through the parent header does not have the \"\n        + \"expected value\", childValue, actualChildValue);\n\n    assertEquals(\"The only key in the parent header's underlying map should be the child added\",\n        Sets.newHashSet(\"child\"), parentValue.keySet());\n  }\n\n  /**\n   * Test that invoking clearHeaders with a handler and stub without any headers set\n   * does not fail.\n   */\n  @Test\n  public void testClearHeaders_succeedWhenEmpty() {\n    axisHandler.clearHeaders(stub);\n    assertEquals(\"stub.getHeaders is not empty after invoking clearHeaders\", 0,\n        stub.getHeaders().length);\n  }\n  \n  @Test\n  public void testClearHeaders_succeedWhenNotEmpty() {\n    axisHandler.setHeader(stub, \"namespace\", \"someHeader\", \"someValue\");\n    axisHandler.clearHeaders(stub);\n    assertEquals(\"stub.getHeaders is not empty after invoking clearHeaders\", 0,\n        stub.getHeaders().length);\n    assertNull(\"getHeader returned a non-null header after invoking clearHeaders\",\n        axisHandler.getHeader(stub, \"someHeader\"));\n  }\n  \n  @Test\n  public void testSetCompression_true() {\n    axisHandler.setCompression(stub, true);\n    assertTrue((Boolean) stub._getProperty(HTTPConstants.MC_ACCEPT_GZIP));\n    assertTrue((Boolean) stub._getProperty(HTTPConstants.MC_GZIP_REQUEST));\n  }\n\n  @Test\n  public void testSetCompression_false() {\n    axisHandler.setCompression(stub, false);\n    assertFalse((Boolean) stub._getProperty(HTTPConstants.MC_ACCEPT_GZIP));\n    assertFalse((Boolean) stub._getProperty(HTTPConstants.MC_GZIP_REQUEST));\n  }\n  \n  @Test\n  public void testSetRequestTimeout() {\n    axisHandler.setRequestTimeout(stub, 12345);\n    assertEquals(12345, stub.getTimeout());\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"googleads/googleads-java-lib","sample_ref":"refs/heads/master","sample_path":"modules/ads_lib_axis/src/test/java/com/google/api/ads/common/lib/soap/axis/AxisHandlerTest.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"132ab2b27fabeb414a9e646f5924975f2c603687","size":"15398","content":"/*\n  This file is part of Subsonic.\n\tSubsonic is free software: you can redistribute it and/or modify\n\tit under the terms of the GNU General Public License as published by\n\tthe Free Software Foundation, either version 3 of the License, or\n\t(at your option) any later version.\n\tSubsonic is distributed in the hope that it will be useful,\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\tGNU General Public License for more details.\n\tYou should have received a copy of the GNU General Public License\n\talong with Subsonic. If not, see <http://www.gnu.org/licenses/>.\n\tCopyright 2015 (C) Scott Jackson\n*/\n\npackage github.popeen.dsub.adapter;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.content.res.Resources;\nimport android.os.Build;\nimport android.support.v7.view.ActionMode;\nimport android.support.v7.widget.RecyclerView;\nimport android.util.Log;\nimport android.util.TypedValue;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.PopupMenu;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport github.popeen.dsub.R;\nimport github.popeen.dsub.activity.SubsonicFragmentActivity;\nimport github.popeen.dsub.util.Constants;\nimport github.popeen.dsub.util.MenuUtil;\nimport github.popeen.dsub.util.Util;\nimport github.popeen.dsub.view.BasicHeaderView;\nimport github.popeen.dsub.view.UpdateView;\nimport github.popeen.dsub.view.UpdateView.UpdateViewHolder;\n\npublic abstract class SectionAdapter<T> extends RecyclerView.Adapter<UpdateViewHolder<T>> {\n\tprivate static String TAG = SectionAdapter.class.getSimpleName();\n\tpublic static int VIEW_TYPE_HEADER = 0;\n\tpublic static String[] ignoredArticles;\n\n\tprotected Context context;\n\tprotected List<String> headers;\n\tprotected List<List<T>> sections;\n\tprotected boolean singleSectionHeader;\n\tprotected OnItemClickedListener<T> onItemClickedListener;\n\tprotected List<T> selected = new ArrayList<>();\n\tprotected List<UpdateView> selectedViews = new ArrayList<>();\n\tprotected ActionMode currentActionMode;\n\tprotected boolean checkable = false;\n\n\tprotected SectionAdapter() {}\n\tpublic SectionAdapter(Context context, List<T> section) {\n\t\tthis(context, section, false);\n\t}\n\tpublic SectionAdapter(Context context, List<T> section, boolean singleSectionHeader) {\n\t\tthis.context = context;\n\t\tthis.headers = Arrays.asList(\"Section\");\n\t\tthis.sections = new ArrayList<>();\n\t\tthis.sections.add(section);\n\t\tthis.singleSectionHeader = singleSectionHeader;\n\t}\n\tpublic SectionAdapter(Context context, List<String> headers, List<List<T>> sections) {\n\t\tthis(context, headers, sections, true);\n\t}\n\tpublic SectionAdapter(Context context, List<String> headers, List<List<T>> sections, boolean singleSectionHeader){\n\t\tthis.context = context;\n\t\tthis.headers = headers;\n\t\tthis.sections = sections;\n\t\tthis.singleSectionHeader = singleSectionHeader;\n\t}\n\n\tpublic void replaceExistingData(List<T> section) {\n\t\tthis.sections = new ArrayList<>();\n\t\tthis.sections.add(section);\n\t\tnotifyDataSetChanged();\n\t}\n\tpublic void replaceExistingData(List<String> headers, List<List<T>> sections) {\n\t\tthis.headers = headers;\n\t\tthis.sections = sections;\n\t\tnotifyDataSetChanged();\n\t}\n\n\t@Override\n\tpublic UpdateViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n\t\tif(viewType == VIEW_TYPE_HEADER) {\n\t\t\treturn onCreateHeaderHolder(parent);\n\t\t} else {\n\t\t\tfinal UpdateViewHolder<T> holder = onCreateSectionViewHolder(parent, viewType);\n\t\t\tfinal UpdateView updateView = holder.getUpdateView();\n\n\t\t\tif(updateView != null) {\n\t\t\t\tupdateView.getChildAt(0).setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\t\tT item = holder.getItem();\n\t\t\t\t\t\tupdateView.onClick();\n\t\t\t\t\t\tif (currentActionMode != null) {\n\t\t\t\t\t\t\tif(updateView.isCheckable()) {\n\t\t\t\t\t\t\t\tif (selected.contains(item)) {\n\t\t\t\t\t\t\t\t\tselected.remove(item);\n\t\t\t\t\t\t\t\t\tselectedViews.remove(updateView);\n\t\t\t\t\t\t\t\t\tsetChecked(updateView, false);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tselected.add(item);\n\t\t\t\t\t\t\t\t\tselectedViews.add(updateView);\n\t\t\t\t\t\t\t\t\tsetChecked(updateView, true);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (selected.isEmpty()) {\n\t\t\t\t\t\t\t\t\tcurrentActionMode.finish();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcurrentActionMode.setTitle(context.getResources().getString(R.string.select_album_n_selected, selected.size()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (onItemClickedListener != null) {\n\t\t\t\t\t\t\tonItemClickedListener.onItemClicked(updateView, item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tView moreButton = updateView.findViewById(R.id.item_more);\n\t\t\t\tif (moreButton != null) {\n\t\t\t\t\tmoreButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfinal T item = holder.getItem();\n\t\t\t\t\t\t\t\tif (onItemClickedListener != null) {\n\t\t\t\t\t\t\t\t\tPopupMenu popup = new PopupMenu(context, v);\n\t\t\t\t\t\t\t\t\tonItemClickedListener.onCreateContextMenu(popup.getMenu(), popup.getMenuInflater(), updateView, item);\n\n\t\t\t\t\t\t\t\t\tpopup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {\n\t\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t\tpublic boolean onMenuItemClick(MenuItem menuItem) {\n\t\t\t\t\t\t\t\t\t\t\treturn onItemClickedListener.onContextItemSelected(menuItem, updateView, item);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tpopup.show();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch(Exception e) {\n\t\t\t\t\t\t\t\tLog.w(TAG, \"Failed to show popup\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif(checkable) {\n\t\t\t\t\t\tupdateView.getChildAt(0).setOnLongClickListener(new View.OnLongClickListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic boolean onLongClick(View v) {\n\t\t\t\t\t\t\t\tif(updateView.isCheckable()) {\n\t\t\t\t\t\t\t\t\tif (currentActionMode == null) {\n\t\t\t\t\t\t\t\t\t\tstartActionMode(holder);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tupdateView.getChildAt(0).performClick();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn holder;\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onBindViewHolder(UpdateViewHolder holder, int position) {\n\t\tUpdateView updateView = holder.getUpdateView();\n\n\t\tif(sections.size() == 1 && !singleSectionHeader) {\n\t\t\tT item = sections.get(0).get(position);\n\t\t\tonBindViewHolder(holder, item, getItemViewType(position));\n\t\t\tpostBindView(updateView, item);\n\t\t\tholder.setItem(item);\n\t\t\treturn;\n\t\t}\n\n\t\tint subPosition = 0;\n\t\tint subHeader = 0;\n\t\tfor(List<T> section: sections) {\n\t\t\tboolean validHeader = headers.get(subHeader) != null;\n\t\t\tif(position == subPosition && validHeader) {\n\t\t\t\tonBindHeaderHolder(holder, headers.get(subHeader), subHeader);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint headerOffset = validHeader ? 1 : 0;\n\t\t\tif(position < (subPosition + section.size() + headerOffset)) {\n\t\t\t\tT item = section.get(position - subPosition - headerOffset);\n\t\t\t\tonBindViewHolder(holder, item, getItemViewType(item));\n\n\t\t\t\tpostBindView(updateView, item);\n\t\t\t\tholder.setItem(item);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsubPosition += section.size();\n\t\t\tif(validHeader) {\n\t\t\t\tsubPosition += 1;\n\t\t\t}\n\t\t\tsubHeader++;\n\t\t}\n\t}\n\n\tprivate void postBindView(UpdateView updateView, T item) {\n\t\tif(updateView.isCheckable()) {\n\t\t\tsetChecked(updateView, selected.contains(item));\n\t\t}\n\n\t\tView moreButton = updateView.findViewById(R.id.item_more);\n\t\tif(moreButton != null) {\n\t\t\tif(onItemClickedListener != null) {\n\t\t\t\tPopupMenu popup = new PopupMenu(context, moreButton);\n\t\t\t\tMenu menu = popup.getMenu();\n\t\t\t\tonItemClickedListener.onCreateContextMenu(popup.getMenu(), popup.getMenuInflater(), updateView, item);\n\t\t\t\tif (menu.size() == 0) {\n\t\t\t\t\tmoreButton.setVisibility(View.GONE);\n\t\t\t\t} else {\n\t\t\t\t\tmoreButton.setVisibility(View.VISIBLE);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmoreButton.setVisibility(View.VISIBLE);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic int getItemCount() {\n\t\tif(sections.size() == 1 && !singleSectionHeader) {\n\t\t\treturn sections.get(0).size();\n\t\t}\n\n\t\tint count = 0;\n\t\tfor(String header: headers) {\n\t\t\tif(header != null) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tfor(List<T> section: sections) {\n\t\t\tcount += section.size();\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t@Override\n\tpublic int getItemViewType(int position) {\n\t\tif(sections.size() == 1 && !singleSectionHeader) {\n\t\t\treturn getItemViewType(sections.get(0).get(position));\n\t\t}\n\n\t\tint subPosition = 0;\n\t\tint subHeader = 0;\n\t\tfor(List<T> section: sections) {\n\t\t\tboolean validHeader = headers.get(subHeader) != null;\n\t\t\tif(position == subPosition && validHeader) {\n\t\t\t\treturn VIEW_TYPE_HEADER;\n\t\t\t}\n\n\t\t\tint headerOffset = validHeader ? 1 : 0;\n\t\t\tif(position < (subPosition + section.size() + headerOffset)) {\n\t\t\t\treturn getItemViewType(section.get(position - subPosition - headerOffset));\n\t\t\t}\n\n\t\t\tsubPosition += section.size();\n\t\t\tif(validHeader) {\n\t\t\t\tsubPosition += 1;\n\t\t\t}\n\t\t\tsubHeader++;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tpublic UpdateViewHolder onCreateHeaderHolder(ViewGroup parent) {\n\t\treturn new UpdateViewHolder(new BasicHeaderView(context));\n\t}\n\tpublic void onBindHeaderHolder(UpdateViewHolder holder, String header, int sectionIndex) {\n\t\tUpdateView view = holder.getUpdateView();\n\t\tif(view != null) {\n\t\t\tview.setObject(header);\n\t\t}\n\t}\n\n\tpublic T getItemForPosition(int position) {\n\t\tif(sections.size() == 1 && !singleSectionHeader) {\n\t\t\treturn sections.get(0).get(position);\n\t\t}\n\n\t\tint subPosition = 0;\n\t\tfor(List<T> section: sections) {\n\t\t\tif(position == subPosition) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif(position <= (subPosition + section.size())) {\n\t\t\t\treturn section.get(position - subPosition - 1);\n\t\t\t}\n\n\t\t\tsubPosition += section.size() + 1;\n\t\t}\n\n\t\treturn null;\n\t}\n\tpublic int getItemPosition(T item) {\n\t\tif(sections.size() == 1 && !singleSectionHeader) {\n\t\t\treturn sections.get(0).indexOf(item);\n\t\t}\n\n\t\tint subPosition = 0;\n\t\tfor(List<T> section: sections) {\n\t\t\tsubPosition += section.size() + 1;\n\n\t\t\tint position = section.indexOf(item);\n\t\t\tif(position != -1) {\n\t\t\t\treturn position + subPosition;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t}\n\n\tpublic void setOnItemClickedListener(OnItemClickedListener<T> onItemClickedListener) {\n\t\tthis.onItemClickedListener = onItemClickedListener;\n\t}\n\n\tpublic void addSelected(T item) {\n\t\tselected.add(item);\n\t}\n\tpublic List<T> getSelected() {\n\t\tList<T> selected = new ArrayList<>();\n\t\tselected.addAll(this.selected);\n\t\treturn selected;\n\t}\n\n\tpublic void clearSelected() {\n\t\t// TODO: This needs to work with multiple sections\n\t\tfor(T item: selected) {\n\t\t\tint index = sections.get(0).indexOf(item);\n\n\t\t\tif(singleSectionHeader) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tselected.clear();\n\n\t\tfor(UpdateView updateView: selectedViews) {\n\t\t\tupdateView.setChecked(false);\n\t\t}\n\t}\n\n\tpublic void moveItem(int from, int to) {\n\t\tList<T> section = sections.get(0);\n\t\tint max = section.size();\n\t\tif(to >= max) {\n\t\t\tto = max - 1;\n\t\t} else if(to < 0) {\n\t\t\tto = 0;\n\t\t}\n\n\t\tT moved = section.remove(from);\n\t\tsection.add(to, moved);\n\n\t\tnotifyItemMoved(from, to);\n\t}\n\tpublic void removeItem(T item) {\n\t\tint subPosition = 0;\n\t\tfor(List<T> section: sections) {\n\t\t\tif(sections.size() > 1 || singleSectionHeader) {\n\t\t\t\tsubPosition++;\n\t\t\t}\n\n\t\t\tint index = section.indexOf(item);\n\t\t\tif (index != -1) {\n\t\t\t\tsection.remove(item);\n\t\t\t\tnotifyItemRemoved(subPosition + index);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tsubPosition += section.size();\n\t\t}\n\t}\n\n\tpublic abstract UpdateView.UpdateViewHolder onCreateSectionViewHolder(ViewGroup parent, int viewType);\n\tpublic abstract void onBindViewHolder(UpdateViewHolder holder, T item, int viewType);\n\tpublic abstract int getItemViewType(T item);\n\tpublic void setCheckable(boolean checkable) {\n\t\tthis.checkable = checkable;\n\t}\n\tpublic void setChecked(UpdateView updateView, boolean checked) {\n\t\tupdateView.setChecked(checked);\n\t}\n\tpublic void onCreateActionModeMenu(Menu menu, MenuInflater menuInflater) {}\n\n\tprivate void startActionMode(final UpdateView.UpdateViewHolder<T> holder) {\n\t\tfinal UpdateView<T> updateView = holder.getUpdateView();\n\t\tif (context instanceof SubsonicFragmentActivity && currentActionMode == null) {\n\t\t\tfinal SubsonicFragmentActivity fragmentActivity = (SubsonicFragmentActivity) context;\n\t\t\tfragmentActivity.startSupportActionMode(new ActionMode.Callback() {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onCreateActionMode(ActionMode mode, Menu menu) {\n\t\t\t\t\tcurrentActionMode = mode;\n\n\t\t\t\t\tT item = holder.getItem();\n\t\t\t\t\tselected.add(item);\n\t\t\t\t\tselectedViews.add(updateView);\n\t\t\t\t\tsetChecked(updateView, true);\n\n\t\t\t\t\tonCreateActionModeMenu(menu, mode.getMenuInflater());\n\t\t\t\t\tMenuUtil.hideMenuItems(context, menu, updateView);\n\n\t\t\t\t\tmode.setTitle(context.getResources().getString(R.string.select_album_n_selected, selected.size()));\n\t\t\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && Util.getPreferences(context).getBoolean(Constants.PREFERENCES_KEY_COLOR_ACTION_BAR, true)) {\n\t\t\t\t\t\tTypedValue typedValue = new TypedValue();\n\t\t\t\t\t\tResources.Theme theme = context.getTheme();\n\t\t\t\t\t\ttheme.resolveAttribute(R.attr.colorPrimaryDark, typedValue, true);\n\t\t\t\t\t\tint colorPrimaryDark = typedValue.data;\n\n\t\t\t\t\t\tWindow window = ((SubsonicFragmentActivity) context).getWindow();\n\t\t\t\t\t\twindow.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);\n\t\t\t\t\t\twindow.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n\t\t\t\t\t\twindow.setStatusBarColor(colorPrimaryDark);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n\t\t\t\t\tif (fragmentActivity.onOptionsItemSelected(item)) {\n\t\t\t\t\t\tcurrentActionMode.finish();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onDestroyActionMode(ActionMode mode) {\n\t\t\t\t\tcurrentActionMode = null;\n\t\t\t\t\tselected.clear();\n\t\t\t\t\tfor (UpdateView<T> updateView : selectedViews) {\n\t\t\t\t\t\tupdateView.setChecked(false);\n\t\t\t\t\t}\n\t\t\t\t\tselectedViews.clear();\n\n\t\t\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && Util.getPreferences(context).getBoolean(Constants.PREFERENCES_KEY_COLOR_ACTION_BAR, true)) {\n\t\t\t\t\t\tWindow window = ((SubsonicFragmentActivity) context).getWindow();\n\t\t\t\t\t\twindow.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tpublic void stopActionMode() {\n\t\tif(currentActionMode != null) {\n\t\t\tcurrentActionMode.finish();\n\t\t}\n\t}\n\n\tpublic String getNameIndex(String name) {\n\t\treturn getNameIndex(name, false);\n\t}\n\tpublic String getNameIndex(String name, boolean removeIgnoredArticles) {\n\t\tif(name == null) {\n\t\t\treturn \"*\";\n\t\t}\n\n\t\tif(removeIgnoredArticles) {\n\t\t\tif (ignoredArticles == null) {\n\t\t\t\tSharedPreferences prefs = Util.getPreferences(context);\n\t\t\t\tString ignoredArticlesString = prefs.getString(Constants.CACHE_KEY_IGNORE, \"The El La Los Las Le Les\");\n\t\t\t\tignoredArticles = ignoredArticlesString.split(\" \");\n\t\t\t}\n\n\t\t\tname = name.toLowerCase();\n\t\t\tfor (String article : ignoredArticles) {\n\t\t\t\tint index = name.indexOf(article.toLowerCase() + \" \");\n\t\t\t\tif (index == 0) {\n\t\t\t\t\tname = name.substring(article.length() + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tString index = name.substring(0, 1).toUpperCase();\n\t\tif (!Character.isLetter(index.charAt(0))) {\n\t\t\tindex = \"#\";\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tpublic interface OnItemClickedListener<T> {\n\t\tvoid onItemClicked(UpdateView<T> updateView, T item);\n\t\tvoid onCreateContextMenu(Menu menu, MenuInflater menuInflater, UpdateView<T> updateView, T item);\n\t\tboolean onContextItemSelected(MenuItem menuItem, UpdateView<T> updateView, T item);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"popeen/Popeens-DSub","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/github/popeen/dsub/adapter/SectionAdapter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"63cc893dd4cd6885feb85c4455cd2dd48b971e0c","size":"10256","content":"/**\n * DataCleaner (community edition)\n * Copyright (C) 2014 Neopost - Customer Information Management\n *\n * This copyrighted material is made available to anyone wishing to use, modify,\n * copy, or redistribute it subject to the terms and conditions of the GNU\n * Lesser General Public License, as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this distribution; if not, write to:\n * Free Software Foundation, Inc.\n * 51 Franklin Street, Fifth Floor\n * Boston, MA  02110-1301  USA\n */\npackage org.datacleaner.connection;\n\nimport java.util.List;\n\nimport org.apache.metamodel.DataContext;\nimport org.apache.metamodel.UpdateableDataContext;\nimport org.apache.metamodel.elasticsearch.nativeclient.ElasticSearchDataContext;\nimport org.apache.metamodel.elasticsearch.rest.ElasticSearchRestDataContext;\nimport org.apache.metamodel.util.SimpleTableDef;\nimport org.datacleaner.util.StringUtils;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.client.transport.TransportClient;\nimport org.elasticsearch.common.settings.ImmutableSettings;\nimport org.elasticsearch.common.settings.ImmutableSettings.Builder;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.common.transport.InetSocketTransportAddress;\nimport org.elasticsearch.node.Node;\n\nimport com.google.common.base.Strings;\n\nimport io.searchbox.client.JestClient;\nimport io.searchbox.client.JestClientFactory;\nimport io.searchbox.client.config.HttpClientConfig;\n\nimport static org.elasticsearch.node.NodeBuilder.nodeBuilder;\n\n/**\n * Datastore providing access to an ElasticSearch index.\n */\npublic class ElasticSearchDatastore extends UsageAwareDatastore<UpdateableDataContext> implements UpdateableDatastore {\n\n    public enum ClientType {\n        NODE(\"Join cluster as a node\"), TRANSPORT(\"Connect via Transport protocol\"), REST(\"Connect via REST protocol\");\n\n        private String _humanReadableName;\n\n        ClientType(String humanReadableName) {\n            _humanReadableName = humanReadableName;\n        }\n\n        @Override\n        public String toString() {\n            return _humanReadableName;\n        }\n    }\n\n    private static final long serialVersionUID = 1L;\n\n    public static final int DEFAULT_PORT = 9200;\n    public static final int TRANSPORT_PORT = 9300;\n\n    private final SimpleTableDef[] _tableDefs;\n    private final ClientType _clientType;\n    private final String _indexName;\n    private final String _hostname;\n    private final Integer _port;\n    private final String _clusterName;\n    private final String _username;\n    private final String _password;\n    private final boolean _ssl;\n    private final String _keystorePath;\n    private final String _keystorePassword;\n\n    public ElasticSearchDatastore(String name, ClientType clientType, String hostname, Integer port, String clusterName,\n            String indexName) {\n        this(name, clientType, hostname, port, clusterName, indexName, null, null, null, false, null, null);\n    }\n\n    public ElasticSearchDatastore(String name, ClientType clientType, String hostname, Integer port, String clusterName,\n            String indexName, String username, String password, boolean ssl, String keystorePath,\n            String keystorePassword) {\n        this(name, clientType, hostname, port, clusterName, indexName, null, username, password, ssl, keystorePath,\n                keystorePassword);\n    }\n\n    public ElasticSearchDatastore(String name, ClientType clientType, String hostname, Integer port, String clusterName,\n            String indexName, SimpleTableDef[] tableDefs, String username, String password, boolean ssl,\n            String keystorePath, String keystorePassword) {\n        super(name);\n        _hostname = hostname;\n        _port = port;\n        _clusterName = clusterName;\n        _indexName = indexName;\n        _tableDefs = tableDefs;\n        _username = username;\n        _password = password;\n        _ssl = ssl;\n        _clientType = clientType;\n        _keystorePath = keystorePath;\n        _keystorePassword = keystorePassword;\n    }\n\n    @Override\n    public PerformanceCharacteristics getPerformanceCharacteristics() {\n        return new PerformanceCharacteristicsImpl(true, false);\n    }\n\n    @Override\n    protected UsageAwareDatastoreConnection<UpdateableDataContext> createDatastoreConnection() {\n        final DataContext dataContext;\n        if (_tableDefs == null || _tableDefs.length == 0) {\n            if (_clientType.equals(ClientType.NODE) || _clientType.equals(ClientType.TRANSPORT)) {\n                final Client client = getClientForNodeAndTransportProtocol();\n                dataContext = new ElasticSearchDataContext(client, _indexName);\n                return createConnection(dataContext, client);\n            } else {\n                dataContext = new ElasticSearchRestDataContext(getClientForRestProtocol(), _indexName);\n                return createConnection(dataContext, null);\n            }\n        } else {\n            if (_clientType.equals(ClientType.NODE) || _clientType.equals(ClientType.TRANSPORT)) {\n                final Client client = getClientForNodeAndTransportProtocol();\n                dataContext = new ElasticSearchDataContext(client, _indexName, _tableDefs);\n                return createConnection(dataContext, client);\n            } else {\n                dataContext = new ElasticSearchRestDataContext(getClientForRestProtocol(), _indexName, _tableDefs);\n                return createConnection(dataContext, null);\n            }\n        }\n\n    }\n\n    private UsageAwareDatastoreConnection<UpdateableDataContext> createConnection(DataContext dataContext,\n            Client simpleclient) {\n        switch (_clientType) {\n        case NODE:\n        case TRANSPORT:\n            return new UpdateableDatastoreConnectionImpl<>((ElasticSearchDataContext) dataContext,\n                    this, simpleclient);\n        case REST:\n            return new UpdateableDatastoreConnectionImpl<>(\n                    (ElasticSearchRestDataContext) dataContext, this);\n        default:\n            //do nothing\n        }\n        return null;\n    }\n\n    private Client getClientForNodeAndTransportProtocol() {\n        switch (_clientType) {\n        case NODE:\n            return getClientForJoiningClusterAsNode();\n        case TRANSPORT:\n            return getClientForTransportProtocol();\n        default:\n            //do nothing\n        }\n        return null;\n    }\n\n    private JestClient getClientForRestProtocol() {\n        final JestClientFactory factory = new JestClientFactory();\n        HttpClientConfig.Builder builder =\n                new HttpClientConfig.Builder(\"http://\" + _hostname + \":\" + _port).multiThreaded(\n                        true);\n        if (!Strings.isNullOrEmpty(_username)) {\n            builder = builder.defaultCredentials(_username, _password);\n        }\n        factory.setHttpClientConfig(builder.build());\n\n        return factory.getObject();\n    }\n\n    private Client getClientForJoiningClusterAsNode() {\n        final Client client;\n        final Builder settingsBuilder = ImmutableSettings.builder();\n        settingsBuilder.put(\"name\", \"DataCleaner\");\n        settingsBuilder.put(\"shield.enabled\", false);\n        final Settings settings = settingsBuilder.build();\n\n        // .client(true) means no shards are stored on this node\n        final Node node = nodeBuilder().clusterName(_clusterName).client(true).settings(settings).node();\n        client = node.client();\n        return client;\n    }\n\n    private Client getClientForTransportProtocol() {\n        final Client client;\n        final Builder settingsBuilder = ImmutableSettings.builder();\n        settingsBuilder.put(\"name\", \"DataCleaner\");\n        settingsBuilder.put(\"cluster.name\", _clusterName);\n        if (!StringUtils.isNullOrEmpty(_username) && !StringUtils.isNullOrEmpty(_password)) {\n            settingsBuilder.put(\"shield.user\", _username + \":\" + _password);\n            if (_ssl) {\n                if (!Strings.isNullOrEmpty(_keystorePath)) {\n                    settingsBuilder.put(\"shield.ssl.keystore.path\", _keystorePath);\n                    settingsBuilder.put(\"shield.ssl.keystore.password\", _keystorePassword);\n                }\n                settingsBuilder.put(\"shield.transport.ssl\", \"true\");\n            }\n        }\n        final Settings settings = settingsBuilder.build();\n\n        client = new TransportClient(settings);\n        ((TransportClient) client).addTransportAddress(new InetSocketTransportAddress(_hostname, _port));\n        return client;\n    }\n\n    @Override\n    public UpdateableDatastoreConnection openConnection() {\n        final DatastoreConnection connection = super.openConnection();\n        return (UpdateableDatastoreConnection) connection;\n    }\n\n    public SimpleTableDef[] getTableDefs() {\n        return _tableDefs;\n    }\n\n    public ClientType getClientType() {\n        return _clientType;\n    }\n\n    public String getHostname() {\n        return _hostname;\n    }\n\n    public Integer getPort() {\n        return _port;\n    }\n\n    public String getClusterName() {\n        return _clusterName;\n    }\n\n    public String getIndexName() {\n        return _indexName;\n    }\n\n    public String getUsername() {\n        return _username;\n    }\n\n    public String getPassword() {\n        return _password;\n    }\n\n    public boolean getSsl() {\n        return _ssl;\n    }\n\n    public String getKeystorePath() {\n        return _keystorePath;\n    }\n\n    public String getKeystorePassword() {\n        return _keystorePassword;\n    }\n\n    @Override\n    public String toString() {\n        return \"ElasticSearchDatastore[name=\" + getName() + \"]\";\n    }\n\n    @Override\n    protected void decorateIdentity(List<Object> identifiers) {\n        super.decorateIdentity(identifiers);\n        identifiers.add(_clusterName);\n        identifiers.add(_hostname);\n        identifiers.add(_indexName);\n        identifiers.add(_tableDefs);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"datacleaner/DataCleaner","sample_ref":"refs/heads/master","sample_path":"engine/core/src/main/java/org/datacleaner/connection/ElasticSearchDatastore.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"27860f382715ac056dcc5616c422fb7fdd326bc1","size":"1669","content":"package eu.transparency.lobbycal.config;\n\nimport org.apache.commons.lang.CharEncoding;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Description;\nimport org.springframework.context.support.ReloadableResourceBundleMessageSource;\nimport org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;\n\n@Configuration\npublic class ThymeleafConfiguration {\n\n    private final Logger log = LoggerFactory.getLogger(ThymeleafConfiguration.class);\n\n    @Bean\n    @Description(\"Thymeleaf template resolver serving HTML 5 emails\")\n    public ClassLoaderTemplateResolver emailTemplateResolver() {\n        ClassLoaderTemplateResolver emailTemplateResolver = new ClassLoaderTemplateResolver();\n        emailTemplateResolver.setPrefix(\"mails/\");\n        emailTemplateResolver.setSuffix(\".html\");\n        emailTemplateResolver.setTemplateMode(\"HTML5\");\n        emailTemplateResolver.setCharacterEncoding(CharEncoding.UTF_8);\n        emailTemplateResolver.setOrder(1);\n        return emailTemplateResolver;\n    }\n\n    @Bean\n    @Description(\"Spring mail message resolver\")\n    public MessageSource emailMessageSource() {\n        log.info(\"loading non-reloadable mail messages resources\");\n        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();\n        messageSource.setBasename(\"classpath:/mails/messages/messages\");\n        messageSource.setDefaultEncoding(CharEncoding.UTF_8);\n        return messageSource;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"TransparencyInternationalEU/lobbycal","sample_ref":"refs/heads/master","sample_path":"src/main/java/eu/transparency/lobbycal/config/ThymeleafConfiguration.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"07b9c9ae4328ad12ea8c4ef220d2d8d828874f2a","size":"3426","content":"package hex.kmeans;\n\nimport org.junit.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport water.TestUtil;\nimport water.fvec.Frame;\nimport water.fvec.Vec;\nimport water.util.Log;\n\nimport java.util.Random;\n\npublic class KMeansRandomTest extends TestUtil {\n  @BeforeClass()\n  public static void setup() { stall_till_cloudsize(1); }\n\n  @Test\n  public void run() {\n    long seed = 0xDECAF;\n    Random rng = new Random(seed);\n    String[] datasets = new String[2];\n    datasets[0] = \"smalldata/logreg/prostate.csv\";\n    datasets[1] = \"smalldata/iris/iris_wheader.csv\";\n\n\n    int testcount = 0;\n    int count = 0;\n    for( String dataset : datasets ) {\n      Frame frame = parse_test_file(dataset);\n\n      try {\n        for (int centers : new int[]{2, 10, 100}) {\n          for (int max_iter : new int[]{1, 10, 100}) {\n            for (boolean standardize : new boolean[]{false, true}) {\n              for (KMeans.Initialization init : new KMeans.Initialization[]{\n                      KMeans.Initialization.Random,\n                      KMeans.Initialization.Furthest,\n                      KMeans.Initialization.PlusPlus,\n              }) {\n\n                count++;\n\n                KMeansModel.KMeansParameters parms = new KMeansModel.KMeansParameters();\n                parms._train = frame._key;\n                if(dataset != null && dataset.equals(\"smalldata/iris/iris_wheader.csv\"))\n                  parms._ignored_columns = new String[] {\"class\"};\n                parms._k = centers;\n                parms._seed = rng.nextLong();\n                parms._max_iterations = max_iter;\n                parms._standardize = standardize;\n                parms._init = init;\n\n                KMeans job = new KMeans(parms);\n                KMeansModel m = job.trainModel().get();\n                Assert.assertTrue(\"Progress not 100%, but \" + job._job.progress() *100, job._job.progress() == 1.0);\n\n                Frame score = null;\n                try {\n                  for (int j = 0; j < parms._k; j++)\n                    Assert.assertTrue(m._output._size[j] != 0);\n\n                  Assert.assertTrue(m._output._iterations <= max_iter);\n                  for (double d : m._output._withinss) Assert.assertFalse(Double.isNaN(d));\n                  Assert.assertFalse(Double.isNaN(m._output._tot_withinss));\n                  for (long o : m._output._size) Assert.assertTrue(o > 0); //have at least one point per centroid\n                  for (double[] dc : m._output._centers_raw) for (double d : dc) Assert.assertFalse(Double.isNaN(d));\n\n                  // make prediction (cluster assignment)\n                  score = m.score(frame);\n                  Vec.Reader vr = score.anyVec().new Reader();\n                  for (long j = 0; j < score.numRows(); ++j)\n                    Assert.assertTrue(vr.at8(j) >= 0 && vr.at8(j) < centers);\n\n                  Log.info(\"Parameters combination \" + count + \": PASS\");\n                  testcount++;\n                } finally {\n                  m.delete();\n                  if (score!=null) score.delete();\n                }\n              }\n            }\n          }\n        }\n      } finally {\n        frame.delete();\n      }\n    }\n    Log.info(\"\\n\\n=============================================\");\n    Log.info(\"Tested \" + testcount + \" out of \" + count + \" parameter combinations.\");\n    Log.info(\"=============================================\");\n  }\n}\n\n\n","binary":"false","copies":"1","sample_repo_name":"h2oai/h2o-3","sample_ref":"refs/heads/master","sample_path":"h2o-algos/src/test/java/hex/kmeans/KMeansRandomTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"24121ac65bb928d198316b996c011c34813aaef3","size":"5727","content":"package com.comcast.oscar.utilities;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\n/**\r\n * @bannerLicense\r\n\tCopyright 2015 Comcast Cable Communications Management, LLC<br>\r\n\t___________________________________________________________________<br>\r\n\tLicensed under the Apache License, Version 2.0 (the \"License\")<br>\r\n\tyou may not use this file except in compliance with the License.<br>\r\n\tYou may obtain a copy of the License at<br>\r\n\thttp://www.apache.org/licenses/LICENSE-2.0<br>\r\n\tUnless required by applicable law or agreed to in writing, software<br>\r\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,<br>\r\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>\r\n\tSee the License for the specific language governing permissions and<br>\r\n\tlimitations under the License.<br>\r\n\r\n\r\n * @author Maurice Garcia (maurice.garcia.2015@gmail.com)\r\n */\r\npublic class JSONTools {\r\n\r\n\tpublic final static Integer DATA_TYPE_STRING \t= 0;\r\n\tpublic final static Integer DATA_TYPE_INTEGER \t= 1;\r\n\tpublic final static Integer DATA_TYPE_BOOLEAN \t= 2;\r\n\tpublic final static Integer DATA_TYPE_LONG \t\t= 3;\r\n\tpublic final static Integer DATA_TYPE_DOUBLE \t= 4;\r\n\t\r\n\t/**\r\n\t * \r\n\t * @param jo\r\n\t * @param sKey\r\n\t\r\n\t * @return boolean\r\n\t */\r\n\tpublic static boolean containJSONArray (JSONObject jo , String sKey) {\r\n\t\t\r\n\t\tboolean boolContainJSON = false;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tif (jo.getString(sKey).toString().substring(0).contains(\"[\")) \r\n\t\t\t\tboolContainJSON =  true;\r\n\r\n\t\t} catch (JSONException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\treturn boolContainJSON;\r\n\t}\r\n\t\r\n\t/**\r\n\t * \r\n\t * @param object\r\n\t\r\n\t\r\n\t * @return Object\r\n\t * @throws JSONException */\r\n    @SuppressWarnings(\"rawtypes\")\r\n\tpublic static Object toJSON(Object object) throws JSONException {\r\n        \r\n    \tif (object instanceof Map) {\r\n    \t\t\r\n            JSONObject json = new JSONObject();\r\n            \r\n            Map map = (Map) object;\r\n            \r\n            for (Object key : map.keySet()) {\r\n                json.put(key.toString(), toJSON(map.get(key)));\r\n            }\r\n            \r\n            return json;\r\n        \r\n    \t} else if (object instanceof Iterable) {\r\n            \r\n    \t\tJSONArray ja = new JSONArray();\r\n            \r\n    \t\tfor (Object value : ((Iterable)object)) {\r\n                ja.put(value);\r\n            }\r\n            \r\n    \t\treturn ja;\r\n        \r\n    \t} else {\r\n            return object;\r\n        }\r\n    }\r\n \r\n    /**\r\n     * \r\n     * @param jo\r\n    \r\n     * @return boolean\r\n     */\r\n    public static boolean isEmptyObject(JSONObject jo) {\r\n        return jo.names() == null;\r\n    }\r\n \r\n    /**\r\n     * \r\n     * @param jo\r\n     * @param key\r\n    \r\n    \r\n     * @return Map<String,Object>\r\n     * @throws JSONException */\r\n    public static Map<String, Object> getMap(JSONObject jo, String key) throws JSONException {\r\n        return toMap(jo.getJSONObject(key));\r\n    }\r\n \r\n    /**\r\n     * \r\n     * @param jo\r\n    \r\n    \r\n     * @return Map<String,Object>\r\n     * @throws JSONException */\r\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\n\tpublic static Map<String, Object> toMap(JSONObject jo) throws JSONException {\r\n        \r\n\t\tMap<String, Object> map = new HashMap();\r\n        \r\n\t\tIterator keys = jo.keys();\r\n        \r\n\t\twhile (keys.hasNext()) {\r\n            String key = (String) keys.next();\r\n            map.put(key, fromJson(jo.get(key)));\r\n        }\r\n        \r\n\t\treturn map;\r\n    }\r\n \r\n\t/**\r\n\t * \r\n\t * @param ja\r\n\t\r\n\t\r\n\t * @return List\r\n\t * @throws JSONException */\r\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\r\n\tpublic static List toList(JSONArray ja) throws JSONException {\r\n        \r\n    \tList list = new ArrayList();\r\n        \r\n    \tfor (int i = 0; i < ja.length(); i++) {\r\n            list.add(fromJson(ja.get(i)));\r\n        }\r\n        \r\n    \treturn list;\r\n    }\r\n \r\n    /**\r\n     * \r\n     * @param jo\r\n     * @param sString1\r\n     * @param sString2\r\n     * @param iJSONDataType\r\n    \r\n     * @return Map<Object,Object>\r\n     */\r\n    public static Map<Object,Object> mapObjectToObject (JSONObject jo , String sString1 , String sString2 , int iJSONDataType) {\r\n    \t\r\n    \tMap<Object,Object> mooTypeByteLength = new HashMap<Object,Object>();\r\n    \t   \t\r\n    \ttry {\r\n    \t\t\r\n    \t\tif (iJSONDataType == DATA_TYPE_STRING) {\r\n    \t\t\tmooTypeByteLength.put(jo.getString(sString1), jo.getString(sString2));\t\r\n    \t\t} else if (iJSONDataType == DATA_TYPE_INTEGER) {\r\n    \t\t\tmooTypeByteLength.put(jo.getInt(sString1), jo.getInt(sString2));\r\n    \t\t} else if (iJSONDataType == DATA_TYPE_BOOLEAN) {\r\n    \t\t\tmooTypeByteLength.put(jo.getBoolean(sString1), jo.getBoolean(sString2));\r\n    \t\t} else if (iJSONDataType == DATA_TYPE_LONG) {\r\n    \t\t\tmooTypeByteLength.put(jo.getLong(sString1), jo.getLong(sString2));\r\n    \t\t} else if (iJSONDataType == DATA_TYPE_DOUBLE) {\r\n    \t\t\tmooTypeByteLength.put(jo.getDouble(sString1), jo.getDouble(sString2));\r\n    \t\t}\r\n    \t\t\r\n\t\t} catch (JSONException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\t\r\n\t\treturn mooTypeByteLength;\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * @param oj\r\n    \r\n    \r\n     * @return Object\r\n     * @throws JSONException */\r\n    private static Object fromJson(Object oj) throws JSONException {\r\n        \r\n    \tif (oj == JSONObject.NULL) {\r\n        \r\n    \t\treturn null;\r\n        \r\n    \t} else if (oj instanceof JSONObject) {\r\n            \r\n    \t\treturn toMap((JSONObject) oj);\r\n        \r\n    \t} else if (oj instanceof JSONArray) {\r\n            \r\n    \t\treturn toList((JSONArray) oj);\r\n        \r\n    \t} else {\r\n            \r\n    \t\treturn oj;\r\n        \r\n    \t}\r\n    }\r\n\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"Comcast/Oscar","sample_ref":"refs/heads/master","sample_path":"src/com/comcast/oscar/utilities/JSONTools.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"269502460003ecd515dd03e185422e435636c945","size":"2532","content":"/*\n * Copyright 2016 by Edi Weissmann (edi.weissmann@gmail.com).\n * \n * This file is part of the Sejda source code\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.sejda.model.parameter.base;\n\nimport org.apache.commons.lang3.builder.EqualsBuilder;\nimport org.apache.commons.lang3.builder.HashCodeBuilder;\nimport org.sejda.model.output.MultipleTaskOutput;\n\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\n/**\n * Provides a skeletal implementation for parameter classes having multiple source as input and generating multiple output.\n * \n */\npublic class MultipleSourceMultipleOutputParameters extends MultipleSourceParameters implements MultipleOutputTaskParameters {\n\n    private String outputPrefix = \"\";\n    @Valid\n    @NotNull\n    private MultipleTaskOutput<?> output;\n\n    @Override\n    public String getOutputPrefix() {\n        return outputPrefix;\n    }\n\n    @Override\n    public void setOutputPrefix(String outputPrefix) {\n        this.outputPrefix = outputPrefix;\n    }\n\n    @Override\n    public MultipleTaskOutput<?> getOutput() {\n        return output;\n    }\n\n    @Override\n    public void setOutput(MultipleTaskOutput<?> output) {\n        this.output = output;\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder().appendSuper(super.hashCode()).append(outputPrefix).append(output).toHashCode();\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (this == other) {\n            return true;\n        }\n        if (!(other instanceof MultipleSourceMultipleOutputParameters)) {\n            return false;\n        }\n        MultipleSourceMultipleOutputParameters parameter = (MultipleSourceMultipleOutputParameters) other;\n        return new EqualsBuilder().appendSuper(super.equals(other)).append(outputPrefix, parameter.outputPrefix)\n                .append(output, parameter.output).isEquals();\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"torakiki/sejda","sample_ref":"refs/heads/master","sample_path":"sejda-model/src/main/java/org/sejda/model/parameter/base/MultipleSourceMultipleOutputParameters.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"16bf4253906c419d49c5fbb494be714239e8ac1f","size":"2227","content":"package demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.feign.EnableFeignClients;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing;\nimport org.springframework.data.rest.core.config.RepositoryRestConfiguration;\nimport org.springframework.data.rest.webmvc.config.RepositoryRestConfigurerAdapter;\nimport org.springframework.security.oauth2.client.OAuth2ClientContext;\nimport org.springframework.security.oauth2.client.OAuth2RestTemplate;\nimport org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableOAuth2Client;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\nimport org.springframework.stereotype.Component;\n\n/**\n * The {@link AccountApplication} is a cloud-native Spring Boot application that manages\n * a bounded context for @{link Customer}, @{link Account}, @{link CreditCard}, and @{link Address}\n *\n * @author Kenny Bastani\n * @author Josh Long\n */\n@SpringBootApplication\n@EnableJpaAuditing\n@EnableEurekaClient\n@EnableFeignClients\n@EnableResourceServer\n@EnableOAuth2Client\n@EnableHystrix\npublic class AccountApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(AccountApplication.class, args);\n    }\n\n    @LoadBalanced\n    @Bean\n    public OAuth2RestTemplate loadBalancedOauth2RestTemplate(\n            OAuth2ProtectedResourceDetails resource, OAuth2ClientContext context) {\n        return new OAuth2RestTemplate(resource, context);\n    }\n\n    @Component\n    public static class CustomizedRestMvcConfiguration extends RepositoryRestConfigurerAdapter {\n\n        @Override\n        public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {\n            config.setBasePath(\"/api\");\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"kbastani/spring-cloud-event-sourcing-example","sample_ref":"refs/heads/master","sample_path":"account-service/src/main/java/demo/AccountApplication.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d5c1132dd3e2c5cb2051c194b267024d8fa2c6fc","size":"77625","content":"/*\n Copyright 2013-2016 Jason Leyba\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\npackage com.github.jsdossier;\n\nimport static com.github.jsdossier.ProtoTruth.assertMessages;\nimport static com.github.jsdossier.testing.CompilerUtil.createSourceFile;\nimport static com.google.common.truth.Truth.assertThat;\n\nimport com.github.jsdossier.jscomp.NominalType;\nimport com.github.jsdossier.proto.BaseProperty;\nimport com.github.jsdossier.proto.Comment;\nimport com.github.jsdossier.proto.Function;\nimport com.github.jsdossier.proto.Function.Detail;\nimport com.github.jsdossier.proto.Tags;\nimport com.github.jsdossier.proto.TypeExpression;\nimport com.github.jsdossier.proto.Visibility;\nimport com.github.jsdossier.testing.Bug;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/**\n * Tests for extracting function information with a {@link TypeInspector}.\n */\n@RunWith(JUnit4.class)\npublic class TypeInspectorInstanceMethodTest extends AbstractTypeInspectorTest {\n\n  /**\n   * Simulates the definition of goog.abstractMethod, which is not a built-in automatically\n   *  handled by the closure compiler.\n   */\n  private static final String DEFINE_ABSTRACT_METHOD =\n      \"/** @type {!Function} */ var abstractMethod = function() {};\";\n\n  @Test\n  public void extractsFunctionDataFromPrototype() {\n    compile(\n        \"/** @constructor */\",\n        \"function A() {}\",\n        \"\",\n        \"/**\",\n        \" * Says hello.\",\n        \" * @param {string} name The person to greet.\",\n        \" * @return {string} A greeting.\",\n        \" * @throws {Error} If the person does not exist.\",\n        \" */\",\n        \"A.prototype.sayHi = function(name) { return 'Hello, ' + name; };\");\n\n    NominalType a = typeRegistry.getType(\"A\");\n    TypeInspector typeInspector = typeInspectorFactory.create(a);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"sayHi\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 10))\n                .setDescription(htmlComment(\"<p>Says hello.</p>\\n\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"name\")\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>The person to greet.</p>\\n\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>A greeting.</p>\\n\")))\n            .addThrown(Detail.newBuilder()\n                .setType(nullableErrorTypeExpression())\n                .setDescription(htmlComment(\"<p>If the person does not exist.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(43)\n  public void extractsFunctionDataFromPrototype_forInterface() {\n    compile(\n        \"/** @interface */\",\n        \"function A() {}\",\n        \"\",\n        \"/**\",\n        \" * Says hello.\",\n        \" * @param {string} name The person to greet.\",\n        \" * @return {string} A greeting.\",\n        \" * @throws {Error} If the person does not exist.\",\n        \" */\",\n        \"A.prototype.sayHi = function(name) {};\");\n\n    NominalType a = typeRegistry.getType(\"A\");\n    TypeInspector typeInspector = typeInspectorFactory.create(a);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"sayHi\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 10))\n                .setDescription(htmlComment(\"<p>Says hello.</p>\\n\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"name\")\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>The person to greet.</p>\\n\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>A greeting.</p>\\n\")))\n            .addThrown(Detail.newBuilder()\n                .setType(nullableErrorTypeExpression())\n                .setDescription(htmlComment(\"<p>If the person does not exist.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(43)\n  public void extractsFunctionDataFromPrototype_interfaceFunctionDeclaredButNotAssigned() {\n    compile(\n        \"/** @interface */\",\n        \"function A() {}\",\n        \"\",\n        \"/**\",\n        \" * Says hello.\",\n        \" * @param {string} name The person to greet.\",\n        \" * @return {string} A greeting.\",\n        \" * @throws {Error} If the person does not exist.\",\n        \" */\",\n        \"A.prototype.sayHi;\");\n\n    NominalType a = typeRegistry.getType(\"A\");\n    TypeInspector typeInspector = typeInspectorFactory.create(a);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"sayHi\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 10))\n                .setDescription(htmlComment(\"<p>Says hello.</p>\\n\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"name\")\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>The person to greet.</p>\\n\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>A greeting.</p>\\n\")))\n            .addThrown(Detail.newBuilder()\n                .setType(nullableErrorTypeExpression())\n                .setDescription(htmlComment(\"<p>If the person does not exist.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void extractsFunctionDataFromConstructor() {\n    compile(\n        \"/** @constructor */\",\n        \"function A() {\",\n        \"\",\n        \"  /**\",\n        \"   * Says hello.\",\n        \"   * @param {string} name The person to greet.\",\n        \"   * @return {string} A greeting.\",\n        \"   * @throws {Error} If the person does not exist.\",\n        \"   */\",\n        \"  this.sayHi = function(name) { return 'Hello, ' + name; };\",\n        \"}\");\n\n    NominalType a = typeRegistry.getType(\"A\");\n    TypeInspector typeInspector = typeInspectorFactory.create(a);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"sayHi\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 10))\n                .setDescription(htmlComment(\"<p>Says hello.</p>\\n\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"name\")\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>The person to greet.</p>\\n\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>A greeting.</p>\\n\")))\n            .addThrown(Detail.newBuilder()\n                .setType(nullableErrorTypeExpression())\n                .setDescription(htmlComment(\"<p>If the person does not exist.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesFunctionParameterDataFromJsDoc_noParametersAvailableInSource() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var Clazz = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number} x the first number.\",\n        \" * @param {number} y the second number.\",\n        \" * @return {number} x + y.\",\n        \" */\",\n        \"Clazz.prototype.add = abstractMethod\");\n\n    NominalType type = typeRegistry.getType(\"Clazz\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"add\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 10))\n                .setDescription(Comment.getDefaultInstance()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"x\")\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>the first number.</p>\\n\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"y\")\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>the second number.</p>\\n\")))\n            .setReturn(Detail.newBuilder()\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>x + y.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(43)\n  public void usesFunctionParameterDataFromJsDoc_parameterNamesOnlyNoDescription() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var Clazz = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number} x\",\n        \" * @param {number} y\",\n        \" */\",\n        \"Clazz.prototype.add = abstractMethod\");\n\n    NominalType type = typeRegistry.getType(\"Clazz\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"add\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 9))\n                .setDescription(Comment.getDefaultInstance()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"x\")\n                .setType(numberTypeExpression()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"y\")\n                .setType(numberTypeExpression()))\n            .build());\n  }\n\n  @Test\n  public void pullsFunctionParameterNamesFromSourceIfNoJsDoc() {\n    compile(\n        \"/** @constructor */\",\n        \"var Clazz = function() {};\",\n        \"Clazz.prototype.add = function(x, y) { return x + y; };\");\n\n    NominalType type = typeRegistry.getType(\"Clazz\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"add\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 3))\n                .setDescription(Comment.getDefaultInstance()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"x\")\n                .setType(TypeExpression.newBuilder().setUnknownType(true)))\n            .addParameter(Detail.newBuilder()\n                .setName(\"y\")\n                .setType(TypeExpression.newBuilder().setUnknownType(true)))\n            .build());\n  }\n\n  @Test\n  public void jsDocOnlySpecifiesParameterTypesIsSameAsNoDocsAtAll() {\n    compile(\n        \"/** @constructor */\",\n        \"var Clazz = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number}\",\n        \" * @param {number}\",\n        \" */\",\n        \"Clazz.prototype.add = function(x, y) { return x + y; };\");\n\n    NominalType type = typeRegistry.getType(\"Clazz\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"add\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 8))\n                .setDescription(Comment.getDefaultInstance()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"x\")\n                .setType(TypeExpression.newBuilder().setUnknownType(true)))\n            .addParameter(Detail.newBuilder()\n                .setName(\"y\")\n                .setType(TypeExpression.newBuilder().setUnknownType(true)))\n            .build());\n  }\n\n  @Test\n  public void jsDocDoesNotSpecifyParameterTypes() {\n    compile(\n        \"/** @constructor */\",\n        \"var Clazz = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param x the first number to add.\",\n        \" * @param y the second number to add.\",\n        \" */\",\n        \"Clazz.prototype.add = function(x, y) { return x + y; };\");\n\n    NominalType type = typeRegistry.getType(\"Clazz\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"add\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 8))\n                .setDescription(Comment.getDefaultInstance()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"x\")\n                .setDescription(htmlComment(\"<p>the first number to add.</p>\\n\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"y\")\n                .setDescription(htmlComment(\"<p>the second number to add.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesPositionalArgsIfNoJsDocAndNoneInSource() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var Clazz = function() {};\",\n        \"\",\n        \"/** @type {function(number, number)} */\",\n        \"Clazz.prototype.add = abstractMethod;\");\n\n    NominalType type = typeRegistry.getType(\"Clazz\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"add\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 6))\n                .setDescription(Comment.getDefaultInstance()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"arg0\")\n                .setType(numberTypeExpression()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"arg1\")\n                .setType(numberTypeExpression()))\n            .build());\n  }\n\n  @Test\n  public void usesOverriddenComment_superClass() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** Comment on A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * Comment on B.\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 15))\n                .setDescription(htmlComment(\"<p>Comment on B.</p>\\n\"))\n                .setOverrides(namedTypeExpression(\"A\", \"A.html#record\")))\n            .build());\n  }\n\n  @Test\n  public void usesOverriddenComment_superInterface() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** Comment on A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @interface @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * Comment on B.\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 15))\n                .setDescription(htmlComment(\"<p>Comment on B.</p>\\n\"))\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .build());\n  }\n\n  @Test\n  public void usesOverriddenComment_declaredInterface() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** Comment on A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * Comment on B.\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 15))\n                .setDescription(htmlComment(\"<p>Comment on B.</p>\\n\"))\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .build());\n  }\n\n  @Test\n  public void usesCommentFromOverriddenType_superClass() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** Comment on A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(htmlComment(\"<p>Comment on A.</p>\\n\"))\n                .setOverrides(namedTypeExpression(\"A\", \"A.html#record\")))\n            .build());\n  }\n\n  @Test\n  public void usesCommentFromOverriddenType_superInterface() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** Comment on A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @interface @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(htmlComment(\"<p>Comment on A.</p>\\n\"))\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .build());\n  }\n\n  @Test\n  public void usesParameterInfoFromOverriddenType_superClass() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number} v The value to record.\",\n        \" */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"B.prototype.record = function(x) {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"A\", \"A.html#record\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"v\")\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>The value to record.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesParameterInfoFromOverriddenType_superInterface() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number} v The value to record.\",\n        \" */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @interface @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"B.prototype.record = function(x) {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"v\")\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>The value to record.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesParameterInfoFromOverriddenType_declaredInterface() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number} v The value to record.\",\n        \" */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"B.prototype.record = function(x) {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"v\")\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>The value to record.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesParameterInfoFromOverriddenType_interfaceDeclaredOnSuperClass() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number} v The value to record.\",\n        \" */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"B.prototype.record = function(x) {};\",\n        \"\",\n        \"/** @constructor @extends {B} */\",\n        \"var C = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"C.prototype.record = function(y) {};\");\n\n    NominalType type = typeRegistry.getType(\"C\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 20))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"B\", \"B.html#record\"))\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"v\")\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>The value to record.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesParameterInfoFromOverriddenType_abstractMethodWithSuperClass() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number} v The value to record.\",\n        \" */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"B.prototype.record = abstractMethod;\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 8))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"v\")\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>The value to record.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesParameterInfoFromOverriddenType_abstractMethodWithDeclaredInterface() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {number} v The value to record.\",\n        \" */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"B.prototype.record = abstractMethod;\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"v\")\n                .setType(numberTypeExpression())\n                .setDescription(htmlComment(\"<p>The value to record.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesReturnInfoFromOverriddenType_superClass() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {string} Return from A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesReturnInfoFromOverriddenType_superClassEs6() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"class A {\",\n        \"  /** @return {string} Return from A. */\",\n        \"  record() {}\",\n        \"}\",\n        \"\",\n        \"class B extends A {\",\n        \"  /** @override */\",\n        \"  record() {}\",\n        \"}\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 9))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesReturnInfoFromOverriddenType_superInterface() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {string} Return from A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @interface @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesReturnInfoFromOverriddenType_declaredInterface() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {string} Return from A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesReturnInfoFromOverriddenType_declaredInterfaceWithNoFunctionBody() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"\",\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {string} Return from A. */\",\n        \"A.prototype.record;\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = noOpFunc;\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 15))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesReturnInfoFromOverriddenType_interfaceDeclaredOnSuperClass() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {string} Return from A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\",\n        \"\",\n        \"/** @constructor @extends {B} */\",\n        \"var C = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"C.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"C\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 22))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"B\", \"B.html#record\"))\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(35)\n  public void usesReturnInfoFromOverriddenType_abstractMethod_interfaceSpecification() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/**\",\n        \" * Returns some value.\",\n        \" * @return {string} Return from A.\",\n        \" */\",\n        \"A.prototype.record = function() {};\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = abstractMethod;\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 17))\n                .setDescription(htmlComment(\"<p>Returns some value.</p>\\n\"))\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(35)\n  public void usesReturnInfoFromOverriddenType_abstractMethod_superClass() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/**\",\n        \" * Returns some value.\",\n        \" * @return {string} Return from A.\",\n        \" */\",\n        \"A.prototype.record = function() {};\",\n        \"\",\n        \"/** @constructor @extends {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = abstractMethod;\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 9))\n                .setDescription(htmlComment(\"<p>Returns some value.</p>\\n\"))\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(35)\n  public void usesReturnInfoFromOverriddenType_abstractMethod_insideAGoogScope() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"goog.provide('foo.bar');\",\n        \"goog.scope(function() {\",\n        \"  /**\",\n        \"   * This is an interface.\",\n        \"   * @interface\",\n        \"   */\",\n        \"  foo.bar.AnInterface = function() {};\",\n        \"  var A = foo.bar.AnInterface;\",\n        \"\",\n        \"  /**\",\n        \"   * Returns some value.\",\n        \"   * @return {string} Return from A.\",\n        \"   */\",\n        \"  A.prototype.record = function() {};\",\n        \"\",\n        \"  /**\",\n        \"   * This is a class.\",\n        \"   * @constructor\",\n        \"   * @implements {A}\",\n        \"   */\",\n        \"  foo.bar.AClass = function() {};\",\n        \"  var B = foo.bar.AClass;\",\n        \"\",\n        \"  /**\",\n        \"   * @override\",\n        \"   */\",\n        \"  B.prototype.record = abstractMethod;\",\n        \"});\");\n\n    NominalType type = typeRegistry.getType(\"foo.bar.AClass\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 28))\n                .setDescription(htmlComment(\"<p>Returns some value.</p>\\n\"))\n                .addSpecifiedBy(namedTypeExpression(\n                    \"foo.bar.AnInterface\", \"foo.bar.AnInterface.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from A.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesUnknownReturnTypeForUnqualifiedSubclassOfTemplatizedClass_superClass() {\n    compile(\n        \"/**\",\n        \" * @constructor\",\n        \" * @template TYPE\",\n        \" */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {TYPE} The return value. */\",\n        \"A.prototype.value = function() {};\",\n        \"\",\n        \"/** @constructor @extends {A} */\",\n        \"var B = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 8))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#value\")))\n            .setReturn(Detail.newBuilder()\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesUnknownReturnTypeForUnqualifiedSubclassOfTemplatizedClass_superClassEs6() {\n    compile(\n        \"/**\",\n        \" * @template TYPE\",\n        \" */\",\n        \"class A {\",\n        \"  /** @return {TYPE} The return value. */\",\n        \"  value() {}\",\n        \"}\",\n        \"\",\n        \"class B extends A {}\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 6))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#value\")))\n            .setReturn(Detail.newBuilder()\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesUnknownReturnTypeForUnqualifiedSubclassOfTemplatizedClass_superInterface() {\n    compile(\n        \"/**\",\n        \" * @interface\",\n        \" * @template TYPE\",\n        \" */\",\n        \"class A {\",\n        \"  /** @return {TYPE} The return value. */\",\n        \"  value() {}\",\n        \"}\",\n        \"\",\n        \"class B extends A {}\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 7))\n                .setDescription(Comment.getDefaultInstance()))\n            .setReturn(Detail.newBuilder()\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void resolvesReturnTypeForOverriddenTemplateType_superClass() {\n    compile(\n        \"/**\",\n        \" * @constructor\",\n        \" * @template TYPE\",\n        \" */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {TYPE} The return value. */\",\n        \"A.prototype.value = function() {};\",\n        \"\",\n        \"/** @constructor @extends {A<string>} */\",\n        \"var B = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 8))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#value\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void resolvesReturnTypeForOverriddenTemplateType_superClassEs6() {\n    compile(\n        \"/**\",\n        \" * @template TYPE\",\n        \" */\",\n        \"class A {\",\n        \"  /** @return {TYPE} The return value. */\",\n        \"  value() {}\",\n        \"}\",\n        \"/** @extends {A<string>} */\",\n        \"class B extends A {}\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 6))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#value\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void resolvesReturnTypeForOverriddenTemplateType_superInterface() {\n    compile(\n        \"/**\",\n        \" * @interface\",\n        \" * @template TYPE\",\n        \" */\",\n        \"class A {\",\n        \"  /** @return {TYPE} The return value. */\",\n        \"  value() {}\",\n        \"}\",\n        \"/** @extends {A<string>} */\",\n        \"class B extends A {}\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 7))\n                .setDescription(Comment.getDefaultInstance()))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesRespecifiedReturnTemplateTypeForSubClassOfTemplateType_superClass() {\n    compile(\n        \"/**\",\n        \" * @constructor\",\n        \" * @template TYPE\",\n        \" */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {TYPE} The return value. */\",\n        \"A.prototype.value = function() {};\",\n        \"\",\n        \"/** @constructor @extends {A<BTYPE>} @template BTYPE */\",\n        \"var B = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 8))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#value\")))\n            .setReturn(Detail.newBuilder()\n                .setType(namedTypeExpression(\"BTYPE\"))\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesRespecifiedReturnTemplateTypeForSubClassOfTemplateType_superClassEs6() {\n    compile(\n        \"/**\",\n        \" * @template TYPE\",\n        \" */\",\n        \"class A {\",\n        \"  /** @return {TYPE} The return value. */\",\n        \"  value() {}\",\n        \"}\",\n        \"/** @extends {A<BTYPE>} @template BTYPE */\",\n        \"class B extends A {}\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 6))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#value\")))\n            .setReturn(Detail.newBuilder()\n                .setType(namedTypeExpression(\"BTYPE\"))\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void usesRespecifiedReturnTemplateTypeForSubClassOfTemplateType_superInterface() {\n    compile(\n        \"/**\",\n        \" * @interface\",\n        \" * @template TYPE\",\n        \" */\",\n        \"class A {\",\n        \"  /** @return {TYPE} The return value. */\",\n        \"  value() {}\",\n        \"}\",\n        \"/** @extends {A<BTYPE>} @template BTYPE */\",\n        \"class B extends A {}\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"value\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 7))\n                .setDescription(Comment.getDefaultInstance()))\n            .setReturn(Detail.newBuilder()\n                .setType(namedTypeExpression(\"BTYPE\"))\n                .setDescription(htmlComment(\"<p>The return value.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void canOverrideReturnDescription() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @interface */\",\n        \"var A = function() {};\",\n        \"\",\n        \"/** @return {string} Return from A. */\",\n        \"A.prototype.record = abstractMethod;\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"var B = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @return Return from B.\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.record = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"record\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 15))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#record\")))\n            .setReturn(Detail.newBuilder()\n                .setType(stringTypeExpression())\n                .setDescription(htmlComment(\"<p>Return from B.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void canNarrowParameterDefinedOnSuperType() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var Person = function() {};\",\n        \"\",\n        \"/** @constructor @extends {Person} */\",\n        \"var Student = function() {};\",\n        \"\",\n        \"/** @interface */\",\n        \"var Greeter = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {!Person} person The person to greet.\",\n        \" */\",\n        \"Greeter.prototype.greet = abstractMethod;\",\n        \"\",\n        \"/**\",\n        \" * @constructor\",\n        \" * @implements {Greeter}\",\n        \" */\",\n        \"var StudentGreeter = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @param {!Student} student The student to greet.\",\n        \" * @override\",\n        \" */\",\n        \"StudentGreeter.prototype.greet = function(student) {};\");\n\n    NominalType type = typeRegistry.getType(\"StudentGreeter\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"greet\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 26))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"Greeter\", \"Greeter.html#greet\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"student\")\n                .setType(namedTypeExpression(\"Student\", \"Student.html\"))\n                .setDescription(htmlComment(\"<p>The student to greet.</p>\\n\")))\n            .build());\n\n    // Sanity check the interface specification.\n    type = typeRegistry.getType(\"Greeter\");\n    typeInspector = typeInspectorFactory.create(type);\n    report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"greet\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance()))\n            .addParameter(Detail.newBuilder()\n                .setName(\"person\")\n                .setType(namedTypeExpression(\"Person\", \"Person.html\"))\n                .setDescription(htmlComment(\"<p>The person to greet.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void canNarrowReturnTypeOfSuperType() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/** @constructor */\",\n        \"var Greeting = function() {};\",\n        \"\",\n        \"/** @constructor @extends {Greeting} */\",\n        \"var HappyGreeting = function() {};\",\n        \"\",\n        \"/** @interface */\",\n        \"var Greeter = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @return {!Greeting} Returns a greeting.\",\n        \" */\",\n        \"Greeter.prototype.greet = abstractMethod;\",\n        \"\",\n        \"/**\",\n        \" * @constructor\",\n        \" * @implements {Greeter}\",\n        \" */\",\n        \"var HappyGreeter = function() {};\",\n        \"\",\n        \"/**\",\n        \" * @return {!HappyGreeting} A happy greeting.\",\n        \" * @override\",\n        \" */\",\n        \"HappyGreeter.prototype.greet = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"HappyGreeter\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"greet\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 26))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"Greeter\", \"Greeter.html#greet\")))\n            .setReturn(Detail.newBuilder()\n                .setType(namedTypeExpression(\"HappyGreeting\", \"HappyGreeting.html\"))\n                .setDescription(htmlComment(\"<p>A happy greeting.</p>\\n\")))\n            .build());\n\n    // Sanity check the interface specification.\n    type = typeRegistry.getType(\"Greeter\");\n    typeInspector = typeInspectorFactory.create(type);\n    report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"greet\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 14))\n                .setDescription(Comment.getDefaultInstance()))\n            .setReturn(Detail.newBuilder()\n                .setType(namedTypeExpression(\"Greeting\", \"Greeting.html\"))\n                .setDescription(htmlComment(\"<p>Returns a greeting.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void doesNotInheritDeprecationNoticeFromSuperType() {\n    compile(\n        \"/** @interface */\",\n        \"function A() {}\",\n        \"\",\n        \"/**\",\n        \" * @deprecated Do not use this.\",\n        \" */\",\n        \"A.prototype.go = function() {};\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"function B() {}\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.go = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"A\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"go\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 7))\n                .setDescription(Comment.getDefaultInstance())\n                .setTags(Tags.newBuilder()\n                    .setIsDeprecated(true))\n                .setDeprecation(htmlComment(\"<p>Do not use this.</p>\\n\")))\n            .build());\n\n    type = typeRegistry.getType(\"B\");\n    typeInspector = typeInspectorFactory.create(type);\n    report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"go\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 15))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#go\")))\n            .build());\n  }\n\n  @Test\n  public void doesNotInheritThrownClausesFromSuperType() {\n    compile(\n        \"/** @interface */\",\n        \"function A() {}\",\n        \"\",\n        \"/**\",\n        \" * @throws {Error} if something goes wrong.\",\n        \" */\",\n        \"A.prototype.go = function() {};\",\n        \"\",\n        \"/** @constructor @implements {A} */\",\n        \"function B() {}\",\n        \"\",\n        \"/**\",\n        \" * @override\",\n        \" */\",\n        \"B.prototype.go = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"A\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"go\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 7))\n                .setDescription(Comment.getDefaultInstance()))\n            .addThrown(Detail.newBuilder()\n                .setType(nullableErrorTypeExpression())\n                .setDescription(htmlComment(\"<p>if something goes wrong.</p>\\n\")))\n            .build());\n\n    type = typeRegistry.getType(\"B\");\n    typeInspector = typeInspectorFactory.create(type);\n    report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"go\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 15))\n                .setDescription(Comment.getDefaultInstance())\n                .addSpecifiedBy(namedTypeExpression(\"A\", \"A.html#go\")))\n            .build());\n  }\n\n  @Test\n  public void includesFunctionsDefinedBySuperTypeButNotOverriddenByInspectedType() {\n    compile(\n        \"/** @constructor */\",\n        \"function A() {}\",\n        \"\",\n        \"/**\",\n        \" * Runs this instance.\",\n        \" */\",\n        \"A.prototype.run = function() {};\",\n        \"\",\n        \"/** @constructor @extends {A} */\",\n        \"function B() {}\");\n\n    NominalType type = typeRegistry.getType(\"B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"run\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 7))\n                .setDescription(htmlComment(\"<p>Runs this instance.</p>\\n\"))\n                .setDefinedBy(namedTypeExpression(\"A\", \"A.html#run\")))\n            .build());\n  }\n\n  @Test\n  @Bug(30)\n  public void abstractMethodInheritsDocsFromInterfaceSpecification() {\n    compile(\n        DEFINE_ABSTRACT_METHOD,\n        \"/**\",\n        \" * @interface\",\n        \" */\",\n        \"var Edge = function() {};\",\n        \"\",\n        \"/**\",\n        \" * Render this edge to the given context\",\n        \" * @param {!CanvasRenderingContext2D} context The canvas to draw this object into\",\n        \" */\",\n        \"Edge.prototype.addPath = abstractMethod;\",\n        \"\",\n        \"/**\",\n        \" * Abstract edge implementation.\",\n        \" * @constructor\",\n        \" * @struct\",\n        \" * @implements {Edge}\",\n        \" */\",\n        \"var AbstractEdge = function() {};\",\n        \"\",\n        \"/** @inheritDoc */\",\n        \"AbstractEdge.prototype.addPath = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"AbstractEdge\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"addPath\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 22))\n                .setDescription(htmlComment(\"<p>Render this edge to the given context</p>\\n\"))\n                .addSpecifiedBy(namedTypeExpression(\"Edge\", \"Edge.html#addPath\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"context\")\n                .setType(namedTypeExpression(\"CanvasRenderingContext2D\"))\n                .setDescription(htmlComment(\"<p>The canvas to draw this object into</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(38)\n  public void methodsCanLinkToOtherMethodsOnTheSameClass() {\n    compile(\n        \"/** @constructor */\",\n        \"var Foo = function() {};\",\n        \"\",\n        \"/** Go to {@link #b}. */\",\n        \"Foo.prototype.a = function() {};\",\n        \"\",\n        \"/** Go to {@link #a}. */\",\n        \"Foo.prototype.b = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"Foo\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"a\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 5))\n                .setDescription(htmlComment(\n                    \"<p>Go to <a href=\\\"Foo.html#b\\\"><code>#b</code></a>.</p>\\n\")))\n            .build(),\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"b\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 8))\n                .setDescription(htmlComment(\n                    \"<p>Go to <a href=\\\"Foo.html#a\\\"><code>#a</code></a>.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(38)\n  public void methodsCanLinkToMethodDefinedBySuperClass() {\n    compile(\n        \"/** @constructor */\",\n        \"var Foo = function() {};\",\n        \"Foo.prototype.a = function() {};\",\n        \"\",\n        \"/** @constructor @extends {Foo} */\",\n        \"var Bar = function() {};\",\n        \"\",\n        \"/** Go to {@link #a}. */\",\n        \"Bar.prototype.b = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"Bar\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"a\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 3))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"Foo\", \"Foo.html#a\")))\n            .build(),\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"b\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 9))\n                .setDescription(htmlComment(\n                    \"<p>Go to <a href=\\\"Bar.html#a\\\"><code>#a</code></a>.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(38)\n  public void methodLinksToOverriddenMethodIfNoTypeQualifierSpecified() {\n    compile(\n        \"/** @constructor */\",\n        \"var Foo = function() {};\",\n        \"Foo.prototype.a = function() {};\",\n        \"\",\n        \"/** @constructor @extends {Foo} */\",\n        \"var Bar = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"Bar.prototype.a = function() {};\",\n        \"\",\n        \"/** Go to {@link #a}. */\",\n        \"Bar.prototype.b = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"Bar\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"a\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 9))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"Foo\", \"Foo.html#a\")))\n            .build(),\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"b\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 12))\n                .setDescription(htmlComment(\n                    \"<p>Go to <a href=\\\"Bar.html#a\\\"><code>#a</code></a>.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(38)\n  public void methodCanLinkToOriginalDefinitionIfQualifierProvided() {\n    compile(\n        \"/** @constructor */\",\n        \"var Foo = function() {};\",\n        \"Foo.prototype.a = function() {};\",\n        \"\",\n        \"/** @constructor @extends {Foo} */\",\n        \"var Bar = function() {};\",\n        \"\",\n        \"/** @override */\",\n        \"Bar.prototype.a = function() {};\",\n        \"\",\n        \"/** Go to {@link Foo#a}. */\",\n        \"Bar.prototype.b = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"Bar\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"a\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 9))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"Foo\", \"Foo.html#a\")))\n            .build(),\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"b\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 12))\n                .setDescription(htmlComment(\n                    \"<p>Go to <a href=\\\"Foo.html#a\\\"><code>Foo#a</code></a>.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  @Bug(38)\n  public void methodCanLinkToMethodOnAnotherClass() {\n    compile(\n        \"/** @constructor */\",\n        \"var Foo = function() {};\",\n        \"Foo.prototype.a = function() {};\",\n        \"\",\n        \"/** @constructor */\",\n        \"var Bar = function() {};\",\n        \"/** Go to {@link Foo#a}. */\",\n        \"Bar.prototype.b = function() {};\");\n\n    NominalType type = typeRegistry.getType(\"Bar\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"b\")\n                .setSource(sourceFile(\"source/foo.js.src.html\", 8))\n                .setDescription(htmlComment(\n                    \"<p>Go to <a href=\\\"Foo.html#a\\\"><code>Foo#a</code></a>.</p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void methodSpecifiedByInterfaceInAnotherModule() {\n    util.compile(\n        createSourceFile(\n            fs.getPath(\"/src/modules/one.js\"),\n            \"\",\n            \"/** @interface */\",\n            \"export class Greeter {\",\n            \"  /** Returns a greeting. */\",\n            \"  greet() {}\",\n            \"}\"),\n        createSourceFile(\n            fs.getPath(\"/src/modules/two.js\"),\n            \"\",\n            \"/** @implements {./one.Greeter} */\",\n            \"export class CustomGreeter {\",\n            \"  /** @override */\",\n            \"  greet() {}\",\n            \"}\"));\n\n    NominalType type = typeRegistry.getType(\"module$$src$modules$two.CustomGreeter\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"greet\")\n                .setSource(sourceFile(\"../source/modules/two.js.src.html\", 5))\n                .setDescription(htmlComment(\"<p>Returns a greeting.</p>\\n\"))\n                .addSpecifiedBy(namedTypeExpression(\"Greeter\", \"one_exports_Greeter.html#greet\")))\n            .build());\n  }\n\n  @Test\n  public void moduleClassInheritsMethodsFromAnotherModuleClass() {\n    util.compile(\n        createSourceFile(\n            fs.getPath(\"/src/modules/a/b/c.js\"),\n            \"class X {}\",\n            \"export { X as Y }\",\n            \"\",\n            \"export class Z {\",\n            \"  /**\",\n            \"   * @param {!X} x A reference to {@link X}\",\n            \"   */\",\n            \"  method(x) {}\",\n            \"}\"),\n        createSourceFile(\n            fs.getPath(\"/src/modules/one.js\"),\n            \"\",\n            \"import {Z} from './a/b/c';\",\n            \"export class B extends Z {}\"));\n\n    NominalType type = typeRegistry.getType(\"module$$src$modules$one.B\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"method\")\n                .setSource(sourceFile(\"../source/modules/a/b/c.js.src.html\", 8))\n                .setDescription(Comment.getDefaultInstance())\n                .setDefinedBy(namedTypeExpression(\"Z\", \"a/b/c_exports_Z.html#method\")))\n            .addParameter(Detail.newBuilder()\n                .setName(\"x\")\n                .setType(namedTypeExpression(\"Y\", \"a/b/c_exports_Y.html\"))\n                .setDescription(htmlComment(\n                    \"<p>A reference to <a href=\\\"a/b/c_exports_Y.html\\\">\" +\n                        \"<code>X</code></a></p>\\n\")))\n            .build());\n  }\n\n  @Test\n  public void overriddenMethodsInheritVisibilityFromParentType() {\n    util.compile(\n        createSourceFile(\n            fs.getPath(\"/src/globals.js\"),\n            \"class Greeter {\",\n            \"  /** @protected */greet() {}\",\n            \"}\",\n            \"\",\n            \"class CustomGreeter extends Greeter {\",\n            \"  /** @override */greet() {}\",\n            \"}\",\n            \"\",\n            \"class FinalGreeter extends CustomGreeter {\",\n            \"  /** @override */greet() {}\",\n            \"}\"));\n\n    NominalType type = typeRegistry.getType(\"Greeter\");\n    TypeInspector typeInspector = typeInspectorFactory.create(type);\n    TypeInspector.Report report = typeInspector.inspectInstanceType();\n    assertThat(report.getCompilerConstants()).isEmpty();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"greet\")\n                .setSource(sourceFile(\"source/globals.js.src.html\", 2))\n                .setDescription(Comment.getDefaultInstance())\n                .setVisibility(Visibility.PROTECTED))\n            .build());\n\n    type = typeRegistry.getType(\"CustomGreeter\");\n    typeInspector = typeInspectorFactory.create(type);\n    report = typeInspector.inspectInstanceType();\n    assertThat(report.getCompilerConstants()).isEmpty();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"greet\")\n                .setSource(sourceFile(\"source/globals.js.src.html\", 6))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"Greeter\", \"Greeter.html#greet\"))\n                .setVisibility(Visibility.PROTECTED))\n            .build());\n\n    type = typeRegistry.getType(\"FinalGreeter\");\n    typeInspector = typeInspectorFactory.create(type);\n    report = typeInspector.inspectInstanceType();\n    assertThat(report.getCompilerConstants()).isEmpty();\n    assertThat(report.getProperties()).isEmpty();\n    assertMessages(report.getFunctions()).containsExactly(\n        Function.newBuilder()\n            .setBase(BaseProperty.newBuilder()\n                .setName(\"greet\")\n                .setSource(sourceFile(\"source/globals.js.src.html\", 10))\n                .setDescription(Comment.getDefaultInstance())\n                .setOverrides(namedTypeExpression(\"CustomGreeter\", \"CustomGreeter.html#greet\"))\n                .setVisibility(Visibility.PROTECTED))\n            .build());\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"jleyba/js-dossier","sample_ref":"refs/heads/master","sample_path":"test/java/com/github/jsdossier/TypeInspectorInstanceMethodTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5e2c6188af750a20d39ce02ea4441d752af4a8f0","size":"5014","content":"/**************************************************************************\r\n * Developed by Language Technologies Institute, Carnegie Mellon University\r\n * Written by Richard Wang (rcwang#cs,cmu,edu)\r\n **************************************************************************/\r\npackage com.rcwang.seal.util;\r\n\r\nimport java.util.Collection;\r\nimport java.util.Iterator;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\nimport java.util.Map.Entry;\r\n\r\nimport org.apache.log4j.Logger;\r\n\r\nimport com.rcwang.seal.util.StringFactory.SID;\r\n\r\n\r\npublic class SparseMatrix {\r\n  public static Logger log = Logger.getLogger(SparseMatrix.class);\r\n  \r\n  private Map<SID, SparseVector> rowMap;\r\n  private Map<SID, SparseVector> columnMap;\r\n  \r\n  public SparseMatrix() {\r\n    rowMap = new LinkedHashMap<SID, SparseVector>();\r\n    columnMap = new LinkedHashMap<SID, SparseVector>();\r\n  }\r\n  \r\n  public void add(SID columnID, SID rowID, double value) {\r\n    // ensures the row exists\r\n    SparseVector row = rowMap.get(rowID);\r\n    if (row == null) {\r\n      row = new SparseVector(rowID);\r\n      rowMap.put(rowID, row);\r\n    }\r\n\r\n    // ensures the column exists\r\n    SparseVector column = columnMap.get(columnID);\r\n    if (column == null) {\r\n      column = new SparseVector(columnID);\r\n      columnMap.put(columnID, column);\r\n    }\r\n    \r\n    // ensures the cell exists\r\n    Cell cell = row.get(columnID);\r\n    if (cell == null) {\r\n      cell = new Cell();\r\n      row.put(columnID, cell);\r\n      column.put(rowID, cell);\r\n    }\r\n    \r\n    // modifies the entry\r\n    cell.value += value;\r\n  }\r\n  \r\n  public void add(String columnIDStr, String rowIDStr, double value) {\r\n    SID rowID = StringFactory.toID(rowIDStr);\r\n    SID columnID = StringFactory.toID(columnIDStr);\r\n    add(columnID, rowID, value);\r\n  }\r\n  \r\n  public void addColumn(SparseVector column) {\r\n    columnMap.put(column.id, column);\r\n    for (Entry<SID, Cell> entry : column.entrySet()) {\r\n      SID rowID = entry.getKey();\r\n      SparseVector row = getRow(rowID);\r\n      if (row == null) {\r\n        row = new SparseVector(rowID);\r\n        rowMap.put(rowID, row);\r\n      }\r\n      row.put(rowID, entry.getValue());\r\n    }\r\n  }\r\n  \r\n  public void addRow(SparseVector row) {\r\n    rowMap.put(row.id, row);\r\n    for (Entry<SID, Cell> entry : row.entrySet()) {\r\n      SID columnID = entry.getKey();\r\n      SparseVector column = getColumn(columnID);\r\n      if (column == null) {\r\n        column = new SparseVector(columnID);\r\n        columnMap.put(columnID, column);\r\n      }\r\n      column.put(columnID, entry.getValue());\r\n    }\r\n  }\r\n  \r\n  public void clear() {\r\n    rowMap.clear();\r\n    columnMap.clear();\r\n  }\r\n  \r\n  public Iterator<SparseVector> columnIterator() {\r\n    return columnMap.values().iterator();\r\n  }\r\n  \r\n  public Double getCellValue(SID rowID, SID columnID) {\r\n    SparseVector row = getRow(rowID);\r\n    return (row == null) ? null : row.getValue(columnID);\r\n  }\r\n\r\n  public SparseVector getColumn(SID id) {\r\n    return columnMap.get(id);\r\n  }\r\n  \r\n  public SparseVector getColumn(String name) {\r\n    return getColumn(StringFactory.toID(name));\r\n  }\r\n  \r\n  public Set<SID> getColumnIDs() {\r\n    return columnMap.keySet();\r\n  }\r\n\r\n  public Set<String> getColumnNames() {\r\n    return StringFactory.toNames(getColumnIDs());\r\n  }\r\n  \r\n  public Collection<SparseVector> getColumns() {\r\n    return columnMap.values();\r\n  }\r\n  \r\n  public Set<SID> getColumnsWithRow(SID id) {\r\n    SparseVector row = getRow(id);\r\n    return (row == null) ? null : row.keySet();\r\n  }\r\n  \r\n  public Set<String> getColumnsWithRow(String name) {\r\n    Set<SID> columnIDs = getColumnsWithRow(StringFactory.toID(name));\r\n    return (columnIDs == null) ? null : StringFactory.toNames(columnIDs);\r\n  }\r\n\r\n  public int getNumColumns() {\r\n    return columnMap.size();\r\n  }\r\n  \r\n  public int getNumRows() {\r\n    return rowMap.size();\r\n  }\r\n  \r\n  public SparseVector getRow(SID id) {\r\n    return rowMap.get(id);\r\n  }\r\n\r\n  public SparseVector getRow(String name) {\r\n    return getRow(StringFactory.toID(name));\r\n  }\r\n  \r\n  public Set<SID> getRowIDs() {\r\n    return rowMap.keySet();\r\n  }\r\n  \r\n  public Set<String> getRowNames() {\r\n    return StringFactory.toNames(getRowIDs());\r\n  }\r\n  \r\n  public Collection<SparseVector> getRows() {\r\n    return rowMap.values();\r\n  }\r\n  \r\n  public Set<SID> getRowsWithColumn(SID id) {\r\n    SparseVector column = getColumn(id);\r\n    return (column == null) ? null : column.keySet();\r\n  }\r\n  \r\n  public Set<String> getRowsWithColumn(String name) {\r\n    Set<SID> rowIDs = getRowsWithColumn(StringFactory.toID(name));\r\n    return (rowIDs == null) ? null : StringFactory.toNames(rowIDs);\r\n  }\r\n  \r\n  public Iterator<SparseVector> rowIterator() {\r\n    return rowMap.values().iterator();\r\n  }\r\n\r\n  public String toString() {\r\n    StringBuffer buf = new StringBuffer();\r\n    for (SparseVector row : getRows())\r\n      buf.append(StringFactory.toName(row.id)).append(\" <-- \").append(row).append(\"\\n\");\r\n    return buf.toString();\r\n  }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"TeamCohen/SEAL","sample_ref":"refs/heads/master","sample_path":"src/com/rcwang/seal/util/SparseMatrix.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c9feb64a4ef0549b5172af1fd0d31d0670cd46e6","size":"3783","content":"/*\n * Copyright 2015, Yahoo! Inc.\n * Licensed under the terms of the Apache License 2.0. See LICENSE file at the project root for terms.\n */\npackage com.yahoo.sketches.theta;\n\nimport static com.yahoo.sketches.theta.PreambleUtil.COMPACT_FLAG_MASK;\nimport static com.yahoo.sketches.theta.PreambleUtil.EMPTY_FLAG_MASK;\nimport static com.yahoo.sketches.theta.PreambleUtil.FAMILY_BYTE;\nimport static com.yahoo.sketches.theta.PreambleUtil.FLAGS_BYTE;\nimport static com.yahoo.sketches.theta.PreambleUtil.ORDERED_FLAG_MASK;\nimport static com.yahoo.sketches.theta.PreambleUtil.PREAMBLE_LONGS_BYTE;\nimport static com.yahoo.sketches.theta.PreambleUtil.READ_ONLY_FLAG_MASK;\nimport static com.yahoo.sketches.theta.PreambleUtil.SEED_HASH_SHORT;\n\nimport com.yahoo.sketches.memory.Memory;\nimport com.yahoo.sketches.memory.NativeMemory;\n\n/**\n * An on-heap, compact, ordered, read-only sketch.\n * \n * @author Lee Rhodes\n */\nclass HeapCompactOrderedSketch extends CompactSketch {\n  private final long[] cache_;\n  \n  /**\n   * Heapifies the given Memory.\n   * @param srcMem <a href=\"{@docRoot}/resources/dictionary.html#mem\">See Memory</a>\n   */\n  HeapCompactOrderedSketch(Memory srcMem) {\n    super(srcMem.isAnyBitsSet(FLAGS_BYTE, (byte) EMPTY_FLAG_MASK), \n        srcMem.getShort(SEED_HASH_SHORT),\n        getCurCount(srcMem), \n        getThetaLong(srcMem)\n        );\n    getFamily().checkFamilyID(srcMem.getByte(FAMILY_BYTE));\n    cache_ = new long[getRetainedEntries(false)];\n    int preLongs = srcMem.getByte(PREAMBLE_LONGS_BYTE) & 0X3F;\n    int preBytes = compactPreambleLongs(getThetaLong(), isEmpty()) << 3;\n    assert (preLongs << 3) == preBytes;\n    srcMem.getLongArray(preBytes, cache_, 0, getRetainedEntries(false));\n  }\n  \n  /**\n   * Converts the given UpdateSketch to this compact form.\n   * @param sketch the given UpdateSketch\n   */\n  HeapCompactOrderedSketch(UpdateSketch sketch) {\n    super(sketch.isEmpty(), \n        sketch.getSeedHash(), \n        sketch.getRetainedEntries(true), //curCount_  set here\n        sketch.getThetaLong()            //thetaLong_ set here\n        );\n    boolean ordered = true;\n    cache_ = CompactSketch.compactCache(sketch.getCache(), getRetainedEntries(false), getThetaLong(), ordered);\n  }\n  \n  /**\n   * Constructs this sketch from correct, valid components.\n   * @param compactOrderedCache in compact, ordered form\n   * @param empty The correct <a href=\"{@docRoot}/resources/dictionary.html#empty\">Empty</a>.\n   * @param seedHash The correct <a href=\"{@docRoot}/resources/dictionary.html#seedHash\">Seed Hash</a>.\n   * @param curCount correct value\n   * @param thetaLong The correct <a href=\"{@docRoot}/resources/dictionary.html#thetaLong\">thetaLong</a>.\n   */\n  HeapCompactOrderedSketch(long[] compactOrderedCache, boolean empty, short seedHash, int curCount, \n      long thetaLong) {\n    super(empty, seedHash, curCount, thetaLong);\n    assert compactOrderedCache != null;\n    cache_ = (curCount == 0)? new long[0] : compactOrderedCache;\n  }\n  \n  //Sketch interface\n   \n  @Override\n  public byte[] toByteArray() {\n    byte[] byteArray = new byte[getCurrentBytes(true)];\n    Memory dstMem = new NativeMemory(byteArray);\n    int emptyBit = isEmpty()? (byte) EMPTY_FLAG_MASK : 0;\n    byte flags = (byte) (emptyBit |  READ_ONLY_FLAG_MASK | COMPACT_FLAG_MASK | ORDERED_FLAG_MASK);\n    dstMem = loadCompactMemory(getCache(), isEmpty(), getSeedHash(), getRetainedEntries(true),\n        getThetaLong(), dstMem, flags);\n    return byteArray;\n  }\n\n  //restricted methods\n  \n  @Override\n  public boolean isDirect() {\n    return false; \n  }\n  \n  //SetArgument \"interface\"\n   \n  @Override\n  long[] getCache() {\n    return cache_;\n  }\n  \n  @Override\n  Memory getMemory() {\n    return null;\n  }\n  \n  @Override\n  public boolean isOrdered() {\n    return true;\n  }\n  \n}\n","binary":"false","copies":"1","sample_repo_name":"DataSketches/sketches-core","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/yahoo/sketches/theta/HeapCompactOrderedSketch.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8749097b811795f68f1be76523e1f5f7e7eb0366","size":"3083","content":"package org.apache.cloudstack.usage;\n\nimport org.apache.cloudstack.api.response.UsageTypeResponse;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UsageTypes {\n    /* Any changes here should also reflect in cloud_usage.quota_mapping table */\n    public static final int RUNNING_VM = 1;\n    public static final int ALLOCATED_VM = 2; // used for tracking how long storage has been allocated for a VM\n    public static final int IP_ADDRESS = 3;\n    public static final int NETWORK_BYTES_SENT = 4;\n    public static final int NETWORK_BYTES_RECEIVED = 5;\n    public static final int VOLUME = 6;\n    public static final int TEMPLATE = 7;\n    public static final int ISO = 8;\n    public static final int SNAPSHOT = 9;\n    public static final int SECURITY_GROUP = 10;\n    public static final int LOAD_BALANCER_POLICY = 11;\n    public static final int PORT_FORWARDING_RULE = 12;\n    public static final int NETWORK_OFFERING = 13;\n    public static final int VPN_USERS = 14;\n    public static final int VM_DISK_IO_READ = 21;\n    public static final int VM_DISK_IO_WRITE = 22;\n    public static final int VM_DISK_BYTES_READ = 23;\n    public static final int VM_DISK_BYTES_WRITE = 24;\n    public static final int VM_SNAPSHOT = 25;\n\n    public static List<UsageTypeResponse> listUsageTypes() {\n        final List<UsageTypeResponse> responseList = new ArrayList<>();\n        responseList.add(new UsageTypeResponse(RUNNING_VM, \"Running Vm Usage\"));\n        responseList.add(new UsageTypeResponse(ALLOCATED_VM, \"Allocated Vm Usage\"));\n        responseList.add(new UsageTypeResponse(IP_ADDRESS, \"IP Address Usage\"));\n        responseList.add(new UsageTypeResponse(NETWORK_BYTES_SENT, \"Network Usage (Bytes Sent)\"));\n        responseList.add(new UsageTypeResponse(NETWORK_BYTES_RECEIVED, \"Network Usage (Bytes Received)\"));\n        responseList.add(new UsageTypeResponse(VOLUME, \"Volume Usage\"));\n        responseList.add(new UsageTypeResponse(TEMPLATE, \"Template Usage\"));\n        responseList.add(new UsageTypeResponse(ISO, \"ISO Usage\"));\n        responseList.add(new UsageTypeResponse(SNAPSHOT, \"Snapshot Usage\"));\n        responseList.add(new UsageTypeResponse(SECURITY_GROUP, \"Security Group Usage\"));\n        responseList.add(new UsageTypeResponse(LOAD_BALANCER_POLICY, \"Load Balancer Usage\"));\n        responseList.add(new UsageTypeResponse(PORT_FORWARDING_RULE, \"Port Forwarding Usage\"));\n        responseList.add(new UsageTypeResponse(NETWORK_OFFERING, \"Network Offering Usage\"));\n        responseList.add(new UsageTypeResponse(VPN_USERS, \"VPN users usage\"));\n        responseList.add(new UsageTypeResponse(VM_DISK_IO_READ, \"VM Disk usage(I/O Read)\"));\n        responseList.add(new UsageTypeResponse(VM_DISK_IO_WRITE, \"VM Disk usage(I/O Write)\"));\n        responseList.add(new UsageTypeResponse(VM_DISK_BYTES_READ, \"VM Disk usage(Bytes Read)\"));\n        responseList.add(new UsageTypeResponse(VM_DISK_BYTES_WRITE, \"VM Disk usage(Bytes Write)\"));\n        responseList.add(new UsageTypeResponse(VM_SNAPSHOT, \"VM Snapshot storage usage\"));\n        return responseList;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"MissionCriticalCloud/cosmic","sample_ref":"refs/heads/master","sample_path":"cosmic-core/api/src/main/java/org/apache/cloudstack/usage/UsageTypes.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2f0ff66b17db4a7d8ae80e25e9fa6a5094b7b523","size":"2346","content":"/*\n * This is free and unencumbered software released into the public domain.\n *\n * Anyone is free to copy, modify, publish, use, compile, sell, or\n * distribute this software, either in source code form or as a compiled\n * binary, for any purpose, commercial or non-commercial, and by any\n * means.\n *\n * In jurisdictions that recognize copyright laws, the author or authors\n * of this software dedicate any and all copyright interest in the\n * software to the public domain. We make this dedication for the benefit\n * of the public at large and to the detriment of our heirs and\n * successors. We intend this dedication to be an overt act of\n * relinquishment in perpetuity of all present and future rights to this\n * software under copyright law.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n *\n * For more information, please refer to <http://unlicense.org/>.\n */\n\npackage hm.binkley.spring.axon.flow;\n\nimport hm.binkley.spring.axon.shared.TestAuditEventRepository;\nimport org.axonframework.commandhandling.gateway.CommandGateway;\nimport org.axonframework.eventstore.EventStore;\nimport org.axonframework.eventstore.supporting.VolatileEventStore;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@EnableAutoConfiguration\npublic class FlowTestConfiguration {\n    @Bean\n    public EventStore eventStore() {\n        return new VolatileEventStore();\n    }\n\n    @Bean\n    public TestAuditEventRepository testAuditEventRepository() {\n        return new TestAuditEventRepository();\n    }\n\n    @Bean\n    public InitialEventHandler successfulEventHandler(\n            final CommandGateway commands) {\n        return new InitialEventHandler(commands);\n    }\n\n    @Bean\n    public TerminalCommandHandler terminalCommandHandler() {\n        return new TerminalCommandHandler();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"binkley/axon-spring-boot-starter","sample_ref":"refs/heads/master","sample_path":"axon-spring-boot-starter-monitoring/src/test/java/hm/binkley/spring/axon/flow/FlowTestConfiguration.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7112b5cebc4e486e76fb341a2458f32bd4a02e09","size":"5930","content":"\npackage rifServices.fileFormats;\n\nimport rifServices.businessConceptLayer.HealthTheme;\nimport rifGenericLibrary.fileFormats.XMLUtility;\n\nimport org.xml.sax.Attributes;\nimport org.xml.sax.SAXException;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\n\n\n/**\n *\n *\n * <hr>\n * The Rapid Inquiry Facility (RIF) is an automated tool devised by SAHSU \n * that rapidly addresses epidemiological and public health questions using \n * routinely collected health and population data and generates standardised \n * rates and relative risks for any given health outcome, for specified age \n * and year ranges, for any given geographical area.\n *\n * <p>\n * Copyright 2014 Imperial College London, developed by the Small Area\n * Health Statistics Unit. The work of the Small Area Health Statistics Unit \n * is funded by the Public Health England as part of the MRC-PHE Centre for \n * Environment and Health. Funding for this project has also been received \n * from the United States Centers for Disease Control and Prevention.  \n * </p>\n *\n * <pre> \n * This file is part of the Rapid Inquiry Facility (RIF) project.\n * RIF is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * RIF is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with RIF. If not, see <http://www.gnu.org/licenses/>; or write \n * to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, \n * Boston, MA 02110-1301 USA\n * </pre>\n *\n * <hr>\n * Kevin Garwood\n * @author kgarwood\n * @version\n */\n/*\n * Code Road Map:\n * --------------\n * Code is organised into the following sections.  Wherever possible, \n * methods are classified based on an order of precedence described in \n * parentheses (..).  For example, if you're trying to find a method \n * 'getName(...)' that is both an interface method and an accessor \n * method, the order tells you it should appear under interface.\n * \n * Order of \n * Precedence     Section\n * ==========     ======\n * (1)            Section Constants\n * (2)            Section Properties\n * (3)            Section Construction\n * (7)            Section Accessors and Mutators\n * (6)            Section Errors and Validation\n * (5)            Section Interfaces\n * (4)            Section Override\n *\n */\n\n\nfinal class HealthThemeContentHandler \n\textends AbstractRIFConceptContentHandler {\n\n// ==========================================\n// Section Constants\n// ==========================================\n\n// ==========================================\n// Section Properties\n// ==========================================\n\t/** The current health theme. */\n\tprivate HealthTheme currentHealthTheme;\n    \n// ==========================================\n// Section Construction\n// ==========================================\n    /**\n     * Instantiates a new health theme content handler.\n     */\n\tpublic HealthThemeContentHandler() {\n\t\t\n    \tsetPluralRecordName(\"health_themes\");\n\t\tsetSingularRecordName(\"health_theme\");\n    }\n\n// ==========================================\n// Section Accessors and Mutators\n// ==========================================\n    /**\n     * Gets the health theme.\n     *\n     * @return the health theme\n     */\n\tpublic HealthTheme getHealthTheme() {\n\t\t\n\t\treturn currentHealthTheme;\n\t}\n\n    \n\t/**\n\t * Write xml.\n\t *\n\t * @param healthThemes the health themes\n\t * @throws IOException Signals that an I/O exception has occurred.\n\t */\n\tpublic void writeXML(\n\t\tfinal ArrayList<HealthTheme> healthThemes) \n\t\tthrows IOException {\n\t\t\n\t\tXMLUtility xmlUtility = getXMLUtility();\n\t\txmlUtility.writeRecordStartTag(getPluralRecordName());\t\n\t\t\n\t\tfor (HealthTheme healthTheme : healthThemes) {\n\t\t\twriteXML(healthTheme);\n\t\t}\n\t\t\n\t\txmlUtility.writeRecordEndTag(getPluralRecordName());\t\t\n\t}\n\t\n\t/**\n\t * Write xml.\n\t *\n\t * @param healthTheme the health theme\n\t * @throws IOException Signals that an I/O exception has occurred.\n\t */\n\tpublic void writeXML(\n\t\tfinal HealthTheme healthTheme) \n\t\tthrows IOException {\t\t\n\n\t\tString recordName = getSingularRecordName();\n\t\tXMLUtility xmlUtility = getXMLUtility();\n\t\txmlUtility.writeRecordStartTag(recordName);\t\n\t\txmlUtility.writeField(recordName, \"name\", healthTheme.getName());\t\t\n\t\txmlUtility.writeField(recordName, \"description\", healthTheme.getDescription());\n\t\txmlUtility.writeRecordEndTag(recordName);\n\t}\n\t\n// ==========================================\n// Section Errors and Validation\n// ==========================================\n\n// ==========================================\n// Section Interfaces\n// ==========================================\n\n// ==========================================\n// Section Override\n// ==========================================\n\n\n\t@Override\n    public void startElement(\n\t\tfinal String nameSpaceURI,\n\t\tfinal String localName,\n\t\tfinal String qualifiedName,\n\t\tfinal Attributes attributes) \n\t\tthrows SAXException {\n\n\t\tif (equalsFieldName(qualifiedName, getSingularRecordName()) == true) {\n\t\t\tcurrentHealthTheme = HealthTheme.newInstance();\n\t\t\tactivate();\n\t\t}\t\t\n\t}\n\t\n\n\t@Override\n\tpublic void endElement(\n\t\tfinal String nameSpaceURI,\n\t\tfinal String localName,\n\t\tfinal String qualifiedName) \n\t\tthrows SAXException {\n\t\t\t\t\n\t\tif (isSingularRecordName(qualifiedName) == true) {\n\t\t\tdeactivate();\n\t\t}\n\t\telse if (equalsFieldName(qualifiedName, \"name\") == true) {\n\t\t\tcurrentHealthTheme.setName(getCurrentFieldValue());\n\t\t}\t\t\n\t\telse if (equalsFieldName(qualifiedName, \"description\") == true) {\n\t\t\tcurrentHealthTheme.setDescription(getCurrentFieldValue());\n\t\t}\t\t\n\t\telse {\n\t\t\tassert false;\n\t\t}\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"smallAreaHealthStatisticsUnit/rapidInquiryFacility","sample_ref":"refs/heads/master","sample_path":"rifServices/src/main/java/rifServices/fileFormats/HealthThemeContentHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"29f439b74b10d4a3dcdeabac7ec0bae717780d6f","size":"3346","content":"/**\n * Copyright (c) 2014 SQUARESPACE, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.squarespace.less.parse;\n\nimport static com.squarespace.less.core.SyntaxErrorMaker.expected;\nimport static com.squarespace.less.parse.Parselets.FUNCTION_CALL_ARGS;\nimport static com.squarespace.less.parse.Parselets.FUNCTION_CALL_SUB;\n\nimport com.squarespace.less.LessException;\nimport com.squarespace.less.core.CharClass;\nimport com.squarespace.less.core.Chars;\nimport com.squarespace.less.model.Anonymous;\nimport com.squarespace.less.model.ExpressionList;\nimport com.squarespace.less.model.FunctionCall;\nimport com.squarespace.less.model.Node;\nimport com.squarespace.less.model.Url;\n\n\n/**\n * Parse all forms which look like function calls.\n */\npublic class FunctionCallParselet implements Parselet {\n\n  @Override\n  public Node parse(LessStream stm) throws LessException {\n    Mark position = stm.mark();\n    if (!CharClass.callStart(stm.peek()) || !stm.matchCallName()) {\n      return null;\n    }\n\n    String name = stm.token();\n    String nameLC = name.toLowerCase();\n    if (nameLC.equals(\"url\")) {\n      return parseUrl(stm);\n\n    } else if (nameLC.equals(\"alpha\")) {\n      // Special handling for IE's alpha function.\n      Node result = stm.parse(Parselets.ALPHA);\n      if (result != null) {\n        return result;\n      }\n      // Fall through, assuming the built-in alpha function.\n\n    }\n\n    // Use the lowercase version of the name to match less.js. CSS is case-insensitive\n    // within the ASCII range.\n    FunctionCall call = new FunctionCall(nameLC);\n    ExpressionList args = parseArgs(stm);\n    for (Node arg : args.expressions()) {\n      call.add(arg);\n    }\n\n    stm.skipWs();\n    if (!stm.seekIf(Chars.RIGHT_PARENTHESIS)) {\n      stm.restore(position);\n      return null;\n    }\n    return call;\n  }\n\n\n  private ExpressionList parseArgs(LessStream stm) throws LessException {\n    ExpressionList args = new ExpressionList();\n    while (true) {\n      Node value = stm.parse(FUNCTION_CALL_ARGS);\n      if (value != null) {\n        args.add(value);\n      }\n\n      stm.skipWs();\n      if (!stm.seekIf(Chars.COMMA)) {\n        break;\n      }\n    }\n    return args;\n  }\n\n  public static Node parseUrl(LessStream stm) throws LessException {\n    stm.skipWs();\n    Node value = stm.parse(FUNCTION_CALL_SUB);\n    if (value == null) {\n      int start = stm.position();\n      char ch = stm.peek();\n      while (ch != Chars.RIGHT_PARENTHESIS && ch != Chars.EOF) {\n        stm.seek(1);\n        ch = stm.peek();\n      }\n      String url = stm.raw().substring(start, stm.position());\n      value = new Anonymous(url.trim());\n    }\n    stm.skipWs();\n    if (!stm.seekIf(Chars.RIGHT_PARENTHESIS)) {\n      throw stm.parseError(new LessException(expected(\"right parenthesis ')' to end url\")));\n    }\n    return new Url(value);\n  }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"Squarespace/less-compiler","sample_ref":"refs/heads/master","sample_path":"less-core/src/main/java/com/squarespace/less/parse/FunctionCallParselet.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4750649da5cd4c974dcc21a7c3b6f3534a31f284","size":"1900","content":"package com.eharmony.pho.mapper;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport com.eharmony.pho.translator.PropertyResolver;\n\npublic class EntityPropertiesResolver implements PropertyResolver {\n\n    private final EntityPropertiesMappingContext entityPropertiesMappingContext;\n\n    public EntityPropertiesResolver(final EntityPropertiesMappingContext entityPropertiesMappingContext) {\n        this.entityPropertiesMappingContext = entityPropertiesMappingContext;\n    }\n\n    @Override\n    public EntityPropertyBinding resolveEntityPropertyBindingByStoreMappingName(String mappingName, Class<?> clz) {\n        return entityPropertiesMappingContext.resolveEntityPropertyBindingByStoreMappingName(clz, mappingName);\n    }\n\n    @Override\n    public EntityPropertyBinding resolveEntityPropertyBindingByEntityFieldName(String entityFieldName,\n            Class<?> entityClass) {\n        return entityPropertiesMappingContext.resolveEntityPropertyBindingByEntityFieldName(entityClass,\n                entityFieldName);\n    }\n\n    @Override\n    public List<String> resolveEntityMappingPropertyNames(List<String> fieldPropertyNames, Class<?> clz) {\n        return entityPropertiesMappingContext.resolveEntityMappingPropertyNames(clz, fieldPropertyNames);\n    }\n\n    @Override\n    public String resolve(String fieldPropertyName, Class<?> entityClass) {\n        return entityPropertiesMappingContext.resolveEntityMappingPropertyName(entityClass, fieldPropertyName);\n    }\n\n    @Override\n    public <T> Map<String, EntityPropertyBinding> getStoreFieldNamePropertyBindingMap(Class<T> clz) {\n        return entityPropertiesMappingContext.getStoreFieldNamePropertyBindingMap(clz);\n    }\n\n    @Override\n    public <T> Map<String, EntityPropertyBinding> getEntityPropertyNamePropertyBindingMap(Class<T> clz) {\n        return entityPropertiesMappingContext.getEntityPropertyNamePropertyBindingMap(clz);\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"eHarmony/pho","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/eharmony/pho/mapper/EntityPropertiesResolver.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d0141bf92a663a7efd478a85d8b5d52139606d9d","size":"3422","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements. See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership. The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n *\n * (c) 2015 - Interseroh and Crowdcode\n */\npackage de.interseroh.report.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.convert.ConversionException;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.stereotype.Component;\n\nimport de.interseroh.report.domain.ParameterForm;\nimport de.interseroh.report.domain.ScalarParameter;\nimport de.interseroh.report.domain.visitors.AbstractParameterVisitor;\nimport de.interseroh.report.formatters.DisplayFormatHolder;\n\n/**\n * @author Ingo D\u00fcppe (Crowdcode)\n */\n@Component\npublic class ParameterFormFormatter {\n\n\t@Autowired\n\tprivate ConversionService conversionService;\n\n\t/**\n\t *\n\t * Checks if value is not null, is not an empty array\n\t *\n\t * @param value\n\t * @return true if value contains a value\n\t */\n\tpublic static boolean isNotNullOrEmptyArray(Object value) {\n\t\treturn value != null //\n\t\t\t\t&& (!value.getClass().isArray() || ((Object[]) value).length > 0);\n\t}\n\n\tpublic void format(ParameterForm parameterForm) {\n\n\t\t// Convert parameter values to required type\n\t\tparameterForm.accept(new AbstractParameterVisitor() {\n\t\t\t@Override\n\t\t\tpublic <V, T> void visit(ScalarParameter<V, T> parameter) {\n\t\t\t\tClass<V> valueType = parameter.getValueType();\n\t\t\t\tClass<T> textType = parameter.getTextType();\n\n\t\t\t\tconvertValue(parameter, valueType, textType);\n\n\t\t\t\tconvertDefaultValue(parameter, valueType, textType);\n\t\t\t}\n\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tprivate <V, T> void convertValue(ScalarParameter<V, T> parameter,\n\t\t\t\t\tClass<V> valueType, Class<T> textType) {\n\n\t\t\t\tDisplayFormatHolder.setDisplayFormat(parameter\n\t\t\t\t\t\t.getDisplayFormat());\n\n\t\t\t\tV value = parameter.getValue();\n\t\t\t\tif (isNotNullOrEmptyArray(value)) {\n\t\t\t\t\tif (conversionService.canConvert(valueType, textType)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tT formatted = conversionService.convert(value,\n\t\t\t\t\t\t\t\t\ttextType);\n\t\t\t\t\t\t\tparameter.setText(formatted);\n\t\t\t\t\t\t} catch (ConversionException ce) {\n\t\t\t\t\t\t\tparameter.setText((T) value.toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate <V, T> void convertDefaultValue(\n\t\t\t\t\tScalarParameter<V, T> parameter, Class<V> valueType,\n\t\t\t\t\tClass<T> textType) {\n\n\t\t\t\tDisplayFormatHolder.setDisplayFormat(parameter\n\t\t\t\t\t\t.getDisplayFormat());\n\n\t\t\t\tV defaultValue = parameter.getDefaultValue();\n\t\t\t\tif (defaultValue != null) {\n\t\t\t\t\tif (conversionService.canConvert(valueType, textType)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tT formatted = conversionService.convert(\n\t\t\t\t\t\t\t\t\tdefaultValue, textType);\n\t\t\t\t\t\t\tparameter.setDefaultText(formatted);\n\t\t\t\t\t\t} catch (ConversionException ce) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"interseroh/report-cockpit-birt-web","sample_ref":"refs/heads/master","sample_path":"src/main/java/de/interseroh/report/controller/ParameterFormFormatter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"84337efe807e4b0fab72c6b881061087004ff826","size":"4649","content":"package yushijinhun.authlibagent.web.yggdrasil;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.GeneralSecurityException;\nimport java.util.Base64;\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport yushijinhun.authlibagent.model.GameProfile;\nimport yushijinhun.authlibagent.service.SignatureService;\nimport static yushijinhun.authlibagent.util.UUIDUtils.unsign;\n\n@Component\npublic class ResponseSerializerImpl implements ResponseSerializer {\n\n\tprivate static final Logger LOGGER = LogManager.getFormatterLogger();\n\n\t@Autowired\n\tprivate SignatureService signatureService;\n\n\t@Value(\"#{config['feature.optionalSignature']}\")\n\tprivate boolean optionalSignature;\n\n\t@Override\n\tpublic JSONArray serializeMap(Map<String, String> map, boolean sign) {\n\t\tJSONArray entries = new JSONArray();\n\t\tmap.forEach((k, v) -> {\n\t\t\tJSONObject entry = new JSONObject();\n\t\t\tentry.put(\"name\", k);\n\t\t\tentry.put(\"value\", v);\n\t\t\tif (sign) {\n\t\t\t\ttry {\n\t\t\t\t\tbyte[] signature = signatureService.sign(v.getBytes(\"UTF-8\"));\n\t\t\t\t\tentry.put(\"signature\", Base64.getEncoder().encodeToString(signature));\n\t\t\t\t} catch (UnsupportedEncodingException | GeneralSecurityException e) {\n\t\t\t\t\tif (optionalSignature) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t\tLOGGER.debug(\"unable to sign, skipping\", e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new IllegalStateException(\"unable to sign\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tentries.put(entry);\n\t\t});\n\t\treturn entries;\n\t}\n\n\t@Override\n\tpublic JSONObject serializeGameProfile(GameProfile profile, boolean withProperties) {\n\t\tJSONObject json = new JSONObject();\n\t\tjson.put(\"id\", unsign(profile.getUuid()));\n\t\tjson.put(\"name\", profile.getName());\n\n\t\tif (withProperties) {\n\t\t\tjson.put(\"properties\", serializeMap(getProfileProperties(profile), true));\n\t\t}\n\n\t\treturn json;\n\t}\n\n\tprivate Map<String, String> getProfileProperties(GameProfile profile) {\n\t\tMap<String, String> properties = new HashMap<>();\n\t\ttry {\n\t\t\tproperties.put(\"textures\", Base64.getEncoder().encodeToString(toTexturePayload(profile).toString().getBytes(\"UTF-8\")));\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tthrow new IllegalStateException(\"utf-8 not supported\", e);\n\t\t}\n\t\treturn properties;\n\t}\n\n\tprivate JSONObject toTexturePayload(GameProfile profile) {\n\t\tJSONObject payload = new JSONObject();\n\t\tpayload.put(\"timestamp\", System.currentTimeMillis());\n\t\tpayload.put(\"profileId\", profile.getUuid());\n\t\tpayload.put(\"profileName\", profile.getName());\n\t\tpayload.put(\"isPublic\", true);\n\n\t\tJSONObject textureEntries = new JSONObject();\n\t\tMap<String, String> textureProperties = toTextureProperties(profile);\n\t\tif (profile.getSkin() != null)\n\t\t\ttextureEntries.put(\"SKIN\", toTextureEntry(profile.getSkin(), textureProperties));\n\t\tif (profile.getCape() != null)\n\t\t\ttextureEntries.put(\"CAPE\", toTextureEntry(profile.getCape(), null));\n\t\tif (profile.getElytra() != null)\n\t\t\ttextureEntries.put(\"ELYTRA\", toTextureEntry(profile.getElytra(), null));\n\n\t\tpayload.put(\"textures\", textureEntries);\n\t\treturn payload;\n\t}\n\n\tprivate JSONObject toTextureEntry(String url, Map<String, String> properties) {\n\t\tJSONObject entry = new JSONObject();\n\t\tentry.put(\"url\", url);\n\t\tif (properties != null)\n\t\t\tentry.put(\"metadata\", properties);\n\t\treturn entry;\n\t}\n\n\tprivate Map<String, String> toTextureProperties(GameProfile texture) {\n\t\tMap<String, String> properties = new HashMap<>();\n\t\tproperties.put(\"model\", texture.getTextureModel().getModelName());\n\t\treturn properties;\n\t}\n\n\t@Override\n\tpublic JSONObject serializeAuthenticateResponse(AuthenticateResponse auth, boolean withProfiles) {\n\t\tJSONObject resp = new JSONObject();\n\t\tresp.put(\"accessToken\", auth.getAccessToken());\n\t\tresp.put(\"clientToken\", auth.getClientToken());\n\n\t\tif (auth.getSelectedProfile() != null) {\n\t\t\tresp.put(\"selectedProfile\", serializeGameProfile(auth.getSelectedProfile(), false));\n\t\t}\n\n\t\tif (withProfiles && auth.getProfiles() != null) {\n\t\t\tJSONArray profilesResp = new JSONArray();\n\t\t\tfor (GameProfile profile : auth.getProfiles()) {\n\t\t\t\tprofilesResp.put(serializeGameProfile(profile, false));\n\t\t\t}\n\t\t\tresp.put(\"availableProfiles\", profilesResp);\n\t\t}\n\n\t\tJSONObject userResp = new JSONObject();\n\t\tif (auth.getUserid() != null) {\n\t\t\tuserResp.put(\"id\", auth.getUserid());\n\t\t}\n\t\tif (auth.getProperties() != null) {\n\t\t\tuserResp.put(\"properties\", serializeMap(auth.getProperties(), false));\n\t\t}\n\t\tresp.put(\"user\", userResp);\n\n\t\treturn resp;\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"yushijinhun/authlib-agent","sample_ref":"refs/heads/master","sample_path":"yggdrasil-backend/src/main/java/yushijinhun/authlibagent/web/yggdrasil/ResponseSerializerImpl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0603dfc92ea9dbd7843c3a3dd1c2300cc8a44cab","size":"1434","content":"/*\n * Copyright 2009-2012 Amazon Technologies, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at:\n *\n *    http://aws.amazon.com/apache2.0\n *\n * This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES\n * OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.amazonaws.eclipse.datatools.sqltools.tablewizard.simpledb.ui.popup.actions;\n\nimport org.eclipse.datatools.connectivity.sqm.core.internal.ui.explorer.popup.AbstractAction;\nimport org.eclipse.datatools.connectivity.sqm.core.internal.ui.explorer.popup.providers.AbstractActionProvider;\nimport org.eclipse.jface.action.IMenuManager;\nimport org.eclipse.jface.viewers.SelectionChangedEvent;\n\npublic class NewAttributeActionProvider extends AbstractActionProvider {\n    private static final AbstractAction action = new NewAttributeWizardAction();\n\n    @Override\n    protected AbstractAction getAction() {\n        return action;\n    }\n\n    @Override\n    public void fillContextMenu(final IMenuManager menu) {\n        getAction().setCommonViewer(this.viewer);\n        getAction().selectionChanged(new SelectionChangedEvent(this.selectionProvider, this.getContext().getSelection()));\n        menu.add(action);\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"aws/aws-toolkit-eclipse","sample_ref":"refs/heads/master","sample_path":"com.amazonaws.eclipse.datatools.sqltools.tablewizard.simpledb/src/com/amazonaws/eclipse/datatools/sqltools/tablewizard/simpledb/ui/popup/actions/NewAttributeActionProvider.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"8a79d3c39f51b7d815b982912d5ceb38812c82e1","size":"14901","content":"/*\r\n * The JTS Topology Suite is a collection of Java classes that\r\n * implement the fundamental operations required to validate a given\r\n * geo-spatial data set to a known topological specification.\r\n *\r\n * Copyright (C) 2001 Vivid Solutions\r\n *\r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 2.1 of the License, or (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\r\n *\r\n * For more information, contact:\r\n *\r\n *     Vivid Solutions\r\n *     Suite #1A\r\n *     2328 Government Street\r\n *     Victoria BC  V8T 5G5\r\n *     Canada\r\n *\r\n *     (250)385-6040\r\n *     www.vividsolutions.com\r\n */\r\npackage com.vividsolutions.jts.io.oracle;\r\n\r\nimport java.text.DecimalFormat;\r\nimport java.text.NumberFormat;\r\n\r\nimport com.vividsolutions.jts.geom.Geometry;\r\nimport com.vividsolutions.jts.geom.GeometryCollection;\r\nimport com.vividsolutions.jts.geom.LineString;\r\nimport com.vividsolutions.jts.geom.MultiLineString;\r\nimport com.vividsolutions.jts.geom.MultiPoint;\r\nimport com.vividsolutions.jts.geom.MultiPolygon;\r\nimport com.vividsolutions.jts.geom.Point;\r\nimport com.vividsolutions.jts.geom.Polygon;\r\n\r\n/**\r\n * Represents the contents of an Oracle SDO_GEOMETRY structure.\r\n * Also provides code values and convenience methods for working\r\n * with SDO_GEOMETRY values.\r\n * \r\n * @author Martin Davis\r\n *\r\n */\r\nclass OraGeom\r\n{\r\n\tpublic static final int NULL_DIMENSION = -1;\t\r\n\r\n\tprivate static NumberFormat fmt = new DecimalFormat(\"0.################\");\r\n\t  \r\n\tpublic static final String SQL_NULL = \"NULL\";\r\n\r\n  int gType;\r\n  int srid;\r\n  double[] point = null;\r\n  int[] elemInfo = null;\r\n  double[] ordinates = null;\r\n  private int geomType;\r\n  private int ordDim;\r\n  private int lrsDim;\r\n\r\n  public OraGeom(int gType, int srid, double[] ptType, int[] elemInfo, double[] ordinates)\r\n  {\r\n    this.gType = gType;\r\n    this.srid = srid;\r\n    this.point = ptType;\r\n    this.elemInfo = elemInfo;\r\n    this.ordinates = ordinates;\r\n    geomType = gTypeGeomType(gType);\r\n    ordDim = gTypeDim(gType);\r\n    lrsDim = gTypeMeasureDim(gType);\r\n  }\r\n\r\n  public OraGeom(int gType, int srid, int[] elemInfo, double[] ordinates)\r\n  {\r\n    this(gType, srid, null, elemInfo, ordinates);\r\n  }\r\n\r\n  public OraGeom(int gType, int srid, double[] ptType)\r\n  {\r\n    this(gType, srid, ptType, null, null);\r\n  }\r\n\r\n  public int geomType()\r\n  {\r\n    return geomType;\r\n  }\r\n\r\n  public int ordDim()\r\n  {\r\n    return ordDim;\r\n  }\r\n\r\n  public int lrsDim()\r\n  {\r\n    return lrsDim;\r\n  }\r\n  \r\n  public boolean isCompactPoint()\r\n  {\r\n    return lrsDim == 0 && geomType == OraGeom.GEOM_TYPE.POINT && point != null && elemInfo == null;\r\n  }\r\n  \r\n  public boolean isEqual(OraGeom og)\r\n  {\r\n    if (gType != og.gType) return false;\r\n//    if (srid != og.srid) return false;\r\n    if (! isEqual(point, og.point))\r\n        return false;\r\n    // assume is defined by elemInfo and ordinates\r\n    if (! isEqual(elemInfo, og.elemInfo)) \r\n      return false;\r\n    if (! isEqual(ordinates, og.ordinates)) \r\n      return false;\r\n    return true;\r\n  }\r\n\r\n  private boolean isEqual(double[] a1, double[] a2)\r\n  {\r\n    if (a2 == null || a1 == null) {\r\n      return a2 == a1;\r\n    }\r\n    if (a1.length != a2.length) return false;\r\n    for (int i = 0; i < a1.length; i++) {\r\n      // check NaN == NaN\r\n      if (Double.isNaN(a1[i]) && Double.isNaN(a2[i])) \r\n    \t  continue;\r\n      if (a1[i] != a2[i]) \r\n    \t  return false;\r\n    }\r\n    return true;\r\n  }\r\n  private boolean isEqual(int[] a1, int[] a2)\r\n  {\r\n    if (a2 == null || a1 == null) {\r\n      return a2 == a1;\r\n    }\r\n    if (a1.length != a2.length) return false;\r\n    for (int i = 0; i < a1.length; i++) {\r\n      if (a1[i] != a2[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  public String toString()\r\n  {\r\n\t  return toSQLString();\r\n\t  /*\r\n\t  return \"GTYPE=\" + gType \r\n\t\t\t  + \" SRID=\" + srid\r\n\t\t\t  + \" ELEM_INFO=\" + toStringElemInfo(elemInfo)\r\n\t\t\t  + \" ORDS=\" + toString(ordinates);\r\n\t\t\t  */\r\n  }\r\n  \r\n  public String toSQLString()\r\n  {\r\n  \tStringBuffer buf = new StringBuffer();\r\n  \tbuf.append(\"SDO_GEOMETRY(\");\r\n  \t\r\n  \tbuf.append(gType);\r\n  \tbuf.append(\",\");\r\n  \t\r\n  \tbuf.append(srid >= 0 ? String.valueOf(srid) : SQL_NULL);\r\n  \tbuf.append(\",\");\r\n  \t\r\n  \tbuf.append(toStringPointType());\r\n  \tbuf.append(\",\");\r\n  \t\r\n  \tbuf.append(toStringElemInfo());\r\n  \tbuf.append(\",\");\r\n  \t\r\n  \tbuf.append(toStringOrdinates());\r\n  \tbuf.append(\")\");\r\n  \t\r\n  \treturn buf.toString();\r\n  }\r\n  \r\n  private String toString(double[] ordinates)\r\n  {\r\n    if (ordinates == null) return SQL_NULL;\r\n    \r\n    StringBuffer buf = new StringBuffer();\r\n    for (int i = 0; i < ordinates.length; i++) {\r\n      if (i > 0) {\r\n        buf.append(\",\");\r\n        // spacer between triplets\r\n        if (i % ordDim == 0)\r\n          buf.append(\"  \");\r\n      }\r\n      buf.append(number(ordinates[i]));\r\n    }\r\n    return buf.toString();\r\n  }\r\n\r\n  private static String number(double d)\r\n  {\r\n\t if (Double.isNaN(d)) return SQL_NULL;\r\n\t return fmt.format(d);\r\n  }\r\n  \r\n  public static String toStringElemInfo(int[] elemInfo)\r\n  {\r\n    if (elemInfo == null) return \"null\";\r\n    StringBuffer buf = new StringBuffer();\r\n    for (int i = 0; i < elemInfo.length; i++) {\r\n      if (i > 0) {\r\n        buf.append(\",\");\r\n        // spacer between triplets\r\n        if (i % 3 == 0)\r\n          buf.append(\"  \");\r\n      }\r\n      buf.append(elemInfo[i]);\r\n    }\r\n    return buf.toString();\r\n  }\r\n  \r\n  private Object toStringOrdinates() {\r\n\t  if (ordinates == null) {\r\n\t\t return SQL_NULL;\r\n\t  }\r\n\t  return \"SDO_ORDINATE_ARRAY(\" + toString(ordinates) + \")\"; \r\n  }\r\n\r\n  private Object toStringElemInfo() {\r\n\t  if (elemInfo == null) {\r\n\t\t return SQL_NULL;\r\n\t  }\r\n\t  return \"SDO_ELEM_INFO_ARRAY(\" + toStringElemInfo(elemInfo) + \")\"; \r\n  }\r\n\r\n  private Object toStringPointType() {\r\n\t  if (point == null) {\r\n\t\t return SQL_NULL;\r\n\t  }\r\n\t  return \"SDO_POINT_TYPE(\" \r\n\t  \t+ number(point[0]) + \",\"\r\n\t  \t+ number(point[1]) + \",\"\r\n\t  \t+ number(point[2])\r\n\t  \t+ \")\"; \r\n  }\r\n\r\npublic int startingOffset(int elemIndex)\r\n  {\r\n    // if beyond actual elements, return \"virtual\" startingOffset\r\n    if (((elemIndex * 3)) >= elemInfo.length) {\r\n      return ordinates.length + 1;\r\n    }\r\n    return elemInfo[elemIndex * 3];\r\n  }\r\n\r\n  /**\r\n   * Extracts the SDO_ELEM_INFO ETYPE value for a given triplet.\r\n   *\r\n   * @param elemIndex index of the triplet to read\r\n   * @return ETYPE for indicated triplet, or -1 if the triplet index is out of range\r\n   * \r\n   * @see ETYPE\r\n   */\r\n  public int eType(int elemIndex)\r\n  {\r\n    if (((elemIndex * 3) + 1) >= elemInfo.length) {\r\n      return -1;\r\n    }\r\n    return elemInfo[(elemIndex * 3) + 1];\r\n  }\r\n\r\n  /**\r\n   * Extracts the SDO_ELEM_INFO interpretation value (SDO_INTERPRETATION) for a given triplet.\r\n   * <p>\r\n   * JTS valid interpretation values are: 1 for straight edges, 3 for rectangle\r\n   * Other interpretation value include: 2 for arcs, 4 for circles\r\n   *\r\n   * @param elemIndex index of the triplet to read\r\n   * @return interpretation value, or -1 if the triplet index is out of range\r\n   */\r\n  public int interpretation(int elemIndex)\r\n  {\r\n    if (((elemIndex * 3) + 2) >= elemInfo.length) {\r\n      return -1;\r\n    }\r\n    return elemInfo[(elemIndex * 3) + 2];\r\n  }\r\n\r\n  public int ordinateLen()\r\n  {\r\n    if (ordinates != null)\r\n      return ordinates.length;\r\n    return 0;\r\n  }\r\n\r\n  public int numElements()\r\n  {\r\n    if (elemInfo == null) return 0;\r\n    return elemInfo.length / 3;\r\n  }\r\n  /**\r\n   * Computes the SDO_GTYPE code for the given D, L, and TT components.\r\n   * \r\n   * @param dim the coordinate dimension\r\n   * @param lrsDim the measure dimension\r\n   * @param geomType the geometry type code\r\n   * @return the SDO_GTYPE code\r\n   */\r\n  public static int gType(int dim, int lrsDim, int geomType)\r\n  {\r\n    return dim * 1000 + lrsDim * 100 + geomType;\r\n  }\r\n\r\n  /**\r\n   * Returns the GTYPE GEOM_TYPE code\r\n   * corresponding to the geometry type.\r\n   * \r\n   * @see OraGeom.GEOM_TYPE\r\n   *\r\n   * @param geom the geometry to compute the GEOM_TYPE for\r\n   * @return geom type code, if known, or UNKNOWN\r\n   */\r\n  static int geomType(Geometry geom) {\r\n    if (geom == null) {\r\n        return OraGeom.GEOM_TYPE.UNKNOWN_GEOMETRY; \r\n    } else if (geom instanceof Point) {\r\n        return OraGeom.GEOM_TYPE.POINT;\r\n    } else if (geom instanceof LineString) {\r\n        return OraGeom.GEOM_TYPE.LINE;\r\n    } else if (geom instanceof Polygon) {\r\n        return OraGeom.GEOM_TYPE.POLYGON;\r\n    } else if (geom instanceof MultiPoint) {\r\n        return OraGeom.GEOM_TYPE.MULTIPOINT;\r\n    } else if (geom instanceof MultiLineString) {\r\n        return OraGeom.GEOM_TYPE.MULTILINE;\r\n    } else if (geom instanceof MultiPolygon) {\r\n        return OraGeom.GEOM_TYPE.MULTIPOLYGON;\r\n    } else if (geom instanceof GeometryCollection) {\r\n        return OraGeom.GEOM_TYPE.COLLECTION;\r\n    }\r\n    return OraGeom.GEOM_TYPE.UNKNOWN_GEOMETRY; \r\n  }\r\n\r\n  /**\r\n   * Extracts the coordinate dimension containing the Measure value from \r\n   * an SDO_GTYPE code.\r\n   * For a measured geometry this is 0, 3 or 4.  0 indicates that the last dimension is the measure dimension\r\n   * For an non-measured geometry this is 0.\r\n   * \r\n   * @param gType an SDO_GTYPE code\r\n   * @return the Measure dimension\r\n   */\r\n  static int gTypeMeasureDim(int gType) {\r\n  \treturn (gType % 1000) / 100;\r\n  }\r\n\r\n  /**\r\n   * Extracts the coordinate dimension from an SDO_GTYPE code.\r\n   * \r\n   * @param gType an SDO_GTYPE code\r\n   * @return the coordinate dimension\r\n   */\r\n  static int gTypeDim(int gType) {\r\n  \treturn gType / 1000;\r\n  }\r\n\r\n  /**\r\n   * Extracts the GEOM_TYPE code from an SDO_GTYPE code.\r\n   * \r\n   * @param gType an SDO_GTYPE code\r\n   * @return the GEOM_TYPE code\r\n   */\r\n  static int gTypeGeomType(int gType) {\r\n  \treturn gType % 100;\r\n  }\r\n\r\n  /**\r\n   * Extracts the SDO_ELEM_INFO start index (SDO_STARTING_OFFSET) in the ordinate array for a given triplet.\r\n   * Starting offsets are 1-based indexes.\r\n   *\r\n   * @param elemInfo the SDO_ELEM_INFO array\r\n   * @param tripletIndex index of the triplet to read\r\n   * @return Starting Offset, or -1 if the triplet index is too large\r\n   */\r\n  static int startingOffset(int[] elemInfo, int tripletIndex) {\r\n      if (((tripletIndex * 3) + 0) >= elemInfo.length) {\r\n          return -1;\r\n      }\r\n      return elemInfo[(tripletIndex * 3) + 0];\r\n  }\r\n\r\n  /**\r\n   * Extracts the SDO_ELEM_INFO interpretation value (SDO_INTERPRETATION) for a given triplet.\r\n   * <p>\r\n   * JTS valid interpretation values are: 1 for straight edges, 3 for rectangle\r\n   * Other interpretation value include: 2 for arcs, 4 for circles\r\n   *\r\n   * @param elemInfo the SDO_ELEM_INFO array\r\n   * @param tripletIndex index of the triplet to read\r\n   * @return interpretation value, or -1 if the triplet index is too large\r\n   */\r\n  static int interpretation(int[] elemInfo, int tripletIndex) {\r\n      if (((tripletIndex * 3) + 2) >= elemInfo.length) {\r\n          return -1;\r\n      }\r\n      return elemInfo[(tripletIndex * 3) + 2];\r\n  }\r\n\r\n  /**\r\n   * Extracts the SDO_ELEM_INFO ETYPE value for a given triplet.\r\n   * <p>\r\n   * @see OraGeom.ETYPE for an indication of possible values\r\n   *\r\n   * @param elemInfo the SDO_ELEM_INFO array\r\n   * @param tripletIndex index of the triplet to read\r\n   * @return ETYPE for indicated triplet, or -1 if the triplet index is too large\r\n   */\r\n  static int eType(int[] elemInfo, int tripletIndex) {\r\n      if (((tripletIndex * 3) + 1) >= elemInfo.length) {\r\n          return -1;\r\n      }\r\n      return elemInfo[(tripletIndex * 3) + 1];\r\n  }\r\n\r\n  /**\r\n   * Codes used in SDO_INTERPRETATION attribute.\r\n   * \r\n   * @author Martin Davis\r\n   *\r\n   */\r\n  static final class INTERP {\r\n    \r\n    public static final int POINT         = 1;\r\n    \r\n    public static final int LINESTRING    = 1;  \r\n    \r\n    public static final int POLYGON       = 1;  \r\n    \r\n    public static final int RECTANGLE     = 3;  \r\n        \r\n  }\r\n\r\n  /**\r\n   * Codes used to specify geometry type\r\n   * These are used in the last two digits in a GTYPE value.\r\n   */\r\n  static final class GEOM_TYPE {\r\n  \r\n    /** <code>TT</code> code representing Unknown type */\r\n    public static final int UNKNOWN_GEOMETRY       = 00;\r\n  \r\n    /** <code>TT</code> code representing Point */\r\n    public static final int POINT         = 01;\r\n  \r\n    /** <code>TT</code> code representing Line (or Curve) */\r\n    public static final int LINE          = 02;  \r\n      \r\n    /** <code>TT</code> code representing Polygon */\r\n    public static final int POLYGON       = 03;\r\n  \r\n    /** <code>TT</code> code representing Collection */\r\n    public static final int COLLECTION    = 04;   \r\n  \r\n    /** <code>TT</code> code representing MultiPoint */\r\n    public static final int MULTIPOINT    = 05;       \r\n  \r\n    /** <code>TT</code> code representing MultiLine (or MultiCurve) */\r\n    public static final int MULTILINE     = 06;\r\n  \r\n    /** <code>TT</code> code representing MULTIPOLYGON */\r\n    public static final int MULTIPOLYGON  = 07;\r\n  }\r\n\r\n  /**\r\n   * Codes used in the SDO_ETYPE attribute.\r\n   * The code indicates the type of element denoted by an SDO_ELEM_INFO triplet.\r\n   */\r\n  static final class ETYPE\r\n  {\r\n    /** <code>ETYPE</code> code representing Point */\r\n    public static final int POINT = 1;\r\n  \r\n    /** <code>ETYPE</code> code representing Line */\r\n    public static final int LINE = 2;\r\n  \r\n    /** <code>ETYPE</code> code representing Polygon ring \r\n     *  Shell or hole is determined by orientation (CCW or CW).\r\n     *  Now deprecated. \r\n     */\r\n    public static final int POLYGON = 3;\r\n  \r\n    /**\r\n     * <code>ETYPE</code> code representing exterior counterclockwise polygon ring\r\n     */\r\n    public static final int POLYGON_EXTERIOR = 1003;\r\n  \r\n    /** <code>ETYPE</code> code representing interior clockwise polygon ring */\r\n    public static final int POLYGON_INTERIOR = 2003;\r\n  }\r\n  \r\n  /**\r\n   * Oracle types used by SDO_GEOMETRY\r\n   */\r\n  public static final String TYPE_GEOMETRY = \"MDSYS.SDO_GEOMETRY\";\r\n  public static final String TYPE_ELEM_INFO_ARRAY = \"MDSYS.SDO_ELEM_INFO_ARRAY\";\r\n  public static final String TYPE_ORDINATE_ARRAY = \"MDSYS.SDO_ORDINATE_ARRAY\";\r\n  public static final String TYPE_POINT_TYPE = \"MDSYS.SDO_POINT_TYPE\";\r\n  \r\n  /**\r\n   * Value indicating a Null SRID.\r\n   */\r\n  public static final int SRID_NULL = -1;\r\n\r\n\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"metteo/jts","sample_ref":"refs/heads/master","sample_path":"jts-io-oracle/src/main/java/com/vividsolutions/jts/io/oracle/OraGeom.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d9ad5ae34b2c3cd02b8655bc398fc42f9efb95f0","size":"883","content":"package com.artemis.io;\n\nimport com.artemis.Entity;\nimport com.artemis.World;\nimport com.artemis.utils.Bag;\nimport com.esotericsoftware.jsonbeans.Json;\nimport com.esotericsoftware.jsonbeans.JsonSerializer;\nimport com.esotericsoftware.jsonbeans.JsonValue;\n\npublic class EntityBagSerializer implements JsonSerializer<Bag> {\n\tprivate final World world;\n\n\tpublic EntityBagSerializer(World world) {\n\t\tthis.world = world;\n\t\tworld.inject(this);\n\t}\n\n\t@Override\n\tpublic void write(Json json, Bag bag, Class knownType) {\n\t\tjson.writeArrayStart();\n\t\tfor (Object item : bag)\n\t\t\tjson.writeValue(item);\n\t\tjson.writeArrayEnd();\n\t}\n\n\t@Override\n\tpublic Bag read(Json json, JsonValue jsonData, Class type) {\n\t\tBag<Entity> result = new Bag<Entity>();\n\t\tfor (JsonValue child = jsonData.child; child != null; child = child.next)\n\t\t\tresult.add(json.readValue(Entity.class, child));\n\n\t\treturn result;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"junkdog/artemis-odb","sample_ref":"refs/heads/master","sample_path":"artemis-json/src/main/java/com/artemis/io/EntityBagSerializer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4d3224a63db17c60404383c074c80217ae1d489f","size":"2033","content":"/**\n* OLAT - Online Learning and Training<br>\n* http://www.olat.org\n* <p>\n* Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n* you may not use this file except in compliance with the License.<br>\n* You may obtain a copy of the License at\n* <p>\n* http://www.apache.org/licenses/LICENSE-2.0\n* <p>\n* Unless required by applicable law or agreed to in writing,<br>\n* software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n* See the License for the specific language governing permissions and <br>\n* limitations under the License.\n* <p>\n* Copyright (c) since 2004 at Multimedia- & E-Learning Services (MELS),<br>\n* University of Zurich, Switzerland.\n* <hr>\n* <a href=\"http://www.openolat.org\">\n* OpenOLAT - Online Learning and Training</a><br>\n* This file has been modified by the OpenOLAT community. Changes are licensed\n* under the Apache 2.0 license as the original file.  \n* <p>\n*/  \n\npackage org.olat.course.statistic.weekly;\n\nimport org.olat.core.commons.persistence.PersistentObject;\n\n/**\n * Hibernate object representing an entry in the o_stat_weekly table.\n * <P>\n * Initial Date:  12.02.2010 <br>\n * @author Stefan\n */\npublic class WeeklyStat extends PersistentObject {\n\n\tprivate static final long serialVersionUID = 8424069134569751417L;\n\tprivate String businessPath;\n\tprivate String week;\n\tprivate int value;\n\tprivate long resId;\n\t\n\tpublic WeeklyStat(){\n\t// for hibernate\t\n\t}\n\t\n\tpublic final long getResId() {\n\t\treturn resId;\n\t}\n\t\n\tpublic void setResId(long resId) {\n\t\tthis.resId = resId;\n\t}\n\t\n\tpublic final String getBusinessPath() {\n\t\treturn businessPath;\n\t}\n\n\tpublic final void setBusinessPath(String businessPath) {\n\t\tthis.businessPath = businessPath;\n\t}\n\n\tpublic final String getWeek() {\n\t\treturn week;\n\t}\n\t\n\tpublic final void setWeek(String week) {\n\t\tthis.week = week;\n\t}\n\t\n\tpublic final int getValue() {\n\t\treturn value;\n\t}\n\t\n\tpublic final void setValue(int value) {\n\t\tthis.value = value;\n\t}\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"klemens/openolat","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/olat/course/statistic/weekly/WeeklyStat.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d6909a47aff3500199151e1573f212a8ba008a22","size":"32713","content":"/**\n */\npackage fr.inria.diverse.melanger.miniactionlangmt.minilang.util;\n\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.And;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Block;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.BooleanAssignment;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.BooleanExpression;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.BooleanOperation;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.BooleanVar;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.BooleanVariableRef;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Context;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Divide;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Equal;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Greater;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.GreaterOrEqual;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.If;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.IntAssignment;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.IntComparison;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.IntExpression;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.IntOperation;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.IntVariableRef;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.IntegerVar;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Less;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.LessOrEqual;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.MinilangPackage;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Minus;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Multiply;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Not;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Or;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Plus;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.PrintStr;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.PrintVar;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Statement;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.Variable;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.VariableRef;\nimport fr.inria.diverse.melanger.miniactionlangmt.minilang.While;\n\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.emf.ecore.EPackage;\n\nimport org.eclipse.emf.ecore.util.Switch;\n\n/**\n * <!-- begin-user-doc -->\n * The <b>Switch</b> for the model's inheritance hierarchy.\n * It supports the call {@link #doSwitch(EObject) doSwitch(object)}\n * to invoke the <code>caseXXX</code> method for each class of the model,\n * starting with the actual class of the object\n * and proceeding up the inheritance hierarchy\n * until a non-null result is returned,\n * which is the result of the switch.\n * <!-- end-user-doc -->\n * @see fr.inria.diverse.melanger.miniactionlangmt.minilang.MinilangPackage\n * @generated\n */\npublic class MinilangSwitch<T> extends Switch<T> {\n\t/**\n\t * The cached model package\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tprotected static MinilangPackage modelPackage;\n\n\t/**\n\t * Creates an instance of the switch.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @generated\n\t */\n\tpublic MinilangSwitch() {\n\t\tif (modelPackage == null) {\n\t\t\tmodelPackage = MinilangPackage.eINSTANCE;\n\t\t}\n\t}\n\n\t/**\n\t * Checks whether this is a switch for the given package.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @param ePackage the package in question.\n\t * @return whether this is a switch for the given package.\n\t * @generated\n\t */\n\t@Override\n\tprotected boolean isSwitchFor(EPackage ePackage) {\n\t\treturn ePackage == modelPackage;\n\t}\n\n\t/**\n\t * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.\n\t * <!-- begin-user-doc -->\n\t * <!-- end-user-doc -->\n\t * @return the first non-null result returned by a <code>caseXXX</code> call.\n\t * @generated\n\t */\n\t@Override\n\tprotected T doSwitch(int classifierID, EObject theEObject) {\n\t\tswitch (classifierID) {\n\t\t\tcase MinilangPackage.INT_EXPRESSION: {\n\t\t\t\tIntExpression intExpression = (IntExpression)theEObject;\n\t\t\t\tT result = caseIntExpression(intExpression);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.INTEGER: {\n\t\t\t\tfr.inria.diverse.melanger.miniactionlangmt.minilang.Integer integer = (fr.inria.diverse.melanger.miniactionlangmt.minilang.Integer)theEObject;\n\t\t\t\tT result = caseInteger(integer);\n\t\t\t\tif (result == null) result = caseIntExpression(integer);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.BOOLEAN: {\n\t\t\t\tfr.inria.diverse.melanger.miniactionlangmt.minilang.Boolean boolean_ = (fr.inria.diverse.melanger.miniactionlangmt.minilang.Boolean)theEObject;\n\t\t\t\tT result = caseBoolean(boolean_);\n\t\t\t\tif (result == null) result = caseBooleanExpression(boolean_);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.INT_OPERATION: {\n\t\t\t\tIntOperation intOperation = (IntOperation)theEObject;\n\t\t\t\tT result = caseIntOperation(intOperation);\n\t\t\t\tif (result == null) result = caseIntExpression(intOperation);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.EQUAL: {\n\t\t\t\tEqual equal = (Equal)theEObject;\n\t\t\t\tT result = caseEqual(equal);\n\t\t\t\tif (result == null) result = caseIntComparison(equal);\n\t\t\t\tif (result == null) result = caseBooleanExpression(equal);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.GREATER: {\n\t\t\t\tGreater greater = (Greater)theEObject;\n\t\t\t\tT result = caseGreater(greater);\n\t\t\t\tif (result == null) result = caseIntComparison(greater);\n\t\t\t\tif (result == null) result = caseBooleanExpression(greater);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.GREATER_OR_EQUAL: {\n\t\t\t\tGreaterOrEqual greaterOrEqual = (GreaterOrEqual)theEObject;\n\t\t\t\tT result = caseGreaterOrEqual(greaterOrEqual);\n\t\t\t\tif (result == null) result = caseIntComparison(greaterOrEqual);\n\t\t\t\tif (result == null) result = caseBooleanExpression(greaterOrEqual);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.LESS: {\n\t\t\t\tLess less = (Less)theEObject;\n\t\t\t\tT result = caseLess(less);\n\t\t\t\tif (result == null) result = caseIntComparison(less);\n\t\t\t\tif (result == null) result = caseBooleanExpression(less);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.LESS_OR_EQUAL: {\n\t\t\t\tLessOrEqual lessOrEqual = (LessOrEqual)theEObject;\n\t\t\t\tT result = caseLessOrEqual(lessOrEqual);\n\t\t\t\tif (result == null) result = caseIntComparison(lessOrEqual);\n\t\t\t\tif (result == null) result = caseBooleanExpression(lessOrEqual);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.NOT: {\n\t\t\t\tNot not = (Not)theEObject;\n\t\t\t\tT result = caseNot(not);\n\t\t\t\tif (result == null) result = caseBooleanExpression(not);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.OR: {\n\t\t\t\tOr or = (Or)theEObject;\n\t\t\t\tT result = caseOr(or);\n\t\t\t\tif (result == null) result = caseBooleanOperation(or);\n\t\t\t\tif (result == null) result = caseBooleanExpression(or);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.AND: {\n\t\t\t\tAnd and = (And)theEObject;\n\t\t\t\tT result = caseAnd(and);\n\t\t\t\tif (result == null) result = caseBooleanOperation(and);\n\t\t\t\tif (result == null) result = caseBooleanExpression(and);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.PLUS: {\n\t\t\t\tPlus plus = (Plus)theEObject;\n\t\t\t\tT result = casePlus(plus);\n\t\t\t\tif (result == null) result = caseIntOperation(plus);\n\t\t\t\tif (result == null) result = caseIntExpression(plus);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.MINUS: {\n\t\t\t\tMinus minus = (Minus)theEObject;\n\t\t\t\tT result = caseMinus(minus);\n\t\t\t\tif (result == null) result = caseIntOperation(minus);\n\t\t\t\tif (result == null) result = caseIntExpression(minus);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.MULTIPLY: {\n\t\t\t\tMultiply multiply = (Multiply)theEObject;\n\t\t\t\tT result = caseMultiply(multiply);\n\t\t\t\tif (result == null) result = caseIntOperation(multiply);\n\t\t\t\tif (result == null) result = caseIntExpression(multiply);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.DIVIDE: {\n\t\t\t\tDivide divide = (Divide)theEObject;\n\t\t\t\tT result = caseDivide(divide);\n\t\t\t\tif (result == null) result = caseIntOperation(divide);\n\t\t\t\tif (result == null) result = caseIntExpression(divide);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.INT_COMPARISON: {\n\t\t\t\tIntComparison intComparison = (IntComparison)theEObject;\n\t\t\t\tT result = caseIntComparison(intComparison);\n\t\t\t\tif (result == null) result = caseBooleanExpression(intComparison);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.BOOLEAN_EXPRESSION: {\n\t\t\t\tBooleanExpression booleanExpression = (BooleanExpression)theEObject;\n\t\t\t\tT result = caseBooleanExpression(booleanExpression);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.BOOLEAN_OPERATION: {\n\t\t\t\tBooleanOperation booleanOperation = (BooleanOperation)theEObject;\n\t\t\t\tT result = caseBooleanOperation(booleanOperation);\n\t\t\t\tif (result == null) result = caseBooleanExpression(booleanOperation);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.BOOLEAN_VARIABLE_REF: {\n\t\t\t\tBooleanVariableRef booleanVariableRef = (BooleanVariableRef)theEObject;\n\t\t\t\tT result = caseBooleanVariableRef(booleanVariableRef);\n\t\t\t\tif (result == null) result = caseVariableRef(booleanVariableRef);\n\t\t\t\tif (result == null) result = caseBooleanExpression(booleanVariableRef);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.INT_VARIABLE_REF: {\n\t\t\t\tIntVariableRef intVariableRef = (IntVariableRef)theEObject;\n\t\t\t\tT result = caseIntVariableRef(intVariableRef);\n\t\t\t\tif (result == null) result = caseVariableRef(intVariableRef);\n\t\t\t\tif (result == null) result = caseIntExpression(intVariableRef);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.VARIABLE_REF: {\n\t\t\t\tVariableRef variableRef = (VariableRef)theEObject;\n\t\t\t\tT result = caseVariableRef(variableRef);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.STATEMENT: {\n\t\t\t\tStatement statement = (Statement)theEObject;\n\t\t\t\tT result = caseStatement(statement);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.BOOLEAN_ASSIGNMENT: {\n\t\t\t\tBooleanAssignment booleanAssignment = (BooleanAssignment)theEObject;\n\t\t\t\tT result = caseBooleanAssignment(booleanAssignment);\n\t\t\t\tif (result == null) result = caseStatement(booleanAssignment);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.INT_ASSIGNMENT: {\n\t\t\t\tIntAssignment intAssignment = (IntAssignment)theEObject;\n\t\t\t\tT result = caseIntAssignment(intAssignment);\n\t\t\t\tif (result == null) result = caseStatement(intAssignment);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.PRINT_VAR: {\n\t\t\t\tPrintVar printVar = (PrintVar)theEObject;\n\t\t\t\tT result = casePrintVar(printVar);\n\t\t\t\tif (result == null) result = caseStatement(printVar);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.PRINT_STR: {\n\t\t\t\tPrintStr printStr = (PrintStr)theEObject;\n\t\t\t\tT result = casePrintStr(printStr);\n\t\t\t\tif (result == null) result = caseStatement(printStr);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.BLOCK: {\n\t\t\t\tBlock block = (Block)theEObject;\n\t\t\t\tT result = caseBlock(block);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.IF: {\n\t\t\t\tIf if_ = (If)theEObject;\n\t\t\t\tT result = caseIf(if_);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.WHILE: {\n\t\t\t\tWhile while_ = (While)theEObject;\n\t\t\t\tT result = caseWhile(while_);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.CONTEXT: {\n\t\t\t\tContext context = (Context)theEObject;\n\t\t\t\tT result = caseContext(context);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.VARIABLE: {\n\t\t\t\tVariable variable = (Variable)theEObject;\n\t\t\t\tT result = caseVariable(variable);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.INTEGER_VAR: {\n\t\t\t\tIntegerVar integerVar = (IntegerVar)theEObject;\n\t\t\t\tT result = caseIntegerVar(integerVar);\n\t\t\t\tif (result == null) result = caseVariable(integerVar);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcase MinilangPackage.BOOLEAN_VAR: {\n\t\t\t\tBooleanVar booleanVar = (BooleanVar)theEObject;\n\t\t\t\tT result = caseBooleanVar(booleanVar);\n\t\t\t\tif (result == null) result = caseVariable(booleanVar);\n\t\t\t\tif (result == null) result = defaultCase(theEObject);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tdefault: return defaultCase(theEObject);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Int Expression</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Int Expression</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseIntExpression(IntExpression object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Integer</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Integer</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseInteger(fr.inria.diverse.melanger.miniactionlangmt.minilang.Integer object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Boolean</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Boolean</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseBoolean(fr.inria.diverse.melanger.miniactionlangmt.minilang.Boolean object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Int Operation</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Int Operation</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseIntOperation(IntOperation object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Equal</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Equal</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseEqual(Equal object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Greater</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Greater</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseGreater(Greater object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Greater Or Equal</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Greater Or Equal</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseGreaterOrEqual(GreaterOrEqual object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Less</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Less</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseLess(Less object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Less Or Equal</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Less Or Equal</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseLessOrEqual(LessOrEqual object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Not</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Not</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseNot(Not object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Or</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Or</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseOr(Or object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>And</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>And</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseAnd(And object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Plus</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Plus</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T casePlus(Plus object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Minus</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Minus</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseMinus(Minus object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Multiply</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Multiply</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseMultiply(Multiply object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Divide</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Divide</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseDivide(Divide object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Int Comparison</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Int Comparison</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseIntComparison(IntComparison object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Boolean Expression</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseBooleanExpression(BooleanExpression object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Boolean Operation</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Boolean Operation</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseBooleanOperation(BooleanOperation object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Boolean Variable Ref</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Boolean Variable Ref</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseBooleanVariableRef(BooleanVariableRef object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Int Variable Ref</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Int Variable Ref</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseIntVariableRef(IntVariableRef object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Variable Ref</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Variable Ref</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseVariableRef(VariableRef object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Statement</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseStatement(Statement object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Boolean Assignment</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Boolean Assignment</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseBooleanAssignment(BooleanAssignment object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Int Assignment</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Int Assignment</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseIntAssignment(IntAssignment object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Print Var</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Print Var</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T casePrintVar(PrintVar object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Print Str</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Print Str</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T casePrintStr(PrintStr object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Block</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Block</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseBlock(Block object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>If</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>If</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseIf(If object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>While</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>While</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseWhile(While object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Context</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Context</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseContext(Context object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Variable</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseVariable(Variable object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Integer Var</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Integer Var</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseIntegerVar(IntegerVar object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>Boolean Var</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>Boolean Var</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)\n\t * @generated\n\t */\n\tpublic T caseBooleanVar(BooleanVar object) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.\n\t * <!-- begin-user-doc -->\n\t * This implementation returns null;\n\t * returning a non-null result will terminate the switch, but this is the last case anyway.\n\t * <!-- end-user-doc -->\n\t * @param object the target of the switch.\n\t * @return the result of interpreting the object as an instance of '<em>EObject</em>'.\n\t * @see #doSwitch(org.eclipse.emf.ecore.EObject)\n\t * @generated\n\t */\n\t@Override\n\tpublic T defaultCase(EObject object) {\n\t\treturn null;\n\t}\n\n} //MinilangSwitch\n","binary":"false","copies":"1","sample_repo_name":"diverse-project/melange","sample_ref":"refs/heads/master","sample_path":"examples/MiniFSM/languageProjects/fr.inria.diverse.melange.fsm/src-gen/fr/inria/diverse/melanger/miniactionlangmt/minilang/util/MinilangSwitch.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f8626e94c979b83ce182b577c999245c20b73990","size":"2469","content":"/*******************************************************************************\n *  \n *  Copyright (c) 2013 blinkbox Entertainment Limited. All rights reserved.\n *\n *  \n *******************************************************************************/\npackage com.blinkbox.java.book.utils;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic class StreamUtils {\n\n\tprivate static final int IO_COPY_BUFFER_SIZE = 1024 * 4;\n\n\t/**\n\t * Returns the contents of the InputStream as a byte[]\n\t * \n\t * @param in\n\t * @return\n\t * @throws IOException\n\t */\n\tpublic static byte[] toByteArray(InputStream in) throws IOException {\n\t\tByteArrayOutputStream result = new ByteArrayOutputStream();\n\t\tcopy(in, result);\n\t\tresult.flush();\n\t\treturn result.toByteArray();\n\t}\n\n\t/**\n\t * Reads data from the InputStream, using the specified buffer size.\n\t * \n\t * This is meant for situations where memory is tight, since it prevents\n\t * buffer expansion.\n\t * \n\t * @param in the stream to read data from\n\t * @param size\n\t *            the size of the array to create\n\t * @return the array, or null\n\t * @throws IOException\n\t */\n\tpublic static byte[] toByteArray(InputStream in, int size) throws IOException {\n\n\t\ttry {\n\t\t\tByteArrayOutputStream result;\n\n\t\t\tif (size > 0) {\n\t\t\t\tresult = new ByteArrayOutputStream(size);\n\t\t\t} else {\n\t\t\t\tresult = new ByteArrayOutputStream();\n\t\t\t}\n\n\t\t\tcopy(in, result);\n\t\t\tresult.flush();\n\t\t\treturn result.toByteArray();\n\t\t} catch (OutOfMemoryError error) {\n\t\t\t// Return null so it gets loaded lazily.\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\t/**\n\t * @param nrRead\n\t * @param totalNrNread\n\t * @return\n\t */\n\tprotected static int calcNewNrReadSize(int nrRead, int totalNrNread) {\n\t\tif (totalNrNread < 0) {\n\t\t\treturn totalNrNread;\n\t\t}\n\t\tif (totalNrNread > (Integer.MAX_VALUE - nrRead)) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn (totalNrNread + nrRead);\n\t\t}\n\t}\n\n\t/**\n\t * Copies the contents of the InputStream to the OutputStream.\n\t * \n\t * @param in\n\t * @param out\n\t * @return the nr of bytes read, or -1 if the amount greater than Integer.MAX_VALUE\n\t * @throws IOException\n\t */\n\tpublic static int copy(InputStream in, OutputStream out) throws IOException {\n\t\tbyte[] buffer = new byte[IO_COPY_BUFFER_SIZE];\n\t\tint readSize = -1;\n\t\tint result = 0;\n\t\twhile ((readSize = in.read(buffer)) >= 0) {\n\t\t\tout.write(buffer, 0, readSize);\n\t\t\tresult = calcNewNrReadSize(readSize, result);\n\t\t}\n\t\tout.flush();\n\t\treturn result;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"blinkboxbooks/android-ePub-Library","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/blinkbox/java/book/utils/StreamUtils.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"089a42a722ed10b78c7e22b5b0374487007ada98","size":"7565","content":"package protect.budgetwatch;\n\nimport android.content.Context;\nimport android.content.DialogInterface;\nimport android.content.Intent;\nimport android.content.pm.PackageInfo;\nimport android.content.pm.PackageManager;\nimport android.os.Bundle;\nimport android.support.v7.app.AlertDialog;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.webkit.WebView;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport java.util.Calendar;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class MainActivity extends AppCompatActivity\n{\n    private final static String TAG = \"BudgetWatch\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main_activity);\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        List<MainMenuItem> menuItems = new LinkedList<>();\n        menuItems.add(new MainMenuItem(R.drawable.purse, R.string.budgetsTitle,\n                R.string.budgetDescription));\n        menuItems.add(new MainMenuItem(R.drawable.transaction, R.string.transactionsTitle,\n                R.string.transactionsDescription));\n\n        final ListView buttonList = (ListView) findViewById(R.id.list);\n        final MenuAdapter buttonListAdapter = new MenuAdapter(this, menuItems);\n        buttonList.setAdapter(buttonListAdapter);\n        buttonList.setOnItemClickListener(new AdapterView.OnItemClickListener()\n        {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id)\n            {\n                MainMenuItem item = (MainMenuItem)parent.getItemAtPosition(position);\n\n                Class goalClass = null;\n\n                switch(item.menuTextId)\n                {\n                    case R.string.budgetsTitle:\n                        goalClass = BudgetActivity.class;\n                        break;\n                    case R.string.transactionsTitle:\n                        goalClass = TransactionActivity.class;\n                        break;\n                    default:\n                        Log.w(TAG, \"Unexpected menu text id: \" + item.menuTextId);\n                        break;\n                }\n\n                if(goalClass != null)\n                {\n                    Intent i = new Intent(getApplicationContext(), goalClass);\n                    startActivity(i);\n                }\n            }\n        });\n    }\n\n    static class MainMenuItem\n    {\n        public final int iconId;\n        public final int menuTextId;\n        public final int menuDescId;\n\n        public MainMenuItem(int iconId, int menuTextId, int menuDescId)\n        {\n            this.iconId = iconId;\n            this.menuTextId = menuTextId;\n            this.menuDescId = menuDescId;\n        }\n    }\n\n    static class MenuAdapter extends ArrayAdapter<MainMenuItem>\n    {\n        public MenuAdapter(Context context, List<MainMenuItem> items)\n        {\n            super(context, 0, items);\n        }\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent)\n        {\n            // Get the data item for this position\n            MainMenuItem item = getItem(position);\n\n            // Check if an existing view is being reused, otherwise inflate the view\n\n            if (convertView == null)\n            {\n                convertView = LayoutInflater.from(getContext()).inflate(R.layout.main_button,\n                        parent, false);\n            }\n\n            TextView menuText = (TextView) convertView.findViewById(R.id.menu);\n            TextView menuDescText = (TextView) convertView.findViewById(R.id.menudesc);\n            ImageView icon = (ImageView) convertView.findViewById(R.id.image);\n\n            menuText.setText(item.menuTextId);\n            menuDescText.setText(item.menuDescId);\n            icon.setImageResource(item.iconId);\n\n            return convertView;\n        }\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu)\n    {\n        getMenuInflater().inflate(R.menu.main_menu, menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item)\n    {\n        int id = item.getItemId();\n\n        if(id == R.id.action_import_export)\n        {\n            Intent i = new Intent(getApplicationContext(), ImportExportActivity.class);\n            startActivity(i);\n            return true;\n        }\n\n        if(id == R.id.action_about)\n        {\n            displayAboutDialog();\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n    private void displayAboutDialog()\n    {\n        final String[][] USED_LIBRARIES = new String[][]\n        {\n            new String[] {\"Commons CSV\", \"https://commons.apache.org/proper/commons-csv/\"},\n        };\n\n        StringBuilder libs = new StringBuilder().append(\"<ul>\");\n        for (String[] library : USED_LIBRARIES)\n        {\n            libs.append(\"<li><a href=\\\"\").append(library[1]).append(\"\\\">\").append(library[0]).append(\"</a></li>\");\n        }\n        libs.append(\"</ul>\");\n\n        String appName = getString(R.string.app_name);\n        int year = Calendar.getInstance().get(Calendar.YEAR);\n\n        String version = \"?\";\n        try\n        {\n            PackageInfo pi = getPackageManager().getPackageInfo(getPackageName(), 0);\n            version = pi.versionName;\n        }\n        catch (PackageManager.NameNotFoundException e)\n        {\n            Log.w(TAG, \"Package name not found\", e);\n        }\n\n        WebView wv = new WebView(this);\n        String html =\n            \"<meta http-equiv=\\\"content-type\\\" content=\\\"text/html; charset=utf-8\\\" />\" +\n            \"<img src=\\\"file:///android_res/mipmap/ic_launcher.png\\\" alt=\\\"\" + appName + \"\\\"/>\" +\n            \"<h1>\" +\n            String.format(getString(R.string.about_title_fmt),\n                    \"<a href=\\\"\" + getString(R.string.app_webpage_url)) + \"\\\">\" +\n            appName +\n            \"</a>\" +\n            \"</h1><p>\" +\n            appName +\n            \" \" +\n            String.format(getString(R.string.debug_version_fmt), version) +\n            \"</p><p>\" +\n            String.format(getString(R.string.app_revision_fmt),\n                    \"<a href=\\\"\" + getString(R.string.app_revision_url) + \"\\\">\" +\n                            getString(R.string.app_revision_url) +\n                            \"</a>\") +\n            \"</p><hr/><p>\" +\n            String.format(getString(R.string.app_copyright_fmt), year) +\n            \"</p><hr/><p>\" +\n            getString(R.string.app_license) +\n            \"</p><hr/><p>\" +\n            String.format(getString(R.string.app_libraries), appName, libs.toString());\n\n        wv.loadDataWithBaseURL(\"file:///android_res/drawable/\", html, \"text/html\", \"utf-8\", null);\n        new AlertDialog.Builder(this)\n            .setView(wv)\n            .setCancelable(true)\n            .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener()\n            {\n                public void onClick(DialogInterface dialog, int which)\n                {\n                    dialog.dismiss();\n                }\n            })\n            .show();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"brarcher/budget-watch","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/protect/budgetwatch/MainActivity.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f6c2a9987a1e2162ed598427b982f47f74f42b11","size":"2746","content":"package net.fe.balance;\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.util.*;\n\nimport javax.swing.*;\n\nimport net.fe.unit.*;\n\n// TODO: Auto-generated Javadoc\n/**\n * The Class StatBalancer.\n */\npublic class StatBalancer extends JFrame {\n\t\n\t/** The Constant serialVersionUID. */\n\tprivate static final long serialVersionUID = 1L;\n\t\n\t/** The class tabs. */\n\tprivate TreeMap<String, BalancerTab> classTabs;\n\t\n\t\n\t/**\n\t * Instantiates a new stat balancer.\n\t *\n\t * @param units the units\n\t */\n\tpublic StatBalancer(List<Unit> units){\n\t\tsuper(\"FE:Multiplayer Stat Balancer\");\n\t\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\tclassTabs = new TreeMap<String, BalancerTab>();\n\t\t\n\t\tJTabbedPane panel = new JTabbedPane();\n\t\t\n\t\tHashMap<String, ArrayList<BalanceData>> data = \n\t\t\t\tnew HashMap<String, ArrayList<BalanceData>>();\n\t\tfor(Unit u: units){\n\t\t\tString clazz = u.getTheClass().name;\n\t\t\tif(!data.containsKey(clazz)){\n\t\t\t\t\n\t\t\t\tdata.put(clazz, new ArrayList<BalanceData>());\n\t\t\t}\n\t\t\tdata.get(clazz).add(new BalanceData(u));\n\t\t}\n\t\t\n\t\tfor(String clazz: data.keySet()){\n\t\t\t\n\t\t\tBalancerTab tab = new BalancerTab(data.get(clazz));\n\t\t\tclassTabs.put(clazz,tab);\n\t\t\tpanel.addTab(clazz, tab);\n\t\t}\n\t\t\n\t\tadd(panel);\n\t\t\n\t\tJButton button = new JButton(\"Export\");\n\t\tbutton.addActionListener(new ActionListener(){\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tJFileChooser chooser = new JFileChooser(\".\");\n\t\t\t\tint ret = chooser.showSaveDialog(StatBalancer.this);\n\t\t\t\tif(ret == JFileChooser.APPROVE_OPTION){\n\t\t\t\t\texport(chooser.getSelectedFile());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tadd(button, BorderLayout.SOUTH);\n\t\t\n\t\tpack();\n\t}\n\t\n\t/**\n\t * Export.\n\t *\n\t * @param f the f\n\t */\n\tprivate void export(File f){\n\t\ttry {\n\t\t\tPrintWriter pw = new PrintWriter(f);\n\t\t\tString head = \"#Name\\t\\tClass\\t\\t\\tLv\\t\";\n\t\t\tfor(String stat: BalanceData.ORDER){\n\t\t\t\thead += stat + \"\\t\";\n\t\t\t}\n\t\t\thead += \"Con\\tMov\\t\\t\";\n\t\t\tfor(String stat: BalanceData.ORDER){\n\t\t\t\thead += stat + \"\\t\";\n\t\t\t}\n\t\t\thead += \"\\tGender\";\n\t\t\tpw.println(head);\n\t\t\tfor(String clazz: classTabs.keySet()){\n\t\t\t\tpw.println(classTabs.get(clazz).exportString());\n\t\t\t}\n\t\t\tpw.close();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\t\n\t/**\n\t * The main method.\n\t *\n\t * @param args the arguments\n\t */\n\tpublic static void main(String[] args){\n\t\tSwingUtilities.invokeLater(new Runnable(){\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tWeaponFactory.loadWeapons();\n\t\t\t\tUnitFactory.loadUnits();\n\t\t\t\tStatBalancer balancer = new StatBalancer(UnitFactory.getAllUnits());\n\t\t\t\tbalancer.setLocationRelativeTo(null);\n\t\t\t\tbalancer.setVisible(true);\n\t\t\t}\n\t\t});\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"eliatlarge/FEMultiPlayer-V2","sample_ref":"refs/heads/master","sample_path":"src/net/fe/balance/StatBalancer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1d0757416de8974e16c87d9e7fd4276cbd2125ec","size":"2836","content":"/*******************************************************************************\n * Copyright (c) 2010-2013, Embraer S.A., Budapest University of Technology and Economics\n * All rights reserved. This program and the accompanying materials \n * are made available under the terms of the Eclipse Public License v1.0 \n * which accompanies this distribution, and is available at \n * http://www.eclipse.org/legal/epl-v10.html \n *\n * Contributors: \n *     Marton Bur, Abel Hegedus, Akos Horvath - initial API and implementation \n *******************************************************************************/\npackage hu.bme.mit.massif.communication.datavisitor;\n\nimport hu.bme.mit.massif.communication.datatype.CellMatlabData;\nimport hu.bme.mit.massif.communication.datatype.Handle;\nimport hu.bme.mit.massif.communication.datatype.Logical;\nimport hu.bme.mit.massif.communication.datatype.MatlabString;\nimport hu.bme.mit.massif.communication.datatype.StructMatlabData;\n\nimport java.util.Arrays;\n\n/**\n * Visitor implementation for command string creation\n */\npublic class ParameterVisitor implements IMatlabDataVisitor {\n\n    // private MatlabCommand command;\n    private String[] commandStrings;\n\n    public String[] getCommandStrings() {\n        return Arrays.copyOf(commandStrings, commandStrings.length);\n    }\n\n    public ParameterVisitor(String[] commandStrings) {\n        this.commandStrings = Arrays.copyOf(commandStrings, commandStrings.length);\n    }\n\n    @Override\n    public void visit(CellMatlabData compositeData) {\n        if (compositeData.size() == 0) {\n            return;\n        }\n        String[] newCommandStrings = new String[commandStrings.length * compositeData.getDatas().size()];\n        for (int i = 0; i < commandStrings.length; i++) {\n            for (int j = 0; j < compositeData.getDatas().size(); j++) {\n                newCommandStrings[i * compositeData.getDatas().size() + j] = commandStrings[i]\n                        + compositeData.getDatas().get(j) + \",\";\n            }\n        }\n        commandStrings = newCommandStrings;\n    }\n\n    @Override\n    public void visit(Handle handle) {\n        for (int i = 0; i < commandStrings.length; i++) {\n            commandStrings[i] = commandStrings[i] + handle + \",\";\n        }\n    }\n\n    @Override\n    public void visit(MatlabString matlabString) {\n        for (int i = 0; i < commandStrings.length; i++) {\n            commandStrings[i] = commandStrings[i] + matlabString + \",\";\n        }\n    }\n\n    @Override\n    public void visit(StructMatlabData structMatlabData) {\n        // TODO Unsupported operation? A struct should be created again using the given datas?\n    }\n\n\t@Override\n\tpublic void visit(Logical logical) {\n        for (int i = 0; i < commandStrings.length; i++) {\n            commandStrings[i] = commandStrings[i] + logical + \",\";\n        }\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"FTSRG/massif","sample_ref":"refs/heads/master","sample_path":"plugins/hu.bme.mit.massif.communication/src/hu/bme/mit/massif/communication/datavisitor/ParameterVisitor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6550fa1b1323519c1c9799567a2a6e96f8b25abc","size":"10080","content":"package fi.dy.masa.enderutilities.block;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport net.minecraft.block.material.Material;\nimport net.minecraft.block.properties.IProperty;\nimport net.minecraft.block.state.BlockStateContainer;\nimport net.minecraft.block.state.IBlockState;\nimport net.minecraft.entity.Entity;\nimport net.minecraft.entity.EntityLivingBase;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.init.SoundEvents;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.tileentity.TileEntity;\nimport net.minecraft.util.EnumFacing;\nimport net.minecraft.util.EnumHand;\nimport net.minecraft.util.SoundCategory;\nimport net.minecraft.util.math.AxisAlignedBB;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.util.math.Vec3d;\nimport net.minecraft.world.IBlockAccess;\nimport net.minecraft.world.World;\nimport net.minecraftforge.fml.relauncher.Side;\nimport net.minecraftforge.fml.relauncher.SideOnly;\nimport fi.dy.masa.enderutilities.block.base.BlockEnderUtilities;\nimport fi.dy.masa.enderutilities.block.base.BlockEnderUtilitiesInventory;\nimport fi.dy.masa.enderutilities.event.RenderEventHandler;\nimport fi.dy.masa.enderutilities.reference.ReferenceNames;\nimport fi.dy.masa.enderutilities.tileentity.TileEntityEnderUtilities;\nimport fi.dy.masa.enderutilities.tileentity.TileEntityPortalPanel;\nimport fi.dy.masa.enderutilities.util.EntityUtils;\nimport fi.dy.masa.enderutilities.util.PositionUtils;\n\npublic class BlockPortalPanel extends BlockEnderUtilitiesInventory\n{\n    public static final AxisAlignedBB PANEL_BOUNDS_BASE  = new AxisAlignedBB(    1.0D,    0.0D,    1.0D,    0.0D,    1.0D,   0.75D);\n    public static final AxisAlignedBB PANEL_BOUNDS_SOUTH = new AxisAlignedBB(    0.0D,    0.0D,    0.0D,    1.0D,    1.0D, 0.3125D);\n    public static final AxisAlignedBB PANEL_BOUNDS_NORTH = new AxisAlignedBB(    0.0D,    0.0D, 0.6875D,    1.0D,    1.0D,    1.0D);\n    public static final AxisAlignedBB PANEL_BOUNDS_WEST  = new AxisAlignedBB( 0.6875D,    0.0D,    0.0D,    1.0D,    1.0D,    1.0D);\n    public static final AxisAlignedBB PANEL_BOUNDS_EAST  = new AxisAlignedBB(    0.0D,    0.0D,    0.0D, 0.3225D,    1.0D,    1.0D);\n    public static final AxisAlignedBB PANEL_BOUNDS_UP    = new AxisAlignedBB(    0.0D,    0.0D,    0.0D,    1.0D, 0.3225D,    1.0D);\n    public static final AxisAlignedBB PANEL_BOUNDS_DOWN  = new AxisAlignedBB(    0.0D, 0.6875D,    0.0D,    1.0D,    1.0D,    1.0D);\n\n    public static final float BTN_X  = 15.5f / 16f;\n    public static final float BTN_Y1 =   12f / 16f;\n    public static final float BTN_Y2 =    1f / 16f;\n    public static final float BTN_W  =    3f / 16f;\n    public static final float BTN_D  =    4f / 16f;\n    public static final float BTN_ZS =   12f / 16f;\n    public static final float BTN_ZE =   11f / 16f;\n\n    public static final AxisAlignedBB BUTTON_1 = new AxisAlignedBB(BTN_X - 0 * BTN_D, BTN_Y1, BTN_ZS, BTN_X - 0 * BTN_D - BTN_W, BTN_Y1 + BTN_W, BTN_ZE);\n    public static final AxisAlignedBB BUTTON_2 = new AxisAlignedBB(BTN_X - 1 * BTN_D, BTN_Y1, BTN_ZS, BTN_X - 1 * BTN_D - BTN_W, BTN_Y1 + BTN_W, BTN_ZE);\n    public static final AxisAlignedBB BUTTON_3 = new AxisAlignedBB(BTN_X - 2 * BTN_D, BTN_Y1, BTN_ZS, BTN_X - 2 * BTN_D - BTN_W, BTN_Y1 + BTN_W, BTN_ZE);\n    public static final AxisAlignedBB BUTTON_4 = new AxisAlignedBB(BTN_X - 3 * BTN_D, BTN_Y1, BTN_ZS, BTN_X - 3 * BTN_D - BTN_W, BTN_Y1 + BTN_W, BTN_ZE);\n    public static final AxisAlignedBB BUTTON_5 = new AxisAlignedBB(BTN_X - 0 * BTN_D, BTN_Y2, BTN_ZS, BTN_X - 0 * BTN_D - BTN_W, BTN_Y2 + BTN_W, BTN_ZE);\n    public static final AxisAlignedBB BUTTON_6 = new AxisAlignedBB(BTN_X - 1 * BTN_D, BTN_Y2, BTN_ZS, BTN_X - 1 * BTN_D - BTN_W, BTN_Y2 + BTN_W, BTN_ZE);\n    public static final AxisAlignedBB BUTTON_7 = new AxisAlignedBB(BTN_X - 2 * BTN_D, BTN_Y2, BTN_ZS, BTN_X - 2 * BTN_D - BTN_W, BTN_Y2 + BTN_W, BTN_ZE);\n    public static final AxisAlignedBB BUTTON_8 = new AxisAlignedBB(BTN_X - 3 * BTN_D, BTN_Y2, BTN_ZS, BTN_X - 3 * BTN_D - BTN_W, BTN_Y2 + BTN_W, BTN_ZE);\n    public static final AxisAlignedBB BUTTON_M = new AxisAlignedBB(4f / 16f, 5.5f / 16f, BTN_ZS, 12f / 16f, 10.5f / 16f, 10.5f / 16f);\n\n    public BlockPortalPanel(String name, float hardness, float resistance, int harvestLevel, Material material)\n    {\n        super(name, hardness, resistance, harvestLevel, material);\n\n        this.setDefaultState(this.blockState.getBaseState().withProperty(FACING, BlockEnderUtilities.DEFAULT_FACING));\n    }\n\n    @Override\n    protected String[] generateUnlocalizedNames()\n    {\n        return new String[] { ReferenceNames.NAME_TILE_PORTAL_PANEL };\n    }\n\n    @Override\n    protected BlockStateContainer createBlockState()\n    {\n        return new BlockStateContainer(this, new IProperty[] { FACING });\n    }\n\n    @Override\n    public IBlockState getStateFromMeta(int meta)\n    {\n        return this.getDefaultState().withProperty(FACING, EnumFacing.getFront(meta & 0x7));\n    }\n\n    @Override\n    public int getMetaFromState(IBlockState state)\n    {\n        return state.getValue(FACING).getIndex();\n    }\n\n    @Override\n    public int damageDropped(IBlockState state)\n    {\n        return 0;\n    }\n\n    @Override\n    public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos)\n    {\n        return state;\n    }\n\n    @Override\n    protected TileEntityEnderUtilities createTileEntityInstance(World worldIn, IBlockState state)\n    {\n        return new TileEntityPortalPanel();\n    }\n\n    @Override\n    public boolean onBlockActivated(World worldIn, BlockPos pos, IBlockState state, EntityPlayer playerIn,\n            EnumHand hand, ItemStack heldItem, EnumFacing side, float hitX, float hitY, float hitZ)\n    {\n        if (worldIn.isRemote == false)\n        {\n            int id = this.getTargetId(pos, state.getValue(FACING), playerIn);\n\n            if (id >= 0 && id <= 8)\n            {\n                TileEntity te = worldIn.getTileEntity(pos);\n                if (te instanceof TileEntityPortalPanel)\n                {\n                    if (id == 8)\n                    {\n                        ((TileEntityPortalPanel) te).tryTogglePortal();\n                    }\n                    else\n                    {\n                        ((TileEntityPortalPanel) te).setActiveTargetId(id);\n                        worldIn.notifyBlockUpdate(pos, state, state, 3);\n                    }\n\n                    worldIn.playSound(null, pos, SoundEvents.BLOCK_STONE_BUTTON_CLICK_ON, SoundCategory.MASTER, 0.5f, 1.0f);\n                }\n\n                return true;\n            }\n        }\n\n        return super.onBlockActivated(worldIn, pos, state, playerIn, hand, heldItem, side, hitX, hitY, hitZ);\n    }\n\n    @Override\n    public IBlockState onBlockPlaced(World worldIn, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ, int meta, EntityLivingBase placer)\n    {\n        return super.onBlockPlaced(worldIn, pos, facing, hitX, hitY, hitZ, meta, placer).withProperty(FACING, facing);\n    }\n\n    @Override\n    protected EnumFacing getPlacementFacing(World worldIn, BlockPos pos, IBlockState state, EntityLivingBase placer, ItemStack stack)\n    {\n        // Retain the facing from onBlockPlaced\n        return state.getValue(FACING);\n    }\n\n    @Override\n    public AxisAlignedBB getBoundingBox(IBlockState state, IBlockAccess blockAccess, BlockPos pos)\n    {\n        state = state.getActualState(blockAccess, pos);\n\n        switch (state.getValue(FACING))\n        {\n            case EAST:\n                return PANEL_BOUNDS_EAST;\n            case WEST:\n                return PANEL_BOUNDS_WEST;\n            case NORTH:\n                return PANEL_BOUNDS_NORTH;\n            case SOUTH:\n                return PANEL_BOUNDS_SOUTH;\n            case UP:\n                return PANEL_BOUNDS_UP;\n            default:\n                return PANEL_BOUNDS_DOWN;\n        }\n    }\n\n    @SideOnly(Side.CLIENT)\n    @Override\n    public AxisAlignedBB getSelectedBoundingBox(IBlockState state, World worldIn, BlockPos pos)\n    {\n        AxisAlignedBB bb = RenderEventHandler.getInstance().getSelectedBoundingBox();\n        if (bb != null)\n        {\n            return bb;\n        }\n\n        return state.getBoundingBox(worldIn, pos).offset(pos);\n    }\n\n    @Override\n    public boolean isOpaqueCube(IBlockState state)\n    {\n        return false;\n    }\n\n    @Override\n    public boolean isFullCube(IBlockState state)\n    {\n        return false;\n    }\n\n    private int getTargetId(BlockPos pos, EnumFacing side, Entity entity)\n    {\n        List<AxisAlignedBB> panelBoxes = new ArrayList<AxisAlignedBB>();\n\n        Vec3d reference = new Vec3d(pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5);\n\n        // The button AABBs are defined in the NORTH orientation\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_1.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_2.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_3.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_4.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_5.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_6.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_7.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_8.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(BUTTON_M.offset(pos), reference, EnumFacing.NORTH, side));\n        panelBoxes.add(PositionUtils.rotateBoxAroundPoint(PANEL_BOUNDS_BASE.offset(pos), reference, EnumFacing.NORTH, side));\n\n        return EntityUtils.getPointedBox(EntityUtils.getEyesVec(entity), entity.getLookVec(), 6d, panelBoxes);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"maruohon/enderutilities","sample_ref":"refs/heads/master","sample_path":"src/main/java/fi/dy/masa/enderutilities/block/BlockPortalPanel.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"cb72e208de16145a11d212bcf640903ebc2aca22","size":"857","content":"package net.mdp3.java.rpi.ledtable;\n\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class LedTable_Mode {\n\tprivate int mode_id = 0;\n\tprivate int mode_num = 0;\n\tprivate String mode_desc = \"\";\n\t\n\tpublic LedTable_Mode(ResultSet rs) {\n\t\ttry {\n\t\t\tif (rs.next()) {\n\t\t\t\tint i = 1;\n\t\t\t\tmode_id    = rs.getInt(i++);\n\t\t\t\tmode_num   = rs.getInt(i++);\n\t\t\t\tmode_desc  = rs.getString(i++);\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\tSystem.out.println(\"Error loading result set: \" + e);\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tpublic LedTable_Mode(int id, int num, String desc) {\n\t\tmode_id = id;\n\t\tmode_num = num;\n\t\tmode_desc = desc;\n\t}\n\t\n\tpublic int getId() {\n\t\treturn mode_id;\n\t}\n\t\n\tpublic int getMode() {\n\t\treturn mode_num;\n\t}\n\t\n\tpublic String getDesc() {\n\t\treturn mode_desc;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn mode_num + \" \" + mode_desc;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"mikelduke/LedTable","sample_ref":"refs/heads/master","sample_path":"RPi-Java-LedTable/src/net/mdp3/java/rpi/ledtable/LedTable_Mode.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"617af4e62dbcc241127e3cd0632bb971f0854443","size":"1475","content":"/*\nCopyright 2015 Tremolo Security, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n\npackage com.tremolosecurity.lastmile.undertow;\n\nimport io.undertow.security.api.AuthenticationMechanism;\nimport io.undertow.security.api.SecurityContext;\nimport io.undertow.server.HttpServerExchange;\n\npublic class UnisonAuthenticationMechanism implements AuthenticationMechanism {\n\n\tUnisonAccount account;\n\t\n\tpublic UnisonAuthenticationMechanism(UnisonAccount account) {\n\t\tthis.account = account;\n\t}\n\t\n\t@Override\n\tpublic AuthenticationMechanismOutcome authenticate(\n\t\t\tHttpServerExchange exchange, SecurityContext securityContext) {\n\t\tSystem.err.println(\"in authenticate\");\n\t\tsecurityContext.authenticationComplete(account, \"FORM\", false);\n\t\treturn AuthenticationMechanismOutcome.AUTHENTICATED;\n\t}\n\n\t@Override\n\tpublic ChallengeResult sendChallenge(HttpServerExchange exchange,\n\t\t\tSecurityContext securityContext) {\n\t\tSystem.err.println(\"in send challenge\");\n\t\treturn new ChallengeResult(true,200);\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"TremoloSecurity/OpenUnison","sample_ref":"refs/heads/master","sample_path":"unison/unison-lastmile-undertow-1.x/src/main/java/com/tremolosecurity/lastmile/undertow/UnisonAuthenticationMechanism.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7ceec3eb6b904b8c3c8328424a25d31f869ea4d4","size":"2430","content":"package bbejeck.nio.channels;\n\nimport bbejeck.nio.sockets.PlainServerSocket;\nimport bbejeck.nio.sockets.PlainSocketMessageSender;\nimport com.google.common.base.Stopwatch;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.FutureTask;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Created by IntelliJ IDEA.\n * User: bbejeck\n * Date: 3/15/12\n * Time: 11:27 PM\n */\n@Ignore\npublic class AsyncSocketServerComparisonTest {\n\n\n    @Test\n    public void testAsyncSocketServer() throws Exception {\n        PlainSocketMessageSender messageSender = new PlainSocketMessageSender(5000,10000,\"localhost\");\n        final AsyncServerSocket serverSocket = new AsyncServerSocket(5000,\"localhost\");\n        FutureTask<Long> asyncFutureTask = new FutureTask<>(new Callable<Long>() {\n            @Override\n            public Long call() throws Exception {\n                Stopwatch stopwatch = new Stopwatch();\n                stopwatch.start();\n                serverSocket.startServer();\n                stopwatch.stop();\n                return stopwatch.elapsedTime(TimeUnit.SECONDS);\n            }\n        });\n        System.out.println(\"Starting the AsyncSocketServer Test\");\n        new Thread(asyncFutureTask).start();\n        Thread.sleep(1000);\n        messageSender.sendMessages();\n        Long time = asyncFutureTask.get();\n        System.out.println(\"AsyncServer processed [10000] messages  in \" + time+\" seconds\");\n    }\n    \n    @Test\n    @Ignore\n    public void testPlainSocketServer() throws Exception {\n        PlainSocketMessageSender messageSender = new PlainSocketMessageSender(5001,10000,\"localhost\");\n        final PlainServerSocket serverSocket = new PlainServerSocket(5001,\"localhost\");\n        FutureTask<Long> plainFutureTask = new FutureTask<>(new Callable<Long>() {\n            @Override\n            public Long call() throws Exception {\n                Stopwatch stopwatch = new Stopwatch();\n                stopwatch.start();\n                serverSocket.startServer();\n                stopwatch.stop();\n                return stopwatch.elapsedTime(TimeUnit.SECONDS);\n            }\n        });\n\n        new Thread(plainFutureTask).start();\n        Thread.sleep(1000);\n        messageSender.sendMessages();\n        Long time = plainFutureTask.get();\n        System.out.println(\"PlainSocketServer processed [10000] messages  in \" + time +\" seconds\");\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"bbejeck/Java-7","sample_ref":"refs/heads/master","sample_path":"src/test/java/bbejeck/nio/channels/AsyncSocketServerComparisonTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e7791a510edabfdb1db710b76c7df90311370e72","size":"354","content":"package com.teknasyon.readyalog;\n\nimport android.app.Application;\nimport android.test.ApplicationTestCase;\n\n/**\n * <a href=\"http://d.android.com/tools/testing/testing_android.html\">Testing Fundamentals</a>\n */\npublic class ApplicationTest extends ApplicationTestCase<Application> {\n    public ApplicationTest() {\n        super(Application.class);\n    }\n}","binary":"false","copies":"1","sample_repo_name":"Teknasyon-Teknoloji/Readyalog","sample_ref":"refs/heads/master","sample_path":"readyalog/src/androidTest/java/com/teknasyon/readyalog/ApplicationTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"00b4c35573d343d4042e55369000836c094d6c40","size":"1797","content":"package net.loomchild.segment.srx;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.StringReader;\n\nimport org.junit.Test;\n\npublic class TextManagerTest {\n\n\t@Test\n\tpublic void testCharSequence() {\n\t\tTextManager manager = new TextManager(\"text\");\n\t\tassertEquals(\"text\", manager.getText().toString());\n\t\tassertEquals(4, manager.getBufferLength());\n\t\tassertEquals(false, manager.hasMoreText());\n\t}\n\t\n\t@Test\n\tpublic void testEmptyString() {\n\t\tTextManager manager = new TextManager(\"\");\n\t\tassertEquals(\"\", manager.getText().toString());\n\t\tassertEquals(0, manager.getBufferLength());\n\t\tassertEquals(false, manager.hasMoreText());\n\t}\n\n\t@Test(expected=IllegalStateException.class)\n\tpublic void testCannotReadCharSequence() {\n\t\tTextManager manager = new TextManager(\"text\");\n\t\tmanager.readText(1);\n\t}\n\t\n\t@Test\n\tpublic void testReader() {\n\t\t\n\t\tStringReader reader = new StringReader(\"text\");\n\t\tTextManager manager = new TextManager(reader, 2);\n\t\tassertEquals(2, manager.getBufferLength());\n\n\t\tassertEquals(\"te\", manager.getText().toString());\n\t\tassertEquals(true, manager.hasMoreText());\t\t\n\n\t\tmanager.readText(1);\n\t\tassertEquals(\"ex\", manager.getText().toString());\n\t\tassertEquals(true, manager.hasMoreText());\t\t\n\n\t\tmanager.readText(1);\n\t\tassertEquals(\"xt\", manager.getText().toString());\n\t\tassertEquals(false, manager.hasMoreText());\t\t\n\n\t}\n\t\n\t@Test\n\tpublic void testEmptyReader() {\n\t\tStringReader reader = new StringReader(\"\");\n\t\tTextManager manager = new TextManager(reader, 2);\n\t\tassertEquals(\"\", manager.getText().toString());\n\t\tassertEquals(2, manager.getBufferLength());\n\t\tassertEquals(false, manager.hasMoreText());\n\t}\n\n\t@Test(expected=IllegalArgumentException.class)\n\tpublic void testBufferZeroLength() {\n\t\tStringReader reader = new StringReader(\"\");\n\t\tnew TextManager(reader, 0);\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"loomchild/segment","sample_ref":"refs/heads/master","sample_path":"segment/src/test/java/net/loomchild/segment/srx/TextManagerTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5f07f8fe9290df7560f2968218a063a5f11c3ca9","size":"1118","content":"package com.appdynamics.extensions.webspheremq.config;\n\nimport org.junit.Test;\n\nimport com.appdynamics.extensions.webspheremq.WebsphereMQContext;\nimport com.appdynamics.extensions.yml.YmlReader;\n\npublic class ConfigFileTest {\n\n\t@Test\n\tpublic void loadConfigFileTest() {\n\t\tYmlReader.readFromFile(this.getClass().getResource(\"/conf/config.yaml\").getFile(),Configuration.class);\n\t}\n\t\n\t@Test(expected=IllegalArgumentException.class)\n\tpublic void loadClientNoHostConfigTest(){\n\t\tConfiguration config = YmlReader.readFromFile(this.getClass().getResource(\"/conf/configClientNoHost.yaml\").getFile(),Configuration.class);\n\t\tQueueManager queueManager = config.getQueueManagers()[0];\n\t\tWebsphereMQContext auth = new WebsphereMQContext(queueManager);\n\t}\n\t\n\t@Test(expected=IllegalArgumentException.class)\n\tpublic void loadBindingNoQueuemanagerConfigTest(){\n\t\tConfiguration config = YmlReader.readFromFile(this.getClass().getResource(\"/conf/configBindingNoQm.yaml\").getFile(),Configuration.class);\n\t\tQueueManager queueManager = config.getQueueManagers()[0];\n\t\tWebsphereMQContext auth = new WebsphereMQContext(queueManager);\n\t}\n\t\n\n}\n","binary":"false","copies":"1","sample_repo_name":"Appdynamics/websphere-mq-monitoring-extension","sample_ref":"refs/heads/master","sample_path":"src/test/java/com/appdynamics/extensions/webspheremq/config/ConfigFileTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"167af59c97f46a8c3fffb80ccf2014f408f6c13a","size":"3446","content":"package org.wikipedia.crash.hockeyapp;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.support.annotation.NonNull;\n\nimport net.hockeyapp.android.CrashManager;\nimport net.hockeyapp.android.ExceptionHandler;\nimport net.hockeyapp.android.LocaleManager;\n\nimport org.wikipedia.WikipediaApp;\nimport org.wikipedia.crash.BaseCrashReporter;\nimport org.wikipedia.crash.CrashReportActivity;\nimport org.wikipedia.util.log.L;\n\nimport gplx.xowa.drds.OfflineCrashLog;\n\nimport static android.content.Intent.FLAG_ACTIVITY_CLEAR_TASK;\nimport static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;\n\npublic class HockeyAppCrashReporter extends BaseCrashReporter {\n    @NonNull private final String appId;\n    @NonNull private final CrashListener crashListener;\n\n    public HockeyAppCrashReporter(@NonNull String appId,\n                                  @NonNull AutoUploadConsentAccessor consentAccessor) {\n        this.appId = appId;\n        crashListener = new CrashListener(consentAccessor);\n    }\n\n    @Override\n    public void registerCrashHandler(@NonNull Context context) {\n        L.v(\"Registering for HockeyApp crash handling.\");\n        HockeyAppExceptionHandler handler = new HockeyAppExceptionHandler(crashListener, true);\n        handler.install();\n        CrashManager.initialize(context, appId, crashListener);\n    }\n\n    @Override\n    public void checkCrashes(@NonNull Activity activity) {\n        L.v(\"Checking for HockeyApp crashes.\");\n        LocaleManager.initialize(activity.getApplicationContext());\n        CrashManager.register(activity, appId, crashListener);\n    }\n\n    @Override\n    public void log(@NonNull Throwable throwable) {\n        ExceptionHandler.saveException(throwable, crashListener);\n    }\n\n    private class CrashListener extends HockeyAppCrashListener {\n        @NonNull private final AutoUploadConsentAccessor consentAccessor;\n        CrashListener(@NonNull AutoUploadConsentAccessor consentAccessor) {\n            this.consentAccessor = consentAccessor;\n        }\n\n        @Override\n        public String getDescription() {\n            super.getDescription();\n            return getPropsJson();\n        }\n\n        @Override\n        public boolean shouldAutoUploadCrashes() {\n            super.shouldAutoUploadCrashes();\n            return consentAccessor.isAutoUploadPermitted();\n        }\n\n        @Override\n        public void onCrashesSent() {\n            super.onCrashesSent();\n            L.v(\"Crash report(s) sent.\");\n        }\n\n        @Override\n        public boolean ignoreDefaultHandler() {\n            super.ignoreDefaultHandler();\n            return true;\n        }\n\n        @Override\n        public void onCrashesNotSent() {\n            super.onCrashesNotSent();\n            L.d(\"Crash report(s) not sent.\");\n        }\n\n        @Override\n        public void onCrash() {\n            launchCrashReportActivity();\n            terminateApp();\n        }\n\n        private void launchCrashReportActivity() {\n            Context context = WikipediaApp.getInstance();\n            int flags = FLAG_ACTIVITY_NEW_TASK | FLAG_ACTIVITY_CLEAR_TASK;\n            Intent intent = new Intent(context, CrashReportActivity.class).addFlags(flags);\n            intent.putExtra(\"Last_error\", OfflineCrashLog.Last_error());\n            context.startActivity(intent);\n        }\n\n        private void terminateApp() {\n            Runtime.getRuntime().exit(0);\n        }\n    }\n}","binary":"false","copies":"1","sample_repo_name":"gnosygnu/xowa_android","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/org/wikipedia/crash/hockeyapp/HockeyAppCrashReporter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1feaaf51e5f39d7a94bee9485288121eeb865685","size":"4349","content":"/*\n * #%L\n * Alfresco Repository\n * %%\n * Copyright (C) 2005 - 2016 Alfresco Software Limited\n * %%\n * This file is part of the Alfresco software. \n * If the software was purchased under a paid Alfresco license, the terms of \n * the paid license agreement will prevail.  Otherwise, the software is \n * provided under the following open source license terms:\n * \n * Alfresco is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * Alfresco is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.\n * #L%\n */\npackage org.alfresco.filesys.alfresco;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.mozilla.javascript.ScriptableObject;\n\n/**\n * Desktop Response Class\n * \n *  <p>Holds the status code, optional status message and optional values returned by a desktop action.\n *  \n * @author gkspencer\n */\npublic class DesktopResponse extends ScriptableObject {\n\n\t// Version id\n\t\n\tprivate static final long serialVersionUID = 6421278986221629296L;\n\t\n\t//\tDesktop action status and optional status message\n\t\n\tprivate int m_status;\n\tprivate String m_statusMsg;\n\n\t// Optional return values\n\t\n\tprivate List<Object> m_responseValues;\n\t\n\t/**\n\t * Class constructor\n\t * \n\t * @param sts int\n\t */\n\tpublic DesktopResponse(int sts)\n\t{\n\t\tm_status = sts;\n\t}\n\t\n\t/**\n\t * Class constructor\n\t * \n\t * @param sts int\n\t * @param msg String\n\t */\n\tpublic DesktopResponse(int sts, String msg)\n\t{\n\t\tm_status = sts;\n\t\tm_statusMsg = msg;\n\t}\n\n\t/**\n\t * Javascript constructor\n\t * \n\t * @param sts int\n\t * @param msg String\n\t */\n\tpublic void jsConstructor(int sts, String msg)\n\t{\n\t\tm_status    = sts;\n\t\tm_statusMsg = msg;\n\t}\n\t\n\t/**\n\t * Return the class name\n\t * \n\t * @return String\n\t */\n\t@Override\n\tpublic String getClassName() {\n\t\treturn \"DesktopResponse\";\n\t}\n\n\t/**\n\t * Return the status code\n\t * \n\t * @return int\n\t */\n\tpublic final int getStatus()\n\t{\n\t\treturn m_status;\n\t}\n\t\n\t/**\n\t * Determine if there is an optional status message\n\t * \n\t * @return boolean\n\t */\n\tpublic final boolean hasStatusMessage()\n\t{\n\t\treturn m_statusMsg != null ? true : false;\n\t}\n\t\n\t/**\n\t * Return the status message\n\t * \n\t * @return String\n\t */\n\tpublic final String getStatusMessage()\n\t{\n\t\treturn m_statusMsg;\n\t}\n\t\n\t/**\n\t * Determine if there are optional response values\n\t * \n\t * @return boolean\n\t */\n\tpublic final boolean hasResponseValues()\n\t{\n\t\treturn m_responseValues != null ? true : false;\n\t}\n\t\n\t/**\n\t * Return the count of response values\n\t * \n\t * @return int\n\t */\n\tpublic final int numberOfResponseValues()\n\t{\n\t\treturn m_responseValues != null ? m_responseValues.size() : 0;\n\t}\n\t\n\t/**\n\t * Get the response value list\n\t * \n\t * @return List<Object>\n\t */\n\tpublic final List<Object> getResponseValues()\n\t{\n\t\treturn m_responseValues;\n\t}\n\t\n\t/**\n\t * Add a response value\n\t * \n\t * @param respObj Object\n\t */\n\tpublic final void addResponseValue(Object respObj)\n\t{\n\t\tif ( m_responseValues == null)\n\t\t\tm_responseValues = new ArrayList<Object>();\n\t\t\n\t\tm_responseValues.add(respObj);\n\t}\n\n\t/**\n\t * Set the status code and message\n\t * \n\t * @param sts int\n\t * @param msg String\n\t */\n\tpublic final void setStatus(int sts, String msg)\n\t{\n\t\tm_status    = sts;\n\t\tm_statusMsg = msg;\n\t}\n\t\n\t/**\n\t * Set the status property\n\t * \n\t * @param sts int\n\t */\n\tpublic void jsSet_status(int sts)\n\t{\n\t\tm_status = sts;\n\t}\n\t\n\t/**\n\t * Set the status message property\n\t * \n\t * @param msg String\n\t */\n\tpublic void jsSet_message(String msg)\n\t{\n\t\tm_statusMsg = msg;\n\t}\n\t\n\t/**\n\t * Return the desktop response as a string\n\t * \n\t * @return String\n\t */\n\tpublic String toString()\n\t{\n\t\tStringBuilder str = new StringBuilder();\n\t\t\n\t\tstr.append(\"[\");\n\t\tstr.append(getStatus());\n\t\tstr.append(\":\");\n\t\tif ( hasStatusMessage())\n\t\t\tstr.append(getStatusMessage());\n\t\telse\n\t\t\tstr.append(\"<NoMsg>\");\n\t\tstr.append(\":Values=\");\n\t\tstr.append(numberOfResponseValues());\n\t\tstr.append(\"]\");\n\t\t\n\t\treturn str.toString();\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"Alfresco/community-edition","sample_ref":"refs/heads/master","sample_path":"projects/repository/source/java/org/alfresco/filesys/alfresco/DesktopResponse.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1d0b398a7c8187b1a4cf2f067505d8238c3d1464","size":"8411","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.pathways.vo;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.Iterator;\r\nimport ims.framework.enumerations.SortOrder;\r\n\r\n\r\npublic class PatwayHistoryDummyVoCollection extends ims.vo.ValueObjectCollection implements ims.vo.ImsCloneable, Iterable<PatwayHistoryDummyVo>\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tprivate ArrayList<PatwayHistoryDummyVo> col = new ArrayList<PatwayHistoryDummyVo>();\r\n\tpublic String getBoClassName()\r\n\t{\r\n\t\treturn null;\r\n\t}\r\n\tpublic boolean add(PatwayHistoryDummyVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tif(this.col.indexOf(value) < 0)\r\n\t\t{\r\n\t\t\treturn this.col.add(value);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tpublic boolean add(int index, PatwayHistoryDummyVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tif(this.col.indexOf(value) < 0)\r\n\t\t{\r\n\t\t\tthis.col.add(index, value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tpublic void clear()\r\n\t{\r\n\t\tthis.col.clear();\r\n\t}\r\n\tpublic void remove(int index)\r\n\t{\r\n\t\tthis.col.remove(index);\r\n\t}\r\n\tpublic int size()\r\n\t{\r\n\t\treturn this.col.size();\r\n\t}\r\n\tpublic int indexOf(PatwayHistoryDummyVo instance)\r\n\t{\r\n\t\treturn col.indexOf(instance);\r\n\t}\r\n\tpublic PatwayHistoryDummyVo get(int index)\r\n\t{\r\n\t\treturn this.col.get(index);\r\n\t}\r\n\tpublic boolean set(int index, PatwayHistoryDummyVo value)\r\n\t{\r\n\t\tif(value == null)\r\n\t\t\treturn false;\r\n\t\tthis.col.set(index, value);\r\n\t\treturn true;\r\n\t}\r\n\tpublic void remove(PatwayHistoryDummyVo instance)\r\n\t{\r\n\t\tif(instance != null)\r\n\t\t{\r\n\t\t\tint index = indexOf(instance);\r\n\t\t\tif(index >= 0)\r\n\t\t\t\tremove(index);\r\n\t\t}\r\n\t}\r\n\tpublic boolean contains(PatwayHistoryDummyVo instance)\r\n\t{\r\n\t\treturn indexOf(instance) >= 0;\r\n\t}\r\n\tpublic Object clone()\r\n\t{\r\n\t\tPatwayHistoryDummyVoCollection clone = new PatwayHistoryDummyVoCollection();\r\n\t\t\r\n\t\tfor(int x = 0; x < this.col.size(); x++)\r\n\t\t{\r\n\t\t\tif(this.col.get(x) != null)\r\n\t\t\t\tclone.col.add((PatwayHistoryDummyVo)this.col.get(x).clone());\r\n\t\t\telse\r\n\t\t\t\tclone.col.add(null);\r\n\t\t}\r\n\t\t\r\n\t\treturn clone;\r\n\t}\r\n\tpublic boolean isValidated()\r\n\t{\r\n\t\tfor(int x = 0; x < col.size(); x++)\r\n\t\t\tif(!this.col.get(x).isValidated())\r\n\t\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\tpublic String[] validate()\r\n\t{\r\n\t\treturn validate(null);\r\n\t}\r\n\tpublic String[] validate(String[] existingErrors)\r\n\t{\r\n\t\tif(col.size() == 0)\r\n\t\t\treturn null;\r\n\t\tjava.util.ArrayList<String> listOfErrors = new java.util.ArrayList<String>();\r\n\t\tif(existingErrors != null)\r\n\t\t{\r\n\t\t\tfor(int x = 0; x < existingErrors.length; x++)\r\n\t\t\t{\r\n\t\t\t\tlistOfErrors.add(existingErrors[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int x = 0; x < col.size(); x++)\r\n\t\t{\r\n\t\t\tString[] listOfOtherErrors = this.col.get(x).validate();\r\n\t\t\tif(listOfOtherErrors != null)\r\n\t\t\t{\r\n\t\t\t\tfor(int y = 0; y < listOfOtherErrors.length; y++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlistOfErrors.add(listOfOtherErrors[y]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint errorCount = listOfErrors.size();\r\n\t\tif(errorCount == 0)\r\n\t\t\treturn null;\r\n\t\tString[] result = new String[errorCount];\r\n\t\tfor(int x = 0; x < errorCount; x++)\r\n\t\t\tresult[x] = (String)listOfErrors.get(x);\r\n\t\treturn result;\r\n\t}\r\n\tpublic PatwayHistoryDummyVoCollection sort()\r\n\t{\r\n\t\treturn sort(SortOrder.ASCENDING);\r\n\t}\r\n\tpublic PatwayHistoryDummyVoCollection sort(boolean caseInsensitive)\r\n\t{\r\n\t\treturn sort(SortOrder.ASCENDING, caseInsensitive);\r\n\t}\r\n\tpublic PatwayHistoryDummyVoCollection sort(SortOrder order)\r\n\t{\r\n\t\treturn sort(new PatwayHistoryDummyVoComparator(order));\r\n\t}\r\n\tpublic PatwayHistoryDummyVoCollection sort(SortOrder order, boolean caseInsensitive)\r\n\t{\r\n\t\treturn sort(new PatwayHistoryDummyVoComparator(order, caseInsensitive));\r\n\t}\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tpublic PatwayHistoryDummyVoCollection sort(Comparator comparator)\r\n\t{\r\n\t\tCollections.sort(col, comparator);\r\n\t\treturn this;\r\n\t}\r\n\tpublic PatwayHistoryDummyVo[] toArray()\r\n\t{\r\n\t\tPatwayHistoryDummyVo[] arr = new PatwayHistoryDummyVo[col.size()];\r\n\t\tcol.toArray(arr);\r\n\t\treturn arr;\r\n\t}\r\n\tpublic Iterator<PatwayHistoryDummyVo> iterator()\r\n\t{\r\n\t\treturn col.iterator();\r\n\t}\r\n\t@Override\r\n\tprotected ArrayList getTypedCollection()\r\n\t{\r\n\t\treturn col;\r\n\t}\r\n\tprivate class PatwayHistoryDummyVoComparator implements Comparator\r\n\t{\r\n\t\tprivate int direction = 1;\r\n\t\tprivate boolean caseInsensitive = true;\r\n\t\tpublic PatwayHistoryDummyVoComparator()\r\n\t\t{\r\n\t\t\tthis(SortOrder.ASCENDING);\r\n\t\t}\r\n\t\tpublic PatwayHistoryDummyVoComparator(SortOrder order)\r\n\t\t{\r\n\t\t\tif (order == SortOrder.DESCENDING)\r\n\t\t\t{\r\n\t\t\t\tdirection = -1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic PatwayHistoryDummyVoComparator(SortOrder order, boolean caseInsensitive)\r\n\t\t{\r\n\t\t\tif (order == SortOrder.DESCENDING)\r\n\t\t\t{\r\n\t\t\t\tdirection = -1;\r\n\t\t\t}\r\n\t\t\tthis.caseInsensitive = caseInsensitive;\r\n\t\t}\r\n\t\tpublic int compare(Object obj1, Object obj2)\r\n\t\t{\r\n\t\t\tPatwayHistoryDummyVo voObj1 = (PatwayHistoryDummyVo)obj1;\r\n\t\t\tPatwayHistoryDummyVo voObj2 = (PatwayHistoryDummyVo)obj2;\r\n\t\t\treturn direction*(voObj1.compareTo(voObj2, this.caseInsensitive));\r\n\t\t}\r\n\t\tpublic boolean equals(Object obj)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tpublic ims.pathways.vo.beans.PatwayHistoryDummyVoBean[] getBeanCollection()\r\n\t{\r\n\t\treturn getBeanCollectionArray();\r\n\t}\r\n\tpublic ims.pathways.vo.beans.PatwayHistoryDummyVoBean[] getBeanCollectionArray()\r\n\t{\r\n\t\tims.pathways.vo.beans.PatwayHistoryDummyVoBean[] result = new ims.pathways.vo.beans.PatwayHistoryDummyVoBean[col.size()];\r\n\t\tfor(int i = 0; i < col.size(); i++)\r\n\t\t{\r\n\t\t\tPatwayHistoryDummyVo vo = ((PatwayHistoryDummyVo)col.get(i));\r\n\t\t\tresult[i] = (ims.pathways.vo.beans.PatwayHistoryDummyVoBean)vo.getBean();\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\tpublic static PatwayHistoryDummyVoCollection buildFromBeanCollection(java.util.Collection beans)\r\n\t{\r\n\t\tPatwayHistoryDummyVoCollection coll = new PatwayHistoryDummyVoCollection();\r\n\t\tif(beans == null)\r\n\t\t\treturn coll;\r\n\t\tjava.util.Iterator iter = beans.iterator();\r\n\t\twhile (iter.hasNext())\r\n\t\t{\r\n\t\t\tcoll.add(((ims.pathways.vo.beans.PatwayHistoryDummyVoBean)iter.next()).buildVo());\r\n\t\t}\r\n\t\treturn coll;\r\n\t}\r\n\tpublic static PatwayHistoryDummyVoCollection buildFromBeanCollection(ims.pathways.vo.beans.PatwayHistoryDummyVoBean[] beans)\r\n\t{\r\n\t\tPatwayHistoryDummyVoCollection coll = new PatwayHistoryDummyVoCollection();\r\n\t\tif(beans == null)\r\n\t\t\treturn coll;\r\n\t\tfor(int x = 0; x < beans.length; x++)\r\n\t\t{\r\n\t\t\tcoll.add(beans[x].buildVo());\r\n\t\t}\r\n\t\treturn coll;\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/ValueObjects/src/ims/pathways/vo/PatwayHistoryDummyVoCollection.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"9d14a4a23d8c51c707d53e60763deb64500b1975","size":"24062","content":"package net.i2p.router.transport.udp;\n\nimport java.util.Queue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport net.i2p.data.Base64;\nimport net.i2p.data.ByteArray;\nimport net.i2p.data.DataHelper;\nimport net.i2p.data.RouterIdentity;\nimport net.i2p.data.SessionKey;\nimport net.i2p.data.Signature;\nimport net.i2p.router.OutNetMessage;\nimport net.i2p.router.RouterContext;\nimport net.i2p.router.transport.crypto.DHSessionKeyBuilder;\nimport net.i2p.util.Addresses;\nimport net.i2p.util.Log;\n\n/**\n * Data for a new connection being established, where we initiated the \n * connection with a remote peer.  In other words, we are Alice and\n * they are Bob.\n *\n */\nclass OutboundEstablishState {\n    private final RouterContext _context;\n    private final Log _log;\n    // SessionRequest message\n    private byte _sentX[];\n    private byte _bobIP[];\n    private int _bobPort;\n    private final DHSessionKeyBuilder.Factory _keyFactory;\n    private DHSessionKeyBuilder _keyBuilder;\n    // SessionCreated message\n    private byte _receivedY[];\n    private byte _aliceIP[];\n    private int _alicePort;\n    private long _receivedRelayTag;\n    private long _receivedSignedOnTime;\n    private SessionKey _sessionKey;\n    private SessionKey _macKey;\n    private Signature _receivedSignature;\n    private byte[] _receivedEncryptedSignature;\n    private byte[] _receivedIV;\n    // SessionConfirmed messages\n    private long _sentSignedOnTime;\n    private Signature _sentSignature;\n    // general status \n    private final long _establishBegin;\n    //private long _lastReceive;\n    private long _lastSend;\n    private long _nextSend;\n    private RemoteHostId _remoteHostId;\n    private final RemoteHostId _claimedAddress;\n    private final RouterIdentity _remotePeer;\n    private final SessionKey _introKey;\n    private final Queue<OutNetMessage> _queuedMessages;\n    private OutboundState _currentState;\n    private long _introductionNonce;\n    // intro\n    private final UDPAddress _remoteAddress;\n    private boolean _complete;\n    // counts for backoff\n    private int _confirmedSentCount;\n    private int _requestSentCount;\n    private int _introSentCount;\n    // Times for timeout\n    private long _confirmedSentTime;\n    private long _requestSentTime;\n    private long _introSentTime;\n    \n    public enum OutboundState {\n        /** nothin sent yet */\n        OB_STATE_UNKNOWN,\n        /** we have sent an initial request */\n        OB_STATE_REQUEST_SENT,\n        /** we have received a signed creation packet */\n        OB_STATE_CREATED_RECEIVED,\n        /** we have sent one or more confirmation packets */\n        OB_STATE_CONFIRMED_PARTIALLY,\n        /** we have received a data packet */\n        OB_STATE_CONFIRMED_COMPLETELY,\n        /** we need to have someone introduce us to the peer, but haven't received a RelayResponse yet */\n        OB_STATE_PENDING_INTRO,\n        /** RelayResponse received */\n        OB_STATE_INTRODUCED,\n        /** SessionConfirmed failed validation */\n        OB_STATE_VALIDATION_FAILED\n    }\n    \n    /** basic delay before backoff */\n    private static final long RETRANSMIT_DELAY = 1500;\n\n    /** max delay including backoff */\n    private static final long MAX_DELAY = 15*1000;\n\n    /**\n     *  @param claimedAddress an IP/port based RemoteHostId, or null if unknown\n     *  @param remoteHostId non-null, == claimedAddress if direct, or a hash-based one if indirect\n     *  @param addr non-null\n     */\n    public OutboundEstablishState(RouterContext ctx, RemoteHostId claimedAddress,\n                                  RemoteHostId remoteHostId,\n                                  RouterIdentity remotePeer, SessionKey introKey, UDPAddress addr,\n                                  DHSessionKeyBuilder.Factory dh) {\n        _context = ctx;\n        _log = ctx.logManager().getLog(OutboundEstablishState.class);\n        if (claimedAddress != null) {\n            _bobIP = claimedAddress.getIP();\n            _bobPort = claimedAddress.getPort();\n        } else {\n            //_bobIP = null;\n            _bobPort = -1;\n        }\n        _claimedAddress = claimedAddress;\n        _remoteHostId = remoteHostId;\n        _remotePeer = remotePeer;\n        _introKey = introKey;\n        _queuedMessages = new LinkedBlockingQueue<OutNetMessage>();\n        _establishBegin = ctx.clock().now();\n        _remoteAddress = addr;\n        _introductionNonce = -1;\n        _keyFactory = dh;\n        if (addr.getIntroducerCount() > 0) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"new outbound establish to \" + remotePeer.calculateHash() + \", with address: \" + addr);\n            _currentState = OutboundState.OB_STATE_PENDING_INTRO;\n        } else {\n            _currentState = OutboundState.OB_STATE_UNKNOWN;\n        }\n    }\n    \n    public synchronized OutboundState getState() { return _currentState; }\n\n    /** @return if previously complete */\n    public synchronized boolean complete() { \n        boolean already = _complete; \n        _complete = true; \n        return already; \n    }\n\n    /** @return non-null */\n    public UDPAddress getRemoteAddress() { return _remoteAddress; }\n\n    public void setIntroNonce(long nonce) { _introductionNonce = nonce; }\n\n    /** @return -1 if unset */\n    public long getIntroNonce() { return _introductionNonce; }\n    \n    /**\n     *  Queue a message to be sent after the session is established.\n     */\n    public void addMessage(OutNetMessage msg) {\n        // chance of a duplicate here in a race, that's ok\n        if (!_queuedMessages.contains(msg))\n            _queuedMessages.offer(msg);\n        else if (_log.shouldLog(Log.WARN))\n             _log.warn(\"attempt to add duplicate msg to queue: \" + msg);\n    }\n\n    /** @return null if none */\n    public OutNetMessage getNextQueuedMessage() { \n        return _queuedMessages.poll();\n    }\n    \n    public RouterIdentity getRemoteIdentity() { return _remotePeer; }\n    public SessionKey getIntroKey() { return _introKey; }\n    \n    /** caller must synch - only call once */\n    private void prepareSessionRequest() {\n        _keyBuilder = _keyFactory.getBuilder();\n        _sentX = new byte[UDPPacketReader.SessionRequestReader.X_LENGTH];\n        byte X[] = _keyBuilder.getMyPublicValue().toByteArray();\n        if (X.length == 257)\n            System.arraycopy(X, 1, _sentX, 0, _sentX.length);\n        else if (X.length == 256)\n            System.arraycopy(X, 0, _sentX, 0, _sentX.length);\n        else\n            System.arraycopy(X, 0, _sentX, _sentX.length - X.length, X.length);\n    }\n\n    public synchronized byte[] getSentX() {\n        // We defer keygen until now so that it gets done in the Establisher loop,\n        // and so that we don't waste entropy on failed introductions\n        if (_sentX == null)\n            prepareSessionRequest();\n        return _sentX;\n    }\n\n    /**\n     * The remote side (Bob) - note that in some places he's called Charlie.\n     * Warning - may change after introduction. May be null before introduction.\n     */\n    public synchronized byte[] getSentIP() { return _bobIP; }\n\n    /**\n     * The remote side (Bob) - note that in some places he's called Charlie.\n     * Warning - may change after introduction. May be -1 before introduction.\n     */\n    public synchronized int getSentPort() { return _bobPort; }\n\n    public synchronized void receiveSessionCreated(UDPPacketReader.SessionCreatedReader reader) {\n        if (_currentState == OutboundState.OB_STATE_VALIDATION_FAILED) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"Session created already failed\");\n            return;\n        }\n        if (_receivedY != null) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Session created already received, ignoring\");\n            return; // already received\n        }\n        _receivedY = new byte[UDPPacketReader.SessionCreatedReader.Y_LENGTH];\n        reader.readY(_receivedY, 0);\n        if (_aliceIP == null)\n            _aliceIP = new byte[reader.readIPSize()];\n        reader.readIP(_aliceIP, 0);\n        _alicePort = reader.readPort();\n        _receivedRelayTag = reader.readRelayTag();\n        _receivedSignedOnTime = reader.readSignedOnTime();\n        _receivedEncryptedSignature = new byte[Signature.SIGNATURE_BYTES + 8];\n        reader.readEncryptedSignature(_receivedEncryptedSignature, 0);\n        _receivedIV = new byte[UDPPacket.IV_SIZE];\n        reader.readIV(_receivedIV, 0);\n        \n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"Receive session created:Sig: \" + Base64.encode(_receivedEncryptedSignature)\n                       + \"receivedIV: \" + Base64.encode(_receivedIV)\n                       + \"AliceIP: \" + Addresses.toString(_aliceIP)\n                       + \" RelayTag: \" + _receivedRelayTag\n                       + \" SignedOn: \" + _receivedSignedOnTime\n                       + ' ' + this.toString());\n        \n        if (_currentState == OutboundState.OB_STATE_UNKNOWN ||\n            _currentState == OutboundState.OB_STATE_REQUEST_SENT ||\n            _currentState == OutboundState.OB_STATE_INTRODUCED ||\n            _currentState == OutboundState.OB_STATE_PENDING_INTRO)\n            _currentState = OutboundState.OB_STATE_CREATED_RECEIVED;\n        packetReceived();\n    }\n    \n    /**\n     * Blocking call (run in the establisher thread) to determine if the \n     * session was created properly.  If it wasn't, all the SessionCreated\n     * remnants are dropped (perhaps they were spoofed, etc) so that we can\n     * receive another one\n     *\n     *  Generates session key and mac key.\n     *\n     * @return true if valid\n     */\n    public synchronized boolean validateSessionCreated() {\n        if (_currentState == OutboundState.OB_STATE_VALIDATION_FAILED) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"Session created already failed\");\n            return false;\n        }\n        if (_receivedSignature != null) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"Session created already validated\");\n            return true;\n        }\n        \n        boolean valid = true;\n        try {\n            generateSessionKey();\n        } catch (DHSessionKeyBuilder.InvalidPublicParameterException ippe) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"Peer \" + getRemoteHostId() + \" sent us an invalid DH parameter\", ippe);\n            valid = false;\n        }\n        if (valid)\n            decryptSignature();\n        \n        if (valid && verifySessionCreated()) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"Session created passed validation\");\n            return true;\n        } else {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(\"Session created failed validation, clearing state for \" + _remoteHostId.toString());\n            fail();\n            return false;\n        }\n    }\n    \n    /**\n     *  The SessionCreated validation failed\n     */\n    public synchronized void fail() {\n        _receivedY = null;\n        _aliceIP = null;\n        _receivedRelayTag = 0;\n        _receivedSignedOnTime = -1;\n        _receivedEncryptedSignature = null;\n        _receivedIV = null;\n        _receivedSignature = null;\n        // sure, there's a chance the packet was corrupted, but in practice\n        // this means that Bob doesn't know his external port, so give up.\n        _currentState = OutboundState.OB_STATE_VALIDATION_FAILED;\n\n        _nextSend = _context.clock().now();\n    }\n    \n    /**\n     *  Generates session key and mac key.\n     *  Caller must synch on this.\n     */\n    private void generateSessionKey() throws DHSessionKeyBuilder.InvalidPublicParameterException {\n        if (_sessionKey != null) return;\n        if (_keyBuilder == null)\n            throw new DHSessionKeyBuilder.InvalidPublicParameterException(\"Illegal state - never generated a key builder\");\n        _keyBuilder.setPeerPublicValue(_receivedY);\n        _sessionKey = _keyBuilder.getSessionKey();\n        ByteArray extra = _keyBuilder.getExtraBytes();\n        _macKey = new SessionKey(new byte[SessionKey.KEYSIZE_BYTES]);\n        System.arraycopy(extra.getData(), 0, _macKey.getData(), 0, SessionKey.KEYSIZE_BYTES);\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"Established outbound keys.  cipher: \" + _sessionKey\n                       + \" mac: \" + _macKey);\n    }\n    \n    /** \n     * decrypt the signature (and subsequent pad bytes) with the \n     * additional layer of encryption using the negotiated key along side\n     * the packet's IV\n     *  Caller must synch on this.\n     */\n    private void decryptSignature() {\n        if (_receivedEncryptedSignature == null) throw new NullPointerException(\"encrypted signature is null! this=\" + this.toString());\n        else if (_sessionKey == null) throw new NullPointerException(\"SessionKey is null!\");\n        else if (_receivedIV == null) throw new NullPointerException(\"IV is null!\");\n        _context.aes().decrypt(_receivedEncryptedSignature, 0, _receivedEncryptedSignature, 0, \n                               _sessionKey, _receivedIV, _receivedEncryptedSignature.length);\n        byte signatureBytes[] = new byte[Signature.SIGNATURE_BYTES];\n        System.arraycopy(_receivedEncryptedSignature, 0, signatureBytes, 0, Signature.SIGNATURE_BYTES);\n        _receivedSignature = new Signature(signatureBytes);\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"Decrypted received signature: \" + Base64.encode(signatureBytes));\n    }\n\n    /**\n     * Verify: Alice's IP + Alice's port + Bob's IP + Bob's port + Alice's\n     *         new relay tag + Bob's signed on time\n     *  Caller must synch on this.\n     */\n    private boolean verifySessionCreated() {\n        byte signed[] = new byte[256+256 // X + Y\n                                 + _aliceIP.length + 2\n                                 + _bobIP.length + 2\n                                 + 4 // sent relay tag\n                                 + 4 // signed on time\n                                 ];\n        \n        int off = 0;\n        System.arraycopy(_sentX, 0, signed, off, _sentX.length);\n        off += _sentX.length;\n        System.arraycopy(_receivedY, 0, signed, off, _receivedY.length);\n        off += _receivedY.length;\n        System.arraycopy(_aliceIP, 0, signed, off, _aliceIP.length);\n        off += _aliceIP.length;\n        DataHelper.toLong(signed, off, 2, _alicePort);\n        off += 2;\n        System.arraycopy(_bobIP, 0, signed, off, _bobIP.length);\n        off += _bobIP.length;\n        DataHelper.toLong(signed, off, 2, _bobPort);\n        off += 2;\n        DataHelper.toLong(signed, off, 4, _receivedRelayTag);\n        off += 4;\n        DataHelper.toLong(signed, off, 4, _receivedSignedOnTime);\n        boolean valid = _context.dsa().verifySignature(_receivedSignature, signed, _remotePeer.getSigningPublicKey());\n        if (_log.shouldLog(Log.DEBUG) || (_log.shouldLog(Log.WARN) && !valid)) {\n            StringBuilder buf = new StringBuilder(128);\n            buf.append(\"Signed sessionCreated:\");\n            buf.append(\" Alice: \").append(Addresses.toString(_aliceIP, _alicePort));\n            buf.append(\" Bob: \").append(Addresses.toString(_bobIP, _bobPort));\n            buf.append(\" RelayTag: \").append(_receivedRelayTag);\n            buf.append(\" SignedOn: \").append(_receivedSignedOnTime);\n            buf.append(\" signature: \").append(Base64.encode(_receivedSignature.getData()));\n            if (valid)\n                _log.debug(buf.toString());\n            else if (_log.shouldLog(Log.WARN))\n                _log.warn(\"INVALID: \" + buf.toString());\n        }\n        return valid;\n    }\n    \n    public synchronized SessionKey getCipherKey() { return _sessionKey; }\n    public synchronized SessionKey getMACKey() { return _macKey; }\n\n    public synchronized long getReceivedRelayTag() { return _receivedRelayTag; }\n    public synchronized long getSentSignedOnTime() { return _sentSignedOnTime; }\n    public synchronized long getReceivedSignedOnTime() { return _receivedSignedOnTime; }\n    public synchronized byte[] getReceivedIP() { return _aliceIP; }\n    public synchronized int getReceivedPort() { return _alicePort; }\n    \n    /**\n     *  Let's sign everything so we can fragment properly.\n     *\n     *  Note that while a SessionConfirmed could in theory be fragmented,\n     *  in practice a RouterIdentity is 387 bytes and a single fragment is 512 bytes max,\n     *  so it will never be fragmented.\n     */\n    public synchronized void prepareSessionConfirmed() {\n        if (_sentSignedOnTime > 0)\n            return;\n        byte signed[] = new byte[256+256 // X + Y\n                             + _aliceIP.length + 2\n                             + _bobIP.length + 2\n                             + 4 // Alice's relay key\n                             + 4 // signed on time\n                             ];\n\n        _sentSignedOnTime = _context.clock().now() / 1000;\n        \n        int off = 0;\n        System.arraycopy(_sentX, 0, signed, off, _sentX.length);\n        off += _sentX.length;\n        System.arraycopy(_receivedY, 0, signed, off, _receivedY.length);\n        off += _receivedY.length;\n        System.arraycopy(_aliceIP, 0, signed, off, _aliceIP.length);\n        off += _aliceIP.length;\n        DataHelper.toLong(signed, off, 2, _alicePort);\n        off += 2;\n        System.arraycopy(_bobIP, 0, signed, off, _bobIP.length);\n        off += _bobIP.length;\n        DataHelper.toLong(signed, off, 2, _bobPort);\n        off += 2;\n        DataHelper.toLong(signed, off, 4, _receivedRelayTag);\n        off += 4;\n        DataHelper.toLong(signed, off, 4, _sentSignedOnTime);\n        // BUG - if SigningPrivateKey is null, _sentSignature will be null, leading to NPE later\n        // should we throw something from here?\n        _sentSignature = _context.dsa().sign(signed, _context.keyManager().getSigningPrivateKey());\n    }\n    \n    public synchronized Signature getSentSignature() { return _sentSignature; }\n    \n    /** note that we just sent the SessionConfirmed packet */\n    public synchronized void confirmedPacketsSent() {\n        _lastSend = _context.clock().now();\n        long delay;\n        if (_confirmedSentCount == 0) {\n            delay = RETRANSMIT_DELAY;\n            _confirmedSentTime = _lastSend;\n        } else {\n            delay = Math.min(RETRANSMIT_DELAY << _confirmedSentCount,\n                             _confirmedSentTime + EstablishmentManager.OB_MESSAGE_TIMEOUT - _lastSend);\n        }\n        _confirmedSentCount++;\n        _nextSend = _lastSend + delay;\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"Send confirm packets, nextSend in \" + delay);\n        if (_currentState == OutboundState.OB_STATE_UNKNOWN || \n            _currentState == OutboundState.OB_STATE_PENDING_INTRO ||\n            _currentState == OutboundState.OB_STATE_INTRODUCED ||\n            _currentState == OutboundState.OB_STATE_REQUEST_SENT ||\n            _currentState == OutboundState.OB_STATE_CREATED_RECEIVED)\n            _currentState = OutboundState.OB_STATE_CONFIRMED_PARTIALLY;\n    }\n\n    /**\n     *  @return when we sent the first SessionConfirmed packet, or 0\n     *  @since 0.9.2\n     */\n    public long getConfirmedSentTime() { return _confirmedSentTime; }\n\n    /** note that we just sent the SessionRequest packet */\n    public synchronized void requestSent() {\n        _lastSend = _context.clock().now();\n        long delay;\n        if (_requestSentCount == 0) {\n            delay = RETRANSMIT_DELAY;\n            _requestSentTime = _lastSend;\n        } else {\n            delay = Math.min(RETRANSMIT_DELAY << _requestSentCount,\n                             _requestSentTime + EstablishmentManager.OB_MESSAGE_TIMEOUT - _lastSend);\n        }\n        _requestSentCount++;\n        _nextSend = _lastSend + delay;\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"Send a request packet, nextSend in \" + delay);\n        if (_currentState == OutboundState.OB_STATE_UNKNOWN ||\n            _currentState == OutboundState.OB_STATE_INTRODUCED)\n            _currentState = OutboundState.OB_STATE_REQUEST_SENT;\n    }\n\n\n    /**\n     *  @return when we sent the first SessionRequest packet, or 0\n     *  @since 0.9.2\n     */\n    public long getRequestSentTime() { return _requestSentTime; }\n\n    /** note that we just sent the RelayRequest packet */\n    public synchronized void introSent() {\n        _lastSend = _context.clock().now();\n        long delay;\n        if (_introSentCount == 0) {\n            delay = RETRANSMIT_DELAY;\n            _introSentTime = _lastSend;\n        } else {\n            delay = Math.min(RETRANSMIT_DELAY << _introSentCount,\n                             _introSentTime + EstablishmentManager.OB_MESSAGE_TIMEOUT - _lastSend);\n        }\n        _introSentCount++;\n        _nextSend = _lastSend + delay;\n        if (_currentState == OutboundState.OB_STATE_UNKNOWN)\n            _currentState = OutboundState.OB_STATE_PENDING_INTRO;\n    }\n\n    /**\n     *  @return when we sent the first RelayRequest packet, or 0\n     *  @since 0.9.2\n     */\n    public long getIntroSentTime() { return _introSentTime; }\n\n    public synchronized void introductionFailed() {\n        _nextSend = _context.clock().now();\n        // keep the state as OB_STATE_PENDING_INTRO, so next time the EstablishmentManager asks us\n        // whats up, it'll try a new random intro peer\n    }\n    \n    /**\n     *  This changes the remoteHostId from a hash-based one or possibly\n     *  incorrect IP/port to what the introducer told us.\n     *  All params are for the remote end (NOT the introducer) and must have been validated already.\n     */\n    public synchronized void introduced(byte bobIP[], int bobPort) {\n        if (_currentState != OutboundState.OB_STATE_PENDING_INTRO)\n            return; // we've already successfully been introduced, so don't overwrite old settings\n        _nextSend = _context.clock().now() + 500; // wait briefly for the hole punching\n        _currentState = OutboundState.OB_STATE_INTRODUCED;\n        if (_claimedAddress != null && bobPort == _bobPort && DataHelper.eq(bobIP, _bobIP)) {\n            // he's who he said he was\n            _remoteHostId = _claimedAddress;\n        } else {\n            // no IP/port or wrong IP/port in RI\n            _bobIP = bobIP;\n            _bobPort = bobPort;\n            _remoteHostId = new RemoteHostId(bobIP, bobPort);\n        }\n        if (_log.shouldLog(Log.INFO))\n            _log.info(\"Introduced to \" + _remoteHostId + \", now lets get on with establishing\");\n    }\n    \n    /** how long have we been trying to establish this session? */\n    public long getLifetime() { return _context.clock().now() - _establishBegin; }\n    public long getEstablishBeginTime() { return _establishBegin; }\n    public synchronized long getNextSendTime() { return _nextSend; }\n\n    /**\n     *  This should be what the state is currently indexed by in the _outboundStates table.\n     *  Beware -\n     *  During introduction, this is a router hash.\n     *  After introduced() is called, this is set to the IP/port the introducer told us.\n     *  @return non-null\n     */\n    RemoteHostId getRemoteHostId() { return _remoteHostId; }\n\n    /**\n     *  This will never be a hash-based address.\n     *  This is the 'claimed' (unverified) address from the netdb, or null.\n     *  It is not changed after introduction. Use getRemoteHostId() for the verified address.\n     *  @return may be null\n     */\n    RemoteHostId getClaimedAddress() { return _claimedAddress; }\n\n    /** we have received a real data packet, so we're done establishing */\n    public synchronized void dataReceived() {\n        packetReceived();\n        _currentState = OutboundState.OB_STATE_CONFIRMED_COMPLETELY;\n    }\n    \n    private void packetReceived() {\n        _nextSend = _context.clock().now();\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"Got a packet, nextSend == now\");\n    }\n\n    /** @since 0.8.9 */\n    @Override\n    public String toString() {\n        return \"OES \" + _remoteHostId + ' ' + _currentState;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"oakes/Nightweb","sample_ref":"refs/heads/master","sample_path":"common/java/router/net/i2p/router/transport/udp/OutboundEstablishState.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b4acda1b4e2cc507b9b3361e89abd670d75d599f","size":"8042","content":"package org.craftsmenlabs.gareth.core.context;\n\nimport org.craftsmenlabs.gareth.api.context.ExperimentContext;\nimport org.craftsmenlabs.gareth.api.context.ExperimentPartState;\nimport org.craftsmenlabs.gareth.api.context.ExperimentRunContext;\nimport org.craftsmenlabs.gareth.api.invoker.MethodDescriptor;\nimport org.craftsmenlabs.gareth.core.storage.DefaultStorage;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport java.time.LocalDateTime;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n/**\n * Created by hylke on 13/10/15.\n */\npublic class ExperimentRunContextImplTest {\n\n    private ExperimentRunContext experimentRunContext;\n\n    @Mock\n    private ExperimentContext mockExperimentContext;\n\n    @Mock\n    private MethodDescriptor mockMethodDescriptor;\n\n\n    @Before\n    public void setUp() throws Exception {\n        MockitoAnnotations.initMocks(this);\n        when(mockExperimentContext.getHash()).thenReturn(\"hash-1\");\n        when(mockExperimentContext.getBaseline()).thenReturn(mockMethodDescriptor);\n        when(mockExperimentContext.getAssume()).thenReturn(mockMethodDescriptor);\n        when(mockExperimentContext.getSuccess()).thenReturn(mockMethodDescriptor);\n        when(mockExperimentContext.getFailure()).thenReturn(mockMethodDescriptor);\n        experimentRunContext = new ExperimentRunContextImpl.Builder(mockExperimentContext, null).build();\n    }\n\n\n    @Test\n    public void testGetHash() {\n        assertEquals(\"hash-1\", experimentRunContext.getHash());\n    }\n\n    @Test\n    public void testHasFailuresDefault() throws Exception {\n        assertFalse(experimentRunContext.hasFailures());\n    }\n\n    @Test\n    public void testHasFailuresWithFailure() throws Exception {\n        experimentRunContext.setFailureRun(LocalDateTime.now());\n        assertTrue(experimentRunContext.hasFailures());\n    }\n\n    @Test\n    public void testIsRunningDefault() throws Exception {\n        assertFalse(experimentRunContext.isRunning());\n    }\n\n    @Test\n    public void testIsRunningAfterBaseline() throws Exception {\n        experimentRunContext.setBaselineRun(LocalDateTime.now());\n        assertTrue(experimentRunContext.isRunning());\n    }\n\n    @Test\n    public void testIsRunningAfterAssume() throws Exception {\n        experimentRunContext.setAssumeRun(LocalDateTime.now());\n        assertTrue(experimentRunContext.isRunning());\n    }\n\n    @Test\n    public void testIsRunningAfterFailure() throws Exception {\n        experimentRunContext.setFailureRun(LocalDateTime.now());\n        assertFalse(experimentRunContext.isRunning());\n    }\n\n    @Test\n    public void testIsRunningAfterSuccess() throws Exception {\n        experimentRunContext.setSuccessRun(LocalDateTime.now());\n        assertFalse(experimentRunContext.isRunning());\n    }\n\n    @Test\n    public void testIsFinishedDefault() throws Exception {\n        assertFalse(experimentRunContext.isFinished());\n    }\n\n    @Test\n    public void testIsFinished() {\n        experimentRunContext.setFinished(true);\n        assertTrue(experimentRunContext.isFinished());\n    }\n\n    @Test\n    public void testGetDefaultStates() {\n        ExperimentContext mockOtherExperimentContext = mock(ExperimentContext.class);\n        experimentRunContext = new ExperimentRunContextImpl.Builder(mockOtherExperimentContext, null).build();\n        assertEquals(ExperimentPartState.NON_EXISTENT, experimentRunContext.getBaselineState());\n        assertEquals(ExperimentPartState.NON_EXISTENT, experimentRunContext.getAssumeState());\n        assertEquals(ExperimentPartState.NON_EXISTENT, experimentRunContext.getSuccessState());\n        assertEquals(ExperimentPartState.NON_EXISTENT, experimentRunContext.getFailureState());\n    }\n\n    @Test\n    public void testGetBaselineRunDefault() throws Exception {\n        assertNull(experimentRunContext.getBaselineRun());\n    }\n\n    @Test\n    public void testBaselineState() {\n        assertEquals(ExperimentPartState.OPEN, experimentRunContext.getBaselineState());\n    }\n\n    @Test\n    public void testAssumeState() {\n        assertEquals(ExperimentPartState.OPEN, experimentRunContext.getAssumeState());\n    }\n\n    @Test\n    public void testSuccessState() {\n        assertEquals(ExperimentPartState.OPEN, experimentRunContext.getSuccessState());\n    }\n\n    @Test\n    public void testFailureState() {\n        assertEquals(ExperimentPartState.OPEN, experimentRunContext.getFailureState());\n    }\n\n    @Test\n    public void testSetBaselineState() {\n        experimentRunContext.setBaselineState(ExperimentPartState.FINISHED);\n        assertEquals(ExperimentPartState.FINISHED, experimentRunContext.getBaselineState());\n    }\n\n    @Test\n    public void testSetAssumeState() {\n        experimentRunContext.setAssumeState(ExperimentPartState.FINISHED);\n        assertEquals(ExperimentPartState.FINISHED, experimentRunContext.getAssumeState());\n    }\n\n    @Test\n    public void testSetSuccessState() {\n        experimentRunContext.setSuccessState(ExperimentPartState.FINISHED);\n        assertEquals(ExperimentPartState.FINISHED, experimentRunContext.getSuccessState());\n    }\n\n    @Test\n    public void testSetFailureState() {\n        experimentRunContext.setFailureState(ExperimentPartState.FINISHED);\n        assertEquals(ExperimentPartState.FINISHED, experimentRunContext.getFailureState());\n    }\n\n    @Test\n    public void testGetBaselineRun() throws Exception {\n        final LocalDateTime runTime = LocalDateTime.now();\n        experimentRunContext.setBaselineRun(runTime);\n        assertEquals(runTime, experimentRunContext.getBaselineRun());\n    }\n\n    @Test\n    public void testGetAssumeRunDefault() throws Exception {\n        assertNull(experimentRunContext.getAssumeRun());\n    }\n\n    @Test\n    public void testGetAssumeRun() throws Exception {\n        final LocalDateTime runTime = LocalDateTime.now();\n        experimentRunContext.setAssumeRun(runTime);\n        assertEquals(runTime, experimentRunContext.getAssumeRun());\n    }\n\n    @Test\n    public void testGetSuccessRunDefault() throws Exception {\n        assertNull(experimentRunContext.getSuccessRun());\n    }\n\n    @Test\n    public void testGetSuccessRun() throws Exception {\n        final LocalDateTime runTime = LocalDateTime.now();\n        experimentRunContext.setSuccessRun(runTime);\n        assertEquals(runTime, experimentRunContext.getSuccessRun());\n    }\n\n    @Test\n    public void testGetFailureRunDefault() throws Exception {\n        assertNull(experimentRunContext.getFailureRun());\n    }\n\n    @Test\n    public void testGetFailureRun() throws Exception {\n        final LocalDateTime runTime = LocalDateTime.now();\n        experimentRunContext.setFailureRun(runTime);\n        assertEquals(runTime, experimentRunContext.getFailureRun());\n    }\n\n    @Test\n    public void testGetDefaultStorage() {\n        assertNull(experimentRunContext.getStorage());\n    }\n\n    @Test\n    public void testGetWithStorage() {\n        final DefaultStorage storage = new DefaultStorage();\n        experimentRunContext = new ExperimentRunContextImpl\n                .Builder(mockExperimentContext, storage)\n                .build();\n        assertNotNull(experimentRunContext.getStorage());\n        assertSame(storage, experimentRunContext.getStorage());\n    }\n\n    @Test\n    public void buildWithoutExperimentContext() {\n        try {\n            experimentRunContext = new ExperimentRunContextImpl\n                    .Builder(null, null)\n                    .build();\n            fail(\"Should not reach this point\");\n        } catch (final IllegalStateException e) {\n            assertTrue(e.getMessage().contains(\"Cannot build experiment run context without experiment context\"));\n        }\n    }\n}","binary":"false","copies":"1","sample_repo_name":"craftsmenlabs/gareth-jvm","sample_ref":"refs/heads/master","sample_path":"gareth-core/src/test/java/org/craftsmenlabs/gareth/core/context/ExperimentRunContextImplTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"692405968810c63c2ff7a4a67e9f9e9e606bdb46","size":"2908","content":"package net.spy.memcached;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\n/**\n * Base class for cancellation tests.\n */\npublic abstract class CancellationBaseCase extends ClientBaseCase {\n\n\t@Override\n\tprotected void tearDown() throws Exception {\n\t\t// override teardown to avoid the flush phase\n\t\tclient.shutdown();\n\t}\n\n\t@Override\n\tprotected void initClient(ConnectionFactory cf) throws Exception {\n\t\tclient=new MemcachedClient(cf,\n\t\t\tAddrUtil.getAddresses(\"127.0.0.1:64213\"));\n\t}\n\n\tprivate void tryCancellation(Future<?> f) throws Exception {\n\t\tf.cancel(true);\n\t\tassertTrue(f.isCancelled());\n\t\tassertTrue(f.isDone());\n\t\ttry {\n\t\t\tObject o=f.get();\n\t\t\tfail(\"Expected cancellation, got \" + o);\n\t\t} catch (ExecutionException e) {\n\t\t\tassertTrue(e.getCause() instanceof RuntimeException);\n\t\t\tassertTrue(e.getCause().getMessage().contains(\"Cancelled\"));\n\t\t}\n\t}\n\n\tpublic void testAvailableServers() {\n\t\tclient.asyncGet(\"x\");\n\t\tassertEquals(Collections.emptyList(), client.getAvailableServers());\n\t}\n\n\tpublic void testUnavailableServers() {\n\t\tclient.asyncGet(\"x\");\n\t\tassertEquals(new ArrayList<String>(\n\t\t\t\tCollections.singleton(\"/127.0.0.1:64213\")),\n\t\t\tstringify(client.getUnavailableServers()));\n\t}\n\n\tprivate void tryTimeout(Future<?> f) throws Exception {\n\t\ttry {\n\t\t\tObject o=f.get(10, TimeUnit.MILLISECONDS);\n\t\t\tfail(\"Expected timeout, got \" + o);\n\t\t} catch(TimeoutException e) {\n\t\t\t// expected\n\t\t}\n\t}\n\n\tprotected void tryTestSequence(Future<?> f) throws Exception {\n\t\ttryTimeout(f);\n\t\ttryCancellation(f);\n\t}\n\n\tpublic void testAsyncGetCancellation() throws Exception {\n\t\ttryTestSequence(client.asyncGet(\"k\"));\n\t}\n\n\tpublic void testAsyncGetsCancellation() throws Exception {\n\t\ttryTestSequence(client.asyncGets(\"k\"));\n\t}\n\n\tpublic void testAsyncGetBulkCancellationCollection() throws Exception {\n\t\ttryTestSequence(client.asyncGetBulk(Arrays.asList(\"k\", \"k2\")));\n\t}\n\n\tpublic void testAsyncGetBulkCancellationVararg() throws Exception {\n\t\ttryTestSequence(client.asyncGetBulk(\"k\", \"k2\"));\n\t}\n\n\tpublic void testDeleteCancellation() throws Exception {\n\t\ttryTestSequence(client.delete(\"x\"));\n\t}\n\n\tpublic void testflushCancellation() throws Exception {\n\t\ttryTestSequence(client.flush());\n\t}\n\n\tpublic void testDelayedflushCancellation() throws Exception {\n\t\ttryTestSequence(client.flush(3));\n\t}\n\n\tpublic void testReplaceCancellation() throws Exception {\n\t\ttryTestSequence(client.replace(\"x\", 3, \"y\"));\n\t}\n\n\tpublic void testAddCancellation() throws Exception {\n\t\ttryTestSequence(client.add(\"x\", 3, \"y\"));\n\t}\n\n\tpublic void testSetCancellation() throws Exception {\n\t\ttryTestSequence(client.set(\"x\", 3, \"y\"));\n\t}\n\n\tpublic void testCASCancellation() throws Exception {\n\t\ttryTestSequence(client.asyncCAS(\"x\", 3, \"y\"));\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"naver/arcus-java-client","sample_ref":"refs/heads/master","sample_path":"src/test/java/net/spy/memcached/CancellationBaseCase.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bd28b90262a76d3cab574abd1a8484defa539fa9","size":"2933","content":"/*\n * Copyright 2016 requery.io\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.requery.test;\n\nimport io.requery.meta.EntityModel;\nimport io.requery.sql.Configuration;\nimport io.requery.sql.ConfigurationBuilder;\nimport io.requery.sql.Platform;\nimport io.requery.sql.SchemaModifier;\nimport io.requery.sql.TableCreationMode;\nimport io.requery.sql.platform.Derby;\nimport io.requery.sql.platform.H2;\nimport io.requery.sql.platform.HSQL;\nimport io.requery.test.model.Person;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport javax.sql.CommonDataSource;\nimport java.sql.SQLException;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.concurrent.Executors;\n\n@RunWith(Parameterized.class)\npublic class SchemaModifierTest extends RandomData {\n\n    @Parameterized.Parameters(name = \"{0}\")\n    public static Collection<Platform> data() {\n        return Arrays.<Platform>asList(new H2(), new HSQL(), new Derby());\n    }\n\n    private Platform platform;\n\n    public SchemaModifierTest(Platform platform) {\n        this.platform = platform;\n    }\n    private SchemaModifier schemaModifier;\n\n    @Before\n    public void setup() throws SQLException {\n        CommonDataSource dataSource = DatabaseType.getDataSource(platform);\n        EntityModel model = io.requery.test.model.Models.DEFAULT;\n\n        Configuration configuration = new ConfigurationBuilder(dataSource, model)\n            .useDefaultLogging()\n            .setStatementCacheSize(10)\n            .setBatchUpdateSize(50)\n            .setWriteExecutor(Executors.newSingleThreadExecutor())\n            .build();\n\n        schemaModifier = new SchemaModifier(configuration);\n        try {\n            schemaModifier.dropTables();\n        } catch (Exception e) {\n            // expected if 'drop if exists' not supported (so ignore in that case)\n            if (!platform.supportsIfExists()) {\n                throw e;\n            }\n        }\n        schemaModifier.createTables(TableCreationMode.CREATE);\n    }\n\n    @Test\n    public void testAddRemoveColumn() throws Exception {\n        schemaModifier.dropColumn(Person.AGE);\n        schemaModifier.addColumn(Person.AGE);\n    }\n\n    @Test\n    public void testAddRemoveForeignKeyColumn() throws Exception {\n        schemaModifier.dropColumn(Person.ADDRESS);\n        schemaModifier.addColumn(Person.ADDRESS);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"requery/requery","sample_ref":"refs/heads/master","sample_path":"requery-test/src/test/java/io/requery/test/SchemaModifierTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1ba85780ec85bb09ff90a87306d542c50d25b053","size":"2695","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.core.forms.diagnosisprocedureproblemsearch;\r\n\r\npublic abstract class BaseLogic extends Handlers\r\n{\r\n\tpublic final Class getDomainInterface() throws ClassNotFoundException\r\n\t{\r\n\t\treturn ims.core.domain.DiagnosisProcedureProblemSearch.class;\r\n\t}\r\n\tpublic final void setContext(ims.framework.UIEngine engine, GenForm form, ims.core.domain.DiagnosisProcedureProblemSearch domain)\r\n\t{\r\n\t\tsetContext(engine, form);\r\n\t\tthis.domain = domain;\r\n\t}\r\n\tpublic final void free()\r\n\t{\r\n\t\tsuper.free();\r\n\t\tdomain = null;\r\n\t}\r\n\t\r\n\tprotected ims.core.domain.DiagnosisProcedureProblemSearch domain;\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Core/src/ims/core/forms/diagnosisprocedureproblemsearch/BaseLogic.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"77c6f5c4c48c73a1d96ae3f94c6fcc99b202667b","size":"7816","content":"package com.cyc.kb.client;\n\n/*\n * #%L\n * File: QuantifierImpl.java\n * Project: KB Client\n * %%\n * Copyright (C) 2013 - 2016 Cycorp, Inc\n * %%\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * #L%\n */\n\nimport com.cyc.base.cycobject.CycObject;\nimport com.cyc.base.cycobject.DenotationalTerm;\nimport com.cyc.base.cycobject.Guid;\nimport com.cyc.baseclient.cycobject.CycConstantImpl;\nimport com.cyc.kb.KbStatus;\nimport com.cyc.kb.Quantifier;\nimport com.cyc.kb.client.LookupType;\nimport com.cyc.kb.KbObject;\nimport com.cyc.kb.exception.CreateException;\nimport com.cyc.kb.exception.InvalidNameException;\nimport com.cyc.kb.exception.KbException;\nimport com.cyc.kb.exception.KbRuntimeException;\nimport com.cyc.kb.exception.KbTypeConflictException;\nimport com.cyc.kb.exception.KbTypeException;\n\n\n/**\n * THIS IS NOT PART OF 1.0.0.\n * @author vijay\n */\npublic class QuantifierImpl extends ScopingRelationImpl implements Quantifier {\n\n    private static final DenotationalTerm TYPE_CORE =\n          new CycConstantImpl(\"Quantifier\", new Guid(\"bd58c271-9c29-11b1-9dad-c379636f7270\"));\n\n  static DenotationalTerm getClassTypeCore() {\n    return TYPE_CORE;\n  }\n  \n  /**\n   * default constructor, calls the default super constructor\n   *\n   * @throws Exception\n   */\n  @SuppressWarnings(\"unused\")\n  private QuantifierImpl() {\n    super();\n  }\n\n  /**\n   * Return a new\n   * <code>Quantifier</code> based on the existing predicate\n   * <code>cycBinPred</code>. The KB term underlying\n   * <code>cycBinPred</code> must already be an instance of #$Quantifier.\n   *\n   * @param cycQuantifier\tthe CycObject wrapped by Quantifier. The constructor verifies that the\n   * CycObject is a #$Quantifier\n   * @throws KbTypeException if cycBinPred is not a #$Quantifier\n   */\n  protected QuantifierImpl(CycObject cycQuantifier) throws KbTypeException {\n    super(cycQuantifier);\n  }\n\n  /**\n   * finds or creates a Quantifier represented by binPredStr in the underlying KB\n   * <p>\n   *\n   * @param quantifierStr\tthe string representing a Quantifier in the KB\n   * @throws CreateException if the Quantifier represented by predStr is not found and could not be\n   * created\n   * @throws KbTypeException \n   */\n  public QuantifierImpl(String quantifierStr) throws KbTypeException, CreateException {\n    super(quantifierStr);\n  }\n\n    \n  protected QuantifierImpl (String quantifierStr, LookupType lookup) throws KbTypeException, CreateException {\n    super(quantifierStr, lookup);\n  }\n  /**\n   * Get the\n   * <code>Relation</code> with the name\n   * <code>nameOrId</code>. Throws exceptions if there is no KB term by that name, or if it is not\n   * already an instance of #$Relation.\n   *\n   * @param nameOrId\n   * @return new Quantifier\n   * @throws CreateException \n   * @throws KbTypeException\n   */\n  public static QuantifierImpl get(String nameOrId) throws KbTypeException, CreateException {\n    return KbObjectFactory.get(nameOrId, QuantifierImpl.class);\n  }\n\n  /**\n   * Get the\n   * <code>Relation</code> object that corresponds to\n   * <code>object</code>. Throws exceptions if the object isn't in the KB, or if it's not already an\n   * instance of\n   * <code>#$Relation</code>.\n   *\n   * @param cycObject\n   * @return new Quantifier\n   * @throws CreateException \n   * @throws KbTypeException\n   */\n  @SuppressWarnings(\"deprecation\")\n  public static QuantifierImpl get(CycObject cycObject) throws KbTypeException, CreateException {\n    return KbObjectFactory.get(cycObject, QuantifierImpl.class);\n  }\n\n  /**\n   * The KBAPI does not support the creation of new quantifiers. The\n   * <code>get</code> methods on quantifiers should be used to retrieve existing quantifiers.\n   *\n   * @param nameOrId\n   * @return new Quantifier\n   * @throws UnsupportedOperationException\n   * @deprecated Creation of new quantifiers is not supported in the KBAPI.\n   */\n  public static QuantifierImpl findOrCreate(String nameOrId) {\n    throw new UnsupportedOperationException(\"Creation of new Quantifiers is not allowed.  Please use a get method.\");\n  }\n\n  /**\n   * The KBAPI does not support the creation of new quantifiers. The\n   * <code>get</code> methods on quantifiers should be used to retrieve existing quantifiers.\n   *\n   * @param cycObject\n   * @return new Quantifier\n   * @throws UnsupportedOperationException\n   * @deprecated Creation of new quantifiers is not supported in the KBAPI.\n   */\n  public static QuantifierImpl findOrCreate(CycObject cycObject) {\n    throw new UnsupportedOperationException(\"Creation of new Quantifiers is not allowed.  Please use a get method.\");\n  }\n\n  /**\n   * Checks whether entity exists in KB and is an instance of #$Individual. If false,\n   * {@link #getStatus(String)} may yield more information. This method is equivalent to\n   * <code>getStatus(nameOrId).equals(KBStatus.EXISTS_AS_TYPE)</code>.\n   *\n   * @param nameOrId either the name or HL ID of an entity in the KB\n   * @return <code>true</code> if entity exists in KB and is an instance of #$Individual\n   */\n  public static boolean existsAsType(String nameOrId) {\n    return getStatus(nameOrId).equals(KbStatus.EXISTS_AS_TYPE);\n  }\n\n  /**\n   * Checks whether entity exists in KB and is an instance of #$Individual. If false,\n   * {@link #getStatus(CycObject)} may yield more information. This method is equivalent to\n   * <code>getStatus(object).equals(KBStatus.EXISTS_AS_TYPE)</code>.\n   *\n   * @param cycObject either the name or HL ID of an entity in the KB\n   * @return <code>true</code> if entity exists in KB and is an instance of #$Individual\n   */\n  public static boolean existsAsType(CycObject cycObject) {\n    return getStatus(cycObject).equals(KbStatus.EXISTS_AS_TYPE);\n  }\n\n  /**\n   * Returns an KBStatus enum which describes whether\n   * <code>nameOrId</code> exists in the KB and is an instance of\n   * <code>#$Individual</code>.\n   *\n   * @param nameOrId either the name or HL ID of an entity in the KB\n   * @return an enum describing the existential status of the entity in the KB\n   */\n  public static KbStatus getStatus(String nameOrId)  {\n    return KbObjectFactory.getStatus(nameOrId, QuantifierImpl.class);\n\n  }\n\n  /**\n   * Returns an KBStatus enum which describes whether\n   * <code>object</code> exists in the KB and is an instance of\n   * <code>#$Individual</code>.\n   *\n   * @param cycObject the CycObject representation of a KB entity\n   * @return an enum describing the existential status of the entity in the KB\n   */\n  public static KbStatus getStatus(CycObject cycObject) {\n    return KbObjectFactory.getStatus(cycObject, QuantifierImpl.class);\n  }\n\n  /**\n   * Return the KBCollection as a KBObject of the Cyc term that \n   * underlies this class. \n   * \n   * @return KBCollectionImpl.get(\"#$Quantifier\");\n   */\n  @Override\n  public KbObject getType() {\n    return getClassType();\n  }\n  \n  /**\n   * Return the KBCollection as a KBObject of the Cyc term that \n   * underlies this class. \n   * \n   * @return KBCollectionImpl.get(\"#$Quantifier\");\n   */\n  public static KbObject getClassType() {\n    try {\n      return KbCollectionImpl.get(getClassTypeString());\n    } catch (KbException kae) {\n      throw new KbRuntimeException(kae.getMessage(), kae);\n    }\n  }\n  \n  @Override\n  String getTypeString() {\n    return getClassTypeString();\n  }\n  \n  static String getClassTypeString() {\n    return \"#$Quantifier\";\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"cycorp/api-suite","sample_ref":"refs/heads/master","sample_path":"core-client/kb-client/src/main/java/com/cyc/kb/client/QuantifierImpl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"004a0798724a10ac41e8707aade1ddf54dccdc7d","size":"2835","content":"package de.vion.eyetracking.adapter;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport android.content.Context;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.TextView;\r\nimport de.vion.eyetracking.R;\r\n\r\n/**\r\n * An adapter class for managing the test menu elements in the corresponding\r\n * list view\r\n * \r\n * @author Andr\u00e9 Pomp\r\n * \r\n */\r\npublic class TestAdapter extends ArrayAdapter<Integer> {\r\n\r\n\t/**\r\n\t * The list of main menu items\r\n\t */\r\n\tprivate List<Integer> menuItems = new ArrayList<Integer>();\r\n\r\n\t/**\r\n\t * Indicates if we are running in demo mode\r\n\t */\r\n\tprivate boolean missingAbbreviation;\r\n\r\n\t/**\r\n\t * The current context\r\n\t */\r\n\tprivate Context context;\r\n\r\n\t/**\r\n\t * The current used resource ID for the used list item\r\n\t */\r\n\tprivate int resourceID;\r\n\r\n\t/**\r\n\t * @param context\r\n\t *            the current context\r\n\t * @param textViewResourceId\r\n\t *            resource ID for the used list item\r\n\t */\r\n\tpublic TestAdapter(Context context, int textViewResourceId,\r\n\t\t\tboolean missingAbbreviation) {\r\n\t\tsuper(context, textViewResourceId);\r\n\t\tthis.context = context;\r\n\t\tthis.resourceID = textViewResourceId;\r\n\t\tthis.missingAbbreviation = missingAbbreviation;\r\n\t\tthis.menuItems.add(R.string.test_activity_listitem_test_start);\r\n\t\tthis.menuItems.add(R.string.test_activity_listitem_test_show_demo);\r\n\t\tthis.menuItems\r\n\t\t\t\t.add(R.string.test_activity_listitem_test_camera_alignment);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic int getCount() {\r\n\t\treturn this.menuItems.size();\r\n\t}\r\n\r\n\t@Override\r\n\tpublic Integer getItem(int index) {\r\n\t\treturn this.menuItems.get(index);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic View getView(final int position, View convertView, ViewGroup parent) {\r\n\t\tView row = convertView;\r\n\t\tif (row == null) {\r\n\t\t\t// ROW INFLATION\r\n\t\t\tLayoutInflater inflater = LayoutInflater.from(this.context);\r\n\t\t\trow = inflater.inflate(this.resourceID, parent, false);\r\n\t\t}\r\n\r\n\t\t// Get reference to TextView\r\n\t\tTextView tvMenuItem = (TextView) row\r\n\t\t\t\t.findViewById(R.id.test_listitem_tv_name);\r\n\t\ttvMenuItem.setText(this.context.getResources().getString(\r\n\t\t\t\tgetItem(position)));\r\n\t\tswitch (getItem(position)) {\r\n\t\tcase R.string.test_activity_listitem_test_start:\r\n\t\t\ttvMenuItem.setCompoundDrawablesWithIntrinsicBounds(\r\n\t\t\t\t\tR.drawable.ic_action_play, 0, 0, 0);\r\n\t\t\tif (this.missingAbbreviation) {\r\n\t\t\t\ttvMenuItem.setEnabled(false);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase R.string.test_activity_listitem_test_show_demo:\r\n\t\t\ttvMenuItem.setCompoundDrawablesWithIntrinsicBounds(\r\n\t\t\t\t\tR.drawable.ic_action_video, 0, 0, 0);\r\n\t\t\tbreak;\r\n\t\tcase R.string.test_activity_listitem_test_camera_alignment:\r\n\t\t\ttvMenuItem.setCompoundDrawablesWithIntrinsicBounds(\r\n\t\t\t\t\tR.drawable.ic_action_face, 0, 0, 0);\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\treturn row;\r\n\t}\r\n}","binary":"false","copies":"1","sample_repo_name":"eyetrackingDB/GazeTrackingFramework","sample_ref":"refs/heads/master","sample_path":"src/de/vion/eyetracking/adapter/TestAdapter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7b2726cf8177231b4324e238b794efe99c936671","size":"5292","content":"package com.krishagni.catissueplus.core.biospecimen.events;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.fasterxml.jackson.annotation.JsonFilter;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport com.krishagni.catissueplus.core.biospecimen.domain.CollectionProtocolEvent;\nimport com.krishagni.catissueplus.core.biospecimen.domain.SpecimenRequirement;\n\n@JsonFilter(\"withoutId\")\n@JsonInclude(Include.NON_NULL)\npublic class CollectionProtocolEventDetail {\n\tprivate Long id;\n\n\tprivate String code;\n\t\n\tprivate String eventLabel;\n\t\n\tprivate Double eventPoint;\n\t\n\tprivate String collectionProtocol;\n\t\n\tprivate String cpShortTitle;\n\t\n\tprivate String defaultSite;\n\t\n\tprivate String clinicalDiagnosis;\n\t\n\tprivate String clinicalStatus;\n\n\tprivate String visitNamePrintMode;\n\n\tprivate Integer visitNamePrintCopies;\n\t\n\tprivate String activityStatus;\n\t\n\n\t\n\t//\n\t// mostly used for export\n\t//\n\tprivate List<SpecimenRequirementDetail> specimenRequirements;\n\n\tprivate int offset;\n\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getCode() {\n\t\treturn code;\n\t}\n\n\tpublic void setCode(String code) {\n\t\tthis.code = code;\n\t}\n\n\tpublic String getEventLabel() {\n\t\treturn eventLabel;\n\t}\n\n\tpublic void setEventLabel(String eventLabel) {\n\t\tthis.eventLabel = eventLabel;\n\t}\n\n\tpublic Double getEventPoint() {\n\t\treturn eventPoint;\n\t}\n\n\tpublic void setEventPoint(Double eventPoint) {\n\t\tthis.eventPoint = eventPoint;\n\t}\n\n\tpublic String getCollectionProtocol() {\n\t\treturn collectionProtocol;\n\t}\n\n\tpublic void setCollectionProtocol(String collectionProtocol) {\n\t\tthis.collectionProtocol = collectionProtocol;\n\t}\n\n\tpublic String getCpShortTitle() {\n\t\treturn cpShortTitle;\n\t}\n\n\tpublic void setCpShortTitle(String cpShortTitle) {\n\t\tthis.cpShortTitle = cpShortTitle;\n\t}\n\n\tpublic String getDefaultSite() {\n\t\treturn defaultSite;\n\t}\n\n\tpublic void setDefaultSite(String defaultSite) {\n\t\tthis.defaultSite = defaultSite;\n\t}\n\n\tpublic String getClinicalDiagnosis() {\n\t\treturn clinicalDiagnosis;\n\t}\n\n\tpublic void setClinicalDiagnosis(String clinicalDiagnosis) {\n\t\tthis.clinicalDiagnosis = clinicalDiagnosis;\n\t}\n\n\tpublic String getClinicalStatus() {\n\t\treturn clinicalStatus;\n\t}\n\n\tpublic void setClinicalStatus(String clinicalStatus) {\n\t\tthis.clinicalStatus = clinicalStatus;\n\t}\n\n\tpublic String getVisitNamePrintMode() {\n\t\treturn visitNamePrintMode;\n\t}\n\n\tpublic void setVisitNamePrintMode(String visitNamePrintMode) {\n\t\tthis.visitNamePrintMode = visitNamePrintMode;\n\t}\n\n\tpublic Integer getVisitNamePrintCopies() {\n\t\treturn visitNamePrintCopies;\n\t}\n\n\tpublic void setVisitNamePrintCopies(Integer visitNamePrintCopies) {\n\t\tthis.visitNamePrintCopies = visitNamePrintCopies;\n\t}\n\n\tpublic String getActivityStatus() {\n\t\treturn activityStatus;\n\t}\n\n\tpublic void setActivityStatus(String activityStatus) {\n\t\tthis.activityStatus = activityStatus;\n\t}\n\t\n\tpublic List<SpecimenRequirementDetail> getSpecimenRequirements() {\n\t\treturn specimenRequirements;\n\t}\n\n\tpublic void setSpecimenRequirements(List<SpecimenRequirementDetail> specimenRequirements) {\n\t\tthis.specimenRequirements = specimenRequirements;\n\t}\n\n\tpublic int getOffset() {\n\t\treturn offset;\n\t}\n\n\tpublic void setOffset(int offset) {\n\t\tthis.offset = offset;\n\t}\n\n\tpublic static CollectionProtocolEventDetail from(CollectionProtocolEvent event) {\n\t\treturn from(event, false);\n\t}\n\t\n\tpublic static CollectionProtocolEventDetail from(CollectionProtocolEvent event, boolean fullObject) {\n\t\tCollectionProtocolEventDetail detail = new CollectionProtocolEventDetail();\n\t\t\n\t\tdetail.setId(event.getId());\n\t\tdetail.setCode(event.getCode());\n\t\tdetail.setEventLabel(event.getEventLabel());\n\t\tdetail.setEventPoint(event.getEventPoint());\n\t\tdetail.setClinicalDiagnosis(event.getClinicalDiagnosis());\n\t\tdetail.setClinicalStatus(event.getClinicalStatus());\n\t\tdetail.setCollectionProtocol(event.getCollectionProtocol().getTitle());\n\t\tdetail.setCpShortTitle(event.getCollectionProtocol().getShortTitle());\n\t\tdetail.setVisitNamePrintCopies(event.getVisitNamePrintCopies());\n\t\tdetail.setActivityStatus(event.getActivityStatus());\n\n\t\tdetail.setOffset(event.getOffset());\n\t\t\n\t\tif (event.getDefaultSite() != null) {\n\t\t\tdetail.setDefaultSite(event.getDefaultSite().getName());\n\t\t}\n\n\t\tif (event.getVisitNamePrintMode() != null) {\n\t\t\tdetail.setVisitNamePrintMode(event.getVisitNamePrintMode().name());\n\t\t}\n\t\t\n\t\tif (fullObject) {\n\t\t\tSet<SpecimenRequirement> srs = new HashSet<SpecimenRequirement>();\n\t\t\tfor (SpecimenRequirement sr : event.getTopLevelAnticipatedSpecimens()) {\n\t\t\t\tsrs.add(sr);\n\t\t\t}\n\n\t\t\tdetail.setSpecimenRequirements(SpecimenRequirementDetail.from(srs));\n\t\t}\n\t\t\n\t\treturn detail;\n\t}\n\t\n\tpublic static List<CollectionProtocolEventDetail> from(Collection<CollectionProtocolEvent> events) {\n\t\treturn from(events, false);\n\t}\n\t\t\n\tpublic static List<CollectionProtocolEventDetail> from(Collection<CollectionProtocolEvent> events, boolean fullObject) {\n\t\tList<CollectionProtocolEventDetail> result = new ArrayList<CollectionProtocolEventDetail>();\n\t\t\n\t\tfor (CollectionProtocolEvent event : events) {\n\t\t\tresult.add(CollectionProtocolEventDetail.from(event, fullObject));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"krishagni/openspecimen","sample_ref":"refs/heads/master","sample_path":"WEB-INF/src/com/krishagni/catissueplus/core/biospecimen/events/CollectionProtocolEventDetail.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c53f5857f3f42128f9933ecebc71c37cf0da5c63","size":"4834","content":"package com.github.drapostolos.typeparser;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Hashtable;\nimport java.util.IdentityHashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.NavigableMap;\nimport java.util.SortedMap;\nimport java.util.TreeMap;\nimport java.util.WeakHashMap;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentNavigableMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\n\nimport org.assertj.core.data.MapEntry;\nimport org.junit.Test;\n\npublic class MapTest extends TestBase {\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canParseToMapInterfaces() throws Exception {\n        parseToMapInterfaces(\n                new GenericType<ConcurrentMap<String, String>>() {},\n                new GenericType<ConcurrentNavigableMap<String, String>>() {},\n                new GenericType<NavigableMap<String, String>>() {},\n                new GenericType<SortedMap<String, String>>() {});\n\n    }\n\n    private void parseToMapInterfaces(GenericType<? extends Map<String, String>>... types) {\n        for (GenericType<? extends Map<String, String>> type : types) {\n            Class<?> rawType = toRawType(type);\n            assertThat(parser.parse(\"a=A\", type))\n                    .containsOnly(MapEntry.entry(\"a\", \"A\"))\n                    .isInstanceOf(rawType);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canParseToConcreteMapTypes() throws Exception {\n        parseToConcreteMapTypes(\n                new GenericType<ConcurrentHashMap<String, String>>() {},\n                new GenericType<ConcurrentSkipListMap<String, String>>() {},\n                new GenericType<HashMap<String, String>>() {},\n                new GenericType<LinkedHashMap<String, String>>() {},\n                new GenericType<WeakHashMap<String, String>>() {},\n                new GenericType<IdentityHashMap<String, String>>() {},\n                new GenericType<Hashtable<String, String>>() {},\n                new GenericType<TreeMap<String, String>>() {}\n                );\n\n    }\n\n    private void parseToConcreteMapTypes(GenericType<? extends Map<String, String>>... types) {\n        for (GenericType<? extends Map<String, String>> type : types) {\n            Class<?> rawType = toRawType(type);\n            Map<String, String> map = parser.parse(\"a=A\", type);\n            assertThat(map)\n                    .containsOnly(MapEntry.entry(\"a\", \"A\"))\n                    .isInstanceOf(rawType);\n            assertThat(map.getClass())\n                    .isEqualTo(rawType);\n        }\n    }\n\n    @Test\n    public void canParseToEmptyMap() throws Exception {\n        GenericType<Map<String, String>> type = new GenericType<Map<String, String>>() {};\n        assertThat(parser.parse(\"null\", type))\n                .isInstanceOf(Map.class)\n                .isEmpty();\n    }\n\n    @Test\n    public void shouldThrowWhenMapImplementationHasNoDefaultconstructor() throws Exception {\n        shouldThrowTypeParserException()\n                .containingErrorMessage(\"Cannot instantiate map of type '\")\n                .containingErrorMessage(MyMap.class.getName())\n                .whenParsing(DUMMY_STRING)\n                .to(new GenericType<MyMap<String, String>>() {});\n    }\n\n    @Test\n    public void shouldThrowExceptionWhenParsingMapWithWildcardKey() throws Exception {\n        shouldThrowTypeParserException()\n                .containingErrorMessage(\"contains illegal type argument: '?' \")\n                .whenParsing(DUMMY_STRING)\n                .to(new GenericType<Map<?, String>>() {});\n    }\n\n    @Test\n    public void shouldThrowExceptionWhenParsingMapWithWildcardValue() throws Exception {\n        shouldThrowTypeParserException()\n                .containingErrorMessage(\"contains illegal type argument: '?' \")\n                .whenParsing(DUMMY_STRING)\n                .to(new GenericType<Map<String, ?>>() {});\n    }\n\n    @Test\n    public void canChangeKeyValueSplitStrategy() throws Exception {\n        // given\n        TypeParser parser = TypeParser.newBuilder()\n                .setKeyValueSplitStrategy(new SplitStrategy() {\n\n                    @Override\n                    public List<String> split(String input, SplitStrategyHelper helper) {\n                        return Arrays.asList(input.split(\"#\"));\n                    }\n                })\n                .build();\n\n        // when\n        Map<String, String> map = parser.parse(\"aaa#AAA,bbb#BBB\", new GenericType<Map<String, String>>() {});\n\n        // then\n        assertThat(map).hasSize(2);\n        assertThat(map.get(\"aaa\")).isEqualTo(\"AAA\");\n        assertThat(map.get(\"bbb\")).isEqualTo(\"BBB\");\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"drapostolos/type-parser","sample_ref":"refs/heads/master","sample_path":"src/test/java/com/github/drapostolos/typeparser/MapTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9d693eef8aa21abff620161baaf325bcf2e5b153","size":"4556","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.core.forms.patientcasenotes;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic final class GlobalContext extends ims.framework.FormContext implements Serializable\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tpublic GlobalContext(ims.framework.Context context)\r\n\t{\r\n\t\tsuper(context);\r\n\r\n\t\tCore = new CoreContext(context);\r\n\t}\r\n\tpublic final class CoreContext implements Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t\tprivate CoreContext(ims.framework.Context context)\r\n\t\t{\r\n\t\t\tthis.context = context;\r\n\r\n\t\t}\r\n\r\n\t\tpublic boolean getPatientShortIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_CorePatientShort.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.core.vo.PatientShort getPatientShort()\r\n\t\t{\r\n\t\t\treturn (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);\r\n\t\t}\r\n\t\tpublic void setPatientShort(ims.core.vo.PatientShort value)\r\n\t\t{\r\n\t\t\tcx_CorePatientShort.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable(\"Core.PatientShort\", \"_cvp_Core.PatientShort\");\r\n\t\tpublic boolean getPatientCaseNoteFolderRefIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_CorePatientCaseNoteFolderRef.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.core.vo.PatientCaseNoteTypeVo getPatientCaseNoteFolderRef()\r\n\t\t{\r\n\t\t\treturn (ims.core.vo.PatientCaseNoteTypeVo)cx_CorePatientCaseNoteFolderRef.getValue(context);\r\n\t\t}\r\n\t\tpublic void setPatientCaseNoteFolderRef(ims.core.vo.PatientCaseNoteTypeVo value)\r\n\t\t{\r\n\t\t\tcx_CorePatientCaseNoteFolderRef.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_CorePatientCaseNoteFolderRef = new ims.framework.ContextVariable(\"Core.PatientCaseNoteFolderRef\", \"_cv_Core.PatientCaseNoteFolderRef\");\r\n\t\tpublic boolean getCaseNoteRequestRefIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_CoreCaseNoteRequestRef.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.core.clinical.vo.PatientCaseNoteRequestRefVo getCaseNoteRequestRef()\r\n\t\t{\r\n\t\t\treturn (ims.core.clinical.vo.PatientCaseNoteRequestRefVo)cx_CoreCaseNoteRequestRef.getValue(context);\r\n\t\t}\r\n\t\tpublic void setCaseNoteRequestRef(ims.core.clinical.vo.PatientCaseNoteRequestRefVo value)\r\n\t\t{\r\n\t\t\tcx_CoreCaseNoteRequestRef.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_CoreCaseNoteRequestRef = new ims.framework.ContextVariable(\"Core.CaseNoteRequestRef\", \"_cv_Core.CaseNoteRequestRef\");\r\n\r\n\t\tprivate ims.framework.Context context;\r\n\t}\r\n\r\n\tpublic CoreContext Core;\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Core/src/ims/core/forms/patientcasenotes/GlobalContext.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"cf6417d90c2235f461d537c16266d01a0f601136","size":"6809","content":"package com.sap.pto.services;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\nimport java.util.List;\n\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.DELETE;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.PathParam;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.Response.Status;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport com.sap.pto.dao.FixtureDAO;\nimport com.sap.pto.dao.LeagueDAO;\nimport com.sap.pto.dao.PredictionDAO;\nimport com.sap.pto.dao.entities.Fixture;\nimport com.sap.pto.dao.entities.League;\nimport com.sap.pto.dao.entities.LeagueMember;\nimport com.sap.pto.dao.entities.Prediction;\nimport com.sap.pto.dao.entities.User;\nimport com.sap.pto.dao.entities.UserStatistics;\nimport com.sap.pto.dao.entities.Fixture.Result;\nimport com.sap.pto.paul.AveragePaul;\nimport com.sap.pto.util.UserUtil;\n\n@Path(\"/leagueservice\")\npublic class LeagueService extends BasicService {\n    @POST\n    @Path(\"/leagues\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response createLeague(League league) {\n        User user = userUtil.getLoggedInUser(request);\n        league.setName(sanitize(league.getName()));\n\n        if (StringUtils.isBlank(league.getName())) {\n            throwBadRequest(\"Name must be supplied.\");\n        }\n\n        List<League> leagues = LeagueDAO.getForOwner(user);\n        for (League existingLeague : leagues) {\n            if (existingLeague.getName().equalsIgnoreCase(league.getName())) {\n                throwError(Status.CONFLICT, \"League with that name already exists.\");\n            }\n        }\n\n        // copy settings so that user cannot create a league for someone else\n        League newLeague = new League(user, league.getName());\n        LeagueDAO.saveNew(newLeague);\n\n        // join\n        joinLeague(newLeague.getAccessKey());\n\n        // smuggle in Paul into every league\n        User paul = UserUtil.getPaul();\n        newLeague = LeagueDAO.getLeagueByKey(newLeague.getAccessKey());\n        newLeague.getMembers().add(new LeagueMember(paul));\n        newLeague = LeagueDAO.save(newLeague);\n\n        return Response.ok(newLeague).build();\n    }\n\n    @GET\n    @Path(\"/leagues/{id}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public League getLeague(@PathParam(\"id\") long id) {\n        User user = userUtil.getLoggedInUser(request);\n        League league = new LeagueDAO().getById(id);\n        if (league == null) {\n            throwBadRequest();\n        }\n        if (!league.getUsers().contains(user)) {\n            throwUnauthorized();\n        }\n\n        for (LeagueMember member : league.getMembers()) {\n            UserStatistics stats = new UserStatistics(member.getUser());\n            member.setStatistics(stats);\n        }\n\n        return league;\n    }\n\n    @GET\n    @Path(\"/leagues/{id}/{fixtureid}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public League getLeague(@PathParam(\"id\") long id, @PathParam(\"fixtureid\") long fixtureId) {\n        User user = userUtil.getLoggedInUser(request);\n\n        League league = getLeague(id);\n        Fixture fixture = new FixtureDAO().getById(fixtureId);\n        if (fixture == null) {\n            throwNotFound(\"Fixture could not be found.\");\n        }\n\n        // check if league members predicted the game and return their predictions \n        List<Prediction> predictions = PredictionDAO.getPastForFixture(fixture); // FIXME: inefficient for many users, actually only pull those predictions of the league members\n        AveragePaul.predictMissingFixtures(Arrays.asList(fixture), predictions);\n\n        for (Prediction prediction : predictions) {\n            for (LeagueMember member : league.getMembers()) {\n                if (prediction.getUser().equals(member.getUser())) {\n                    if (prediction.getUser().equals(user) || fixture.getResult() != Result.NONE) {\n                        member.setPrediction(prediction);\n                    }\n                }\n            }\n        }\n\n        return league;\n    }\n\n    @POST\n    @Path(\"/join/{key}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response joinLeague(@PathParam(\"key\") String key) {\n        League league = LeagueDAO.getLeagueByKey(key);\n        if (league == null) {\n            throwBadRequest(\"League could not be found.\");\n        }\n\n        User user = userUtil.getLoggedInUser(request);\n\n        // don't allow to join twice\n        for (LeagueMember member : league.getMembers()) {\n            if (member.getUser().equals(user)) {\n                throwError(Status.CONFLICT, \"User is already a league member.\");\n            }\n        }\n        league.getMembers().add(new LeagueMember(user));\n        league = LeagueDAO.save(league);\n\n        return RESPONSE_OK;\n    }\n\n    @POST\n    @Path(\"/leagues/{id}/leave\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response leaveLeague(@PathParam(\"id\") long leagueId) {\n        League league = new LeagueDAO().getById(leagueId);\n        if (league == null) {\n            throwBadRequest(\"League could not be found.\");\n        }\n\n        User user = userUtil.getLoggedInUser(request);\n\n        for (Iterator<LeagueMember> iterator = league.getMembers().iterator(); iterator.hasNext();) {\n            LeagueMember member = iterator.next();\n            if (member.getUser().equals(user)) {\n                iterator.remove();\n                league = LeagueDAO.save(league);\n\n                // delete league if only bots are left\n                // FIXME: will not work if second bot comes into play\n                if (league.getMembers().size() == 1) {\n                    league.getMembers().clear();\n                    league = LeagueDAO.save(league);\n                }\n                if (league.getMembers().size() == 0) {\n                    new LeagueDAO().deleteById(league.getId());\n                }\n\n                return RESPONSE_OK;\n            }\n        }\n\n        return RESPONSE_BAD;\n    }\n\n    @DELETE\n    @Path(\"/leagues/{id}\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response deleteLeague(@PathParam(\"id\") long leagueId) {\n        League league = new LeagueDAO().getById(leagueId);\n        if (league == null) {\n            throwBadRequest(\"League could not be found.\");\n        }\n        User user = userUtil.getLoggedInUser(request);\n        if (!league.getOwner().equals(user)) {\n            throwUnauthorized(\"Only the league owner can delete a league.\");\n        }\n\n        // TODO: implement\n\n        return RESPONSE_OK;\n    }\n\n    @GET\n    @Path(\"/leagues\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public List<League> getUserLeagues() {\n        User user = userUtil.getLoggedInUser(request);\n        List<League> leagues = LeagueDAO.getForUser(user);\n\n        return leagues;\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"SAP/cloud-paulpredicts","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/sap/pto/services/LeagueService.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a089af76dec1a668afb9591e8cdbdc83783cf008","size":"2517","content":"/**\n * Distributed as part of Fwap'a Derp UHC. A UHC plugin for Spigot 1.9\n * made by Ashrynn Macke (Flutterflies). You should have received a copy\n * of the MIT license with this code, if not please find it here:\n * https://opensource.org/licenses/MIT\n */\npackage net.flutterflies.fwapaderp.game;\n\nimport net.flutterflies.fwapaderp.FwapaDerp;\nimport net.flutterflies.fwapaderp.tasks.worldborder.WBStartShrinkTask;\nimport net.flutterflies.fwapaderp.utils.Utils;\nimport org.bukkit.World;\nimport org.bukkit.WorldBorder;\nimport org.bukkit.scheduler.BukkitTask;\n\nimport java.util.List;\n\npublic class UHCWorldBorder {\n\n    //Instance of main plugin class\n    private final FwapaDerp plugin;\n\n    //The Bukkit task to start the world border shrinking\n    BukkitTask startShrink;\n\n    /**\n     * Constructs a new instance of the Games world border\n     *\n     * @param plugin the main plugin class\n     */\n    public UHCWorldBorder(FwapaDerp plugin) {\n        this.plugin = plugin;\n    }\n\n    /**\n     * Create a new world border with the given specifications\n     *\n     * @param initialSize  The initial size of the world border\n     * @param finalSize    The size of the world border after it finishes shrinking\n     * @param shrinkLength How long the world border will shrink\n     * @param shrinkDelay  How long to wait before the world border starts to shrink\n     */\n    public void build(double initialSize, double finalSize, int shrinkLength, int shrinkDelay) {\n\n        //Get a list of the worlds\n        List<World> worlds = plugin.getServer().getWorlds();\n\n        //Build the world border for every world\n        for(World world : worlds) {\n\n            //Get the world's border\n            WorldBorder border = world.getWorldBorder();\n\n            //Set the warning dimensions for the border\n            border.setWarningDistance(plugin.getGameManager().getSettings().getDistanceWarning());\n            border.setWarningTime(plugin.getGameManager().getSettings().getTimeWarning());\n\n            //Set the border's size\n            border.setSize(initialSize);\n        }\n\n        //If the initial and final sizes are not the same\n        if(initialSize != finalSize) {\n\n            //Schedule the world border to start shrinking after the specified delay\n            startShrink = new WBStartShrinkTask(plugin, finalSize, shrinkLength, worlds)\n                .runTaskLater(plugin, Utils.minutesToTicks(shrinkDelay));\n        }\n    }\n\n    public BukkitTask getStartShrink() {\n        return startShrink;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"flutterflies/FwapaDerp","sample_ref":"refs/heads/master","sample_path":"src/main/java/net/flutterflies/fwapaderp/game/UHCWorldBorder.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9bff19e2973eac0f840aafc766dd66f0bb1c695e","size":"3879","content":"/*\n * Copyright 2014 Blazebit.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.blazebit.persistence.view.impl.metamodel;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Method;\nimport java.util.Comparator;\nimport java.util.Set;\n\nimport com.blazebit.lang.StringUtils;\nimport com.blazebit.persistence.view.CollectionMapping;\nimport com.blazebit.persistence.view.SubqueryProvider;\nimport com.blazebit.persistence.view.metamodel.ManagedViewType;\nimport com.blazebit.persistence.view.metamodel.MappingAttribute;\nimport com.blazebit.persistence.view.metamodel.PluralAttribute;\nimport com.blazebit.reflection.ReflectionUtils;\n\n/**\n *\n * @author Christian Beikov\n * @since 1.0\n */\npublic abstract class AbstractMethodMappingPluralAttribute<X, C, Y> extends AbstractMethodAttribute<X, C> implements PluralAttribute<X, C, Y>, MappingAttribute<X, C> {\n\n    private final Class<Y> elementType;\n    private final boolean subview;\n    private final boolean sorted;\n    private final boolean ordered;\n    private final boolean ignoreIndex;\n    private final Class<Comparator<Y>> comparatorClass;\n    private final Comparator<Y> comparator;\n\n    @SuppressWarnings(\"unchecked\")\n    public AbstractMethodMappingPluralAttribute(ManagedViewType<X> viewType, Method method, Annotation mapping, Set<Class<?>> entityViews, boolean sorted) {\n        super(viewType, method, mapping, entityViews);\n        Class<?>[] typeArguments = ReflectionUtils.getResolvedMethodReturnTypeArguments(viewType.getJavaType(), method);\n        this.elementType = (Class<Y>) typeArguments[typeArguments.length - 1];\n        if (elementType == null) {\n            throw new IllegalArgumentException(\"The element type is not resolvable \" + \"for the attribute '\" + StringUtils.firstToLower(method.getName().substring(3)) + \"' of the class '\" + viewType.getJavaType().getName() + \"'!\");\n        }\n        \n        this.subview = entityViews.contains(elementType);\n        this.sorted = sorted;\n        \n        CollectionMapping collectionMapping = MetamodelUtils.getCollectionMapping(method);\n        this.ordered = collectionMapping.ordered();\n        this.ignoreIndex = collectionMapping.ignoreIndex();\n        this.comparatorClass = MetamodelUtils.getComparatorClass(collectionMapping);\n        this.comparator = MetamodelUtils.getComparator(comparatorClass);\n    }\n\n    @Override\n    public Class<Y> getElementType() {\n        return elementType;\n    }\n\n    @Override\n    public boolean isSubquery() {\n        return false;\n    }\n\n    @Override\n    public boolean isCollection() {\n        return true;\n    }\n\n    @Override\n    public boolean isSubview() {\n        return subview;\n    }\n\n    @Override\n    public Class<? extends SubqueryProvider> getSubqueryProvider() {\n        throw new IllegalStateException(\"This method should not be accessible!\");\n    }\n\n    @Override\n    public boolean isQueryParameter() {\n        return false;\n    }\n\n    @Override\n    public boolean isSorted() {\n        return sorted;\n    }\n\n    @Override\n    public boolean isOrdered() {\n        return ordered;\n    }\n    \n    protected boolean isIgnoreIndex() {\n        return ignoreIndex;\n    }\n\n    @Override\n    public Class<Comparator<Y>> getComparatorClass() {\n        return comparatorClass;\n    }\n\n    @Override\n    public Comparator<Y> getComparator() {\n        return comparator;\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"Blazebit/blaze-persistence","sample_ref":"refs/heads/master","sample_path":"entity-view/impl/src/main/java/com/blazebit/persistence/view/impl/metamodel/AbstractMethodMappingPluralAttribute.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"52b65ee94fbe6d2baedd0b533cfabe8a9b20e474","size":"1541","content":"/*\n * Copyright 2015-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\npackage org.lastaflute.web.servlet.external;\n\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport javax.servlet.ServletRequest;\n\nimport org.lastaflute.di.core.external.AbstractUnmodifiableExternalContextMap;\n\n/**\n * @author modified by jflute (originated in Seasar)\n */\npublic class ServletRequestParameterValuesMap extends AbstractUnmodifiableExternalContextMap {\n\n    private final ServletRequest request;\n    private final Set<String> parameterNames;\n\n    public ServletRequestParameterValuesMap(ServletRequest request) {\n        this.request = request;\n        parameterNames = request.getParameterMap().keySet();\n    }\n\n    protected Object getAttribute(final String key) {\n        if (parameterNames.contains(key)) {\n            return request.getParameterValues(key);\n        }\n        return null;\n    }\n\n    protected Iterator<String> getAttributeNames() {\n        return parameterNames.iterator();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"lastaflute/lastaflute","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/lastaflute/web/servlet/external/ServletRequestParameterValuesMap.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"88e2e4594b4d15804808fb5d5e98f1fb773806d1","size":"7594","content":"/****************************************************************************\n * Copyright (C) 2012-2015 ecsec GmbH.\n * All rights reserved.\n * Contact: ecsec GmbH (info@ecsec.de)\n *\n * This file is part of the Open eCard App.\n *\n * GNU General Public License Usage\n * This file may be used under the terms of the GNU General Public\n * License version 3.0 as published by the Free Software Foundation\n * and appearing in the file LICENSE.GPL included in the packaging of\n * this file. Please review the following information to ensure the\n * GNU General Public License version 3.0 requirements will be met:\n * http://www.gnu.org/copyleft/gpl.html.\n *\n * Other Usage\n * Alternatively, this file may be used in accordance with the terms\n * and conditions contained in a signed written agreement between\n * you and ecsec GmbH.\n *\n ***************************************************************************/\n\npackage org.openecard.sal.protocol.eac;\n\nimport iso.std.iso_iec._24727.tech.schema.DIDAuthenticate;\nimport iso.std.iso_iec._24727.tech.schema.DIDAuthenticateResponse;\nimport java.util.Map;\nimport org.openecard.addon.sal.FunctionType;\nimport org.openecard.addon.sal.ProtocolStep;\nimport org.openecard.binding.tctoken.TR03112Keys;\nimport org.openecard.common.DynamicContext;\nimport org.openecard.common.ECardConstants;\nimport org.openecard.common.WSHelper;\nimport org.openecard.common.interfaces.Dispatcher;\nimport org.openecard.common.interfaces.ObjectSchemaValidator;\nimport org.openecard.common.interfaces.ObjectValidatorException;\nimport org.openecard.common.util.Promise;\nimport org.openecard.crypto.common.asn1.cvc.CardVerifiableCertificate;\nimport org.openecard.crypto.common.asn1.cvc.CardVerifiableCertificateChain;\nimport org.openecard.sal.protocol.eac.anytype.EAC2InputType;\nimport org.openecard.sal.protocol.eac.anytype.EAC2OutputType;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n\n/**\n * Implements TerminalAuthentication protocol step according to BSI-TR-03112-7.\n * See BSI-TR-03112, version 1.1.2, part 7, section 4.6.6.\n *\n * @author Moritz Horsch\n * @author Dirk Petrautzki\n * @author Tobias Wich\n * @author Hans-Martin Haase\n */\npublic class TerminalAuthenticationStep implements ProtocolStep<DIDAuthenticate, DIDAuthenticateResponse> {\n\n    private static final Logger logger = LoggerFactory.getLogger(TerminalAuthenticationStep.class.getName());\n\n    private final Dispatcher dispatcher;\n\n\n    /**\n     * Creates a new Terminal Authentication protocol step.\n     *\n     * @param dispatcher Dispatcher\n     */\n    public TerminalAuthenticationStep(Dispatcher dispatcher) {\n\tthis.dispatcher = dispatcher;\n    }\n\n    @Override\n    public FunctionType getFunctionType() {\n\treturn FunctionType.DIDAuthenticate;\n    }\n\n    @Override\n    public DIDAuthenticateResponse perform(DIDAuthenticate didAuthenticate, Map<String, Object> internalData) {\n\tDIDAuthenticateResponse response = new DIDAuthenticateResponse();\n\tDynamicContext dynCtx = DynamicContext.getInstance(TR03112Keys.INSTANCE_KEY);\n\n\ttry {\n\t    ObjectSchemaValidator valid = (ObjectSchemaValidator) dynCtx.getPromise(EACProtocol.SCHEMA_VALIDATOR).deref();\n\n\t    boolean messageValid = valid.validateObject(didAuthenticate);\n\t    if (! messageValid) {\n\t\tString msg = \"Validation of the EAC2InputType message failed.\";\n\t\tlogger.error(msg);\n\t\tdynCtx.put(EACProtocol.AUTHENTICATION_FAILED, true);\n\t\tresponse.setResult(WSHelper.makeResultError(ECardConstants.Minor.App.INCORRECT_PARM, msg));\n\t\treturn response;\n\t    }\n\t} catch (ObjectValidatorException ex) {\n\t    String msg = \"Validation of the EAC2InputType message failed due to invalid input data.\";\n\t    logger.error(msg, ex);\n\t    dynCtx.put(EACProtocol.AUTHENTICATION_FAILED, true);\n\t    response.setResult(WSHelper.makeResultError(ECardConstants.Minor.App.INT_ERROR, msg));\n\t    return response;\n\t} catch (InterruptedException ex) {\n\t    String msg = \"Thread interrupted while waiting for schema validator instance.\";\n\t    logger.error(msg, ex);\n\t    dynCtx.put(EACProtocol.AUTHENTICATION_FAILED, true);\n\t    response.setResult(WSHelper.makeResultError(ECardConstants.Minor.App.INT_ERROR, msg));\n\t    return response;\n\t}\n\n\tbyte[] slotHandle = didAuthenticate.getConnectionHandle().getSlotHandle();\n\n\ttry {\n\t    EAC2InputType eac2Input = new EAC2InputType(didAuthenticate.getAuthenticationProtocolData());\n\t    EAC2OutputType eac2Output = eac2Input.getOutputType();\n\n\t    TerminalAuthentication ta = new TerminalAuthentication(dispatcher, slotHandle);\n\n\t    // Build certificate chain\n\t    CardVerifiableCertificateChain certificateChain;\n\t    certificateChain = (CardVerifiableCertificateChain) internalData.get(EACConstants.IDATA_CERTIFICATES);\n\t    certificateChain.addCertificates(eac2Input.getCertificates());\n\n\t    byte[] currentCAR = (byte[]) internalData.get(EACConstants.IDATA_CURRENT_CAR);\n\t    byte[] previousCAR = (byte[]) internalData.get(EACConstants.IDATA_PREVIOUS_CAR);\n\t    CardVerifiableCertificateChain tmpChain = certificateChain.getCertificateChainFromCAR(currentCAR);\n\t    // try again with previous car if it didn't work\n\t    if (tmpChain.getCertificates().isEmpty() && previousCAR != null) {\n\t\ttmpChain = certificateChain.getCertificateChainFromCAR(previousCAR);\n\t    }\n\t    certificateChain = tmpChain;\n\n\t    if (certificateChain.getCertificates().isEmpty()) {\n\t\tString msg = \"Failed to create a valid certificate chain from the transmitted certificates.\";\n\t\tlogger.error(msg);\n\t\tresponse.setResult(WSHelper.makeResultError(ECardConstants.Minor.App.INCORRECT_PARM, msg));\n\t\treturn response;\n\t    }\n\n\t    // TA: Step 1 - Verify certificates\n\t    ta.verifyCertificates(certificateChain);\n\n\t    // save values for later use\n\t    CardVerifiableCertificate terminalCertificate = certificateChain.getTerminalCertificate();\n\t    byte[] key = eac2Input.getEphemeralPublicKey();\n\t    byte[] signature = eac2Input.getSignature();\n\t    internalData.put(EACConstants.IDATA_PK_PCD, key);\n\t    internalData.put(EACConstants.IDATA_SIGNATURE, signature);\n\t    internalData.put(EACConstants.IDATA_TERMINAL_CERTIFICATE, terminalCertificate);\n\n\t    if (signature != null) {\n\t\tlogger.trace(\"Signature has been provided in EAC2InputType.\");\n\n\t\t// perform TA and CA authentication\n\t\tChipAuthentication ca = new ChipAuthentication(dispatcher, slotHandle);\n\t\tAuthenticationHelper auth = new AuthenticationHelper(ta, ca);\n\t\teac2Output = auth.performAuth(eac2Output, internalData);\n\n\t\t// no third step needed, notify GUI\n\t\tDynamicContext ctx = DynamicContext.getInstance(TR03112Keys.INSTANCE_KEY);\n\t\tctx.put(EACProtocol.AUTHENTICATION_DONE, true);\n\t    } else {\n\t\tlogger.trace(\"Signature has not been provided in EAC2InputType.\");\n\n\t\t// send challenge again\n\t\tbyte[] rPICC = (byte[]) internalData.get(EACConstants.IDATA_CHALLENGE);\n\t\teac2Output.setChallenge(rPICC);\n\t    }\n\n\t    response.setResult(WSHelper.makeResultOK());\n\t    response.setAuthenticationProtocolData(eac2Output.getAuthDataType());\n\t} catch (Exception e) {\n\t    logger.error(e.getMessage(), e);\n\t    response.setResult(WSHelper.makeResultUnknownError(e.getMessage()));\n\t    dynCtx.put(EACProtocol.AUTHENTICATION_FAILED, true);\n\t}\n\n\tPromise<Object> p = (Promise<Object>) dynCtx.getPromise(TR03112Keys.PROCESSING_CANCELLATION);\n        if (p.derefNonblocking() == null) {\n            return response;\n        } else {\n            response = new DIDAuthenticateResponse();\n\t    String msg = \"Authentication Canceled by the user.\";\n            response.setResult(WSHelper.makeResultError(ECardConstants.Minor.SAL.CANCELLATION_BY_USER, msg));\n            return response;\n        }\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"ecsec/open-ecard","sample_ref":"refs/heads/master","sample_path":"addons/tr03112/src/main/java/org/openecard/sal/protocol/eac/TerminalAuthenticationStep.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ebe16c9634fa06b40dc0de5680bb8a9482f2b0d1","size":"6021","content":"package org.apache.mesos.elasticsearch.scheduler;\n\nimport com.beust.jcommander.ParameterException;\nimport org.apache.mesos.elasticsearch.common.cli.ElasticsearchCLIParameter;\nimport org.apache.mesos.elasticsearch.common.cli.ZookeeperCLIParameter;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * CLI Tests\n */\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic class CLITest {\n    private Environment env = Mockito.mock(Environment.class);\n\n    @Before\n    public void before() {\n        Mockito.when(env.getJavaHeap()).thenReturn(\"dummy\");\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void mainShouldBombOutOfMainIfInvalidParams() {\n        String[] args = {};\n        Main main = new Main(env);\n        main.run(args);\n    }\n\n    @Test\n    public void shouldPassIfOnlyRequiredParams() {\n        String[] args = {ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        new Configuration(args);\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void shouldCrashIfNoRequiredParams() {\n        String[] args = {};\n        new Configuration(args);\n    }\n    \n    @Test\n    public void randomParamTest() {\n        String[] args = {Configuration.ELASTICSEARCH_RAM, \"512\", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        Configuration configuration = new Configuration(args);\n        assertEquals(512.0, configuration.getMem(), 0.1);\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void shouldRejectZookeeperMesosTimeoutEqualTo0() {\n        String[] args = {ZookeeperCLIParameter.ZOOKEEPER_MESOS_TIMEOUT, \"0\", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        new Configuration(args);\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void shouldRejectZookeeperMesosTimeoutLessThan0() {\n        String[] args = {ZookeeperCLIParameter.ZOOKEEPER_MESOS_TIMEOUT, \"-1\", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        new Configuration(args);\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void shouldFailIfParamIsEmpty() {\n        String[] args = {ElasticsearchCLIParameter.ELASTICSEARCH_CLUSTER_NAME, \" \", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        new Configuration(args);\n    }\n\n    @Test\n    public void shouldBooleanOk() {\n        String[] args = {Configuration.EXECUTOR_FORCE_PULL_IMAGE, \"true\", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        Configuration configuration = new Configuration(args);\n        assertTrue(configuration.getExecutorForcePullImage());\n    }\n\n    @Test\n    public void shouldHandleSpaces() {\n        String[] args = {Configuration.EXECUTOR_FORCE_PULL_IMAGE, \"  true \", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        Configuration configuration = new Configuration(args);\n        assertTrue(configuration.getExecutorForcePullImage());\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void shouldCrashIfInvalidBoolean2() {\n        String[] args = {Configuration.EXECUTOR_FORCE_PULL_IMAGE, \"0\", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        new Configuration(args);\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void shouldCrashIfInvalidBoolean3() {\n        String[] args = {Configuration.EXECUTOR_FORCE_PULL_IMAGE, \"afds\", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        new Configuration(args);\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void doesNotAcceptBlank() {\n        String[] args = {ElasticsearchCLIParameter.ELASTICSEARCH_SETTINGS_LOCATION, \"\", ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"zk://dummyIPAddress:2181\"};\n        new Configuration(args);\n    }\n\n    @Test\n    public void shouldParseValidPorts() {\n        String validPorts = \"9200,9300\";\n        Configuration configuration = new Configuration(ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"aa\", Configuration.ELASTICSEARCH_PORTS, validPorts);\n        List<Integer> elasticsearchPorts = configuration.getElasticsearchPorts();\n        assertEquals(9200, elasticsearchPorts.get(0).intValue());\n        assertEquals(9300, elasticsearchPorts.get(1).intValue());\n    }\n\n    @Test\n    public void shouldBeOkWithSpaces() {\n        String validPorts = \"9200, 9300\";\n        Configuration configuration = new Configuration(ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"aa\", Configuration.ELASTICSEARCH_PORTS, validPorts);\n        List<Integer> elasticsearchPorts = configuration.getElasticsearchPorts();\n        assertEquals(9200, elasticsearchPorts.get(0).intValue());\n        assertEquals(9300, elasticsearchPorts.get(1).intValue());\n    }\n\n    @Test(expected = ParameterException.class)\n    public void shouldNotAcceptSinglePort() {\n        String validPorts = \"9200\";\n        new Configuration(ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"aa\", Configuration.ELASTICSEARCH_PORTS, validPorts);\n    }\n\n    @Test(expected = ParameterException.class)\n    public void shouldNotAcceptNonIntegers() {\n        String validPorts = \"9200,abc\";\n        new Configuration(ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"aa\", Configuration.ELASTICSEARCH_PORTS, validPorts);\n    }\n\n    @Test(expected = ParameterException.class)\n    public void shouldNotAcceptMultiplePorts() {\n        String validPorts = \"9200,9300,9400\";\n        new Configuration(ZookeeperCLIParameter.ZOOKEEPER_MESOS_URL, \"aa\", Configuration.ELASTICSEARCH_PORTS, validPorts);\n    }\n\n    @Test(expected = com.beust.jcommander.ParameterException.class)\n    public void printHelpWithValidDefaults() {\n        new Configuration(new String[]{});\n    }\n}","binary":"false","copies":"1","sample_repo_name":"mesos/elasticsearch","sample_ref":"refs/heads/master","sample_path":"scheduler/src/test/java/org/apache/mesos/elasticsearch/scheduler/CLITest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bb20f5bf23d6bd674cb0951677ab6dc9366e8795","size":"3083","content":"/**\n * Copyright (C) 2010-2016 Structr GmbH\n *\n * This file is part of Structr <http://structr.org>.\n *\n * Structr is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * Structr is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Structr.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.structr.websocket.command;\n\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport org.structr.common.SecurityContext;\nimport org.structr.common.error.FrameworkException;\nimport org.structr.core.app.App;\nimport org.structr.core.app.StructrApp;\nimport org.structr.core.entity.AbstractNode;\nimport org.structr.core.graph.Tx;\nimport org.structr.web.entity.dom.DOMNode;\nimport org.structr.websocket.StructrWebSocket;\nimport org.structr.websocket.message.MessageBuilder;\nimport org.structr.websocket.message.WebSocketMessage;\n\n//~--- classes ----------------------------------------------------------------\n/**\n * Websocket command to delete all DOM nodes which are not attached to a parent\n * element\n *\n *\n */\npublic class DeleteUnattachedNodesCommand extends AbstractCommand {\n\n\tprivate static final Logger logger = Logger.getLogger(DeleteUnattachedNodesCommand.class.getName());\n\n\tstatic {\n\n\t\tStructrWebSocket.addCommand(DeleteUnattachedNodesCommand.class);\n\n\t}\n\n\t@Override\n\tpublic void processMessage(final WebSocketMessage webSocketData) throws FrameworkException {\n\n\t\tfinal SecurityContext securityContext = getWebSocket().getSecurityContext();\n\t\tfinal App app = StructrApp.getInstance(securityContext);\n\n\t\tfinal List<AbstractNode> filteredResults = new LinkedList<>();\n\t\t\n\t\ttry (final Tx tx = app.tx(false, false, false)) {\n\n\t\t\t// Get all top nodes, use method from list command\n\t\t\tfinal List<AbstractNode> topNodes = ListUnattachedNodesCommand.getUnattachedNodes(app, securityContext, webSocketData);\n\n\t\t\t// Loop through all top nodes and collect all their child nodes\n\t\t\tfor (final AbstractNode topNode : topNodes) {\n\t\t\t\tfilteredResults.add(topNode);\n\t\t\t\tfilteredResults.addAll(DOMNode.getAllChildNodes((DOMNode) topNode));\n\t\t\t}\n\t\t\t\n\t\t\tfor (final AbstractNode node : filteredResults) {\n\t\t\t\tapp.delete(node);\n\t\t\t}\n\n\t\t\ttx.success();\n\n\t\t} catch (FrameworkException fex) {\n\t\t\tlogger.log(Level.WARNING, \"Exception occured\", fex);\n\t\t\tgetWebSocket().send(MessageBuilder.status().code(fex.getStatus()).message(fex.getMessage()).build(), true);\n\n\t\t}\n\t}\n\n\t@Override\n\tpublic String getCommand() {\n\n\t\treturn \"DELETE_UNATTACHED_NODES\";\n\n\t}\n\n\t@Override\n\tpublic boolean requiresEnclosingTransaction() {\n\t\treturn false;\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"structr/structr","sample_ref":"refs/heads/master","sample_path":"structr-ui/src/main/java/org/structr/websocket/command/DeleteUnattachedNodesCommand.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b568c4994db31e0eb588192ae21b8a833f033204","size":"687","content":"package gplx.xowa.parsers.tmpls; import gplx.*; import gplx.xowa.*; import gplx.xowa.parsers.*;\r\npublic interface Xot_defn extends Rls_able {\r\n\tbyte Defn_tid();\r\n\tbyte[] Name();\r\n\tint Cache_size();\r\n\tboolean Defn_require_colon_arg();\r\n\tXot_defn Clone(int id, byte[] name);\r\n}\r\nclass Xot_defn_null implements Xot_defn {\r\n\tpublic byte Defn_tid() {return Xot_defn_.Tid_null;}\r\n\tpublic boolean Defn_require_colon_arg() {return false;}\r\n\tpublic byte[] Name() {return Bry_.Empty;}\r\n\tpublic Xot_defn Clone(int id, byte[] name) {return this;}\r\n\tpublic int Cache_size() {return 0;}\r\n\tpublic void Rls() {}\r\n\tpublic static final Xot_defn_null Instance = new Xot_defn_null(); Xot_defn_null() {}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"gnosygnu/xowa_android","sample_ref":"refs/heads/master","sample_path":"_400_xowa/src/main/java/gplx/xowa/parsers/tmpls/Xot_defn.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"86310d1a1f0d02af1165e717392f77a8ad7dad61","size":"4552","content":"/**\n * <a href=\"http://www.openolat.org\">\n * OpenOLAT - Online Learning and Training</a><br>\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\"); <br>\n * you may not use this file except in compliance with the License.<br>\n * You may obtain a copy of the License at the\n * <a href=\"http://www.apache.org/licenses/LICENSE-2.0\">Apache homepage</a>\n * <p>\n * Unless required by applicable law or agreed to in writing,<br>\n * software distributed under the License is distributed on an \"AS IS\" BASIS, <br>\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <br>\n * See the License for the specific language governing permissions and <br>\n * limitations under the License.\n * <p>\n * Initial code contributed and copyrighted by<br>\n * frentix GmbH, http://www.frentix.com\n * <p>\n */\npackage org.olat.selenium.page.wiki;\n\nimport java.util.List;\n\nimport org.jboss.arquillian.drone.api.annotation.Drone;\nimport org.jboss.arquillian.graphene.Graphene;\nimport org.junit.Assert;\nimport org.olat.selenium.page.graphene.OOGraphene;\nimport org.olat.selenium.page.portfolio.ArtefactWizardPage;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\n\n/**\n * \n * Drive the wiki page GUI, editor...\n * \n * Initial date: 02.07.2014<br>\n * @author srosse, stephane.rosse@frentix.com, http://www.frentix.com\n *\n */\npublic class WikiPage {\n\t\n\tpublic static final By wikiWrapperBy = By.cssSelector(\"div.o_wiki_wrapper\");\n\t\n\t@Drone\n\tprivate WebDriver browser;\n\t\n\tpublic WikiPage() {\n\t\t//\n\t}\n\t\n\tpublic WikiPage(WebDriver browser) {\n\t\tthis.browser = browser;\n\t}\n\t\n\tpublic static WikiPage getWiki(WebDriver browser) {\n\t\tWebElement main = browser.findElement(By.id(\"o_main_wrapper\"));\n\t\treturn Graphene.createPageFragment(WikiPage.class, main);\n\t}\n\t\n\tpublic static WikiPage getGroupWiki(WebDriver browser) {\n\t\tWebElement main = browser.findElement(By.id(\"o_main_wrapper\"));\n\t\tAssert.assertTrue(main.isDisplayed());\n\t\treturn new WikiPage(browser);\n\t}\n\t\n\tpublic WikiPage createPage(String name, String content) {\n\t\t//open the create popover\n\t\tBy createBy = By.className(\"o_sel_wiki_create_page\");\n\t\tOOGraphene.waitElement(createBy, 2, browser);\n\t\tWebElement createButton = browser.findElement(createBy);\n\t\tcreateButton.click();\n\t\t\n\t\t//fill the name of the new page\n\t\tBy pageNameBy = By.cssSelector(\"div.o_callout_content form input[type='text']\");\n\t\tOOGraphene.waitElement(pageNameBy, 2, browser);\n\t\tWebElement pageNameEl = browser.findElement(pageNameBy);\n\t\tpageNameEl.sendKeys(name);\n\t\t//search for it\n\t\tBy searchBy = By.cssSelector(\"div.popover-content form .o_sel_wiki_search button\");\n\t\tWebElement searchButton = browser.findElement(searchBy);\n\t\tsearchButton.click();\n\t\tOOGraphene.waitBusy(browser);\n\t\t\n\t\t//not exist -> click the link to create the page\n\t\tBy notExistingBy = By.xpath(\"//div[contains(@class,'o_wikimod-article-box')]//a[@title='\" + name + \"']\");\n\t\tWebElement notExistingLink = browser.findElement(notExistingBy);\n\t\tnotExistingLink.click();\n\t\t\n\t\t//fill the form\n\t\tBy textBy = By.cssSelector(\"div.o_wikimod_editform_wrapper form textarea\");\n\t\tOOGraphene.waitElement(textBy, browser);\n\t\tWebElement textEl = browser.findElement(textBy);\n\t\ttextEl.sendKeys(content);\n\t\t//save the page\n\t\tBy saveAndCloseBy = By.className(\"o_sel_wiki_save_and_close\");\n\t\tWebElement saveAndCloseButton = browser.findElement(saveAndCloseBy);\n\t\tsaveAndCloseButton.click();\n\t\tOOGraphene.waitBusy(browser);\n\t\t\n\t\t//assert\n\t\tBy pageTitleBy = By.className(\"o_wikimod_heading\");\n\t\tWebElement pageTitleEl = browser.findElement(pageTitleBy);\n\t\tAssert.assertTrue(pageTitleEl.getText().contains(name));\n\t\t\n\t\tBy contentBy = By.className(\"o_wikimod-article-box\");\n\t\tWebElement contentEl = browser.findElement(contentBy);\n\t\tAssert.assertTrue(contentEl.getText().contains(content));\n\t\treturn this;\n\t}\n\t\n\tpublic WikiPage assertOnContent(String text) {\n\t\tBy messageBodyBy = By.className(\"o_wikimod-article-box\");\n\t\tList<WebElement> messages = browser.findElements(messageBodyBy);\n\t\tboolean found = false;\n\t\tfor(WebElement message:messages) {\n\t\t\tif(message.getText().contains(text)) {\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tAssert.assertTrue(found);\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * Add the current page to my artefacts\n\t * \n\t */\n\tpublic ArtefactWizardPage addAsArtfeact() {\n\t\tBy addAsArtefactBy = By.className(\"o_eportfolio_add\");\n\t\tWebElement addAsArtefactButton = browser.findElement(addAsArtefactBy);\n\t\taddAsArtefactButton.click();\n\t\tOOGraphene.waitBusy(browser);\n\t\treturn ArtefactWizardPage.getWizard(browser);\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"klemens/openolat","sample_ref":"refs/heads/master","sample_path":"src/test/java/org/olat/selenium/page/wiki/WikiPage.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bf07ee61fcb758f9892c3ac976675506995f326e","size":"1652","content":"package com.hantsylabs.restexample.springmvc.test.jbehave.steps;\n\nimport com.hantsylabs.restexample.springmvc.domain.Post;\nimport com.hantsylabs.restexample.springmvc.repository.PostRepository;\nimport org.jbehave.core.annotations.Given;\nimport org.jbehave.core.annotations.Named;\nimport org.jbehave.core.annotations.Then;\nimport org.jbehave.core.annotations.When;\nimport static org.junit.Assert.assertTrue;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\n\nimport org.springframework.http.ResponseEntity;\n\npublic class PostSteps {\n\n    PostRepository postRepository;\n\n    TestRestTemplate restTemplate;\n\n    String baseUrl;\n\n    public PostSteps(PostRepository postRepository,\n            TestRestTemplate restTemplate,\n            String baseUrl) {\n        this.postRepository = postRepository;\n        this.restTemplate = restTemplate;\n        this.baseUrl = baseUrl;\n    }\n\n    ResponseEntity<String> reponseEntity;\n\n    @Given(\"post title is $title and content is $content\")\n    public void savePost(@Named(\"title\") String title, @Named(\"content\") String content) {\n        postRepository.save(new Post(title, content));\n    }\n\n    @When(\"GET $path\")\n    public void getPost(@Named(\"path\") String path) {\n        reponseEntity = restTemplate.getForEntity(baseUrl + path, String.class);\n    }\n\n    @Then(\"response status is $code\")\n    public void responseCode(@Named(\"code\") int code) {\n        assertTrue(reponseEntity.getStatusCode().value() == code);\n    }\n\n    @Then(\"response body contains $body\")\n    public void responseBody(@Named(\"body\") String body) {\n        assertTrue(reponseEntity.getBody().contains(body));\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"hantsy/angularjs-springmvc-sample-boot","sample_ref":"refs/heads/master","sample_path":"src/test/java/com/hantsylabs/restexample/springmvc/test/jbehave/steps/PostSteps.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"313765f1bfb7542d3a6911d0d4fc8de0e90dec31","size":"756","content":"package org.softeg.slartus.forpdaplus.listtemplates;/*\n * Created by slinkin on 10.04.2014.\n */\n\nimport android.support.v4.app.Fragment;\n\nimport org.softeg.slartus.forpdaplus.App;\nimport org.softeg.slartus.forpdaplus.R;\nimport org.softeg.slartus.forpdaplus.listfragments.users.LeadersListFragment;\n\npublic class LeadsBrickInfo extends BrickInfo {\n    @Override\n    public String getTitle() {\n        return App.getContext().getString(R.string.administration);\n    }\n\n    @Override\n    public int getIcon() {\n        return R.drawable.account_multiple;\n    }\n\n    @Override\n    public String getName() {\n        return \"Leads\";\n    }\n\n    @Override\n    public Fragment createFragment() {\n        return new LeadersListFragment().setBrickInfo(this);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"slartus/4pdaClient-plus","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/org/softeg/slartus/forpdaplus/listtemplates/LeadsBrickInfo.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"38466136f3ee193654a6430e4b4926c739520adc","size":"1678","content":"package com.ermans.bottledanimals.block;\n\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.nbt.NBTTagCompound;\nimport net.minecraft.network.NetworkManager;\nimport net.minecraft.network.Packet;\nimport net.minecraft.network.play.server.S35PacketUpdateTileEntity;\nimport net.minecraft.tileentity.TileEntity;\n\npublic abstract class TileBase extends TileEntity {\n\n\n    public TileBase() {\n        initTile();\n    }\n\n    public void initTile() {\n    }\n\n    //Who call this want a packet (for world-saving) that describe this TE, so we call writeToNbt to get all the information\n    @Override\n    public Packet getDescriptionPacket() {\n        NBTTagCompound nbtTagCompound = new NBTTagCompound();\n        writeToNBT(nbtTagCompound);\n        return new S35PacketUpdateTileEntity(this.xCoord, this.yCoord, this.zCoord, 0, nbtTagCompound);\n    }\n\n    //Who call this want to restore this TE giving us the data to do that, so we call readFromNBT to restore all information\n    @Override\n    public void onDataPacket(NetworkManager net, S35PacketUpdateTileEntity pkt) {\n        readFromNBT(pkt.func_148857_g());\n    }\n\n\n    //We are checking if a player can access at this TE (could be useful for a security system, now it just returns true)\n    //But keep in mind to use this.\n    public boolean canPlayerAccess(EntityPlayer player) {\n        return true;\n    }\n\n\n    protected boolean checkTick(int tick){\n        return worldObj.getTotalWorldTime() % tick == 0;\n    }\n\n\n\n    public boolean handleRightClick(EntityPlayer player, ItemStack itemStack, float xClicked, float yClicked, float zClicked){\n        return false;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"Ermans/BottledAnimals","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/ermans/bottledanimals/block/TileBase.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"07e034c316daadda3750606d8db947ae13657503","size":"2254","content":"\npackage org.openestate.io.wis_it.xml;\n\nimport javax.xml.bind.annotation.XmlEnum;\nimport javax.xml.bind.annotation.XmlEnumValue;\nimport javax.xml.bind.annotation.XmlType;\n\n\n/**\n * <p>Java class for propertyType.\n * \n * <p>The following schema fragment specifies the expected content contained within this class.\n * <p>\n * <pre>\n * &lt;simpleType name=\"propertyType\"&gt;\n *   &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}string\"&gt;\n *     &lt;enumeration value=\"bauernhof\"/&gt;\n *     &lt;enumeration value=\"baugrund\"/&gt;\n *     &lt;enumeration value=\"buero\"/&gt;\n *     &lt;enumeration value=\"einfamilienhaus\"/&gt;\n *     &lt;enumeration value=\"garage\"/&gt;\n *     &lt;enumeration value=\"gastgewerbeobjekt\"/&gt;\n *     &lt;enumeration value=\"geschaeft\"/&gt;\n *     &lt;enumeration value=\"gewerbehalle\"/&gt;\n *     &lt;enumeration value=\"kulturgrund\"/&gt;\n *     &lt;enumeration value=\"reihenhaus\"/&gt;\n *     &lt;enumeration value=\"wald\"/&gt;\n *     &lt;enumeration value=\"wohnung\"/&gt;\n *   &lt;/restriction&gt;\n * &lt;/simpleType&gt;\n * </pre>\n * \n */\n@XmlType(name = \"propertyType\")\n@XmlEnum\npublic enum PropertyType {\n\n    @XmlEnumValue(\"bauernhof\")\n    BAUERNHOF(\"bauernhof\"),\n    @XmlEnumValue(\"baugrund\")\n    BAUGRUND(\"baugrund\"),\n    @XmlEnumValue(\"buero\")\n    BUERO(\"buero\"),\n    @XmlEnumValue(\"einfamilienhaus\")\n    EINFAMILIENHAUS(\"einfamilienhaus\"),\n    @XmlEnumValue(\"garage\")\n    GARAGE(\"garage\"),\n    @XmlEnumValue(\"gastgewerbeobjekt\")\n    GASTGEWERBEOBJEKT(\"gastgewerbeobjekt\"),\n    @XmlEnumValue(\"geschaeft\")\n    GESCHAEFT(\"geschaeft\"),\n    @XmlEnumValue(\"gewerbehalle\")\n    GEWERBEHALLE(\"gewerbehalle\"),\n    @XmlEnumValue(\"kulturgrund\")\n    KULTURGRUND(\"kulturgrund\"),\n    @XmlEnumValue(\"reihenhaus\")\n    REIHENHAUS(\"reihenhaus\"),\n    @XmlEnumValue(\"wald\")\n    WALD(\"wald\"),\n    @XmlEnumValue(\"wohnung\")\n    WOHNUNG(\"wohnung\");\n    private final String value;\n\n    PropertyType(String v) {\n        value = v;\n    }\n\n    public String value() {\n        return value;\n    }\n\n    public static PropertyType fromValue(String v) {\n        for (PropertyType c: PropertyType.values()) {\n            if (c.value.equals(v)) {\n                return c;\n            }\n        }\n        throw new IllegalArgumentException(v);\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"OpenEstate/OpenEstate-IO","sample_ref":"refs/heads/master","sample_path":"WisIT/src/main/java/org/openestate/io/wis_it/xml/PropertyType.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"cba502e8ca084e3614f2d52bd3e559c04a739652","size":"9571","content":"package com.same.androidclass.view.fragment;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.design.widget.FloatingActionButton;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TableLayout;\nimport android.widget.TableRow;\nimport android.widget.TextView;\n\nimport com.same.androidclass.R;\nimport com.same.androidclass.bean.Course;\nimport com.same.androidclass.common.AppConfig;\nimport com.same.androidclass.presenter.CoursePresenter;\nimport com.same.androidclass.util.ActivityCollector;\nimport com.same.androidclass.util.DataUtil;\nimport com.same.androidclass.util.DateUtil;\nimport com.same.androidclass.view.activity.CourseDetailActivity;\nimport com.same.androidclass.view.view.CourseView;\nimport com.thuongnh.zprogresshud.ZProgressHUD;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport cn.qqtheme.framework.picker.LinkagePicker;\n\n/**\n * \u8bfe\u7a0b\u89c6\u56fe\n * Created by alic on 16-5-8.\n */\npublic class HomeClassesFragment extends Fragment implements CourseView, View.OnClickListener {\n    private View viewCourse;\n    private TableLayout table;\n    private String schoolYear = String.valueOf(Integer.parseInt(DateUtil.formatDate(new Date(), DateUtil.yyyy)) - 1);//\u670d\u52a1\u7aef_\u8bfe\u7a0b_\u5b66\u5e74_option\n    private String semester = AppConfig.CURRENT_TERM;//\u670d\u52a1\u7aef_\u8bfe\u7a0b_\u5b66\u671f\u2014\u2014option\n    private String courseTerm=\"2015-2016\u5b66\u5e74 \u7b2c\u4e8c\u5b66\u671f\";//\u672c\u5730\u83b7\u53d6\u6570\u636e\u7684\u5b66\u671foption\n    private String week ;//\u5f53\u524d\u5468\u6570\n    private CoursePresenter coursePresenter;\n    private ZProgressHUD loading;//\u52a0\u8f7d\u7ec4\u4ef6\n\n    private FloatingActionButton floatingActionButton;\n\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        viewCourse = inflater.inflate(R.layout.home_viewpager_one, container, false);\n        initView();\n        return viewCourse;\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u89c6\u56fe\n     */\n    public void initView() {\n        week= DataUtil.readSharedPreference(viewCourse.getContext(),\"currentWeek\",\"14\");\n        //FloatingActionButton\n        floatingActionButton = (FloatingActionButton) viewCourse.findViewById(R.id.fab_classes);\n        table = (TableLayout) viewCourse.findViewById(R.id.home_main_scroll_body);\n        floatingActionButton.setOnClickListener(this);\n\n\n        //loading\n        loading = ZProgressHUD.getInstance(viewCourse.getContext());\n\n        coursePresenter = new CoursePresenter(this, viewCourse.getContext());\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                coursePresenter.doLoadCourses();\n            }\n        }).start();\n\n    }\n\n\n    //\u663e\u793a\u8bfe\u7a0b\u6570\u636e\n    @Override\n    public void displayCourses(final List<Course> courses) {\n\n        System.out.println(\"\u6211\u5728\u52a0\u8f7d   \u4f60\u9009\u4e86\u4e86\u7b2c\" + week + \"\u5468\");\n\n        //\u904d\u5386\u8868\u683c\u5e76\u586b\u5145\n        int line = 0, row = 0;\n        for (final Course course : courses) {\n            //\u8bfe\u7a0b\u4fe1\u606f\n            if (course.getCourseName() != null && DataUtil.isContainer(course.getCourseRange().split(\" \"), week)) {\n                //\u83b7\u53d6\u8981\u586b\u5145\u7684\u8868\u683c\n                final String content = DataUtil.subString(course.getCourseName(), 10, \"...\") + \"\\n\" + course.getCourseClassroom();\n                ((TextView) ((TableRow) table.getChildAt(line)).getChildAt(row + 1))\n                        .setText(content);\n                //\u8bbe\u7f6e\u5176\u72b6\u6001 \u4e3a\u4e86\u6539\u53d8\u989c\u8272\n                (((TableRow) table.getChildAt(line)).getChildAt(row + 1)).setSelected(true);\n\n                //\u6dfb\u52a0\u76d1\u542c\u4e8b\u4ef6\n                (((TableRow) table.getChildAt(line)).getChildAt(row + 1))\n                        .setOnClickListener(new View.OnClickListener() {\n                            @Override\n                            public void onClick(View v) {\n                                Intent detailIntent = new Intent(viewCourse.getContext(), CourseDetailActivity.class);\n                                Bundle courseBundle = new Bundle();\n                                courseBundle.putSerializable(\"detailCourse\", course);\n                                detailIntent.putExtras(courseBundle);\n                                startActivity(detailIntent);\n                                ActivityCollector.addActivity(getActivity());\n                            }\n                        });\n            } else {\n                //\u6e05\u7a7a\u6ca1\u8bfe\u7684text\n                ((TextView) ((TableRow) table.getChildAt(line)).getChildAt(row + 1)).setText(\"\");\n                //\u8bbe\u7f6e\u5176\u6ca1\u8bfe\u72b6\u6001 \u4e3a\u4e86\u6539\u53d8\u989c\u8272\n                (((TableRow) table.getChildAt(line)).getChildAt(row + 1)).setSelected(false);\n            }\n            row++;\n            if (row >= 5) {\n                row = 0;\n                line++;\n            }\n        }\n    }\n\n\n    @Override\n    public String getSchoolYear() {\n        return schoolYear;\n    }\n\n    @Override\n    public String getSemester() {\n        return semester;\n    }\n\n    @Override\n    public String getCourseTerm() {\n//        return \"2015-2016\u5b66\u5e74 \u7b2c\u4e8c\u5b66\u671f\";\n        return courseTerm;\n    }\n\n    @Override\n    public void showLoading() {\n        loading.show();\n    }\n\n    @Override\n    public void hideLoading() {\n        loading.dismissWithSuccess();\n    }\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.fab_classes:\n//                new AlertView(\"\u8bfe\u7a0b\u5468\u6570\", null, \"\", null, AppConfig.COURSE_WEEKS,\n//                        viewCourse.getContext(), AlertView.Style.ActionSheet, this).show();\n                onLinkagePicker();\n                break;\n            default:\n                break;\n        }\n    }\n\n    public void onLinkagePicker() {\n        ArrayList<String> firstList = AppConfig.COURSE_TREMS_OPTION(viewCourse.getContext());\n\n        ArrayList<ArrayList<String>> secondList = new ArrayList<ArrayList<String>>();\n        ArrayList<String> secondListItem = AppConfig.COURSE_WEEKS_OPTION();\n        secondList.add(secondListItem);//\u5bf9\u5e94\u4eca\u5929\n        secondList.add(secondListItem);//\u5bf9\u5e94\u4eca\u5929\n        secondList.add(secondListItem);//\u5bf9\u5e94\u4eca\u5929\n        secondList.add(secondListItem);//\u5bf9\u5e94\u4eca\u5929\n        secondList.add(secondListItem);//\u5bf9\u5e94\u660e\u5929\n        secondList.add(secondListItem);//\u5bf9\u5e94\u660e\u5929\n        secondList.add(secondListItem);//\u5bf9\u5e94\u660e\u5929\n        LinkagePicker picker = new LinkagePicker(getActivity(), firstList, secondList);\n        picker.setSelectedItem(schoolYear+\"-\"+semester, AppConfig.COURSE_WEEKS_OPTION().get(Integer.parseInt(week)-1));\n        picker.setOnLinkageListener(new LinkagePicker.OnLinkageListener() {\n\n            @Override\n            public void onPicked(String first, String second, String third) {\n//                Toast.makeText(viewCourse.getContext(), first + \"-\" + second, Toast.LENGTH_SHORT).show();\n                schoolYear = first.split(\"-\")[0];\n                semester = first.split(\"-\")[1];\n\n                if (semester.equals(\"1\"))\n                    courseTerm = schoolYear + \"-\" + (Integer.parseInt(schoolYear) + 1) + \"\u5b66\u5e74 \" + \"\u7b2c\u4e00\u5b66\u671f\";\n                else\n                    courseTerm = schoolYear + \"-\" + (Integer.parseInt(schoolYear) + 1) + \"\u5b66\u5e74 \" + \"\u7b2c\u4e8c\u5b66\u671f\";\n\n                switch (second) {\n                    case \"\u7b2c\u4e00\u5468\":\n                        week = \"1\";\n                        break;\n                    case \"\u7b2c\u4e8c\u5468\":\n                        week = \"2\";\n                        break;\n                    case \"\u7b2c\u4e09\u5468\":\n                        week = \"3\";\n                        break;\n                    case \"\u7b2c\u56db\u5468\":\n                        week = \"4\";\n                        break;\n                    case \"\u7b2c\u4e94\u5468\":\n                        week = \"5\";\n                        break;\n                    case \"\u7b2c\u516d\u5468\":\n                        week = \"6\";\n                        break;\n                    case \"\u7b2c\u4e03\u5468\":\n                        week = \"7\";\n                        break;\n                    case \"\u7b2c\u516b\u5468\":\n                        week = \"8\";\n                        break;\n                    case \"\u7b2c\u4e5d\u5468\":\n                        week = \"9\";\n                        break;\n                    case \"\u7b2c\u5341\u5468\":\n                        week = \"10\";\n                        break;\n                    case \"\u7b2c\u5341\u4e00\u5468\":\n                        week = \"11\";\n                        break;\n                    case \"\u7b2c\u5341\u4e8c\u5468\":\n                        week = \"12\";\n                        break;\n                    case \"\u7b2c\u5341\u4e09\u5468\":\n                        week = \"13\";\n                        break;\n                    case \"\u7b2c\u5341\u56db\u5468\":\n                        week = \"14\";\n                        break;\n                    case \"\u7b2c\u5341\u4e94\u5468\":\n                        week = \"15\";\n                        break;\n                    case \"\u7b2c\u5341\u516d\u5468\":\n                        week = \"16\";\n                        break;\n                    case \"\u7b2c\u5341\u4e03\u5468\":\n                        week = \"17\";\n                        break;\n                    default:\n                        break;\n                }\n                new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        coursePresenter.doLoadCourses();\n                    }\n                }).start();\n\n            }\n        });\n        picker.show();\n    }\n\n\n}\n","binary":"false","copies":"1","sample_repo_name":"alicance/MyScse-Client","sample_ref":"refs/heads/master","sample_path":"androidclass/src/main/java/com/same/androidclass/view/fragment/HomeClassesFragment.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"dae48f1192cb9e8cb3f33bc372f57d4d0b2f4014","size":"5769","content":"/*\n * Copyright \ufffd 2014 - 2015 Alexander01998 and contributors\n * All rights reserved.\n * \n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage tk.wurst_client.commands;\n\nimport net.minecraft.block.Block;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.ItemStack;\nimport tk.wurst_client.WurstClient;\nimport tk.wurst_client.commands.Cmd.Info;\nimport tk.wurst_client.mods.XRayMod;\nimport tk.wurst_client.utils.MiscUtils;\n\nimport java.util.Iterator;\n\n@Info(help = \"Manages or toggles X-Ray.\", name = \"xray\",\n        syntax = {\"add (id <block_id>|name <block_name>)\", \"remove (id <block_id>|name <block_name>)\", \"list [<page>]\"})\npublic class XRayCmd extends Cmd {\n    @Override\n    public void execute(String[] args) throws Error {\n        if (args.length == 0) {\n            syntaxError();\n        } else if (args[0].equalsIgnoreCase(\"list\")) {\n            if (args.length == 1) {\n                execute(new String[]{\"list\", \"1\"});\n                return;\n            }\n            int pages = (int) Math.ceil(XRayMod.xrayBlocks.size() / 8D);\n            if (MiscUtils.isInteger(args[1])) {\n                int page = Integer.valueOf(args[1]);\n                if (page > pages || page < 1) syntaxError(\"Invalid page: \" + page);\n                WurstClient.INSTANCE.chat.message(\"Current X-Ray blocks: \" + XRayMod.xrayBlocks.size());\n                WurstClient.INSTANCE.chat.message(\"X-Ray blocks list (page \" + page + \"/\" + pages + \"):\");\n                Iterator<Block> itr = XRayMod.xrayBlocks.iterator();\n                for (int i = 0; itr.hasNext(); i++) {\n                    Block block = itr.next();\n                    if (i >= (page - 1) * 8 && i < (page - 1) * 8 + 8) {\n                        WurstClient.INSTANCE.chat.message(new ItemStack(Item.getItemFromBlock(block)).getDisplayName());\n                    }\n                }\n            } else {\n                syntaxError();\n            }\n        } else if (args.length < 2) {\n            syntaxError();\n        } else if (args[0].equalsIgnoreCase(\"add\")) {\n            if (args[1].equalsIgnoreCase(\"id\") && MiscUtils.isInteger(args[2])) {\n                if (tk.wurst_client.mods.XRayMod.xrayBlocks.contains(Block.getBlockById(Integer.valueOf(args[2])))) {\n                    WurstClient.INSTANCE.chat.error(\"\\\"\" + args[2] + \"\\\" is already in your X-Ray blocks list.\");\n                    return;\n                }\n                tk.wurst_client.mods.XRayMod.xrayBlocks.add(Block.getBlockById(Integer.valueOf(args[2])));\n                WurstClient.INSTANCE.files.saveXRayBlocks();\n                WurstClient.INSTANCE.chat.message(\"Added block \" + args[2] + \".\");\n                Minecraft.getMinecraft().renderGlobal.loadRenderers();\n            } else if (args[1].equalsIgnoreCase(\"name\")) {\n                int newID = Block.getIdFromBlock(Block.getBlockFromName(args[2]));\n                if (newID == -1) {\n                    WurstClient.INSTANCE.chat.message(\"The block \\\"\" + args[1] + \"\\\" could not be found.\");\n                    return;\n                }\n                tk.wurst_client.mods.XRayMod.xrayBlocks.add(Block.getBlockById(newID));\n                WurstClient.INSTANCE.files.saveXRayBlocks();\n                WurstClient.INSTANCE.chat.message(\"Added block \" + newID + \" (\\\"\" + args[2] + \"\\\").\");\n                Minecraft.getMinecraft().renderGlobal.loadRenderers();\n            } else {\n                syntaxError();\n            }\n        } else if (args[0].equalsIgnoreCase(\"remove\")) {\n            if (args[1].equalsIgnoreCase(\"id\") && MiscUtils.isInteger(args[2])) {\n                for (int i = 0; i < tk.wurst_client.mods.XRayMod.xrayBlocks.size(); i++) {\n                    if (Integer.toString(Block.getIdFromBlock(tk.wurst_client.mods.XRayMod.xrayBlocks.get(i)))\n                            .toLowerCase().equals(args[2].toLowerCase())) {\n                        tk.wurst_client.mods.XRayMod.xrayBlocks.remove(i);\n                        WurstClient.INSTANCE.files.saveXRayBlocks();\n                        WurstClient.INSTANCE.chat.message(\"Removed block \" + args[2] + \".\");\n                        Minecraft.getMinecraft().renderGlobal.loadRenderers();\n                        return;\n                    }\n                }\n                WurstClient.INSTANCE.chat.error(\"Block \" + args[2] + \" is not in your X-Ray blocks list.\");\n            } else if (args[1].equalsIgnoreCase(\"name\")) {\n                int newID = Block.getIdFromBlock(Block.getBlockFromName(args[2]));\n                if (newID == -1) {\n                    WurstClient.INSTANCE.chat.message(\"The block \\\"\" + args[2] + \"\\\" could not be found.\");\n                    return;\n                }\n                for (int i = 0; i < tk.wurst_client.mods.XRayMod.xrayBlocks.size(); i++) {\n                    if (Block.getIdFromBlock(tk.wurst_client.mods.XRayMod.xrayBlocks.get(i)) == newID) {\n                        tk.wurst_client.mods.XRayMod.xrayBlocks.remove(i);\n                        WurstClient.INSTANCE.files.saveXRayBlocks();\n                        WurstClient.INSTANCE.chat.message(\"Removed block \" + newID + \" (\\\"\" + args[2] + \"\\\").\");\n                        Minecraft.getMinecraft().renderGlobal.loadRenderers();\n                        return;\n                    }\n                }\n                WurstClient.INSTANCE.chat\n                        .error(\"Block \" + newID + \" (\\\"\" + args[2] + \"\\\") is not in your X-Ray blocks list.\");\n            } else {\n                syntaxError();\n            }\n        } else {\n            syntaxError();\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"null-dev/EvenWurse","sample_ref":"refs/heads/master","sample_path":"Wurst Client/src/tk/wurst_client/commands/XRayCmd.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"97de35bd1e85b8f3ddfbce22b652c521913a73ae","size":"72363","content":"package mat.client.shared;\r\n\r\nimport mat.shared.ConstantMessages;\r\n\r\n// TODO: Auto-generated Javadoc\r\n/**\r\n * Message store to prevent duplicated messages final String fields and their\r\n * getters.\r\n * \r\n * @author aschmidt\r\n */\r\npublic class MessageDelegate {\r\n\t\r\n\t/** The Constant WELCOME_MESSAGE. */\r\n\tpublic static final String WELCOME_MESSAGE = \"You have successfully logged into the MAT.\";\r\n\t\r\n\t/** The Constant ALERT_LOADING_MESSAGE. */\r\n\tpublic static final String ALERT_LOADING_MESSAGE = \"Please wait until loading is complete.\";\r\n\t\r\n\t/** The Constant MEASURE_DEVELOPER_ADDED_SUCCESSFULLY. */\r\n\tpublic static final String MEASURE_DEVELOPER_ADDED_SUCCESSFULLY= \"Measure Developer updated successfully. Changes must be saved on the previous page.\";\r\n\t\r\n\t/** The Constant CHANGES_SAVED. */\r\n\tpublic static final String CHANGES_SAVED = \"Changes are successfully saved.\";\r\n\t\r\n\t/** The Constant NO_MARKUP_ALLOWED. */\r\n\tpublic static final String NO_MARKUP_ALLOWED = \"No markup text allowed in any text fields.\";\r\n\t\r\n\t/** The Constant CODE_LIST_ADDED. */\r\n\tpublic static final String CODE_LIST_ADDED = \"Code has been successfully added to the value set.\";\r\n\t\r\n\t/** The Constant CODE_LIST_ADDED_GROUP. */\r\n\tpublic static final String CODE_LIST_ADDED_GROUP = \"Value set has been successfully added to the grouped value set.\";\r\n\t\r\n\t/** The Constant COMPLETE. */\r\n\tpublic static final int COMPLETE = 1;\r\n\t\r\n\t/** The Constant DRAFT. */\r\n\tpublic static final int DRAFT = 0;\r\n\t\r\n\t/** The Constant FIRST_NAME_MIN. */\r\n\tpublic static final String FIRST_NAME_MIN = \"First Name must be at least two characters.\";\r\n\t\r\n\t/** The Constant FIRST_NAME_REQUIRED. */\r\n\tpublic static final String FIRST_NAME_REQUIRED = \"First Name is required.\";\r\n\t\r\n\t/** The Constant GROUPED_VALUE_SET_COMPLETE_SAVED. */\r\n\tpublic static final String GROUPED_VALUE_SET_COMPLETE_SAVED = \"Grouped value set successfully saved as complete.\";\r\n\t\r\n\t/** The Constant GROUPED_VALUE_SET_DRAFT_SAVED. */\r\n\tpublic static final String GROUPED_VALUE_SET_DRAFT_SAVED = \"Grouped value set successfully saved as a draft.\";\r\n\t\r\n\t/** The Constant GROUPING_SAVED. */\r\n\tpublic static final String GROUPING_SAVED = \"Grouping has been saved.\";\r\n\t\r\n\t/** The Constant IMPORT_SUCCESS. */\r\n\tpublic static final String IMPORT_SUCCESS = \"Import Successful.\";\r\n\t\r\n\t/** The Constant LAST_NAME_REQUIRED. */\r\n\tpublic static final String LAST_NAME_REQUIRED = \"Last Name is required.\";\r\n\t\r\n\t/** The Constant LOGIN_ID_REQUIRED. */\r\n\tpublic static final String LOGIN_ID_REQUIRED = \"User ID is required.\";\r\n\t\r\n\t/** The Constant EMAIL_ID_INCORRECT_FORMAT. */\r\n\tpublic static final String EMAIL_ID_INCORRECT_FORMAT = \"Email Address has an incorrect format.\";\r\n\t/** The Constant EMAIL_ID_REQUIRED. */\r\n\tpublic static final String EMAIL_ID_REQUIRED = \"Email Address is required.\";\r\n\t/** The Constant LOGIN_USER_REQUIRED. */\r\n\tpublic static final String LOGIN_USER_REQUIRED = \"User Name is required.\";\r\n\t\r\n\t/** The Constant NO_CODE_LISTS. */\r\n\tpublic static final String NO_CODE_LISTS = \"No value sets returned. Please search again.\";\r\n\t\r\n\t/** The Constant NO_MEASURES. */\r\n\tpublic static final String NO_MEASURES = \"No measures returned. Please search again.\";\r\n\t\r\n\t/** The Constant OID_REQUIRED. */\r\n\tpublic static final String OID_REQUIRED = \"OID is required.\";\r\n\t\r\n\t/** The Constant OID_TOO_LONG. */\r\n\tpublic static final String OID_TOO_LONG = \"OID cannot exceed 50 characters.\";\r\n\t\r\n\t/** The Constant ONE_AND. */\r\n\tpublic static final String ONE_AND = \"A clause should start with only one AND.\";\r\n\t\r\n\t/** The Constant ORG_REQUIRED. */\r\n\tpublic static final String ORG_REQUIRED = \"Organization is required.\";\r\n\t\r\n\t/** The Constant PASSWORD_CHANGED. */\r\n\tpublic static final String PASSWORD_CHANGED = \"Your password has been changed.\";\r\n\t\r\n\t/** The Constant PERSONAL_INFO_UPDATED. */\r\n\tpublic static final String PERSONAL_INFO_UPDATED = \"Your personal information has been updated.\";\r\n\t\r\n\t/** The Constant PHONE_REQUIRED. */\r\n\tpublic static final String PHONE_REQUIRED = \"Phone Number is required.\";\r\n\t\r\n\t/** The Constant ROOT_OID_REQUIRED. */\r\n\tpublic static final String ROOT_OID_REQUIRED = \"Root OID is required.\";\r\n\t\r\n\t/** The Constant ROOT_OID_TOO_LONG. */\r\n\tpublic static final String ROOT_OID_TOO_LONG = \"Root OID cannot exceed 50 characters.\";\r\n\t\r\n\t// US - 421\r\n\t/** The Constant s_ERR_MEASURE_SCORE_REQUIRED. */\r\n\tpublic static final String s_ERR_MEASURE_SCORE_REQUIRED = \"Measure Scoring is required.\";\r\n\t\r\n\t// US 171\r\n\t/** The Constant s_ERR_RETRIEVE_OPERATOR. */\r\n\tpublic static final String s_ERR_RETRIEVE_OPERATOR = \"Problem while retrieving operator.\";\r\n\t// US - 502\r\n\t\r\n\t/** The Constant s_ERR_RETRIEVE_SCORING_CHOICES. */\r\n\tpublic static final String s_ERR_RETRIEVE_SCORING_CHOICES = \"Problem while retrieving measure scoring choices.\";\r\n\t\r\n\t// US 602\r\n\t/** The Constant s_ERR_RETRIEVE_STATUS. */\r\n\tpublic static final String s_ERR_RETRIEVE_STATUS = \"Problem while retrieving status.\";\r\n\t\r\n\t// US 62\r\n\t/** The Constant s_ERR_RETRIEVE_UNITS. */\r\n\tpublic static final String s_ERR_RETRIEVE_UNITS = \"Problem while retrieving units.\";\r\n\t\r\n\t/** The Constant SEC_QUESTIONS_UPDATED. */\r\n\tpublic static final String SEC_QUESTIONS_UPDATED = \"Your security questions have been updated.\";\r\n\t\r\n\t/** The Constant SUPP_DATA_SAVED. */\r\n\tpublic static final String SUPP_DATA_SAVED = \"Supplemental Data Elements have been saved.\";\r\n\t\r\n\t/** The Constant RISK_ADJ_SAVED. */\r\n\tpublic static final String RISK_ADJ_SAVED = \"Risk Adjustment Variables have been saved.\";\r\n\t\r\n\t/** The Constant TEMP_EMAIL_SENT. */\r\n\tpublic static final String TEMP_EMAIL_SENT = \"Temporary Password E-mail has been sent.\";\r\n\t\r\n\t/** The Constant VALUE_SET_COMPLETE_SAVED. */\r\n\tpublic static final String VALUE_SET_COMPLETE_SAVED = \"Value set successfully saved as complete.\";\r\n\t\r\n\t/** The Constant VALUE_SET_DRAFT_SAVED. */\r\n\tpublic static final String VALUE_SET_DRAFT_SAVED = \"Value set successfully saved as a draft.\";\r\n\t\r\n\t/** The Constant VSAC_VERSION_OR_EFFECTIVE_DATE_REQUIRED. */\r\n\tpublic static final String VSAC_VERSION_OR_EFFECTIVE_DATE_REQUIRED = \"Value set version or effective date has been selected.\"\r\n\t\t\t+ \" Please enter a date to continue.\";\r\n\t/**\r\n\t * Ratio Measure - Association Required for Numerator/Denominator in case of more than 1 IP.\r\n\t */\r\n\tpublic static final String RATIO_NUM_DENO_ASSOCIATION_REQUIRED = \"For Ratio measures, in the case of more than one Initial Population, \"\r\n\t\t\t+ \" Numerator and Denominator must contain one association.\";\r\n\t\r\n\t/** The vsac expansion profile selection. */\r\n\tpublic final String VSAC_EXPANSION_PROFILE_SELECTION = \"Please Select VSAC Expansion Identifier to Apply to QDM Elements\";\r\n\t\r\n\t/** The vsac expansion profile selection. */\r\n\tpublic final String DEFAULT_EXPANSION_PROFILE_REMOVED = \"Successfully removed the default VSAC Expansion Identifier from the Applied QDM Elements list.\";\r\n\t\r\n\t/** The vsac profile applied to qdm elements. */\r\n\tpublic final String VSAC_PROFILE_APPLIED_TO_QDM_ELEMENTS = \"Successfully Applied VSAC Expansion Identifier to QDM Elements.\";\r\n\t\r\n\t/** The successful oid retreival from vsac. */\r\n\tpublic final String  SUCCESSFUL_OID_RETREIVAL_FROM_VSAC = \"Successfully retrieved value set data from the VSAC.\";\r\n\t\r\n\t/** The warning pasting in applied qdm elements. */\r\n\tpublic final String WARNING_PASTING_IN_APPLIED_QDM_ELEMENTS = \"You are trying to paste QDM elements in this measure.\" +\r\n\t\t\t\"If you want to continue say Yes or No to cancel.\";\r\n\t\r\n\t/** The successfully pasted qdm elements in measure. */\r\n\tpublic final String SUCCESSFULLY_PASTED_QDM_ELEMENTS_IN_MEASURE = \"Selected QDM elements have been pasted successfully.\";\r\n\t\r\n\t/** The copy qdm select atleast one. */\r\n\tpublic final String COPY_QDM_SELECT_ATLEAST_ONE  = \"Please select at least one applied QDM element to copy.\";\r\n\t\r\n\t/** The successful qdm remove msg. */\r\n\tpublic final String SUCCESSFUL_QDM_REMOVE_MSG  = \"Selected QDM element has been removed successfully.\";\r\n\t\r\n\t/** The warning measure package creation generic. */\r\n\tpublic final String WARNING_MEASURE_PACKAGE_CREATION_GENERIC = \"Unable to create measure package. \" +\r\n\t\t\t\"Please validate your measure logic in both Population Workspace and Clause Workspace.\";\r\n\t\r\n\t/** The warning measure package creation risk adjustment. */\r\n\tpublic final String WARNING_MEASURE_PACKAGE_CREATION_RISK_ADJUSTMENT = \"Unable to create measure package. \" +\r\n\t\t\t\"Please validate that Risk Adjustment Vairable clauses do not contain a datetimediff function or a QDM Variable.\";\r\n\t\r\n\t/** The warning measure package creation strata. */\r\n\tpublic final String WARNING_MEASURE_PACKAGE_CREATION_STRATA = \"Unable to create measure package. Stratum must contain at least one clause.\";\r\n\t\r\n\t/** The successfully modified all oids. */\r\n\tpublic final String SUCCESSFULLY_MODIFIED_ALL_OIDS = \"All QDM elements and/or attributes using the same value set OID have been modified \" +\r\n\t\t\t\"to the selected Version and/or Expansion Identifier.\";\r\n\t\r\n\tpublic final String SUCCESSFUL_SAVED_CQL_GEN_INFO  = \"Successfully saved CQL general information.\";\r\n\tpublic final String SUCCESSFUL_SAVED_CQL_DEFINITION  = \"Successfully saved definition into CQL.\";\r\n\tpublic final String SUCCESSFUL_SAVED_CQL_FUNCTIONS  = \"Successfully saved function into CQL.\";\r\n\t\r\n\t\r\n\tpublic final String SUCCESSFUL_SAVED_CQL_PARAMETER  = \"Successfully saved parameter into CQL.\";\r\n\tpublic final String ERROR_SAVE_CQL_DEFINITION  = \"Please enter definition name.\";\r\n\tpublic final String ERROR_SAVE_CQL_PARAMETER  = \"Please enter parameter name.\";\r\n\tpublic final String ERROR_SAVE_CQL_FUNCTION  = \"Please enter function name.\";\r\n\tpublic final String ERROR_DUPLICATE_IDENTIFIER_NAME  = \"Name already exists.\";\r\n\tpublic final String SUCESS_DEFINITION_MODIFY  = \"Successfully modified definition.\";\r\n\tpublic final String SUCESS_PARAMETER_MODIFY  = \"Successfully modified parameter.\";\r\n\tpublic final String SUCESS_FUNCTION_MODIFY  = \"Successfully modified function.\";\r\n\tpublic final String ERROR_PARAMETER_NAME_NO_SPECIAL_CHAR  = \"Invalid Parameter name. \" +\r\n\t\t\t\"Duplicate name or use of restricted character(s).\";\r\n\tpublic final String ERROR_DEFINITION_NAME_NO_SPECIAL_CHAR  = \"Invalid Definition name. \" +\r\n\t\t\t\"Duplicate name or use of restricted character(s).\";\r\n\tpublic final String ERROR_FUNCTION_NAME_NO_SPECIAL_CHAR  = \"Invalid Function and/or Argument name. \" +\r\n\t\t\t\"Duplicate name or use of restricted character(s).\";\r\n\t\r\n\t/**\r\n\t * Gets the measure save server error message.\r\n\t * \r\n\t * @param code\r\n\t *            the code\r\n\t * @return String\r\n\t */\r\n\tpublic static String getMeasureSaveServerErrorMessage(int code) {\r\n\t\tString pre = \"Error saving: \";\r\n\t\tString s = \"SPECIAL CODE \" + code + \".\";\r\n\t\t\r\n\t\tif (code == ConstantMessages.ID_NOT_UNIQUE) {\r\n\t\t\ts = \"ID not unique.\";\r\n\t\t}\r\n\t\tif (code == ConstantMessages.REACHED_MAXIMUM_VERSION) {\r\n\t\t\ts = \"maximum version reached.\";\r\n\t\t}\r\n\t\tif (code == ConstantMessages.REACHED_MAXIMUM_MAJOR_VERSION) {\r\n\t\t\ts = \"maximum major version reached.\";\r\n\t\t}\r\n\t\tif (code == ConstantMessages.REACHED_MAXIMUM_MINOR_VERSION) {\r\n\t\t\ts = \"maximum minor version reached.\";\r\n\t\t}\r\n\t\tif (code == ConstantMessages.INVALID_VALUE_SET_DATE) {\r\n\t\t\ts = \"invalid value set date.\";\r\n\t\t}\r\n\t\treturn pre + s;\r\n\t}\r\n\t\r\n\t/** The abv name required. */\r\n\tprivate final String ABV_NAME_REQUIRED = \"Abbreviated Name is required.\";\r\n\t\r\n\t/** The account locked. */\r\n\tprivate final String ACCOUNT_LOCKED = \"Please contact MAT Support. We are unable to complete your request at this time.\";\r\n\t\r\n\t/** The ACCOUN t_ locke d2.\r\n\tprivate final String ACCOUNT_LOCKED2 = \"Your account has been locked. Please contact Support.\";\r\n\t */\r\n\t/** The account revoked. */\r\n\tprivate final String ACCOUNT_REVOKED = \"Your account has been revoked. Please contact Support.\";\r\n\t\r\n\t/** The account termination. */\r\n\tprivate final String ACCOUNT_TERMINATION = \"Your account has been terminated. Please contact Support for more information.\";\r\n\t\r\n\t/** The all password fields required. */\r\n\tprivate final String ALL_PASSWORD_FIELDS_REQUIRED = \"All password fields are required.\";\r\n\t\r\n\t/** The category required. */\r\n\tprivate final String CATEGORY_REQUIRED = \"Category is required.\";\r\n\t\r\n\t/** The clause work space validation error. */\r\n\tprivate final String MEASURE_LOGIC_IS_INCOMPLETE = \" Measure logic is incomplete.\";\r\n\t\r\n\t/** The lhs rhs required. */\r\n\tprivate final String LHS_RHS_REQUIRED = \" LHS and RHS are required for Timings, Relationships and Satisfies functions.\";\r\n\t\r\n\t/** The atleast one child required. */\r\n\tprivate final String ATLEAST_ONE_CHILD_REQUIRED = \" Functions must contain at least one child node.\";\r\n\t\r\n\t/** The at least three children are required. */\r\n\tprivate final String AT_LEAST_TWO_CHILDREN_REQUIRED = \"Union, Intersection, and Datetimediff must contain at least two or more child nodes.\";\r\n\t\r\n\t/** The at least three children are required. */\r\n\tprivate final String AT_LEAST_THREE_CHILDREN_REQUIRED = \"Satisfies All and Satisfies Any must contain at least three or more child nodes.\";\r\n\t\r\n\t/** The clause work space validation success. */\r\n\tprivate final String CLAUSE_WORK_SPACE_VALIDATION_SUCCESS = \"Measure logic validation successful.\";\r\n\t\r\n\t/** The clause work space validation error. */\r\n\tprivate final String POPULATION_WORK_SPACE_VALIDATION_ERROR = \"Logic must only contain clauses and logical operators.\";\r\n\t\r\n\t/** The measure logic is incorrect. */\r\n\tprivate final String MEASURE_LOGIC_IS_INCORRECT = \" Measure logic is incorrect.\";\r\n\t/** The population work space measure observation validation error. */\r\n\tprivate final String POPULATION_WORK_SPACE_MEASURE_OBSERVATION_VALIDATION_ERROR = \" Logic must only contain clauses.\";\r\n\t\r\n\t/** The invalid character validation error. */\r\n\tprivate final String INVALID_CHARACTER_VALIDATION_ERROR =\" Value set name cannot contain any of the following characters : + * ? : - | ! ; %\";\r\n\t\r\n\t/** The organization success message. */\r\n\tprivate final String ORGANIZATION_SUCCESS_MESSAGE = \"Organization successfully added.\";\r\n\t\r\n\t/** The user success message. */\r\n\tprivate final String USER_SUCCESS_MESSAGE = \"User information saved successfully.\";\r\n\t\r\n\t/** The clause work space validation success. */\r\n\tprivate final String POPULATION_WORK_SPACE_VALIDATION_SUCCESS = \" Measure logic validation successful.\";\r\n\t\r\n\t/** The code list required. */\r\n\tprivate final String CODE_LIST_REQUIRED = \"Value set is required.\";\r\n\t\r\n\t/** The code required. */\r\n\tprivate final String CODE_REQUIRED = \"Code is required.\";\r\n\t\r\n\t/** The clause empty. */\r\n\tprivate final String CLAUSE_EMPTY = \"Clause must contain logic.\";\r\n\t\r\n\t/**\r\n\t * Gets the population work space validation error.\r\n\t *\r\n\t * @return the population work space validation error\r\n\t */\r\n\tpublic String getPOPULATION_WORK_SPACE_VALIDATION_ERROR() {\r\n\t\treturn POPULATION_WORK_SPACE_VALIDATION_ERROR;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the population work space validation success.\r\n\t *\r\n\t * @return the population work space validation success\r\n\t */\r\n\tpublic String getPOPULATION_WORK_SPACE_VALIDATION_SUCCESS() {\r\n\t\treturn POPULATION_WORK_SPACE_VALIDATION_SUCCESS;\r\n\t}\r\n\t\r\n\t/** The code system required. */\r\n\tprivate final String CODE_SYSTEM_REQUIRED = \"Code System is required.\";\r\n\t\r\n\t/** The code version required. */\r\n\tprivate final String CODE_VERSION_REQUIRED = \"Code System Version is required.\";\r\n\t\r\n\t/** The continuous variable may not contain. */\r\n\tprivate final String CONTINUOUS_VARIABLE_MAY_NOT_CONTAIN = \"For a Continuous Variable measure, a grouping may not contain any Numerator, Numerator Exclusions, Denominator, Denominator Exclusions, or Denominator Exceptions.\";\r\n\t\r\n\t/*\r\n\t * CONTINUOUS VARIABLE\r\n\t */\r\n\t/** The continuous variable wrong num. */\r\n\tprivate final String CONTINUOUS_VARIABLE_WRONG_NUM = \"For a Continuous Variable measure, a grouping must contain exactly one of each of the following: \"\r\n\t\t\t+ \"Initial Population, Measure Population,and at least one Measure Observation.\";\r\n\t\r\n\t/** The delete measure warning message. */\r\n\tprivate final String DELETE_MEASURE_WARNING_MESSAGE = \"Deleting a draft or version of a measure will\"\r\n\t\t\t+ \"permanently remove the designated measure draft or \"\r\n\t\t\t+ \"version from  the Measure Authoring Tool. Deleted measures cannot <br> be recovered.\";\r\n\t\r\n\t/** The description required. */\r\n\tprivate final String DESCRIPTION_REQUIRED = \"Description is required.\";\r\n\t\r\n\t/** The descriptor required. */\r\n\tprivate final String DESCRIPTOR_REQUIRED = \"Descriptor is required.\";\r\n\t\r\n\t/** The doesnt follow rules. */\r\n\tprivate final String DOESNT_FOLLOW_RULES = \"The new password you entered does not match the following rules:\";\r\n\t\r\n\t/** The duplicate applied qdm. */\r\n\tprivate final String DUPLICATE_APPLIED_QDM = \"OID is already applied in combination with Datatype, Version, or Expansion Identifier.\";\r\n\t\r\n\t/** The duplicate codes msg. */\r\n\tprivate final String DUPLICATE_CODES_MSG = \"All code(s) were identified as duplicates to code(s) already in the value set and were ignored upon import.\";\r\n\t\r\n\t/** The duplicate error. */\r\n\tprivate final String DUPLICATE_ERROR = \"Import failed. One or more duplicate codes exist in file. Please remove then try again.\";\r\n\t\r\n\t/** The email already exists. */\r\n\tprivate final String EMAIL_ALREADY_EXISTS = \"E-mail Address already exists.\";\r\n\t\r\n\t/** The email mismatch. */\r\n\tprivate final String EMAIL_MISMATCH = \"Email did not match with the User ID.  Please Contact the Administrator.\";\r\n\t\r\n\t/** The email not found msg. */\r\n\tprivate final String EMAIL_NOT_FOUND_MSG = \"Email Address is required.\";\r\n\t\r\n\t/** The empty file error. */\r\n\tprivate final String EMPTY_FILE_ERROR = \"Import failed. File is empty.\";\r\n\t\r\n\t/** The excel file type. */\r\n\tprivate final String EXCEL_FILE_TYPE = \"Please select a file with an Excel file type (.xls or .xlsx)\";\r\n\t\r\n\t/** The file not selected. */\r\n\tprivate final String FILE_NOT_SELECTED = \"Please select a file.\";\r\n\t\r\n\t/** The generic error message. */\r\n\tprivate final String GENERIC_ERROR_MESSAGE = \"The Measure Authoring Tool was unable to process the request. Please try again. If the problem persists please contact the Help Desk.\";\r\n\t\r\n\t/** The grouped name required. */\r\n\tprivate final String GROUPED_NAME_REQUIRED = \"Grouped Value Set Name is required.\";\r\n\t\r\n\t/** The grouping required. */\r\n\tprivate final String GROUPING_REQUIRED = \"A Grouping is required.\";\r\n\t\r\n\t/** The invalid last modified date. */\r\n\tprivate final String INVALID_LAST_MODIFIED_DATE = \"Invalid Last Modified Date.\";\r\n\t\r\n\t/** The invalid template. */\r\n\tprivate final String INVALID_TEMPLATE = \"Import failed. Invalid template.\";\r\n\t\r\n\t/** The last modified date not unique. */\r\n\tprivate final String LAST_MODIFIED_DATE_NOT_UNIQUE = \"The Last Modified date and time entered is already is use for this value set.\";\r\n\t\r\n\t/** The login failed. */\r\n\tprivate final String LOGIN_FAILED = \"Invalid username and/or password and/or One Time Security code. MAT accounts are locked after three invalid login attempts.\";\r\n\t\r\n\t/** The login failed temp password expired. */\r\n\tprivate final String LOGIN_FAILED_TEMP_PASSWORD_EXPIRED = \"Unable to login. Your temporary password has expired. Please contact HelpDesk to renew your password.\";\r\n\t\r\n\t/** The login failed user already logged in. */\r\n\tprivate final String LOGIN_FAILED_USER_ALREADY_LOGGED_IN = \"Unable to login. Another session has been established with this account. Please verify you do not already have an open session.\";\r\n\t\r\n\t/** The measure deletion invalid pwd. */\r\n\tprivate final String MEASURE_DELETION_INVALID_PWD = \"The entered password is invalid. Please try again.\";\r\n\t\r\n\t/** The measure deletion success msg. */\r\n\tprivate final String MEASURE_DELETION_SUCCESS_MSG = \"Measure successfully deleted.\";\r\n\t\r\n\t/** The measure name required. */\r\n\tprivate final String MEASURE_NAME_REQUIRED = \"Measure Name is required.\";\r\n\t\r\n\t/** The measure notes delete success message. */\r\n\tprivate final String MEASURE_NOTES_DELETE_SUCCESS_MESSAGE = \"The measure note deleted successfully.\";\r\n\t\r\n\t/** The measure notes required message. */\r\n\tprivate final String MEASURE_NOTES_REQUIRED_MESSAGE = \"Text required in Title and Description fields.\";\r\n\t\r\n\t/** The measure notes save success message. */\r\n\tprivate final String MEASURE_NOTES_SAVE_SUCCESS_MESSAGE = \"The measure note saved successfully.\";\r\n\t\r\n\t/** The measure package umls not logged in. */\r\n\tprivate final String MEASURE_PACKAGE_UMLS_NOT_LOGGED_IN = \"Measure packaged successfully. \"\r\n\t\t\t+ \"Value set data is not included in the measure package as you are not logged into UMLS.\";\r\n\t\r\n\t/** The measure package failed vsac timeout. */\r\n\tprivate final String MEASURE_PACKAGE_FAILED_VSAC_TIMEOUT = \"Measure Package Failed. VSAC request timed out.Please contact Help Desk.\";\r\n\t\r\n\t/** The Measure Period has invalid \"TO\" and/or \"FROM\" period dates. */\r\n\tpublic final String MEASURE_PERIOD_DATES_ERROR = \"Please enter valid Measurement Period dates.\";\r\n\t\r\n\t/** The measure selection error. */\r\n\tprivate final String MEASURE_SELECTION_ERROR = \"Please select at least one measure\";\r\n\t\r\n\t/** The modify qdm attribute validation. */\r\n\tprivate final String MODIFY_QDM_ATTRIBUTE_VALIDATION = \"A value set with an Attribute category must be used for this data element.\";\r\n\t\r\n\t/** The modify qdm non attribute validation. */\r\n\tprivate final String MODIFY_QDM_NON_ATTRIBUTE_VALIDATION = \"A value set with a non-Attribute category must be used for this data element.\";\r\n\t\r\n\t/** The modify qdm select atleast one. */\r\n\tprivate final String MODIFY_QDM_SELECT_ATLEAST_ONE = \"Please select atleast one applied QDM to modify.\";\r\n\t\r\n\t/** The must contain lower. */\r\n\tprivate final String MUST_CONTAIN_LOWER = \"Must contain a lowercase letter.\";\r\n\t\r\n\t/** The must contain number. */\r\n\tprivate final String MUST_CONTAIN_NUMBER = \"Must contain a number.\";\r\n\t\r\n\t/** The must contain special. */\r\n\tprivate final String MUST_CONTAIN_SPECIAL = \"Must contain a special character.\";\r\n\t\r\n\t/** The must contain upper. */\r\n\tprivate final String MUST_CONTAIN_UPPER = \"Must contain an uppercase letter.\";\r\n\t\r\n\t/** The must not contain dictionay word. */\r\n\tprivate final String MUST_NOT_CONTAIN_DICTIONAY_WORD = \"Passwords must not consist of a single dictionary word with letters, numbers and symbols.\";\r\n\t\r\n\t/** The must not contain login id. */\r\n\tprivate final String MUST_NOT_CONTAIN_LOGIN_ID = \"Passwords must not contain your User ID.\";\r\n\t\r\n\t/** The must not contain runs. */\r\n\tprivate final String MUST_NOT_CONTAIN_RUNS = \"Passwords must not contain three consecutive identical characters.\";\r\n\t\r\n\t/** The name required. */\r\n\tprivate final String NAME_REQUIRED = \"Value Set Name is required.\";\r\n\t\r\n\t/** The not unique questions. */\r\n\tprivate final String NOT_UNIQUE_QUESTIONS = \"You cannot use the same security question more than once.\";\r\n\t\r\n\t/** The oid in use. */\r\n\tprivate final String OID_IN_USE = \"OID is already in use.\";\r\n\t\r\n\t/** The package success. */\r\n\tprivate final String PACKAGE_SUCCESS = \"Measure packaged successfully. Please access the Measure Library to export the measure.\";\r\n\t\r\n\t/** The package success with some OID's not retrived from VSAC. */\r\n\tprivate final String PACKAGE_SUCCESS_VSAC_OID_MISSING = \"Measure packaged successfully. One or more OIDs could not be updated from VSAC.\";\r\n\t\r\n\t/** The password mismatch. */\r\n\tprivate final String PASSWORD_MISMATCH = \"Your new password and confirm password do not match.\";\r\n\t\r\n\t/** The is not previous password. */\r\n\tprivate final String IS_NOT_CURRENT_PASSWORD=\"New password cannot be the same as the previous 6 passwords.\";\r\n\t\r\n\t/** The is previous password cannot be reused. */\r\n\tprivate final String IS_NOT_PREVIOUS_PASSWORD=\"Previous 6 passwords cannot be reused. Try again.\";\r\n\t\r\n\t/** The change old password. */\r\n\tprivate final String CHANGE_OLD_PASSWORD=\"Password needs to be at least one day old before you can change it. Try again.\";\r\n\t\r\n\t/** The password mismatch error message. */\r\n\tprivate final String PASSWORD_MISMATCH_ERROR_MESSAGE = \"Incorrect password supplied.Try again\";\r\n\t\r\n\t/** The password required. */\r\n\tprivate final String PASSWORD_REQUIRED = \"Password is required.\";\r\n\t\r\n\t/** The password required error message. */\r\n\tprivate final String PASSWORD_REQUIRED_ERROR_MESSAGE = \"Existing password is required to confirm changes.\";\r\n\t\r\n\t/** The password wrong length. */\r\n\tprivate final String PASSWORD_WRONG_LENGTH = \"Must be between 8 and 16 characters long.\";\r\n\t\r\n\t/** Security-code/OneTimePassword required. */\r\n\tprivate final String SECURITYCODE_REQUIRED = \"Security Code is required.\";\r\n\t\r\n\t/** The PHON e_10_ digit. */\r\n\tprivate final String PHONE_10_DIGIT = \"Phone Number is required to be 10 digits.\";\r\n\t\r\n\t/** The proportion may not contain. */\r\n\tprivate final String PROPORTION_MAY_NOT_CONTAIN = \"For a Proportion measure,a grouping may not contain a Numerator Exclusion,Measure Population,or Measure Observation.\";\r\n\t\r\n\t/** The proportion too few. */\r\n\tprivate final String PROPORTION_TOO_FEW = \"For a Proportion measure, a grouping may not contain less than one Numerator.\";\r\n\t\r\n\t/** The proportion too many. */\r\n\tprivate final String PROPORTION_TOO_MANY = \"For a Proportion measure, a grouping may not contain more than one of each of the following: \"\r\n\t\t\t+ \"Denominator Exclusions and Denominator Exceptions.\";\r\n\t\r\n\t/*\r\n\t * PROPORTION\r\n\t */\r\n\t/** The proportion wrong num. */\r\n\tprivate final String PROPORTION_WRONG_NUM = \"For a Proportion measure, a grouping must contain exactly one of each of the following: \"\r\n\t\t\t+ \"Initial Population, Denominator and Numerator.\";\r\n\t\r\n\t/** The ratio may not contain. */\r\n\tprivate final String RATIO_MAY_NOT_CONTAIN = \"For a Ratio measure,a grouping may not contain a Denominator Exception,or Measure Population.\";\r\n\t\r\n\t/** The ratio too many. */\r\n\tprivate final String RATIO_TOO_MANY = \"For a Ratio measure, a grouping may not contain more than one of each of the following: Denominator Exclusion and Numerator Exclusion.\";\r\n\t\r\n\t/** The ratio too many populations. */\r\n\tprivate final String RATIO_TOO_MANY_POPULATIONS = \"For a Ratio measure, a grouping may not contain more than two of the following: Initial Populations.\";\r\n\t/*\r\n\t * RATIO\r\n\t */\r\n\t/** The ratio wrong num. */\r\n\tprivate final String RATIO_WRONG_NUM = \"For a Ratio measure, a grouping must contain exactly one of each of the following: \"\r\n\t\t\t+ \"Denominator and Numerator.\";\r\n\t\r\n\t/** The ratio too few populations. */\r\n\tprivate final String RATIO_TOO_FEW_POPULATIONS = \"For a Ratio measure, a grouping must contain at least one Initial Population.\";\r\n\t\r\n\t/** The invalid logic population work space. */\r\n\tprivate final String INVALID_LOGIC_POPULATION_WORK_SPACE = \"Measure Logic is incomplete.Please validate your measure logic in both Population Workspace and Clause Workspace.\";\r\n\t\r\n\t/** The invalidlogic clause work space. */\r\n\tprivate final String INVALIDLOGIC_CLAUSE_WORK_SPACE = \"Clause logic is incomplete.Please validate your clause logic.\";\r\n\t/**\r\n\t * Gets the ratio too few populations.\r\n\t *\r\n\t * @return the rATIO_TOO_FEW_POPULATIONS\r\n\t */\r\n\tpublic String getRATIO_TOO_FEW_POPULATIONS() {\r\n\t\treturn RATIO_TOO_FEW_POPULATIONS;\r\n\t}\r\n\t\r\n\t/** The cohort wrong num. */\r\n\tprivate final String COHORT_WRONG_NUM = \"For a Cohort measure, a grouping must contain exactly one Initial Population.\";\r\n\t\r\n\t/** The stratification validation for grouping. */\r\n\tprivate final String STRATIFICATION_VALIDATION_FOR_GROUPING = \" Measure Grouping cannot contain more than one Stratification.\";\r\n\t\r\n\t\r\n\t/** The rationale required. */\r\n\tprivate final String RATIONALE_REQUIRED = \"Rationale is required.\";\r\n\t\r\n\t/** The relationalop two child message. */\r\n\tprivate final String RELATIONALOP_TWO_CHILD_MESSAGE = \"Package Failed. Measure logic is incomplete.\"\r\n\t\t\t+\" LHS and RHS are required for Timings and Relationships.\";\r\n\t\r\n\t/** The save error msg. */\r\n\tprivate final String SAVE_ERROR_MSG = \"You have unsaved changes that will be discarded if you continue. \"\r\n\t\t\t+ \"Do you want to continue without saving?\";\r\n\t\r\n\t// TODO is this such a smart policy?\r\n\t// This makes denial of service attacks on accounts too easy.\r\n\t// Perhaps make them answer a security question?\r\n\t/** The seccond attempt failed. */\r\n\t//private final String SECCOND_ATTEMPT_FAILED = \"Failed 2nd attempt. Next attempt will lock the account.\";\r\n\t\r\n\t/** The security not answered. */\r\n\tprivate final String SECURITY_NOT_ANSWERED = \"Your security questions have not been answered.  You cannot continue. Please contact the Helpdesk\";\r\n\t\r\n\t/** The security q mismatch. */\r\n\tprivate final String SECURITY_Q_MISMATCH = \"The answer for the security question did not match.\";\r\n\t\r\n\t/** The security question header. */\r\n\tprivate final String SECURITY_QUESTION_HEADER = \"The answer(s) provided to the security question(s) do not match the following rules:\";\r\n\t\r\n\t/** The server call null. */\r\n\tprivate final String SERVER_CALL_NULL = \"Server call for login returned null.\";\r\n\t\r\n\t/** The server side validation. */\r\n\tprivate final String SERVER_SIDE_VALIDATION = \"Server Side Validation\";\r\n\t\r\n\t/** The steward required. */\r\n\tprivate final String STEWARD_REQUIRED = \"Steward is required.\";\r\n\t\r\n\t/** The successful modify applied qdm. */\r\n\tprivate final String SUCCESSFUL_MODIFY_APPLIED_QDM = \"Selected QDM element has been modified successfully.\";\r\n\t\r\n\t/** The system error. */\r\n\tprivate final String SYSTEM_ERROR = \"Import failed due to system error. Please try again.\";\r\n\t\r\n\t/** The transfer checkbox error. */\r\n\tprivate final String TRANSFER_CHECKBOX_ERROR = \"Please select at least one Value Set to transfer ownership.\";\r\n\t\r\n\t/** The transfer checkbox error measure. */\r\n\tprivate final String TRANSFER_CHECKBOX_ERROR_MEASURE = \"Please select at least one Measure to transfer ownership.\";\r\n\t\r\n\t/** The transfer ownership success. */\r\n\tprivate final String TRANSFER_OWNERSHIP_SUCCESS = \"Ownership successfully transferred to \";\r\n\t\r\n\t/** The uml login failed. */\r\n\tprivate final String UML_LOGIN_FAILED = \"Login failed. Please sign in again.\";\r\n\t\r\n\t/** The uml login unavailable. */\r\n\tprivate final String UML_LOGIN_UNAVAILABLE = \"Unable to verify your UMLS credentials. Please contact the MAT Help Desk or try again.\";\r\n\t\r\n\t/** The umls not loggedin. */\r\n\tprivate final String UMLS_NOT_LOGGEDIN = \"You are not logged in to UMLS. Please access the UMLS Account tab to continue.\";\r\n\t\r\n\t/** The umls oid required. */\r\n\tprivate final String UMLS_OID_REQUIRED = \"Please enter an OID.\";\r\n\t\r\n\t/** The umls successfull login. */\r\n\tprivate final String UMLS_SUCCESSFULL_LOGIN = \"Successfully logged into UMLS\";\r\n\t\r\n\t/** The unable to process. */\r\n\tprivate final String UNABLE_TO_PROCESS = \"System error.  Unable to process information.\";\r\n\t\r\n\t/** The unknown fail. */\r\n\tprivate final String UNKNOWN_FAIL = \"Unknown failure reason\";\r\n\t\r\n\t/** The user not found msg. */\r\n\tprivate final String USER_NOT_FOUND_MSG = \"User ID is required.\";\r\n\t\r\n\t/** The user required error msg. */\r\n\tprivate final String USER_REQUIRED_ERROR_MSG = \"Please select a user to transfer ownership.\";\r\n\t\r\n\t/** The validation msg data type vsac. */\r\n\tprivate final String VALIDATION_MSG_DATA_TYPE_VSAC = \"Please select datatype from drop down list.\";\r\n\t\r\n\t/** The validation msg element without vsac. */\r\n\tprivate final String VALIDATION_MSG_ELEMENT_WITHOUT_VSAC = \"Please enter name and select a datatype associated with it.\";\r\n\t\r\n\t/** The value set date invalid. */\r\n\tprivate final String VALUE_SET_DATE_INVALID = \"Value Set Package Date is not a valid date.\";\r\n\t\r\n\t/** The value set date required. */\r\n\tprivate final String VALUE_SET_DATE_REQUIRED = \"Value Set Package Date is required.\";\r\n\t\r\n\t/** The vsac retrieve failed. */\r\n\tprivate final String VSAC_RETRIEVE_FAILED = \"Unable to retrieve from VSAC. Please check the data and try again.\";\r\n\t\r\n\t/** The vsac update successfull. */\r\n\tprivate final String VSAC_UPDATE_SUCCESSFULL = \"Successfully updated applied QDM list with VSAC data.\";\r\n\t\r\n\t\r\n\t/** The comment added successfully. */\r\n\tprivate final String COMMENT_ADDED_SUCCESSFULLY =\"Comment Changes Added.\";\r\n\t\r\n\t/** The comparison diloag box error display. */\r\n\tprivate final String COMPARISON_DILOAG_BOX_ERROR_DISPLAY=\"Please enter Quantity field.\";\r\n\t\r\n\t/** The comparison diloag box error display. */\r\n\tprivate final String COMPARISON_DILOAG_BOX_UNIT_ERROR_DISPLAY=\"Please select Unit.\";\r\n\t\r\n\t/** The component measures added successfully. */\r\n\tprivate final String COMPONENT_MEASURES_ADDED_SUCCESSFULLY=\"Component Measures updated successfully. Changes must be saved on the previous page.\";\r\n\t\r\n\t/** The removed functions error message. */\r\n\tprivate final String POPULATION_WORKSPACE_DATETIMEDIFF_ERROR_MESSAGE = \"Highlighted clause contains Datetimediff function.\";\r\n\t\r\n\t/** The clause work space invalid nested clause. */\r\n\tprivate final String CLAUSE_WORK_SPACE_INVALID_NESTED_CLAUSE =\"Invalid clause(s) used in logic.\";\r\n\t\r\n\t/** The clause work space invalid nested clause. */\r\n\tprivate final String CLAUSE_WORK_SPACE_INVALID_ATTRIBUTE_IN_SAT_ALL_ANY =\"Satisfies All and Satisfies Any LHS QDM element may not contain attributes.\";\r\n\t\r\n\t/** The clause work space invalid nested clause. */\r\n\tprivate final String CLAUSE_WORK_SPACE_INVALID_NESTED_DEPTH_CLAUSE = \"Clause Exceeds Maximum Number of Nested Logic Levels (10).\";\r\n\t\r\n\t/** The clause work space invalid nested clause. */\r\n\tprivate final String CLAUSE_WORK_SPACE_INVALID_LOGICAL_OPERATOR = \"Any logical operator under a top-level logical operator must contain at least one logical operator or clause. \" +\r\n\t\t\t\"Any terminal logical operator under a top-level logical operator must contain at least one clause.\";\r\n\t\r\n\t/** The measure observation validation for functions. */\r\n\tprivate final String MEASURE_OBSERVATION_VALIDATION_FOR_FUNCTIONS = \"Contents of the clause logic are not permitted for Measure Observations.\";\r\n\t\r\n\tprivate final String ONLY_ONE_CHILD_REQUIRED = \" Functions must contain only one child node.\";\r\n\t\r\n\tpublic String getONLY_ONE_CHILD_REQUIRED() {\r\n\t\treturn ONLY_ONE_CHILD_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure observation validation for functions.\r\n\t *\r\n\t * @return the measure observation validation for functions\r\n\t */\r\n\tpublic String getMEASURE_OBSERVATION_VALIDATION_FOR_FUNCTIONS() {\r\n\t\treturn MEASURE_OBSERVATION_VALIDATION_FOR_FUNCTIONS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the component measures added successfully.\r\n\t *\r\n\t * @return the component measures added successfully\r\n\t */\r\n\tpublic String getCOMPONENT_MEASURES_ADDED_SUCCESSFULLY() {\r\n\t\treturn COMPONENT_MEASURES_ADDED_SUCCESSFULLY;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the abv name required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getAbvNameRequiredMessage() {\r\n\t\treturn ABV_NAME_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the account locked message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getAccountLockedMessage() {\r\n\t\treturn ACCOUNT_LOCKED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the account revoked message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getAccountRevokedMessage() {\r\n\t\treturn ACCOUNT_REVOKED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the account termination.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getAccountTermination() {\r\n\t\treturn ACCOUNT_TERMINATION;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the alert loading message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getAlertLoadingMessage() {\r\n\t\treturn ALERT_LOADING_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the markup not allowed message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getNoMarkupAllowedMessage() {\r\n\t\treturn NO_MARKUP_ALLOWED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the all password fields required.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getAllPasswordFieldsRequired() {\r\n\t\treturn ALL_PASSWORD_FIELDS_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the category required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getCategoryRequiredMessage() {\r\n\t\treturn CATEGORY_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the changes saved message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getChangesSavedMessage() {\r\n\t\treturn CHANGES_SAVED;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Gets the clause work space validation success.\r\n\t * \r\n\t * @return String the cLAUSE_WORK_SPACE_VALIDATION_SUCCESS\r\n\t */\r\n\tpublic String getCLAUSE_WORK_SPACE_VALIDATION_SUCCESS() {\r\n\t\treturn CLAUSE_WORK_SPACE_VALIDATION_SUCCESS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code already exists for message.\r\n\t * \r\n\t * @param str\r\n\t *            the str\r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeAlreadyExistsForMessage(String str) {\r\n\t\treturn \"Code already exists for \" + str + \" value set.\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code list added group message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeListAddedGroupMessage() {\r\n\t\treturn CODE_LIST_ADDED_GROUP;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code list added message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeListAddedMessage() {\r\n\t\treturn CODE_LIST_ADDED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code list already exists for grouped message.\r\n\t * \r\n\t * @param str\r\n\t *            the str\r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeListAlreadyExistsForGroupedMessage(String str) {\r\n\t\treturn \"Value Set already exists for the \" + str\r\n\t\t\t\t+ \" grouped value set.\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code list already exists message.\r\n\t * \r\n\t * @param s\r\n\t *            the s\r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeListAlreadyExistsMessage(String s) {\r\n\t\treturn \"Value Set \" + s + \" already exists.\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code list required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeListRequiredMessage() {\r\n\t\treturn CODE_LIST_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeRequiredMessage() {\r\n\t\treturn CODE_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code system required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeSystemRequiredMessage() {\r\n\t\treturn CODE_SYSTEM_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the code version required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getCodeVersionRequiredMessage() {\r\n\t\treturn CODE_VERSION_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the continuous variable may not contain message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getContinuousVariableMayNotContainMessage() {\r\n\t\treturn CONTINUOUS_VARIABLE_MAY_NOT_CONTAIN;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the continuous variable wrong num message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getContinuousVariableWrongNumMessage() {\r\n\t\treturn CONTINUOUS_VARIABLE_WRONG_NUM;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the delete measure warning message.\r\n\t * \r\n\t * @return String the dELETE_MEASURE_WARNING_MESSAGE\r\n\t */\r\n\tpublic String getDELETE_MEASURE_WARNING_MESSAGE() {\r\n\t\treturn DELETE_MEASURE_WARNING_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the description required meassage.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getDescriptionRequiredMeassage() {\r\n\t\treturn DESCRIPTION_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the descriptor required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getDescriptorRequiredMessage() {\r\n\t\treturn DESCRIPTOR_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the doesnt follow rules message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getDoesntFollowRulesMessage() {\r\n\t\treturn DOESNT_FOLLOW_RULES;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the duplicate applied qdm msg.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getDuplicateAppliedQDMMsg() {\r\n\t\treturn DUPLICATE_APPLIED_QDM;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the duplicate codes message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getDuplicateCodesMessage() {\r\n\t\treturn DUPLICATE_CODES_MSG;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the duplicate error message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getDuplicateErrorMessage() {\r\n\t\treturn DUPLICATE_ERROR;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the email already exists message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getEmailAlreadyExistsMessage() {\r\n\t\treturn EMAIL_ALREADY_EXISTS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the email mismatch message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getEmailMismatchMessage() {\r\n\t\treturn EMAIL_MISMATCH;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the email not found message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getEmailNotFoundMessage() {\r\n\t\treturn EMAIL_NOT_FOUND_MSG;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the empty file error.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getEmptyFileError() {\r\n\t\treturn EMPTY_FILE_ERROR;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the excel file type message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getExcelFileTypeMessage() {\r\n\t\treturn EXCEL_FILE_TYPE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the file not selected message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getFileNotSelectedMessage() {\r\n\t\treturn FILE_NOT_SELECTED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the first min message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getFirstMinMessage() {\r\n\t\treturn FIRST_NAME_MIN;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the first name required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getFirstNameRequiredMessage() {\r\n\t\treturn FIRST_NAME_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the generic error message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getGenericErrorMessage() {\r\n\t\treturn GENERIC_ERROR_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the grouped code list exists message.\r\n\t * \r\n\t * @param str\r\n\t *            the str\r\n\t * @return String\r\n\t */\r\n\tpublic String getGroupedCodeListExistsMessage(String str) {\r\n\t\treturn \"Grouped Value Set \" + str + \" already exists.\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the grouped name required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getGroupedNameRequiredMessage() {\r\n\t\treturn GROUPED_NAME_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the grouped value set changed saved message.\r\n\t * \r\n\t * @param mode\r\n\t *            the mode\r\n\t * @return String\r\n\t */\r\n\tpublic String getGroupedValueSetChangedSavedMessage(int mode) {\r\n\t\tif (mode == DRAFT) {\r\n\t\t\treturn GROUPED_VALUE_SET_DRAFT_SAVED;\r\n\t\t} else if (mode == COMPLETE) {\r\n\t\t\treturn GROUPED_VALUE_SET_COMPLETE_SAVED;\r\n\t\t} else {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the grouping required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getGroupingRequiredMessage() {\r\n\t\treturn GROUPING_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the grouping saved message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getGroupingSavedMessage() {\r\n\t\treturn GROUPING_SAVED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the identity message.\r\n\t * \r\n\t * @param msg\r\n\t *            the msg\r\n\t * @return String\r\n\t */\r\n\tpublic String getIdentityMessage(String msg) {\r\n\t\treturn msg;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the import success message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getImportSuccessMessage() {\r\n\t\treturn IMPORT_SUCCESS;\r\n\t}\r\n\t\r\n\t// public static final String x = \"\";\r\n\t// ASK STAN\r\n\t/**\r\n\t * Gets the import success message.\r\n\t * \r\n\t * @param codes\r\n\t *            the codes\r\n\t * @return String\r\n\t */\r\n\tpublic String getImportSuccessMessage(int codes) {\r\n\t\tString msg = \"\";\r\n\t\tif (codes == 1) {\r\n\t\t\tmsg = \"Import Successful.  1 code was identified as duplicate to code(s) already in the value set and was ignored upon import.\";\r\n\t\t} else {\r\n\t\t\tmsg = \"Import Successful.  \"\r\n\t\t\t\t\t+ codes\r\n\t\t\t\t\t+ \" codes were identified as duplicates to code(s) already in the value set and were ignored upon import.\";\r\n\t\t}\r\n\t\treturn msg;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the invalid last modified date message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getInvalidLastModifiedDateMessage() {\r\n\t\treturn INVALID_LAST_MODIFIED_DATE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the invalid template message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getInvalidTemplateMessage() {\r\n\t\treturn INVALID_TEMPLATE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the last modified date not unique message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getLastModifiedDateNotUniqueMessage() {\r\n\t\treturn LAST_MODIFIED_DATE_NOT_UNIQUE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the last name required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getLastNameRequiredMessage() {\r\n\t\treturn LAST_NAME_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the login failed already logged in message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getLoginFailedAlreadyLoggedInMessage() {\r\n\t\treturn LOGIN_FAILED_USER_ALREADY_LOGGED_IN;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the login failed message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getLoginFailedMessage() {\r\n\t\treturn LOGIN_FAILED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the login failed temp password expired message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getLoginFailedTempPasswordExpiredMessage() {\r\n\t\treturn LOGIN_FAILED_TEMP_PASSWORD_EXPIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the login id required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getLoginIDRequiredMessage() {\r\n\t\treturn LOGIN_ID_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the email id incorrect format message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getEmailIdFormatIncorrectMessage() {\r\n\t\treturn EMAIL_ID_INCORRECT_FORMAT;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the login user required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getLoginUserRequiredMessage() {\r\n\t\treturn LOGIN_USER_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure notes delete success message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMEASURE_NOTES_DELETE_SUCCESS_MESSAGE() {\r\n\t\treturn MEASURE_NOTES_DELETE_SUCCESS_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure notes required message.\r\n\t * \r\n\t * @return String String\r\n\t */\r\n\tpublic String getMEASURE_NOTES_REQUIRED_MESSAGE() {\r\n\t\treturn MEASURE_NOTES_REQUIRED_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure notes save success message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMEASURE_NOTES_SAVE_SUCCESS_MESSAGE() {\r\n\t\treturn MEASURE_NOTES_SAVE_SUCCESS_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure package umls not logged in.\r\n\t * \r\n\t * @return String the mEASURE_PACKAGE_UMLS_NOT_LOGGED_IN\r\n\t */\r\n\tpublic String getMEASURE_PACKAGE_UMLS_NOT_LOGGED_IN() {\r\n\t\treturn MEASURE_PACKAGE_UMLS_NOT_LOGGED_IN;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure package failed due to vsac timeout message.\r\n\t * \r\n\t * @return String the MEASURE_PACKAGE_FAILED_VSAC_TIMEOUT\r\n\t */\r\n\tpublic String getMEASURE_PACKAGE_VSAC_TIMEOUT() {\r\n\t\treturn MEASURE_PACKAGE_FAILED_VSAC_TIMEOUT;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure package failed due to invalid period dates message.\r\n\t * \r\n\t * @return String the MEASURE_PERIOD_DATES_ERROR\r\n\t */\r\n\tpublic String getMEASURE_PERIOD_DATES_ERROR() {\r\n\t\treturn MEASURE_PERIOD_DATES_ERROR;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Gets the measure deletion invalid pwd.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMeasureDeletionInvalidPwd() {\r\n\t\treturn MEASURE_DELETION_INVALID_PWD;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure deletion success mgs.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMeasureDeletionSuccessMgs() {\r\n\t\treturn MEASURE_DELETION_SUCCESS_MSG;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure name required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMeasureNameRequiredMessage() {\r\n\t\treturn MEASURE_NAME_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure selection error.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMeasureSelectionError() {\r\n\t\treturn MEASURE_SELECTION_ERROR;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the modify qdm attribute validation.\r\n\t * \r\n\t * @return String the mODIFY_QDM_ATTRIBUTE_VALIDATION\r\n\t */\r\n\tpublic String getMODIFY_QDM_ATTRIBUTE_VALIDATION() {\r\n\t\treturn MODIFY_QDM_ATTRIBUTE_VALIDATION;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the modify qdm non attribute validation.\r\n\t * \r\n\t * @return String the mODIFY_QDM_NON_ATTRIBUTE_VALIDATION\r\n\t */\r\n\tpublic String getMODIFY_QDM_NON_ATTRIBUTE_VALIDATION() {\r\n\t\treturn MODIFY_QDM_NON_ATTRIBUTE_VALIDATION;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the modify qdm select atleast one.\r\n\t * \r\n\t * @return String the mODIFY_QDM_SELECT_ATLEAST_ONE\r\n\t */\r\n\tpublic String getMODIFY_QDM_SELECT_ATLEAST_ONE() {\r\n\t\treturn MODIFY_QDM_SELECT_ATLEAST_ONE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the must contain lower message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMustContainLowerMessage() {\r\n\t\treturn MUST_CONTAIN_LOWER;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the must contain number message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMustContainNumberMessage() {\r\n\t\treturn MUST_CONTAIN_NUMBER;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the must contain special message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMustContainSpecialMessage() {\r\n\t\treturn MUST_CONTAIN_SPECIAL;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the must contain upper message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMustContainUpperMessage() {\r\n\t\treturn MUST_CONTAIN_UPPER;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the must not contain dictionary word message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMustNotContainDictionaryWordMessage() {\r\n\t\treturn MUST_NOT_CONTAIN_DICTIONAY_WORD;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the must not contain login id message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMustNotContainLoginIdMessage() {\r\n\t\treturn MUST_NOT_CONTAIN_LOGIN_ID;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the must not contain runs message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getMustNotContainRunsMessage() {\r\n\t\treturn MUST_NOT_CONTAIN_RUNS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the name required message.\r\n\t * \r\n\t * @return the name required message\r\n\t */\r\n\tpublic String getNameRequiredMessage() {\r\n\t\treturn NAME_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the no code lists message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getNoCodeListsMessage() {\r\n\t\treturn NO_CODE_LISTS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the no measures message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getNoMeasuresMessage() {\r\n\t\treturn NO_MEASURES;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the not unique questions.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getNotUniqueQuestions() {\r\n\t\treturn NOT_UNIQUE_QUESTIONS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the oID in use message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getOIDInUseMessage() {\r\n\t\treturn OID_IN_USE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the oID required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getOIDRequiredMessage() {\r\n\t\treturn OID_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the oID too long message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getOIDTooLongMessage() {\r\n\t\treturn OID_TOO_LONG;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the one and message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getOneAndMessage() {\r\n\t\treturn ONE_AND;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the org required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getOrgRequiredMessage() {\r\n\t\treturn ORG_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the package success message.\r\n\t * \r\n\t * @return String {@link String}\r\n\t */\r\n\tpublic final String getPackageSuccessMessage() {\r\n\t\treturn PACKAGE_SUCCESS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the package success amber message.\r\n\t *\r\n\t * @return the package success amber message\r\n\t */\r\n\tpublic final String getPackageSuccessAmberMessage() {\r\n\t\treturn PACKAGE_SUCCESS_VSAC_OID_MISSING;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the password mismatch error message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getPasswordMismatchErrorMessage() {\r\n\t\treturn PASSWORD_MISMATCH_ERROR_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the password mismatch message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getPasswordMismatchMessage() {\r\n\t\treturn PASSWORD_MISMATCH;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the password required error message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getPasswordRequiredErrorMessage() {\r\n\t\treturn PASSWORD_REQUIRED_ERROR_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the password required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getPasswordRequiredMessage() {\r\n\t\treturn PASSWORD_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the security code required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getSecurityCodeRequiredMessage() {\r\n\t\treturn SECURITYCODE_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the password saved message.\r\n\t * \r\n\t * @return the password saved message\r\n\t */\r\n\tpublic String getPasswordSavedMessage() {\r\n\t\treturn PASSWORD_CHANGED;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Gets the password wrong length message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getPasswordWrongLengthMessage() {\r\n\t\treturn PASSWORD_WRONG_LENGTH;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the personal info updated message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getPersonalInfoUpdatedMessage() {\r\n\t\treturn PERSONAL_INFO_UPDATED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the phone required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getPhoneRequiredMessage() {\r\n\t\treturn PHONE_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the phone ten digit message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getPhoneTenDigitMessage() {\r\n\t\treturn PHONE_10_DIGIT;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the proportion may not contain message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getProportionMayNotContainMessage() {\r\n\t\treturn PROPORTION_MAY_NOT_CONTAIN;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the proportion too few message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getProportionTooFewMessage() {\r\n\t\treturn PROPORTION_TOO_FEW;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the proportion too many message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getProportionTooManyMessage() {\r\n\t\treturn PROPORTION_TOO_MANY;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the proportion wrong num message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getProportionWrongNumMessage() {\r\n\t\treturn PROPORTION_WRONG_NUM;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the qDM ocurrence success message.\r\n\t * \r\n\t * @param codeListName\r\n\t *            the code list name\r\n\t * @param dataType\r\n\t *            the data type\r\n\t * @param occurrenceMessage\r\n\t *            the occurrence message\r\n\t * @return String\r\n\t */\r\n\tpublic String getQDMOcurrenceSuccessMessage(String codeListName,\r\n\t\t\tString dataType, String occurrenceMessage) {\r\n\t\treturn \" The QDM Element \" + occurrenceMessage + \" of \" + codeListName\r\n\t\t\t\t+ \": \" + dataType + \" has been added successfully.\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the qDM success message.\r\n\t * \r\n\t * @param codeListName\r\n\t *            the code list name\r\n\t * @param dataType\r\n\t *            the data type\r\n\t * @return String\r\n\t */\r\n\tpublic String getQDMSuccessMessage(String codeListName, String dataType) {\r\n\t\treturn \" The QDM Element \" + codeListName + \": \" + dataType\r\n\t\t\t\t+ \" has been added successfully.\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the ratio may not contain message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getRatioMayNotContainMessage() {\r\n\t\treturn RATIO_MAY_NOT_CONTAIN;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the rationale required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getRationaleRequiredMessage() {\r\n\t\treturn RATIONALE_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the ratio too many message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getRatioTooManyMessage() {\r\n\t\treturn RATIO_TOO_MANY;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the ratio wrong num message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getRatioWrongNumMessage() {\r\n\t\treturn RATIO_WRONG_NUM;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the relational op two child message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getRelationalOpTwoChildMessage() {\r\n\t\treturn RELATIONALOP_TWO_CHILD_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the root oid required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getRootOIDRequiredMessage() {\r\n\t\treturn ROOT_OID_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the root oid too long message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getRootOIDTooLongMessage() {\r\n\t\treturn ROOT_OID_TOO_LONG;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the save error msg.\r\n\t * \r\n\t * @return String the sAVE_ERROR_MSG\r\n\t */\r\n\tpublic String getSaveErrorMsg() {\r\n\t\treturn SAVE_ERROR_MSG;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the second attempt failed message.\r\n\t *\r\n\t * @param index the index\r\n\t * @return String\r\n\t */\r\n\t/*\tpublic String getSecondAttemptFailedMessage() {\r\n\t\treturn SECCOND_ATTEMPT_FAILED;\r\n\t}\r\n\t */\r\n\t\r\n\t/**\r\n\t * Gets the security answer too short message.\r\n\t * \r\n\t * @param index\r\n\t *            the index\r\n\t * @return String\r\n\t */\r\n\tpublic String getSecurityAnswerTooShortMessage(int index) {\r\n\t\treturn \"Security Answer \" + index + \" is too short.\";\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the security not answered message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getSecurityNotAnsweredMessage() {\r\n\t\treturn SECURITY_NOT_ANSWERED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the security q mismatch message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getSecurityQMismatchMessage() {\r\n\t\treturn SECURITY_Q_MISMATCH;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the security question heeader message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getSecurityQuestionHeeaderMessage() {\r\n\t\treturn SECURITY_QUESTION_HEADER;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the security questions updated message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getSecurityQuestionsUpdatedMessage() {\r\n\t\treturn SEC_QUESTIONS_UPDATED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the server call null message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\t/**\r\n\t * @return String\r\n\t */\r\n\tpublic String getServerCallNullMessage() {\r\n\t\treturn SERVER_CALL_NULL;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the server side validation message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getServerSideValidationMessage() {\r\n\t\treturn SERVER_SIDE_VALIDATION;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the steward required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getStewardRequiredMessage() {\r\n\t\treturn STEWARD_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the successful modify qdm msg.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getSuccessfulModifyQDMMsg() {\r\n\t\treturn SUCCESSFUL_MODIFY_APPLIED_QDM;\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the supp data saved message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getSuppDataSavedMessage() {\r\n\t\treturn SUPP_DATA_SAVED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the risk adj saved message.\r\n\t *\r\n\t * @return the risk adj saved message\r\n\t */\r\n\tpublic String getRiskAdjSavedMessage() {\r\n\t\treturn RISK_ADJ_SAVED;\r\n\t}\r\n\t/**\r\n\t * Gets the system error message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getSystemErrorMessage() {\r\n\t\treturn SYSTEM_ERROR;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the temp email sent message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getTempEmailSentMessage() {\r\n\t\treturn TEMP_EMAIL_SENT;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the transfer check box error.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getTransferCheckBoxError() {\r\n\t\treturn TRANSFER_CHECKBOX_ERROR;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the transfer check box error measure.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getTransferCheckBoxErrorMeasure() {\r\n\t\treturn TRANSFER_CHECKBOX_ERROR_MEASURE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the transfer ownership success.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getTransferOwnershipSuccess() {\r\n\t\treturn TRANSFER_OWNERSHIP_SUCCESS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the uml login failed.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUML_LOGIN_FAILED() {\r\n\t\treturn UML_LOGIN_FAILED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the uml login unavailable.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUML_LOGIN_UNAVAILABLE() {\r\n\t\treturn UML_LOGIN_UNAVAILABLE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the umls not loggedin.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUMLS_NOT_LOGGEDIN() {\r\n\t\treturn UMLS_NOT_LOGGEDIN;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the umls oid required.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUMLS_OID_REQUIRED() {\r\n\t\treturn UMLS_OID_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the umls successfull login.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUMLS_SUCCESSFULL_LOGIN() {\r\n\t\treturn UMLS_SUCCESSFULL_LOGIN;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the unable to process message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUnableToProcessMessage() {\r\n\t\treturn UNABLE_TO_PROCESS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the unknown code message.\r\n\t * \r\n\t * @param code\r\n\t *            the code\r\n\t * @return String\r\n\t */\r\n\tpublic String getUnknownCodeMessage(int code) {\r\n\t\treturn \"Unknown Code \" + code;\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the unknown error message.\r\n\t * \r\n\t * @param code\r\n\t *            the code\r\n\t * @return String\r\n\t */\r\n\tpublic String getUnknownErrorMessage(int code) {\r\n\t\treturn \"Unknown Code \" + code;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the unknown fail message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUnknownFailMessage() {\r\n\t\treturn UNKNOWN_FAIL;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the user not found message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUserNotFoundMessage() {\r\n\t\treturn USER_NOT_FOUND_MSG;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the user required error message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getUserRequiredErrorMessage() {\r\n\t\treturn USER_REQUIRED_ERROR_MSG;\r\n\t\t\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the validation msg data type vsac.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getVALIDATION_MSG_DATA_TYPE_VSAC() {\r\n\t\treturn VALIDATION_MSG_DATA_TYPE_VSAC;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the validation msg element without vsac.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getVALIDATION_MSG_ELEMENT_WITHOUT_VSAC() {\r\n\t\treturn VALIDATION_MSG_ELEMENT_WITHOUT_VSAC;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the value set changed saved message.\r\n\t * \r\n\t * @param mode\r\n\t *            the mode\r\n\t * @return String\r\n\t */\r\n\tpublic String getValueSetChangedSavedMessage(int mode) {\r\n\t\tif (mode == DRAFT) {\r\n\t\t\treturn VALUE_SET_DRAFT_SAVED;\r\n\t\t} else if (mode == COMPLETE) {\r\n\t\t\treturn VALUE_SET_COMPLETE_SAVED;\r\n\t\t} else {\r\n\t\t\treturn \"\";\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the value set date invalid message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getValueSetDateInvalidMessage() {\r\n\t\treturn VALUE_SET_DATE_INVALID;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the value set date required message.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getValueSetDateRequiredMessage() {\r\n\t\treturn VALUE_SET_DATE_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the vsac retrieve failed.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getVSAC_RETRIEVE_FAILED() {\r\n\t\treturn VSAC_RETRIEVE_FAILED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the vsac update successfull.\r\n\t * \r\n\t * @return String\r\n\t */\r\n\tpublic String getVSAC_UPDATE_SUCCESSFULL() {\r\n\t\treturn VSAC_UPDATE_SUCCESSFULL;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the vsac version or effective date required.\r\n\t *\r\n\t * @return the vsac version or effective date required\r\n\t */\r\n\tpublic String getVSAC_VERSION_OR_EFFECTIVE_DATE_REQUIRED() {\r\n\t\treturn VSAC_VERSION_OR_EFFECTIVE_DATE_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the checks if is not previous password.\r\n\t *\r\n\t * @return the checks if is not previous password\r\n\t */\r\n\tpublic String getIS_NOT_PREVIOUS_PASSWORD() {\r\n\t\treturn IS_NOT_PREVIOUS_PASSWORD;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the change old password.\r\n\t *\r\n\t * @return the change old password\r\n\t */\r\n\tpublic String getCHANGE_OLD_PASSWORD() {\r\n\t\treturn CHANGE_OLD_PASSWORD;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the checks if is not current password.\r\n\t *\r\n\t * @return the checks if is not current password\r\n\t */\r\n\tpublic String getIS_NOT_CURRENT_PASSWORD() {\r\n\t\treturn IS_NOT_CURRENT_PASSWORD;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the comment added successfully.\r\n\t *\r\n\t * @return the cOMMENT_ADDED_SUCCESSFULLY\r\n\t */\r\n\tpublic String getCOMMENT_ADDED_SUCCESSFULLY() {\r\n\t\treturn COMMENT_ADDED_SUCCESSFULLY;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the cohort wrong num.\r\n\t *\r\n\t * @return the cOHORT_WRONG_NUM\r\n\t */\r\n\tpublic String getCOHORT_WRONG_NUM() {\r\n\t\treturn COHORT_WRONG_NUM;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the comparison diloag box error display.\r\n\t *\r\n\t * @return the comparison diloag box error display\r\n\t */\r\n\tpublic String getComparisonDiloagBoxErrorDisplay() {\r\n\t\treturn COMPARISON_DILOAG_BOX_ERROR_DISPLAY;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the ratio too many populations.\r\n\t *\r\n\t * @return the rATIO_TOO_MANY_POPULATIONS\r\n\t */\r\n\tpublic String getRATIO_TOO_MANY_POPULATIONS() {\r\n\t\treturn RATIO_TOO_MANY_POPULATIONS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the ratio num deno association required.\r\n\t *\r\n\t * @return the ratioNumDenoAssociationRequired\r\n\t */\r\n\tpublic String getRatioNumDenoAssociationRequired() {\r\n\t\treturn RATIO_NUM_DENO_ASSOCIATION_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure logic is incomplete.\r\n\t *\r\n\t * @return the mEASURE_LOGIC_IS_INCOMPLETE\r\n\t */\r\n\tpublic String getMEASURE_LOGIC_IS_INCOMPLETE() {\r\n\t\treturn MEASURE_LOGIC_IS_INCOMPLETE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the lhs rhs required.\r\n\t *\r\n\t * @return the lHS_RHS_REQUIRED\r\n\t */\r\n\tpublic String getLHS_RHS_REQUIRED() {\r\n\t\treturn LHS_RHS_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the atleaste one child required.\r\n\t *\r\n\t * @return the aTLEASTE_ONE_CHILD_REQUIRED\r\n\t */\r\n\tpublic String getATLEAST_ONE_CHILD_REQUIRED() {\r\n\t\treturn ATLEAST_ONE_CHILD_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the at least two children required.\r\n\t *\r\n\t * @return the at LEAST_TWO_CHILDREN_REQUIRED\r\n\t */\r\n\tpublic String getAT_LEAST_TWO_CHILDREN_REQUIRED() {\r\n\t\treturn AT_LEAST_TWO_CHILDREN_REQUIRED;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Gets the at least three children required.\r\n\t *\r\n\t * @return the at LEAST_THREE_CHILDREN_REQUIRED\r\n\t */\r\n\tpublic String getAT_LEAST_THREE_CHILDREN_REQUIRED() {\r\n\t\treturn AT_LEAST_THREE_CHILDREN_REQUIRED;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Gets the population work space measure observation validation error.\r\n\t *\r\n\t * @return the pOPULATION_WORK_SPACE_MEASURE_OBSERVATION_VALIDATION_ERROR\r\n\t */\r\n\tpublic String getPOPULATION_WORK_SPACE_MEASURE_OBSERVATION_VALIDATION_ERROR() {\r\n\t\treturn POPULATION_WORK_SPACE_MEASURE_OBSERVATION_VALIDATION_ERROR;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Gets the invalid character validation error.\r\n\t *\r\n\t * @return the invalid character validation error\r\n\t */\r\n\tpublic String getINVALID_CHARACTER_VALIDATION_ERROR() {\r\n\t\treturn INVALID_CHARACTER_VALIDATION_ERROR;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure developer added successfully.\r\n\t *\r\n\t * @return the measureDeveloperAddedSuccessfully\r\n\t */\r\n\tpublic static String getMeasureDeveloperAddedSuccessfully() {\r\n\t\treturn MEASURE_DEVELOPER_ADDED_SUCCESSFULLY;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the measure logic is incorrect.\r\n\t *\r\n\t * @return the mEASURE_LOGIC_IS_INCORRECT\r\n\t */\r\n\tpublic String getMEASURE_LOGIC_IS_INCORRECT() {\r\n\t\treturn MEASURE_LOGIC_IS_INCORRECT;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the stratification validation for grouping.\r\n\t *\r\n\t * @return the stratification validation for grouping\r\n\t */\r\n\tpublic String getSTRATIFICATION_VALIDATION_FOR_GROUPING() {\r\n\t\treturn STRATIFICATION_VALIDATION_FOR_GROUPING;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the organization success message.\r\n\t *\r\n\t * @return the oRGANIZATION_SUCCESS_MESSAGE\r\n\t */\r\n\tpublic String getORGANIZATION_SUCCESS_MESSAGE() {\r\n\t\treturn ORGANIZATION_SUCCESS_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the user success message.\r\n\t *\r\n\t * @return the uSER_SUCCESS_MESSAGE\r\n\t */\r\n\tpublic String getUSER_SUCCESS_MESSAGE() {\r\n\t\treturn USER_SUCCESS_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the email id required.\r\n\t *\r\n\t * @return the emailIdRequired\r\n\t */\r\n\tpublic String getEmailIdRequired() {\r\n\t\treturn EMAIL_ID_REQUIRED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the population workspace datetimediff error message.\r\n\t *\r\n\t * @return the population workspace datetimediff error message\r\n\t */\r\n\tpublic String getPOPULATION_WORKSPACE_DATETIMEDIFF_ERROR_MESSAGE() {\r\n\t\treturn POPULATION_WORKSPACE_DATETIMEDIFF_ERROR_MESSAGE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the invalid logic population work space.\r\n\t *\r\n\t * @return the iNVALID_LOGIC_POPULATION_WORK_SPACE\r\n\t */\r\n\tpublic String getINVALID_LOGIC_POPULATION_WORK_SPACE() {\r\n\t\treturn INVALID_LOGIC_POPULATION_WORK_SPACE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the invalidlogic clause work space.\r\n\t *\r\n\t * @return the iNVALIDLOGIC_CLAUSE_WORK_SPACE\r\n\t */\r\n\tpublic String getINVALIDLOGIC_CLAUSE_WORK_SPACE() {\r\n\t\treturn INVALIDLOGIC_CLAUSE_WORK_SPACE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the clause work space invalid nested clause.\r\n\t *\r\n\t * @return the cLAUSE_WORK_SPACE_INVALID_NESTED_CLAUSE\r\n\t */\r\n\tpublic String getCLAUSE_WORK_SPACE_INVALID_NESTED_CLAUSE() {\r\n\t\treturn CLAUSE_WORK_SPACE_INVALID_NESTED_CLAUSE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the clause work space invalid nested depth clause.\r\n\t *\r\n\t * @return the cLAUSE_WORK_SPACE_INVALID_NESTED_DEPTH_CLAUSE\r\n\t */\r\n\tpublic String getCLAUSE_WORK_SPACE_INVALID_NESTED_DEPTH_CLAUSE() {\r\n\t\treturn CLAUSE_WORK_SPACE_INVALID_NESTED_DEPTH_CLAUSE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the welcome message.\r\n\t *\r\n\t * @return the welcome message\r\n\t */\r\n\tpublic static String getWelcomeMessage() {\r\n\t\treturn WELCOME_MESSAGE;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Gets the vsac expansion profile selection.\r\n\t *\r\n\t * @return the vsac expansion profile selection\r\n\t */\r\n\tpublic String getVsacExpansionIdentifierSelection() {\r\n\t\treturn VSAC_EXPANSION_PROFILE_SELECTION;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the vsac profile applied to qdm elements.\r\n\t *\r\n\t *\r\n\t * @return the vsac profile applied to qdm elements\r\n\t */\r\n\tpublic String getVsacProfileAppliedToQdmElements() {\r\n\t\treturn VSAC_PROFILE_APPLIED_TO_QDM_ELEMENTS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the vsac profile applied to qdm elements.\r\n\t *\r\n\t *\r\n\t * @return the default expansion message\r\n\t */\r\n\tpublic String getDefaultExpansionIdRemovedMessage() {\r\n\t\treturn DEFAULT_EXPANSION_PROFILE_REMOVED;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the vsac retrieval success.\r\n\t *\r\n\t * @return the vsac retrieval success\r\n\t */\r\n\tpublic String getVSAC_RETRIEVAL_SUCCESS() {\r\n\t\treturn SUCCESSFUL_OID_RETREIVAL_FROM_VSAC;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the warning pasting in applied qdm elements.\r\n\t *\r\n\t * @return the warning pasting in applied qdm elements\r\n\t */\r\n\tpublic String getWARNING_PASTING_IN_APPLIED_QDM_ELEMENTS() {\r\n\t\treturn WARNING_PASTING_IN_APPLIED_QDM_ELEMENTS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the successfully pasted qdm elements in measure.\r\n\t *\r\n\t * @return the successfully pasted qdm elements in measure\r\n\t */\r\n\tpublic String getSUCCESSFULLY_PASTED_QDM_ELEMENTS_IN_MEASURE() {\r\n\t\treturn SUCCESSFULLY_PASTED_QDM_ELEMENTS_IN_MEASURE;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the copy qdm select atleast one.\r\n\t *\r\n\t * @return the copy qdm select atleast one\r\n\t */\r\n\tpublic String getCOPY_QDM_SELECT_ATLEAST_ONE() {\r\n\t\treturn COPY_QDM_SELECT_ATLEAST_ONE;\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t * Gets the successful qdm remove msg.\r\n\t *\r\n\t * @return the successful qdm remove msg\r\n\t */\r\n\tpublic String getSUCCESSFUL_QDM_REMOVE_MSG() {\r\n\t\treturn SUCCESSFUL_QDM_REMOVE_MSG;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the warning measure package creation generic.\r\n\t *\r\n\t * @return the warning measure package creation generic\r\n\t */\r\n\tpublic String getWARNING_MEASURE_PACKAGE_CREATION_GENERIC() {\r\n\t\treturn WARNING_MEASURE_PACKAGE_CREATION_GENERIC;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the warning measure package creation risk adjustment.\r\n\t *\r\n\t * @return the warning measure package creation risk adjustment\r\n\t */\r\n\tpublic String getWARNING_MEASURE_PACKAGE_CREATION_RISK_ADJUSTMENT(){\r\n\t\treturn WARNING_MEASURE_PACKAGE_CREATION_RISK_ADJUSTMENT;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the warning measure package creation strata.\r\n\t *\r\n\t * @return the warning measure package creation strata\r\n\t */\r\n\tpublic String getWARNING_MEASURE_PACKAGE_CREATION_STRATA() {\r\n\t\treturn WARNING_MEASURE_PACKAGE_CREATION_STRATA;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the clause work space invalid attribute in sat all any.\r\n\t *\r\n\t * @return the clause work space invalid attribute in sat all any\r\n\t */\r\n\tpublic String getCLAUSE_WORK_SPACE_INVALID_ATTRIBUTE_IN_SAT_ALL_ANY() {\r\n\t\treturn CLAUSE_WORK_SPACE_INVALID_ATTRIBUTE_IN_SAT_ALL_ANY;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the clause work space invalid logical operator.\r\n\t *\r\n\t * @return the clause work space invalid logical operator\r\n\t */\r\n\tpublic String getCLAUSE_WORK_SPACE_INVALID_LOGICAL_OPERATOR() {\r\n\t\treturn CLAUSE_WORK_SPACE_INVALID_LOGICAL_OPERATOR;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the clause empty.\r\n\t *\r\n\t * @return the cLAUSE_EMPTY\r\n\t */\r\n\tpublic String getCLAUSE_EMPTY() {\r\n\t\treturn CLAUSE_EMPTY;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the successfully modified all oids.\r\n\t *\r\n\t * @return the successfully modified all oids\r\n\t */\r\n\tpublic String getSUCCESSFULLY_MODIFIED_ALL_OIDS() {\r\n\t\treturn SUCCESSFULLY_MODIFIED_ALL_OIDS;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Gets the comparison diloag box unit error display.\r\n\t *\r\n\t * @return the comparison diloag box unit error display\r\n\t */\r\n\tpublic String getCOMPARISON_DILOAG_BOX_UNIT_ERROR_DISPLAY() {\r\n\t\treturn COMPARISON_DILOAG_BOX_UNIT_ERROR_DISPLAY;\r\n\t}\r\n\t\r\n\tpublic String getSUCCESSFUL_SAVED_CQL_GEN_INFO() {\r\n\t\treturn SUCCESSFUL_SAVED_CQL_GEN_INFO;\r\n\t}\r\n\t\r\n\tpublic String getSUCCESSFUL_SAVED_CQL_DEFINITION() {\r\n\t\treturn SUCCESSFUL_SAVED_CQL_DEFINITION;\r\n\t}\r\n\t\r\n\tpublic String getSUCCESSFUL_SAVED_CQL_PARAMETER() {\r\n\t\treturn SUCCESSFUL_SAVED_CQL_PARAMETER;\r\n\t}\r\n\t\r\n\tpublic String getERROR_SAVE_CQL_DEFINITION() {\r\n\t\treturn ERROR_SAVE_CQL_DEFINITION;\r\n\t}\r\n\t\r\n\tpublic String getERROR_SAVE_CQL_PARAMETER() {\r\n\t\treturn ERROR_SAVE_CQL_PARAMETER;\r\n\t}\r\n\t\r\n\tpublic String getERROR_DUPLICATE_IDENTIFIER_NAME() {\r\n\t\treturn ERROR_DUPLICATE_IDENTIFIER_NAME;\r\n\t}\r\n\t\r\n\tpublic String getSUCESS_DEFINITION_MODIFY() {\r\n\t\treturn SUCESS_DEFINITION_MODIFY;\r\n\t}\r\n\t\r\n\tpublic String getSUCESS_PARAMETER_MODIFY() {\r\n\t\treturn SUCESS_PARAMETER_MODIFY;\r\n\t}\r\n\tpublic String getSUCCESSFUL_SAVED_CQL_FUNCTIONS() {\r\n\t\treturn SUCCESSFUL_SAVED_CQL_FUNCTIONS;\r\n\t}\r\n\t\r\n\tpublic String getERROR_SAVE_CQL_FUNCTION() {\r\n\t\treturn ERROR_SAVE_CQL_FUNCTION;\r\n\t}\r\n\t\r\n\tpublic String getSUCESS_FUNCTION_MODIFY() {\r\n\t\treturn SUCESS_FUNCTION_MODIFY;\r\n\t}\r\n\t\r\n\tpublic String getERROR_PARAMETER_NAME_NO_SPECIAL_CHAR() {\r\n\t\treturn ERROR_PARAMETER_NAME_NO_SPECIAL_CHAR;\r\n\t}\r\n\t\r\n\tpublic String getERROR_DEFINITION_NAME_NO_SPECIAL_CHAR() {\r\n\t\treturn ERROR_DEFINITION_NAME_NO_SPECIAL_CHAR;\r\n\t}\r\n\t\r\n\tpublic String getERROR_FUNCTION_NAME_NO_SPECIAL_CHAR() {\r\n\t\treturn ERROR_FUNCTION_NAME_NO_SPECIAL_CHAR;\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"MeasureAuthoringTool/MeasureAuthoringTool_LatestSprint","sample_ref":"refs/heads/master","sample_path":"mat/src/mat/client/shared/MessageDelegate.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ef46a3a628cb3cfe35b9f699b34b736e2d8ac95f","size":"847","content":"package org.metaborg.spoofax.core.stratego.primitives;\n\nimport org.metaborg.core.language.ILanguageIdentifierService;\nimport org.metaborg.core.resource.IResourceService;\nimport org.metaborg.core.source.ISourceTextService;\nimport org.metaborg.spoofax.core.syntax.SpoofaxSyntaxService;\nimport org.metaborg.spoofax.core.unit.ISpoofaxUnitService;\n\nimport com.google.inject.Inject;\n\npublic class ParseFilePtPrimitive extends ParseFilePrimitive {\n    @Inject public ParseFilePtPrimitive(IResourceService resourceService,\n        ILanguageIdentifierService languageIdentifierService, ISpoofaxUnitService unitService,\n        ISourceTextService sourceTextService, SpoofaxSyntaxService syntaxService) {\n        super(\"STRSGLR_parse_string_pt\", resourceService, languageIdentifierService, unitService, sourceTextService,\n            syntaxService);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"metaborg/spoofax","sample_ref":"refs/heads/master","sample_path":"org.metaborg.spoofax.core/src/main/java/org/metaborg/spoofax/core/stratego/primitives/ParseFilePtPrimitive.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2d6120d3f5c8e08de55a5aeed716569250503ffe","size":"2654","content":"package com.levelup.java.exercises.beginner;\n\nimport java.util.Scanner;\n\n/**\n * This program demonstrates a solution to the carpet calculator program.\n * \n * @author Justin Musgrove\n * @see <a href=\n *      'http://www.leveluplunch.com/java/exercises/carpet-calculator-program/'>Carpet\n *      calculator program</a>\n * \n */\npublic class CarpetCalculatorProgram {\n\n\t/**\n\t * This class should hold information about the room's dimensions such as\n\t * the height and width.\n\t * \n\t */\n\tpublic class RoomDimension {\n\n\t\tprivate double length;\n\t\tprivate double width;\n\n\t\tpublic RoomDimension(double length, double width) {\n\t\t\tsuper();\n\t\t\tthis.length = length;\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tpublic double getLength() {\n\t\t\treturn length;\n\t\t}\n\n\t\tpublic double getWidth() {\n\t\t\treturn width;\n\t\t}\n\n\t\tpublic double getArea() {\n\t\t\treturn length * width;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"RoomDimension [length=\" + length + \", width=\" + width + \"]\";\n\t\t}\n\n\t}\n\n\t/**\n\t * RoomCarpet class should hold information for calculating the cost of\n\t * carpet.\n\t * \n\t */\n\tpublic class RoomCarpet {\n\n\t\tprivate RoomDimension roomDimensions;\n\t\tprivate double costOfCarpet;\n\n\t\tpublic RoomCarpet(RoomDimension roomDimensions, double costOfCarpet) {\n\t\t\tsuper();\n\t\t\tthis.roomDimensions = roomDimensions;\n\t\t\tthis.costOfCarpet = costOfCarpet;\n\t\t}\n\n\t\tpublic double getTotalCost() {\n\t\t\treturn costOfCarpet * roomDimensions.getArea();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"RoomCarpet [roomDimensions=\" + roomDimensions\n\t\t\t\t\t+ \", costOfCarpet=\" + costOfCarpet + \", \" + \"total cost=\"\n\t\t\t\t\t+ getTotalCost() + \"]\";\n\t\t}\n\n\t}\n\n\tpublic static void main(String[] args) {\n\n\t\tfinal double CARPET_PRICE_PER_SQFT = 8.0;\n\n\t\t// Create a Scanner object for keyboard input.\n\t\tScanner keyboard = new Scanner(System.in);\n\n\t\t// Display intro.\n\t\tSystem.out.println(\"This program will display the \"\n\t\t\t\t+ \"carpet cost of a room.\" + \"\\nPlease enter the room's \"\n\t\t\t\t+ \"dimension in feet.\");\n\n\t\t// Get the length of the room.\n\t\tSystem.out.print(\"Enter the length of room: \");\n\t\tdouble length = keyboard.nextDouble();\n\n\t\t// Get the width of the room.\n\t\tSystem.out.print(\"Enter the width of room: \");\n\t\tdouble width = keyboard.nextDouble();\n\n\t\t// close keyboard\n\t\tkeyboard.close();\n\n\t\t// Create RoomDimension and RoomCarpet objects.\n\t\tCarpetCalculatorProgram calculatorProgram = new CarpetCalculatorProgram();\n\t\tRoomDimension dimensions = calculatorProgram.new RoomDimension(length,\n\t\t\t\twidth);\n\t\tRoomCarpet roomCarpet = calculatorProgram.new RoomCarpet(dimensions,\n\t\t\t\tCARPET_PRICE_PER_SQFT);\n\n\t\t// Print the object calling the toString\n\t\tSystem.out.println(roomCarpet);\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"leveluplunch/levelup-java-exercises","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/levelup/java/exercises/beginner/CarpetCalculatorProgram.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8385ed3d92bd8df4fad2b473d444b4f28ecb365a","size":"274","content":"package com.github.hongchae.coverflow.sample;\n\npublic class SampleItem {\n    public int imageResourceId;\n    public String title;\n\n    public SampleItem(int imageResourceId, String title) {\n        this.imageResourceId = imageResourceId;\n        this.title = title;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"Hongchae/CoverFlowPager","sample_ref":"refs/heads/master","sample_path":"src/com/github/hongchae/coverflow/sample/SampleItem.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"94d96d2ebc8262df431e45c5f301dd0274043e1e","size":"1273","content":"package eu.webtoolkit.jwt.examples.planner.captcha;\n\nimport eu.webtoolkit.jwt.BrushStyle;\nimport eu.webtoolkit.jwt.WBrush;\nimport eu.webtoolkit.jwt.WPainter;\nimport eu.webtoolkit.jwt.WPainterPath;\nimport eu.webtoolkit.jwt.WPointF;\nimport eu.webtoolkit.jwt.WString;\n\npublic class Circle extends Shape {\n\tpublic Circle(WPointF center, ShapeColor color, double size) {\n\t\tsuper(center, color, size);\n\t}\n\n\t@Override\n\tpublic boolean contains(WPointF point) {\n\t\treturn distanceTo(getCenter().getX(), getCenter().getY(), point.getX(), point.getY()) <= getSize();\n\t}\n\t\n\tprivate double distanceTo(double x1, double y1, double x2, double y2) {\n\t\treturn Math.sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));   \n\t}\n\t\n\t@Override\n\tpublic WString getShapeName() {\n\t\treturn WString.tr(\"captcha.circle\");\n\t}\n\n\t@Override\n\tpublic void paint(WPainter painter) {\n\t\t//create a brush to define the circle's color and style\n\t\tWBrush b = new WBrush();\n\t\tb.setStyle(BrushStyle.SolidPattern);\n\t\tb.setColor(getColor());\n\t\t\n\t\t//create a painterpath, and add an ellipse to it\n\t\tWPainterPath pp = new WPainterPath();\n\t\tpp.addEllipse(getCenter().getX() - getSize(), getCenter().getY() - getSize(), getSize() * 2, getSize() * 2);\n\t\t \n\t\t//draw and fill the painterpath on the painter\n\t\tpainter.fillPath(pp, b);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"kdeforche/jwt","sample_ref":"refs/heads/master","sample_path":"examples/planner/src/eu/webtoolkit/jwt/examples/planner/captcha/Circle.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"34d5ae39c150d48fea033eebc6c295bae43d7a4b","size":"6945","content":"/*\n * Copyright 2014 Eduardo Barrenechea\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage ca.barrenechea.widget.recyclerview.decoration;\n\nimport android.graphics.Canvas;\nimport android.graphics.Rect;\nimport android.support.v4.view.ViewCompat;\nimport android.support.v7.widget.RecyclerView;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * A sticky header decoration for android's RecyclerView.\n */\npublic class StickyHeaderDecoration extends RecyclerView.ItemDecoration {\n\n    private Map<Long, RecyclerView.ViewHolder> mHeaderCache;\n\n    private StickyHeaderAdapter mAdapter;\n\n    private boolean mRenderInline;\n\n    /**\n     * @param adapter\n     *         the sticky header adapter to use\n     */\n    public StickyHeaderDecoration(StickyHeaderAdapter adapter) {\n        this(adapter, false);\n    }\n\n    /**\n     * @param adapter\n     *         the sticky header adapter to use\n     */\n    public StickyHeaderDecoration(StickyHeaderAdapter adapter, boolean renderInline) {\n        mAdapter = adapter;\n        mHeaderCache = new HashMap<>();\n        mRenderInline = renderInline;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {\n        int position = parent.getChildAdapterPosition(view);\n\n        int headerHeight = 0;\n        if (position != RecyclerView.NO_POSITION && hasHeader(position)) {\n            View header = getHeader(parent, position).itemView;\n            headerHeight = getHeaderHeightForLayout(header);\n        }\n\n        outRect.set(0, headerHeight, 0, 0);\n    }\n\n    /**\n     * Clears the header view cache. Headers will be recreated and\n     * rebound on list scroll after this method has been called.\n     */\n    public void clearHeaderCache() {\n        mHeaderCache.clear();\n    }\n\n    public View findHeaderViewUnder(float x, float y) {\n        for (RecyclerView.ViewHolder holder : mHeaderCache.values()) {\n            final View child = holder.itemView;\n            final float translationX = ViewCompat.getTranslationX(child);\n            final float translationY = ViewCompat.getTranslationY(child);\n\n            if (x >= child.getLeft() + translationX &&\n                    x <= child.getRight() + translationX &&\n                    y >= child.getTop() + translationY &&\n                    y <= child.getBottom() + translationY) {\n                return child;\n            }\n        }\n\n        return null;\n    }\n\n    private boolean hasHeader(int position) {\n        if (position == 0) {\n            return true;\n        }\n\n        int previous = position - 1;\n        return mAdapter.getHeaderId(position) != mAdapter.getHeaderId(previous);\n    }\n\n    private RecyclerView.ViewHolder getHeader(RecyclerView parent, int position) {\n        final long key = mAdapter.getHeaderId(position);\n\n        if (mHeaderCache.containsKey(key)) {\n            return mHeaderCache.get(key);\n        } else {\n            final RecyclerView.ViewHolder holder = mAdapter.onCreateHeaderViewHolder(parent);\n            final View header = holder.itemView;\n\n            //noinspection unchecked\n            mAdapter.onBindHeaderViewHolder(holder, position);\n\n            int widthSpec = View.MeasureSpec.makeMeasureSpec(parent.getWidth(), View.MeasureSpec.EXACTLY);\n            int heightSpec = View.MeasureSpec.makeMeasureSpec(parent.getHeight(), View.MeasureSpec.UNSPECIFIED);\n\n            int childWidth = ViewGroup.getChildMeasureSpec(widthSpec,\n                    parent.getPaddingLeft() + parent.getPaddingRight(), header.getLayoutParams().width);\n            int childHeight = ViewGroup.getChildMeasureSpec(heightSpec,\n                    parent.getPaddingTop() + parent.getPaddingBottom(), header.getLayoutParams().height);\n\n            header.measure(childWidth, childHeight);\n            header.layout(0, 0, header.getMeasuredWidth(), header.getMeasuredHeight());\n\n            mHeaderCache.put(key, holder);\n\n            return holder;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void onDrawOver(Canvas c, RecyclerView parent, RecyclerView.State state) {\n        final int count = parent.getChildCount();\n\n        for (int layoutPos = 0; layoutPos < count; layoutPos++) {\n            final View child = parent.getChildAt(layoutPos);\n\n            final int adapterPos = parent.getChildAdapterPosition(child);\n\n            if (adapterPos != RecyclerView.NO_POSITION && (layoutPos == 0 || hasHeader(adapterPos))) {\n                View header = getHeader(parent, adapterPos).itemView;\n                c.save();\n                final int left = child.getLeft();\n                final int top = getHeaderTop(parent, child, header, adapterPos, layoutPos);\n                c.translate(left, top);\n                header.setTranslationX(left);\n                header.setTranslationY(top);\n                header.draw(c);\n                c.restore();\n            }\n        }\n    }\n\n    private int getHeaderTop(RecyclerView parent, View child, View header, int adapterPos, int layoutPos) {\n        int headerHeight = getHeaderHeightForLayout(header);\n        int top = ((int) child.getY()) - headerHeight;\n        if (layoutPos == 0) {\n            final int count = parent.getChildCount();\n            final long currentId = mAdapter.getHeaderId(adapterPos);\n            // find next view with header and compute the offscreen push if needed\n            for (int i = 1; i < count; i++) {\n                int adapterPosHere = parent.getChildAdapterPosition(parent.getChildAt(i));\n                if (adapterPosHere != RecyclerView.NO_POSITION) {\n                    long nextId = mAdapter.getHeaderId(adapterPosHere);\n                    if (nextId != currentId) {\n                        final View next = parent.getChildAt(i);\n                        final int offset = ((int) next.getY()) - (headerHeight + getHeader(parent, adapterPosHere).itemView.getHeight());\n                        if (offset < 0) {\n                            return offset;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            top = Math.max(0, top);\n        }\n\n        return top;\n    }\n\n    private int getHeaderHeightForLayout(View header) {\n        return mRenderInline ? 0 : header.getHeight();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"edubarr/header-decor","sample_ref":"refs/heads/master","sample_path":"lib/src/main/java/ca/barrenechea/widget/recyclerview/decoration/StickyHeaderDecoration.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f70783fa2e4a0e79cb9d091bfbe971b0f83e277d","size":"149","content":"package org.projectlombok.security.totpexample.servlets;\n\nimport javax.servlet.http.HttpServlet;\n\npublic class FileServlet extends HttpServlet {\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"rzwitserloot/totp-example","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/projectlombok/security/totpexample/servlets/FileServlet.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"483874fe9a5ca995f716818e65250f2025f37de0","size":"3758","content":"/*\n * Copyright 2016 Crown Copyright\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage gaffer.accumulostore.operation.impl;\n\nimport gaffer.data.element.Element;\nimport gaffer.data.elementdefinition.view.View;\nimport gaffer.operation.AbstractGetOperation;\nimport gaffer.operation.GetOperation;\nimport gaffer.operation.data.EntitySeed;\n\n/**\n * Retrieves {@link gaffer.data.element.Edge}s where both ends are in a given\n * set and/or {@link gaffer.data.element.Entity}s where the vertex is in the\n * set.\n **/\npublic class GetElementsWithinSet<ELEMENT_TYPE extends Element> extends AbstractGetOperation<EntitySeed, ELEMENT_TYPE> {\n\n    public GetElementsWithinSet() {\n    }\n\n    public GetElementsWithinSet(final Iterable<EntitySeed> seeds) {\n        super(seeds);\n    }\n\n    public GetElementsWithinSet(final View view) {\n        super(view);\n    }\n\n    public GetElementsWithinSet(final View view, final Iterable<EntitySeed> seeds) {\n        super(view, seeds);\n    }\n\n    public GetElementsWithinSet(final GetOperation<EntitySeed, ?> operation) {\n        super(operation);\n    }\n\n    @Override\n    public IncludeIncomingOutgoingType getIncludeIncomingOutGoing() {\n        return IncludeIncomingOutgoingType.OUTGOING;\n    }\n\n    @Override\n    public void setIncludeIncomingOutGoing(final IncludeIncomingOutgoingType includeIncomingOutGoing) {\n        throw new IllegalArgumentException(\n                getClass().getSimpleName() + \" you cannot change the IncludeIncomingOutgoingType on this operation\");\n    }\n\n    public static class Builder<ELEMENT_TYPE extends Element>\n            extends AbstractGetOperation.Builder<GetElementsWithinSet<ELEMENT_TYPE>, EntitySeed, ELEMENT_TYPE> {\n\n        public Builder() {\n            super(new GetElementsWithinSet());\n        }\n\n        @Override\n        public Builder<ELEMENT_TYPE> summarise(final boolean summarise) {\n            return (Builder<ELEMENT_TYPE>) super.summarise(summarise);\n        }\n\n        @Override\n        public Builder<ELEMENT_TYPE> populateProperties(final boolean populateProperties) {\n            return (Builder<ELEMENT_TYPE>) super.populateProperties(populateProperties);\n        }\n\n        @Override\n        public Builder<ELEMENT_TYPE> view(final View view) {\n            return (Builder<ELEMENT_TYPE>) super.view(view);\n        }\n\n        @Override\n        public Builder<ELEMENT_TYPE> option(final String name, final String value) {\n            return (Builder<ELEMENT_TYPE>) super.option(name, value);\n        }\n\n        @Override\n        public Builder<ELEMENT_TYPE> seeds(final Iterable<EntitySeed> newSeeds) {\n            return (Builder<ELEMENT_TYPE>) super.seeds(newSeeds);\n        }\n\n        @Override\n        public Builder<ELEMENT_TYPE> addSeed(final EntitySeed seed) {\n            return (Builder<ELEMENT_TYPE>) super.addSeed(seed);\n        }\n\n        @Override\n        public Builder<ELEMENT_TYPE> includeEdges(final IncludeEdgeType includeEdgeType) {\n            return (Builder<ELEMENT_TYPE>) super.includeEdges(includeEdgeType);\n        }\n\n        @Override\n        public Builder<ELEMENT_TYPE> includeEntities(final boolean includeEntities) {\n            return (Builder<ELEMENT_TYPE>) super.includeEntities(includeEntities);\n        }\n\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"GovernmentCommunicationsHeadquarters/Gaffer","sample_ref":"refs/heads/master","sample_path":"accumulo-store/src/main/java/gaffer/accumulostore/operation/impl/GetElementsWithinSet.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a7120765b9621b1a7b33db1b9867360fe6c659d4","size":"1866","content":"/*\n * Copyright 2014, Stratio.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.stratio.security.utils;\n\nimport com.stratio.datagov.security.commons.exception.SecurityException;\nimport com.stratio.datagov.security.commons.result.LoginResult;\nimport com.stratio.datagov.security.commons.result.PermissionResult;\nimport com.stratio.datagov.security.commons.result.Result;\nimport com.stratio.datagov.security.driver.BasicDriver;\n\nimport java.io.Serializable;\nimport java.util.Map;\n\n/**\n * Driver for performing calls in stress tests.\n */\npublic class Driver {\n\n    private BasicDriver basicDriver;\n    private Result loginResult;\n\n    public LoginResult login(Map<?, ?> credentials) throws SecurityException {\n        basicDriver = new BasicDriver();\n        return (LoginResult)basicDriver.login(credentials.get(\"user\").toString(),\n                                        credentials.get(\"password\").toString(),\n                                        credentials.get(\"service\").toString());\n\n    }\n\n    public void logout() throws SecurityException {\n        basicDriver.logout();\n    }\n\n    public PermissionResult isPermitted(Serializable sessionId, String resource) throws SecurityException {\n        return (PermissionResult)basicDriver.isPermitted(sessionId, resource);\n    }\n\n    public void close() {\n        basicDriver.close();\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"Stratio/datagov-security-perf","sample_ref":"refs/heads/master","sample_path":"security-driver/src/main/java/com/stratio/security/utils/Driver.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d3767bcbac90b542a1c95b1cfc5daac2918aca30","size":"6824","content":"/*\r\n * DynamicJasper: A library for creating reports dynamically by specifying\r\n * columns, groups, styles, etc. at runtime. It also saves a lot of development\r\n * time in many cases! (http://sourceforge.net/projects/dynamicjasper)\r\n *\r\n * Copyright (C) 2008  FDV Solutions (http://www.fdvsolutions.com)\r\n *\r\n * This library is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n *\r\n * License as published by the Free Software Foundation; either\r\n *\r\n * version 2.1 of the License, or (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n *\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n *\r\n * Lesser General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n *\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\r\n *\r\n *\r\n */\r\n\r\npackage ar.com.fdvs.dj.domain.chart.plot;\r\n\r\nimport net.sf.jasperreports.charts.design.JRDesignScatterPlot;\r\nimport net.sf.jasperreports.engine.JRChartPlot;\r\nimport net.sf.jasperreports.engine.design.JRDesignExpression;\r\nimport ar.com.fdvs.dj.domain.CustomExpression;\r\nimport ar.com.fdvs.dj.domain.DynamicJasperDesign;\r\nimport ar.com.fdvs.dj.domain.StringExpression;\r\nimport ar.com.fdvs.dj.domain.entities.Entity;\r\nimport ar.com.fdvs.dj.util.ExpressionUtils;\r\n\r\npublic class ScatterPlot extends AbstractPlot {\r\n\tprivate static final long serialVersionUID = Entity.SERIAL_VERSION_UID;\r\n\tprivate DJAxisFormat xAxisFormat = new DJAxisFormat();\r\n\tprivate DJAxisFormat yAxisFormat = new DJAxisFormat();\r\n\tprivate Boolean showShapes = null;\r\n\tprivate Boolean showLines = null;\r\n\t\r\n\t/**\r\n\t * Sets the shapes visibility.\r\n\t *\r\n\t * @param showShapes the shapes visibility\r\n\t **/\r\n\tpublic void setShowShapes(Boolean showShapes) {\r\n\t\tthis.showShapes = showShapes;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the shapes visibility.\r\n\t *\r\n\t * @return the shapes visibility\r\n\t **/\r\n\tpublic Boolean getShowShapes() {\r\n\t\treturn showShapes;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the lines visibility.\r\n\t *\r\n\t * @param showLines the lines visibility\r\n\t **/\r\n\tpublic void setShowLines(Boolean showLines) {\r\n\t\tthis.showLines = showLines;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the lines visibility.\r\n\t *\r\n\t * @return the lines visibility\r\n\t **/\r\n\tpublic Boolean getShowLines() {\r\n\t\treturn showLines;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Sets the x axis format.\r\n\t *\r\n\t * @param xAxisFormat the x axis format\r\n\t **/\r\n\tpublic void setXAxisFormat(DJAxisFormat xAxisFormat) {\r\n\t\tthis.xAxisFormat = xAxisFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the x axis format.\r\n\t *\r\n\t * @return the x axis format\r\n\t **/\r\n\tpublic DJAxisFormat getXAxisFormat() {\r\n\t\treturn xAxisFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the y axis format.\r\n\t *\r\n\t * @param yAxisFormat the y axis format\r\n\t **/\r\n\tpublic void setYAxisFormat(DJAxisFormat yAxisFormat) {\r\n\t\tthis.yAxisFormat = yAxisFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the y axis format.\r\n\t *\r\n\t * @return the y axis format\r\n\t **/\r\n\tpublic DJAxisFormat getYAxisFormat() {\r\n\t\treturn yAxisFormat;\r\n\t}\r\n\t\r\n\tpublic void transform(DynamicJasperDesign design, JRChartPlot plot, String name) {\r\n\t\tsuper.transform(design, plot, name);\r\n\t\tJRDesignScatterPlot scatterPlot = (JRDesignScatterPlot) plot;\r\n\t\t\r\n\t\tStringExpression xAxisLabelExp = getXAxisFormat().getLabelExpression();\r\n\t\tif (xAxisLabelExp != null) {\r\n\t\t\tJRDesignExpression exp = ExpressionUtils.createAndRegisterExpression(design, \"xAxisLabel_\" + name, xAxisLabelExp);\r\n\t\t\tscatterPlot.setXAxisLabelExpression(exp);\r\n\t\t}\r\n\t\tif (xAxisFormat.getTickLabelMask() != null) \r\n\t\t\tscatterPlot.setXAxisTickLabelMask(xAxisFormat.getTickLabelMask());\t\r\n\t\tif (xAxisFormat.getLabelColor() != null)\r\n\t\t\tscatterPlot.setXAxisLabelColor(xAxisFormat.getLabelColor());\r\n\t\tif (xAxisFormat.getLabelFont() != null)\r\n\t\t\tscatterPlot.setXAxisLabelFont(xAxisFormat.getLabelFont().transform());\r\n\t\tif (xAxisFormat.getLineColor() != null)\r\n\t\t\tscatterPlot.setXAxisLineColor(xAxisFormat.getLineColor());\t\t\r\n\t\tif (xAxisFormat.getTickLabelColor() != null)\r\n\t\t\tscatterPlot.setXAxisTickLabelColor(xAxisFormat.getTickLabelColor());\r\n\t\tif (xAxisFormat.getTickLabelFont() != null)\r\n\t\t\tscatterPlot.setXAxisTickLabelFont(xAxisFormat.getTickLabelFont().transform());\r\n\t\tCustomExpression xAxisRangeMinValueExp = getXAxisFormat().getRangeMinValueExpression();\r\n\t\tif (xAxisRangeMinValueExp != null) {\r\n\t\t\tJRDesignExpression exp = ExpressionUtils.createAndRegisterExpression(design, \"xAxisRangeMinValue_\" + name, xAxisRangeMinValueExp);\r\n\t\t\tscatterPlot.setDomainAxisMinValueExpression(exp);\r\n\t\t}\r\n\t\tCustomExpression xAxisRangeMaxValueExp = getXAxisFormat().getRangeMaxValueExpression();\r\n\t\tif (xAxisRangeMaxValueExp != null) {\r\n\t\t\tJRDesignExpression exp = ExpressionUtils.createAndRegisterExpression(design, \"xAxisRangeMaxValue_\" + name, xAxisRangeMaxValueExp);\r\n\t\t\tscatterPlot.setDomainAxisMaxValueExpression(exp);\r\n\t\t}\r\n\t\t\r\n\t\tStringExpression yAxisLabelExp = getYAxisFormat().getLabelExpression();\r\n\t\tif (yAxisLabelExp != null) {\r\n\t\t\tJRDesignExpression exp = ExpressionUtils.createAndRegisterExpression(design, \"yAxisLabel_\" + name, yAxisLabelExp);\r\n\t\t\tscatterPlot.setYAxisLabelExpression(exp);\r\n\t\t}\r\n\t\tif (yAxisFormat.getTickLabelMask() != null) \r\n\t\t\tscatterPlot.setYAxisTickLabelMask(yAxisFormat.getTickLabelMask());\t\r\n\t\tif (yAxisFormat.getLabelColor() != null)\r\n\t\t\tscatterPlot.setYAxisLabelColor(yAxisFormat.getLabelColor());\r\n\t\tif (yAxisFormat.getLabelFont() != null)\r\n\t\t\tscatterPlot.setYAxisLabelFont(yAxisFormat.getLabelFont().transform());\r\n\t\tif (yAxisFormat.getLineColor() != null)\r\n\t\t\tscatterPlot.setYAxisLineColor(yAxisFormat.getLineColor());\t\t\r\n\t\tif (yAxisFormat.getTickLabelColor() != null)\r\n\t\t\tscatterPlot.setYAxisTickLabelColor(yAxisFormat.getTickLabelColor());\r\n\t\tif (yAxisFormat.getTickLabelFont() != null)\r\n\t\t\tscatterPlot.setYAxisTickLabelFont(yAxisFormat.getTickLabelFont().transform());\r\n\t\tCustomExpression yAxisRangeMinValueExp = getYAxisFormat().getRangeMinValueExpression();\r\n\t\tif (yAxisRangeMinValueExp != null) {\r\n\t\t\tJRDesignExpression exp = ExpressionUtils.createAndRegisterExpression(design, \"yAxisRangeMinValue_\" + name, yAxisRangeMinValueExp);\r\n\t\t\tscatterPlot.setRangeAxisMinValueExpression(exp);\r\n\t\t}\r\n\t\tCustomExpression yAxisRangeMaxValueExp = getYAxisFormat().getRangeMaxValueExpression();\r\n\t\tif (yAxisRangeMaxValueExp != null) {\r\n\t\t\tJRDesignExpression exp = ExpressionUtils.createAndRegisterExpression(design, \"yAxisRangeMaxValue_\" + name, yAxisRangeMaxValueExp);\r\n\t\t\tscatterPlot.setRangeAxisMaxValueExpression(exp);\r\n\t\t}\r\n\t\t\r\n\t\tif (showShapes != null)\r\n\t\t\tscatterPlot.setShowShapes(showShapes);\r\n\t\tif (showLines != null)\r\n\t\t\tscatterPlot.setShowLines(showLines);\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"FDVSolutions/DynamicJasper","sample_ref":"refs/heads/master","sample_path":"src/main/java/ar/com/fdvs/dj/domain/chart/plot/ScatterPlot.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ac89cfa73dd1cbbba9dbdc9bfda44c09a7f2a4af","size":"4431","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.omid.tools.hbase;\n\nimport org.apache.omid.committable.hbase.HBaseCommitTableConfig;\nimport org.apache.omid.timestamp.storage.HBaseTimestampStorageConfig;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hbase.HBaseConfiguration;\nimport org.apache.hadoop.hbase.HBaseTestingUtility;\nimport org.apache.hadoop.hbase.TableName;\nimport org.apache.hadoop.hbase.client.HBaseAdmin;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\nimport static org.apache.omid.tools.hbase.OmidTableManager.COMMIT_TABLE_COMMAND_NAME;\nimport static org.apache.omid.tools.hbase.OmidTableManager.TIMESTAMP_TABLE_COMMAND_NAME;\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.assertTrue;\n\npublic class TestOmidTableManager {\n\n    private HBaseTestingUtility hBaseTestUtil;\n    private Configuration hbaseConf;\n    private HBaseAdmin hBaseAdmin;\n\n    @BeforeClass\n    public void setUpClass() throws Exception {\n        // HBase setup\n        hbaseConf = HBaseConfiguration.create();\n\n        hBaseTestUtil = new HBaseTestingUtility(hbaseConf);\n        hBaseTestUtil.startMiniCluster(1);\n\n        hBaseAdmin = hBaseTestUtil.getHBaseAdmin();\n    }\n\n    @AfterClass\n    public void tearDownClass() throws Exception {\n\n        hBaseAdmin.close();\n\n        hBaseTestUtil.shutdownMiniCluster();\n\n    }\n\n    @Test(timeOut = 20_000)\n    public void testCreateDefaultTimestampTableSucceeds() throws Throwable {\n\n        String[] args = new String[]{TIMESTAMP_TABLE_COMMAND_NAME};\n\n        OmidTableManager omidTableManager = new OmidTableManager(args);\n        omidTableManager.executeActionsOnHBase(hbaseConf);\n\n        TableName tableName = TableName.valueOf(HBaseTimestampStorageConfig.DEFAULT_TIMESTAMP_STORAGE_TABLE_NAME);\n\n        assertTrue(hBaseAdmin.tableExists(tableName));\n        int numRegions = hBaseAdmin.getTableRegions(tableName).size();\n        assertEquals(numRegions, 1, \"Should have only 1 region\");\n\n    }\n\n    @Test(timeOut = 20_000)\n    public void testCreateDefaultCommitTableSucceeds() throws Throwable {\n\n        String[] args = new String[]{COMMIT_TABLE_COMMAND_NAME};\n\n        OmidTableManager omidTableManager = new OmidTableManager(args);\n        omidTableManager.executeActionsOnHBase(hbaseConf);\n\n        TableName tableName = TableName.valueOf(HBaseCommitTableConfig.DEFAULT_COMMIT_TABLE_NAME);\n\n        assertTrue(hBaseAdmin.tableExists(tableName));\n        int numRegions = hBaseAdmin.getTableRegions(tableName).size();\n        assertEquals(numRegions, 16, \"Should have 16 regions\");\n\n    }\n\n    @Test(timeOut = 20_000)\n    public void testCreateCustomCommitTableSucceeds() throws Throwable {\n\n        String[] args = new String[]{COMMIT_TABLE_COMMAND_NAME, \"-tableName\", \"my-commit-table\", \"-numRegions\", \"1\"};\n\n        OmidTableManager omidTableManager = new OmidTableManager(args);\n        omidTableManager.executeActionsOnHBase(hbaseConf);\n\n        TableName tableName = TableName.valueOf(\"my-commit-table\");\n\n        assertTrue(hBaseAdmin.tableExists(tableName));\n        int numRegions = hBaseAdmin.getTableRegions(tableName).size();\n        assertEquals(numRegions, 1, \"Should have only 1 regions\");\n    }\n\n    @Test(expectedExceptions = IllegalArgumentException.class, timeOut = 20_000)\n    public void testExceptionIsThrownWhenSpecifyingAWrongCommand() throws Throwable {\n\n        String[] args = new String[]{\"non-recognized-command\"};\n\n        OmidTableManager omidTableManager = new OmidTableManager(args);\n        omidTableManager.executeActionsOnHBase(hbaseConf);\n\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"yahoo/omid","sample_ref":"refs/heads/master","sample_path":"hbase-tools/src/test/java/org/apache/omid/tools/hbase/TestOmidTableManager.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0eb62b57f2509c47bdb66f310651f4a138a233aa","size":"2444","content":"/****************************************************************************\n * Copyright (C) 2012 ecsec GmbH.\n * All rights reserved.\n * Contact: ecsec GmbH (info@ecsec.de)\n *\n * This file is part of the Open eCard App.\n *\n * GNU General Public License Usage\n * This file may be used under the terms of the GNU General Public\n * License version 3.0 as published by the Free Software Foundation\n * and appearing in the file LICENSE.GPL included in the packaging of\n * this file. Please review the following information to ensure the\n * GNU General Public License version 3.0 requirements will be met:\n * http://www.gnu.org/copyleft/gpl.html.\n *\n * Other Usage\n * Alternatively, this file may be used in accordance with the terms\n * and conditions contained in a signed written agreement between\n * you and ecsec GmbH.\n *\n ***************************************************************************/\n\npackage org.openecard.common.tlv.iso7816;\n\nimport org.openecard.common.tlv.Parser;\nimport org.openecard.common.tlv.TLV;\nimport org.openecard.common.tlv.TLVException;\nimport org.openecard.common.tlv.Tag;\nimport org.openecard.common.tlv.TagClass;\n\n\n/**\n *\n * @author Tobias Wich\n */\npublic class PrivateECKeyAttribute extends TLVType {\n\n    private Path value;\n    // KeyInfo sequence\n    // ECDomainParameters - Choice\n    private TLV implicitCA; // NULL\n    private TLV named; // ObjectIdentifier\n    private TLV specified; // SpecifiedECDomain\n    // PublicKeyOperations alias for Operations\n    private TLVBitString operations;\n\n    public PrivateECKeyAttribute(TLV tlv) throws TLVException {\n\tsuper(tlv);\n\n\tParser p = new Parser(tlv.getChild());\n\n\tif (p.match(Tag.SEQUENCE_TAG)) {\n\t    value = new Path(p.next(0));\n\t} else {\n\t    throw new TLVException(\"No value element in structure.\");\n\t}\n\t// only match sequence not Reference (historical)\n\tif (p.match(Tag.SEQUENCE_TAG)) {\n\t    Parser p1 = new Parser(p.next(0).getChild());\n\t    if (p1.match(new Tag(TagClass.UNIVERSAL, true, 5))) {\n\t\timplicitCA = p1.next(0);\n\t    } else if(p1.match(new Tag(TagClass.UNIVERSAL, true, 6))) {\n\t\tnamed = p1.next(0);\n\t    } else if (p1.match(Tag.SEQUENCE_TAG)) {\n\t\tspecified = p1.next(0);\n\t    } else {\n\t\tthrow new TLVException(\"No parameters element in structure.\");\n\t    }\n\t    if (p1.match(new Tag(TagClass.UNIVERSAL, true, 3))) {\n\t\toperations = new TLVBitString(p1.next(0), new Tag(TagClass.UNIVERSAL, true, 3).getTagNumWithClass());\n\t    }\n\t}\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"ecsec/open-ecard","sample_ref":"refs/heads/master","sample_path":"common/src/main/java/org/openecard/common/tlv/iso7816/PrivateECKeyAttribute.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d46e6cf9271bdd1f0de01fd82caf5e23bc1b019c","size":"2538","content":"/*\n * Copyright (c) 1997, 2016, Oracle and/or its affiliates. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.  Oracle designates this\n * particular file as subject to the \"Classpath\" exception as provided\n * by Oracle in the LICENSE file that accompanied this code.\n *\n * This code is distributed in the hope that it will be useful, but WITHOUT\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n * version 2 for more details (a copy is included in the LICENSE file that\n * accompanied this code).\n *\n * You should have received a copy of the GNU General Public License version\n * 2 along with this work; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n *\n * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n * or visit www.oracle.com if you need additional information or have any\n * questions.\n */\n\npackage com.sun.tools.internal.ws.resources;\n\nimport com.sun.istack.internal.localization.Localizable;\nimport com.sun.istack.internal.localization.LocalizableMessageFactory;\nimport com.sun.istack.internal.localization.Localizer;\n\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\n\n/**\n * Defines string formatting method for each constant in the resource file\n *\n */\npublic final class ConfigurationMessages {\n    private final static String BUNDLE_NAME = \"com.sun.tools.internal.ws.resources.configuration\";\n    private final static LocalizableMessageFactory messageFactory =\n        new LocalizableMessageFactory(BUNDLE_NAME, ConfigurationMessages::getResourceBundle);\n    private final static Localizer localizer = new Localizer();\n\n    private static ResourceBundle getResourceBundle(Locale locale) {\n        return ResourceBundle.getBundle(BUNDLE_NAME, locale);\n    }\n\n    public static Localizable localizableCONFIGURATION_NOT_BINDING_FILE(Object arg0) {\n        return messageFactory.getMessage(\"configuration.notBindingFile\", arg0);\n    }\n\n\n    /**\n     * Ignoring: binding file \"{0}\". It is not a jaxws or a jaxb binding file.\n     *\n     */\n    public static String CONFIGURATION_NOT_BINDING_FILE(Object arg0) {\n        return localizer.localize(localizableCONFIGURATION_NOT_BINDING_FILE(arg0));\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"netroby/jdk9-dev","sample_ref":"refs/heads/master","sample_path":"jaxws/src/jdk.xml.ws/share/classes/com/sun/tools/internal/ws/resources/ConfigurationMessages.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9eeda4172f5a229370f34922480b1701a96bd089","size":"3242","content":"package com.cleveroad.audiowidget.example;\n\nimport android.content.Context;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.support.v7.widget.RecyclerView;\nimport android.text.Spannable;\nimport android.text.SpannableString;\nimport android.view.LayoutInflater;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\n/**\n * Base adapter for recycler view\n */\nabstract class BaseRecyclerViewAdapter<TData, TViewHolder extends RecyclerView.ViewHolder>\n        extends RecyclerView.Adapter<TViewHolder> implements BaseFilter.FilterableAdapter<TData> {\n\n    private final Context context;\n    private final LayoutInflater inflater;\n    private final List<TData> data;\n    private BaseFilter<TData> filter;\n\n    public BaseRecyclerViewAdapter(@NonNull final Context context) {\n        this.context = context.getApplicationContext();\n\t    this.inflater = LayoutInflater.from(context);\n        data = new ArrayList<>();\n    }\n\n    public BaseRecyclerViewAdapter(@NonNull final Context context, @NonNull List<TData> data) {\n        this.context = context.getApplicationContext();\n\t    this.inflater = LayoutInflater.from(context);\n        this.data = new ArrayList<>(data);\n    }\n\n    @Override\n    public void withFilter(@Nullable BaseFilter<TData> filter) {\n        if (this.filter != null)\n            unregisterAdapterDataObserver(this.filter.getAdapterDataObserver());\n        this.filter = filter;\n        if (this.filter != null) {\n            this.filter.init(this);\n            registerAdapterDataObserver(this.filter.getAdapterDataObserver());\n        }\n    }\n\n    protected Context getContext() {\n        return context;\n    }\n\n    @Override\n    public int getItemCount() {\n        if (filter != null && filter.isFiltered())\n            return filter.getCount();\n        return data.size();\n    }\n\n    public TData getItem(final int position) throws ArrayIndexOutOfBoundsException {\n        if (filter != null && filter.isFiltered())\n            return filter.getItem(position);\n        return data.get(position);\n    }\n\n    @Override\n    public boolean isFiltered() {\n        return filter != null && filter.isFiltered();\n    }\n\n    @Override\n    public Spannable highlightFilteredSubstring(String text) {\n        return isFiltered() ? filter.highlightFilteredSubstring(text) : new SpannableString(text);\n    }\n\n    @Override\n    public TData getNonFilteredItem(int position) {\n        return data.get(position);\n    }\n\n    @Override\n    public int getNonFilteredCount() {\n        return data.size();\n    }\n\n    public boolean add(TData object) {\n        return data.add(object);\n    }\n\n    public boolean remove(TData object) {\n        return data.remove(object);\n    }\n\n    public TData remove(int position) {\n        return data.remove(position);\n    }\n\n    public void clear() {\n        data.clear();\n    }\n\n    public boolean addAll(@NonNull Collection<? extends TData> collection) {\n        return data.addAll(collection);\n    }\n\n    public BaseFilter<TData> getFilter() {\n        return filter;\n    }\n\n    public List<TData> getSnapshot() {\n        return new ArrayList<>(data);\n    }\n\n\tprotected LayoutInflater getInflater() {\n\t\treturn inflater;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"Cleveroad/CRAudioWidgetOverlay","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/cleveroad/audiowidget/example/BaseRecyclerViewAdapter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a32af18304f098b36ba8a91bf8c21bc818327e13","size":"4623","content":"/*\n * Copyright 2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage leap.htpl.ast;\n\nimport leap.htpl.HtplCompiler;\nimport leap.htpl.HtplDocument;\nimport leap.htpl.HtplEngine;\nimport leap.htpl.ast.Text.Type;\nimport leap.lang.New;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.function.Predicate;\n\npublic abstract class NodeContainer extends Node {\n\n\tprotected List<Node> childNodes;\n\t\n\tpublic NodeContainer(){\n\t\tthis(new ArrayList<>());\n\t}\n\t\n\tpublic NodeContainer(Node... childNodes){\n\t\tthis(New.arrayList(childNodes));\n\t}\n\t\n\tpublic NodeContainer(List<Node> childNodes){\n\t\tthis.setChildNodes(childNodes);\n\t}\n\t\n\tpublic List<Node> childNodes() {\n\t\treturn childNodes;\n\t}\n\t\n\tpublic Node childNode(int index){\n\t\treturn childNodes.get(index);\n\t}\n\t\n\t@Override\n    protected void doLock() {\n\t\tsuper.doLock();\n\t    this.childNodes = Collections.unmodifiableList(childNodes);\n\t    \n\t\tfor(Node node : childNodes){\n\t\t\tnode.lock();\n\t\t}\n    }\n\n\tpublic void addChildNode(Node node){\n\t\tnode.setParent(this);\n\t\tchildNodes.add(node);\n\t}\n\t\n\tpublic void addChildNodes(Collection<Node> nodes){\n\t\tif(null != nodes){\n\t\t\tfor(Node node : nodes){\n\t\t\t\tnode.setParent(this);\n\t\t\t}\n\t\t\tthis.childNodes.addAll(nodes);\n\t\t}\n\t}\n\t\n\tpublic boolean removeChildNode(Node node) {\n\t\treturn this.childNodes.remove(node);\n\t}\n\t\n\tpublic Node findNode(Predicate<Node> cond) {\n\t\t\n\t\tif(cond.test(this)){\n\t\t\treturn this;\n\t\t}\n\t\t\n\t\tNode n = null;\n\t\t\n\t\tfor(Node node : childNodes) {\n\t\t\tn = node.findNode(cond);\n\t\t\tif(null != n) {\n\t\t\t\treturn n;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic void clearChildNodes(){\n\t\tthis.childNodes.clear();\n\t}\n\t\n\tpublic void addChildText(String text){\n\t\taddChildText(text,Type.HTML,true);\n\t}\n\t\t\n\tpublic void addChildText(String text,Text.Type type, boolean inlineExpression){\n\t\tcheckLocked();\n\t\tif(childNodes.size() > 0){\n\t\t\tNode lastNode = childNodes.get(childNodes.size() - 1);\n\t\t\tif(lastNode instanceof Text){\n\t\t\t\tText textNode = (Text)lastNode;\n\t\t\t\tif(textNode.getType() == type == textNode.isInlineExpression() == inlineExpression){\n\t\t\t\t\t((Text)lastNode).append(text);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\taddChildNode(new Text(text,type,inlineExpression));\n\t}\n\t\n\tpublic void setChildNodes(List<Node> childNodes) {\n\t\tcheckLocked();\n\t\tthis.childNodes = childNodes;\n\t\tif(null != childNodes){\n\t\t\tfor(Node childNode : childNodes){\n\t\t\t\tchildNode.setParent(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void setChildNode(Node node){\n\t\tclearChildNodes();\n\t\taddChildNode(node);\n\t}\n\t\n\tpublic List<Node> deepCloneChildNodes(){\n\t\tList<Node> clones = new ArrayList<Node>();\n\t\t\n\t\tfor(Node node : childNodes){\n\t\t\tclones.add(node.deepClone(this));\n\t\t}\n\t\t\n\t\treturn clones;\n\t}\n\t\n\t@Override\n    protected Node doProcess(HtplEngine engine,HtplDocument doc, ProcessCallback callback) throws Throwable {\n\t\tList<Node> processedNodes = new ArrayList<>();\n\t\tif(null != childNodes){\n\t\t\tfor(Node node : childNodes){\n\t\t\t\tNode processed;\n\t\t\t\tfor(;;){\n\t\t\t\t\tprocessed = node.process(engine, doc, callback);\n\t\t\t\t\tif(null == processed){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif(processed == node){\n\t\t\t\t\t\taddProcessedNode(processedNodes, processed);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tnode = processed;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.childNodes = processedNodes;\n\t\treturn this;\n    }\n\t\n\tprotected void addProcessedNode(List<Node> nodes,Node node){\n\t\tif(!nodes.isEmpty() && node instanceof Text){\n\t\t\tNode lastNode = nodes.get(nodes.size() - 1);\n\t\t\tif(lastNode instanceof Text ){\n\t\t\t\t((Text) lastNode).append((Text)node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tnodes.add(node);\t\n\t}\n\t\n\t@Override\n    public void compile(HtplEngine engine, HtplDocument doc, HtplCompiler compiler) {\n\t\tthis.compileChildNodes(engine, doc, compiler);\n    }\n\n\tprotected void compileChildNodes(HtplEngine engine, HtplDocument doc, HtplCompiler compiler) {\n\t\tfor(Node node : childNodes){\n\t\t\tnode.compile(engine, doc, compiler);\n\t\t}\n\t}\n\n\t@Override\n    protected void doWriteTemplate(Appendable out) throws IOException {\n\t\tfor(int i=0;i<childNodes.size();i++){\n\t\t\tchildNodes.get(i).writeTemplate(out);\n\t\t}\n    }\n}","binary":"false","copies":"1","sample_repo_name":"leapframework/framework","sample_ref":"refs/heads/master","sample_path":"web/htpl/src/main/java/leap/htpl/ast/NodeContainer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d300e7a20f16ea74c90f75c515589c6b29878408","size":"9452","content":"/*\n * Copyright 2013 Marco Salis - fast3r(at)gmail.com\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.github.marcosalis.kraken.cache.bitmap;\n\nimport android.graphics.drawable.Drawable;\nimport android.support.annotation.NonNull;\nimport android.support.annotation.Nullable;\nimport android.view.View;\nimport android.widget.ImageView;\n\nimport com.github.marcosalis.kraken.cache.AccessPolicy;\nimport com.github.marcosalis.kraken.cache.bitmap.BitmapCache.BitmapSetter;\nimport com.github.marcosalis.kraken.cache.bitmap.BitmapCache.OnBitmapSetListener;\nimport com.github.marcosalis.kraken.cache.bitmap.internal.BitmapAnimatedAsyncSetter;\nimport com.github.marcosalis.kraken.cache.bitmap.internal.BitmapAsyncSetter;\nimport com.github.marcosalis.kraken.cache.keys.CacheUrlKey;\nimport com.github.marcosalis.kraken.cache.keys.SimpleCacheUrlKey;\nimport com.google.api.client.util.Preconditions;\nimport com.google.common.annotations.Beta;\n\nimport java.util.HashMap;\n\nimport javax.annotation.concurrent.NotThreadSafe;\n\n/**\n * <p> Default component to access a {@link BitmapCache} from client code to set bitmaps into views\n * and build a {@link BitmapSetter} for the cache.\n *\n * <p> It allows detailed configuration of how a bitmap is set, while allowing methods chaining in a\n * \"builder\" style in order to make the cache accesses code short and clean.\n *\n * <p> The {@link BitmapSetterBuilder} can work in two different modes, one-off and local. When\n * working in <i>local</i> mode (by calling {@link BitmapCache#newBitmapSetterBuilder(true)} and\n * retaining the instance), a single instance of the builder can be re-used within a \"context\" (such\n * an activity) or UI component (as a fragment): it holds local caches for internal elements (which\n * can be cleared by calling {@link #clearLocalCaches()} when the context is closed/destroyed or the\n * data source changes) and it avoids as much as possible the creation of objects, to avoid GC, in\n * performance-critical scenarios, such as a list view scrolling.<br> A <i>one-off</i> instance\n * (obtained by calling {@link BitmapCache#newBitmapSetterBuilder(false)}) allows using the builder\n * for a single bitmap setting, which is recommended when only a few bitmaps need to be set.\n *\n * <p> <strong>Example usage</strong><br> Retrieve a new instance of the builder by calling {@link\n * BitmapCache#newBitmapSetterBuilder(boolean)} then chain calls on the\n * builder to start the asynchronous request: <code><pre>\n * builder.setAsync(\"http://www.example.com/image.jpg\")\n * \t.placeholder(placeholderDrawable)\n * \t.policy(AccessPolicy.NORMAL)\n * \t.animate(AnimationMode.NOT_IN_MEMORY)\n * \t.listener(new OnBitmapSetListener() {\n * \t\tpublic void onBitmapSet(CacheUrlKey key, Bitmap bitmap, CacheSource source) {\n * \t\t\t// called when the bitmap is set\n *        }\n *    })\n * \t.into(imageView);\n * </pre></code>\n *\n * @author Marco Salis\n * @since 1.0.2\n */\n@Beta\n@NotThreadSafe\npublic final class BitmapSetterBuilder {\n\n    private final BitmapCache mCache;\n    private final boolean mCachingEnabled;\n\n    @Nullable\n    private HashMap<String, CacheUrlKey> mKeysCache;\n\n    private CacheUrlKey mKey;\n    private AccessPolicy mPolicy = AccessPolicy.NORMAL;\n    private AnimationMode mAnimationMode = AnimationMode.NEVER;\n    private Drawable mPlaceholder;\n    private OnBitmapSetListener mListener;\n\n    /**\n     * Do not use this constructor directly, call {@link BitmapCache#newBitmapSetterBuilder(boolean)}.\n     *\n     * @param cache\n     */\n    public BitmapSetterBuilder(@NonNull BitmapCache cache) {\n        this(cache, true);\n    }\n\n    /**\n     * Do not use this constructor directly, call {@link BitmapCache#newBitmapSetterBuilder(boolean)}.\n     *\n     * @param cache\n     * @param reusable\n     */\n    public BitmapSetterBuilder(@NonNull BitmapCache cache, boolean reusable) {\n        mCache = cache;\n        mCachingEnabled = reusable;\n    }\n\n    /**\n     * Sets the download URL for the bitmap.\n     *\n     * @param url The URL string\n     * @return This builder for call chaining\n     */\n    @NonNull\n    public BitmapSetterBuilder setAsync(@NonNull String url) {\n        mKey = getKeyFromCacheOrCreate(url);\n        return this;\n    }\n\n    private CacheUrlKey getKeyFromCacheOrCreate(@NonNull String url) {\n        if (mCachingEnabled) {\n            if (mKeysCache == null) { // lazily initialized\n                mKeysCache = new HashMap<String, CacheUrlKey>();\n            }\n            CacheUrlKey key;\n            if ((key = mKeysCache.get(url)) == null) {\n                key = new SimpleCacheUrlKey(url);\n                mKeysCache.put(url, key);\n            }\n            return key;\n        } else {\n            return new SimpleCacheUrlKey(url);\n        }\n    }\n\n    /**\n     * Sets the {@link CacheUrlKey} for the bitmap.\n     *\n     * <strong>Note: </strong> calling this method instead of {@link #setAsync(String)} would\n     * prevent any internal key cache from saving on objects instantiation. Only use to provide a\n     * {@link CacheUrlKey} customized behavior.\n     *\n     * @param key The {@link CacheUrlKey} for the bitmap\n     * @return This builder for call chaining\n     */\n    @NonNull\n    public BitmapSetterBuilder setAsync(@NonNull CacheUrlKey key) {\n        mKey = key;\n        return this;\n    }\n\n    /**\n     * Sets a temporary placeholder to be set into the view when the requested bitmap is not in the\n     * memory cache.\n     *\n     * If not set, the image view drawable will be just set to null.\n     *\n     * @param placeholder The placeholder {@link Drawable}\n     * @return This builder for call chaining\n     */\n    @NonNull\n    public BitmapSetterBuilder placeholder(@Nullable Drawable placeholder) {\n        mPlaceholder = placeholder;\n        return this;\n    }\n\n    /**\n     * Sets the bitmap retrieval to the passed {@link AccessPolicy}. Defaults to {@link\n     * AccessPolicy#NORMAL} if not called.\n     *\n     * @param policy The access policy to retrieve the bitmap\n     * @return This builder for call chaining\n     */\n    @NonNull\n    public BitmapSetterBuilder policy(@NonNull AccessPolicy policy) {\n        mPolicy = policy;\n        return this;\n    }\n\n    /**\n     * Sets the animation mode when setting the bitmap into the view. Defaults to {@link\n     * AnimationMode#NEVER}.\n     *\n     * @param mode The {@link AnimationMode} for the bitmap\n     * @return This builder for call chaining\n     */\n    @NonNull\n    public BitmapSetterBuilder animate(@NonNull AnimationMode mode) {\n        mAnimationMode = mode;\n        return this;\n    }\n\n    /**\n     * Sets an {@link OnBitmapSetListener} to be notified when the bitmap is set into the view.\n     *\n     * @param listener The listener (can be safely a context, it won't be leaked)\n     * @return This builder for call chaining\n     */\n    @NonNull\n    public BitmapSetterBuilder listener(@NonNull OnBitmapSetListener listener) {\n        mListener = listener;\n        return this;\n    }\n\n    /**\n     * Starts the asynchronous bitmap retrieval by calling the {@link BitmapCache}.\n     *\n     * After this call, all the parameters added to the builder are reset to the default state.\n     *\n     * @param view The {@link ImageView} to set the bitmap into\n     * @throws NullPointerException if any of the mandatory parameters were not set\n     */\n    public void into(@NonNull ImageView view) {\n        checkParameters();\n\n        // build setter\n        final BitmapSetter setter = getBitmapSetter(view);\n\n        // start the asynchronous retrieval\n        mCache.setBitmapAsync(mKey, mPolicy, setter, mPlaceholder);\n        reset();\n    }\n\n    /**\n     * @param view\n     * @throws UnsupportedOperationException\n     */\n    public void asBackground(@NonNull View view) {\n        throw new UnsupportedOperationException(\"Not yet supported\");\n    }\n\n    /**\n     * Resets the builder to its default parameters. This method does *<i>not</i>* clear the builder\n     * local caches.\n     */\n    public void reset() {\n        mKey = null;\n        mPolicy = AccessPolicy.NORMAL;\n        mAnimationMode = AnimationMode.NEVER;\n        mPlaceholder = null;\n        mListener = null;\n    }\n\n    /**\n     * Clears the builder local caches. Call this when the \"context\" where the builder is used is\n     * not valid or the dataset changes.\n     */\n    public void clearLocalCaches() {\n        if (mKeysCache != null) {\n            mKeysCache.clear();\n        }\n    }\n\n    private void checkParameters() {\n        Preconditions.checkNotNull(mKey);\n        Preconditions.checkNotNull(mPolicy);\n        Preconditions.checkNotNull(mAnimationMode);\n    }\n\n    @NonNull\n    private BitmapSetter getBitmapSetter(@NonNull ImageView view) {\n        if (mAnimationMode == AnimationMode.NEVER) {\n            return new BitmapAsyncSetter(mKey, view, mListener);\n        } else {\n            return new BitmapAnimatedAsyncSetter(mKey, view, mAnimationMode, mListener, -1);\n        }\n    }\n\n}","binary":"false","copies":"1","sample_repo_name":"marcosalis/kraken","sample_ref":"refs/heads/master","sample_path":"kraken_lib/src/main/java/com/github/marcosalis/kraken/cache/bitmap/BitmapSetterBuilder.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9c62526b929cdc9cbabdbe624bf315eceb012715","size":"3314","content":"package chat.rocket.app.db.collections;\n\n/**\n * Created by julio on 24/11/15.\n */\npublic class RcPermissions {\n    /*collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"add-oath-service\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"add-oauth-service\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"assign-admin-role\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"ban-user\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\",\\\"moderator\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"create-c\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\",\\\"user\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"create-p\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\",\\\"user\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"delete-c\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"delete-d\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"delete-message\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\",\\\"moderator\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"delete-p\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"delete-user\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"edit-message\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\",\\\"moderator\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"edit-other-user-active-status\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"edit-other-user-info\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"edit-privileged-setting\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"edit-room\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"site-moderator\\\",\\\"moderator\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"run-migration\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"view-full-other-user-info\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"view-other-user-channels\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"view-privileged-setting\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"view-room-administration\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"view-statistics\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\",\\\"temp-role\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"view-user-administration\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"receive-livechat\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"livechat-agent\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"edit-livechat-settings\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"livechat-manager\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"access-rocket-mailer\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"bulk-register-user\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]}}\"\n collection\\\":\\\"rocketchat_permissions\\\",\\\"id\\\":\\\"bulk-create-c\\\",\\\"fields\\\":{\\\"roles\\\":[\\\"admin\\\"]}}\"\n*/\n}\n","binary":"false","copies":"1","sample_repo_name":"RocketChat/Rocket.Chat.Android","sample_ref":"refs/heads/master","sample_path":"RocketChat/app/src/main/java/chat/rocket/app/db/collections/RcPermissions.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"abef2a41dc6f63f2867f23640b9c7b421cbefc1d","size":"10535","content":"/**\n * Copyright (C) 2013 Christian Kohlsch\u00fctter (ckkohl79@gmail.com)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage de.l3s.boilerpipe.sax;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.BitSet;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport mf.org.apache.xerces.parsers.AbstractSAXParser;\nimport org.cyberneko.html.HTMLConfiguration;\nimport org.xml.sax.Attributes;\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\n\nimport de.l3s.boilerpipe.BoilerpipeExtractor;\nimport de.l3s.boilerpipe.BoilerpipeProcessingException;\nimport de.l3s.boilerpipe.document.Image;\nimport de.l3s.boilerpipe.document.Media;\nimport de.l3s.boilerpipe.document.TextBlock;\nimport de.l3s.boilerpipe.document.TextDocument;\nimport de.l3s.boilerpipe.document.VimeoVideo;\nimport de.l3s.boilerpipe.document.YoutubeVideo;\nimport de.l3s.boilerpipe.sax.BoilerpipeSAXInput;\nimport de.l3s.boilerpipe.sax.HTMLDocument;\nimport de.l3s.boilerpipe.sax.HTMLFetcher;\n\n/**\n * Extracts youtube and vimeo videos that are enclosed by extracted content.\n * \n * @author Christian Kohlsch\u00fctter, manuel.codiga@gmail.com\n */\npublic final class MediaExtractor {\n\n\t/**  */\n\tpublic static final MediaExtractor INSTANCE = new MediaExtractor();\n\n\t/**\n\t * @return the singleton instance of {@link de.l3s.boilerpipe.sax.MediaExtractor}.\n\t */\n\tpublic static MediaExtractor getInstance() {\n\t\treturn INSTANCE;\n\t}\n\n\t/**\n\t * Processes the given {@link TextDocument} and the original HTML text (as a String).\n\t * \n\t * @param doc The processed {@link TextDocument}.\n\t * @param origHTML The original HTML document.\n\t * @return A List of enclosed {@link Image}s\n\t * @throws BoilerpipeProcessingException if an error during extraction occure\n\t */\n\tpublic List<Media> process(final TextDocument doc, final String origHTML) throws BoilerpipeProcessingException {\n\t\treturn process(doc, new InputSource(new StringReader(origHTML)));\n\t}\n\n\t/**\n\t * Processes the given {@link TextDocument} and the original HTML text (as an {@link org.xml.sax.InputSource}).\n\t * \n\t * @param doc The processed {@link TextDocument}. The original HTML document.\n\t * @return A List of enclosed {@link Image}s\n\t * @throws BoilerpipeProcessingException\n\t */\n\tpublic List<Media> process(final TextDocument doc, final InputSource is) throws BoilerpipeProcessingException {\n\t\tfinal Implementation implementation = new Implementation();\n\t\timplementation.process(doc, is);\n\n\t\treturn implementation.linksHighlight;\n\t}\n\n\t/**\n\t * Fetches the given {@link java.net.URL} using {@link de.l3s.boilerpipe.sax.HTMLFetcher} and processes the retrieved HTML using the specified\n\t * {@link BoilerpipeExtractor}.\n\t * \n\t * @param url the url of the document to fetch\n\t * @param extractor extractor to use\n\t * \n\t * @return A List of enclosed {@link Image}s\n\t * @throws java.io.IOException\n\t * @throws BoilerpipeProcessingException\n\t * @throws org.xml.sax.SAXException\n\t */\n\t@SuppressWarnings(\"javadoc\")\n\tpublic List<Media> process(final URL url, final BoilerpipeExtractor extractor) throws IOException,\n\t\t\tBoilerpipeProcessingException, SAXException {\n\t\tfinal HTMLDocument htmlDoc = HTMLFetcher.fetch(url);\n\n\t\tfinal TextDocument doc = new BoilerpipeSAXInput(htmlDoc.toInputSource()).getTextDocument();\n\t\textractor.process(doc);\n\n\t\tfinal InputSource is = htmlDoc.toInputSource();\n\n\t\treturn process(doc, is);\n\t}\n\n\t/**\n\t * parses the media (picture, video) out of doc\n\t * \n\t * @param doc document to parse the media out\n\t * @param extractor extractor to use\n\t * @return list of extracted media, with size = 0 if no media found\n\t */\n\tpublic List<Media> process(String doc, final BoilerpipeExtractor extractor) {\n\t\tfinal HTMLDocument htmlDoc = new HTMLDocument(doc);\n\t\tList<Media> media = new ArrayList<Media>();\n\t\tTextDocument tdoc;\n\n\t\ttry {\n\t\t\ttdoc = new BoilerpipeSAXInput(htmlDoc.toInputSource()).getTextDocument();\n\t\t\textractor.process(tdoc);\n\t\t\tfinal InputSource is = htmlDoc.toInputSource();\n\t\t\tmedia = process(tdoc, is);\n\t\t} catch (Exception e) {\n\t\t\treturn null;\n\t\t}\n\t\treturn media;\n\t}\n\n\tprivate final class Implementation extends AbstractSAXParser implements ContentHandler {\n\t\tList<Media> linksHighlight = new ArrayList<Media>();\n\t\tprivate List<Media> linksBuffer = new ArrayList<Media>();\n\n\t\tprivate int inIgnorableElement = 0;\n\t\tprivate int characterElementIdx = 0;\n\t\tprivate final BitSet contentBitSet = new BitSet();\n\n\t\tprivate boolean inHighlight = false;\n\n\t\tImplementation() {\n\t\t\tsuper(new HTMLConfiguration());\n\t\t\tsetContentHandler(this);\n\t\t}\n\n\t\tvoid process(final TextDocument doc, final InputSource is) throws BoilerpipeProcessingException {\n\t\t\tfor (TextBlock block : doc.getTextBlocks()) {\n\t\t\t\tif (block.isContent()) {\n\t\t\t\t\tfinal BitSet bs = block.getContainedTextElements();\n\t\t\t\t\tif (bs != null) {\n\t\t\t\t\t\tcontentBitSet.or(bs);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tparse(is);\n\t\t\t} catch (SAXException e) {\n\t\t\t\tthrow new BoilerpipeProcessingException(e);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new BoilerpipeProcessingException(e);\n\t\t\t}\n\t\t}\n\n\t\tpublic void endDocument() throws SAXException {\n\t\t}\n\n\t\tpublic void endPrefixMapping(String prefix) throws SAXException {\n\t\t}\n\n\t\tpublic void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\n\t\t}\n\n\t\tpublic void processingInstruction(String target, String data) throws SAXException {\n\t\t}\n\n\t\tpublic void setDocumentLocator(Locator locator) {\n\t\t}\n\n\t\tpublic void skippedEntity(String name) throws SAXException {\n\t\t}\n\n\t\tpublic void startDocument() throws SAXException {\n\t\t}\n\n\t\tpublic void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n\t\t\tTagAction ta = TAG_ACTIONS.get(localName);\n\t\t\tif (ta != null) {\n\t\t\t\tta.beforeStart(this, localName);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (inIgnorableElement == 0) {\n\t\t\t\t\tif (inHighlight && \"IFRAME\".equalsIgnoreCase(localName)) {\n\t\t\t\t\t\tString src = atts.getValue(\"src\");\n\t\t\t\t\t\tif (src != null) {\n\t\t\t\t\t\t\tsrc = src.replaceAll(\"\\\\\\\\\\\"\", \"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (src != null && src.length() > 0 && src.contains(\"youtube.com/embed/\")) {\n\t\t\t\t\t\t\tString originUrl = null;\n\t\t\t\t\t\t\tif (!src.startsWith(\"http:\")) {\n\t\t\t\t\t\t\t\tsrc = \"http:\" + src;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tURL url = new URL(src);\n\t\t\t\t\t\t\t\tString path = url.getPath();\n\t\t\t\t\t\t\t\tString[] pathParts = path.split(\"/\");\n\t\t\t\t\t\t\t\toriginUrl = \"http://www.youtube.com/watch?v=\" + pathParts[pathParts.length - 1];\n\t\t\t\t\t\t\t\tlinksBuffer.add(new YoutubeVideo(originUrl, src));\n\t\t\t\t\t\t\t} catch (MalformedURLException e) {\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (src != null && src.length() > 0 && src.contains(\"player.vimeo.com\")) {\n\t\t\t\t\t\t\tString originUrl = null;\n\t\t\t\t\t\t\tif (!src.startsWith(\"http:\")) {\n\t\t\t\t\t\t\t\tsrc = \"http:\" + src;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tURL url = new URL(src);\n\t\t\t\t\t\t\t\tString path = url.getPath();\n\t\t\t\t\t\t\t\tString[] pathParts = path.split(\"/\");\n\t\t\t\t\t\t\t\toriginUrl = \"http://vimeo.com/\" + pathParts[pathParts.length - 1];\n\t\t\t\t\t\t\t\tlinksBuffer.add(new VimeoVideo(originUrl, src));\n\t\t\t\t\t\t\t} catch (MalformedURLException e) {\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (inHighlight && \"IMG\".equalsIgnoreCase(localName)) {\n\t\t\t\t\t\tString src = atts.getValue(\"src\");\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tURI image = new URI(src);\n\t\t\t\t\t\t\tif (src != null && src.length() > 0) {\n\t\t\t\t\t\t\t\tlinksBuffer.add(new Image(src, atts.getValue(\"width\"), atts.getValue(\"height\"), atts\n\t\t\t\t\t\t\t\t\t\t.getValue(\"alt\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (URISyntaxException e) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (ta != null) {\n\t\t\t\t\tta.afterStart(this, localName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic void endElement(String uri, String localName, String qName) throws SAXException {\n\t\t\tTagAction ta = TAG_ACTIONS.get(localName);\n\t\t\tif (ta != null) {\n\t\t\t\tta.beforeEnd(this, localName);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (inIgnorableElement == 0) {\n\t\t\t\t\t//\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (ta != null) {\n\t\t\t\t\tta.afterEnd(this, localName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic void characters(char[] ch, int start, int length) throws SAXException {\n\t\t\tcharacterElementIdx++;\n\t\t\tif (inIgnorableElement == 0) {\n\n\t\t\t\tboolean highlight = contentBitSet.get(characterElementIdx);\n\t\t\t\tif (!highlight) {\n\t\t\t\t\tif (length == 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tboolean justWhitespace = true;\n\t\t\t\t\tfor (int i = start; i < start + length; i++) {\n\t\t\t\t\t\tif (!Character.isWhitespace(ch[i])) {\n\t\t\t\t\t\t\tjustWhitespace = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (justWhitespace) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tinHighlight = highlight;\n\t\t\t\tif (inHighlight) {\n\t\t\t\t\tlinksHighlight.addAll(linksBuffer);\n\t\t\t\t\tlinksBuffer.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic void startPrefixMapping(String prefix, String uri) throws SAXException {\n\t\t}\n\n\t}\n\n\t@SuppressWarnings(\"synthetic-access\")\n\tprivate static final TagAction TA_IGNORABLE_ELEMENT = new TagAction() {\n\t\t@Override\n\t\tvoid beforeStart(final Implementation instance, final String localName) {\n\t\t\tinstance.inIgnorableElement++;\n\t\t}\n\n\t\t@Override\n\t\tvoid afterEnd(final Implementation instance, final String localName) {\n\t\t\tinstance.inIgnorableElement--;\n\t\t}\n\t};\n\n\tprivate static Map<String, TagAction> TAG_ACTIONS = new HashMap<String, TagAction>();\n\tstatic {\n\t\tTAG_ACTIONS.put(\"STYLE\", TA_IGNORABLE_ELEMENT);\n\t\tTAG_ACTIONS.put(\"SCRIPT\", TA_IGNORABLE_ELEMENT);\n\t\tTAG_ACTIONS.put(\"OPTION\", TA_IGNORABLE_ELEMENT);\n\t\tTAG_ACTIONS.put(\"NOSCRIPT\", TA_IGNORABLE_ELEMENT);\n\t\tTAG_ACTIONS.put(\"EMBED\", TA_IGNORABLE_ELEMENT);\n\t\tTAG_ACTIONS.put(\"APPLET\", TA_IGNORABLE_ELEMENT);\n\t\tTAG_ACTIONS.put(\"LINK\", TA_IGNORABLE_ELEMENT);\n\n\t\tTAG_ACTIONS.put(\"HEAD\", TA_IGNORABLE_ELEMENT);\n\t}\n\n\tprivate abstract static class TagAction {\n\t\tvoid beforeStart(final Implementation instance, final String localName) {\n\t\t}\n\n\t\tvoid afterStart(final Implementation instance, final String localName) {\n\t\t}\n\n\t\tvoid beforeEnd(final Implementation instance, final String localName) {\n\t\t}\n\n\t\tvoid afterEnd(final Implementation instance, final String localName) {\n\t\t}\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"BartoszJarocki/boilerpipe-android","sample_ref":"refs/heads/master","sample_path":"src/main/java/de/l3s/boilerpipe/sax/MediaExtractor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b89b0aa77789badd7f225bd17d0c26f055f988c1","size":"1826","content":"/*\n * Created on Aug 29, 2011\n * Copyright 2010 by Eduard Weissmann (edi.weissmann@gmail.com).\n * \n * This file is part of the Sejda source code\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.sejda.cli.util;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.FilterOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\n/**\n * Records the contents of System.out, leaving the original stream untouched\n * \n * @author Eduard Weissmann\n * \n */\npublic class SystemOutRecordingStream extends FilterOutputStream {\n    private final ByteArrayOutputStream capturedSystemOut = new ByteArrayOutputStream();\n\n    public SystemOutRecordingStream(OutputStream underlyingSystemOut) {\n        super(underlyingSystemOut);\n    }\n\n    @Override\n    public void write(byte b[]) throws IOException {\n        super.write(b);\n        capturedSystemOut.write(b);\n    }\n\n    @Override\n    public void write(byte b[], int off, int len) throws IOException {\n        super.write(b, off, len);\n        capturedSystemOut.write(b, off, len);\n    }\n\n    /**\n     * @return the capturedSystemOut\n     */\n    public String getCapturedSystemOut() {\n        return capturedSystemOut.toString();\n    }\n}","binary":"false","copies":"1","sample_repo_name":"torakiki/sejda","sample_ref":"refs/heads/master","sample_path":"sejda-console/src/test/java/org/sejda/cli/util/SystemOutRecordingStream.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"09517722a9fd256b8fc0ffe0aeeb5fbea4bae19b","size":"1054","content":"/**    \n *  Asmsupport is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage cn.wensiqun.asmsupport.client.block;\n\nimport cn.wensiqun.asmsupport.core.block.control.condition.KernelElse;\nimport cn.wensiqun.asmsupport.standard.block.branch.IElse;\n\npublic abstract class Else extends ProgramBlock<KernelElse> implements IElse  {\n\n\tpublic Else() {\n\t\tsetKernelBlock(new KernelElse() {\n\t\t\t@Override\n\t\t\tpublic void body() {\n\t\t\t\tElse.this.body();\n\t\t\t}\n\t\t});\n\t}\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"wensiqun/asmsupport","sample_ref":"refs/heads/master","sample_path":"asmsupport-client/src/main/java/cn/wensiqun/asmsupport/client/block/Else.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2af16582e78f0b09d98f12c7f5bced222df526d3","size":"1367","content":"package com.nianticproject.ingress.common.scanner.visuals;\n\nimport com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.math.Vector3;\nimport com.nianticproject.ingress.common.scanner.ej;\nimport com.nianticproject.ingress.common.scanner.visuals.b.l;\n\npublic final class t extends l\n{\n  private ej c;\n  private ej d;\n  private float e = 0.0F;\n  private float f = 0.0F;\n  private Vector2 g = new Vector2(0.0F, 0.0F);\n\n  public t(com.nianticproject.ingress.common.scanner.visuals.b.t paramt, ej paramej1, ej paramej2)\n  {\n    super(paramt);\n    this.c = paramej1;\n    this.d = paramej2;\n  }\n\n  public final void a()\n  {\n    this.e = 24.0F;\n    this.f = 24.0F;\n  }\n\n  public final void a(ej paramej)\n  {\n    this.d = paramej;\n  }\n\n  public final boolean a(float paramFloat)\n  {\n    Vector2 localVector21;\n    if (this.c == null)\n    {\n      localVector21 = this.g;\n      this.a.set(localVector21.x, this.e, localVector21.y);\n      if (this.d != null)\n        break label86;\n    }\n    label86: for (Vector2 localVector22 = this.g; ; localVector22 = this.d.b())\n    {\n      this.b.set(localVector22.x, this.f, localVector22.y);\n      return super.a(paramFloat);\n      localVector21 = this.c.b();\n      break;\n    }\n  }\n}\n\n/* Location:           classes_dex2jar.jar\n * Qualified Name:     com.nianticproject.ingress.common.scanner.visuals.t\n * JD-Core Version:    0.6.2\n */","binary":"false","copies":"1","sample_repo_name":"isnuryusuf/ingress-indonesia-dev","sample_ref":"refs/heads/master","sample_path":"apk/classes-ekstartk/com/nianticproject/ingress/common/scanner/visuals/t.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"dd4165c234e4f5f00678c214e28525f9f27c3354","size":"10721","content":"/**\n * jvmtop - java monitoring for the command-line\n *\n * Copyright (C) 2013 by Patric Rufflar. All rights reserved.\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n *\n * This code is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 only, as\n * published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\npackage com.jvmtop;\n\nimport java.io.BufferedOutputStream;\nimport java.io.FileDescriptor;\nimport java.io.FileOutputStream;\nimport java.io.PrintStream;\nimport java.lang.management.ManagementFactory;\nimport java.util.Arrays;\nimport java.util.Date;\nimport java.util.Locale;\nimport java.util.logging.ConsoleHandler;\nimport java.util.logging.Handler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport joptsimple.OptionParser;\nimport joptsimple.OptionSet;\n\nimport com.jvmtop.view.ConsoleView;\nimport com.jvmtop.view.VMDetailView;\nimport com.jvmtop.view.VMOverviewView;\nimport com.jvmtop.view.VMProfileView;\n\n/**\n * JvmTop entry point class.\n *\n * - parses program arguments\n * - selects console view\n * - prints header\n * - main \"iteration loop\"\n *\n * TODO: refactor to split these tasks\n *\n * @author paru\n *\n */\npublic class JvmTop\n{\n\n  public static final String                         VERSION                 = \"0.8.0 alpha\";\n\n  private Double                                     delay_                  = 1.0;\n\n  private Boolean                                    supportsSystemAverage_;\n\n  private java.lang.management.OperatingSystemMXBean localOSBean_;\n\n  private final static String                        CLEAR_TERMINAL_ANSI_CMD = new String(\n                                                                                 new byte[] {\n      (byte) 0x1b, (byte) 0x5b, (byte) 0x32, (byte) 0x4a, (byte) 0x1b,\n      (byte) 0x5b, (byte) 0x48                                                  });\n\n  private int                                        maxIterations_          = -1;\n\n  private static Logger                              logger;\n\n  private static OptionParser createOptionParser()\n  {\n    OptionParser parser = new OptionParser();\n    parser.acceptsAll(Arrays.asList(new String[] { \"help\", \"?\", \"h\" }),\n        \"shows this help\").forHelp();\n    parser\n        .accepts(\"once\",\n            \"jvmtop will exit after first output iteration [deprecated, use -n 1 instead]\");\n    parser\n        .acceptsAll(Arrays.asList(new String[] { \"n\", \"iteration\" }),\n            \"jvmtop will exit after n output iterations\").withRequiredArg()\n        .ofType(Integer.class);\n    parser\n        .acceptsAll(Arrays.asList(new String[] { \"d\", \"delay\" }),\n            \"delay between each output iteration\").withRequiredArg()\n        .ofType(Double.class);\n    parser.accepts(\"profile\", \"start CPU profiling at the specified jvm\");\n    parser.accepts(\"sysinfo\", \"outputs diagnostic information\");\n    parser.accepts(\"verbose\", \"verbose mode\");\n    parser.accepts(\"threadlimit\",\n        \"sets the number of displayed threads in detail mode\")\n        .withRequiredArg().ofType(Integer.class);\n    parser\n        .accepts(\"disable-threadlimit\", \"displays all threads in detail mode\");\n\n    parser\n        .acceptsAll(Arrays.asList(new String[] { \"p\", \"pid\" }),\n            \"PID to connect to\").withRequiredArg().ofType(Integer.class);\n\n    parser\n        .acceptsAll(Arrays.asList(new String[] { \"w\", \"width\" }),\n            \"Width in columns for the console display\").withRequiredArg().ofType(Integer.class);\n\n    parser\n        .accepts(\"threadnamewidth\",\n            \"sets displayed thread name length in detail mode (defaults to 30)\")\n        .withRequiredArg().ofType(Integer.class);\n\n    return parser;\n  }\n\n  public static void main(String[] args) throws Exception\n  {\n    Locale.setDefault(Locale.US);\n\n    logger = Logger.getLogger(\"jvmtop\");\n\n    OptionParser parser = createOptionParser();\n    OptionSet a = parser.parse(args);\n\n    if (a.has(\"help\"))\n    {\n      System.out.println(\"jvmtop - java monitoring for the command-line\");\n      System.out.println(\"Usage: jvmtop.sh [options...] [PID]\");\n      System.out.println(\"\");\n      parser.printHelpOn(System.out);\n      System.exit(0);\n    }\n    boolean sysInfoOption = a.has(\"sysinfo\");\n\n    Integer pid = null;\n\n    Integer width = null;\n\n    double delay = 1.0;\n\n    boolean profileMode = a.has(\"profile\");\n\n    Integer iterations = a.has(\"once\") ? 1 : -1;\n\n    Integer threadlimit = null;\n\n    boolean threadLimitEnabled = true;\n\n    Integer threadNameWidth = null;\n\n    if (a.hasArgument(\"delay\"))\n    {\n      delay = (Double) (a.valueOf(\"delay\"));\n      if (delay < 0.1d)\n      {\n        throw new IllegalArgumentException(\"Delay cannot be set below 0.1\");\n      }\n    }\n\n    if (a.hasArgument(\"n\"))\n    {\n      iterations = (Integer) a.valueOf(\"n\");\n    }\n\n    //to support PID as non option argument\n    if (a.nonOptionArguments().size() > 0)\n    {\n      pid = Integer.valueOf((String) a.nonOptionArguments().get(0));\n    }\n\n    if (a.hasArgument(\"pid\"))\n    {\n      pid = (Integer) a.valueOf(\"pid\");\n    }\n\n    if (a.hasArgument(\"width\"))\n    {\n      width = (Integer) a.valueOf(\"width\");\n    }\n\n    if (a.hasArgument(\"threadlimit\"))\n    {\n      threadlimit = (Integer) a.valueOf(\"threadlimit\");\n    }\n\n    if (a.has(\"disable-threadlimit\"))\n    {\n      threadLimitEnabled = false;\n    }\n\n    if (a.has(\"verbose\"))\n    {\n      fineLogging();\n      logger.setLevel(Level.ALL);\n      logger.fine(\"Verbosity mode.\");\n    }\n\n    if (a.hasArgument(\"threadnamewidth\"))\n    {\n      threadNameWidth = (Integer) a.valueOf(\"threadnamewidth\");\n    }\n\n    if (sysInfoOption)\n    {\n      outputSystemProps();\n    }\n    else\n    {\n      JvmTop jvmTop = new JvmTop();\n      jvmTop.setDelay(delay);\n      jvmTop.setMaxIterations(iterations);\n      if (pid == null)\n      {\n        jvmTop.run(new VMOverviewView(width));\n      }\n      else\n      {\n        if (profileMode)\n        {\n          jvmTop.run(new VMProfileView(pid, width));\n        }\n        else\n        {\n          VMDetailView vmDetailView = new VMDetailView(pid, width);\n          vmDetailView.setDisplayedThreadLimit(threadLimitEnabled);\n          if (threadlimit != null)\n          {\n            vmDetailView.setNumberOfDisplayedThreads(threadlimit);\n          }\n          if (threadNameWidth != null)\n          {\n            vmDetailView.setThreadNameDisplayWidth(threadNameWidth);\n          }\n          jvmTop.run(vmDetailView);\n\n        }\n\n      }\n    }\n  }\n\n  public int getMaxIterations()\n  {\n    return maxIterations_;\n  }\n\n  public void setMaxIterations(int iterations)\n  {\n    maxIterations_ = iterations;\n  }\n\n  private static void fineLogging()\n  {\n    //get the top Logger:\n    Logger topLogger = java.util.logging.Logger.getLogger(\"\");\n\n    // Handler for console (reuse it if it already exists)\n    Handler consoleHandler = null;\n    //see if there is already a console handler\n    for (Handler handler : topLogger.getHandlers())\n    {\n      if (handler instanceof ConsoleHandler)\n      {\n        //found the console handler\n        consoleHandler = handler;\n        break;\n      }\n    }\n\n    if (consoleHandler == null)\n    {\n      //there was no console handler found, create a new one\n      consoleHandler = new ConsoleHandler();\n      topLogger.addHandler(consoleHandler);\n    }\n    //set the console handler to fine:\n    consoleHandler.setLevel(java.util.logging.Level.FINEST);\n  }\n\n  private static void outputSystemProps()\n  {\n    for (Object key : System.getProperties().keySet())\n    {\n      System.out.println(key + \"=\" + System.getProperty(key + \"\"));\n    }\n  }\n\n  protected void run(ConsoleView view) throws Exception\n  {\n    try\n    {\n      System.setOut(new PrintStream(new BufferedOutputStream(\n          new FileOutputStream(FileDescriptor.out)), false));\n      int iterations = 0;\n      while (!view.shouldExit())\n      {\n        if (maxIterations_ > 1 || maxIterations_ == -1)\n        {\n          clearTerminal();\n        }\n        printTopBar();\n        view.printView();\n        System.out.flush();\n        iterations++;\n        if (iterations >= maxIterations_ && maxIterations_ > 0)\n        {\n          break;\n        }\n        view.sleep((int) (delay_ * 1000));\n      }\n    }\n    catch (NoClassDefFoundError e)\n    {\n      e.printStackTrace(System.err);\n\n      System.err.println(\"\");\n      System.err.println(\"ERROR: Some JDK classes cannot be found.\");\n      System.err\n          .println(\"       Please check if the JAVA_HOME environment variable has been set to a JDK path.\");\n      System.err.println(\"\");\n    }\n  }\n\n  /**\n   *\n   */\n  private void clearTerminal()\n  {\n    if (System.getProperty(\"os.name\").contains(\"Windows\"))\n    {\n      //hack\n      System.out\n          .printf(\"%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n%n\");\n    }\n    else if (System.getProperty(\"jvmtop.altClear\") != null)\n    {\n      System.out.print('\\f');\n    }\n    else\n    {\n      System.out.print(CLEAR_TERMINAL_ANSI_CMD);\n    }\n  }\n\n  public JvmTop()\n  {\n    localOSBean_ = ManagementFactory.getOperatingSystemMXBean();\n  }\n\n  /**\n   * @throws NoSuchMethodException\n   * @throws SecurityException\n   *\n   */\n  private void printTopBar()\n  {\n    System.out.printf(\" JvmTop %s - %8tT, %6s, %2d cpus, %15.15s\", VERSION,\n        new Date(), localOSBean_.getArch(),\n        localOSBean_.getAvailableProcessors(), localOSBean_.getName() + \" \"\n            + localOSBean_.getVersion());\n\n    if (supportSystemLoadAverage() && localOSBean_.getSystemLoadAverage() != -1)\n    {\n      System.out.printf(\", load avg %3.2f%n\",\n          localOSBean_.getSystemLoadAverage());\n    }\n    else\n    {\n      System.out.println();\n    }\n    System.out.println(\" https://github.com/patric-r/jvmtop\");\n    System.out.println();\n  }\n\n  private boolean supportSystemLoadAverage()\n  {\n    if (supportsSystemAverage_ == null)\n    {\n      try\n      {\n        supportsSystemAverage_ = (localOSBean_.getClass().getMethod(\n            \"getSystemLoadAverage\") != null);\n      }\n      catch (Throwable e)\n      {\n        supportsSystemAverage_ = false;\n      }\n    }\n    return supportsSystemAverage_;\n  }\n\n  public Double getDelay()\n  {\n    return delay_;\n  }\n\n  public void setDelay(Double delay)\n  {\n    delay_ = delay;\n  }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"patric-r/jvmtop","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/jvmtop/JvmTop.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"12df82d8837fee5a4b7c2b775139b417d4f7136f","size":"1034","content":"/**\n * Copyright (C) 2012 Red Hat, Inc. and/or its affiliates.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.jbpm.formModeler.core.processing;\n\nimport java.util.Map;\n\nimport org.jbpm.formModeler.api.model.Field;\n\npublic abstract class PersistentFieldHandler extends DefaultFieldHandler {\n    public abstract Object persist( Field field, String inputName, Object fieldValue ) throws Exception;\n    public abstract Object getStatusValue( Field field, String inputName, Object value, Map loadedObjects );\n}\n","binary":"false","copies":"1","sample_repo_name":"droolsjbpm/jbpm-form-modeler","sample_ref":"refs/heads/master","sample_path":"jbpm-form-modeler-core/jbpm-form-modeler-service/jbpm-form-modeler-ui/src/main/java/org/jbpm/formModeler/core/processing/PersistentFieldHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c3b9e02f1209e8cee99f0fa9b1a558f084acd835","size":"1821","content":"package com.socks.okhttp.plus.body;\n\nimport com.socks.okhttp.plus.listener.ProgressListener;\nimport com.socks.okhttp.plus.model.Progress;\nimport okhttp3.MediaType;\nimport okhttp3.ResponseBody;\n\nimport java.io.IOException;\n\nimport okio.Buffer;\nimport okio.BufferedSource;\nimport okio.ForwardingSource;\nimport okio.Okio;\nimport okio.Source;\n\n/**\n * Created by zhaokaiqiang on 15/11/23.\n */\npublic class ResponseProgressBody extends ResponseBody {\n\n    private final ResponseBody mResponseBody;\n    private final ProgressListener mProgressListener;\n    private BufferedSource bufferedSource;\n\n    public ResponseProgressBody(ResponseBody responseBody, ProgressListener progressListener) {\n        this.mResponseBody = responseBody;\n        this.mProgressListener = progressListener;\n    }\n\n    @Override\n    public MediaType contentType() {\n        return mResponseBody.contentType();\n    }\n\n    @Override\n    public long contentLength() {\n        return mResponseBody.contentLength();\n    }\n\n    @Override\n    public BufferedSource source() {\n        if (bufferedSource == null) {\n            bufferedSource = Okio.buffer(source(mResponseBody.source()));\n        }\n        return bufferedSource;\n    }\n\n    private Source source(Source source) {\n\n        return new ForwardingSource(source) {\n\n            long totalBytesRead;\n\n            @Override\n            public long read(Buffer sink, long byteCount) throws IOException {\n                long bytesRead = super.read(sink, byteCount);\n                totalBytesRead += ((bytesRead != -1) ? bytesRead : 0);\n                if (mProgressListener != null) {\n                    mProgressListener.onProgress(new Progress(totalBytesRead, mResponseBody.contentLength(), bytesRead == -1));\n                }\n                return bytesRead;\n            }\n        };\n    }\n}","binary":"false","copies":"1","sample_repo_name":"ZhaoKaiQiang/OkHttpPlus","sample_ref":"refs/heads/master","sample_path":"library/src/main/java/com/socks/okhttp/plus/body/ResponseProgressBody.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b225d2bfc2c325ed17c12e77b01ddb47b01c9d11","size":"3556","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.commons.lang3.concurrent;\n\nimport java.util.concurrent.atomic.AtomicLong;\n\n/**\n * <p>\n * A simple implementation of the <a\n * href=\"http://martinfowler.com/bliki/CircuitBreaker.html\">Circuit Breaker</a> pattern\n * that opens if the requested increment amount is greater than a given threshold.\n * </p>\n *\n * <p>\n * It contains an internal counter that starts in zero, and each call increments the counter by a given amount.\n * If the threshold is zero, the circuit breaker will be in a permanent <em>open</em> state.\n * </p>\n *\n * <p>\n * An example of use case could be a memory circuit breaker.\n * </p>\n *\n * <pre>\n * long threshold = 10L;\n * ThresholdCircuitBreaker breaker = new ThresholdCircuitBreaker(10L);\n * ...\n * public void handleRequest(Request request) {\n *     long memoryUsed = estimateMemoryUsage(request);\n *     if (breaker.incrementAndCheckState(memoryUsed)) {\n *         // actually handle this request\n *     } else {\n *         // do something else, e.g. send an error code\n *     }\n * }\n * </pre>\n *\n * <p>#Thread safe#</p>\n * @since 3.5\n */\npublic class ThresholdCircuitBreaker extends AbstractCircuitBreaker<Long> {\n    /**\n     * The initial value of the internal counter.\n     */\n    private final static long INITIAL_COUNT = 0L;\n\n    /**\n     * The threshold.\n     */\n    private final long threshold;\n\n    /**\n     * Controls the amount used.\n     */\n    private final AtomicLong used;\n\n    /**\n     * <p>Creates a new instance of {@code ThresholdCircuitBreaker} and initializes the threshold.</p>\n     *\n     * @param threshold the threshold.\n     */\n    public ThresholdCircuitBreaker(long threshold) {\n        super();\n        this.used = new AtomicLong(INITIAL_COUNT);\n        this.threshold = threshold;\n    }\n\n    /**\n     * Gets the threshold.\n     *\n     * @return the threshold\n     */\n    public long getThreshold() {\n        return threshold;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean checkState() throws CircuitBreakingException {\n        return isOpen();\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * <p>Resets the internal counter back to its initial value (zero).</p>\n     */\n    @Override\n    public void close() {\n        super.close();\n        this.used.set(INITIAL_COUNT);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * <p>If the threshold is zero, the circuit breaker will be in a permanent <em>open</em> state.</p>\n     */\n    @Override\n    public boolean incrementAndCheckState(Long increment) throws CircuitBreakingException {\n        if (threshold == 0) {\n            open();\n        }\n\n        long used = this.used.addAndGet(increment);\n        if (used > threshold) {\n            open();\n        }\n\n        return checkState();\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"apache/commons-lang","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7623ebd1ddbb4e28eebd645761eb8cee8b4eacb3","size":"2170","content":"package com.github.drapostolos.typeparser;\n\n/**\n * Callback interface that allows clients to define a {@link Parser} that decides during\n * runtime if it can parse the {@code input} string for a given {@code targetType}.\n * <p/>\n * If a DynamicParser can not parse, then the {@link DynamicParser#parse(String, ParserHelper)}\n * method is expected to return the {@link DynamicParser#TRY_NEXT} constant.\n * <p/>\n * The {@link TypeParser} will internally call all registered {@link DynamicParser} until the first\n * one found that does NOT return a {@link DynamicParser#TRY_NEXT} object.\n * <p/>\n * Implementations of this interface are expected to be immutable.\n * <p/>\n * Register {@link DynamicParser}s with this method\n * {@link TypeParserBuilder#registerDynamicParser(DynamicParser)}.\n * \n * @see <a href=\"https://github.com/drapostolos/type-parser/wiki/User-Guide\"\n *      target=\"_blank\">User-Guide</a>\n */\npublic interface DynamicParser extends Parser<Object> {\n\n    /**\n     * The next available {@link DynamicParser} will be called if this constant is returned from\n     * the {@link #parse(String, ParserHelper)} method.\n     */\n    public static final Object TRY_NEXT = new Object();\n\n    /**\n     * Parses the given string and converts it to an instance of {@code targetType}.\n     * If not possible to parse, then {@link DynamicParser#TRY_NEXT} constant must\n     * be returned by implementation.\n     * \n     * @param input pre-processed input string to parse. This may be a {@code NullString} and\n     *        implementations of this interface are expected to return a sensible value in such\n     *        case. Will never be {@code null}.\n     * @param helper Helper class injected automatically by the {@link TypeParser}.\n     * @return an instance of the {@code targetType}, or {@link DynamicParser#TRY_NEXT} if not\n     *         possible to parse.\n     * @throws RuntimeException Any exception thrown within this method will be wrapped and\n     *         re-thrown as a {@link TypeParserException} to the client.\n     * @see NullStringStrategy\n     * @see InputPreprocessor\n     */\n    @Override\n    Object parse(String input, ParserHelper helper);\n}\n","binary":"false","copies":"1","sample_repo_name":"drapostolos/type-parser","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/github/drapostolos/typeparser/DynamicParser.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8852456d3f05182edc3d1c1990a55203887632ff","size":"7596","content":"/**\n * The MIT License (MIT)\n *\n * Copyright (c) 2015 <mickael.jeanroy@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\npackage com.github.mjeanroy.springmvc.view.mustache.configuration;\n\nimport static com.github.mjeanroy.springmvc.view.mustache.commons.PreConditions.hasText;\nimport static com.github.mjeanroy.springmvc.view.mustache.commons.PreConditions.notNull;\n\nimport com.github.mjeanroy.springmvc.view.mustache.MustacheTemplateLoader;\nimport com.github.mjeanroy.springmvc.view.mustache.core.CompositeResourceLoader;\nimport com.github.mjeanroy.springmvc.view.mustache.core.DefaultTemplateLoader;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.config.AbstractFactoryBean;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.context.ResourceLoaderAware;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\nimport org.springframework.context.support.FileSystemXmlApplicationContext;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.util.ClassUtils;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\n\n/**\n * Factory bean for {@link com.github.mjeanroy.springmvc.view.mustache.MustacheTemplateLoader} instance.\n */\npublic class MustacheTemplateLoaderFactoryBean extends AbstractFactoryBean<MustacheTemplateLoader> implements FactoryBean<MustacheTemplateLoader>, ApplicationContextAware, ResourceLoaderAware {\n\n\t/**\n\t * Class logger.\n\t */\n\tprivate static final Logger log = LoggerFactory.getLogger(MustacheTemplateLoaderFactoryBean.class);\n\n\t/**\n\t * Classpath resource loader, implemented as a singleton.\n\t */\n\tprivate static final ClasspathResourceLoader CLASSPATH_RESOURCE_LOADER = new ClasspathResourceLoader();\n\n\t/**\n\t * Current application context.\n\t */\n\tprivate ApplicationContext applicationContext;\n\n\t/**\n\t * Current resource loader.\n\t */\n\tprivate ResourceLoader resourceLoader;\n\n\t/**\n\t * @see {@link com.github.mjeanroy.springmvc.view.mustache.MustacheTemplateLoader#getPrefix()}\n\t */\n\tprivate String prefix;\n\n\t/**\n\t * @see {@link com.github.mjeanroy.springmvc.view.mustache.MustacheTemplateLoader#getSuffix()}\n\t */\n\tprivate String suffix;\n\n\t/**\n\t * @see {@link com.github.mjeanroy.springmvc.view.mustache.MustacheTemplateLoader#addPartialAliases(java.util.Map)}\n\t */\n\tprivate final Map<String, String> partialAliases;\n\n\t/**\n\t * Default constructor.\n\t */\n\tpublic MustacheTemplateLoaderFactoryBean() {\n\t\tsuper();\n\t\tthis.partialAliases = new HashMap<String, String>();\n\t}\n\n\t@Override\n\tpublic Class<?> getObjectType() {\n\t\treturn MustacheTemplateLoader.class;\n\t}\n\n\t@Override\n\tprotected MustacheTemplateLoader createInstance() throws Exception {\n\t\tlog.debug(\"Create instance of {}\", DefaultTemplateLoader.class);\n\t\tDefaultTemplateLoader templateLoader = new DefaultTemplateLoader(computeResourceLoader());\n\t\ttemplateLoader.setPrefix(prefix);\n\t\ttemplateLoader.setSuffix(suffix);\n\t\ttemplateLoader.addPartialAliases(partialAliases);\n\t\treturn templateLoader;\n\t}\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n\t\tthis.applicationContext = applicationContext;\n\t}\n\n\t@Override\n\tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n\t\tthis.resourceLoader = resourceLoader;\n\t}\n\n\tprotected ResourceLoader computeResourceLoader() {\n\t\tlog.debug(\"Build composite resource loader\");\n\t\tCollection<ResourceLoader> resourceLoaders = new LinkedHashSet<ResourceLoader>();\n\n\t\tif (resourceLoader != null) {\n\t\t\tlog.trace(\" => Add custom resource loader: {}\", resourceLoader);\n\t\t\tresourceLoaders.add(resourceLoader);\n\t\t}\n\n\t\tif (applicationContext != null) {\n\t\t\tlog.trace(\" => Add application context as resource loader: {}\", applicationContext);\n\t\t\tresourceLoaders.add(applicationContext);\n\t\t}\n\n\t\tif (resourceLoaders.isEmpty()) {\n\t\t\tlog.trace(\" => Add instance of ClassPathXmlApplicationContext as resource loader\");\n\t\t\tresourceLoaders.add(new ClassPathXmlApplicationContext());\n\n\t\t\tlog.trace(\" => Add instance of FileSystemXmlApplicationContext as resource loader\");\n\t\t\tresourceLoaders.add(new FileSystemXmlApplicationContext());\n\t\t}\n\n\t\tlog.debug(\"Add instance of classpath resource loader\");\n\t\tresourceLoaders.add(CLASSPATH_RESOURCE_LOADER);\n\n\t\tlog.debug(\"Create composite resource loader using: {}\", resourceLoaders);\n\t\tlog.trace(\" => Number of loaders: {}\", resourceLoaders.size());\n\t\treturn new CompositeResourceLoader(resourceLoaders);\n\t}\n\n\t/**\n\t * Set {@link #prefix}\n\t *\n\t * @param prefix New {@link #prefix}\n\t */\n\tpublic void setPrefix(String prefix) {\n\t\tthis.prefix = prefix;\n\t}\n\n\t/**\n\t * Set {@link #suffix}\n\t *\n\t * @param suffix New {@link #suffix}\n\t */\n\tpublic void setSuffix(String suffix) {\n\t\tthis.suffix = suffix;\n\t}\n\n\t/**\n\t * Set {@link #partialAliases}\n\t *\n\t * @param partialAliases New {@link #partialAliases}\n\t */\n\tpublic void setPartialAliases(Map<String, String> partialAliases) {\n\t\tthis.partialAliases.putAll(partialAliases);\n\t}\n\n\t/**\n\t * Implementation of spring {@link org.springframework.core.io.ResourceLoader}\n\t * that will always check for resources in the classpath (not the root of the application\n\t * context).\n\t *\n\t * This class does not guarantee that resource patterns such as \"file:/\" or \"http:\" will\n\t * work, that's why this class should remain private and should not be used outside.\n\t */\n\tprivate static final class ClasspathResourceLoader implements ResourceLoader {\n\n\t\t/**\n\t\t * Classpath prefix.\n\t\t */\n\t\tprivate static final String CLASSPATH_PREFIX = \"classpath:\";\n\n\t\t/**\n\t\t * Create new resource loader.\n\t\t */\n\t\tprivate ClasspathResourceLoader() {\n\t\t}\n\n\t\t@Override\n\t\tpublic Resource getResource(String location) {\n\t\t\tnotNull(location, \"Resource location must not be null\");\n\t\t\thasText(location, \"Resource location must be defined\");\n\n\t\t\t// Remove the classpath if specified.\n\t\t\t// This should never happen since a previous resource loader will probably be used\n\t\t\t// before.\n\t\t\tString classpathLocation = location;\n\t\t\tif (location.startsWith(CLASSPATH_PREFIX)) {\n\t\t\t\tclasspathLocation = location.substring(CLASSPATH_PREFIX.length());\n\t\t\t}\n\n\t\t\treturn new ClassPathResource(classpathLocation);\n\t\t}\n\n\t\t@Override\n\t\tpublic ClassLoader getClassLoader() {\n\t\t\treturn ClassUtils.getDefaultClassLoader();\n\t\t}\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"mjeanroy/springmvc-mustache","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/github/mjeanroy/springmvc/view/mustache/configuration/MustacheTemplateLoaderFactoryBean.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"534a6f3c7c8e3c8540a81ecf151f02871bfe3908","size":"3118","content":"// Copyright (c) 2015 D1SM.net\r\n\r\npackage com.pm.client.ui;\r\n\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.event.MouseListener;\r\nimport java.util.List;\r\n\r\nimport javax.swing.JTable;\r\nimport javax.swing.ListSelectionModel;\r\nimport javax.swing.SwingUtilities;\r\nimport javax.swing.event.ListSelectionEvent;\r\nimport javax.swing.event.ListSelectionListener;\r\n\r\nimport com.pm.bean.MapRule;\r\n\r\npublic class MapRuleListTable extends JTable{\r\n\t\r\n\tprivate static final long serialVersionUID = -547936371303904463L;\r\n\t\r\n\tMapRuleListModel model;\r\n\t\r\n\tMapRuleListTable table;\r\n\t\r\n\tMapRuleListTable(final PMClientUI pui,final MapRuleListModel model){\r\n\t\tsuper();\r\n\t\tthis.model=model;\r\n\t\ttable=this;\r\n\t\tsetModel(model);\r\n\r\n\t\t//setAutoCreateRowSorter(true);\r\n\t\tsetSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n\t\t//setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\r\n\t\tsetRowSorter(null);\r\n\t\t\r\n\t\tgetColumnModel().getColumn(0).setMinWidth(30);\r\n//\t\tgetColumnModel().getColumn(1).setMinWidth(80);\r\n//\t\tgetColumnModel().getColumn(2).setMinWidth(100);\r\n\t\t\r\n\t\tAlignCellRenderer renderer=new AlignCellRenderer(AlignCellRenderer.CENTER);\r\n\t\t\r\n\t\tMapRuleRender rr=new MapRuleRender(pui);\r\n\t\tgetColumnModel().getColumn(0).setCellRenderer(rr);\r\n\t\tsetRowHeight(50);\r\n\t\t\r\n\t\tnew Thread(){\r\n\t\t\tpublic void run() {\r\n\t\t\t\twhile(true){\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tThread.sleep(1000);\r\n\t\t\t\t\t\trefresh();\r\n\t\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}.start();\r\n\t\t\r\n\t\taddMouseListener(new MouseListener() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void mouseReleased(MouseEvent e) {}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void mousePressed(MouseEvent e) {\r\n\t\t\t\tif(e.getButton()==MouseEvent.BUTTON3&&e.getClickCount()==1){\r\n\t\t\t\tint index=rowAtPoint(e.getPoint());\r\n\t\t\t\tint modelIndex=convertRowIndexToModel(index);\r\n\t\t\t\tgetSelectionModel().setSelectionInterval(modelIndex, modelIndex);\r\n\t\t\t\t\r\n\t\t\t\tMapRule mapRule=getModel().getMapRuleAt(modelIndex);\r\n\t\t\t\tMapRuleMenu mapRuleMenu=new MapRuleMenu(pui,mapRule);\r\n\t\t\t\tmapRuleMenu.show(e.getComponent(),e.getX(),e.getY());\r\n\t\t\t\t\r\n\t\t\t}}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void mouseExited(MouseEvent e) {}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void mouseEntered(MouseEvent e) {}\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void mouseClicked(MouseEvent e) {\r\n\t\t\t\r\n\r\n\t\t\t\tif(e.getButton()==MouseEvent.BUTTON1&&e.getClickCount()==2){\r\n\t\t\t\t\teditRule();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t}\r\n\t\r\n\tvoid editRule(){\r\n\r\n\t\tint index=getSelectedRow();\r\n\t\tint modelIndex=convertRowIndexToModel(index);\r\n\t\tMapRule mapRule=getModel().getMapRuleAt(modelIndex);\r\n\t\t\r\n\t\tAddTcpMapRuleFrame af=new AddTcpMapRuleFrame(PMClientUI.get(),PMClientUI.get().getMainFrame(),mapRule,AddTcpMapRuleFrame.type_edit);\r\n\t\t//af.setVisible(true);\r\n\t\r\n\t}\r\n\t\r\n\tvoid refresh(){\r\n\t\tSwingUtilities.invokeLater(new Runnable() {\r\n\t\t\t\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\tupdateUI();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\t\r\n\tpublic void setMapRuleList(List<MapRule> list){\r\n\t\tmodel.setMapRuleList(list);\r\n\t}\r\n\r\n\tpublic MapRuleListModel getModel() {\r\n\t\treturn model;\r\n\t}\r\n\r\n\tpublic void setModel(MapRuleListModel model) {\r\n\t\tsuper.setModel(model);\r\n\t\tthis.model = model;\r\n\t}\r\n\t\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"d1sm/xtunnel","sample_ref":"refs/heads/master","sample_path":"src/com/pm/client/ui/MapRuleListTable.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"634746467d6d70a984f2e6b7345239058834eede","size":"15565","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.clinical.forms.acutetheatrelist;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic final class GlobalContext extends ims.framework.FormContext implements Serializable\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tpublic GlobalContext(ims.framework.Context context)\r\n\t{\r\n\t\tsuper(context);\r\n\r\n\t\tCore = new CoreContext(context);\r\n\t\tScheduling = new SchedulingContext(context);\r\n\t\tClinical = new ClinicalContext(context);\r\n\t\tRefMan = new RefManContext(context);\r\n\t}\r\n\tpublic final class CoreContext implements Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t\tprivate CoreContext(ims.framework.Context context)\r\n\t\t{\r\n\t\t\tthis.context = context;\r\n\r\n\t\t}\r\n\r\n\t\tpublic boolean getCurrentCareContextIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_CoreCurrentCareContext.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.core.vo.CareContextShortVo getCurrentCareContext()\r\n\t\t{\r\n\t\t\treturn (ims.core.vo.CareContextShortVo)cx_CoreCurrentCareContext.getValue(context);\r\n\t\t}\r\n\t\tpublic void setCurrentCareContext(ims.core.vo.CareContextShortVo value)\r\n\t\t{\r\n\t\t\tcx_CoreCurrentCareContext.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_CoreCurrentCareContext = new ims.framework.ContextVariable(\"Core.CurrentCareContext\", \"_cvp_Core.CurrentCareContext\");\r\n\t\tpublic boolean getCommentDialogStringIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_CoreCommentDialogString.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic String getCommentDialogString()\r\n\t\t{\r\n\t\t\treturn (String)cx_CoreCommentDialogString.getValue(context);\r\n\t\t}\r\n\t\tpublic void setCommentDialogString(String value)\r\n\t\t{\r\n\t\t\tcx_CoreCommentDialogString.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_CoreCommentDialogString = new ims.framework.ContextVariable(\"Core.CommentDialogString\", \"_cv_Core.CommentDialogString\");\r\n\t\tpublic boolean getCommentDialogTitleIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_CoreCommentDialogTitle.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic String getCommentDialogTitle()\r\n\t\t{\r\n\t\t\treturn (String)cx_CoreCommentDialogTitle.getValue(context);\r\n\t\t}\r\n\t\tpublic void setCommentDialogTitle(String value)\r\n\t\t{\r\n\t\t\tcx_CoreCommentDialogTitle.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_CoreCommentDialogTitle = new ims.framework.ContextVariable(\"Core.CommentDialogTitle\", \"_cv_Core.CommentDialogTitle\");\r\n\t\tpublic boolean getPatientShortIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_CorePatientShort.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.core.vo.PatientShort getPatientShort()\r\n\t\t{\r\n\t\t\treturn (ims.core.vo.PatientShort)cx_CorePatientShort.getValue(context);\r\n\t\t}\r\n\t\tpublic void setPatientShort(ims.core.vo.PatientShort value)\r\n\t\t{\r\n\t\t\tcx_CorePatientShort.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_CorePatientShort = new ims.framework.ContextVariable(\"Core.PatientShort\", \"_cvp_Core.PatientShort\");\r\n\r\n\t\tprivate ims.framework.Context context;\r\n\t}\r\n\tpublic final class SchedulingContext implements Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t\tprivate SchedulingContext(ims.framework.Context context)\r\n\t\t{\r\n\t\t\tthis.context = context;\r\n\r\n\t\t}\r\n\r\n\t\tpublic boolean getApptCancelStatusIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_SchedulingApptCancelStatus.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.scheduling.vo.Appointment_StatusVo getApptCancelStatus()\r\n\t\t{\r\n\t\t\treturn (ims.scheduling.vo.Appointment_StatusVo)cx_SchedulingApptCancelStatus.getValue(context);\r\n\t\t}\r\n\t\tpublic void setApptCancelStatus(ims.scheduling.vo.Appointment_StatusVo value)\r\n\t\t{\r\n\t\t\tcx_SchedulingApptCancelStatus.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_SchedulingApptCancelStatus = new ims.framework.ContextVariable(\"Scheduling.ApptCancelStatus\", \"_cv_Scheduling.ApptCancelStatus\");\r\n\t\tpublic boolean getTheatreTypeIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_SchedulingTheatreType.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.scheduling.vo.lookups.TheatreType getTheatreType()\r\n\t\t{\r\n\t\t\treturn (ims.scheduling.vo.lookups.TheatreType)cx_SchedulingTheatreType.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreType(ims.scheduling.vo.lookups.TheatreType value)\r\n\t\t{\r\n\t\t\tcx_SchedulingTheatreType.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_SchedulingTheatreType = new ims.framework.ContextVariable(\"Scheduling.TheatreType\", \"_cv_Scheduling.TheatreType\");\r\n\t\tpublic boolean getTheatreSessionIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_SchedulingTheatreSession.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.scheduling.vo.Sch_SessionRefVo getTheatreSession()\r\n\t\t{\r\n\t\t\treturn (ims.scheduling.vo.Sch_SessionRefVo)cx_SchedulingTheatreSession.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreSession(ims.scheduling.vo.Sch_SessionRefVo value)\r\n\t\t{\r\n\t\t\tcx_SchedulingTheatreSession.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_SchedulingTheatreSession = new ims.framework.ContextVariable(\"Scheduling.TheatreSession\", \"_cv_Scheduling.TheatreSession\");\r\n\t\tpublic boolean getTheatreServiceIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_SchedulingTheatreService.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.core.vo.ServiceLiteVo getTheatreService()\r\n\t\t{\r\n\t\t\treturn (ims.core.vo.ServiceLiteVo)cx_SchedulingTheatreService.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreService(ims.core.vo.ServiceLiteVo value)\r\n\t\t{\r\n\t\t\tcx_SchedulingTheatreService.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_SchedulingTheatreService = new ims.framework.ContextVariable(\"Scheduling.TheatreService\", \"_cv_Scheduling.TheatreService\");\r\n\t\tpublic boolean getTheatreProcedureIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_SchedulingTheatreProcedure.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.core.vo.ProcedureLiteVo getTheatreProcedure()\r\n\t\t{\r\n\t\t\treturn (ims.core.vo.ProcedureLiteVo)cx_SchedulingTheatreProcedure.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreProcedure(ims.core.vo.ProcedureLiteVo value)\r\n\t\t{\r\n\t\t\tcx_SchedulingTheatreProcedure.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_SchedulingTheatreProcedure = new ims.framework.ContextVariable(\"Scheduling.TheatreProcedure\", \"_cv_Scheduling.TheatreProcedure\");\r\n\t\tpublic boolean getTheatreConsultantIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_SchedulingTheatreConsultant.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.vo.interfaces.IMos getTheatreConsultant()\r\n\t\t{\r\n\t\t\treturn (ims.vo.interfaces.IMos)cx_SchedulingTheatreConsultant.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreConsultant(ims.vo.interfaces.IMos value)\r\n\t\t{\r\n\t\t\tcx_SchedulingTheatreConsultant.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_SchedulingTheatreConsultant = new ims.framework.ContextVariable(\"Scheduling.TheatreConsultant\", \"_cv_Scheduling.TheatreConsultant\");\r\n\t\tpublic boolean getBookingAppointmentRefIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_SchedulingBookingAppointmentRef.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.scheduling.vo.Booking_AppointmentRefVo getBookingAppointmentRef()\r\n\t\t{\r\n\t\t\treturn (ims.scheduling.vo.Booking_AppointmentRefVo)cx_SchedulingBookingAppointmentRef.getValue(context);\r\n\t\t}\r\n\t\tpublic void setBookingAppointmentRef(ims.scheduling.vo.Booking_AppointmentRefVo value)\r\n\t\t{\r\n\t\t\tcx_SchedulingBookingAppointmentRef.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_SchedulingBookingAppointmentRef = new ims.framework.ContextVariable(\"Scheduling.BookingAppointmentRef\", \"_cv_Scheduling.BookingAppointmentRef\");\r\n\t\tpublic boolean getTheatreAppointmentIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_SchedulingTheatreAppointment.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.scheduling.vo.BookingAppointmentTheatreVo getTheatreAppointment()\r\n\t\t{\r\n\t\t\treturn (ims.scheduling.vo.BookingAppointmentTheatreVo)cx_SchedulingTheatreAppointment.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreAppointment(ims.scheduling.vo.BookingAppointmentTheatreVo value)\r\n\t\t{\r\n\t\t\tcx_SchedulingTheatreAppointment.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_SchedulingTheatreAppointment = new ims.framework.ContextVariable(\"Scheduling.TheatreAppointment\", \"_cv_Scheduling.TheatreAppointment\");\r\n\r\n\t\tprivate ims.framework.Context context;\r\n\t}\r\n\tpublic final class ClinicalContext implements Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t\tprivate ClinicalContext(ims.framework.Context context)\r\n\t\t{\r\n\t\t\tthis.context = context;\r\n\r\n\t\t}\r\n\r\n\t\tpublic boolean getTheatreBookingRefIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_ClinicalTheatreBookingRef.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.scheduling.vo.TheatreBookingRefVo getTheatreBookingRef()\r\n\t\t{\r\n\t\t\treturn (ims.scheduling.vo.TheatreBookingRefVo)cx_ClinicalTheatreBookingRef.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreBookingRef(ims.scheduling.vo.TheatreBookingRefVo value)\r\n\t\t{\r\n\t\t\tcx_ClinicalTheatreBookingRef.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_ClinicalTheatreBookingRef = new ims.framework.ContextVariable(\"Clinical.TheatreBookingRef\", \"_cv_Clinical.TheatreBookingRef\");\r\n\t\tpublic boolean getTheatreAppointmentRefIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_ClinicalTheatreAppointmentRef.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.scheduling.vo.Booking_AppointmentRefVo getTheatreAppointmentRef()\r\n\t\t{\r\n\t\t\treturn (ims.scheduling.vo.Booking_AppointmentRefVo)cx_ClinicalTheatreAppointmentRef.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreAppointmentRef(ims.scheduling.vo.Booking_AppointmentRefVo value)\r\n\t\t{\r\n\t\t\tcx_ClinicalTheatreAppointmentRef.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_ClinicalTheatreAppointmentRef = new ims.framework.ContextVariable(\"Clinical.TheatreAppointmentRef\", \"_cv_Clinical.TheatreAppointmentRef\");\r\n\t\tpublic boolean getAvailableSafetyBriefAppointmentsIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_ClinicalAvailableSafetyBriefAppointments.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection getAvailableSafetyBriefAppointments()\r\n\t\t{\r\n\t\t\treturn (ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection)cx_ClinicalAvailableSafetyBriefAppointments.getValue(context);\r\n\t\t}\r\n\t\tpublic void setAvailableSafetyBriefAppointments(ims.clinical.vo.AcuteTheatreListBookingAppointmentVoCollection value)\r\n\t\t{\r\n\t\t\tcx_ClinicalAvailableSafetyBriefAppointments.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_ClinicalAvailableSafetyBriefAppointments = new ims.framework.ContextVariable(\"Clinical.AvailableSafetyBriefAppointments\", \"_cv_Clinical.AvailableSafetyBriefAppointments\");\r\n\t\tpublic boolean getTheatreSessionStartDateTimeIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_ClinicalTheatreSessionStartDateTime.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.framework.utils.DateTime getTheatreSessionStartDateTime()\r\n\t\t{\r\n\t\t\treturn (ims.framework.utils.DateTime)cx_ClinicalTheatreSessionStartDateTime.getValue(context);\r\n\t\t}\r\n\t\tpublic void setTheatreSessionStartDateTime(ims.framework.utils.DateTime value)\r\n\t\t{\r\n\t\t\tcx_ClinicalTheatreSessionStartDateTime.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_ClinicalTheatreSessionStartDateTime = new ims.framework.ContextVariable(\"Clinical.TheatreSessionStartDateTime\", \"_cv_Clinical.TheatreSessionStartDateTime\");\r\n\t\tpublic boolean getAcuteTheatreListFilterVoIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_ClinicalAcuteTheatreListFilterVo.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.clinical.vo.AcuteTheatreListFilterVo getAcuteTheatreListFilterVo()\r\n\t\t{\r\n\t\t\treturn (ims.clinical.vo.AcuteTheatreListFilterVo)cx_ClinicalAcuteTheatreListFilterVo.getValue(context);\r\n\t\t}\r\n\t\tpublic void setAcuteTheatreListFilterVo(ims.clinical.vo.AcuteTheatreListFilterVo value)\r\n\t\t{\r\n\t\t\tcx_ClinicalAcuteTheatreListFilterVo.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_ClinicalAcuteTheatreListFilterVo = new ims.framework.ContextVariable(\"Clinical.AcuteTheatreListFilterVo\", \"_cvp_Clinical.AcuteTheatreListFilterVo\");\r\n\t\tpublic boolean getIntraOpRecoveryMannerIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_ClinicalIntraOpRecoveryManner.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic Boolean getIntraOpRecoveryManner()\r\n\t\t{\r\n\t\t\treturn (Boolean)cx_ClinicalIntraOpRecoveryManner.getValue(context);\r\n\t\t}\r\n\t\tpublic void setIntraOpRecoveryManner(Boolean value)\r\n\t\t{\r\n\t\t\tcx_ClinicalIntraOpRecoveryManner.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_ClinicalIntraOpRecoveryManner = new ims.framework.ContextVariable(\"Clinical.IntraOpRecoveryManner\", \"_cv_Clinical.IntraOpRecoveryManner\");\r\n\r\n\t\tprivate ims.framework.Context context;\r\n\t}\r\n\tpublic final class RefManContext implements Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\r\n\t\tprivate RefManContext(ims.framework.Context context)\r\n\t\t{\r\n\t\t\tthis.context = context;\r\n\r\n\t\t}\r\n\r\n\t\tpublic boolean getCatsReferralIsNotNull()\r\n\t\t{\r\n\t\t\treturn !cx_RefManCatsReferral.getValueIsNull(context);\r\n\t\t}\r\n\t\tpublic ims.RefMan.vo.CatsReferralRefVo getCatsReferral()\r\n\t\t{\r\n\t\t\treturn (ims.RefMan.vo.CatsReferralRefVo)cx_RefManCatsReferral.getValue(context);\r\n\t\t}\r\n\t\tpublic void setCatsReferral(ims.RefMan.vo.CatsReferralRefVo value)\r\n\t\t{\r\n\t\t\tcx_RefManCatsReferral.setValue(context, value);\r\n\t\t}\r\n\r\n\t\tprivate ims.framework.ContextVariable cx_RefManCatsReferral = new ims.framework.ContextVariable(\"RefMan.CatsReferral\", \"_cvp_RefMan.CatsReferral\");\r\n\r\n\t\tprivate ims.framework.Context context;\r\n\t}\r\n\r\n\tpublic CoreContext Core;\r\n\tpublic SchedulingContext Scheduling;\r\n\tpublic ClinicalContext Clinical;\r\n\tpublic RefManContext RefMan;\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Clinical/src/ims/clinical/forms/acutetheatrelist/GlobalContext.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"36ae43df0da57d66a43dc35f7fd489a9517df693","size":"3595","content":"\npackage org.smpte_ra.schemas.st2067_2_2013;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlType;\n\n\n/**\n * <p>Java class for TrackFileResourceType complex type.\n * \n * <p>The following schema fragment specifies the expected content contained within this class.\n * \n * <pre>\n * &lt;complexType name=\"TrackFileResourceType\">\n *   &lt;complexContent>\n *     &lt;extension base=\"{http://www.smpte-ra.org/schemas/2067-3/2013}BaseResourceType\">\n *       &lt;sequence>\n *         &lt;element name=\"SourceEncoding\" type=\"{http://www.smpte-ra.org/schemas/433/2008/dcmlTypes/}UUIDType\"/>\n *         &lt;element name=\"TrackFileId\" type=\"{http://www.smpte-ra.org/schemas/433/2008/dcmlTypes/}UUIDType\"/>\n *         &lt;element name=\"KeyId\" type=\"{http://www.smpte-ra.org/schemas/433/2008/dcmlTypes/}UUIDType\" minOccurs=\"0\"/>\n *         &lt;element name=\"Hash\" type=\"{http://www.w3.org/2001/XMLSchema}base64Binary\" minOccurs=\"0\"/>\n *       &lt;/sequence>\n *     &lt;/extension>\n *   &lt;/complexContent>\n * &lt;/complexType>\n * </pre>\n * \n * \n */\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"TrackFileResourceType\", namespace = \"http://www.smpte-ra.org/schemas/2067-3/2013\", propOrder = {\n    \"sourceEncoding\",\n    \"trackFileId\",\n    \"keyId\",\n    \"hash\"\n})\npublic class TrackFileResourceType\n    extends BaseResourceType\n{\n\n    @XmlElement(name = \"SourceEncoding\", required = true)\n    protected String sourceEncoding;\n    @XmlElement(name = \"TrackFileId\", required = true)\n    protected String trackFileId;\n    @XmlElement(name = \"KeyId\")\n    protected String keyId;\n    @XmlElement(name = \"Hash\")\n    protected byte[] hash;\n\n    /**\n     * Gets the value of the sourceEncoding property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getSourceEncoding() {\n        return sourceEncoding;\n    }\n\n    /**\n     * Sets the value of the sourceEncoding property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setSourceEncoding(String value) {\n        this.sourceEncoding = value;\n    }\n\n    /**\n     * Gets the value of the trackFileId property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getTrackFileId() {\n        return trackFileId;\n    }\n\n    /**\n     * Sets the value of the trackFileId property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setTrackFileId(String value) {\n        this.trackFileId = value;\n    }\n\n    /**\n     * Gets the value of the keyId property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getKeyId() {\n        return keyId;\n    }\n\n    /**\n     * Sets the value of the keyId property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setKeyId(String value) {\n        this.keyId = value;\n    }\n\n    /**\n     * Gets the value of the hash property.\n     * \n     * @return\n     *     possible object is\n     *     byte[]\n     */\n    public byte[] getHash() {\n        return hash;\n    }\n\n    /**\n     * Sets the value of the hash property.\n     * \n     * @param value\n     *     allowed object is\n     *     byte[]\n     */\n    public void setHash(byte[] value) {\n        this.hash = ((byte[]) value);\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"Netflix/photon","sample_ref":"refs/heads/master","sample_path":"generated/org/smpte_ra/schemas/st2067_2_2013/TrackFileResourceType.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"934b2ec06e2fdb4f8606a0a61a0eb39a6ffa6308","size":"7514","content":"/*\n * Copyright 2016 Esri. Licensed under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n * or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\npackage com.esri.samples.search;\n\nimport java.util.HashMap;\nimport java.util.List;\n\nimport javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.geometry.Point2D;\nimport javafx.geometry.Pos;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Alert;\nimport javafx.scene.control.ProgressIndicator;\nimport javafx.scene.image.Image;\nimport javafx.scene.input.MouseButton;\nimport javafx.scene.layout.StackPane;\nimport javafx.stage.Stage;\n\nimport com.esri.arcgisruntime.concurrent.ListenableFuture;\nimport com.esri.arcgisruntime.geometry.Point;\nimport com.esri.arcgisruntime.mapping.ArcGISMap;\nimport com.esri.arcgisruntime.mapping.Basemap;\nimport com.esri.arcgisruntime.mapping.view.Callout;\nimport com.esri.arcgisruntime.mapping.view.Callout.LeaderPosition;\nimport com.esri.arcgisruntime.mapping.view.Graphic;\nimport com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\nimport com.esri.arcgisruntime.mapping.view.MapView;\nimport com.esri.arcgisruntime.symbology.PictureMarkerSymbol;\nimport com.esri.arcgisruntime.tasks.geocode.GeocodeResult;\nimport com.esri.arcgisruntime.tasks.geocode.LocatorTask;\nimport com.esri.arcgisruntime.tasks.geocode.ReverseGeocodeParameters;\n\npublic class ReverseGeocodeOnline extends Application {\n\n  private MapView mapView;\n  private LocatorTask locatorTask;\n  private GraphicsOverlay graphicsOverlay;\n  private PictureMarkerSymbol pinSymbol;\n  private ProgressIndicator progressIndicator;\n\n  @Override\n  public void start(Stage stage) throws Exception {\n\n    try {\n      // create stack pane and application scene\n      StackPane stackPane = new StackPane();\n      Scene scene = new Scene(stackPane);\n\n      // set title, size, and add scene to stage\n      stage.setTitle(\"Reverse Geocode Online Sample\");\n      stage.setWidth(800);\n      stage.setHeight(700);\n      stage.setScene(scene);\n      stage.show();\n\n      // add a progress indicator\n      progressIndicator = new ProgressIndicator(ProgressIndicator.INDETERMINATE_PROGRESS);\n      progressIndicator.setMaxSize(40, 40);\n      progressIndicator.setStyle(\"-fx-progress-color: white;\");\n      progressIndicator.setVisible(false);\n\n      // create ArcGISMap with imagery basemap centered over the US\n      ArcGISMap map = new ArcGISMap(Basemap.Type.IMAGERY_WITH_LABELS, 40, -95, 4);\n\n      // create a view and set ArcGISMap to it\n      mapView = new MapView();\n      mapView.setMap(map);\n\n      // add a graphics overlay\n      graphicsOverlay = new GraphicsOverlay();\n      mapView.getGraphicsOverlays().add(graphicsOverlay);\n\n      // set the callouts default style\n      Callout callout = mapView.getCallout();\n      callout.setLeaderPosition(LeaderPosition.BOTTOM);\n      callout.setTranslateY(-40); // half image height\n\n      // create a locator task\n      locatorTask = new LocatorTask(\"http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer\");\n\n      // create geocode task parameters\n      ReverseGeocodeParameters reverseGeocodeParameters = new ReverseGeocodeParameters();\n      reverseGeocodeParameters.setOutputSpatialReference(mapView.getSpatialReference());\n\n      // create a pin graphic\n      Image img = new Image(getClass().getResourceAsStream(\"/pin.png\"), 0, 80, true, true);\n      pinSymbol = new PictureMarkerSymbol(img);\n      pinSymbol.loadAsync();\n\n      // get geocode on click\n      mapView.setOnMouseClicked(evt -> {\n        // check that the primary mouse button was clicked and user is not\n        // panning\n        if (evt.isStillSincePress() && evt.getButton() == MouseButton.PRIMARY) {\n\n          // create a point from where the user clicked\n          Point2D point = new Point2D(evt.getX(), evt.getY());\n\n          // create a map point from a point\n          Point mapPoint = mapView.screenToLocation(point);\n\n          // show progress indicator\n          progressIndicator.setVisible(true);\n\n          // run the locator geocode task\n          ListenableFuture<List<GeocodeResult>> results = locatorTask.reverseGeocodeAsync(mapPoint,\n              reverseGeocodeParameters);\n\n          // add a listener to display the result when loaded\n          results.addDoneListener(() -> {\n            try {\n              List<GeocodeResult> geocodes = results.get();\n\n              if (geocodes.size() > 0) {\n                // get the top result\n                GeocodeResult geocode = geocodes.get(0);\n\n                // set the viewpoint to the marker\n                Point location = geocode.getDisplayLocation();\n                mapView.setViewpointCenterAsync(location);\n\n                // get attributes from the result for the callout\n                String address = geocode.getAttributes().get(\"Match_addr\").toString();\n                HashMap<String, Object> attributes = new HashMap<>();\n                attributes.put(\"title\", address.split(\",\")[0]);\n                attributes.put(\"detail\", address.substring(address.indexOf(\", \") + 2));\n\n                // create the marker\n                Graphic marker = new Graphic(geocode.getDisplayLocation(), attributes, pinSymbol);\n\n                // update the marker\n                Platform.runLater(() -> {\n                  // clear out previous results\n                  graphicsOverlay.getGraphics().clear();\n\n                  // add the marker to the graphics overlay\n                  graphicsOverlay.getGraphics().add(marker);\n\n                  // stop the progress indicator\n                  progressIndicator.setVisible(false);\n\n                  // display the callout\n                  callout.setTitle(marker.getAttributes().get(\"title\").toString());\n                  callout.setDetail(marker.getAttributes().get(\"detail\").toString());\n                  callout.showCalloutAt(location);\n                });\n              }\n            } catch (Exception e) {\n              // handle address not found\n              progressIndicator.setVisible(false);\n              Platform.runLater(() -> {\n                Alert alert = new Alert(Alert.AlertType.INFORMATION);\n                alert.setHeaderText(null);\n                alert.setContentText(\"No address found at this location\");\n                alert.showAndWait();\n              });\n            }\n          });\n        }\n      });\n\n      // add map view and control panel to stack pane\n      stackPane.getChildren().addAll(mapView, progressIndicator);\n      StackPane.setAlignment(progressIndicator, Pos.BOTTOM_LEFT);\n\n    } catch (Exception e) {\n      // on any error, print the stack trace\n      e.printStackTrace();\n    }\n  }\n\n  /**\n   * Stops and releases all resources used in application.\n   */\n  @Override\n  public void stop() throws Exception {\n\n    // release resources when the application closes\n    if (mapView != null) {\n      mapView.dispose();\n    }\n  }\n\n  /**\n   * Opens and runs application.\n   * \n   * @param args arguments passed to this application\n   */\n  public static void main(String[] args) {\n\n    Application.launch(args);\n  }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"Esri/arcgis-runtime-samples-java","sample_ref":"refs/heads/master","sample_path":"search/reverse-geocode-online/src/main/java/com/esri/samples/search/ReverseGeocodeOnline.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ced7a975087e066e7d116348aca1dfd33b166332","size":"1993","content":"package camelinaction;\n\nimport java.security.Key;\nimport java.security.KeyStore;\n\nimport org.apache.camel.Exchange;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.converter.crypto.CryptoDataFormat;\nimport org.apache.camel.impl.JndiRegistry;\nimport org.apache.camel.test.junit4.CamelTestSupport;\nimport org.apache.camel.util.jsse.KeyStoreParameters;\nimport org.junit.Test;\n\npublic class MessageEncryptionTest extends CamelTestSupport {\n\n    private Key secretKey;\n\n    @Override\n    protected JndiRegistry createRegistry() throws Exception {\n        JndiRegistry registry = super.createRegistry();\n        \n        KeyStoreParameters keystore = new KeyStoreParameters();\n        keystore.setPassword(\"supersecret\");\n        keystore.setResource(\"./cia_secrets.jceks\");\n        keystore.setType(\"JCEKS\");\n        \n        KeyStore store = keystore.createKeyStore();\n        secretKey = store.getKey(\"ciasecrets\", \"secret\".toCharArray());\n        registry.bind(\"secretKey\", secretKey);\n        return registry;\n    }\n\n        \n    @Test\n    public void testEncryptAndDecryptMessage() throws Exception {\n        getMockEndpoint(\"mock:unencrypted\").expectedBodiesReceived(\"Hello World\");\n\n        template.sendBody(\"direct:start\", \"Hello World\");\n\n        assertMockEndpointsSatisfied();\n        \n        Exchange exchange = getMockEndpoint(\"mock:encrypted\").getReceivedExchanges().get(0);\n        assertNotEquals(\"Hello World\", exchange.getIn().getBody());\n    }\n\n    @Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                CryptoDataFormat crypto = new CryptoDataFormat(\"DES\", secretKey);\n                \n                from(\"direct:start\")\n                .marshal(crypto)\n                .to(\"mock:encrypted\")\n                .unmarshal(crypto)\n                .to(\"mock:unencrypted\");\n            }\n        };\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"camelinaction/camelinaction2","sample_ref":"refs/heads/master","sample_path":"chapter14/payload/src/test/java/camelinaction/MessageEncryptionTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e5c00e5bf061b9d4a303bd5e77175c32d6b71fa9","size":"2946","content":"/*\n * Copyright (c) 2014. Real Time Genomics Limited.\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the\n *    distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.rtg.relation;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport com.rtg.launcher.AbstractCli;\nimport com.rtg.launcher.AbstractCliTest;\nimport com.rtg.util.StringUtils;\nimport com.rtg.util.io.FileUtils;\nimport com.rtg.util.io.TestDirectory;\n\n/**\n */\npublic class PedFilterCliTest extends AbstractCliTest {\n\n  @Override\n  protected AbstractCli getCli() {\n    return new PedFilterCli();\n  }\n\n  private GenomeRelationships makeTestPed() {\n    final GenomeRelationships genomeRelationships = new GenomeRelationships();\n    genomeRelationships.addGenome(\"father\", GenomeRelationships.SEX_MALE).setProperty(GenomeRelationships.DISEASE_PROPERTY, \"true\");\n    genomeRelationships.addGenome(\"mother\", GenomeRelationships.SEX_FEMALE);\n    genomeRelationships.addGenome(\"child\", GenomeRelationships.SEX_MALE).setProperty(GenomeRelationships.DISEASE_PROPERTY, \"true\");\n    genomeRelationships.addParentChild(\"father\", \"child\");\n    genomeRelationships.addParentChild(\"mother\", \"child\");\n    return genomeRelationships;\n  }\n\n  public void testFile() throws IOException {\n    try (final TestDirectory dir = new TestDirectory(\"pedfilter\")) {\n      final File relationFile = new File(dir, \"relationshipfile.ped\");\n      final GenomeRelationships ped = makeTestPed();\n      FileUtils.stringToFile(PedFileParser.toString(ped), relationFile);\n\n      final String output = checkMainInitOk(\"--vcf\", relationFile.toString());\n      mNano.check(\"pedfilter-tovcf.txt\", StringUtils.grepMinusV(output, \"^##(RUN-ID|CL|fileDate|source)\"));\n    }\n  }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"RealTimeGenomics/rtg-tools","sample_ref":"refs/heads/master","sample_path":"test/com/rtg/relation/PedFilterCliTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5b1a7d52a53e5c3f8c1eef39decbc51e2db0d50e","size":"10584","content":"package sk.sorien.pimpleplugin.tests.pimple;\n\nimport com.intellij.openapi.project.Project;\nimport com.jetbrains.php.lang.PhpFileType;\nimport org.jetbrains.annotations.NotNull;\nimport sk.sorien.pimpleplugin.pimple.*;\nimport sk.sorien.pimpleplugin.tests.CodeInsightFixtureTestCase;\n\nimport java.io.File;\n\n/**\n * @author Stanislav Turza\n */\npublic class PimpleCompletionContributorTest extends CodeInsightFixtureTestCase {\n\n    @Override\n    public void setUp() throws Exception {\n\n        super.setUp();\n        Project project = myFixture.getProject();\n\n        // Create virtual container\n        Container container = new Container(project);\n        container.put(new Container(\"container1\", project).put(new Container(\"container2\", project).put(new Service(\"service\", \"\\\\Sorien\\\\Service1\"))));\n        container.put(new Parameter(\"parameter\", ParameterType.INTEGER, \"1\"));\n        container.put(new Service(\"service\", \"\\\\Sorien\\\\Service2\"));\n        container.put(new Service(\"service\\\\fqn\", \"\\\\Sorien\\\\Service2\"));\n\n        ContainerResolver.put(project, container);\n\n        // Add Fixtures\n        myFixture.configureFromExistingVirtualFile(myFixture.copyFileToProject(\"classes.php\"));\n    }\n\n    @Override\n    public void tearDown() throws Exception {\n\n        ContainerResolver.remove(myFixture.getProject());\n        super.tearDown();\n    }\n\n    @NotNull\n    protected String getTestDataPath() {\n        return new File(this.getClass().getResource(\"fixtures\").getFile()).getAbsolutePath();\n    }\n\n    public void testContainerCompletionInsideApostrophes() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app['<caret>'];\",\n                \"container1\", \"parameter\"\n        );\n    }\n\n    public void testContainerCompletionInsideQuotes() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app[\\\"<caret>\\\"];\",\n                \"container1\", \"parameter\"\n        );\n    }\n\n    public void testSubContainerCompletion() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app['container1']['<caret>'];\",\n                \"container2\"\n        );\n    }\n\n    public void testMultilevelContainerCompletion() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app['container1']['container2']['<caret>'];\",\n                \"service\"\n        );\n    }\n\n    public void testReferencedContainerCompletion() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$a = $app['container1']; \" +\n                        \"$a['<caret>']\",\n                \"container2\"\n        );\n    }\n\n    public void testParentContainerCompletion() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Sorien\\\\Application(); \" +\n                        \"$a = $app['<caret>'];\",\n                \"container1\", \"parameter\"\n        );\n    }\n\n    public void testExtendFunctionContainerCompletion() throws Exception {\n\n        assertCompletionEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app->extend('<caret>', function($b){});\",\n                \"service\", \"parameter\", \"service\\\\fqn\"\n        );\n    }\n\n    public void testExtendFunctionMultiContainerCompletion() throws Exception {\n\n        assertCompletionEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app['container1']['container2']->extend('<caret>', function($b){});\",\n                \"service\"\n        );\n    }\n\n    public void testRawFunctionContainerCompletion() throws Exception {\n\n        assertCompletionEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app->raw('<caret>');\",\n                \"parameter\", \"service\", \"service\\\\fqn\"\n        );\n    }\n\n    public void testClassConstantInContainerCompletion() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"class Test {\" +\n                        \"    const c = \\\"container1\\\";\" +\n                        \"}\" +\n                        \"$app = new \\\\Silex\\\\Application();\" +\n                        \"$app[Test::c]['<caret>']\",\n                \"container2\"\n        );\n    }\n\n    public void testClassPropertyContainerCompletion() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"class Test {\" +\n                        \"    public $c = \\\"container1\\\";\" +\n                        \"}\" +\n                        \"$app = new \\\\Silex\\\\Application();\" +\n                        \"$class = new Test();\" +\n                        \"$app[$class->c]['<caret>']\",\n                \"container2\"\n        );\n    }\n\n    public void testContainerAsClassVariableCompletion() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"class Foo {\" +\n                        \"    /** @var \\\\Silex\\\\Application */\" +\n                        \"    protected $app;\" +\n                        \"\" +\n                        \"    public function bar() {\" +\n                        \"        $session = $this->app['<caret>'];\" +\n                        \"    }\" +\n                        \"}\",\n                \"container1\", \"parameter\"\n        );\n    }\n\n    public void testContainerFromMultiTypeTraitMethod() throws Exception {\n\n        assertCompletionContains(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"trait TestTrait {\" +\n                        \"\" +\n                        \"    private $app;\" +\n                        \"\" +\n                        \"    protected function getApp() {\" +\n                        \"        if (!$this->app) {\" +\n                        \"            $this->app = $this->createApp();\" +\n                        \"        }\" +\n                        \"        return $this->app;\" +\n                        \"    }\" +\n                        \"\" +\n                        \"    protected function createApp() {\" +\n                        \"        return new \\\\Silex\\\\Application();\" +\n                        \"    }\" +\n                        \"}\" +\n                        \"class Test {\" +\n                        \"\" +\n                        \"    use TestTrait;\" +\n                        \"\" +\n                        \"    public function foo() {\" +\n                        \"        $app = $this->getApp();\" +\n                        \"        $app['<caret>'];\" +\n                        \"    }\" +\n                        \"}\",\n                \"container1\", \"parameter\"\n        );\n    }\n\n    public void testDisableOtherCompletions() throws Exception {\n\n        assertCompletionEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Sorien\\\\Application();\" +\n                        \"$a = $app['e'];\" +\n                        \"$b = $app['f'];\" +\n                        \"$c = $app['g'];\" +\n                        \"$app['<caret>']\",\n\n                \"container1\", \"parameter\", \"service\", \"service\\\\fqn\"\n        );\n    }\n\n    public void testInsertHandlerContainer() throws Exception {\n        assertCompletionResultEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Sorien\\\\Application(); \" +\n                        \"$app['con<caret>tainer2'];\",\n                \"<?php \" +\n                        \"$app = new \\\\Sorien\\\\Application(); \" +\n                        \"$app['container1']<caret>;\"\n        );\n    }\n\n    public void testInsertHandlerExtendMethod() throws Exception {\n        assertCompletionResultEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app['container1']['container2']->extend('<caret>', );\",\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app['container1']['container2']->extend('service',<caret> );\"\n        );\n    }\n\n    public void testInsertHandlerRawMethod() throws Exception {\n        assertCompletionResultEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app['container1']['container2']->raw('<caret>');\",\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app['container1']['container2']->raw('service')<caret>;\"\n        );\n    }\n\n    public void testInsertHandlerRegisterMethod() throws Exception {\n        assertCompletionResultEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app->register(null, ['<caret>' => '']);\",\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application(); \" +\n                        \"$app->register(null, ['parameter' <caret>=> '']);\"\n        );\n    }\n\n    public void testRegisterFunctionValuesCompletions() throws Exception {\n\n        assertCompletionEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application();\" +\n                        \"$app->register(null, ['<caret>' => '']);\",\n\n                \"parameter\"\n        );\n\n        assertCompletionEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application();\" +\n                        \"$app->register(null, ['<caret>']);\",\n\n                \"parameter\"\n        );\n\n        assertCompletionEquals(PhpFileType.INSTANCE,\n                \"<?php \" +\n                        \"$app = new \\\\Silex\\\\Application();\" +\n                        \"$app->register(null, ['' => '', '<caret>']);\",\n\n                \"parameter\"\n        );\n    }\n}","binary":"false","copies":"1","sample_repo_name":"Sorien/silex-idea-plugin","sample_ref":"refs/heads/master","sample_path":"tests/sk/sorien/pimpleplugin/tests/pimple/PimpleCompletionContributorTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2151a4d5ef5544bd9d6a76ecc4cc57196f0f6e1a","size":"12984","content":"package com.pdfjet;\n\nclass Times_Roman {\n    protected static final String name = \"Times-Roman\";\n    protected static final int bBoxLLx = -168;\n    protected static final int bBoxLLy = -218;\n    protected static final int bBoxURx = 1000;\n    protected static final int bBoxURy = 898;\n    protected static final int underlinePosition = -100;\n    protected static final int underlineThickness = 50;\n    protected static final String notice = \"Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated. All Rights Reserved. Times is a trademark of Linotype-Hell AG and/or its subsidiaries.\";\n    protected static final int[][] metrics = {\n        {32,250,65,-55,193,-55,194,-55,196,-55,192,-55,197,-55,195,-55,84,-18,86,-50,87,-30,89,-90,221,-90,159,-90,},\n        {33,333,},\n        {34,408,},\n        {35,500,},\n        {36,500,},\n        {37,833,},\n        {38,778,},\n        {39,180,},\n        {40,333,},\n        {41,333,},\n        {42,500,},\n        {43,564,},\n        {44,250,148,-70,146,-70,},\n        {45,333,},\n        {46,250,148,-70,146,-70,},\n        {47,278,},\n        {48,500,},\n        {49,500,},\n        {50,500,},\n        {51,500,},\n        {52,500,},\n        {53,500,},\n        {54,500,},\n        {55,500,},\n        {56,500,},\n        {57,500,},\n        {58,278,},\n        {59,278,},\n        {60,564,},\n        {61,564,},\n        {62,564,},\n        {63,444,},\n        {64,921,},\n        {65,722,67,-40,199,-40,71,-40,79,-55,211,-55,212,-55,214,-55,210,-55,216,-55,213,-55,81,-55,84,-111,85,-55,218,-55,219,-55,220,-55,217,-55,86,-135,87,-90,89,-105,221,-105,159,-105,146,-111,118,-74,119,-92,121,-92,253,-92,255,-92,},\n        {66,667,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,85,-10,218,-10,219,-10,220,-10,217,-10,},\n        {67,667,},\n        {68,722,65,-40,193,-40,194,-40,196,-40,192,-40,197,-40,195,-40,86,-40,87,-30,89,-55,221,-55,159,-55,},\n        {69,611,},\n        {70,556,65,-74,193,-74,194,-74,196,-74,192,-74,197,-74,195,-74,97,-15,225,-15,226,-15,228,-15,224,-15,229,-15,227,-15,44,-80,111,-15,243,-15,244,-15,246,-15,242,-15,248,-15,245,-15,46,-80,},\n        {71,722,},\n        {72,722,},\n        {73,333,},\n        {74,389,65,-60,193,-60,194,-60,196,-60,192,-60,197,-60,195,-60,},\n        {75,722,79,-30,211,-30,212,-30,214,-30,210,-30,216,-30,213,-30,101,-25,233,-25,234,-25,235,-25,232,-25,111,-35,243,-35,244,-35,246,-35,242,-35,248,-35,245,-35,117,-15,250,-15,251,-15,252,-15,249,-15,121,-25,253,-25,255,-25,},\n        {76,611,84,-92,86,-100,87,-74,89,-100,221,-100,159,-100,146,-92,121,-55,253,-55,255,-55,},\n        {77,889,},\n        {78,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,},\n        {79,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,84,-40,86,-50,87,-35,88,-40,89,-50,221,-50,159,-50,},\n        {80,556,65,-92,193,-92,194,-92,196,-92,192,-92,197,-92,195,-92,97,-15,225,-15,226,-15,228,-15,224,-15,229,-15,227,-15,44,-111,46,-111,},\n        {81,722,85,-10,218,-10,219,-10,220,-10,217,-10,},\n        {82,667,79,-40,211,-40,212,-40,214,-40,210,-40,216,-40,213,-40,84,-60,85,-40,218,-40,219,-40,220,-40,217,-40,86,-80,87,-55,89,-65,221,-65,159,-65,},\n        {83,556,},\n        {84,611,65,-93,193,-93,194,-93,196,-93,192,-93,197,-93,195,-93,79,-18,211,-18,212,-18,214,-18,210,-18,216,-18,213,-18,97,-80,225,-80,226,-80,228,-40,224,-40,229,-80,227,-40,58,-50,44,-74,101,-70,233,-70,234,-70,235,-30,232,-70,45,-92,105,-35,237,-35,111,-80,243,-80,244,-80,246,-80,242,-80,248,-80,245,-80,46,-74,114,-35,59,-55,117,-45,250,-45,251,-45,252,-45,249,-45,119,-80,121,-80,253,-80,255,-80,},\n        {85,722,65,-40,193,-40,194,-40,196,-40,192,-40,197,-40,195,-40,},\n        {86,722,65,-135,193,-135,194,-135,196,-135,192,-135,197,-135,195,-135,71,-15,79,-40,211,-40,212,-40,214,-40,210,-40,216,-40,213,-40,97,-111,225,-111,226,-71,228,-71,224,-71,229,-111,227,-71,58,-74,44,-129,101,-111,233,-111,234,-71,235,-71,232,-71,45,-100,105,-60,237,-60,238,-20,239,-20,236,-20,111,-129,243,-129,244,-129,246,-89,242,-89,248,-129,245,-89,46,-129,59,-74,117,-75,250,-75,251,-75,252,-75,249,-75,},\n        {87,944,65,-120,193,-120,194,-120,196,-120,192,-120,197,-120,195,-120,79,-10,211,-10,212,-10,214,-10,210,-10,216,-10,213,-10,97,-80,225,-80,226,-80,228,-80,224,-80,229,-80,227,-80,58,-37,44,-92,101,-80,233,-80,234,-80,235,-40,232,-40,45,-65,105,-40,237,-40,111,-80,243,-80,244,-80,246,-80,242,-80,248,-80,245,-80,46,-92,59,-37,117,-50,250,-50,251,-50,252,-50,249,-50,121,-73,253,-73,255,-73,},\n        {88,722,},\n        {89,722,65,-120,193,-120,194,-120,196,-120,192,-120,197,-120,195,-120,79,-30,211,-30,212,-30,214,-30,210,-30,216,-30,213,-30,97,-100,225,-100,226,-100,228,-60,224,-60,229,-100,227,-60,58,-92,44,-129,101,-100,233,-100,234,-100,235,-60,232,-60,45,-111,105,-55,237,-55,111,-110,243,-110,244,-110,246,-70,242,-70,248,-110,245,-70,46,-129,59,-92,117,-111,250,-111,251,-111,252,-71,249,-71,},\n        {90,611,},\n        {91,333,},\n        {92,278,},\n        {93,333,},\n        {94,469,},\n        {95,500,},\n        {96,333,},\n        {97,444,118,-20,119,-15,},\n        {98,500,46,-40,117,-20,250,-20,251,-20,252,-20,249,-20,118,-15,},\n        {99,444,121,-15,253,-15,255,-15,},\n        {100,500,},\n        {101,444,103,-15,118,-25,119,-25,120,-15,121,-15,253,-15,255,-15,},\n        {102,333,97,-10,225,-10,226,-10,228,-10,224,-10,229,-10,227,-10,102,-25,105,-20,237,-20,146,55,},\n        {103,500,97,-5,225,-5,226,-5,228,-5,224,-5,229,-5,227,-5,},\n        {104,500,121,-5,253,-5,255,-5,},\n        {105,278,118,-25,},\n        {106,278,},\n        {107,500,101,-10,233,-10,234,-10,235,-10,232,-10,111,-10,243,-10,244,-10,246,-10,242,-10,248,-10,245,-10,121,-15,253,-15,255,-15,},\n        {108,278,119,-10,},\n        {109,778,},\n        {110,500,118,-40,121,-15,253,-15,255,-15,},\n        {111,500,118,-15,119,-25,121,-10,253,-10,255,-10,},\n        {112,500,121,-10,253,-10,255,-10,},\n        {113,500,},\n        {114,333,44,-40,103,-18,45,-20,46,-55,},\n        {115,389,},\n        {116,278,},\n        {117,500,},\n        {118,500,97,-25,225,-25,226,-25,228,-25,224,-25,229,-25,227,-25,44,-65,101,-15,233,-15,234,-15,235,-15,232,-15,111,-20,243,-20,244,-20,246,-20,242,-20,248,-20,245,-20,46,-65,},\n        {119,722,97,-10,225,-10,226,-10,228,-10,224,-10,229,-10,227,-10,44,-65,111,-10,243,-10,244,-10,246,-10,242,-10,248,-10,245,-10,46,-65,},\n        {120,500,101,-15,233,-15,234,-15,235,-15,232,-15,},\n        {121,500,44,-65,46,-65,},\n        {122,444,},\n        {123,480,},\n        {124,200,},\n        {125,480,},\n        {126,541,},\n        {127,250,},\n        {128,500,},\n        {129,250,},\n        {130,333,},\n        {131,500,},\n        {132,444,},\n        {133,1000,},\n        {134,500,},\n        {135,500,},\n        {136,333,},\n        {137,1000,},\n        {138,556,},\n        {139,333,},\n        {140,889,},\n        {141,250,},\n        {142,611,},\n        {143,250,},\n        {144,250,},\n        {145,333,65,-80,193,-80,194,-80,196,-80,192,-80,197,-80,195,-80,145,-74,},\n        {146,333,100,-50,108,-10,146,-74,114,-50,115,-55,154,-55,32,-74,116,-18,118,-50,},\n        {147,444,65,-80,193,-80,194,-80,196,-80,192,-80,197,-80,195,-80,},\n        {148,444,},\n        {149,350,},\n        {150,500,},\n        {151,1000,},\n        {152,333,},\n        {153,980,},\n        {154,389,},\n        {155,333,},\n        {156,722,},\n        {157,250,},\n        {158,444,},\n        {159,722,65,-120,193,-120,194,-120,196,-120,192,-120,197,-120,195,-120,79,-30,211,-30,212,-30,214,-30,210,-30,216,-30,213,-30,97,-100,225,-100,226,-100,228,-60,224,-60,229,-100,227,-100,58,-92,44,-129,101,-100,233,-100,234,-100,235,-60,232,-60,45,-111,105,-55,237,-55,111,-110,243,-110,244,-110,246,-70,242,-70,248,-110,245,-70,46,-129,59,-92,117,-111,250,-111,251,-111,252,-71,249,-71,},\n        {160,250,},\n        {161,333,},\n        {162,500,},\n        {163,500,},\n        {164,500,},\n        {165,500,},\n        {166,200,},\n        {167,500,},\n        {168,333,},\n        {169,760,},\n        {170,276,},\n        {171,500,},\n        {172,564,},\n        {173,250,},\n        {174,760,},\n        {175,333,},\n        {176,400,},\n        {177,564,},\n        {178,300,},\n        {179,300,},\n        {180,333,},\n        {181,500,},\n        {182,453,},\n        {183,250,},\n        {184,333,},\n        {185,300,},\n        {186,310,},\n        {187,500,},\n        {188,750,},\n        {189,750,},\n        {190,750,},\n        {191,444,},\n        {192,722,67,-40,199,-40,71,-40,79,-55,211,-55,212,-55,214,-55,210,-55,216,-55,213,-55,81,-55,84,-111,85,-55,218,-55,219,-55,220,-55,217,-55,86,-135,87,-90,89,-105,221,-105,159,-105,146,-111,118,-74,119,-92,121,-92,253,-92,255,-92,},\n        {193,722,67,-40,199,-40,71,-40,79,-55,211,-55,212,-55,214,-55,210,-55,216,-55,213,-55,81,-55,84,-111,85,-55,218,-55,219,-55,220,-55,217,-55,86,-135,87,-90,89,-105,221,-105,159,-105,146,-111,118,-74,119,-92,121,-92,253,-92,255,-92,},\n        {194,722,67,-40,199,-40,71,-40,79,-55,211,-55,212,-55,214,-55,210,-55,216,-55,213,-55,81,-55,84,-111,85,-55,218,-55,219,-55,220,-55,217,-55,86,-135,87,-90,89,-105,221,-105,159,-105,146,-111,118,-74,119,-92,121,-92,253,-92,255,-92,},\n        {195,722,67,-40,199,-40,71,-40,79,-55,211,-55,212,-55,214,-55,210,-55,216,-55,213,-55,81,-55,84,-111,85,-55,218,-55,219,-55,220,-55,217,-55,86,-135,87,-90,89,-105,221,-105,159,-105,146,-111,118,-74,119,-92,121,-92,253,-92,255,-92,},\n        {196,722,67,-40,199,-40,71,-40,79,-55,211,-55,212,-55,214,-55,210,-55,216,-55,213,-55,81,-55,84,-111,85,-55,218,-55,219,-55,220,-55,217,-55,86,-135,87,-90,89,-105,221,-105,159,-105,146,-111,118,-74,119,-92,121,-92,253,-92,255,-92,},\n        {197,722,67,-40,199,-40,71,-40,79,-55,211,-55,212,-55,214,-55,210,-55,216,-55,213,-55,81,-55,84,-111,85,-55,218,-55,219,-55,220,-55,217,-55,86,-135,87,-90,89,-105,221,-105,159,-105,146,-111,118,-74,119,-92,121,-92,253,-92,255,-92,},\n        {198,889,},\n        {199,667,},\n        {200,611,},\n        {201,611,},\n        {202,611,},\n        {203,611,},\n        {204,333,},\n        {205,333,},\n        {206,333,},\n        {207,333,},\n        {208,722,},\n        {209,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,},\n        {210,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,84,-40,86,-50,87,-35,88,-40,89,-50,221,-50,159,-50,},\n        {211,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,84,-40,86,-50,87,-35,88,-40,89,-50,221,-50,159,-50,},\n        {212,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,84,-40,86,-50,87,-35,88,-40,89,-50,221,-50,159,-50,},\n        {213,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,84,-40,86,-50,87,-35,88,-40,89,-50,221,-50,159,-50,},\n        {214,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,84,-40,86,-50,87,-35,88,-40,89,-50,221,-50,159,-50,},\n        {215,564,},\n        {216,722,65,-35,193,-35,194,-35,196,-35,192,-35,197,-35,195,-35,84,-40,86,-50,87,-35,88,-40,89,-50,221,-50,159,-50,},\n        {217,722,65,-40,193,-40,194,-40,196,-40,192,-40,197,-40,195,-40,},\n        {218,722,65,-40,193,-40,194,-40,196,-40,192,-40,197,-40,195,-40,},\n        {219,722,65,-40,193,-40,194,-40,196,-40,192,-40,197,-40,195,-40,},\n        {220,722,65,-40,193,-40,194,-40,196,-40,192,-40,197,-40,195,-40,},\n        {221,722,65,-120,193,-120,194,-120,196,-120,192,-120,197,-120,195,-120,79,-30,211,-30,212,-30,214,-30,210,-30,216,-30,213,-30,97,-100,225,-100,226,-100,228,-60,224,-60,229,-100,227,-60,58,-92,44,-129,101,-100,233,-100,234,-100,235,-60,232,-60,45,-111,105,-55,237,-55,111,-110,243,-110,244,-110,246,-70,242,-70,248,-110,245,-70,46,-129,59,-92,117,-111,250,-111,251,-111,252,-71,249,-71,},\n        {222,556,},\n        {223,500,},\n        {224,444,118,-20,119,-15,},\n        {225,444,118,-20,119,-15,},\n        {226,444,118,-20,119,-15,},\n        {227,444,118,-20,119,-15,},\n        {228,444,118,-20,119,-15,},\n        {229,444,118,-20,119,-15,},\n        {230,667,},\n        {231,444,121,-15,253,-15,255,-15,},\n        {232,444,103,-15,118,-25,119,-25,120,-15,121,-15,253,-15,255,-15,},\n        {233,444,103,-15,118,-25,119,-25,120,-15,121,-15,253,-15,255,-15,},\n        {234,444,103,-15,118,-25,119,-25,120,-15,121,-15,253,-15,255,-15,},\n        {235,444,103,-15,118,-25,119,-25,120,-15,121,-15,253,-15,255,-15,},\n        {236,278,118,-25,},\n        {237,278,118,-25,},\n        {238,278,118,-25,},\n        {239,278,118,-25,},\n        {240,500,},\n        {241,500,118,-40,121,-15,253,-15,255,-15,},\n        {242,500,118,-15,119,-25,121,-10,253,-10,255,-10,},\n        {243,500,118,-15,119,-25,121,-10,253,-10,255,-10,},\n        {244,500,118,-15,119,-25,121,-10,253,-10,255,-10,},\n        {245,500,118,-15,119,-25,121,-10,253,-10,255,-10,},\n        {246,500,118,-15,119,-25,121,-10,253,-10,255,-10,},\n        {247,564,},\n        {248,500,118,-15,119,-25,121,-10,253,-10,255,-10,},\n        {249,500,},\n        {250,500,},\n        {251,500,},\n        {252,500,},\n        {253,500,44,-65,46,-65,},\n        {254,500,},\n        {255,500,44,-65,46,-65,},\n    };\n}\n","binary":"false","copies":"1","sample_repo_name":"soster/pdfjet","sample_ref":"refs/heads/master","sample_path":"src/com/pdfjet/Times_Roman.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"fdd7f7e61f95625b39d6094d919cae7115837f1b","size":"16713","content":"/**\n * BetonQuest - advanced quests for Bukkit\n * Copyright (C) 2016  Jakub \"Co0sh\" Sapalski\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage pl.betoncraft.betonquest.compatibility;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.plugin.RegisteredServiceProvider;\n\nimport ch.njol.skript.Skript;\nimport de.slikey.effectlib.EffectManager;\nimport me.blackvein.quests.Quests;\nimport net.milkbowl.vault.economy.Economy;\nimport net.milkbowl.vault.permission.Permission;\nimport pl.betoncraft.betonquest.BetonQuest;\nimport pl.betoncraft.betonquest.compatibility.citizens.CitizensListener;\nimport pl.betoncraft.betonquest.compatibility.citizens.CitizensParticle;\nimport pl.betoncraft.betonquest.compatibility.citizens.CitizensWalkingListener;\nimport pl.betoncraft.betonquest.compatibility.citizens.NPCInteractObjective;\nimport pl.betoncraft.betonquest.compatibility.citizens.NPCKillObjective;\nimport pl.betoncraft.betonquest.compatibility.citizens.NPCMoveEvent;\nimport pl.betoncraft.betonquest.compatibility.denizen.DenizenTaskScriptEvent;\nimport pl.betoncraft.betonquest.compatibility.effectlib.ParticleEvent;\nimport pl.betoncraft.betonquest.compatibility.heroes.HeroesClassCondition;\nimport pl.betoncraft.betonquest.compatibility.heroes.HeroesExperienceEvent;\nimport pl.betoncraft.betonquest.compatibility.heroes.HeroesMobKillListener;\nimport pl.betoncraft.betonquest.compatibility.heroes.HeroesSkillCondition;\nimport pl.betoncraft.betonquest.compatibility.holographicdisplays.HologramLoop;\nimport pl.betoncraft.betonquest.compatibility.legendquest.LQAttributeCondition;\nimport pl.betoncraft.betonquest.compatibility.legendquest.LQAttributeVariable;\nimport pl.betoncraft.betonquest.compatibility.legendquest.LQClassCondition;\nimport pl.betoncraft.betonquest.compatibility.legendquest.LQClassVariable;\nimport pl.betoncraft.betonquest.compatibility.legendquest.LQKarmaCondition;\nimport pl.betoncraft.betonquest.compatibility.legendquest.LQKarmaVariable;\nimport pl.betoncraft.betonquest.compatibility.legendquest.LQRaceCondition;\nimport pl.betoncraft.betonquest.compatibility.legendquest.LQRaceVariable;\nimport pl.betoncraft.betonquest.compatibility.magic.WandCondition;\nimport pl.betoncraft.betonquest.compatibility.mcmmo.McMMOAddExpEvent;\nimport pl.betoncraft.betonquest.compatibility.mcmmo.McMMOSkillLevelCondition;\nimport pl.betoncraft.betonquest.compatibility.mythicmobs.MythicMobKillObjective;\nimport pl.betoncraft.betonquest.compatibility.mythicmobs.MythicSpawnMobEvent;\nimport pl.betoncraft.betonquest.compatibility.placeholderapi.BetonQuestPlaceholder;\nimport pl.betoncraft.betonquest.compatibility.placeholderapi.PlaceholderVariable;\nimport pl.betoncraft.betonquest.compatibility.playerpoints.PlayerPointsCondition;\nimport pl.betoncraft.betonquest.compatibility.playerpoints.PlayerPointsEvent;\nimport pl.betoncraft.betonquest.compatibility.quests.ConditionRequirement;\nimport pl.betoncraft.betonquest.compatibility.quests.EventReward;\nimport pl.betoncraft.betonquest.compatibility.quests.QuestCondition;\nimport pl.betoncraft.betonquest.compatibility.quests.QuestEvent;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCClassCondition;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCClassEvent;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCClassVariable;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCExpCondition;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCExpEvent;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCExpVariable;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCLevelCondition;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCLevelEvent;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCLevelVariable;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCManaCondition;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCManaEvent;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCRaceCondition;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCRaceEvent;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCRaceVariable;\nimport pl.betoncraft.betonquest.compatibility.racesandclasses.RaCTraitCondition;\nimport pl.betoncraft.betonquest.compatibility.shopkeepers.HavingShopCondition;\nimport pl.betoncraft.betonquest.compatibility.shopkeepers.OpenShopEvent;\nimport pl.betoncraft.betonquest.compatibility.skillapi.SkillAPIClassCondition;\nimport pl.betoncraft.betonquest.compatibility.skillapi.SkillAPILevelCondition;\nimport pl.betoncraft.betonquest.compatibility.skript.BQEventSkript;\nimport pl.betoncraft.betonquest.compatibility.skript.BQEventSkript.CustomEventForSkript;\nimport pl.betoncraft.betonquest.compatibility.skript.SkriptConditionBQ;\nimport pl.betoncraft.betonquest.compatibility.skript.SkriptEffectBQ;\nimport pl.betoncraft.betonquest.compatibility.skript.SkriptEventBQ;\nimport pl.betoncraft.betonquest.compatibility.vault.MoneyCondition;\nimport pl.betoncraft.betonquest.compatibility.vault.MoneyEvent;\nimport pl.betoncraft.betonquest.compatibility.vault.MoneyVariable;\nimport pl.betoncraft.betonquest.compatibility.vault.PermissionEvent;\nimport pl.betoncraft.betonquest.compatibility.worldedit.PasteSchematicEvent;\nimport pl.betoncraft.betonquest.compatibility.worldguard.RegionCondition;\nimport pl.betoncraft.betonquest.compatibility.worldguard.RegionObjective;\nimport pl.betoncraft.betonquest.utils.Debug;\n\n/**\n * Compatibility with other plugins\n * \n * @author Jakub Sapalski\n */\npublic class Compatibility {\n\n\tprivate BetonQuest plugin = BetonQuest.getInstance();\n\tprivate static Compatibility instance;\n\tprivate List<String> hooked = new ArrayList<>();\n\n\tprivate Permission permission = null;\n\tprivate Economy economy = null;\n\n\tprivate EffectManager manager;\n\t\n\tprivate HologramLoop hologramLoop;\n\n\tpublic Compatibility() {\n\t\tinstance = this;\n\n\t\t// hook into MythicMobs\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"MythicMobs\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.mythicmobs\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerObjectives(\"mmobkill\", MythicMobKillObjective.class);\n\t\t\tplugin.registerEvents(\"mspawnmob\", MythicSpawnMobEvent.class);\n\t\t\thooked.add(\"MythicMobs\");\n\t\t}\n\n\t\t// hook into Citizens\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"Citizens\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.citizens\").equalsIgnoreCase(\"true\")) {\n\t\t\tnew CitizensListener();\n\t\t\tnew CitizensWalkingListener();\n\t\t\tplugin.registerObjectives(\"npckill\", NPCKillObjective.class);\n\t\t\tplugin.registerObjectives(\"npcinteract\", NPCInteractObjective.class);\n\t\t\tplugin.registerEvents(\"movenpc\", NPCMoveEvent.class);\n\t\t\thooked.add(\"Citizens\");\n\t\t}\n\n\t\t// hook into Vault\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"Vault\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.vault\").equalsIgnoreCase(\"true\")) {\n\t\t\tRegisteredServiceProvider<Permission> permissionProvider = Bukkit.getServer().getServicesManager()\n\t\t\t\t\t.getRegistration(net.milkbowl.vault.permission.Permission.class);\n\t\t\tif (permissionProvider != null) {\n\t\t\t\tpermission = permissionProvider.getProvider();\n\t\t\t}\n\t\t\tRegisteredServiceProvider<Economy> economyProvider = Bukkit.getServer().getServicesManager()\n\t\t\t\t\t.getRegistration(net.milkbowl.vault.economy.Economy.class);\n\t\t\tif (economyProvider != null) {\n\t\t\t\teconomy = economyProvider.getProvider();\n\t\t\t}\n\t\t\tif (economy != null) {\n\t\t\t\tplugin.registerEvents(\"money\", MoneyEvent.class);\n\t\t\t\tplugin.registerConditions(\"money\", MoneyCondition.class);\n\t\t\t\tplugin.registerVariable(\"money\", MoneyVariable.class);\n\t\t\t} else {\n\t\t\t\tDebug.error(\"There is no economy plugin on the server!\");\n\t\t\t}\n\t\t\tif (permission != null) {\n\t\t\t\tplugin.registerEvents(\"permission\", PermissionEvent.class);\n\t\t\t} else {\n\t\t\t\tDebug.error(\"Could not get permission provider!\");\n\t\t\t}\n\t\t\thooked.add(\"Vault\");\n\t\t}\n\n\t\t// hook into Skript\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"Skript\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.skript\").equalsIgnoreCase(\"true\")) {\n\t\t\tSkript.registerCondition(SkriptConditionBQ.class, \"%player% (meet|meets) [betonquest] condition %string%\");\n\t\t\tSkript.registerEffect(SkriptEffectBQ.class, \"fire [betonquest] event %string% for %player%\");\n\t\t\tSkript.registerEvent(\"betonquest\", SkriptEventBQ.class, CustomEventForSkript.class,\n\t\t\t\t\t\"[betonquest] event %string%\");\n\t\t\tplugin.registerEvents(\"skript\", BQEventSkript.class);\n\t\t\thooked.add(\"Skript\");\n\t\t}\n\n\t\t// hook into WorldGuard\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"WorldGuard\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.worldguard\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerConditions(\"region\", RegionCondition.class);\n\t\t\tplugin.registerObjectives(\"region\", RegionObjective.class);\n\t\t\thooked.add(\"WorldGuard\");\n\t\t}\n\n\t\t// hook into WorldEdit\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"WorldEdit\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.worldedit\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerEvents(\"paste\", PasteSchematicEvent.class);\n\t\t\thooked.add(\"WorldEdit\");\n\t\t}\n\n\t\t// hook into mcMMO\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"mcMMO\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.mcmmo\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerConditions(\"mcmmolevel\", McMMOSkillLevelCondition.class);\n\t\t\tplugin.registerEvents(\"mcmmoexp\", McMMOAddExpEvent.class);\n\t\t\thooked.add(\"mcMMO\");\n\t\t}\n\n\t\t// hook into EffectLib\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"EffectLib\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.effectlib\").equalsIgnoreCase(\"true\")) {\n\t\t\tmanager = new EffectManager(plugin);\n\t\t\tif (hooked.contains(\"Citizens\"))\n\t\t\t\tnew CitizensParticle();\n\t\t\tplugin.registerEvents(\"particle\", ParticleEvent.class);\n\t\t\thooked.add(\"EffectLib\");\n\t\t}\n\n\t\t// hook into PlayerPoints\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"PlayerPoints\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.playerpoints\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerEvents(\"playerpoints\", PlayerPointsEvent.class);\n\t\t\tplugin.registerConditions(\"playerpoints\", PlayerPointsCondition.class);\n\t\t\thooked.add(\"PlayerPoints\");\n\t\t}\n\n\t\t// hook into Heroes\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"Heroes\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.heroes\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerConditions(\"heroesclass\", HeroesClassCondition.class);\n\t\t\tplugin.registerConditions(\"heroesskill\", HeroesSkillCondition.class);\n\t\t\tplugin.registerEvents(\"heroesexp\", HeroesExperienceEvent.class);\n\t\t\t// create mobkill listener for passing Heroes kills to\n\t\t\t// MobKillObjective\n\t\t\tnew HeroesMobKillListener();\n\t\t\thooked.add(\"Heroes\");\n\t\t}\n\n\t\t// hook into Magic\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"Magic\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.magic\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerConditions(\"wand\", WandCondition.class);\n\t\t\thooked.add(\"Magic\");\n\t\t}\n\n\t\t// hook into Denizen\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"Denizen\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.denizen\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerEvents(\"script\", DenizenTaskScriptEvent.class);\n\t\t\thooked.add(\"Denizen\");\n\t\t}\n\n\t\t// hook into SkillAPI\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"SkillAPI\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.skillapi\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerConditions(\"skillapiclass\", SkillAPIClassCondition.class);\n\t\t\tplugin.registerConditions(\"skillapilevel\", SkillAPILevelCondition.class);\n\t\t\thooked.add(\"SkillAPI\");\n\t\t}\n\n\t\t// hook into Quests\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"Quests\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.quests\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerConditions(\"quest\", QuestCondition.class);\n\t\t\tplugin.registerEvents(\"quest\", QuestEvent.class);\n\t\t\tQuests.getInstance().customRewards.add(new EventReward());\n\t\t\tQuests.getInstance().customRequirements.add(new ConditionRequirement());\n\t\t\thooked.add(\"Quests\");\n\t\t}\n\t\t\n\t\t// hook into Shopkeepers\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"Shopkeepers\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.shopkeepers\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerEvents(\"shopkeeper\", OpenShopEvent.class);\n\t\t\tplugin.registerConditions(\"shopamount\", HavingShopCondition.class);\n\t\t\thooked.add(\"Shopkeepers\");\n\t\t}\n\t\t\n\t\t// hook into PlaceholderAPI\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"PlaceholderAPI\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.placeholderapi\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerVariable(\"ph\", PlaceholderVariable.class);\n\t\t\tnew BetonQuestPlaceholder(plugin, \"betonquest\").hook();\n\t\t\thooked.add(\"PlaceholderAPI\");\n\t\t}\n\t\t\n\t\t// hook into HolographicDisplays\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"HolographicDisplays\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.holographicdisplays\").equalsIgnoreCase(\"true\")) {\n\t\t\thologramLoop = new HologramLoop();\n\t\t\thooked.add(\"HolographicDisplays\");\n\t\t}\n\t\t\n\t\t// hook into RacesAndClasses\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"RacesAndClasses\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.racesandclasses\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerConditions(\"racclass\", RaCClassCondition.class);\n\t\t\tplugin.registerConditions(\"racrace\", RaCRaceCondition.class);\n\t\t\tplugin.registerConditions(\"racmana\", RaCManaCondition.class);\n\t\t\tplugin.registerConditions(\"racexp\", RaCExpCondition.class);\n\t\t\tplugin.registerConditions(\"raclevel\", RaCLevelCondition.class);\n\t\t\tplugin.registerConditions(\"ractrait\", RaCTraitCondition.class);\n\t\t\tplugin.registerEvents(\"racclass\", RaCClassEvent.class);\n\t\t\tplugin.registerEvents(\"racrace\", RaCRaceEvent.class);\n\t\t\tplugin.registerEvents(\"racmana\", RaCManaEvent.class);\n\t\t\tplugin.registerEvents(\"racexp\", RaCExpEvent.class);\n\t\t\tplugin.registerEvents(\"raclevel\", RaCLevelEvent.class);\n\t\t\tplugin.registerVariable(\"racclass\", RaCClassVariable.class);\n\t\t\tplugin.registerVariable(\"racrace\", RaCRaceVariable.class);\n\t\t\tplugin.registerVariable(\"racexp\", RaCExpVariable.class);\n\t\t\tplugin.registerVariable(\"raclevel\", RaCLevelVariable.class);\n\t\t\thooked.add(\"RacesAndClasses\");\n\t\t}\n\t\t\n\t\t// hook into LegendQuest\n\t\tif (Bukkit.getPluginManager().isPluginEnabled(\"LegendQuest\")\n\t\t\t\t&& plugin.getConfig().getString(\"hook.legendquest\").equalsIgnoreCase(\"true\")) {\n\t\t\tplugin.registerConditions(\"lqclass\", LQClassCondition.class);\n\t\t\tplugin.registerConditions(\"lqrace\", LQRaceCondition.class);\n\t\t\tplugin.registerConditions(\"lqattribute\", LQAttributeCondition.class);\n\t\t\tplugin.registerConditions(\"lqkarma\", LQKarmaCondition.class);\n\t\t\tplugin.registerVariable(\"lqclass\", LQClassVariable.class);\n\t\t\tplugin.registerVariable(\"lqrace\", LQRaceVariable.class);\n\t\t\tplugin.registerVariable(\"lqattribute\", LQAttributeVariable.class);\n\t\t\tplugin.registerVariable(\"lqkarma\", LQKarmaVariable.class);\n\t\t\thooked.add(\"LegendQuest\");\n\t\t}\n\n\t\t// log which plugins have been hooked\n\t\tif (hooked.size() > 0) {\n\t\t\tStringBuilder string = new StringBuilder();\n\t\t\tfor (String plugin : hooked) {\n\t\t\t\tstring.append(plugin + \", \");\n\t\t\t}\n\t\t\tString plugins = string.substring(0, string.length() - 2);\n\t\t\tplugin.getLogger().info(\"Hooked into \" + plugins + \"!\");\n\t\t}\n\t}\n\n\t/**\n\t * @return the permission\n\t */\n\tpublic static Permission getPermission() {\n\t\treturn instance.permission;\n\t}\n\n\t/**\n\t * @return the economy\n\t */\n\tpublic static Economy getEconomy() {\n\t\treturn instance.economy;\n\t}\n\n\t/**\n\t * @return the EffectLib effect manager\n\t */\n\tpublic static EffectManager getEffectManager() {\n\t\treturn instance.manager;\n\t}\n\n\t/**\n\t * Reloads all stuff connected to other plugins.\n\t */\n\tpublic static void reload() {\n\t\tif (instance.hooked.contains(\"Citizens\") && instance.hooked.contains(\"EffectLib\")) {\n\t\t\tCitizensParticle.reload();\n\t\t}\n\t\tif (instance.hooked.contains(\"HolographicDisplays\")) {\n\t\t\tinstance.hologramLoop.cancel();\n\t\t\tinstance.hologramLoop = new HologramLoop();\n\t\t}\n\t}\n\n\t/**\n\t * Is called when BetonQuest is being disabled. Does everything the\n\t * compatible plugins require to do on disable.\n\t */\n\tpublic void disable() {\n\t\tif (hooked.contains(\"EffectLib\")) {\n\t\t\tmanager.dispose();\n\t\t}\n\t\tif (hooked.contains(\"HolographicDisplays\")) {\n\t\t\thologramLoop.cancel();\n\t\t}\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"Co0sh/BetonQuest","sample_ref":"refs/heads/master","sample_path":"src/main/java/pl/betoncraft/betonquest/compatibility/Compatibility.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"28145bae6a521cf4e9763bc817b5af026766b9de","size":"1395","content":"package edu.cmu.lti.oaqa.baseqa.eval;\n\nimport org.apache.uima.UimaContext;\nimport org.apache.uima.analysis_component.JCasAnnotator_ImplBase;\nimport org.apache.uima.analysis_engine.AnalysisEngineProcessException;\nimport org.apache.uima.fit.util.JCasUtil;\nimport org.apache.uima.jcas.JCas;\nimport org.apache.uima.jcas.cas.TOP;\nimport org.apache.uima.resource.ResourceInitializationException;\n\nimport edu.cmu.lti.oaqa.baseqa.util.ProviderCache;\nimport edu.cmu.lti.oaqa.baseqa.util.UimaContextHelper;\nimport edu.cmu.lti.oaqa.baseqa.util.ViewType;\nimport edu.cmu.lti.oaqa.framework.types.InputElement;\n\npublic class GoldStandardDecorator<T extends TOP> extends JCasAnnotator_ImplBase {\n\n  private GoldStandardPersistenceProvider<T> persistence;\n\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void initialize(UimaContext context) throws ResourceInitializationException {\n    String pp = UimaContextHelper.getConfigParameterStringValue(context, \"persistence-provider\");\n    persistence = ProviderCache.getProvider(pp, GoldStandardPersistenceProvider.class);\n  }\n\n  @Override\n  public void process(JCas jcas) throws AnalysisEngineProcessException {\n    InputElement input = JCasUtil.select(jcas, InputElement.class).stream().findFirst().get();\n    persistence.populateGoldStandard(input.getDataset(), input.getSequenceId(),\n            ViewType.getGsView(jcas)).forEach(T::addToIndexes);\n  }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"oaqa/baseqa","sample_ref":"refs/heads/master","sample_path":"src/main/java/edu/cmu/lti/oaqa/baseqa/eval/GoldStandardDecorator.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d25ee90058dc2f49a6366bf9688cce8711089728","size":"2557","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Daniel Laffan using IMS Development Environment (version 1.80 build 5465.13953)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n\r\npackage ims.clinical.forms.otherequipmentintraopdialog;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic final class AccessLogic extends BaseAccessLogic implements Serializable\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tpublic boolean isAccessible()\r\n\t{\r\n\t\tif(!super.isAccessible())\r\n\t\t\treturn false;\r\n\r\n\t\t// TODO: Add your conditions here.\r\n\t\treturn true;\r\n\t}\r\n\tpublic boolean isReadOnly()\r\n\t{\r\n\t\tif(super.isReadOnly())\r\n\t\t\treturn true;\r\n\r\n\t\t// TODO: Add your conditions here.\r\n\t\treturn false;\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Clinical/src/ims/clinical/forms/otherequipmentintraopdialog/AccessLogic.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"3ded264895af79e06ef4295309806f89241dc861","size":"547","content":"package com.braintreegateway;\n\nimport com.braintreegateway.util.NodeWrapper;\n\nimport java.util.Calendar;\n\npublic final class AccountUpdaterDailyReport {\n    private final String reportUrl;\n    private final Calendar reportDate;\n\n    public AccountUpdaterDailyReport(NodeWrapper node) {\n        this.reportUrl = node.findString(\"report-url\");\n        this.reportDate = node.findDate(\"report-date\");\n    }\n\n    public String getReportUrl() {\n        return reportUrl;\n    }\n\n    public Calendar getReportDate() {\n        return reportDate;\n    }\n}\n\n","binary":"false","copies":"1","sample_repo_name":"braintree/braintree_java","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/braintreegateway/AccountUpdaterDailyReport.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7139baea2598eb578e07720818303510c486db1b","size":"12763","content":"package mcjty.rftools.blocks.spaceprojector;\n\nimport cpw.mods.fml.common.Optional;\nimport dan200.computercraft.api.lua.ILuaContext;\nimport dan200.computercraft.api.lua.LuaException;\nimport dan200.computercraft.api.peripheral.IComputerAccess;\nimport dan200.computercraft.api.peripheral.IPeripheral;\nimport li.cil.oc.api.machine.Arguments;\nimport li.cil.oc.api.machine.Callback;\nimport li.cil.oc.api.machine.Context;\nimport li.cil.oc.api.network.SimpleComponent;\nimport mcjty.lib.container.InventoryHelper;\nimport mcjty.lib.entity.GenericEnergyReceiverTileEntity;\nimport mcjty.lib.network.Argument;\nimport mcjty.lib.varia.Coordinate;\nimport mcjty.rftools.blocks.RedstoneMode;\nimport net.minecraft.block.Block;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.entity.player.EntityPlayerMP;\nimport net.minecraft.inventory.ISidedInventory;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.nbt.NBTTagCompound;\nimport net.minecraft.nbt.NBTTagList;\nimport net.minecraft.world.World;\nimport net.minecraftforge.common.DimensionManager;\nimport net.minecraftforge.common.util.Constants;\n\nimport java.util.Map;\n\n@Optional.InterfaceList({\n        @Optional.Interface(iface = \"li.cil.oc.api.network.SimpleComponent\", modid = \"OpenComputers\"),\n        @Optional.Interface(iface = \"dan200.computercraft.api.peripheral.IPeripheral\", modid = \"ComputerCraft\")})\npublic class SpaceProjectorTileEntity extends GenericEnergyReceiverTileEntity implements ISidedInventory, SimpleComponent, IPeripheral {\n\n    public static final String COMPONENT_NAME = \"space_projector\";\n\n    public static final String CMD_RSMODE = \"rsMode\";\n    public static final String CMD_PROJECT = \"project\";\n\n    private InventoryHelper inventoryHelper = new InventoryHelper(this, SpaceProjectorContainer.factory, 1);\n\n    private RedstoneMode redstoneMode = RedstoneMode.REDSTONE_IGNORED;\n    private int powered = 0;\n    private Coordinate minBox = null;\n    private Coordinate maxBox = null;\n\n    public SpaceProjectorTileEntity() {\n        super(SpaceProjectorConfiguration.SPACEPROJECTOR_MAXENERGY, SpaceProjectorConfiguration.SPACEPROJECTOR_RECEIVEPERTICK);\n    }\n\n    @Override\n    @Optional.Method(modid = \"ComputerCraft\")\n    public String getType() {\n        return COMPONENT_NAME;\n    }\n\n    @Override\n    @Optional.Method(modid = \"ComputerCraft\")\n    public String[] getMethodNames() {\n        return new String[] { \"hasCard\", \"getRedstoneMode\", \"setRedstoneMode\"  };\n    }\n\n    @Override\n    @Optional.Method(modid = \"ComputerCraft\")\n    public Object[] callMethod(IComputerAccess computer, ILuaContext context, int method, Object[] arguments) throws LuaException, InterruptedException {\n        switch (method) {\n            case 0: return new Object[] { hasCard() != null };\n            case 1: return new Object[] { getRedstoneMode().getDescription() };\n            case 2: return setRedstoneMode((String) arguments[0]);\n        }\n        return new Object[0];\n    }\n\n    @Override\n    @Optional.Method(modid = \"ComputerCraft\")\n    public void attach(IComputerAccess computer) {\n\n    }\n\n    @Override\n    @Optional.Method(modid = \"ComputerCraft\")\n    public void detach(IComputerAccess computer) {\n\n    }\n\n    @Override\n    @Optional.Method(modid = \"ComputerCraft\")\n    public boolean equals(IPeripheral other) {\n        return false;\n    }\n\n    @Override\n    @Optional.Method(modid = \"OpenComputers\")\n    public String getComponentName() {\n        return COMPONENT_NAME;\n    }\n\n    @Callback(doc = \"Return true if this projector has a space card in it\", getter = true)\n    @Optional.Method(modid = \"OpenComputers\")\n    public Object[] hasCard(Context context, Arguments args) throws Exception {\n        return new Object[] { hasCard() != null };\n    }\n\n    @Callback(doc = \"Get the current redstone mode. Values are 'Ignored', 'Off', or 'On'\", getter = true)\n    @Optional.Method(modid = \"OpenComputers\")\n    public Object[] getRedstoneMode(Context context, Arguments args) throws Exception {\n        return new Object[] { getRedstoneMode().getDescription() };\n    }\n\n    @Callback(doc = \"Set the current redstone mode. Values are 'Ignored', 'Off', or 'On'\", setter = true)\n    @Optional.Method(modid = \"OpenComputers\")\n    public Object[] setRedstoneMode(Context context, Arguments args) throws Exception {\n        String mode = args.checkString(0);\n        return setRedstoneMode(mode);\n    }\n\n    private NBTTagCompound hasCard() {\n        ItemStack itemStack = inventoryHelper.getStackInSlot(0);\n        if (itemStack == null || itemStack.stackSize == 0) {\n            return null;\n        }\n\n        NBTTagCompound tagCompound = itemStack.getTagCompound();\n        return tagCompound;\n    }\n\n\n    @Override\n    public void setPowered(int powered) {\n        if (this.powered != powered) {\n            this.powered = powered;\n            markDirty();\n        }\n    }\n\n    public RedstoneMode getRedstoneMode() {\n        return redstoneMode;\n    }\n\n    private Object[] setRedstoneMode(String mode) {\n        RedstoneMode redstoneMode = RedstoneMode.getMode(mode);\n        if (redstoneMode == null) {\n            throw new IllegalArgumentException(\"Not a valid mode\");\n        }\n        setRedstoneMode(redstoneMode);\n        return null;\n    }\n\n    public void setRedstoneMode(RedstoneMode redstoneMode) {\n        this.redstoneMode = redstoneMode;\n        worldObj.markBlockForUpdate(xCoord, yCoord, zCoord);\n        markDirty();\n    }\n\n    public void unproject() {\n        if (minBox == null) {\n            return;\n        }\n\n        for (int x = minBox.getX() ; x <= maxBox.getX() ; x++) {\n            for (int y = minBox.getY() ; y <= maxBox.getY() ; y++) {\n                for (int z = minBox.getZ() ; z <= maxBox.getZ() ; z++) {\n                    Block block = worldObj.getBlock(x, y, z);\n                    if (block.equals(SpaceProjectorSetup.proxyBlock)) {\n                        worldObj.setBlockToAir(x, y, z);\n                    }\n                }\n            }\n        }\n        minBox = null;\n        maxBox = null;\n\n        markDirty();\n    }\n\n\n\n    private void project() {\n        if (minBox != null) {\n            unproject();\n        }\n        NBTTagCompound tc = hasCard();\n        if (tc == null) {\n            return;\n        }\n\n        int channel = tc.getInteger(\"channel\");\n\n        if (channel == -1) {\n            return;\n        }\n\n        SpaceChamberRepository repository = SpaceChamberRepository.getChannels(worldObj);\n        SpaceChamberRepository.SpaceChamberChannel chamberChannel = repository.getChannel(channel);\n        if (chamberChannel == null) {\n            return;\n        }\n        Coordinate minCorner = chamberChannel.getMinCorner();\n        Coordinate maxCorner = chamberChannel.getMaxCorner();\n        if (minCorner == null || maxCorner == null) {\n            return;\n        }\n\n        int dimension = chamberChannel.getDimension();\n        World world = DimensionManager.getWorld(dimension);\n        int dx = xCoord + 1 - minCorner.getX();\n        int dy = yCoord + 1 - minCorner.getY();\n        int dz = zCoord + 1 - minCorner.getZ();\n\n        minBox = new Coordinate(minCorner.getX() + dx, minCorner.getY() + dy, minCorner.getZ() + dz);\n        maxBox = new Coordinate(maxCorner.getX() + dx, maxCorner.getY() + dy, maxCorner.getZ() + dz);\n\n        for (int x = minCorner.getX() ; x <= maxCorner.getX() ; x++) {\n            for (int y = minCorner.getY() ; y <= maxCorner.getY() ; y++) {\n                for (int z = minCorner.getZ() ; z <= maxCorner.getZ() ; z++) {\n                    Block block = world.getBlock(x, y, z);\n                    if (block != null && !block.isAir(world, x, y, z)) {\n                        worldObj.setBlock(dx + x, dy + y, dz + z, SpaceProjectorSetup.proxyBlock, world.getBlockMetadata(x, y, z), 3);\n                        ProxyBlockTileEntity proxyBlockTileEntity = (ProxyBlockTileEntity) worldObj.getTileEntity(dx + x, dy + y, dz + z);\n                        proxyBlockTileEntity.setCamoBlock(Block.blockRegistry.getIDForObject(block));\n                        proxyBlockTileEntity.setOrigCoordinate(new Coordinate(x, y, z), dimension);\n                    }\n                }\n            }\n        }\n        markDirty();\n    }\n\n    @Override\n    protected void checkStateServer() {\n        if (minBox != null) {\n            NBTTagCompound tc = hasCard();\n            if (tc == null) {\n                unproject();\n            }\n        }\n    }\n\n    @Override\n    public int[] getAccessibleSlotsFromSide(int side) {\n        return SpaceProjectorContainer.factory.getAccessibleSlots();\n    }\n\n    @Override\n    public boolean canInsertItem(int index, ItemStack item, int side) {\n        return SpaceProjectorContainer.factory.isInputSlot(index);\n    }\n\n    @Override\n    public boolean canExtractItem(int index, ItemStack item, int side) {\n        return SpaceProjectorContainer.factory.isOutputSlot(index);\n    }\n\n    @Override\n    public int getSizeInventory() {\n        return inventoryHelper.getCount();\n    }\n\n    @Override\n    public ItemStack getStackInSlot(int index) {\n        return inventoryHelper.getStackInSlot(index);\n    }\n\n    @Override\n    public ItemStack decrStackSize(int index, int amount) {\n        return inventoryHelper.decrStackSize(index, amount);\n    }\n\n    @Override\n    public ItemStack getStackInSlotOnClosing(int index) {\n        return null;\n    }\n\n    @Override\n    public void setInventorySlotContents(int index, ItemStack stack) {\n        inventoryHelper.setInventorySlotContents(getInventoryStackLimit(), index, stack);\n    }\n\n    @Override\n    public String getInventoryName() {\n        return \"Space Projector\";\n    }\n\n    @Override\n    public boolean hasCustomInventoryName() {\n        return false;\n    }\n\n    @Override\n    public int getInventoryStackLimit() {\n        return 1;\n    }\n\n    @Override\n    public boolean isUseableByPlayer(EntityPlayer player) {\n        return canPlayerAccess(player);\n    }\n\n    @Override\n    public void openInventory() {\n\n    }\n\n    @Override\n    public void closeInventory() {\n\n    }\n\n    @Override\n    public boolean isItemValidForSlot(int index, ItemStack stack) {\n        return true;\n    }\n\n    @Override\n    public void readFromNBT(NBTTagCompound tagCompound) {\n        super.readFromNBT(tagCompound);\n        powered = tagCompound.getByte(\"powered\");\n        minBox = Coordinate.readFromNBT(tagCompound, \"minBox\");\n        maxBox = Coordinate.readFromNBT(tagCompound, \"maxBox\");\n    }\n\n    @Override\n    public void readRestorableFromNBT(NBTTagCompound tagCompound) {\n        super.readRestorableFromNBT(tagCompound);\n        readBufferFromNBT(tagCompound);\n        int m = tagCompound.getByte(\"rsMode\");\n        redstoneMode = RedstoneMode.values()[m];\n    }\n\n    private void readBufferFromNBT(NBTTagCompound tagCompound) {\n        NBTTagList bufferTagList = tagCompound.getTagList(\"Items\", Constants.NBT.TAG_COMPOUND);\n        for (int i = 0 ; i < bufferTagList.tagCount() ; i++) {\n            NBTTagCompound nbtTagCompound = bufferTagList.getCompoundTagAt(i);\n            inventoryHelper.setStackInSlot(i, ItemStack.loadItemStackFromNBT(nbtTagCompound));\n        }\n    }\n\n    @Override\n    public void writeToNBT(NBTTagCompound tagCompound) {\n        super.writeToNBT(tagCompound);\n        tagCompound.setByte(\"powered\", (byte) powered);\n        Coordinate.writeToNBT(tagCompound, \"minBox\", minBox);\n        Coordinate.writeToNBT(tagCompound, \"maxBox\", maxBox);\n    }\n\n    @Override\n    public void writeRestorableToNBT(NBTTagCompound tagCompound) {\n        super.writeRestorableToNBT(tagCompound);\n        writeBufferToNBT(tagCompound);\n        tagCompound.setByte(\"rsMode\", (byte) redstoneMode.ordinal());\n    }\n\n    private void writeBufferToNBT(NBTTagCompound tagCompound) {\n        NBTTagList bufferTagList = new NBTTagList();\n        for (int i = 0 ; i < inventoryHelper.getCount() ; i++) {\n            ItemStack stack = inventoryHelper.getStackInSlot(i);\n            NBTTagCompound nbtTagCompound = new NBTTagCompound();\n            if (stack != null) {\n                stack.writeToNBT(nbtTagCompound);\n            }\n            bufferTagList.appendTag(nbtTagCompound);\n        }\n        tagCompound.setTag(\"Items\", bufferTagList);\n    }\n\n    @Override\n    public boolean execute(EntityPlayerMP playerMP, String command, Map<String, Argument> args) {\n        boolean rc = super.execute(playerMP, command, args);\n        if (rc) {\n            return true;\n        }\n        if (CMD_RSMODE.equals(command)) {\n            String m = args.get(\"rs\").getString();\n            setRedstoneMode(RedstoneMode.getMode(m));\n            return true;\n        } else if (CMD_PROJECT.equals(command)) {\n            project();\n            return true;\n        }\n        return false;\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"McJty/RFTools","sample_ref":"refs/heads/master","sample_path":"src/main/java/mcjty/rftools/blocks/spaceprojector/SpaceProjectorTileEntity.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a766939ecf4653d4e424e13187b217097eac86d3","size":"2004","content":"package me.codeboy.android.cycleviewpager.example;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.View.OnClickListener;\n\n/**\n * \u4e3b\u9875\u9762\n *\n * @author YD\n */\npublic class MainUI extends Activity implements OnClickListener {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.cycleviewpager_main);\n        findViewById(R.id.noCycleBtn).setOnClickListener(this);\n        findViewById(R.id.cycleBtn).setOnClickListener(this);\n        findViewById(R.id.wheelCycleBtn).setOnClickListener(this);\n        findViewById(R.id.eventCycleBtn).setOnClickListener(this);\n        findViewById(R.id.fixedCycleBtn).setOnClickListener(this);\n        findViewById(R.id.nestedCycleBtn).setOnClickListener(this);\n    }\n\n    @Override\n    public void onClick(View v) {\n        Intent intent = null;\n        int id = v.getId();\n        if (id == R.id.noCycleBtn) {\n            intent = new Intent(this, NoCycleTextView.class);\n            startActivity(intent);\n            return;\n        }\n        if (id == R.id.cycleBtn) {\n            intent = new Intent(this, CycleTextView.class);\n            startActivity(intent);\n            return;\n        }\n\n        if (id == R.id.wheelCycleBtn) {\n            intent = new Intent(this, WheelCycleTextView.class);\n            startActivity(intent);\n            return;\n        }\n\n        if (id == R.id.eventCycleBtn) {\n            intent = new Intent(this, EventCycleTextView.class);\n            startActivity(intent);\n            return;\n        }\n        if (id == R.id.fixedCycleBtn) {\n            intent = new Intent(this, FixedCycleTextView.class);\n            startActivity(intent);\n            return;\n        }\n        if (id == R.id.nestedCycleBtn) {\n            intent = new Intent(this, NestedCycleTextView.class);\n            startActivity(intent);\n            return;\n        }\n    }\n}","binary":"false","copies":"1","sample_repo_name":"androiddevelop/CycleViewPager","sample_ref":"refs/heads/master","sample_path":"cycle-view-pager-example/src/main/java/me/codeboy/android/cycleviewpager/example/MainUI.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"49765b364d7aae5ba66c29368107713ebd84078d","size":"14597","content":"/*\n * Units of Measurement Implementation for Java SE\n * Copyright (c) 2005-2016, Jean-Marie Dautelle, Werner Keil, V2COM.\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions\n *    and the following disclaimer in the documentation and/or other materials provided with the distribution.\n *\n * 3. Neither the name of JSR-363 nor the names of its contributors may be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage tec.uom.se;\n\nimport java.math.BigDecimal;\nimport java.math.MathContext;\nimport java.util.Comparator;\nimport java.util.Objects;\n\nimport javax.measure.Quantity;\nimport javax.measure.Unit;\nimport javax.measure.UnitConverter;\nimport javax.measure.quantity.Dimensionless;\n\nimport tec.uom.lib.common.function.UnitSupplier;\nimport tec.uom.lib.common.function.ValueSupplier;\nimport tec.uom.se.function.NaturalOrder;\nimport tec.uom.se.quantity.Quantities;\n\n/**\n * <p>\n * This class represents the immutable result of a scalar measurement stated in a known unit.\n * </p>\n *\n * <p>\n * To avoid any lost of precision, known exact measure (e.g. physical constants) should not be created from <code>double</code> constants but from\n * their decimal representation.<br/>\n * <code>\n *         public static final Quantity<Velocity> C = AbstractQuantity.of(\"299792458 m/s\").asType(Velocity.class);\n *         // Speed of Light (exact).\n *    </code>\n * </p>\n *\n * <p>\n * Measures can be converted to different units, the conversion precision is determined by the specified {@link MathContext}.<br/>\n * <code>\n *         Measurement<Number, Velocity> milesPerHour = C.to(MILES_PER_HOUR, MathContext.DECIMAL128); // Use BigDecimal implementation.\n *         System.out.println(milesPerHour);\n * \n *         > 670616629.3843951324266284896206156 [mi_i]/h\n *     </code> If no precision is specified <code>double</code> precision is assumed.<code>\n *         Measurement<Double, Velocity> milesPerHour = C.to(MILES_PER_HOUR); // Use double implementation (fast).\n *         System.out.println(milesPerHour);\n * \n *         > 670616629.3843951 [mi_i]/h\n *     </code>\n * </p>\n *\n * <p>\n * Applications may sub-class {@link AbstractQuantity} for particular quantity types.<br/>\n * <code>\n *         // Quantity of type Mass based on <code>double</code> primitive types. public class MassAmount extends AbstractQuantity<Mass> { private\n * final double _kilograms; // Internal SI representation. private Mass(double kilograms) { _kilograms = kilograms; } public static Mass of(double\n * value, Unit<Mass> unit) { return new Mass(unit.getConverterTo(Units.KILOGRAM).convert(value)); } public Unit<Mass> getUnit() { return\n * Units.KILOGRAM; } public Double getValue() { return _kilograms; } ... }\n *\n * // Complex numbers quantities. public class ComplexQuantity\n * <Q extends Quantity>extends AbstractQuantity\n * <Q>{ public Complex getValue() { ... } // Assuming Complex is a Number. ... }\n *\n * // Specializations of complex numbers quantities. public class Current extends ComplexQuantity<ElectricCurrent> {...} public class Tension extends\n * ComplexQuantity<ElectricPotential> {...} </code>\n * </p>\n *\n * <p>\n * All instances of this class shall be immutable.\n * </p>\n *\n * @author <a href=\"mailto:werner@uom.technology\">Werner Keil</a>\n * @version 0.8.1, $Date: 2015-12-28 $\n */\n@SuppressWarnings(\"unchecked\")\npublic abstract class AbstractQuantity<Q extends Quantity<Q>> implements ComparableQuantity<Q>, UnitSupplier<Q>, ValueSupplier<Number> {\n\n  /**\n\t * \n\t */\n  private static final long serialVersionUID = 293852425369811882L;\n\n  private final Unit<Q> unit;\n\n  /**\n   * Holds a dimensionless quantity of none (exact).\n   */\n  public static final Quantity<Dimensionless> NONE = Quantities.getQuantity(0, AbstractUnit.ONE);\n\n  /**\n   * Holds a dimensionless quantity of one (exact).\n   */\n  public static final Quantity<Dimensionless> ONE = Quantities.getQuantity(1, AbstractUnit.ONE);\n\n  /**\n   * constructor.\n   */\n  protected AbstractQuantity(Unit<Q> unit) {\n    this.unit = unit;\n  }\n\n  /**\n   * Returns the numeric value of the quantity.\n   *\n   * @return the quantity value.\n   */\n  @Override\n  public abstract Number getValue();\n\n  /**\n   * Returns the measurement unit.\n   *\n   * @return the measurement unit.\n   */\n  @Override\n  public Unit<Q> getUnit() {\n    return unit;\n  }\n\n  /**\n   * Convenient method equivalent to {@link #to(javax.measure.unit.Unit) to(this.getUnit().toSI())}.\n   *\n   * @return this measure or a new measure equivalent to this measure but stated in SI units.\n   * @throws ArithmeticException\n   *           if the result is inexact and the quotient has a non-terminating decimal expansion.\n   */\n  public Quantity<Q> toSI() {\n    return to(this.getUnit().getSystemUnit());\n  }\n\n  /**\n   * Returns this measure after conversion to specified unit. The default implementation returns <code>Measure.valueOf(doubleValue(unit), unit)</code>\n   * . If this measure is already stated in the specified unit, then this measure is returned and no conversion is performed.\n   *\n   * @param unit\n   *          the unit in which the returned measure is stated.\n   * @return this measure or a new measure equivalent to this measure but stated in the specified unit.\n   * @throws ArithmeticException\n   *           if the result is inexact and the quotient has a non-terminating decimal expansion.\n   */\n  @Override\n  public ComparableQuantity<Q> to(Unit<Q> unit) {\n    if (unit.equals(this.getUnit())) {\n      return this;\n    }\n    UnitConverter t = getUnit().getConverterTo(unit);\n    Number convertedValue = t.convert(getValue());\n    return Quantities.getQuantity(convertedValue, unit);\n  }\n\n  /**\n   * Returns this measure after conversion to specified unit. The default implementation returns\n   * <code>Measure.valueOf(decimalValue(unit, ctx), unit)</code>. If this measure is already stated in the specified unit, then this measure is\n   * returned and no conversion is performed.\n   *\n   * @param unit\n   *          the unit in which the returned measure is stated.\n   * @param ctx\n   *          the math context to use for conversion.\n   * @return this measure or a new measure equivalent to this measure but stated in the specified unit.\n   * @throws ArithmeticException\n   *           if the result is inexact but the rounding mode is <code>UNNECESSARY</code> or <code>mathContext.precision == 0</code> and the quotient\n   *           has a non-terminating decimal expansion.\n   */\n  public Quantity<Q> to(Unit<Q> unit, MathContext ctx) {\n    if (unit.equals(this.getUnit())) {\n      return this;\n    }\n    return Quantities.getQuantity(decimalValue(unit, ctx), unit);\n  }\n\n  @Override\n  public boolean isGreaterThan(Quantity<Q> that) {\n    return this.compareTo(that) > 0;\n  }\n\n  @Override\n  public boolean isGreaterThanOrEqualTo(Quantity<Q> that) {\n    return this.compareTo(that) >= 0;\n  }\n\n  @Override\n  public boolean isLessThan(Quantity<Q> that) {\n    return this.compareTo(that) < 0;\n  }\n\n  @Override\n  public boolean isLessThanOrEqualTo(Quantity<Q> that) {\n    return this.compareTo(that) <= 0;\n  }\n\n  @Override\n  public boolean isEquivalentTo(Quantity<Q> that) {\n    return this.compareTo(that) == 0;\n  }\n\n  /**\n   * Compares this measure to the specified Measurement quantity. The default implementation compares the {@link AbstractQuantity#doubleValue(Unit)}\n   * of both this measure and the specified Measurement stated in the same unit (this measure's {@link #getUnit() unit}).\n   *\n   * @return a negative integer, zero, or a positive integer as this measure is less than, equal to, or greater than the specified Measurement\n   *         quantity.\n   * @see {@link NaturalOrder}\n   */\n  @Override\n  public int compareTo(Quantity<Q> that) {\n    final Comparator<Quantity<Q>> comparator = new NaturalOrder<>();\n    return comparator.compare(this, that);\n  }\n\n  /**\n   * Compares this measure against the specified object for <b>strict</b> equality (same unit and same amount).\n   *\n   * <p>\n   * Similarly to the {@link BigDecimal#equals} method which consider 2.0 and 2.00 as different objects because of different internal scales,\n   * quantities such as <code>Quantities.getQuantity(3.0, KILOGRAM)</code> <code>Quantities.getQuantity(3, KILOGRAM)</code> and\n   * <code>Quantities.getQuantity(\"3 kg\")</code> might not be considered equals because of possible differences in their implementations.\n   * </p>\n   *\n   * <p>\n   * To compare measures stated using different units or using different amount implementations the {@link #compareTo compareTo} or\n   * {@link #equals(javax.measure.Quantity, double, javax.measure.unit.Unit) equals(Quantity, epsilon, epsilonUnit)} methods should be used.\n   * </p>\n   *\n   * @param obj\n   *          the object to compare with.\n   * @return <code>this.getUnit.equals(obj.getUnit())\n   *         && this.getValue().equals(obj.getValue())</code>\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if (obj instanceof AbstractQuantity<?>) {\n      AbstractQuantity<?> that = (AbstractQuantity<?>) obj;\n      return Objects.equals(getUnit(), that.getUnit()) && Objects.equals(getValue(), that.getValue());\n    }\n    return false;\n  }\n\n  /**\n   * Compares this measure and the specified Measurement to the given accuracy. Measurements are considered approximately equals if their absolute\n   * differences when stated in the same specified unit is less than the specified epsilon.\n   *\n   * @param that\n   *          the Measurement to compare with.\n   * @param epsilon\n   *          the absolute error stated in epsilonUnit.\n   * @param epsilonUnit\n   *          the epsilon unit.\n   * @return <code>abs(this.doubleValue(epsilonUnit) - that.doubleValue(epsilonUnit)) &lt;= epsilon</code>\n   */\n  public boolean equals(AbstractQuantity<Q> that, double epsilon, Unit<Q> epsilonUnit) {\n    return Math.abs(this.doubleValue(epsilonUnit) - that.doubleValue(epsilonUnit)) <= epsilon;\n  }\n\n  /**\n   * Returns the hash code for this measure.\n   *\n   * @return the hash code value.\n   */\n  @Override\n  public int hashCode() {\n    return Objects.hash(getUnit(), getValue());\n  }\n\n  public abstract boolean isBig();\n\n  /**\n   * Returns the <code>String</code> representation of this measure. The string produced for a given measure is always the same; it is not affected by\n   * locale. This means that it can be used as a canonical string representation for exchanging measure, or as a key for a Hashtable, etc.\n   * Locale-sensitive measure formatting and parsing is handled by the {@link MeasurementFormat} class and its subclasses.\n   *\n   * @return <code>UnitFormat.getInternational().format(this)</code>\n   */\n  @Override\n  public String toString() {\n    return String.valueOf(getValue()) + \" \" + String.valueOf(getUnit());\n  }\n\n  public abstract BigDecimal decimalValue(Unit<Q> unit, MathContext ctx) throws ArithmeticException;\n\n  public abstract double doubleValue(Unit<Q> unit) throws ArithmeticException;\n\n  public final int intValue(Unit<Q> unit) throws ArithmeticException {\n    long longValue = longValue(unit);\n    if ((longValue < Integer.MIN_VALUE) || (longValue > Integer.MAX_VALUE)) {\n      throw new ArithmeticException(\"Cannot convert \" + longValue + \" to int (overflow)\");\n    }\n    return (int) longValue;\n  }\n\n  protected long longValue(Unit<Q> unit) throws ArithmeticException {\n    double result = doubleValue(unit);\n    if ((result < Long.MIN_VALUE) || (result > Long.MAX_VALUE)) {\n      throw new ArithmeticException(\"Overflow (\" + result + \")\");\n    }\n    return (long) result;\n  }\n\n  protected final float floatValue(Unit<Q> unit) {\n    return (float) doubleValue(unit);\n  }\n\n  @Override\n  public <T extends Quantity<T>, E extends Quantity<E>> ComparableQuantity<E> divide(Quantity<T> that, Class<E> asTypeQuantity) {\n\n    return divide(Objects.requireNonNull(that)).asType(Objects.requireNonNull(asTypeQuantity));\n\n  }\n\n  @Override\n  public <T extends Quantity<T>, E extends Quantity<E>> ComparableQuantity<E> multiply(Quantity<T> that, Class<E> asTypeQuantity) {\n    return multiply(Objects.requireNonNull(that)).asType(Objects.requireNonNull(asTypeQuantity));\n  }\n\n  @Override\n  public <T extends Quantity<T>> ComparableQuantity<T> inverse(Class<T> quantityClass) {\n    return inverse().asType(quantityClass);\n  }\n\n  /**\n   * Casts this quantity to a parameterized quantity of specified nature or throw a <code>ClassCastException</code> if the dimension of the specified\n   * quantity and its unit's dimension do not match. For example:<br/>\n   * <code>\n   *     Quantity<Length> length = ComparableQuantity.of(\"2 km\").asType(Length.class);\n   * </code>\n   *\n   * @param type\n   *          the quantity class identifying the nature of the measure.\n   * @return this measure parameterized with the specified type.\n   * @throws ClassCastException\n   *           if the dimension of this unit is different from the specified quantity dimension.\n   * @throws UnsupportedOperationException\n   *           if the specified quantity class does not have a public static field named \"UNIT\" holding the SI unit for the quantity.\n   * @see Unit#asType(Class)\n   */\n  public final <T extends Quantity<T>> ComparableQuantity<T> asType(Class<T> type) throws ClassCastException {\n    this.getUnit().asType(type); // Raises ClassCastException if dimension\n    // mismatches.\n    return (AbstractQuantity<T>) this;\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"unitsofmeasurement/uom-se","sample_ref":"refs/heads/master","sample_path":"src/main/java/tec/uom/se/AbstractQuantity.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e0f51f68245e445b243b37b4165de661f3637660","size":"1465","content":"/*\n * digitalpetri OPC-UA SDK\n *\n * Copyright (C) 2015 Kevin Herron\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage com.digitalpetri.opcua.sdk.core.model.objects;\n\nimport com.digitalpetri.opcua.sdk.core.model.variables.PropertyType;\nimport com.digitalpetri.opcua.sdk.server.model.Property;\nimport com.digitalpetri.opcua.stack.core.types.builtin.NodeId;\nimport com.digitalpetri.opcua.stack.core.types.builtin.QualifiedName;\n\npublic interface NonExclusiveDeviationAlarmType extends NonExclusiveLimitAlarmType {\n\n    Property<NodeId> SETPOINT_NODE = new Property.BasicProperty<>(\n            QualifiedName.parse(\"0:SetpointNode\"),\n            NodeId.parse(\"ns=0;i=17\"),\n            -1,\n            NodeId.class\n    );\n\n    NodeId getSetpointNode();\n\n    PropertyType getSetpointNodeNode();\n\n    void setSetpointNode(NodeId value);\n}\n","binary":"false","copies":"1","sample_repo_name":"digitalpetri/ua-server-sdk","sample_ref":"refs/heads/master","sample_path":"ua-server/src/main/java/com/digitalpetri/opcua/sdk/core/model/objects/NonExclusiveDeviationAlarmType.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2f95a1ef05cb0bcae4bfb23fd04ac52ddafa55a8","size":"1997","content":"//\n// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 \n// See <a href=\"http://java.sun.com/xml/jaxb\">http://java.sun.com/xml/jaxb</a> \n// Any modifications to this file will be lost upon recompilation of the source schema. \n// Generated on: 2016.02.25 at 03:58:45 PM GMT+03:00 \n//\n\n\npackage uk.dsxt.voting.common.iso20022.jaxb;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlType;\n\n\n/**\n * <p>Java class for Document_MeetingInstructionStatus complex type.\n * \n * <p>The following schema fragment specifies the expected content contained within this class.\n * \n * <pre>\n * &lt;complexType name=\"Document_MeetingInstructionStatus\">\n *   &lt;complexContent>\n *     &lt;restriction base=\"{http://www.w3.org/2001/XMLSchema}anyType\">\n *       &lt;sequence>\n *         &lt;element name=\"MtgInstrSts\" type=\"{}MeetingInstructionStatusV04\"/>\n *       &lt;/sequence>\n *     &lt;/restriction>\n *   &lt;/complexContent>\n * &lt;/complexType>\n * </pre>\n * \n * \n */\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"Document_MeetingInstructionStatus\", propOrder = {\n    \"mtgInstrSts\"\n})\npublic class DocumentMeetingInstructionStatus {\n\n    @XmlElement(name = \"MtgInstrSts\", required = true)\n    protected MeetingInstructionStatusV04 mtgInstrSts;\n\n    /**\n     * Gets the value of the mtgInstrSts property.\n     * \n     * @return\n     *     possible object is\n     *     {@link MeetingInstructionStatusV04 }\n     *     \n     */\n    public MeetingInstructionStatusV04 getMtgInstrSts() {\n        return mtgInstrSts;\n    }\n\n    /**\n     * Sets the value of the mtgInstrSts property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link MeetingInstructionStatusV04 }\n     *     \n     */\n    public void setMtgInstrSts(MeetingInstructionStatusV04 value) {\n        this.mtgInstrSts = value;\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"dsx-tech/e-voting","sample_ref":"refs/heads/master","sample_path":"sources/e-voting/common/src/main/java/uk/dsxt/voting/common/iso20022/jaxb/DocumentMeetingInstructionStatus.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5795ab97875269fec1164f1c9c12affaa8483511","size":"1950","content":"package org.secnod.shiro.jersey;\n\nimport java.lang.annotation.Annotation;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.ws.rs.Priorities;\nimport javax.ws.rs.container.DynamicFeature;\nimport javax.ws.rs.container.ResourceInfo;\nimport javax.ws.rs.core.FeatureContext;\n\nimport org.apache.shiro.authz.annotation.RequiresAuthentication;\nimport org.apache.shiro.authz.annotation.RequiresGuest;\nimport org.apache.shiro.authz.annotation.RequiresPermissions;\nimport org.apache.shiro.authz.annotation.RequiresRoles;\nimport org.apache.shiro.authz.annotation.RequiresUser;\n\n/**\n * Wraps {@link AuthorizationFilter filters} around JAX-RS resources that are annotated with Shiro annotations.\n */\npublic class AuthorizationFilterFeature implements DynamicFeature {\n\n    private static List<Class<? extends Annotation>> shiroAnnotations = Collections.unmodifiableList(Arrays.asList(\n            RequiresPermissions.class,\n            RequiresRoles.class,\n            RequiresAuthentication.class,\n            RequiresUser.class,\n            RequiresGuest.class));\n\n    @Override\n    public void configure(ResourceInfo resourceInfo, FeatureContext context) {\n\n        List<Annotation> authzSpecs = new ArrayList<>();\n\n        for (Class<? extends Annotation> annotationClass : shiroAnnotations) {\n            // XXX What is the performance of getAnnotation vs getAnnotations?\n            Annotation classAuthzSpec = resourceInfo.getResourceClass().getAnnotation(annotationClass);\n            Annotation methodAuthzSpec = resourceInfo.getResourceMethod().getAnnotation(annotationClass);\n\n            if (classAuthzSpec != null) authzSpecs.add(classAuthzSpec);\n            if (methodAuthzSpec != null) authzSpecs.add(methodAuthzSpec);\n        }\n\n        if (!authzSpecs.isEmpty()) {\n            context.register(new AuthorizationFilter(authzSpecs), Priorities.AUTHORIZATION);\n        }\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"silb/shiro-jersey","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/secnod/shiro/jersey/AuthorizationFilterFeature.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bdd3b25eb5e6ab8a76d6dcf48c94ceb5abcad71b","size":"3298","content":"package org.openlca.app.results.quick;\n\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.widgets.Button;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Text;\nimport org.eclipse.ui.forms.IManagedForm;\nimport org.eclipse.ui.forms.editor.FormPage;\nimport org.eclipse.ui.forms.widgets.FormToolkit;\nimport org.eclipse.ui.forms.widgets.ScrolledForm;\nimport org.openlca.app.M;\nimport org.openlca.app.rcp.images.Images;\nimport org.openlca.app.results.contributions.ContributionChartSection;\nimport org.openlca.app.util.Controls;\nimport org.openlca.app.util.FileType;\nimport org.openlca.app.util.Labels;\nimport org.openlca.app.util.UI;\nimport org.openlca.core.math.CalculationSetup;\nimport org.openlca.core.model.ProductSystem;\nimport org.openlca.core.model.descriptors.ImpactMethodDescriptor;\nimport org.openlca.core.model.descriptors.NwSetDescriptor;\n\npublic class QuickResultInfoPage extends FormPage {\n\n\tprivate QuickResultEditor editor;\n\tprivate FormToolkit toolkit;\n\n\tpublic QuickResultInfoPage(QuickResultEditor editor) {\n\t\tsuper(editor, \"QuickResultInfoPage\", M.GeneralInformation);\n\t\tthis.editor = editor;\n\t}\n\n\t@Override\n\tprotected void createFormContent(IManagedForm managedForm) {\n\t\tScrolledForm form = UI.formHeader(managedForm, M.ResultsOf + \" \"\n\t\t\t\t+ Labels.getDisplayName(editor.getSetup().productSystem));\n\t\tthis.toolkit = managedForm.getToolkit();\n\t\tComposite body = UI.formBody(form, toolkit);\n\t\tcreateInfoSection(body);\n\t\tcreateChartSections(body);\n\t\tform.reflow(true);\n\t}\n\n\tprivate void createChartSections(Composite body) {\n\t\tContributionChartSection.forFlows(editor.getResult()).render(body,\n\t\t\t\ttoolkit);\n\t\tif (editor.getResult().hasImpactResults()) {\n\t\t\tContributionChartSection.forImpacts(editor.getResult()).render(\n\t\t\t\t\tbody, toolkit);\n\t\t}\n\t}\n\n\tprivate void createInfoSection(Composite body) {\n\t\tCalculationSetup setup = editor.getSetup();\n\t\tif (setup == null || setup.productSystem == null)\n\t\t\treturn;\n\t\tProductSystem system = setup.productSystem;\n\t\tComposite composite = UI.formSection(body, toolkit,\n\t\t\t\tM.GeneralInformation);\n\t\tString sysText = Labels.getDisplayName(system);\n\t\tcreateText(composite, M.ProductSystem, sysText);\n\t\tString allocText = Labels.getEnumText(setup.allocationMethod);\n\t\tcreateText(composite, M.AllocationMethod, allocText);\n\t\tString targetText = system.getTargetAmount() + \" \"\n\t\t\t\t+ system.getTargetUnit().getName() + \" \"\n\t\t\t\t+ system.getReferenceExchange().getFlow().getName();\n\t\tcreateText(composite, M.TargetAmount, targetText);\n\t\tImpactMethodDescriptor method = setup.impactMethod;\n\t\tif (method != null)\n\t\t\tcreateText(composite, M.ImpactAssessmentMethod,\n\t\t\t\t\tmethod.getName());\n\t\tNwSetDescriptor nwSet = setup.nwSet;\n\t\tif (nwSet != null)\n\t\t\tcreateText(composite, M.NormalizationAndWeightingSet,\n\t\t\t\t\tnwSet.getName());\n\t\tcreateExportButton(composite);\n\t}\n\n\tprivate void createExportButton(Composite composite) {\n\t\ttoolkit.createLabel(composite, \"\");\n\t\tButton button = toolkit.createButton(composite, M.ExportToExcel,\n\t\t\t\tSWT.NONE);\n\t\tbutton.setImage(Images.get(FileType.EXCEL));\n\t\tControls.onSelect(button, (e) -> new ExcelExport().run());\n\t}\n\n\tprivate void createText(Composite parent, String label, String val) {\n\t\tText text = UI.formText(parent, toolkit, label);\n\t\ttext.setText(val);\n\t\ttext.setEditable(false);\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"GreenDelta/olca-app","sample_ref":"refs/heads/master","sample_path":"olca-app/src/org/openlca/app/results/quick/QuickResultInfoPage.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c6cb860aeda2db4d5c92523d77717abfe2fb3e16","size":"1504","content":"/*\n * Copyright 2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage leap.web.json;\n\nimport java.io.IOException;\nimport java.io.Writer;\nimport java.util.function.Consumer;\n\nimport leap.lang.Strings;\nimport leap.lang.js.JS;\nimport leap.web.Request;\nimport leap.web.Response;\nimport leap.web.exception.BadRequestException;\n\npublic class Jsonp {\n\n\tprotected Jsonp() {\n\t\t\n\t}\n\n\tpublic static void write(Request request, Response response, JsonConfig jc, Consumer<Writer> func) throws IOException {\n\t\tWriter writer = response.getWriter();\n\t\t\n\t\tif(jc.isJsonpEnabled()){\n\t\t\tString callback = request.getParameter(jc.getJsonpParameter());\n\t\t\tif(!Strings.isEmpty(callback)){\n\t\t\t\tif(!JS.isValidJavascriptFunction(callback)){\n\t\t\t\t\tthrow new BadRequestException(\"Invalid jsonp callback : \" + callback);\n\t\t\t\t}\n\t\t\t\twriter.write(callback);\n\t\t\t\twriter.write('(');\n\t\t\t\tfunc.accept(writer);\n\t\t\t\twriter.write(')');\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfunc.accept(writer);\n\t}\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"leapframework/framework","sample_ref":"refs/heads/master","sample_path":"web/core/src/main/java/leap/web/json/Jsonp.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"62e5ae9f493b7fca185c885691b2913f16481cd4","size":"1066","content":"/**\n * \n */\npackage com.meidusa.venus.backend.view;\n\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.codehaus.jackson.map.SerializationConfig;\nimport org.codehaus.jackson.map.annotate.JsonSerialize;\n\n/**\n * @author Sun Ning\n * \n */\npublic class ObjectMapperFactory {\n\n    public static ObjectMapper getNullableObjectMapper() {\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        // mapper.configure(SerializationConfig.Feature.INDENT_OUTPUT, true);\n        // mapper.configure(SerializationConfig.Feature.FAIL_ON_EMPTY_BEANS, false);\n        // mapper.configure(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        // //mapper.configure(DeserializationConfig.Feature.USE_ANNOTATIONS, false);\n        // mapper.configure(Feature.AUTO_CLOSE_SOURCE, false);\n        // mapper.configure(JsonGenerator.Feature.AUTO_CLOSE_TARGET, false);\n\n        SerializationConfig config = objectMapper.getSerializationConfig();\n        config.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);\n\n        return objectMapper;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"blusechen/venus","sample_ref":"refs/heads/master","sample_path":"venus-backend/src/main/java/com/meidusa/venus/backend/view/ObjectMapperFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2b5d3264b1c0cb14f854a9158c0c33bc7bd6eaa6","size":"4102","content":"/*\n * Copyright (C) 2015 iWedia S.A. Licensed under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n * or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\npackage com.iwedia.example.tvinput.utils;\n\nimport android.content.Context;\nimport android.content.ContextWrapper;\n\nimport com.iwedia.example.tvinput.data.ChannelDescriptor;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\n\n/**\n * Utility class used for IP channel list management\n */\npublic class ChannelUtils {\n\n    /** Filename of IP service list located in assets directory */\n    private static final String IP_CHANNELS = \"ip_service_list.txt\";\n    /** Application context */\n    private static Context mContext;\n\n    /**\n     * Initialize IP channels\n     */\n    public static void initIpChannels(Context ctx) {\n        mContext = ctx;\n        copyFile(IP_CHANNELS);\n    }\n\n    /**\n     * Read IP channels from file\n     *\n     * @param ctx        Application context\n     * @param ipChannels Array in which to store read files\n     */\n    public static void readIpChannels(Context ctx, ArrayList<ChannelDescriptor> ipChannels) {\n        mContext = ctx;\n        ContextWrapper contextWrapper = new ContextWrapper(ctx);\n        String path = contextWrapper.getFilesDir() + \"/\" + IP_CHANNELS;\n        readFile(ctx, path, ipChannels);\n    }\n\n    /**\n     * Copy IP channel list\n     *\n     * @param filename File name of IP channel list in assets directory\n     */\n    private static void copyFile(String filename) {\n        ContextWrapper contextWrapper = new ContextWrapper(mContext);\n        String file = contextWrapper.getFilesDir().getPath() + \"/\" + filename;\n        File fl = new File(file);\n        if (!fl.exists())\n            copyAssetToData(fl);\n    }\n\n    /**\n     * Copy configuration file from assets to data folder.\n     *\n     * @param file File to copy\n     */\n    private static void copyAssetToData(File file) {\n        try {\n            InputStream myInput = mContext.getAssets().open(file.getName());\n            String outFileName = file.getPath();\n            OutputStream myOutput = new FileOutputStream(outFileName);\n            byte[] buffer = new byte[1024];\n            int length;\n            while ((length = myInput.read(buffer)) > 0) {\n                myOutput.write(buffer, 0, length);\n            }\n            myOutput.flush();\n            myOutput.close();\n            myInput.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * Read the configuration file with built-in application which will be displayed in Content\n     * list.\n     *\n     * @param ctx       Application context\n     * @param filePath  IP channel list file path\n     * @param arrayList Array in which to store read channels\n     */\n    public static void readFile(Context ctx, String filePath,\n            ArrayList<ChannelDescriptor> arrayList) {\n        File file = new File(filePath);\n        BufferedReader br;\n        try {\n            br = new BufferedReader(new FileReader(file));\n            String line;\n            String[] separated = new String[2];\n            while ((line = br.readLine()) != null) {\n                separated = line.split(\"#\");\n                if (arrayList == null)\n                    arrayList = new ArrayList<ChannelDescriptor>();\n                arrayList.add(new ChannelDescriptor(\"0\", separated[1]));\n            }\n            br.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        br = null;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"iWedia/iWediaSimpleTvInputService","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/iwedia/example/tvinput/utils/ChannelUtils.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8c76ed3b2b427a53c740aefb3fe6fd49765aeb49","size":"1579","content":"package net.amygdalum.testrecorder.deserializers.builder;\n\nimport static net.amygdalum.testrecorder.values.SerializedLiteral.literal;\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\nimport static org.junit.Assert.assertThat;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport net.amygdalum.testrecorder.deserializers.Computation;\nimport net.amygdalum.testrecorder.values.SerializedArray;\n\npublic class DefaultArrayAdaptorTest {\n\n\tprivate DefaultArrayAdaptor adaptor;\n\n\t@Before\n\tpublic void before() throws Exception {\n\t\tadaptor = new DefaultArrayAdaptor();\n\t}\n\t\n\t@Test\n\tpublic void testParentNull() throws Exception {\n\t\tassertThat(adaptor.parent(), nullValue());\n\t}\n\n\t@Test\n\tpublic void testMatchesAnyArray() throws Exception {\n\t\tassertThat(adaptor.matches(int[].class),is(true));\n\t\tassertThat(adaptor.matches(Object[].class),is(true));\n\t\tassertThat(adaptor.matches(Integer[].class),is(true));\n\t}\n\n\t@Test\n\tpublic void testTryDeserialize() throws Exception {\n\t\tSerializedArray value = new SerializedArray(int[].class);\n\t\tvalue.add(literal(int.class, 0));\n\t\tvalue.add(literal(int.class, 8));\n\t\tvalue.add(literal(int.class, 15));\n\t\tObjectToSetupCode generator = new ObjectToSetupCode(getClass());\n\t\t\n\t\tComputation result = adaptor.tryDeserialize(value, generator);\n\t\t\n\t\tassertThat(result.getStatements().toString(), containsString(\"int[] intArray1 = new int[]{0, 8, 15}\"));\n\t\tassertThat(result.getValue(), equalTo(\"intArray1\"));\n\t}\n\n\n}\n","binary":"false","copies":"1","sample_repo_name":"almondtools/testrecorder","sample_ref":"refs/heads/master","sample_path":"src/test/java/net/amygdalum/testrecorder/deserializers/builder/DefaultArrayAdaptorTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f1057ba7e6642d73aa9f822c833748d9005dedae","size":"3542","content":"/**\n * DataCleaner (community edition)\n * Copyright (C) 2014 Neopost - Customer Information Management\n *\n * This copyrighted material is made available to anyone wishing to use, modify,\n * copy, or redistribute it subject to the terms and conditions of the GNU\n * Lesser General Public License, as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this distribution; if not, write to:\n * Free Software Foundation, Inc.\n * 51 Franklin Street, Fifth Floor\n * Boston, MA  02110-1301  USA\n */\npackage org.datacleaner.widgets;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.File;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport org.apache.metamodel.util.FileResource;\nimport org.apache.metamodel.util.Resource;\nimport org.junit.Test;\n\npublic class FilenameTextFieldTest {\n\n    @Test\n    public void testAvoidListenerMutations() throws Exception {\n        final FilenameTextField filenameTextField = new FilenameTextField(new File(\".\"), true);\n\n        // create some silly listeners that re-set the value of the widget.\n        filenameTextField.addFileSelectionListener(new FileSelectionListener() {\n            @Override\n            public void onSelected(FilenameTextField filenameTextField, File file) {\n                filenameTextField.setFile(file);\n            }\n        });\n        filenameTextField.addListener(new ResourceTypePresenter.Listener() {\n\n            @Override\n            public void onResourceSelected(ResourceTypePresenter<?> presenter, Resource resource) {\n                filenameTextField.setResource((FileResource) resource);\n            }\n\n            @Override\n            public void onPathEntered(ResourceTypePresenter<?> presenter, String path) {\n            }\n        });\n\n        filenameTextField.setFilename(\"src/foo.txt\");\n        assertEquals(\"src/foo.txt\", filenameTextField.getFile().getPath().replace('\\\\', '/'));\n    }\n\n    @Test\n    public void testDifferentListenersAllGetsNotification() throws Exception {\n        final FilenameTextField filenameTextField = new FilenameTextField(new File(\".\"), true);\n\n        final AtomicBoolean fileSelectionListenerInvoked = new AtomicBoolean(false);\n        final AtomicBoolean resourceListenerInvoked = new AtomicBoolean(false);\n\n        // create some silly listeners that re-set the value of the widget.\n        filenameTextField.addFileSelectionListener(new FileSelectionListener() {\n            @Override\n            public void onSelected(FilenameTextField filenameTextField, File file) {\n                fileSelectionListenerInvoked.set(true);\n            }\n        });\n        filenameTextField.addListener(new ResourceTypePresenter.Listener() {\n\n            @Override\n            public void onResourceSelected(ResourceTypePresenter<?> presenter, Resource resource) {\n                resourceListenerInvoked.set(true);\n            }\n\n            @Override\n            public void onPathEntered(ResourceTypePresenter<?> presenter, String path) {\n            }\n        });\n\n        filenameTextField.setFilename(\"src/foo.txt\");\n\n        assertTrue(fileSelectionListenerInvoked.get());\n        assertTrue(resourceListenerInvoked.get());\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"datacleaner/DataCleaner","sample_ref":"refs/heads/master","sample_path":"desktop/ui/src/test/java/org/datacleaner/widgets/FilenameTextFieldTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1826310539b575b214a2bb96b3a545a10b8a8c35","size":"4971","content":"package com.github.ltsopensource.store.jdbc.datasource;\n\nimport com.alibaba.druid.pool.DruidDataSource;\nimport com.github.ltsopensource.core.cluster.Config;\nimport com.github.ltsopensource.core.commons.utils.StringUtils;\nimport com.github.ltsopensource.core.constant.ExtConfig;\nimport com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.core.logger.LoggerFactory;\n\nimport javax.sql.DataSource;\nimport java.lang.reflect.Method;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * druid\u76f8\u5173\u7684\u914d\u7f6e\u4f7f\u7528 druid. \u5f00\u5934\u5373\u53ef\n *\n * @author Robert HG (254963746@qq.com) on 10/24/14.\n */\npublic class MysqlDataSourceProvider implements DataSourceProvider {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(MysqlDataSourceProvider.class);\n    // \u540c\u4e00\u914d\u7f6e, \u59cb\u7ec8\u4fdd\u6301\u540c\u4e00\u4e2a\u8fde\u63a5\n    private static final ConcurrentHashMap<String, DataSource> DATA_SOURCE_MAP = new ConcurrentHashMap<String, DataSource>();\n\n    private static final Object lock = new Object();\n\n    public DataSource getDataSource(Config config) {\n\n        String url = config.getParameter(ExtConfig.JDBC_URL);\n        String username = config.getParameter(ExtConfig.JDBC_USERNAME);\n        String password = config.getParameter(ExtConfig.JDBC_PASSWORD);\n\n        if (StringUtils.isEmpty(url)) {\n            throw new IllegalArgumentException(ExtConfig.JDBC_URL + \" should not be empty\");\n        }\n        if (StringUtils.isEmpty(ExtConfig.JDBC_USERNAME)) {\n            throw new IllegalArgumentException(ExtConfig.JDBC_USERNAME + \" should not be empty\");\n        }\n\n        String cachedKey = StringUtils.concat(url, username, password);\n\n        DataSource dataSource = DATA_SOURCE_MAP.get(cachedKey);\n        if (dataSource == null) {\n            try {\n                synchronized (lock) {\n                    dataSource = DATA_SOURCE_MAP.get(cachedKey);\n                    if (dataSource != null) {\n                        return dataSource;\n                    }\n                    dataSource = createDruidDataSource(config);\n\n                    DATA_SOURCE_MAP.put(cachedKey, dataSource);\n                }\n            } catch (Exception e) {\n                throw new IllegalStateException(\n                        StringUtils.format(\"connect datasource failed! url: {}\", url), e);\n            }\n        }\n        return dataSource;\n    }\n\n    private DataSource createDruidDataSource(Config config) {\n        DruidDataSource dataSource = new DruidDataSource();\n        Class<DruidDataSource> clazz = DruidDataSource.class;\n        for (Map.Entry<String, Class<?>> entry : FIELDS.entrySet()) {\n            String field = entry.getKey();\n            String value = config.getParameter(\"druid.\" + field);\n            if (StringUtils.isNotEmpty(value)) {\n                Method setMethod = null;\n                try {\n                    setMethod = clazz.getMethod(\"set\" + (field.substring(0, 1).toUpperCase() + field.substring(1))\n                            , entry.getValue());\n                    setMethod.invoke(dataSource, value);\n                } catch (Exception e) {\n                    LOGGER.warn(\"set field[{}] failed! value is {}\", field, value);\n                }\n            }\n        }\n\n        String url = config.getParameter(ExtConfig.JDBC_URL);\n        String username = config.getParameter(ExtConfig.JDBC_USERNAME);\n        String password = config.getParameter(ExtConfig.JDBC_PASSWORD);\n\n        dataSource.setUrl(url);\n        dataSource.setUsername(username);\n        dataSource.setPassword(password);\n\n        return dataSource;\n    }\n\n    private static final Map<String, Class<?>> FIELDS = new ConcurrentHashMap<String, Class<?>>();\n\n    static {\n        // druid\u914d\u7f6e\u5c5e\u6027\uff0csee <a href=\"https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8\">DruidDataSource\u914d\u7f6e\u5c5e\u6027\u5217\u8868</a>\n//        FIELDS.put(\"url\", String.class);\n//        FIELDS.put(\"username\", String.class);\n//        FIELDS.put(\"password\", String.class);\n//        FIELDS.put(\"driverClassName\", String.class);\n        FIELDS.put(\"initialSize\", Integer.class);\n        FIELDS.put(\"maxActive\", Integer.class);\n        FIELDS.put(\"maxIdle\", Integer.class);\n        FIELDS.put(\"minIdle\", Integer.class);\n        FIELDS.put(\"maxWait\", Integer.class);\n        FIELDS.put(\"poolPreparedStatements\", Boolean.class);\n        FIELDS.put(\"maxOpenPreparedStatements\", Integer.class);\n        FIELDS.put(\"validationQuery\", String.class);\n        FIELDS.put(\"testOnBorrow\", Boolean.class);\n        FIELDS.put(\"testOnReturn\", Boolean.class);\n        FIELDS.put(\"testWhileIdle\", Boolean.class);\n        FIELDS.put(\"timeBetweenEvictionRunsMillis\", Long.class);\n        FIELDS.put(\"numTestsPerEvictionRun\", Integer.class);\n        FIELDS.put(\"minEvictableIdleTimeMillis\", Long.class);\n        FIELDS.put(\"exceptionSorter\", String.class);\n        FIELDS.put(\"filters\", String.class);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"ltsopensource/light-task-scheduler","sample_ref":"refs/heads/master","sample_path":"lts-core/src/main/java/com/github/ltsopensource/store/jdbc/datasource/MysqlDataSourceProvider.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c797ab2e437b241be0dc0a721e56e32433a6415e","size":"1941","content":"/*\n * Pixel Dungeon\n * Copyright (C) 2012-2015  Oleg Dolya\n *\n * Shattered Pixel Dungeon\n * Copyright (C) 2014-2016 Evan Debenham\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>\n */\n\npackage com.watabou.noosa;\n\nimport com.badlogic.gdx.Input;\nimport com.watabou.input.NoosaInputProcessor;\nimport com.watabou.utils.Signal;\n\npublic class Scene extends Group {\n\t\n\tprivate Signal.Listener<NoosaInputProcessor.Key> keyListener;\n\t\n\tpublic void create() {\n\t\tGame.instance.getInputProcessor().addKeyListener(keyListener = new Signal.Listener<NoosaInputProcessor.Key>() {\n\t\t\t@Override\n\t\t\tpublic void onSignal(NoosaInputProcessor.Key key) {\n\t\t\t\tif (Game.instance != null && key.pressed) {\n\t\t\t\t\tswitch (key.code) {\n\t\t\t\t\t\tcase Input.Keys.BACK:\n\t\t\t\t\t\tcase Input.Keys.ESCAPE:\n\t\t\t\t\t\t\tonBackPressed();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Input.Keys.MENU:\n\t\t\t\t\t\tcase Input.Keys.F5:\n\t\t\t\t\t\t\tonMenuPressed();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t\n\t@Override\n\tpublic void destroy() {\n\t\tGame.instance.getInputProcessor().removeKeyListener(keyListener);\n\t\tsuper.destroy();\n\t}\n\t\n\tpublic void pause() {\n\t\t\n\t}\n\t\n\tpublic void resume() {\n\t\t\n\t}\n\t\n\t@Override\n\tpublic void update() {\n\t\tsuper.update();\n\t}\n\t\n\t@Override\n\tpublic Camera camera() {\n\t\treturn Camera.main;\n\t}\n\t\n\tprotected void onBackPressed() {\n\t\tGame.instance.finish();\n\t}\n\t\n\tprotected void onMenuPressed() {\n\t\t\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"00-Evan/shattered-pixel-dungeon-gdx","sample_ref":"refs/heads/master","sample_path":"PD-classes/src/com/watabou/noosa/Scene.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"110cbaec4ee63b31ca7137ab239f34c07d57cde1","size":"1208","content":"package com.coverity.security.pie.policy.securitymanager.fact;\n\nimport com.coverity.security.pie.core.FactMetaData;\nimport com.coverity.security.pie.core.PolicyConfig;\nimport com.coverity.security.pie.core.StringCollapser;\nimport com.coverity.security.pie.core.UnsupportedFactMetaData;\nimport com.coverity.security.pie.core.WildcardStringCollapser;\n\npublic class SocketAcceptNameFactMetaData implements FactMetaData {\n    \n    private static final SocketAcceptNameFactMetaData instance = new SocketAcceptNameFactMetaData();\n    \n    private SocketAcceptNameFactMetaData() {\n    }\n    \n    public static SocketAcceptNameFactMetaData getInstance() {\n        return instance;\n    }\n    \n    private final WildcardStringCollapser wildcardStringCollapser = new WildcardStringCollapser(\"*:0\");\n    \n    @Override\n    public StringCollapser getCollapser(PolicyConfig policyConfig) {\n        return wildcardStringCollapser;\n    }\n\n    @Override\n    public boolean matches(String matcher, String matchee) {\n        return wildcardStringCollapser.matches(matcher, matchee);\n    }\n\n    @Override\n    public FactMetaData getChildFactMetaData(String fact) {\n        return UnsupportedFactMetaData.getInstance();\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"coverity/pie","sample_ref":"refs/heads/master","sample_path":"pie-sm/src/main/java/com/coverity/security/pie/policy/securitymanager/fact/SocketAcceptNameFactMetaData.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"307fb750b3468a03e62bc8be0bdf2aeaa8209177","size":"4926","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.eas.vo.lookups;\r\n\r\nimport ims.framework.cn.data.TreeModel;\r\nimport ims.framework.cn.data.TreeNode;\r\nimport ims.vo.LookupInstanceCollection;\r\nimport ims.vo.LookupInstVo;\r\n\r\npublic class MouldRoomActivityCollection extends LookupInstanceCollection implements ims.vo.ImsCloneable, TreeModel\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\tpublic void add(MouldRoomActivity value)\r\n\t{\r\n\t\tsuper.add(value);\r\n\t}\r\n\tpublic int indexOf(MouldRoomActivity instance)\r\n\t{\r\n\t\treturn super.indexOf(instance);\r\n\t}\r\n\tpublic boolean contains(MouldRoomActivity instance)\r\n\t{\r\n\t\treturn indexOf(instance) >= 0;\r\n\t}\r\n\tpublic MouldRoomActivity get(int index)\r\n\t{\r\n\t\treturn (MouldRoomActivity)super.getIndex(index);\r\n\t}\r\n\tpublic void remove(MouldRoomActivity instance)\r\n\t{\r\n\t\tif(instance != null)\r\n\t\t{\r\n\t\t\tint index = indexOf(instance);\r\n\t\t\tif(index >= 0)\r\n\t\t\t\tremove(index);\r\n\t\t}\r\n\t}\r\n\tpublic Object clone()\r\n\t{\r\n\t\tMouldRoomActivityCollection newCol = new MouldRoomActivityCollection();\r\n\t\tMouldRoomActivity item;\r\n\t\tfor (int i = 0; i < super.size(); i++)\r\n\t\t{\r\n\t\t\titem = this.get(i);\r\n\t\t\tnewCol.add(new MouldRoomActivity(item.getID(), item.getText(), item.isActive(), item.getParent(), item.getImage(), item.getColor(), item.getOrder()));\r\n\t\t}\r\n\t\tfor (int i = 0; i < newCol.size(); i++)\r\n\t\t{\r\n\t\t\titem = newCol.get(i);\r\n\t\t\tif (item.getParent() != null)\r\n\t\t\t{\r\n\t\t\t\tint parentIndex = this.indexOf(item.getParent());\r\n\t\t\t\tif(parentIndex >= 0)\r\n\t\t\t\t\titem.setParent(newCol.get(parentIndex));\r\n\t\t\t\telse\r\n\t\t\t\t\titem.setParent((MouldRoomActivity)item.getParent().clone());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn newCol;\r\n\t}\r\n\tpublic MouldRoomActivity getInstance(int instanceId)\r\n\t{\r\n\t\treturn (MouldRoomActivity)super.getInstanceById(instanceId);\r\n\t}\r\n\tpublic TreeNode[] getRootNodes()\r\n\t{\r\n\t\tLookupInstVo[] roots = super.getRoots();\r\n\t\tTreeNode[] nodes = new TreeNode[roots.length];\r\n\t\tSystem.arraycopy(roots, 0, nodes, 0, roots.length);\r\n\t\treturn nodes;\r\n\t}\r\n\tpublic MouldRoomActivity[] toArray()\r\n\t{\r\n\t\tMouldRoomActivity[] arr = new MouldRoomActivity[this.size()];\r\n\t\tsuper.toArray(arr);\r\n\t\treturn arr;\r\n\t}\r\n\tpublic static MouldRoomActivityCollection buildFromBeanCollection(java.util.Collection beans)\r\n\t{\r\n\t\tMouldRoomActivityCollection coll = new MouldRoomActivityCollection();\r\n\t\tif(beans == null)\r\n\t\t\treturn coll;\r\n\t\tjava.util.Iterator iter = beans.iterator();\r\n\t\twhile(iter.hasNext())\r\n\t\t{\r\n\t\t\tcoll.add(MouldRoomActivity.buildLookup((ims.vo.LookupInstanceBean)iter.next()));\r\n\t\t}\r\n\t\treturn coll;\r\n\t}\r\n\tpublic static MouldRoomActivityCollection buildFromBeanCollection(ims.vo.LookupInstanceBean[] beans)\r\n\t{\r\n\t\tMouldRoomActivityCollection coll = new MouldRoomActivityCollection();\r\n\t\tif(beans == null)\r\n\t\t\treturn coll;\r\n\t\tfor(int x = 0; x < beans.length; x++)\r\n\t\t{\r\n\t\t\tcoll.add(MouldRoomActivity.buildLookup(beans[x]));\r\n\t\t}\r\n\t\treturn coll;\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/ValueObjects/src/ims/eas/vo/lookups/MouldRoomActivityCollection.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"8121449ae72a5c20184854a7b0cafa010e6bbc95","size":"1164","content":"package io.intercom.api;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\nimport java.util.Iterator;\nimport java.util.List;\n\n@SuppressWarnings(\"UnusedDeclaration\")\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class NotificationErrorCollection extends TypedDataCollection<NotificationError> implements Iterator<NotificationError> {\n\n    protected TypedDataCollectionIterator<NotificationError> iterator;\n\n    public NotificationErrorCollection() {\n        type = \"notification.list\";\n        iterator = new TypedDataCollectionIterator<NotificationError>(this);\n    }\n\n    @SuppressWarnings(\"EmptyMethod\")\n    @JsonProperty(\"notifications\")\n    @Override\n    public List<NotificationError> getPage() {\n        return super.getPage();\n    }\n\n    @Override\n    public NotificationErrorCollection nextPage() {\n        return fetchNextPage(NotificationErrorCollection.class);\n    }\n\n    public boolean hasNext() {\n        return iterator.hasNext();\n    }\n\n    public NotificationError next() {\n        return iterator.next();\n    }\n\n    public void remove() {\n        iterator.remove();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"intercom/intercom-java","sample_ref":"refs/heads/master","sample_path":"intercom-java/src/main/java/io/intercom/api/NotificationErrorCollection.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7e84d56c67bdccc54de4fe18e2c6466fecf88d9b","size":"4707","content":"package org.thethingsnetwork.zrh.monitor.client.ui;\n\nimport org.eclipse.scout.rt.client.ui.form.AbstractForm;\nimport org.eclipse.scout.rt.client.ui.form.fields.button.AbstractOkButton;\nimport org.eclipse.scout.rt.client.ui.form.fields.datefield.AbstractDateTimeField;\nimport org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;\nimport org.eclipse.scout.rt.client.ui.form.fields.integerfield.AbstractIntegerField;\nimport org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField;\nimport org.eclipse.scout.rt.platform.Order;\nimport org.eclipse.scout.rt.shared.TEXTS;\nimport org.thethingsnetwork.zrh.monitor.client.ui.MessageForm.MainBox.TopBox;\nimport org.thethingsnetwork.zrh.monitor.client.ui.MessageForm.MainBox.TopBox.AccNoiseField;\nimport org.thethingsnetwork.zrh.monitor.client.ui.MessageForm.MainBox.TopBox.CompleteTextField;\nimport org.thethingsnetwork.zrh.monitor.client.ui.MessageForm.MainBox.TopBox.DataField;\nimport org.thethingsnetwork.zrh.monitor.client.ui.MessageForm.MainBox.TopBox.GatewayEuiField;\nimport org.thethingsnetwork.zrh.monitor.client.ui.MessageForm.MainBox.TopBox.MaxNoiseField;\nimport org.thethingsnetwork.zrh.monitor.client.ui.MessageForm.MainBox.TopBox.PlainDataField;\nimport org.thethingsnetwork.zrh.monitor.client.ui.MessageForm.MainBox.TopBox.TimestampField;\n\npublic class MessageForm extends AbstractForm {\n\n\tpublic MaxNoiseField getMaxNoiseField() {\n\t\treturn getFieldByClass(MaxNoiseField.class);\n\t}\n\n\tpublic AccNoiseField getAccNoiseField() {\n\t\treturn getFieldByClass(AccNoiseField.class);\n\t}\n\n\tpublic DataField getDataField() {\n\t\treturn getFieldByClass(DataField.class);\n\t}\n\n\tpublic PlainDataField getPlainDataField() {\n\t\treturn getFieldByClass(PlainDataField.class);\n\t}\n\n\tpublic CompleteTextField getCompleteTextField() {\n\t\treturn getFieldByClass(CompleteTextField.class);\n\t}\n\n\tpublic TopBox getTopBox() {\n\t\treturn getFieldByClass(TopBox.class);\n\t}\n\n\tpublic TimestampField getTimestampField() {\n\t\treturn getFieldByClass(TimestampField.class);\n\t}\n\n\tpublic GatewayEuiField getGatewayEuiField() {\n\t\treturn getFieldByClass(GatewayEuiField.class);\n\t}\n\n\t@Order(1000.0)\n\tpublic class MainBox extends AbstractGroupBox {\n\n\n\t\t@Order(0.0)\n\t\tpublic class TopBox extends AbstractGroupBox {\n\n\t\t\t@Order(1000.0)\n\t\t\tpublic class GatewayEuiField extends AbstractStringField {\n\t\t\t\t@Override\n\t\t\t\tprotected String getConfiguredLabel() {\n\t\t\t\t\treturn TEXTS.get(\"Eui\");\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getConfiguredEnabled() {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected int getConfiguredMaxLength() {\n\t\t\t\t\treturn 128;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Order(2000.0)\n\t\t\tpublic class TimestampField extends AbstractDateTimeField {\n\t\t\t\t@Override\n\t\t\t\tprotected String getConfiguredLabel() {\n\t\t\t\t\treturn TEXTS.get(\"Timestamp\");\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getConfiguredEnabled() {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Order(3000.0)\n\t\t\tpublic class MaxNoiseField extends AbstractIntegerField {\n\t\t\t\t@Override\n\t\t\t\tprotected String getConfiguredLabel() {\n\t\t\t\t\treturn TEXTS.get(\"MaxNoise\");\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getConfiguredEnabled() {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Order(4000.0)\n\t\t\tpublic class AccNoiseField extends AbstractIntegerField {\n\t\t\t\t@Override\n\t\t\t\tprotected String getConfiguredLabel() {\n\t\t\t\t\treturn TEXTS.get(\"AccNoise\");\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getConfiguredEnabled() {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Order(5000.0)\n\t\t\tpublic class DataField extends AbstractStringField {\n\t\t\t\t@Override\n\t\t\t\tprotected String getConfiguredLabel() {\n\t\t\t\t\treturn TEXTS.get(\"Data\");\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getConfiguredEnabled() {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected int getConfiguredGridW() {\n\t\t\t\t\treturn 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Order(6000.0)\n\t\t\tpublic class PlainDataField extends AbstractStringField {\n\t\t\t\t@Override\n\t\t\t\tprotected String getConfiguredLabel() {\n\t\t\t\t\treturn TEXTS.get(\"PlainData\");\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getConfiguredEnabled() {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected int getConfiguredGridW() {\n\t\t\t\t\treturn 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Order(7000.0)\n\t\t\tpublic class CompleteTextField extends AbstractStringField {\n\t\t\t\t@Override\n\t\t\t\tprotected String getConfiguredLabel() {\n\t\t\t\t\treturn TEXTS.get(\"CompleteText\");\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getConfiguredEnabled() {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getConfiguredMultilineText() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected int getConfiguredGridH() {\n\t\t\t\t\treturn 4;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected int getConfiguredGridW() {\n\t\t\t\t\treturn 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@Order(2000)\n\t\tpublic class OkButton extends AbstractOkButton {\n\t\t}\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"BSI-Business-Systems-Integration-AG/org.thethingsnetwork.zrh.monitor","sample_ref":"refs/heads/master","sample_path":"ttn_monitor/org.thethingsnetwork.zrh.monitor.client/src/main/java/org/thethingsnetwork/zrh/monitor/client/ui/MessageForm.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1fbba2b05206d73da3a4e2e426045e765913e551","size":"1470","content":"/*\n * Asqatasun - Automated webpage assessment\n * Copyright (C) 2008-2015  Asqatasun.org\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Contact us by mail: asqatasun AT asqatasun DOT org\n */\n\npackage org.asqatasun.rules.rgaa22;\n\nimport org.asqatasun.ruleimplementation.AbstractNotTestedRuleImplementation;\n\n/**\n * Implementation of the rule 6.36 of the referential RGAA 2.2.\n * <br/>\n * For more details about the implementation, refer to <a href=\"http://www.old-dot-org.org/en/content/rgaa22-rule-6-36\">the rule 6.36 design page.</a>\n * @see <a href=\"http://rgaa.net/Presence-d-une-indication-de-la.html\"> 6.36 rule specification </a>\n *\n * @author jkowalczyk\n */\npublic class Rgaa22Rule06361 extends AbstractNotTestedRuleImplementation {\n\n    /**\n     * Default constructor\n     */\n    public Rgaa22Rule06361 () {\n        super();\n    }\n\n}","binary":"false","copies":"1","sample_repo_name":"Asqatasun/Asqatasun","sample_ref":"refs/heads/master","sample_path":"rules/rules-rgaa2.2/src/main/java/org/asqatasun/rules/rgaa22/Rgaa22Rule06361.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9c824455a2d5c23002783cbfe6f439b8ccf4901d","size":"9441","content":"/*\n * (c) Copyright 2014 Hewlett-Packard Development Company, L.P.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Apache License v2.0 which accompany this distribution.\n *\n * The Apache License is available at\n * http://www.apache.org/licenses/LICENSE-2.0\n */\npackage io.cloudslang.lang.runtime.steps;\n\nimport com.hp.oo.sdk.content.annotations.Param;\nimport io.cloudslang.lang.entities.ExecutableType;\nimport io.cloudslang.lang.entities.ScoreLangConstants;\nimport io.cloudslang.lang.entities.bindings.Input;\nimport io.cloudslang.lang.entities.bindings.Output;\nimport io.cloudslang.lang.entities.bindings.Result;\nimport io.cloudslang.lang.entities.bindings.values.Value;\nimport io.cloudslang.lang.runtime.bindings.InputsBinding;\nimport io.cloudslang.lang.runtime.bindings.OutputsBinding;\nimport io.cloudslang.lang.runtime.bindings.ResultsBinding;\nimport io.cloudslang.lang.runtime.env.Context;\nimport io.cloudslang.lang.runtime.env.ParentFlowData;\nimport io.cloudslang.lang.runtime.env.ReturnValues;\nimport io.cloudslang.lang.runtime.env.RunEnvironment;\nimport io.cloudslang.lang.runtime.events.LanguageEventData;\nimport io.cloudslang.score.lang.ExecutionRuntimeServices;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.apache.log4j.Logger;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static io.cloudslang.score.api.execution.ExecutionParametersConsts.EXECUTION_RUNTIME_SERVICES;\n\n/**\n * User: stoneo\n * Date: 02/11/2014\n * Time: 10:24\n */\n@Component\npublic class ExecutableExecutionData extends AbstractExecutionData {\n\n    public static final String ACTION_RETURN_VALUES_KEY = \"actionReturnValues\";\n\n    @Autowired\n    private ResultsBinding resultsBinding;\n\n    @Autowired\n    private InputsBinding inputsBinding;\n\n    @Autowired\n    private OutputsBinding outputsBinding;\n\n    private static final Logger logger = Logger.getLogger(ExecutableExecutionData.class);\n\n    public void startExecutable(@Param(ScoreLangConstants.EXECUTABLE_INPUTS_KEY) List<Input> executableInputs,\n                                @Param(ScoreLangConstants.RUN_ENV) RunEnvironment runEnv,\n                                @Param(ScoreLangConstants.USER_INPUTS_KEY) Map<String, ? extends Value> userInputs,\n                                @Param(EXECUTION_RUNTIME_SERVICES) ExecutionRuntimeServices executionRuntimeServices,\n                                @Param(ScoreLangConstants.NODE_NAME_KEY) String nodeName,\n                                @Param(ScoreLangConstants.NEXT_STEP_ID_KEY) Long nextStepId) {\n        try {\n            Map<String, Value> callArguments = runEnv.removeCallArguments();\n\n            if (userInputs != null) {\n                callArguments.putAll(userInputs);\n            }\n            sendStartBindingInputsEvent(executableInputs, runEnv, executionRuntimeServices,\n                    \"Pre Input binding for operation/flow\", LanguageEventData.StepType.EXECUTABLE, nodeName);\n\n            Map<String, Value> executableContext = inputsBinding.bindInputs(executableInputs, callArguments, runEnv.getSystemProperties());\n\n            Map<String, Value> actionArguments = new HashMap<>();\n\n            //todo: clone action context before updating\n            actionArguments.putAll(executableContext);\n\n            //done with the user inputs, don't want it to be available in next startExecutable steps..\n            if (userInputs != null) {\n                userInputs.clear();\n            }\n\n            //todo: hook\n\n            updateCallArgumentsAndPushContextToStack(runEnv, new Context(executableContext), actionArguments);\n\n            sendEndBindingInputsEvent(executableInputs, executableContext, runEnv, executionRuntimeServices,\n                    \"Post Input binding for operation/flow\", LanguageEventData.StepType.EXECUTABLE, nodeName);\n\n            // put the next step position for the navigation\n            runEnv.putNextStepPosition(nextStepId);\n            runEnv.getExecutionPath().down();\n        } catch (RuntimeException e){\n            logger.error(\"There was an error running the start executable execution step of: \\'\" + nodeName + \"\\'.\\n\\tError is: \" + e.getMessage());\n            throw new RuntimeException(\"Error running: \\'\" + nodeName + \"\\'.\\n\\t \" + e.getMessage(), e);\n        }\n    }\n\n    /**\n     * This method is executed by the finishExecutable execution step of an operation or flow\n     *\n     * @param runEnv the run environment object\n     * @param executableOutputs the operation outputs data\n     * @param executableResults the operation results data\n     * @param executionRuntimeServices services supplied by score engine for handling the execution\n     */\n    public void finishExecutable(@Param(ScoreLangConstants.RUN_ENV) RunEnvironment runEnv,\n                                 @Param(ScoreLangConstants.EXECUTABLE_OUTPUTS_KEY) List<Output> executableOutputs,\n                                 @Param(ScoreLangConstants.EXECUTABLE_RESULTS_KEY) List<Result> executableResults,\n                                 @Param(EXECUTION_RUNTIME_SERVICES) ExecutionRuntimeServices executionRuntimeServices,\n                                 @Param(ScoreLangConstants.NODE_NAME_KEY) String nodeName,\n                                 @Param(ScoreLangConstants.EXECUTABLE_TYPE) ExecutableType executableType) {\n\t\ttry {\n            runEnv.getExecutionPath().up();\n            Context operationContext = runEnv.getStack().popContext();\n            Map<String, Value> operationVariables = operationContext == null ? null : operationContext.getImmutableViewOfVariables();\n            ReturnValues actionReturnValues = runEnv.removeReturnValues();\n            fireEvent(executionRuntimeServices, runEnv, ScoreLangConstants.EVENT_OUTPUT_START, \"Output binding started\",\n                    LanguageEventData.StepType.EXECUTABLE, nodeName,\n                    Pair.of(ScoreLangConstants.EXECUTABLE_OUTPUTS_KEY, (Serializable)executableOutputs),\n                    Pair.of(ScoreLangConstants.EXECUTABLE_RESULTS_KEY, (Serializable)executableResults),\n                    Pair.of(ACTION_RETURN_VALUES_KEY,\n                            executableType == ExecutableType.OPERATION ?\n                                    new ReturnValues(new HashMap<String, Value>(), actionReturnValues.getResult()) :\n                                    actionReturnValues));\n\n            // Resolving the result of the operation/flow\n            String result = resultsBinding.resolveResult(\n                    operationVariables,\n                    actionReturnValues.getOutputs(),\n                    runEnv.getSystemProperties(),\n                    executableResults,\n                    actionReturnValues.getResult()\n            );\n\n            Map<String, Value> operationReturnOutputs =\n                    outputsBinding.bindOutputs(\n                            operationVariables,\n                            actionReturnValues.getOutputs(),\n                            runEnv.getSystemProperties(),\n                            executableOutputs\n                    );\n\n            //todo: hook\n\n            ReturnValues returnValues = new ReturnValues(operationReturnOutputs, result);\n            runEnv.putReturnValues(returnValues);\n            fireEvent(executionRuntimeServices, runEnv, ScoreLangConstants.EVENT_OUTPUT_END, \"Output binding finished\",\n                    LanguageEventData.StepType.EXECUTABLE, nodeName,\n                    Pair.of(LanguageEventData.OUTPUTS, (Serializable)operationReturnOutputs),\n                    Pair.of(LanguageEventData.RESULT, returnValues.getResult()),\n                    Pair.of(ScoreLangConstants.EXECUTABLE_TYPE, executableType));\n\n            // If we have parent flow data on the stack, we pop it and request the score engine to switch to the parent\n            // execution plan id once it can, and we set the next position that was stored there for the use of the navigation\n            if (!runEnv.getParentFlowStack().isEmpty()) {\n                handleNavigationToParent(runEnv, executionRuntimeServices);\n            } else {\n                fireEvent(executionRuntimeServices, runEnv, ScoreLangConstants.EVENT_EXECUTION_FINISHED,\n                        \"Execution finished running\", LanguageEventData.StepType.EXECUTABLE, nodeName,\n                        Pair.of(LanguageEventData.RESULT, returnValues.getResult()),\n                        Pair.of(LanguageEventData.OUTPUTS, (Serializable)operationReturnOutputs),\n                        Pair.of(ScoreLangConstants.EXECUTABLE_TYPE, executableType));\n            }\n        } catch (RuntimeException e){\n            logger.error(\"There was an error running the finish executable execution step of: \\'\" + nodeName + \"\\'.\\n\\tError is: \" + e.getMessage());\n            throw new RuntimeException(\"Error running: \\'\" + nodeName + \"\\'.\\n\\t\" + e.getMessage(), e);\n        }\n    }\n\n    private void handleNavigationToParent(RunEnvironment runEnv, ExecutionRuntimeServices executionRuntimeServices) {\n        ParentFlowData parentFlowData = runEnv.getParentFlowStack().popParentFlowData();\n        executionRuntimeServices.requestToChangeExecutionPlan(parentFlowData.getRunningExecutionPlanId());\n        runEnv.putNextStepPosition(parentFlowData.getPosition());\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"CloudSlang/cloud-slang","sample_ref":"refs/heads/master","sample_path":"cloudslang-runtime/src/main/java/io/cloudslang/lang/runtime/steps/ExecutableExecutionData.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4e9667326fbb8d0f03dcdb061941b1dda60c24c1","size":"3197","content":"package edu.nl.ru.fieldtripbufferservicecontroller;\r\n\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.util.Log;\r\n\r\nimport edu.nl.ru.monitor.BufferInfo;\r\n\r\n\r\npublic class FBServiceControllerBroadcastReceiver extends BroadcastReceiver {\r\n\r\n    public static String TAG = FBServiceControllerBroadcastReceiver.class.toString();\r\n\r\n    public FBServiceControllerBroadcastReceiver() {\r\n    }\r\n        @Override\r\n        public void onReceive(final Context context, final Intent intent) {\r\n            if (intent.getIntExtra(C.MESSAGE_TYPE, -1) == C.UPDATE) {\r\n                boolean newBufferInfo = intent.getBooleanExtra(C.IS_BUFFER_INFO, false);\r\n                boolean newClientInfo = intent.getBooleanExtra(C.IS_CLIENT_INFO, false);\r\n                boolean newThreadInfo = intent.getBooleanExtra(C.IS_THREAD_INFO, false);\r\n\r\n                Intent intent_for_MainActivity = new Intent(C.FILTER_FROM_SERVER);\r\n\r\n                if(newBufferInfo){\r\n                    intent_for_MainActivity.putExtra(C.IS_BUFFER_INFO, newBufferInfo);\r\n                    BufferInfo bf = intent.getParcelableExtra(C.BUFFER_INFO);\r\n                    intent_for_MainActivity.putExtra(C.BUFFER_INFO, intent.getParcelableExtra(C.BUFFER_INFO));\r\n                    //Log.i(TAG, \"From BroadcastReceiver Sending intent with BufferInfo to MainActivity\");\r\n                    context.sendBroadcast(intent_for_MainActivity);\r\n                }\r\n\r\n                if(newClientInfo){\r\n                    intent_for_MainActivity.putExtra(C.IS_CLIENT_INFO, newClientInfo);\r\n                    int numOfClients = intent.getIntExtra(C.CLIENT_N_INFOS, 0);\r\n                    intent_for_MainActivity.putExtra(C.CLIENT_N_INFOS, numOfClients);\r\n                    for (int k=0; k<numOfClients; ++k){\r\n                        intent_for_MainActivity.putExtra(C.CLIENT_INFO+k, intent.getParcelableExtra(C.CLIENT_INFO+k));\r\n                    }\r\n                    Log.i(TAG, \"From BroadcastReceiver Sending client info with \"+numOfClients+\" clients to MainActivity\");\r\n                    context.sendBroadcast(intent_for_MainActivity);\r\n                }\r\n\r\n                if(newThreadInfo){\r\n                    intent_for_MainActivity.putExtra(C.IS_THREAD_INFO, newThreadInfo);\r\n                    intent_for_MainActivity.putExtra(C.THREAD_INFO, intent.getParcelableExtra(C.THREAD_INFO));\r\n                    intent_for_MainActivity.putExtra(C.THREAD_INDEX, intent.getIntExtra(C.THREAD_INDEX, 0));\r\n                    intent_for_MainActivity.putExtra(C.THREAD_N_ARGUMENTS, intent.getIntExtra(C.THREAD_N_ARGUMENTS, 0));\r\n                    int nArgs = intent.getIntExtra(C.THREAD_N_ARGUMENTS, 0);\r\n                    for (int k = 0; k < nArgs; k++) {\r\n                        intent_for_MainActivity.putExtra(C.THREAD_ARGUMENTS + k, intent.getSerializableExtra(C.THREAD_ARGUMENTS + k));\r\n                    }\r\n                    //Log.i(TAG, \"From BroadcastReceiver Sending intent with ThreadInfo to MainActivity\");\r\n                    context.sendBroadcast(intent_for_MainActivity);\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"jadref/buffer_bci","sample_ref":"refs/heads/master","sample_path":"java/android/FieldTripBufferServiceController/app/src/main/java/edu/nl/ru/fieldtripbufferservicecontroller/FBServiceControllerBroadcastReceiver.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"eeb518ec7e29544de65667b186ca7aad0a2f5df3","size":"2121","content":"/*\n  Copyright (c) 2015 University of Helsinki\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\npackage fi.hiit.dime.search;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\n//------------------------------------------------------------------------------\n\npublic class KeywordSearchQuery extends SearchQuery {\n    public List<WeightedKeyword> weightedKeywords;\n\n    public KeywordSearchQuery() {\n        weightedKeywords = new ArrayList<WeightedKeyword>();\n    }\n\n    public KeywordSearchQuery(WeightedKeyword[] query) {\n        this.weightedKeywords = Arrays.asList(query);\n    }\n\n    public void add(String term, float weight) {\n        weightedKeywords.add(new WeightedKeyword(term, weight));\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return weightedKeywords == null || weightedKeywords.size() == 0;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder s = new StringBuilder();\n        for (WeightedKeyword kw : weightedKeywords) \n            s.append(String.format(\"%s (%f) \", kw.term, kw.weight));\n        return s.toString();\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"HIIT/dime-server","sample_ref":"refs/heads/master","sample_path":"src/main/java/fi/hiit/dime/search/KeywordSearchQuery.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"13fdbd14e22129987d3a1c1c785fcc51865c2ef4","size":"4903","content":"package com.googlecode.totallylazy.collections;\n\nimport org.junit.Test;\n\nimport static com.googlecode.totallylazy.collections.ListZipper.zipper;\nimport static com.googlecode.totallylazy.collections.PersistentList.constructors.list;\nimport static com.googlecode.totallylazy.collections.PersistentList.functions.cons;\nimport static com.googlecode.totallylazy.collections.PersistentList.functions.tail;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n\npublic class ListZipperTest {\n    @Test\n    public void supportsSingleList() {\n        ListZipper<String> zipper = zipper(list(\"A\"));\n        assertThat(zipper.nextOption().isEmpty(), is(true));\n        assertThat(zipper.previousOption().isEmpty(), is(true));\n        assertThat(zipper.isFirst(), is(true));\n        assertThat(zipper.isLast(), is(true));\n    }\n\n\n\n    @Test\n    public void supportsNext() {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\", \"C\", \"D\"));\n        final ListZipper<String> newZipper = zipper.next().next();\n        assertThat(newZipper.focus, is(list(\"C\", \"D\")));\n        assertThat(newZipper.breadcrumbs, is(list(\"B\", \"A\")));\n    }\n\n    @Test\n    public void supportsPrevious() {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\", \"C\", \"D\"));\n        final ListZipper<String> newZipper = zipper.next().next().previous();\n        assertThat(newZipper.focus, is(list(\"B\", \"C\", \"D\")));\n        assertThat(newZipper.breadcrumbs, is(list(\"A\")));\n    }\n\n    @Test\n    public void supportsLast() throws Exception {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\", \"C\", \"D\")).last();\n        assertThat(zipper.value(), is(\"D\"));\n        assertThat(zipper.isLast(), is(true));\n    }\n\n    @Test\n    public void supportsFirst() throws Exception {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\", \"C\", \"D\"));\n        assertThat(zipper.value(), is(\"A\"));\n        assertThat(zipper.isFirst(), is(true));\n        zipper= zipper.first();\n        assertThat(zipper.value(), is(\"A\"));\n        assertThat(zipper.isFirst(), is(true));\n    }\n\n\n    @Test\n    public void canUseZipperToAddElementInMiddleOfList() {\n        final PersistentList<String> modified = zipper(list(\"A\", \"B\", \"C\", \"D\")).next().next().modify(cons(\"Z\")).toList();\n        assertThat(modified, is(list(\"A\", \"B\", \"Z\", \"C\", \"D\")));\n        final PersistentList<String> inserted = zipper(list(\"A\", \"B\", \"C\", \"D\")).next().next().insert(\"Z\").toList();\n        assertThat(inserted, is(list(\"A\", \"B\", \"Z\", \"C\", \"D\")));\n    }\n\n    @Test\n    public void canUseZipperToRemoveElementInMiddleOfList() {\n        final PersistentList<String> modified = zipper(list(\"A\", \"B\", \"C\", \"D\")).next().next().modify(tail(String.class)).toList();\n        assertThat(modified, is(list(\"A\", \"B\", \"D\")));\n        final PersistentList<String> deleted = zipper(list(\"A\", \"B\", \"C\", \"D\")).next().next().delete().toList();\n        assertThat(deleted, is(list(\"A\", \"B\", \"D\")));\n    }\n\n    @Test\n    public void canPerformMultipleModifications() throws Exception {\n        final PersistentList<String> modified = zipper(list(\"A\", \"B\", \"C\", \"D\")).next().delete().delete().toList();\n        assertThat(modified, is(list(\"A\", \"D\")));\n    }\n\n    @Test\n    public void supportsCurrent() {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\"));\n        assertThat(zipper.current(), is(\"A\"));\n        assertThat(zipper.next().current(), is(\"B\"));\n    }\n\n    @Test\n    public void supportsAtEnd() {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\"));\n        assertThat(zipper.current(), is(\"A\"));\n        assertThat(zipper.isLast(), is(false));\n        zipper = zipper.next();\n        assertThat(zipper.current(), is(\"B\"));\n        assertThat(zipper.isLast(), is(true));\n    }\n\n    @Test\n    public void supportsAtStart() {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\"));\n        assertThat(zipper.isTop(), is(true));\n        assertThat(zipper.next().isTop(), is(false));\n    }\n\n    @Test\n    public void supportsIndex() throws Exception {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\", \"C\", \"D\"));\n        assertThat(zipper.value(), is(\"A\"));\n        assertThat(zipper.index(), is(0));\n        zipper = zipper.next();\n        assertThat(zipper.value(), is(\"B\"));\n        assertThat(zipper.index(), is(1));\n        zipper = zipper.next();\n        assertThat(zipper.value(), is(\"C\"));\n        assertThat(zipper.index(), is(2));\n        zipper = zipper.next();\n        assertThat(zipper.value(), is(\"D\"));\n        assertThat(zipper.index(), is(3));\n    }\n\n    @Test\n    public void canSkipToIndex() throws Exception {\n        ListZipper<String> zipper = zipper(list(\"A\", \"B\", \"C\", \"D\"));\n        assertThat(zipper.index(3).value(), is(\"D\"));\n        assertThat(zipper.index(0).value(), is(\"A\"));\n        assertThat(zipper.index(2).value(), is(\"C\"));\n        assertThat(zipper.index(1).value(), is(\"B\"));\n    }\n\n\n}","binary":"false","copies":"1","sample_repo_name":"bodar/totallylazy","sample_ref":"refs/heads/master","sample_path":"test/com/googlecode/totallylazy/collections/ListZipperTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b344694589b2828b5102186bdce5a7a8f5b98db9","size":"2860","content":"/**\n * Copyright (c) 2010, Sebastian Sdorra\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * 3. Neither the name of SCM-Manager; nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * http://bitbucket.org/sdorra/scm-manager\n *\n */\n\n\npackage sonia.scm.repository.client.spi;\n\n//~--- non-JDK imports --------------------------------------------------------\n\nimport org.eclipse.jgit.api.Git;\nimport org.eclipse.jgit.api.errors.GitAPIException;\n\nimport sonia.scm.repository.Branch;\nimport sonia.scm.repository.client.api.RepositoryClientException;\n\n//~--- JDK imports ------------------------------------------------------------\n\nimport java.io.IOException;\n\n/**\n *\n * @author Sebastian Sdorra\n */\npublic class GitBranchCommand implements BranchCommand\n{\n\n  /**\n   * Constructs ...\n   *\n   *\n   * @param git\n   */\n  GitBranchCommand(Git git)\n  {\n    this.git = git;\n  }\n\n  //~--- methods --------------------------------------------------------------\n\n  /**\n   * Method description\n   *\n   *\n   * @param name\n   *\n   * @return\n   *\n   * @throws IOException\n   */\n  @Override\n  public Branch branch(String name) throws IOException\n  {\n    try\n    {\n      git.branchCreate().setName(name).call();\n    }\n    catch (GitAPIException ex)\n    {\n      throw new RepositoryClientException(\"could not create branch\", ex);\n    }\n\n    return new Branch(name);\n  }\n\n  //~--- fields ---------------------------------------------------------------\n\n  /** Field description */\n  private Git git;\n}\n","binary":"false","copies":"1","sample_repo_name":"sdorra/scm-manager","sample_ref":"refs/heads/master","sample_path":"scm-plugins/scm-git-plugin/src/test/java/sonia/scm/repository/client/spi/GitBranchCommand.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7782f2b181cf421b915d1dddb8c06364779f8d24","size":"11070","content":"package com.pi4j.io.i2c.impl;\n\n/*\n * #%L\n * **********************************************************************\n * ORGANIZATION  :  Pi4J\n * PROJECT       :  Pi4J :: Java Library (Core)\n * FILENAME      :  I2CDeviceImpl.java  \n * \n * This file is part of the Pi4J project. More information about \n * this project can be found here:  http://www.pi4j.com/\n * **********************************************************************\n * %%\n * Copyright (C) 2012 - 2016 Pi4J\n * %%\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Lesser Public License for more details.\n * \n * You should have received a copy of the GNU General Lesser Public\n * License along with this program.  If not, see\n * <http://www.gnu.org/licenses/lgpl-3.0.html>.\n * #L%\n */\n\nimport com.pi4j.io.i2c.I2CBus;\nimport com.pi4j.io.i2c.I2CDevice;\nimport com.pi4j.jni.I2C;\n\nimport java.io.IOException;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\n/**\n * Implementation of i2c device. This class only holds reference to i2c bus (so it can use its handle) and\n * device address.\n * \n * @author Daniel Sendula\n *\n */\npublic class I2CDeviceImpl implements I2CDevice {\n\n    /** Reference to i2c bus */\n    private I2CBus bus;\n    \n    /** I2c device address */\n    private int deviceAddress;\n\n    private final static Lock lock = new ReentrantLock( true );\n    \n    /**\n     * Constructor.\n     * \n     * @param bus i2c bus\n     * @param address i2c device address\n     */\n    public I2CDeviceImpl(I2CBus bus, int address) {\n        this.bus = bus;\n        this.deviceAddress = address;\n    }\n\n    /**\n     * This method writes one byte to i2c device. \n     * \n     * @param data byte to be written\n     * \n     * @throws IOException thrown in case byte cannot be written to the i2c device or i2c bus\n     */\n    @Override\n    public void write(byte data) throws IOException {\n        lock.lock();\n        try {\n            int ret = I2C.i2cWriteByteDirect(bus.getFileDescriptor(), deviceAddress, data);\n            if (ret < 0) {\n                throw new IOException(\"Error writing to \" + makeDescription() + \". Got \" + ret + \".\");\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * This method writes several bytes to the i2c device from given buffer at given offset.\n     * \n     * @param buffer buffer of data to be written to the i2c device in one go\n     * @param offset offset in buffer \n     * @param size number of bytes to be written \n     * \n     * @throws IOException thrown in case byte cannot be written to the i2c device or i2c bus\n     */\n    @Override\n    public void write(byte[] buffer, int offset, int size) throws IOException {\n        lock.lock();\n        try {\n            int ret = I2C.i2cWriteBytesDirect(bus.getFileDescriptor(), deviceAddress, size, offset, buffer);\n            if (ret < 0) {\n                throw new IOException(\"Error writing to \" + makeDescription() + \". Got \" + ret + \".\");\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * This method writes one byte to i2c device. \n     * \n     * @param address local address in the i2c device\n     * @param data byte to be written\n     * \n     * @throws IOException thrown in case byte cannot be written to the i2c device or i2c bus\n     */\n    @Override\n    public void write(int address, byte data) throws IOException {\n        lock.lock();\n        try {\n            int ret = I2C.i2cWriteByte(bus.getFileDescriptor(), deviceAddress, address, data);\n            if (ret < 0) {\n                throw new IOException(\"Error writing to \" + makeDescription(address) + \". Got \" + ret + \".\");\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * This method writes several bytes to the i2c device from given buffer at given offset.\n     * \n     * @param address local address in the i2c device\n     * @param buffer buffer of data to be written to the i2c device in one go\n     * @param offset offset in buffer \n     * @param size number of bytes to be written \n     * \n     * @throws IOException thrown in case byte cannot be written to the i2c device or i2c bus\n     */\n    @Override\n    public void write(int address, byte[] buffer, int offset, int size) throws IOException {\n        lock.lock();\n        try {\n            int ret = I2C.i2cWriteBytes(bus.getFileDescriptor(), deviceAddress, address, size, offset, buffer);\n            if (ret < 0) {\n                throw new IOException(\"Error writing to \" + makeDescription(address) + \". Got \" + ret + \".\");\n            }\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * This method reads one byte from the i2c device.\n     * Result is between 0 and 255 if read operation was successful, else a negative number for an error.\n     *\n     * @return byte value read: positive number (or zero) to 255 if read was successful. Negative number if reading failed.\n     * \n     * @throws IOException thrown in case byte cannot be read from the i2c device or i2c bus\n     */\n    @Override\n    public int read() throws IOException {\n        lock.lock();\n        try {\n            int ret = I2C.i2cReadByteDirect(bus.getFileDescriptor(), deviceAddress);\n            if (ret < 0) {\n                throw new IOException(\"Error reading from \" + makeDescription() + \". Got \" + ret + \".\");\n            }\n            return ret;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * <p>This method reads bytes from the i2c device to given buffer at asked offset. </p>\n     * \n     * <p>Note: Current implementation calls {@link #read(int)}. That means for each read byte \n     * i2c bus will send (next) address to i2c device.\n     * </p>\n     * \n     * @param buffer buffer of data to be read from the i2c device in one go\n     * @param offset offset in buffer \n     * @param size number of bytes to be read \n     * \n     * @return number of bytes read\n     * \n     * @throws IOException thrown in case byte cannot be read from the i2c device or i2c bus\n     */\n    @Override\n    public int read(byte[] buffer, int offset, int size) throws IOException {\n        lock.lock();\n        try {\n            // It doesn't work for some reason.\n            int ret = I2C.i2cReadBytesDirect(bus.getFileDescriptor(), deviceAddress, size, offset, buffer);\n            if (ret < 0) {\n                throw new IOException(\"Error reading from \" + makeDescription() + \". Got \" + ret + \".\");\n            }\n            return ret;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * This method reads one byte from the i2c device.\n     * Result is between 0 and 255 if read operation was successful, else a negative number for an error.\n     *\n     * @param address local address in the i2c device\n     * @return byte value read: positive number (or zero) to 255 if read was successful. Negative number if reading failed.\n     * \n     * @throws IOException thrown in case byte cannot be read from the i2c device or i2c bus\n     */\n    @Override\n    public int read(int address) throws IOException {\n        lock.lock();\n        try {\n            int ret = I2C.i2cReadByte(bus.getFileDescriptor(), deviceAddress, address);\n            if (ret < 0) {\n                throw new IOException(\"Error reading from \" + makeDescription(address) + \". Got \" + ret + \".\");\n            }\n            return ret;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * <p>This method reads bytes from the i2c device to given buffer at asked offset. </p>\n     * \n     * <p>Note: Current implementation calls {@link #read(int)}. That means for each read byte \n     * i2c bus will send (next) address to i2c device.\n     * </p>\n     * \n     * @param address local address in the i2c device\n     * @param buffer buffer of data to be read from the i2c device in one go\n     * @param offset offset in buffer \n     * @param size number of bytes to be read \n     * \n     * @return number of bytes read\n     * \n     * @throws IOException thrown in case byte cannot be read from the i2c device or i2c bus\n     */\n    @Override\n    public int read(int address, byte[] buffer, int offset, int size) throws IOException {\n        lock.lock();\n        try {\n            // It doesn't work for some reason.\n            int ret = I2C.i2cReadBytes(bus.getFileDescriptor(), deviceAddress, address, size, offset, buffer);\n            if (ret < 0) {\n                throw new IOException(\"Error reading from \" + makeDescription(address) + \". Got \" + ret + \".\");\n            }\n            return ret;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * This method writes and reads bytes to/from the i2c device in a single method call\n     *\n     * @param writeBuffer buffer of data to be written to the i2c device in one go\n     * @param writeOffset offset in write buffer\n     * @param writeSize number of bytes to be written from buffer\n     * @param readBuffer buffer of data to be read from the i2c device in one go\n     * @param readOffset offset in read buffer\n     * @param readSize number of bytes to be read\n     *\n     * @return number of bytes read\n     *\n     * @throws IOException thrown in case byte cannot be read from the i2c device or i2c bus\n     */\n    @Override\n    public int read(byte[] writeBuffer, int writeOffset, int writeSize, byte[] readBuffer, int readOffset, int readSize) throws IOException {\n        lock.lock();\n        try {\n            int ret = I2C.i2cWriteAndReadBytes(bus.getFileDescriptor(), deviceAddress, writeSize, writeOffset, writeBuffer, readSize, readOffset, readBuffer);\n            if (ret < 0) {\n                throw new IOException(\"Error reading from \" + makeDescription() + \". Got \" + ret + \".\");\n            }\n            return ret;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    /**\n     * This helper method creates a string describing bus file name and device address (in hex).\n     * \n     * @return string with all details\n     */\n    protected String makeDescription() {\n        return bus.getFileName() + \" at address 0x\" + Integer.toHexString(deviceAddress);\n    }\n    \n    /**\n     * This helper method creates a string describing bus file name, device address (in hex)\n     * and local i2c address.\n     * \n     * @param address local address in i2c device\n     * @return string with all details\n     */\n    protected String makeDescription(int address) {\n        return bus.getFileName() + \" at address 0x\" + Integer.toHexString(deviceAddress) \n                + \" to address 0x\" + Integer.toHexString(address);\n    }\n    \n}\n\n","binary":"false","copies":"1","sample_repo_name":"Pi4J/pi4j","sample_ref":"refs/heads/master","sample_path":"pi4j-core/src/main/java/com/pi4j/io/i2c/impl/I2CDeviceImpl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"65c108bc58dad710f1af94ba2ebc64958e13ec54","size":"1689","content":"/**\n * This file is part of Wikiforia.\n *\n * Wikiforia is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2 of the License, or\n * (at your option) any later version.\n *\n * Wikiforia is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Wikiforia. If not, see <http://www.gnu.org/licenses/>.\n */\n package se.lth.cs.nlp.wikipedia.lang;\n\n//Autogenerated from Wikimedia sources at 2015-04-16T13:55:11+00:00\n\npublic class AvkConfig extends TemplateConfig {\n\tpublic AvkConfig() {\n\t\taddNamespaceAlias(-2, \"Mamind\");\n\t\taddNamespaceAlias(-1, \"Aptaca\");\n\t\taddNamespaceAlias(1, \"Prilara\");\n\t\taddNamespaceAlias(2, \"Favesik\");\n\t\taddNamespaceAlias(3, \"Favesikprilara\");\n\t\taddNamespaceAlias(5, \"Wikipedia prilara\");\n\t\taddNamespaceAlias(6, \"Ewava\");\n\t\taddNamespaceAlias(7, \"Ewavaprilara\");\n\t\taddNamespaceAlias(8, \"MediaWiki\");\n\t\taddNamespaceAlias(9, \"MediaWiki prilara\");\n\t\taddNamespaceAlias(10, \"Teza\");\n\t\taddNamespaceAlias(11, \"Tezaprilara\");\n\t\taddNamespaceAlias(12, \"Pomara\");\n\t\taddNamespaceAlias(13, \"Pomaraprilara\");\n\t\taddNamespaceAlias(14, \"Loma\");\n\t\taddNamespaceAlias(15, \"Lomaprilara\");\n\n\t}\n\n\t@Override\n\tprotected String getSiteName() {\n\t\treturn \"Wikipedia\";\n\t}\n\n\t@Override\n\tprotected String getWikiUrl() {\n\t\treturn \"http://avk.wikipedia.org/\";\n\t}\n\n\t@Override\n\tpublic String getIso639() {\n\t\treturn \"avk\";\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"marcusklang/wikiforia","sample_ref":"refs/heads/master","sample_path":"src/main/java/se/lth/cs/nlp/wikipedia/lang/AvkConfig.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6b0ae6d409fdb7dafb8383cea41c08da418dfdea","size":"2411","content":"package com.fpliu.newton.business.config;\r\n\r\n/**\r\n * \u8bf7\u6c42\u670d\u52a1\u7aef\u7684url\u914d\u7f6e\r\n * \r\n * @author 792793182@qq.com 2014-9-22\r\n *\r\n */\r\npublic final class UrlConfig {\r\n\t\r\n\tprivate UrlConfig() { }\r\n\r\n\t\r\n\t/**\u8d26\u53f7\u4e2d\u5fc3baseUrl1*/\r\n\tprivate static final String baseUrl = \"\";\r\n\t\r\n\t/**\u6570\u636e\u4e2d\u5fc3baseUrl2*/\r\n\tprivate static final String baseUrl2 = \"\";\r\n\t\r\n\t/** \u751f\u4ea7\u73af\u5883\u548c\u6d4b\u8bd5\u73af\u5883\u6839\u636e\u8fde\u63a5\u7684WIFI\u81ea\u52a8\u89e3\u6790\u57df\u540d */\r\n/** -------------------------------------------------------------------------------------------------- */\r\n\t\r\n\t/** \u7b2c\u4e09\u65b9\u767b\u5f55 */\r\n\tpublic final static String thirdPartLoginUrl = baseUrl + \"\";\r\n\t\r\n\t/** \u767b\u5f55 */\r\n\tpublic final static String loginUrl = baseUrl + \"\";\r\n\t\r\n\t/** \u6ce8\u518c*/\r\n\tpublic final static String registerUrl = baseUrl + \"\";\r\n\t\r\n\t/** \u4fee\u6539\u5bc6\u7801 */\r\n\tpublic final static String changePasswordUrl = baseUrl + \"\";\r\n\t\r\n\t/** \u83b7\u53d6\u9a8c\u8bc1\u7801 */\r\n\tpublic final static String registerGetVerificationUrl = baseUrl + \"\";\r\n\t\r\n\t/** \u6821\u9a8c\u9a8c\u8bc1\u7801 */\r\n\tpublic final static String registerVerificationUrl = baseUrl + \"\";\r\n\t\r\n\t/** \u7ed1\u5b9a\u624b\u673a\u53f7*/\r\n\tpublic final static String getBindPhoneUrl = baseUrl + \"\";\r\n\t\r\n\t/** \u4e0a\u4f20\u5934\u50cf */\r\n\tpublic final static String getPostAvatarUrl = baseUrl + \"\";\r\n\t\r\n/** -------------------------------------------------------------------------------------------------- */\r\n\t\r\n\t/** \u83b7\u53d6\u670d\u52a1\u7aef\u7684\u914d\u7f6e */\r\n\tpublic static final String GET_CONFIGURATION = baseUrl2 + \"\";\r\n\t\r\n\t/** \u4fdd\u5b58\u4e2a\u4eba\u57fa\u672c\u4fe1\u606f\uff08\u5b8c\u5584\u6216\u8005\u4fee\u6539\u4e2a\u4eba\u4fe1\u606f\u65f6\uff0c\u57ce\u5e02\uff0c\u6635\u79f0\uff0c\u6027\u522b\uff09*/\r\n\tpublic final static String getsavePersonUrl = baseUrl2 + \"\";\r\n\t\r\n\t/** \u83b7\u53d6\u7528\u6237\u4fe1\u606f */\r\n\tpublic final static String getUserInfoUrl = baseUrl2 + \"\";\r\n\r\n\t/**\u6570\u636e\u7ed3\u679c\u4e0a\u4f20 - \u4ee5base64\u7f16\u7801\u7684\u5f62\u5f0f\u63d0\u4ea4\u6570\u636e */\r\n\tpublic final static String getUploadFileUrl = baseUrl2 + \"\";\r\n\t\r\n\t/**\u6570\u636e\u7ed3\u679c\u4e0a\u4f20 - \u4ee5\u8868\u5355\u7684\u5f62\u5f0f\u63d0\u4ea4\u6570\u636e */\r\n\tpublic final static String getUploadFileUrl2 = baseUrl2 + \"\";\r\n\r\n\t\r\n\t/** \u8ddf\u8e2a\u53cd\u9988 */\r\n\tpublic final static String PostTraceMessageUrl = baseUrl2 + \"\";\r\n\t\r\n\t/** \u4e0a\u4f20\u5954\u6e83\u65e5\u5fd7 */\r\n\tpublic final static String POST_UNCAUGHT_EXCEPTION = baseUrl2 + \"\";\r\n\t\r\n\t\r\n\t\r\n\t/** \u66f4\u65b0\u914d\u7f6e */\r\n\tpublic static final String UPDATE_VERSION = \"\";\r\n\t\r\n\t/** \u66f4\u65b0\u7684APK */\r\n\tpublic static final String UPDATE_APK = \"\";\r\n\t\r\n\tpublic static String getAuthorization(String accessToken) {\r\n\t\treturn \"Bearer \" + accessToken;\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"leleliu008/Newton_for_Android_AS","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/fpliu/newton/business/config/UrlConfig.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7689b61f46762bb7980585f18cdbb219fa49c70b","size":"2634","content":"package com.yuqirong.koku.fragment;\n\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.yuqirong.koku.R;\nimport com.yuqirong.koku.util.CommonUtil;\nimport com.yuqirong.koku.view.AboutTextView;\n\n/**\n * Created by Administrator on 2015/11/3.\n */\npublic class AboutFragment extends BaseFragment {\n\n    @Override\n    public void initData(Bundle savedInstanceState) {\n\n    }\n\n    @Override\n    protected View initView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_about, null);\n        AboutTextView atv_share = (AboutTextView) view.findViewById(R.id.atv_share);\n        AboutTextView atv_grade = (AboutTextView) view.findViewById(R.id.atv_grade);\n        AboutTextView atv_address = (AboutTextView) view.findViewById(R.id.atv_address);\n        AboutTextView atv_version = (AboutTextView) view.findViewById(R.id.atv_version);\n        atv_version.setContent(CommonUtil.getVersionName(context));\n        atv_version.setOnClickListener(listener);\n        atv_address.setOnClickListener(listener);\n        atv_grade.setOnClickListener(listener);\n        atv_share.setOnClickListener(listener);\n        return view;\n    }\n\n    View.OnClickListener listener = new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            switch (v.getId()) {\n                case R.id.atv_share:\n                    shareApp();\n                    break;\n                case R.id.atv_address:\n                    visitGit();\n                    break;\n                case R.id.atv_grade:\n                    gradeApp();\n                    break;\n            }\n        }\n    };\n\n    private void visitGit() {\n        Uri uri = Uri.parse(\"https://github.com/yuqirong/Koku\");\n        Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n        startActivity(intent);\n    }\n\n    private void gradeApp() {\n        Uri uri = Uri.parse(\"market://details?id=\" + context.getPackageName());\n        Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        startActivity(intent);\n    }\n\n    private void shareApp() {\n        Intent intent = new Intent(Intent.ACTION_SEND);\n        intent.setType(\"text/plain\");\n        intent.putExtra(Intent.EXTRA_TEXT, context.getString(R.string.share_app));\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(Intent.createChooser(intent, context.getString(R.string.share)));\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"yuqirong/Koku","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/yuqirong/koku/fragment/AboutFragment.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"34826af70488ff19e35fcafe7e2ad4f4eca11a60","size":"5906","content":"package de.vernideas.lib.stellargen;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Random;\n\nimport de.vernideas.space.data.Constant;\nimport de.vernideas.space.data.Pair;\nimport de.vernideas.space.data.Planet;\nimport de.vernideas.space.data.Satellite;\nimport de.vernideas.space.data.Star;\nimport de.vernideas.space.data.Universe;\nimport de.vernideas.space.data.starclass.StarClassHelper;\n\n/**\n * Random stateless star generator.\n * <p>\n * Seed hierarchy:\n * <dl>\n * <dt>Universe seed</dt>\n * <dd>Used to determine<ul><li>Star positions</li><li>Star seeds</li>\n *     <li>Stellar generation (clusters, ...)</li><li>Star names</li></ul>\n * <dt>Star seed</dt>\n * <dd>Used to determine<ul><li>Stellar class</li><li>Stellar mass</li><li>Stellar luminosity</li>\n *     <li>Stellar diameter</li><li>Planet and planetoid seeds</li><li>Planet and planetoid masses</li>\n *     <li>Planet and planetoid (original) classes</li><li>Planet and planetoid densities</li>\n *     <li>Planet and planetoid orbits</li></ul></dd>\n * <dt>Planet seed</dt>\n * <dd>Used to determine<ul><li>Planet class</li><li>Albedo</li><li>Greenhouse effect</li>\n *     <li>Atmosphere</li>\n *     <li>Moon seeds</li>\n *     <li>Moon masses</li><li>Moon (original) classes</li><li>Moon densities</li>\n *     <li>Moon orbits</li></ul></dd>\n * </dl>\n */\npublic class SystemGenerator {\n\tpublic static Star star(Universe u) {\n\t\treturn star(u, null);\n\t}\n\t\n\tpublic static Star star(Universe u, String scDef) {\n\t\t// Build the star first\n\t\tStar star = (null == scDef ? StarGenerator.star(u) : StarGenerator.star(u, scDef));\n\t\t\n\t\taddPlanetarySystem(star);\n\t\t\n\t\treturn star;\n\t}\n\t\n\tpublic static Star star(Universe u, String scDef, long starSeed) {\n\t\t// Build the star first\n\t\tStar star = (null == scDef ? StarGenerator.star(u, starSeed) : StarGenerator.star(u, scDef, starSeed));\n\t\t\n\t\taddPlanetarySystem(star);\n\t\t\n\t\treturn star;\n\t}\n\t\n\tprivate static void addPlanetarySystem(Star star) {\n\t\tdouble maxPlanetaryMass = Math.min(Constant.MAX_PLANETARY_MASS, star.mass() / 25.0);\n\t\t\n\t\t// Planet building phase\n\t\tint gasgiantMod = StarClassHelper.gasgiantMod(star.starClass);\n\t\tint planetNum = (int)Math.round(StarClassHelper.randomPlanets(star.starClass, star.random()));\n\t\tif( planetNum < 0 ) { planetNum = 0; }\n\t\tif( planetNum > 26 ) { planetNum = 26; } // Arbitrary, to not complicate the naming scheme\n\n\t\tdouble stellarDustLimit = 1e14 * Math.pow(12 + gasgiantMod, 3.0) * Math.pow(star.mass(), 1.0 / 3.0) * (0.95 + star.random().nextGaussian() * 0.1);\n\t\tif( stellarDustLimit < 0.0 ) {\n\t\t\tstellarDustLimit = 1e13 *  Math.pow(star.mass(), 1.0 / 3.0);\n\t\t}\n\t\tstellarDustLimit += planetNum * Constant.MIN_TERRESTRIAL_MASS;\n\t\t\n\t\tdouble stellarDust = stellarDustLimit;\n\t\t\n\t\tList<Planet> planets = null;\n\t\tif( planetNum == 0 )\n\t\t{\n\t\t\tplanets = new ArrayList<Planet>(0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tplanets = new ArrayList<Planet>(planetNum);\n\t\t\t// Limit the amount of tries; sometimes we just don't have the place for all the planets, especially around big stars\n\t\t\tint planetTriesLeft = planetNum * 10;\n\t\t\t\n\t\t\tint curPlanetNum = 0;\n\t\t\twhile( stellarDust > 1000.0 * Constant.YOTTAGRAM && planetNum > curPlanetNum && planetTriesLeft > 0 )\n\t\t\t{\n\t\t\t\tPlanet tempPlanet = null;\n\t\t\t\tif( stellarDust > stellarDustLimit * 0.01 && stellarDust > Constant.MAX_TERRESTRIAL_MASS && star.random().nextInt(10) + gasgiantMod > 3 )\n\t\t\t\t{\n\t\t\t\t\t// Try generating gas giants first\n\t\t\t\t\tdouble minMass = Math.max(Constant.MAX_TERRESTRIAL_MASS, stellarDust / 2.0);\n\t\t\t\t\ttempPlanet = PlanetGenerator.newGasgiant(star, null, minMass, Math.min(maxPlanetaryMass, stellarDust));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdouble maxMass = Math.min(maxPlanetaryMass, stellarDust * (0.5 + (planetNum - curPlanetNum) / (2.0 * planetNum)));\n\t\t\t\t\ttempPlanet = PlanetGenerator.newTerrestialPlanet(star, null, Constant.MIN_TERRESTRIAL_MASS, maxMass);\n\t\t\t\t}\n\t\t\t\tif( null != tempPlanet && tempPlanet.mass() <= stellarDust ) {\n\t\t\t\t\tplanets.add(tempPlanet);\n\t\t\t\t\tstar.planets.add(tempPlanet);\n\t\t\t\t\tstellarDust -= tempPlanet.mass();\n\t\t\t\t\t++ curPlanetNum;\n\t\t\t\t}\n\t\t\t\t-- planetTriesLeft;\n\t\t\t}\n\t\t\t\n\t\t\tplanetNum = curPlanetNum;\n\t\t}\n\t\t\t\t\n\t\t// Assign names\n\t\tCollections.sort(planets, Satellite.REVERSE_MASS_COMPARATOR);\n\t\tint generatedPlanets = 0;\n\t\tdouble smallestPlanetMass = Constant.MAX_TERRESTRIAL_MASS;\n\t\tfor( int i = 0; i < planetNum; ++ i ) {\n\t\t\tboolean habitable = false;\n\t\t\tPlanet planet = planets.get(i);\n\t\t\tplanet.name(star.name() + \" \" + (char)('b' + generatedPlanets));\n\t\t\thabitable = habitable || planet.habitable();\n\t\t\t//star.planets.add(planet);\n\t\t\t++ generatedPlanets;\n\t\t\tif( planet.mass() < smallestPlanetMass )\n\t\t\t{\n\t\t\t\tsmallestPlanetMass = planet.mass();\n\t\t\t}\n\t\t}\n\n\t\t// Add planetoids\n\t\tdouble planetoidEstimate = Math.min(Math.pow(stellarDust / Constant.YOTTAGRAM, 0.3) * 20.0, 20.0 + Math.abs(star.random().nextGaussian() * 15.0));\n\t\tint planetoids = (int)Math.round(planetoidEstimate);\n\t\t\n\t\tfor( int i = 0; i < planetoids; ++ i )\n\t\t{\n\t\t\tPlanet planet = PlanetGenerator.newPlanetoid(star, smallestPlanetMass / 10);\n\t\t\tif( null != planet )\n\t\t\t{\n\t\t\t\tstar.planetoids.add(planet);\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\t/**\n\t * Root mean square velocity of the molecule/atom given the temperature\n\t * (for calculating escape velocity of the atmosphere).\n\t * \n\t * @param molWeight molar mass (g/mol)\n\t * @return Velocity in m/s\n\t */\n\tpublic static double rmsVelocity(double molWeight, double temperature)\n\t{\n\t\treturn Math.sqrt(3 * Constant.MOLAR_GAS * temperature / molWeight * 1000);\n\t}\n\t\n\t/** Returns a pair of mass (in kG) and random seed used to create the mass */\n\tprivate static Pair<Double, Long> planetMass(Random rnd, double minMass, double maxMass)\n\t{\n\t\tdouble mass;\n\t\tlong seed;\n\t\tdo {\n\t\t\tseed = rnd.nextLong();\n\t\t\tmass = Satellite.newMass(new Random(seed));\n\t\t} while( mass > maxMass || mass < minMass );\n\t\treturn Pair.<Double, Long>of(mass, seed);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"MartinSojka/Stellar-Generator","sample_ref":"refs/heads/master","sample_path":"src/main/java/de/vernideas/lib/stellargen/SystemGenerator.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a523188bb0797f57096891ddfadd0b0f8a41f49c","size":"363","content":"package com.samebits.beacon.locator.test;\n\nimport android.app.Application;\nimport android.test.ApplicationTestCase;\n\n/**\n * <a href=\"http://d.android.com/tools/testing/testing_android.html\">Testing Fundamentals</a>\n */\npublic class ApplicationTest extends ApplicationTestCase<Application> {\n    public ApplicationTest() {\n        super(Application.class);\n    }\n}","binary":"false","copies":"1","sample_repo_name":"vitas/beaconloc","sample_ref":"refs/heads/master","sample_path":"app/src/androidTest/java/com/samebits/beacon/locator/test/ApplicationTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3d53c45634a196add9699497961252a5fa721f0a","size":"10510","content":"/**\n *   ownCloud Android client application\n *\n *   @author Bartek Przybylski\n *   @author David A. Velasco\n *   Copyright (C) 2011  Bartek Przybylski\n *   Copyright (C) 2015 ownCloud Inc.\n *\n *   This program is free software: you can redistribute it and/or modify\n *   it under the terms of the GNU General Public License version 2,\n *   as published by the Free Software Foundation.\n *\n *   This program is distributed in the hope that it will be useful,\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *   GNU General Public License for more details.\n *\n *   You should have received a copy of the GNU General Public License\n *   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\npackage com.synox.android.utils;\n\nimport android.annotation.TargetApi;\nimport android.app.Activity;\nimport android.content.Context;\nimport android.graphics.Point;\nimport android.graphics.PorterDuff;\nimport android.os.Build;\nimport android.support.design.widget.Snackbar;\nimport android.support.v4.content.ContextCompat;\nimport android.text.format.DateUtils;\nimport android.view.Display;\nimport android.widget.ProgressBar;\nimport android.widget.SeekBar;\n\nimport com.synox.android.R;\nimport com.synox.android.datamodel.OCFile;\n\nimport java.net.IDN;\nimport java.text.DateFormat;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * A helper class for some string operations.\n */\npublic class DisplayUtils {\n\n    private static Map<String, String> mimeType2HumanReadable;\n\n    static {\n        mimeType2HumanReadable = new HashMap<>();\n        // images\n        mimeType2HumanReadable.put(\"image/jpeg\", \"JPEG image\");\n        mimeType2HumanReadable.put(\"image/jpg\", \"JPEG image\");\n        mimeType2HumanReadable.put(\"image/png\", \"PNG image\");\n        mimeType2HumanReadable.put(\"image/bmp\", \"Bitmap image\");\n        mimeType2HumanReadable.put(\"image/gif\", \"GIF image\");\n        mimeType2HumanReadable.put(\"image/svg+xml\", \"JPEG image\");\n        mimeType2HumanReadable.put(\"image/tiff\", \"TIFF image\");\n        // music\n        mimeType2HumanReadable.put(\"audio/mpeg\", \"MP3 music file\");\n        mimeType2HumanReadable.put(\"application/ogg\", \"OGG music file\");\n    }\n\n    /**\n     * Converts the file size in bytes to human readable output.\n     * \n     * @param bytes Input file size\n     * @return Like something readable like \"12 MB\"\n     */\n    public static String bytesToHumanReadable(long bytes) {\n\n        if (bytes == -1)\n        {\n            return \"\";\n        }\n\n        int unit = 1024;\n        if (bytes < unit) return bytes + \" B\";\n        int exp = (int) (Math.log(bytes) / Math.log(unit));\n        String pre = String.valueOf((\"kMGTPEZY\").charAt(exp - 1));\n        return String.format(\"%.2f %sB\", bytes / Math.pow(unit, exp), pre);\n    }\n\n    /**\n     * Converts MIME types like \"image/jpg\" to more end user friendly output\n     * like \"JPG image\".\n     * \n     * @param mimetype MIME type to convert\n     * @return A human friendly version of the MIME type\n     */\n    public static String convertMIMEtoPrettyPrint(String mimetype) {\n        if (mimeType2HumanReadable.containsKey(mimetype)) {\n            return mimeType2HumanReadable.get(mimetype);\n        }\n        if (mimetype.split(\"/\").length >= 2)\n            return mimetype.split(\"/\")[1].toUpperCase() + \" file\";\n        return \"Unknown type\";\n    }\n\n    /**\n     * Converts Unix time to human readable format\n     * @param milliseconds that have passed since 01/01/1970\n     * @return The human readable time for the users locale\n     */\n    public static String unixTimeToHumanReadable(long milliseconds) {\n        Date date = new Date(milliseconds);\n        DateFormat df = DateFormat.getDateTimeInstance();\n        return df.format(date);\n    }\n    \n    public static int getSeasonalIconId() {\n            return R.mipmap.ic_launcher;\n    }\n    \n    /**\n     * Converts an internationalized domain name (IDN) in an URL to and from ASCII/Unicode.\n     * @param url the URL where the domain name should be converted\n     * @param toASCII if true converts from Unicode to ASCII, if false converts from ASCII to Unicode\n     * @return the URL containing the converted domain name\n     */\n    @TargetApi(Build.VERSION_CODES.GINGERBREAD)\n    public static String convertIdn(String url, boolean toASCII) {\n\n        String urlNoDots = url;\n        String dots=\"\";\n        while (urlNoDots.startsWith(\".\")) {\n            urlNoDots = url.substring(1);\n            dots = dots + \".\";\n        }\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {\n            // Find host name after '//' or '@'\n            int hostStart = 0;\n            if  (urlNoDots.contains(\"//\")) {\n                hostStart = url.indexOf(\"//\") + \"//\".length();\n            } else if (url.contains(\"@\")) {\n                hostStart = url.indexOf(\"@\") + \"@\".length();\n            }\n\n            int hostEnd = url.substring(hostStart).indexOf(\"/\");\n            // Handle URL which doesn't have a path (path is implicitly '/')\n            hostEnd = (hostEnd == -1 ? urlNoDots.length() : hostStart + hostEnd);\n\n            String host = urlNoDots.substring(hostStart, hostEnd);\n            host = (toASCII ? IDN.toASCII(host) : IDN.toUnicode(host));\n\n            return dots + urlNoDots.substring(0, hostStart) + host + urlNoDots.substring(hostEnd);\n        } else {\n            return dots + url;\n        }\n    }\n\n    /**\n     * Get the file extension if it is on path as type \"content://.../DocInfo.doc\"\n     * @param filepath: Content Uri converted to string format\n     * @return String: fileExtension (type '.pdf'). Empty if no extension\n     */\n    public static String getComposedFileExtension(String filepath) {\n        String fileExtension = \"\";\n        String fileNameInContentUri = filepath.substring(filepath.lastIndexOf(\"/\"));\n\n        // Check if extension is included in uri\n        int pos = fileNameInContentUri.lastIndexOf('.');\n        if (pos >= 0) {\n            fileExtension = fileNameInContentUri.substring(pos);\n        }\n        return fileExtension;\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    public static CharSequence getRelativeDateTimeString (\n            Context c, long time, long minResolution, long transitionResolution, int flags\n            ){\n        \n        CharSequence dateString = \"\";\n        \n        // in Future\n        if (time > System.currentTimeMillis()){\n            return DisplayUtils.unixTimeToHumanReadable(time);\n        } \n        // < 60 seconds -> seconds ago\n        else if ((System.currentTimeMillis() - time) < 60 * 1000) {\n            return c.getString(R.string.file_list_seconds_ago);\n        } else {\n            // Workaround 2.x bug (see https://github.com/owncloud/android/issues/716)\n            if (    Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB && \n                    (System.currentTimeMillis() - time) > 24 * 60 * 60 * 1000   ) {\n                Date date = new Date(time);\n                date.setHours(0);\n                date.setMinutes(0);\n                date.setSeconds(0);\n                dateString = DateUtils.getRelativeDateTimeString(\n                        c, date.getTime(), minResolution, transitionResolution, flags\n                );\n            } else {\n                dateString = DateUtils.getRelativeDateTimeString(c, time, minResolution, transitionResolution, flags);\n            }\n        }\n        \n        return dateString.toString().split(\",\")[0];\n    }\n\n    /**\n     * Update the passed path removing the last \"/\" if it is not the root folder\n     * @param path\n     */\n    public static String getPathWithoutLastSlash(String path) {\n\n        // Remove last slash from path\n        if (path.length() > 1 && path.charAt(path.length()-1) == OCFile.PATH_SEPARATOR.charAt(0)) {\n            path = path.substring(0, path.length()-1);\n        }\n        return path;\n    }\n\n\n    /**\n     * Gets the screen size in pixels in a backwards compatible way\n     *\n     * @param caller        Activity calling; needed to get access to the {@link android.view.WindowManager}\n     * @return              Size in pixels of the screen, or default {@link Point} if caller is null\n     */\n    public static Point getScreenSize(Activity caller) {\n        Point size = new Point();\n        if (caller != null) {\n            Display display = caller.getWindowManager().getDefaultDisplay();\n            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB_MR2) {\n                display.getSize(size);\n            } else {\n                size.set(display.getWidth(), display.getHeight());\n            }\n        }\n        return size;\n    }\n\n    /**\n     * sets the coloring of the given progress bar to color_accent.\n     *\n     * @param progressBar the progress bar to be colored\n     */\n    public static void colorPreLollipopHorizontalProgressBar(ProgressBar progressBar) {\n        if (progressBar != null && Build.VERSION.SDK_INT <= Build.VERSION_CODES.LOLLIPOP) {\n            int color = progressBar.getResources().getColor(R.color.accent);\n            progressBar.getIndeterminateDrawable().setColorFilter(color, PorterDuff.Mode.SRC_IN);\n            progressBar.getProgressDrawable().setColorFilter(color, PorterDuff.Mode.SRC_IN);\n        }\n    }\n\n    /**\n     * sets the coloring of the given seek bar to color_accent.\n     *\n     * @param seekBar the seek bar to be colored\n     */\n    public static void colorPreLollipopHorizontalSeekBar(SeekBar seekBar) {\n        if (seekBar != null && Build.VERSION.SDK_INT <= Build.VERSION_CODES.LOLLIPOP) {\n            colorPreLollipopHorizontalProgressBar(seekBar);\n\n            if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n                int color = seekBar.getResources().getColor(R.color.accent);\n                seekBar.getThumb().setColorFilter(color, PorterDuff.Mode.SRC_IN);\n                seekBar.getThumb().setColorFilter(color, PorterDuff.Mode.SRC_IN);\n            }\n        }\n    }\n\n    /**\n     * set the owncloud standard colors for the snackbar.\n     *\n     * @param context the context relevant for setting the color according to the context's theme\n     * @param snackbar the snackbar to be colored\n     */\n    public static void colorSnackbar(Context context, Snackbar snackbar) {\n        // Changing action button text color\n        snackbar.setActionTextColor(ContextCompat.getColor(context, R.color.white));\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"skymania/Cirrus","sample_ref":"refs/heads/master","sample_path":"src/com/synox/android/utils/DisplayUtils.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"0d60eecfbd716dbc961ad4cbd94c09ef641aac8d","size":"6565","content":"/*\n * Copyright (c) 2015 IRCCloud, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.irccloud.android.data.model;\n\nimport android.text.Spanned;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.irccloud.android.Ignore;\nimport com.irccloud.android.NetworkConnection;\nimport com.irccloud.android.R;\nimport com.irccloud.android.data.IRCCloudDatabase;\nimport com.irccloud.android.data.collection.ServersList;\nimport com.raizlabs.android.dbflow.annotation.Column;\nimport com.raizlabs.android.dbflow.annotation.ConflictAction;\nimport com.raizlabs.android.dbflow.annotation.PrimaryKey;\nimport com.raizlabs.android.dbflow.annotation.Table;\nimport com.raizlabs.android.dbflow.annotation.Unique;\nimport com.raizlabs.android.dbflow.annotation.UniqueGroup;\nimport com.raizlabs.android.dbflow.structure.BaseModel;\n\nimport java.util.TimerTask;\n\n/*@Table(databaseName = IRCCloudDatabase.NAME,\n        uniqueColumnGroups = {@UniqueGroup(groupNumber = 1, uniqueConflict = ConflictAction.REPLACE)})*/\npublic class Event /*extends ObservableBaseModel*/ {\n    @Column\n    @PrimaryKey\n    @Unique(unique = false, uniqueGroups = 1)\n    public int cid;\n\n    @Column\n    @PrimaryKey\n    @Unique(unique = false, uniqueGroups = 1)\n    public int bid;\n\n    @Column\n    @PrimaryKey\n    @Unique(unique = false, uniqueGroups = 1)\n    public long eid;\n\n    @Column\n    public long server_time;\n\n    @Column\n    public String type;\n\n    @Column\n    public String msg;\n\n    @Column\n    public String hostmask;\n\n    @Column(name = \"event_from\")\n    public String from;\n\n    @Column\n    public String from_mode;\n\n    @Column\n    public String from_realname;\n\n    @Column\n    public String nick;\n\n    @Column\n    public String old_nick;\n\n    @Column\n    public String server;\n\n    @Column\n    public String diff;\n\n    @Column\n    public String chan;\n\n    @Column\n    public boolean highlight;\n\n    @Column\n    public boolean self;\n\n    @Column\n    public boolean to_chan;\n\n    @Column\n    public boolean to_buffer;\n\n    @Column\n    public int color;\n\n    @Column\n    public int bg_color;\n\n    @Column\n    public JsonNode ops;\n\n    @Column\n    public long group_eid;\n\n    @Column\n    public int row_type = 0;\n\n    @Column\n    public String group_msg;\n\n    @Column\n    public boolean linkify = true;\n\n    @Column\n    public String target_mode;\n\n    @Column\n    public int reqid;\n\n    @Column\n    public boolean pending;\n\n    @Column\n    public boolean failed;\n\n    @Column\n    public String command;\n\n    @Column\n    public int day = -1;\n\n    @Column\n    public String contentDescription;\n\n    @Column\n    public JsonNode entities;\n\n    public String timestamp;\n    public String html;\n    public Spanned formatted;\n    public Spanned formatted_nick;\n    public Spanned formatted_realname;\n    public TimerTask expiration_timer;\n    public boolean header;\n\n    public Event() {\n\n    }\n\n    public Event(Event e) {\n        cid = e.cid;\n        bid = e.bid;\n        eid = e.eid;\n        server_time = e.server_time;\n        type = e.type;\n        msg = e.msg;\n        hostmask = e.hostmask;\n        from = e.from;\n        from_mode = e.from_mode;\n        from_realname = e.from_realname;\n        nick = e.nick;\n        old_nick = e.old_nick;\n        server = e.server;\n        diff = e.diff;\n        chan = e.chan;\n        highlight = e.highlight;\n        self = e.self;\n        to_chan = e.to_chan;\n        to_buffer = e.to_buffer;\n        color = e.color;\n        bg_color = e.bg_color;\n        ops = e.ops.deepCopy();\n        group_eid = e.group_eid;\n        row_type = e.row_type;\n        group_msg = e.group_msg;\n        linkify = e.linkify;\n        target_mode = e.target_mode;\n        reqid = e.reqid;\n        pending = e.pending;\n        failed = e.failed;\n        command = e.command;\n        day = e.day;\n        contentDescription = e.contentDescription;\n        entities = e.entities;\n    }\n\n    public String toString() {\n        return \"{\" +\n                \"cid: \" + cid +\n                \" bid: \" + bid +\n                \" eid: \" + eid +\n                \" type: \" + type +\n                \" timestamp: \" + timestamp +\n                \" from: \" + from +\n                \" msg: \" + msg +\n                \" html: \" + html +\n                \" group_eid: \" + group_eid +\n                \" group_msg: \" + group_msg +\n                \" pending: \" + pending +\n                \" self: \" + self +\n                \" header: \" + header +\n                \"}\";\n    }\n\n    public long getTime() {\n        if(server_time > 0)\n            return server_time;\n        else\n            return (eid / 1000) + NetworkConnection.getInstance().clockOffset;\n    }\n\n    public synchronized boolean isImportant(String buffer_type) {\n        if (self)\n            return false;\n        if (type == null) {\n            return false;\n        }\n\n        Ignore ignore = new Ignore();\n        Server s = ServersList.getInstance().getServer(cid);\n        if (s != null) {\n            ignore.setIgnores(s.ignores);\n            String from = this.from;\n            if (from == null || from.length() == 0)\n                from = this.nick;\n            if (ignore.match(from + \"!\" + hostmask))\n                return false;\n        }\n\n        if (type.equals(\"notice\") || type.equalsIgnoreCase(\"channel_invite\")) {\n            // Notices sent from the server (with no nick sender) aren't important\n            // e.g. *** Looking up your hostname...\n            if (from == null || from.length() == 0)\n                return false;\n\n            // Notices and invites sent to a buffer shouldn't notify in the server buffer\n            if (buffer_type.equalsIgnoreCase(\"console\") && (to_chan || to_buffer))\n                return false;\n        }\n        return isMessage();\n    }\n\n    public boolean isMessage() {\n        return (type.equals(\"buffer_msg\") ||\n                type.equals(\"buffer_me_msg\") ||\n                type.equals(\"notice\") ||\n                type.equals(\"channel_invite\") ||\n                type.equals(\"callerid\") ||\n                type.equals(\"wallops\"));\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"irccloud/android","sample_ref":"refs/heads/master","sample_path":"src/com/irccloud/android/data/model/Event.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8f828be1f707d33791c8fa848c6497b29aea74f2","size":"1364","content":"package org.springframework.data.jpa.datatables.repository;\n\nimport static org.junit.Assert.assertEquals;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.aop.framework.Advised;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.datatables.Config;\nimport org.springframework.data.jpa.datatables.model.HomeRepository;\nimport org.springframework.data.jpa.datatables.model.UserRepository;\nimport org.springframework.data.jpa.repository.support.SimpleJpaRepository;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = Config.class)\npublic class RepositoryTest {\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Autowired\n  private HomeRepository homeRepository;\n\n  @Test\n  public void checkGeneratedRepositories() throws Exception {\n    assertEquals(DataTablesRepositoryImpl.class, getTargetObject(userRepository));\n    assertEquals(SimpleJpaRepository.class, getTargetObject(homeRepository));\n  }\n\n  // returns the class of the proxied object\n  @SuppressWarnings(\"unchecked\")\n  protected <T> T getTargetObject(Object proxy) throws Exception {\n    return (T) ((Advised) proxy).getTargetSource().getTargetClass();\n  }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"darrachequesne/spring-data-jpa-datatables","sample_ref":"refs/heads/master","sample_path":"src/test/java/org/springframework/data/jpa/datatables/repository/RepositoryTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d9375c920812fd7abc66ef23d8efac111b6801aa","size":"2032","content":"package hex.deeplearning;\n\nimport water.util.RandomUtils;\n\nimport java.util.Arrays;\nimport java.util.Random;\n\n/**\n * Helper class for dropout training of Neural Nets\n */\npublic class Dropout {\n  private transient Random _rand;\n  private transient byte[] _bits;\n  private transient double _rate;\n\n  public byte[] bits() { return _bits; }\n\n//  public Dropout() {\n//    _rate = 0.5;\n//  }\n\n  @Override\n  public String toString() {\n    String s = \"Dropout: \" + super.toString();\n    s += \"\\nRandom: \" + _rand.toString();\n    s += \"\\nDropout rate: \" + _rate;\n    s += \"\\nbits: \";\n    for (int i=0; i< _bits.length*8; ++i) s += unit_active(i) ? \"1\":\"0\";\n    s += \"\\n\";\n    return s;\n  }\n\n  Dropout(int units) {\n    _bits = new byte[(units+7)/8];\n    _rand = RandomUtils.getRNG(0);\n    _rate = 0.5;\n  }\n\n  Dropout(int units, double rate) {\n    this(units);\n    _rate = rate;\n  }\n\n  public void randomlySparsifyActivation(Storage.Vector a, long seed) {\n    if (a instanceof Storage.DenseVector)\n      randomlySparsifyActivation((Storage.DenseVector) a, seed);\n    else throw new UnsupportedOperationException(\"randomlySparsifyActivation not implemented for this type: \" + a.getClass().getSimpleName());\n  }\n\n  // for input layer\n  private void randomlySparsifyActivation(Storage.DenseVector a, long seed) {\n    if (_rate == 0) return;\n    setSeed(seed);\n    for( int i = 0; i < a.size(); i++ )\n      if (_rand.nextFloat() < _rate) a.set(i, 0);\n  }\n\n  // for hidden layers\n  public void fillBytes(long seed) {\n    setSeed(seed);\n    if (_rate == 0.5) _rand.nextBytes(_bits);\n    else {\n      Arrays.fill(_bits, (byte)0);\n      for (int i=0;i<_bits.length*8;++i)\n        if (_rand.nextFloat() > _rate) _bits[i / 8] |= 1 << (i % 8);\n    }\n  }\n\n  public boolean unit_active(int o) {\n    return (_bits[o / 8] & (1 << (o % 8))) != 0;\n  }\n\n  private void setSeed(long seed) {\n    if ((seed >>> 32) < 0x0000ffffL)         seed |= 0x5b93000000000000L;\n    if (((seed << 32) >>> 32) < 0x0000ffffL) seed |= 0xdb910000L;\n    _rand.setSeed(seed);\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"h2oai/h2o-3","sample_ref":"refs/heads/master","sample_path":"h2o-algos/src/main/java/hex/deeplearning/Dropout.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"11708087dba67f326a9fd5a5373121210cd6bc14","size":"1607","content":"/*\n * #!\n * Ontopia Engine\n * #-\n * Copyright (C) 2001 - 2013 The Ontopia Project\n * #-\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * !#\n */\n\npackage net.ontopia.topicmaps.query.impl.basic;\n\nimport java.util.Collection;\nimport java.util.Collections;\n\nimport net.ontopia.topicmaps.core.TopicIF;\nimport net.ontopia.topicmaps.core.TopicMapIF;\n\n/**\n * INTERNAL: Implements the 'direct-instance-of' predicate using the indexes.\n */\npublic class DirectInstanceOfPredicate extends AbstractInstanceOfPredicate {\n \n  public DirectInstanceOfPredicate(TopicMapIF topicmap) {\n    super(topicmap);\n  }\n  \n  public String getName() {\n    return \"direct-instance-of\";\n  }\n\n  // --- Data interface implementation\n\n  protected void start() {\n  }\n  \n  protected Collection getClasses(TopicIF instance) {\n    return instance.getTypes();\n  }\n\n  protected Collection getInstances(TopicIF klass) {\n    return index.getTopics(klass);\n  }\n\n  protected Collection getTypes() {\n    return index.getTopicTypes();\n  }\n\n  protected Collection getSupertypes(TopicIF type) {\n    return Collections.singleton(type);\n  }  \n}\n","binary":"false","copies":"1","sample_repo_name":"ontopia/ontopia","sample_ref":"refs/heads/master","sample_path":"ontopia-engine/src/main/java/net/ontopia/topicmaps/query/impl/basic/DirectInstanceOfPredicate.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"01c9bdf49933e9e4469e52e75ae7e93de52eb060","size":"9419","content":"package com.nifty.cloud.mb.core;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.Map;\n\n/**\n * NCMBAcl class contains acl setting for datastore , user , role\n */\npublic class NCMBAcl {\n    /**\n     * Inner class of representation for permission\n     */\n    public static class Permission {\n        /** access permitted to read */\n        public boolean readable = false;\n        /** access permitted to write */\n        public boolean writable = false;\n\n        /**\n         * Constructor\n         */\n        Permission() {\n        }\n\n        /**\n         * Constructor\n         * @param read read permission\n         * @param write write permission\n         */\n        Permission(Boolean read, Boolean write) {\n            readable = read;\n            writable = write;\n        }\n\n        /**\n         * Construct from JSON\n         */\n        Permission(JSONObject json) {\n            readable = json.optBoolean(\"read\", false);\n            writable = json.optBoolean(\"write\", false);\n        }\n\n        /**\n         * Represent to JSON object\n         * @return JSONObject JSON representation\n         */\n        public JSONObject toJson() {\n            JSONObject json = new JSONObject();\n            try {\n                if (readable) {\n                    json.put(\"read\", true);\n                }\n                if (writable) {\n                    json.put(\"write\", true);\n                }\n            } catch (JSONException e) {\n                // do nohting\n            }\n            return json;\n        }\n\n        /**\n         * Represent to string\n         * @return String string representation\n         */\n        public String toString() {\n            return toJson().toString();\n        }\n    }\n\n    /** public ACL */\n    public static final String ACL_PUBLIC = \"*\";\n\n    /** prefix of role */\n    public static final String PREFIX_ROLE = \"role:\";\n\n    /**\n     * ACL for user/public\n     */\n    private Map<String, Permission> userAcl;\n\n    /**\n     * ACL for role\n     */\n    private Map<String, Permission> roleAcl;\n\n    /**\n     * Constructor\n     */\n    public NCMBAcl() {\n        userAcl = new HashMap<String, Permission>();\n        roleAcl = new HashMap<String, Permission>();\n    }\n\n    /**\n     * Constructor from JSON\n     * @param json json object of defalut acl\n     * @throws JSONException exception from JSONObject\n     */\n    public NCMBAcl(JSONObject json) throws JSONException {\n        this();\n        parse(json);\n    }\n\n    /**\n     * parse json from JSONObject\n     * @param input input JSONObject\n     * @throws JSONException exception from JSONObject\n     */\n    public void parse(JSONObject input) throws JSONException {\n       for (Iterator<String> it = input.keys(); it.hasNext(); ) {\n           String id = it.next();\n           JSONObject json = input.getJSONObject(id);\n           Permission perm = new Permission(json);\n\n           if (id.startsWith(PREFIX_ROLE)) {\n               String roleName = id.substring(PREFIX_ROLE.length());\n               roleAcl.put(roleName, perm);\n           } else {\n               userAcl.put(id, perm);\n           }\n       }\n    }\n\n    /**\n     * Convert to JSONObject\n     * @return converted value\n     * @throws JSONException exception from JSONException\n     */\n    public JSONObject toJson() throws JSONException {\n        JSONObject result = new JSONObject();\n        for (Map.Entry<String, Permission> uentry: userAcl.entrySet()) {\n            result.put(uentry.getKey(), uentry.getValue().toJson());\n        }\n\n        for (Map.Entry<String, Permission> rentry: roleAcl.entrySet()) {\n            String key = PREFIX_ROLE + rentry.getKey();\n            result.put(key, rentry.getValue().toJson());\n        }\n        return result;\n    }\n\n    /**\n     * Check ACL is empty or not\n     * @return return true when acl is empty\n     */\n    public boolean isEmpty() {\n        return userAcl.isEmpty() || roleAcl.isEmpty();\n    }\n\n    // Primitive acl methods\n\n    /**\n     * set user access permissions\n     * @param userId user id\n     * @param permission permission\n     */\n    public void setAccess(String userId, Permission permission) {\n        userAcl.put(userId, permission);\n    }\n\n    /**\n     * set role access permissions\n     * @param roleName role name\n     * @param permission permission\n     */\n    public void setRoleAccess(String roleName, Permission permission) {\n        roleAcl.put(roleName, permission);\n    }\n\n    /**\n     * get user access permissions\n     * @param userId user id\n     * @return permissions\n     */\n    public Permission getAccess(String userId) {\n        Permission p = userAcl.get(userId);\n        if (p == null) {\n            p = new Permission();\n            // not set permission to ACL\n        }\n        return p;\n    }\n\n    /**\n     * get role access permissions\n     * @param roleName role name\n     * @return permissions\n     */\n    public Permission getRoleAccess(String roleName) {\n        Permission p = roleAcl.get(roleName);\n        if (p == null) {\n            p = new Permission();\n            // not set permission to ACL\n        }\n        return p;\n    }\n\n    /**\n     * Remove permission for user\n     * @param userId user id\n     * @return success to remove permission\n     */\n    public boolean removePermission(String userId) {\n        boolean result = false;\n        if (userAcl.containsKey(userId)) {\n            userAcl.remove(userId);\n            result = true;\n        }\n        return result;\n    }\n\n    /**\n     * Remove permisson for role\n     * @param roleName role name\n     * @return success to remove permission\n     */\n    public boolean removeRolePermission(String roleName) {\n        boolean result = false;\n        if (roleAcl.containsKey(roleName)) {\n            roleAcl.remove(roleName);\n            result = true;\n        }\n        return result;\n    }\n\n    // readable/writable shortcut methods\n\n    /**\n     * Get whether the given user id is allowed to read\n     * @param userId user id\n     * @return can read or not\n     */\n    public boolean getReadAccess(String userId) {\n        return getAccess(userId).readable;\n    }\n\n    /**\n     * Get whether the given user id is allowed to write\n     * @param userId user id\n     * @return can write or not\n     */\n    public boolean getWriteAccess(String userId) {\n        return getAccess(userId).writable;\n    }\n\n    /**\n     * Get whether the gevin role name is allowed to read\n     * @param roleName role name\n     * @return can read or not\n     */\n    public boolean getRoleReadAccess(String roleName) {\n        return getRoleAccess(roleName).readable;\n    }\n\n    /**\n     * Get whether the gevin role name is allowed to write\n     * @param roleName role name\n     * @return can write or not\n     */\n    public boolean getRoleWriteAccess(String roleName) {\n        return getRoleAccess(roleName).writable;\n    }\n\n    /**\n     * Set whether the given user id is allowed to read.\n     * @param userId user id\n     * @param allowed can read or not\n     */\n    public void setReadAccess(String userId, boolean allowed) {\n        Permission p = getAccess(userId);\n        if (p.readable == allowed) {\n            // already set\n            return;\n        }\n        p.readable = allowed;\n        setAccess(userId, p);\n    }\n\n    /**\n     * Set whether the given user is allowed to write.\n     * @param userId user id\n     * @param allowed can write or not\n     */\n    public void setWriteAccess(String userId, boolean allowed) {\n        Permission p = getAccess(userId);\n        if (p.writable == allowed) {\n            // already set\n            return;\n        }\n        p.writable = allowed;\n        setAccess(userId, p);\n    }\n\n    /**\n     * Set whether the given role is allowed to read.\n     * @param roleName role name\n     * @param allowed can reaad or not\n     */\n    public void setRoleReadAccess(String roleName, boolean allowed) {\n        Permission p = getRoleAccess(roleName);\n        if (p.readable == allowed) {\n            // already set\n            return;\n        }\n        p.readable = allowed;\n        setRoleAccess(roleName, p);\n    }\n\n    /**\n     * Set whether the given role is allowed to write.\n     * @param roleName role name\n     * @param allowed can write or not\n     */\n    public void setRoleWriteAccess(String roleName, boolean allowed) {\n        Permission p = getRoleAccess(roleName);\n        if (p.writable == allowed) {\n            // already set\n            return;\n        }\n        p.writable = allowed;\n        setRoleAccess(roleName, p);\n    }\n\n    // public ACL shortcuts\n\n    /**\n     * Get whether the public is allowed to read.\n     * @return can read or not\n     */\n    public boolean getPublicReadAccess() {\n        return getReadAccess(ACL_PUBLIC);\n    }\n\n    /**\n     * Get whether the public is allowed to write.\n     * @return can write or not\n     */\n    public boolean getPublicWriteAccess() {\n        return getWriteAccess(ACL_PUBLIC);\n    }\n\n    /**\n     * Set whether the public is allowed to read.\n     * @param allowed can read or not\n     */\n    public void setPublicReadAccess(boolean allowed) {\n        setReadAccess(ACL_PUBLIC, allowed);\n    }\n\n    /**\n     * Set whether the public is allowed to write.\n     * @param allowed can write or not\n     */\n    public void setPublicWriteAccess(boolean allowed) {\n        setWriteAccess(ACL_PUBLIC, allowed);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"NIFTYCloud-mbaas/ncmb_android","sample_ref":"refs/heads/master","sample_path":"ncmb-core/src/main/java/com/nifty/cloud/mb/core/NCMBAcl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ac1c3739046788123e7e84103f300f2387d7b5f8","size":"51544","content":"package com.constellio.app.ui.pages.management.schemas.type;\n\nimport static com.constellio.app.ui.i18n.i18n.$;\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.constellio.app.modules.rm.RMTestRecords;\nimport com.constellio.app.modules.rm.services.RMSchemasRecordsServices;\nimport com.constellio.app.modules.rm.wrappers.AdministrativeUnit;\nimport com.constellio.app.ui.application.NavigatorConfigurationService;\nimport com.constellio.app.ui.tools.CheckboxWebElement;\nimport com.constellio.app.ui.tools.LookupWebElement;\nimport com.constellio.app.ui.tools.components.basic.DateFieldWebElement;\nimport com.constellio.app.ui.tools.components.basic.DateTimeFieldWebElement;\nimport com.constellio.app.ui.tools.components.basic.TextFieldWebElement;\nimport com.constellio.app.ui.tools.components.listAddRemove.ListAddRemoveTextFieldWebElement;\nimport com.constellio.model.entities.Language;\nimport com.constellio.model.entities.records.Record;\nimport com.constellio.model.entities.schemas.Metadata;\nimport com.constellio.model.entities.schemas.MetadataValueType;\nimport com.constellio.model.entities.schemas.entries.DataEntryType;\nimport com.constellio.model.services.schemas.MetadataSchemasManager;\nimport com.constellio.sdk.tests.ConstellioTest;\nimport com.constellio.sdk.tests.annotations.InDevelopmentTest;\nimport com.constellio.sdk.tests.annotations.UiTest;\nimport com.constellio.sdk.tests.selenium.adapters.constellio.ConstellioWebDriver;\nimport com.constellio.sdk.tests.selenium.conditions.ConditionWithTimeout;\n\n@UiTest\n@InDevelopmentTest\npublic class SchemaPageAcceptTest extends ConstellioTest {\n\n\t/*-------------------------------------------------------------\n\t\tThis test does not work with PhantomJS, so it is tagged as\n\t    InDevelopment so the CI server ignores it. The test is\n\t    functional when running it on Firefox.\n\t                                                   - Patrick\n\t--------------------------------------------------------------- */\n\n\tConstellioWebDriver driver;\n\tRMSchemasRecordsServices schemas;\n\tRMTestRecords errors = new RMTestRecords(zeCollection);\n\tMetadataSchemasManager metadataSchemasManager;\n\n\tDisplaySchemaPage displaySchemaPage;\n\tAddEditSchemaPage addEditSchemaPage;\n\tAddEditSchemaMetadataPage addEditSchemaMetadataPage;\n\tFormDisplaySearchPage formDisplaySearchPage;\n\n\t@Before\n\tpublic void setUp()\n\t\t\tthrows Exception {\n\n\t\tprepareSystem(\n\t\t\t\twithZeCollection().withConstellioRMModule().withAllTestUsers()\n\t\t);\n\n\t\tschemas = new RMSchemasRecordsServices(zeCollection, getAppLayerFactory());\n\t\tmetadataSchemasManager = getModelLayerFactory().getMetadataSchemasManager();\n\n\t\tgivenCollection(\"otherCollection\");\n\n\t\terrors.setup(getAppLayerFactory()).withFoldersAndContainersOfEveryStatus();\n\n\t\tdriver = newWebDriver(loggedAsUserInCollection(\"admin\", zeCollection));\n\n\t\tdisplaySchemaPage = new DisplaySchemaPage(driver);\n\t\taddEditSchemaPage = new AddEditSchemaPage(driver);\n\t\taddEditSchemaMetadataPage = new AddEditSchemaMetadataPage(driver);\n\t\tformDisplaySearchPage = new FormDisplaySearchPage(driver);\n\t}\n\n\t@Test\n\tpublic void allTests()\n\t\t\tthrows Exception {\n\n\t\tgivenAddSchemaPageWhenCancelButtonClickedThenNavigateToDisplaySchema();\n\t\tgivenAddSchemaPageWhenSaveButtonClickedThenSaveAndNavigateToDisplaySchemaWithNewSchemaInList();\n\n\t\tgivenEditSchemaPageWhenCancelButtonClickedThenNavigateToDisplaySchema();\n\t\tgivenEditSchemaPageWhenSaveButtonClickedThenUpdateAndNavigateToDisplaySchema();\n\n\t\tgivenAddSchemaMetadataPageWhenChangeTypeThenVerifyEnableOptions();\n\t\tgivenEditSchemaMetadataPageThenSomeFieldsAreDisable();\n\n\t\tgivenAddFolderSchemaMetadataPageWhenAddBooleanMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddMultivalueTextMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddTextMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddRichTextBoxMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddContentMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddBorrowContentMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddDateMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddDateHourMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddReferenceLookupMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddReferenceDropDownMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddReferenceRadioMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddStringMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddStringUrlMetadataThenOk();\n\t\tgivenAddFolderSchemaMetadataPageWhenAddNumeroMetadataThenOk();\n\n\t\t//TODO Vincent - Les tests suivants ne passent pas sur phantonjs\n\t\t//\t\tgivenFormDisplayFormPageWhenMoveElementsToOtherColumnThenOk();\n\t\t//\t\tgivenFormDisplayFormPageWhenMoveAndElementsToOtherColumnAndCancelThenOk();\n\t\t//\t\tgivenFormDisplayFormPageWhenMoveAndElementsToOtherColumnAndSaveThenOk();\n\t\t//\n\t\t//\t\tgivenDisplayFormPageWhenMoveElementsToOtherColumnThenOk();\n\t\t//\t\tgivenDisplayFormPageWhenMoveAndElementsToOtherColumnAndCancelThenOk();\n\t\t//\t\tgivenDisplayFormPageWhenMoveAndElementsToOtherColumnAndSaveThenOk();\n\t\t//\n\t\t//\t\tgivenSearchDisplayFormPageWhenMoveElementsToOtherColumnThenOk();\n\t\t//\t\tgivenSearchDisplayFormPageWhenMoveAndElementsToOtherColumnAndCancelThenOk();\n\t\t//\t\tgivenSearchDisplayFormPageWhenMoveAndElementsToOtherColumnAndSaveThenOk();\n\t\t//-----\n\t}\n\n\tprivate void givenAddSchemaPageWhenCancelButtonClickedThenNavigateToDisplaySchema()\n\t\t\tthrows Exception {\n\t\tnavigateToAddSchemaPage();\n\n\t\taddEditSchemaPage.getCodeElement().setValue(\"schema1\");\n\t\taddEditSchemaPage.getTitleElement().setValue(\"The schema 1\");\n\t\taddEditSchemaPage.getCancelButton().click();\n\t\taddEditSchemaPage.waitForPageReload();\n\n\t\tassertThat(displaySchemaPage.getTableRows()).hasSize(1);\n\t\tassertThat(displaySchemaPage.getTableRows().get(0).getText()).doesNotContain(\"The schema 1\");\n\t}\n\n\tprivate void givenAddSchemaPageWhenSaveButtonClickedThenSaveAndNavigateToDisplaySchemaWithNewSchemaInList() {\n\t\tnavigateToAddSchemaPage();\n\n\t\taddEditSchemaPage.getCodeElement().setValue(\"schema1\");\n\t\taddEditSchemaPage.getTitleElement().setValue(\"The schema 1\");\n\t\taddEditSchemaPage.getSaveButton().click();\n\t\taddEditSchemaPage.waitForPageReload();\n\n\t\tassertThat(displaySchemaPage.getTableRows()).hasSize(2);\n\t\tassertThat(displaySchemaPage.getTableRows().get(0).getText()).contains(\"The schema 1\");\n\t}\n\n\tprivate void givenEditSchemaPageWhenCancelButtonClickedThenNavigateToDisplaySchema() {\n\t\tnavigateToEditSchemaPage();\n\n\t\taddEditSchemaPage.getTitleElement().setValue(\"The schema 1 with modified title\");\n\t\taddEditSchemaPage.getCancelButton().click();\n\t\taddEditSchemaPage.waitForPageReload();\n\n\t\tassertThat(displaySchemaPage.getTableRows()).hasSize(2);\n\t\tassertThat(displaySchemaPage.getTableRows().get(0).getText()).doesNotContain(\"The schema 1 with modified title\");\n\t}\n\n\tprivate void givenEditSchemaPageWhenSaveButtonClickedThenUpdateAndNavigateToDisplaySchema() {\n\t\tnavigateToEditSchemaPage();\n\n\t\taddEditSchemaPage.getTitleElement().setValue(\"The schema 1 with modified title\");\n\t\taddEditSchemaPage.getSaveButton().click();\n\t\taddEditSchemaPage.waitForPageReload();\n\n\t\tassertThat(displaySchemaPage.getTableRows()).hasSize(2);\n\t\tassertThat(displaySchemaPage.getTableRows().get(0).getText()).contains(\"The schema 1 with modified title\");\n\t}\n\n\tprivate void givenAddSchemaMetadataPageWhenChangeTypeThenVerifyEnableOptions()\n\t\t\tthrows Exception {\n\t\tnavigateToAddMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"MetadataValueType.boolean\"));\n\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.text\"));\n\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEntryElement().getListValues())\n\t\t\t\t.containsOnly($(\"MetadataInputType.textarea\"), $(\"MetadataInputType.richtxt\"));\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.content\"));\n\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEntryElement().getListValues())\n\t\t\t\t.containsOnly($(\"MetadataInputType.textarea\"), $(\"MetadataInputType.richtxt\"));\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.date\"));\n\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.datetime\"));\n\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.reference\"));\n\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isChecked())\n\t\t\t\t.isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getEntryElement().getListValues())\n\t\t\t\t.containsOnly($(\"MetadataInputType.lookup\"), $(\"MetadataInputType.dropdown\"), $(\"MetadataInputType.radio\"));\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.reference\"));\n\t\taddEditSchemaMetadataPage.getMultivalueElement().toggle();\n\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isChecked())\n\t\t\t\t.isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEntryElement().getListValues())\n\t\t\t\t.containsOnly($(\"MetadataInputType.lookup\"), $(\"MetadataInputType.dropdown\"), $(\"MetadataInputType.checkboxe\"));\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.string\"));\n\n\t\t//\t\tassertThat(addEditSchemaMetadataPage.getEntryElement().getListValues())\n\t\t//\t\t\t\t.containsOnly($(\"MetadataInputType.field\"), $(\"MetadataInputType.url\")); // TODO need a fix\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\t// TODO Investigate why searchable and sortable fields are disabled\n\t\t//\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isTrue();\n\t\t//\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.number\"));\n\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAutocompleteElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getHighlightElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getFacetElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getAdvancedSearchElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSortableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getSearchableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isEnabled()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getEnableElement().isChecked()).isTrue();\n\t\tassertThat(addEditSchemaMetadataPage.getRequiredElement().isEnabled()).isTrue();\n\t}\n\n\tprivate void givenEditSchemaMetadataPageThenSomeFieldsAreDisable()\n\t\t\tthrows Exception {\n\t\tnavigateToEditFolderMetadataPage();\n\n\t\tassertThat(addEditSchemaMetadataPage.getCodeElement().isEnabled()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getValueTypeElement().isEnable()).isFalse();\n\t\tassertThat(addEditSchemaMetadataPage.getMultivalueElement().isEnabled()).isFalse();\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddBooleanMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"booleanMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze boolean Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"MetadataValueType.boolean\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getHighlightElement().toggle();\n\t\tnew CheckboxWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).toggle();\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRbooleanMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze boolean Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRbooleanMetadata_s\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.BOOLEAN);\n\t\tassertThat(metadata.isDefaultRequirement()).isFalse();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isFalse();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t\tassertThat(metadata.isUndeletable()).isFalse();\n\t\tassertThat(metadata.isUniqueValue()).isFalse();\n\t\tassertThat(metadata.isUnmodifiable()).isFalse();\n\t\tassertThat(metadata.inheritDefaultSchema()).isFalse();\n\t\tassertThat(metadata.getDefaultValue()).isEqualTo(true);\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddMultivalueTextMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"multipleTextMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze multiple text Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.text\"));\n\t\taddEditSchemaMetadataPage.getMultivalueElement().toggle();\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataInputType.textarea\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getHighlightElement().toggle();\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRmultipleTextMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze multiple text Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRmultipleTextMetadata_txt\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.TEXT);\n\t\tassertThat(metadata.isDefaultRequirement()).isFalse();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isTrue();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t\tassertThat(metadata.isUndeletable()).isFalse();\n\t\tassertThat(metadata.isUniqueValue()).isFalse();\n\t\tassertThat(metadata.isUnmodifiable()).isFalse();\n\t\tassertThat(metadata.inheritDefaultSchema()).isFalse();\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddTextMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"textMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze text Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.text\"));\n\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataInputType.textarea\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\taddEditSchemaMetadataPage.getSearchableElement().toggle();\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRtextMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze text Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRtextMetadata_t\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.TEXT);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isFalse();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isTrue();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddRichTextBoxMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"richTextMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze rich text box Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.text\"));\n\t\taddEditSchemaMetadataPage.getMultivalueElement().toggle();\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataInputType.richtxt\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\taddEditSchemaMetadataPage.getSearchableElement().toggle();\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRrichTextMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze rich text box Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRrichTextMetadata_txt\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.TEXT);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isTrue();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isTrue();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddContentMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"contentMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze content Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.content\"));\n\t\taddEditSchemaMetadataPage.getMultivalueElement().toggle();\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataValueType.content\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\taddEditSchemaMetadataPage.getSearchableElement().toggle();\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRcontentMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze content Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRcontentMetadata_ss\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.CONTENT);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isTrue();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isTrue();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddBorrowContentMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"borrowContentMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze content to borrow Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.content\"));\n\t\taddEditSchemaMetadataPage.getMultivalueElement().toggle();\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataInputType.contentcheck\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\taddEditSchemaMetadataPage.getSearchableElement().toggle();\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRborrowContentMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze content to borrow Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRborrowContentMetadata_ss\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.CONTENT);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isTrue();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isTrue();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddDateMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"dateMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze date Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.date\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\tnew DateFieldWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).setValue(dateTime(4, 10, 2014).toLocalDate());\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRdateMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze date Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRdateMetadata_da\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.DATE);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isFalse();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t\tassertThat(metadata.getDefaultValue()).isEqualTo(dateTime(4, 10, 2014).toLocalDate());\n\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddDateHourMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"dateHourMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze date hour Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.datetime\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\tnew DateTimeFieldWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).setValue(dateTime(4, 10, 2014));\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRdateHourMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze date hour Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRdateHourMetadata_dt\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.DATE_TIME);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isFalse();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t\tassertThat(metadata.getDefaultValue()).isEqualTo(dateTime(4, 10, 2014));\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddReferenceLookupMetadataThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"referenceMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze reference Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst(\n\t\t\t\t$(\"AddEditMetadataView.type.reference\"));\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataInputType.lookup\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getReferenceElement().typeAndSelectFirst(\"Unit\u00e9 administrative\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\taddEditSchemaMetadataPage.getAutocompleteElement().toggle();\n\t\tnew LookupWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).listTypeAndSelectFirst(\"un\");\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRreferenceMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze reference Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences().getAllowedSchemaType()).isEqualTo(\"administrativeUnit\");\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRreferenceMetadataId_s\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.REFERENCE);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isFalse();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isTrue();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isTrue();\n\t\tassertThat(metadata.isChildOfRelationship()).isFalse();\n\t\tRecord record = record((String) metadata.getDefaultValue());\n\t\tassertThat(record.getSchemaCode()).isEqualTo(AdministrativeUnit.DEFAULT_SCHEMA);\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddReferenceDropDownMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"referenceDropDownMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze reference DropDown Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.reference\"));\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataInputType.dropdown\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getReferenceElement().listTypeAndSelectFirst(\"Unit\u00e9 administrative\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\tnew LookupWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).typeAndSelectFirst(\"un\");\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRreferenceDropDownMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze reference DropDown Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences().getAllowedSchemaType()).isEqualTo(\"administrativeUnit\");\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRreferenceDropDownMetadataId_s\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.REFERENCE);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isFalse();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isTrue();\n\t\tassertThat(metadata.isChildOfRelationship()).isFalse();\n\t\tRecord record = record((String) metadata.getDefaultValue());\n\t\tassertThat(record.getSchemaCode()).isEqualTo(AdministrativeUnit.DEFAULT_SCHEMA);\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddReferenceRadioMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"referenceRadioMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze reference Radio Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.reference\"));\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataInputType.radio\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getReferenceElement().listTypeAndSelectFirst(\"Unit\u00e9 administrative\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\taddEditSchemaMetadataPage.getFacetElement().toggle();\n\t\tnew LookupWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).typeAndSelectFirst(\"un\");\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRreferenceRadioMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze reference Radio Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences().getAllowedSchemaType()).isEqualTo(\"administrativeUnit\");\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRreferenceRadioMetadataId_s\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.REFERENCE);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isFalse();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isTrue();\n\t\tassertThat(metadata.isChildOfRelationship()).isFalse();\n\t\tRecord record = record((String) metadata.getDefaultValue());\n\t\tassertThat(record.getSchemaCode()).isEqualTo(AdministrativeUnit.DEFAULT_SCHEMA);\n\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddStringMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"stringMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze string Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst($(\"AddEditMetadataView.type.string\"));\n\t\taddEditSchemaMetadataPage.getMultivalueElement().toggle();\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst($(\"MetadataInputType.field\"));\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\tnew ListAddRemoveTextFieldWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).add(\"Default value1\");\n\t\tnew ListAddRemoveTextFieldWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).add(\"Default value2\");\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRstringMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze string Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRstringMetadata_ss\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.STRING);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isTrue();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t\tassertThat(metadata.isChildOfRelationship()).isFalse();\n\t\tassertThat((List) metadata.getDefaultValue()).containsOnly(\"Default value1\", \"Default value2\");\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddStringUrlMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"stringURLMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze string URL Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst(\"Cha\u00eene de caract\u00e8res\");\n\t\taddEditSchemaMetadataPage.getMultivalueElement().toggle();\n\t\taddEditSchemaMetadataPage.getEntryElement().typeAndSelectFirst(\"URL\");\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\tnew ListAddRemoveTextFieldWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).add(\"Default value1\");\n\t\tnew ListAddRemoveTextFieldWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).add(\"Default value2\");\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRstringURLMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze string URL Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRstringURLMetadata_ss\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.STRING);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isTrue();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t\tassertThat(metadata.isChildOfRelationship()).isFalse();\n\t\tassertThat((List) metadata.getDefaultValue()).containsOnly(\"Default value1\", \"Default value2\");\n\t}\n\n\tprivate void givenAddFolderSchemaMetadataPageWhenAddNumeroMetadataThenOk() {\n\t\tnavigateToAddFolderMetadataPage();\n\n\t\taddEditSchemaMetadataPage.getCodeElement().setValue(\"numeroMetadata\");\n\t\taddEditSchemaMetadataPage.getTitleElement().setValue(\"Ze num\u00e9ro Metadata\");\n\t\taddEditSchemaMetadataPage.getValueTypeElement().typeAndSelectFirst(\"Num\u00e9ro\");\n\t\taddEditSchemaMetadataPage.getMetadataGroupElement().toggle(\"Default\");\n\t\taddEditSchemaMetadataPage.getRequiredElement().toggle();\n\t\tnew TextFieldWebElement(addEditSchemaMetadataPage.getDefaultValueElement()).setValue(\"3\");\n\t\taddEditSchemaMetadataPage.getSaveButton().click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\n\t\tMetadata metadata = metadataSchemasManager.getSchemaTypes(zeCollection)\n\t\t\t\t.getMetadata(\"folder_default_USRnumeroMetadata\");\n\t\tassertThat(metadata.getLabel(Language.French)).isEqualTo(\"Ze num\u00e9ro Metadata\");\n\t\tassertThat(metadata.getDataEntry().getType()).isEqualTo(DataEntryType.MANUAL);\n\t\tassertThat(metadata.getAllowedReferences()).isNull();\n\t\tassertThat(metadata.getDataStoreCode()).isEqualTo(\"USRnumeroMetadata_d\");\n\t\tassertThat(metadata.getType()).isEqualTo(MetadataValueType.NUMBER);\n\t\tassertThat(metadata.isDefaultRequirement()).isTrue();\n\t\tassertThat(metadata.isEnabled()).isTrue();\n\t\tassertThat(metadata.isSystemReserved()).isFalse();\n\t\tassertThat(metadata.isMultivalue()).isFalse();\n\t\tassertThat(metadata.isSchemaAutocomplete()).isFalse();\n\t\tassertThat(metadata.isSearchable()).isFalse();\n\t\tassertThat(metadata.isSortable()).isFalse();\n\t\tassertThat(metadata.isTaxonomyRelationship()).isFalse();\n\t\tassertThat(metadata.isChildOfRelationship()).isFalse();\n\t\tassertThat(metadata.getDefaultValue()).isEqualTo(3.0);\n\t}\n\n\tprivate void givenFormDisplayFormPageWhenMoveElementsToOtherColumnThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.FORM_DISPLAY_FORM);\n\n\t\tassertThatMoveElementsIsOk();\n\t}\n\n\tprivate void givenFormDisplayFormPageWhenMoveAndElementsToOtherColumnAndCancelThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.FORM_DISPLAY_FORM);\n\n\t\tassertThatWhenCancelButtonClickedIsOk();\n\t}\n\n\tprivate void givenFormDisplayFormPageWhenMoveAndElementsToOtherColumnAndSaveThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.FORM_DISPLAY_FORM);\n\n\t\tassertThatWhenSaveThenOkInPage(NavigatorConfigurationService.FORM_DISPLAY_FORM);\n\t}\n\n\tprivate void givenDisplayFormPageWhenMoveElementsToOtherColumnThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.EDIT_DISPLAY_FORM);\n\n\t\tassertThatMoveElementsIsOk();\n\t}\n\n\tprivate void givenDisplayFormPageWhenMoveAndElementsToOtherColumnAndCancelThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.EDIT_DISPLAY_FORM);\n\n\t\tassertThatWhenCancelButtonClickedIsOk();\n\t}\n\n\tprivate void givenDisplayFormPageWhenMoveAndElementsToOtherColumnAndSaveThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.EDIT_DISPLAY_FORM);\n\n\t\tassertThatWhenSaveThenOkInPage(NavigatorConfigurationService.EDIT_DISPLAY_FORM);\n\t}\n\n\tprivate void givenSearchDisplayFormPageWhenMoveElementsToOtherColumnThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.SEARCH_DISPLAY_FORM);\n\n\t\tassertThatMoveElementsIsOk();\n\t}\n\n\tprivate void givenSearchDisplayFormPageWhenMoveAndElementsToOtherColumnAndCancelThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.SEARCH_DISPLAY_FORM);\n\n\t\tassertThatWhenCancelButtonClickedIsOk();\n\t}\n\n\tprivate void givenSearchDisplayFormPageWhenMoveAndElementsToOtherColumnAndSaveThenOk()\n\t\t\tthrows Exception {\n\t\tnavigateToPage(NavigatorConfigurationService.SEARCH_DISPLAY_FORM);\n\n\t\tassertThatWhenSaveThenOkInPage(NavigatorConfigurationService.SEARCH_DISPLAY_FORM);\n\t}\n\n\t//----------Utils-------------\n\tprivate void assertThatWhenSaveThenOkInPage(String page) {\n\t\tString text1 = formDisplaySearchPage.getOptionsElement().getOptions().get(0).getText();\n\t\tformDisplaySearchPage.getOptionsElement().selectByIndex(0);\n\t\tformDisplaySearchPage.getAddButtonElement().click();\n\t\tformDisplaySearchPage.getSaveButton().click();\n\n\t\tnavigateToPage(page);\n\n\t\tint lastIndex = formDisplaySearchPage.getSelectionsElement().getOptions().size() - 1;\n\t\tassertThat(formDisplaySearchPage.getSelectionsElement().getOptions().get(lastIndex).getText())\n\t\t\t\t.isEqualTo(text1);\n\t}\n\n\tprivate void assertThatWhenCancelButtonClickedIsOk() {\n\t\tformDisplaySearchPage.getOptionsElement().selectByIndex(0);\n\t\tformDisplaySearchPage.getAddButtonElement().click();\n\n\t\tformDisplaySearchPage.getCancelButton().click();\n\n\t\t//TODO fix cancel back page\n\t\t//\t\tassertThat(driver.getCurrentPage()).isEqualTo(\n\t\t//\t\t\t\tNavigatorConfigurationService.FORM_DISPLAY_FORM + \"/schemaTypeCode%253Dfolder%253BschemaCode%253Dfolder_default\");\n\t}\n\n\tprivate void assertThatMoveElementsIsOk() {\n\t\tString text1 = formDisplaySearchPage.getOptionsElement().getOptions().get(0).getText();\n\t\tString text2 = formDisplaySearchPage.getOptionsElement().getOptions().get(2).getText();\n\t\tformDisplaySearchPage.getOptionsElement().selectByIndex(0);\n\t\tformDisplaySearchPage.getOptionsElement().selectByIndex(2);\n\t\tdriver.waitForCondition(new ConditionWithTimeout() {\n\t\t\t@Override\n\t\t\tprotected boolean evaluate() {\n\t\t\t\tSystem.out.println(formDisplaySearchPage.getAddButtonElement().isEnabled());\n\t\t\t\treturn formDisplaySearchPage.getAddButtonElement().isEnabled();\n\t\t\t}\n\t\t}, 2000);\n\t\tformDisplaySearchPage.getAddButtonElement().click();\n\n\t\tint lastIndex = formDisplaySearchPage.getSelectionsElement().getOptions().size() - 1;\n\t\tSystem.out.println(formDisplaySearchPage.getOptionsElement().getOptions().size());\n\t\tSystem.out.println(formDisplaySearchPage.getSelectionsElement().getOptions().size());\n\t\tassertThat(formDisplaySearchPage.getSelectionsElement().getOptions().get(lastIndex - 1).getText())\n\t\t\t\t.isEqualTo(text1);\n\t\tassertThat(formDisplaySearchPage.getSelectionsElement().getOptions().get(lastIndex).getText())\n\t\t\t\t.isEqualTo(text2);\n\n\t\tformDisplaySearchPage.getSelectionsElement().selectByIndex(lastIndex - 1);\n\t\tformDisplaySearchPage.getSelectionsElement().selectByIndex(lastIndex);\n\t\tformDisplaySearchPage.getUpButtonElement().click();\n\t\tformDisplaySearchPage.getDownButtonElement().click();\n\t\tformDisplaySearchPage.getUpButtonElement().click();\n\n\t\tassertThat(formDisplaySearchPage.getSelectionsElement().getOptions().get(lastIndex - 2).getText())\n\t\t\t\t.isEqualTo(text1);\n\t\tassertThat(formDisplaySearchPage.getSelectionsElement().getOptions().get(lastIndex - 1).getText())\n\t\t\t\t.isEqualTo(text2);\n\n\t\tformDisplaySearchPage.getSelectionsElement().selectByIndex(lastIndex - 1);\n\t\tformDisplaySearchPage.getSelectionsElement().selectByIndex(lastIndex - 2);\n\t\tformDisplaySearchPage.getRemoveButtonElement().click();\n\n\t\tassertThat(formDisplaySearchPage.getOptionsElement().getOptions().get(0).getText())\n\t\t\t\t.isEqualTo(text1);\n\t\tassertThat(formDisplaySearchPage.getOptionsElement().getOptions().get(2).getText())\n\t\t\t\t.isEqualTo(text2);\n\t}\n\n\tprivate void navigateToAddSchemaPage() {\n\t\tdisplaySchemaPage.navigateToDisplaySchemaFolderPage();\n\t\tdisplaySchemaPage.getAddButton().click();\n\t\tdisplaySchemaPage.waitForPageReload();\n\t}\n\n\tprivate void navigateToEditSchemaPage() {\n\t\tdisplaySchemaPage.navigateToDisplaySchemaFolderPage();\n\t\tdisplaySchemaPage.getEditButtonOnIndex(0).click();\n\t\tdisplaySchemaPage.waitForPageReload();\n\t}\n\n\tprivate void navigateToAddMetadataPage() {\n\t\tnavigateToEditFolderSchemaMetadataPage(1);\n\t\tclickAddMetadataButton();\n\t}\n\n\tprivate void navigateToEditFolderMetadataPage() {\n\t\tnavigateToEditFolderSchemaMetadataPage(6);\n\t\taddEditSchemaMetadataPage.getEditButtonOnIndex(0).click();\n\t\taddEditSchemaMetadataPage.waitForPageReload();\n\t}\n\n\tprivate void navigateToAddFolderMetadataPage() {\n\t\tnavigateToEditFolderSchemaMetadataPage(6);\n\t\tclickAddMetadataButton();\n\t}\n\n\tprivate void navigateToPage(String page) {\n\t\tif (page.equals(NavigatorConfigurationService.FORM_DISPLAY_FORM)) {\n\t\t\tnavigateToEditFolderSchemaMetadataPage(7);\n\t\t} else if (page.equals(NavigatorConfigurationService.EDIT_DISPLAY_FORM)) {\n\t\t\tnavigateToEditFolderSchemaMetadataPage(8);\n\t\t} else if (page.equals(NavigatorConfigurationService.SEARCH_DISPLAY_FORM)) {\n\t\t\tnavigateToEditFolderSchemaMetadataPage(9);\n\t\t} else {\n\t\t\tthrow new UnsupportedOperationException(\"Invalid page\");\n\t\t}\n\t}\n\n\tprivate void clickAddMetadataButton() {\n\t\taddEditSchemaMetadataPage.getAddButton().clickAndWaitForPageReload();\n\t\t//\t\taddEditSchemaMetadataPage.waitForPageReload();\n\t}\n\n\tprivate void navigateToEditFolderSchemaMetadataPage(int index) {\n\t\tdisplaySchemaPage.navigateToDisplaySchemaFolderPage();\n\t\tdisplaySchemaPage.getEditButtonOnIndex(index).clickAndWaitForPageReload();\n\t\t//\t\tdisplaySchemaPage.waitForPageReload();\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"doculibre/constellio","sample_ref":"refs/heads/master","sample_path":"sdk/src/com/constellio/app/ui/pages/management/schemas/type/SchemaPageAcceptTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a9c13bb73ae324c25841cff59a58d93c7bb2acb8","size":"3478","content":"/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2014-2016 abel533@gmail.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\npackage tk.mybatis.spring.mapper;\n\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.GenericBeanDefinition;\nimport tk.mybatis.mapper.common.Marker;\nimport tk.mybatis.mapper.mapperhelper.MapperHelper;\nimport tk.mybatis.mapper.util.StringUtil;\n\nimport java.util.Properties;\n\n\npublic class MapperScannerConfigurer extends org.mybatis.spring.mapper.MapperScannerConfigurer {\n    private MapperHelper mapperHelper = new MapperHelper();\n\n    public void setMarkerInterface(Class<?> superClass) {\n        super.setMarkerInterface(superClass);\n        if (Marker.class.isAssignableFrom(superClass)) {\n            mapperHelper.registerMapper(superClass);\n        }\n    }\n\n    public MapperHelper getMapperHelper() {\n        return mapperHelper;\n    }\n\n    public void setMapperHelper(MapperHelper mapperHelper) {\n        this.mapperHelper = mapperHelper;\n    }\n\n    /**\n     * \u5c5e\u6027\u6ce8\u5165\n     *\n     * @param properties\n     */\n    public void setProperties(Properties properties) {\n        mapperHelper.setProperties(properties);\n    }\n\n    /**\n     * \u6ce8\u518c\u5b8c\u6210\u540e\uff0c\u5bf9MapperFactoryBean\u7684\u7c7b\u8fdb\u884c\u7279\u6b8a\u5904\u7406\n     *\n     * @param registry\n     */\n    @Override\n    public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) {\n        super.postProcessBeanDefinitionRegistry(registry);\n        //\u5982\u679c\u6ca1\u6709\u6ce8\u518c\u8fc7\u63a5\u53e3\uff0c\u5c31\u6ce8\u518c\u9ed8\u8ba4\u7684Mapper\u63a5\u53e3\n        this.mapperHelper.ifEmptyRegisterDefaultInterface();\n        String[] names = registry.getBeanDefinitionNames();\n        GenericBeanDefinition definition;\n        for (String name : names) {\n            BeanDefinition beanDefinition = registry.getBeanDefinition(name);\n            if (beanDefinition instanceof GenericBeanDefinition) {\n                definition = (GenericBeanDefinition) beanDefinition;\n                if (StringUtil.isNotEmpty(definition.getBeanClassName())\n                        && definition.getBeanClassName().equals(\"org.mybatis.spring.mapper.MapperFactoryBean\")) {\n                    definition.setBeanClass(MapperFactoryBean.class);\n                    definition.getPropertyValues().add(\"mapperHelper\", this.mapperHelper);\n                }\n            }\n        }\n    }\n}","binary":"false","copies":"1","sample_repo_name":"abel533/Mapper","sample_ref":"refs/heads/master","sample_path":"src/main/java/tk/mybatis/spring/mapper/MapperScannerConfigurer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"573133ec00050f06c9c22e6d95de869ac2854ed5","size":"2023","content":"package stone;\nimport static stone.Parser.rule;\nimport java.util.HashSet;\nimport stone.Parser.Operators;\nimport stone.ast.*;\n\npublic class BasicParser {\n    HashSet<String> reserved = new HashSet<String>();\n    Operators operators = new Operators();\n    Parser expr0 = rule();\n    Parser primary = rule(PrimaryExpr.class)\n        .or(rule().sep(\"(\").ast(expr0).sep(\")\"),\n            rule().number(NumberLiteral.class),\n            rule().identifier(Name.class, reserved),\n            rule().string(StringLiteral.class));\n    Parser factor = rule().or(rule(NegativeExpr.class).sep(\"-\").ast(primary),\n                              primary);                               \n    Parser expr = expr0.expression(BinaryExpr.class, factor, operators);\n\n    Parser statement0 = rule();\n    Parser block = rule(BlockStmnt.class)\n        .sep(\"{\").option(statement0)\n        .repeat(rule().sep(\";\", Token.EOL).option(statement0))\n        .sep(\"}\");\n    Parser simple = rule(PrimaryExpr.class).ast(expr);\n    Parser statement = statement0.or(\n            rule(IfStmnt.class).sep(\"if\").ast(expr).ast(block)\n                               .option(rule().sep(\"else\").ast(block)),\n            rule(WhileStmnt.class).sep(\"while\").ast(expr).ast(block),\n            simple);\n\n    Parser program = rule().or(statement, rule(NullStmnt.class))\n                           .sep(\";\", Token.EOL);\n\n    public BasicParser() {\n        reserved.add(\";\");\n        reserved.add(\"}\");\n        reserved.add(Token.EOL);\n\n        operators.add(\"=\", 1, Operators.RIGHT);\n        operators.add(\"==\", 2, Operators.LEFT);\n        operators.add(\">\", 2, Operators.LEFT);\n        operators.add(\"<\", 2, Operators.LEFT);\n        operators.add(\"+\", 3, Operators.LEFT);\n        operators.add(\"-\", 3, Operators.LEFT);\n        operators.add(\"*\", 4, Operators.LEFT);\n        operators.add(\"/\", 4, Operators.LEFT);\n        operators.add(\"%\", 4, Operators.LEFT);\n    }\n    public ASTree parse(Lexer lexer) throws ParseException {\n        return program.parse(lexer);\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"chibash/stone","sample_ref":"refs/heads/master","sample_path":"src/stone/BasicParser.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6b2df6d907ab9372aa58b93150eb4f2978ee59ef","size":"5653","content":"package com.easemob.easeui.widget;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.text.TextUtils;\nimport android.util.AttributeSet;\nimport android.util.Pair;\nimport android.util.TypedValue;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.Filter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.TextView.BufferType;\n\nimport com.easemob.chat.EMChatManager;\nimport com.easemob.chat.EMChatRoom;\nimport com.easemob.chat.EMConversation;\nimport com.easemob.chat.EMConversation.EMConversationType;\nimport com.easemob.chat.EMGroup;\nimport com.easemob.chat.EMGroupManager;\nimport com.easemob.chat.EMMessage;\nimport com.easemob.easeui.R;\nimport com.easemob.easeui.adapter.EaseConversationAdapater;\nimport com.easemob.easeui.domain.EaseUser;\nimport com.easemob.easeui.utils.EaseCommonUtils;\nimport com.easemob.easeui.utils.EaseSmileUtils;\nimport com.easemob.easeui.utils.EaseUserUtils;\nimport com.easemob.util.DateUtils;\n\npublic class EaseConversationList extends ListView {\n    \n    protected int primaryColor;\n    protected int secondaryColor;\n    protected int timeColor;\n    protected int primarySize;\n    protected int secondarySize;\n    protected float timeSize;\n    \n\n    protected final int MSG_REFRESH_ADAPTER_DATA = 0;\n    \n    protected Context context;\n    protected EaseConversationAdapater adapter;\n    protected List<EMConversation> conversationList = new ArrayList<EMConversation>();\n    \n    \n    public EaseConversationList(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init(context, attrs);\n    }\n    \n    public EaseConversationList(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        init(context, attrs);\n    }\n\n    \n    private void init(Context context, AttributeSet attrs) {\n        this.context = context;\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.EaseConversationList);\n        primaryColor = ta.getColor(R.styleable.EaseConversationList_cvsListPrimaryTextColor, R.color.list_itease_primary_color);\n        secondaryColor = ta.getColor(R.styleable.EaseConversationList_cvsListSecondaryTextColor, R.color.list_itease_secondary_color);\n        timeColor = ta.getColor(R.styleable.EaseConversationList_cvsListTimeTextColor, R.color.list_itease_secondary_color);\n        primarySize = ta.getDimensionPixelSize(R.styleable.EaseConversationList_cvsListPrimaryTextSize, 0);\n        secondarySize = ta.getDimensionPixelSize(R.styleable.EaseConversationList_cvsListSecondaryTextSize, 0);\n        timeSize = ta.getDimension(R.styleable.EaseConversationList_cvsListTimeTextSize, 0);\n        \n        ta.recycle();\n        \n    }\n    \n    public void init(List<EMConversation> conversationList){\n        this.init(conversationList, null);\n    }\n    \n    public void init(List<EMConversation> conversationList, EaseConversationListHelper helper){\n    \tthis.conversationList = conversationList;\n    \tif(helper != null){\n    \t\tthis.conversationListHelper = helper;\n    \t}\n        adapter = new EaseConversationAdapater(context, 0, conversationList);\n        adapter.setCvsListHelper(conversationListHelper);\n        adapter.setPrimaryColor(primaryColor);\n        adapter.setPrimarySize(primarySize);\n        adapter.setSecondaryColor(secondaryColor);\n        adapter.setSecondarySize(secondarySize);\n        adapter.setTimeColor(timeColor);\n        adapter.setTimeSize(timeSize);\n        setAdapter(adapter);\n    }\n    \n    Handler handler = new Handler() {\n        @Override\n        public void handleMessage(Message message) {\n            switch (message.what) {\n            case MSG_REFRESH_ADAPTER_DATA:\n                if (adapter != null) {\n                    adapter.notifyDataSetChanged();\n                }\n                break;\n            default:\n                break;\n            }\n        }\n    };\n    \n\n    \n    public EMConversation getItem(int position) {\n        return (EMConversation)adapter.getItem(position);\n    }\n    \n    public void refresh() {\n        handler.sendEmptyMessage(MSG_REFRESH_ADAPTER_DATA);\n    }\n    \n    public void filter(CharSequence str) {\n        adapter.getFilter().filter(str);\n    }\n    \n    \n    /**\n\t * \u8bbe\u7f6eitem\u4e2d\u7684\u5934\u50cf\u5f62\u72b6\n\t * 0\uff1a\u9ed8\u8ba4\uff0c1\uff1a\u5706\u5f62\uff0c2\uff1a\u77e9\u5f62\u5706\u89d2\n\t * @param shape\n\t */\n\tpublic void setAvatarShape(int shape) {\n\t\tadapter.setAvatarShape(shape);\n\t}\n\n\t/**\n\t * \u8bbe\u7f6e\u5934\u50cf\u63a7\u4ef6\u8fb9\u6846\u5bbd\u5ea6\n\t * \n\t * @param width\n\t */\n\tpublic void setAvatarBorderWidth(int width) {\n\t\tadapter.setBorderWidth(width);\n\t}\n\n\t/**\n\t * \u8bbe\u7f6e\u5934\u50cf\u63a7\u4ef6\u8fb9\u6846\u989c\u8272\n\t * \n\t * @param color\n\t */\n\tpublic void setAvatarBorderColor(int color) {\n\t\tadapter.setBorderColor(color);\n\t}\n\n\t/**\n\t * \u8bbe\u7f6e\u5934\u50cf\u63a7\u4ef6\u5706\u89d2\u534a\u5f84\n\t * \n\t * @param radius\n\t */\n\tpublic void setAvatarRadius(int radius) {\n\t\tadapter.setAvatarRadius(radius);\n\t}\n\t\n\tprivate EaseConversationListHelper conversationListHelper;\n\tpublic interface EaseConversationListHelper{\n\t\t/**\n\t\t * \u8bbe\u7f6elistview item\u6b21\u884c\u5185\u5bb9\n\t\t * @param lastMessage\n\t\t * @return\n\t\t */\n\t\tString onSetItemSecondaryText(EMMessage lastMessage);\n\t}\n\tpublic void setConversationListHelper(EaseConversationListHelper helper){\n\t\tconversationListHelper = helper;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"easemob/easeui","sample_ref":"refs/heads/master","sample_path":"src/com/easemob/easeui/widget/EaseConversationList.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"74a6b236dce02370c0b35c546ce32b2b34d3dad1","size":"1982","content":"/*\n *  Copyright 2012 eHarmony, Inc\n *  \n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\npackage com.eharmony.matching.seeking.query.criterion.expression;\n\nimport com.eharmony.matching.seeking.query.criterion.Operator;\n\n/**\n * An equality expression comparing the property against the value with the\n * operator.\n */\npublic class EqualityExpression extends Expression {\n\n    private final Object value;\n\n    public EqualityExpression(Operator operator, String propertyName, Object value) {\n        super(operator, propertyName);\n        this.value = value;\n    }\n\n    public Object getValue() {\n        return value;\n    }\n    \n    @Override\n    public String toString() {\n        return getPropertyName() + \" \" + getOperator() + \" \" + value;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + ((value == null) ? 0 : value.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (!super.equals(obj))\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        EqualityExpression other = (EqualityExpression) obj;\n        if (value == null) {\n            if (other.value != null)\n                return false;\n        } else if (!value.equals(other.value))\n            return false;\n        return true;\n    }\n    \n}\n","binary":"false","copies":"1","sample_repo_name":"eHarmony/seeking","sample_ref":"refs/heads/master","sample_path":"seeking-core/src/main/java/com/eharmony/matching/seeking/query/criterion/expression/EqualityExpression.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d9aab8befa6db6fbcf3da15631f0109fe6228da0","size":"1256","content":"/*\n * Licensed to the Apache Software Foundation (ASF) under one\n *  or more contributor license agreements.  See the NOTICE file\n *  distributed with this work for additional information\n *  regarding copyright ownership.  The ASF licenses this file\n *  to you under the Apache License, Version 2.0 (the\n *  \"License\"); you may not use this file except in compliance\n *  with the License.  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\npackage org.apache.hadoop.fs.contract.cephfs;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.contract.AbstractContractCreateTest;\nimport org.apache.hadoop.fs.contract.AbstractFSContract;\nimport org.junit.Test;\n\npublic class TestLocalFSContractCreate extends AbstractContractCreateTest {\n  @Override\n  protected AbstractFSContract createContract(Configuration conf) {\n\t  return new CephFSContract(conf);\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"ceph/cephfs-hadoop","sample_ref":"refs/heads/master","sample_path":"src/test/java/org/apache/hadoop/fs/contract/cephfs/TestLocalFSContractCreate.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b166212865f38e4eb58e021b07d50d82b8ca6dc2","size":"5477","content":"/*\n * Copyright (c) 2015, 2016 NEC Corporation. All rights reserved.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v1.0 which accompanies this distribution,\n * and is available at http://www.eclipse.org/legal/epl-v10.html\n */\n\npackage org.opendaylight.vtn.manager.internal.vnode;\n\nimport org.opendaylight.vtn.manager.internal.util.ChangedData;\nimport org.opendaylight.vtn.manager.internal.util.IdentifiedData;\nimport org.opendaylight.vtn.manager.internal.util.vnode.VNodeIdentifier;\nimport org.opendaylight.vtn.manager.internal.util.vnode.VNodePathConverter;\n\nimport org.opendaylight.yangtools.yang.binding.DataObject;\nimport org.opendaylight.yangtools.yang.binding.InstanceIdentifier;\n\n/**\n * {@code VNodeChangeListener} describes a data change listener that listens\n * changes against virtual node in the VTN data model tree.\n *\n * @param <T>  The type of the virtual node.\n */\nabstract class VNodeChangeListener<T extends DataObject> {\n    /**\n     * A class which indicates the target data type.\n     */\n    private final Class<T>  targetType;\n\n    /**\n     * Determine whether this data model represents configuration data\n     * or not.\n     */\n    private final boolean  configuration;\n\n    /**\n     * Construct a new instance.\n     *\n     * @param type    A class which indicates the target data type.\n     * @param config  {@code true} means that this data model represents\n     *                configuration data.\n     */\n    VNodeChangeListener(Class<T> type, boolean config) {\n        targetType = type;\n        configuration = config;\n    }\n\n    /**\n     * Convert the given instance identifier into a {@link VNodeIdentifier}\n     * instance.\n     *\n     * @param path  An instance identifier to be converted.\n     * @return  A {@link VNodeIdentifier} instance.\n     */\n    static final VNodeIdentifier<?> getVNodeIdentifier(\n        InstanceIdentifier<?> path) {\n        return new VNodePathConverter(path).getIdentifier().\n            getVNodeIdentifier();\n    }\n\n    /**\n     * Determine whether this data model represents configuration data\n     * or not.\n     *\n     * @return  {@code true} only if this data model represents configuration\n     *          data.\n     */\n    final boolean isConfiguration() {\n        return configuration;\n    }\n\n    /**\n     * Cast the given data.\n     *\n     * @param data  An {@link IdentifiedData} instance which contains the\n     *              created or removed data.\n     * @return  Casted data.\n     */\n    final IdentifiedData<T> cast(IdentifiedData<?> data) {\n        return data.checkType(targetType);\n    }\n\n    /**\n     * Cast the given data.\n     *\n     * @param data  A {@link ChangedData} instance which contains the\n     *              changed data.\n     * @return  Casted data.\n     */\n    final ChangedData<T> cast(ChangedData<?> data) {\n        return data.checkType(targetType);\n    }\n\n    /**\n     * Determine whether the specified virtual node was updated or not.\n     *\n     * <p>\n     *   By default this method always returns {@code false} so that\n     *   {@link #onUpdated(VTenantChange, ChangedData)} is never called.\n     *   Subclass needs to override this method if it takes interest in the\n     *   change of the target virtual node.\n     * </p>\n     *\n     * @param data  A {@link ChangedData} instance that contains values before\n     *              and after modification.\n     * @return  {@code true} if the target data was updated.\n     *          {@code false} otherwise.\n     */\n    boolean isUpdated(ChangedData<?> data) {\n        return false;\n    }\n\n    /**\n     * Determine whether the tatget virtual node should be treated as a\n     * leaf node or not.\n     *\n     * <p>\n     *   If this method returns {@code true}, modifications for children of\n     *   the specified data type are simply ignored.\n     * </p>\n     * <p>\n     *   By default this method always returns {@code true}.\n     *   Subclass may want to override this behavior.\n     * </p>\n     *\n     * @return  {@code true} if the target virtual node should be treated as a\n     *          leaf node. {@code false} otherwise.\n     */\n    boolean isLeafNode() {\n        return true;\n    }\n\n    /**\n     * Invoked when a virtual node has been updated.\n     *\n     * <p>\n     *   By default this method does nothing.\n     *   Subclass needs to override this method if it takes interest in the\n     *   change of the target virtual node.\n     * </p>\n     * <p>\n     *   Note that this method is never called unless\n     *   {@link #isUpdated(ChangedData)} is overridden.\n     * </p>\n     *\n     * @param ectx  A {@link VTenantChange} instance.\n     * @param data  A {@link ChangedData} instance which contains the changed\n     *              data.\n     */\n    void onUpdated(VTenantChange ectx, ChangedData<?> data) {\n    }\n\n    /**\n     * Invoked when a virtual node has been created.\n     *\n     * @param ectx  A {@link VTenantChange} instance.\n     * @param data  An {@link IdentifiedData} instance which contains the\n     *              created data.\n     */\n    abstract void onCreated(VTenantChange ectx, IdentifiedData<?> data);\n\n    /**\n     * Invoked when a virtual node has been removed.\n     *\n     * @param ectx  A {@link VTenantChange} instance.\n     * @param data  An {@link IdentifiedData} instance which contains the\n     *              removed data.\n     */\n    abstract void onRemoved(VTenantChange ectx, IdentifiedData<?> data);\n}\n","binary":"false","copies":"1","sample_repo_name":"opendaylight/vtn","sample_ref":"refs/heads/master","sample_path":"manager/implementation/src/main/java/org/opendaylight/vtn/manager/internal/vnode/VNodeChangeListener.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"55f95c095f66fd04436e974fd59e906f17e45ae9","size":"671","content":"package org.bds.lang.nativeFunctions.math;\n\nimport org.bds.lang.Parameters;\nimport org.bds.lang.Type;\nimport org.bds.lang.nativeFunctions.FunctionNative;\nimport org.bds.run.BdsThread;\n\npublic class FunctionNative_abs_real extends FunctionNative {\n\tpublic FunctionNative_abs_real() {\n\t\tsuper();\n\t}\n\n\t@Override\n\tprotected void initFunction() {\n\t\tfunctionName = \"abs\";\n\t\treturnType = Type.REAL;\n\n\t\tString argNames[] = { \"a\" };\n\t\tType argTypes[] = { Type.REAL };\n\t\tparameters = Parameters.get(argTypes, argNames);\n\t\taddNativeFunctionToScope();\n\t}\n\n\t@Override\n\tprotected Object runFunctionNative(BdsThread bdsThread) {\n\t\treturn (Double) Math.abs(bdsThread.getReal(\"a\"));\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"pcingola/BigDataScript","sample_ref":"refs/heads/master","sample_path":"src/org/bds/lang/nativeFunctions/math/FunctionNative_abs_real.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"dd920579cc60c4972da681048fd66c98cdf9642b","size":"1608","content":"package com.github.tobato.fastdfs.domain;\n\nimport org.apache.commons.lang3.Validate;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport com.github.tobato.fastdfs.FdfsClientConstants;\n\n/**\n * \u7f29\u7565\u56fe\u914d\u7f6e\u53c2\u6570\n * \n * @author tobato\n *\n */\n@Component\n@ConfigurationProperties(prefix = FdfsClientConstants.THUMB_IMAGE_CONFIG_PREFIX)\npublic class DefaultThumbImageConfig implements ThumbImageConfig {\n\n    private int width;\n\n    private int height;\n\n    private static String cachedPrefixName;\n\n    /**\n     * \u751f\u6210\u524d\u7f00\u5982:_150x150\n     */\n    @Override\n    public String getPrefixName() {\n        if (cachedPrefixName == null) {\n            StringBuilder buffer = new StringBuilder();\n            buffer.append(\"_\").append(width).append(\"x\").append(height);\n            cachedPrefixName = new String(buffer);\n        }\n        return cachedPrefixName;\n    }\n\n    /**\n     * \u6839\u636e\u6587\u4ef6\u540d\u83b7\u53d6\u7f29\u7565\u56fe\u8def\u5f84\n     */\n    @Override\n    public String getThumbImagePath(String masterFilename) {\n        Validate.notBlank(masterFilename, \"\u4e3b\u6587\u4ef6\u4e0d\u80fd\u4e3a\u7a7a\");\n        StringBuilder buff = new StringBuilder(masterFilename);\n        int index = buff.lastIndexOf(\".\");\n        buff.insert(index, getPrefixName());\n        return buff.toString();\n    }\n\n    public void setWidth(int width) {\n        this.width = width;\n    }\n\n    public void setHeight(int height) {\n        this.height = height;\n    }\n\n    public int getWidth() {\n        return width;\n    }\n\n    public int getHeight() {\n        return height;\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"tobato/FastDFS_Client","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/github/tobato/fastdfs/domain/DefaultThumbImageConfig.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"59a8625776850ae3c040364c5ad6b4b2ba29a7b1","size":"1779","content":"package org.khelekore.parjac.tree;\n\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Deque;\n\nimport org.khelekore.parjac.grammar.Rule;\nimport org.khelekore.parjac.lexer.ParsePosition;\nimport org.khelekore.parjac.lexer.Token;\n\npublic class FieldAccess extends PositionNode {\n    private final TreeNode from;\n    private final boolean isSuper;\n    private final String id;\n    private ExpressionType returnType;\n\n    public FieldAccess (Rule r, Deque<TreeNode> parts, ParsePosition ppos) {\n\tsuper (ppos);\n\tint pos = 0;\n\tif (r.getRulePart (0).isRulePart ()) {\n\t    from = parts.pop ();\n\t    pos++;\n\t} else {\n\t    from = null;\n\t}\n\tisSuper = r.getRulePart (pos).getId () == Token.SUPER;\n\tid = ((Identifier)parts.pop ()).get ();\n    }\n\n    public FieldAccess (TreeNode from, String id, ParsePosition pos) {\n\tsuper (pos);\n\tthis.from = from;\n\tisSuper = false;\n\tthis.id = id;\n    }\n\n    @Override public String toString () {\n\treturn getClass ().getSimpleName () + \"{\" + from + \" \" + isSuper + \" \" + id + \"}\";\n    }\n\n    @Override public void visit (TreeVisitor visitor) {\n\tif (visitor.visit (this)) {\n\t    if (from != null)\n\t\tfrom.visit (visitor);\n\t}\n    }\n\n    @Override public void simpleVisit (TreeVisitor visitor) {\n\tvisitor.visit (this);\n    }\n\n    public Collection<? extends TreeNode> getChildNodes () {\n\tif (from != null)\n\t    return Collections.singleton (from);\n\treturn Collections.emptyList ();\n    }\n\n    public TreeNode getFrom () {\n\treturn from;\n    }\n\n    public boolean isSuper () {\n\treturn isSuper;\n    }\n\n    public String getFieldId () {\n\treturn id;\n    }\n\n    public void setReturnType (ExpressionType returnType) {\n\tthis.returnType = returnType;\n    }\n\n    @Override public ExpressionType getExpressionType () {\n\treturn returnType;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"robert-olofsson/parjac","sample_ref":"refs/heads/master","sample_path":"src/org/khelekore/parjac/tree/FieldAccess.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6bcbcf11c2de9e241105bc4d47674cc89bfc5e20","size":"11811","content":"/***********************************************************************\r\n\r\n\tThis file is part of KEEL-software, the Data Mining tool for regression, \r\n\tclassification, clustering, pattern mining and so on.\r\n\r\n\tCopyright (C) 2004-2010\r\n\t\r\n\tF. Herrera (herrera@decsai.ugr.es)\r\n    L. S\u00e1nchez (luciano@uniovi.es)\r\n    J. Alcal\u00e1-Fdez (jalcala@decsai.ugr.es)\r\n    S. Garc\u00eda (sglopez@ujaen.es)\r\n    A. Fern\u00e1ndez (alberto.fernandez@ujaen.es)\r\n    J. Luengo (julianlm@decsai.ugr.es)\r\n\r\n\tThis program is free software: you can redistribute it and/or modify\r\n\tit under the terms of the GNU General Public License as published by\r\n\tthe Free Software Foundation, either version 3 of the License, or\r\n\t(at your option) any later version.\r\n\r\n\tThis program is distributed in the hope that it will be useful,\r\n\tbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\n\tMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n\tGNU General Public License for more details.\r\n\r\n\tYou should have received a copy of the GNU General Public License\r\n\talong with this program.  If not, see http://www.gnu.org/licenses/\r\n  \r\n**********************************************************************/\r\n\r\npackage keel.Algorithms.RE_SL_Methods.mogulSC;\r\n\r\nimport org.core.*;\r\nimport java.util.*;\r\nimport java.lang.Math;\r\n\r\nclass AG_Tun {\r\n  public double prob_cruce, prob_mutacion, a, b;\r\n  public int Mu_next, Trials;\r\n  public double Best_current_perf;\r\n  public int Best_guy;\r\n  public int long_poblacion, n_genes, n_reglas;\r\n\r\n  public int[] sample;\r\n  public int last;\r\n\r\n  public Structure[] Old;\r\n  public Structure[] New;\r\n  public Structure[] C;\r\n  public Structure[] temp;\r\n  public TipoIntervalo[] intervalos;\r\n  public Adap_Tun fun_adap;\r\n\r\n  public AG_Tun(int n_poblacion, double cruce, double mutacion, double valor_a,\r\n            double valor_b, Adap_Tun funcion) {\r\n    int i;\r\n\r\n    long_poblacion = n_poblacion;\r\n    prob_cruce = cruce;\r\n    prob_mutacion = mutacion;\r\n    a = valor_a;\r\n    b = valor_b;\r\n    fun_adap = funcion;\r\n\tthis.last = (int) (this.long_poblacion * this.prob_cruce);\r\n\r\n    sample = new int[long_poblacion];\r\n  }\r\n\r\n  /** Reads the RB of a input file */\r\n  private void leer_BR(String fichero, int n_variables) {\r\n    int i;\r\n    String cadena;\r\n\r\n    cadena = Fichero.leeFichero(fichero);\r\n    StringTokenizer sT = new StringTokenizer(cadena, \"\\n\\r\\t \", false);\r\n    sT.nextToken();\r\n    sT.nextToken();\r\n    sT.nextToken();\r\n\r\n    n_reglas = Integer.parseInt(sT.nextToken());\r\n    n_genes = 3 * n_variables * n_reglas;\r\n\r\n    Old = new Structure[long_poblacion];\r\n    New = new Structure[long_poblacion];\r\n\r\n    for (i = 0; i < long_poblacion; i++) {\r\n      Old[i] = new Structure(n_genes);\r\n      New[i] = new Structure(n_genes);\r\n    }\r\n\r\n    for (i = 0; i < n_genes; i++) {\r\n      New[0].Gene[i] = Double.parseDouble(sT.nextToken());\r\n    }\r\n\r\n    New[0].n_e = 1;\r\n  }\r\n\r\n  public void Intercambio() {\r\n    temp = Old;\r\n    Old = New;\r\n    New = temp;\r\n  }\r\n\r\n  /** Inicialization of the population */\r\n  public void Initialize(String fichero, int n_variables) {\r\n    int i, j;\r\n\r\n    leer_BR(fichero, n_variables);\r\n\r\n    prob_mutacion = prob_mutacion / (double) n_genes;\r\n\r\n    C = new Structure[4];\r\n    for (i = 0; i < 4; i++) {\r\n      C[i] = new Structure(n_genes);\r\n    }\r\n\r\n    intervalos = new TipoIntervalo[n_genes];\r\n    for (i = 0; i < n_genes; i++) {\r\n      intervalos[i] = new TipoIntervalo();\r\n    }\r\n\r\n    /* we generate the variation intervals for each gene */\r\n    for (i = 0; i < n_genes; i += 3) {\r\n      intervalos[i].min = New[0].Gene[i] -\r\n          (New[0].Gene[i + 1] - New[0].Gene[i]) / 2.0;\r\n      intervalos[i].max = New[0].Gene[i] +\r\n          (New[0].Gene[i + 1] - New[0].Gene[i]) / 2.0;\r\n\r\n      intervalos[i + 1].min = New[0].Gene[i + 1] -\r\n          (New[0].Gene[i + 1] - New[0].Gene[i]) / 2.0;\r\n      intervalos[i + 1].max = New[0].Gene[i + 1] +\r\n          (New[0].Gene[i + 2] - New[0].Gene[i + 1]) / 2.0;\r\n\r\n      intervalos[i + 2].min = New[0].Gene[i + 2] -\r\n          (New[0].Gene[i + 2] - New[0].Gene[i + 1]) / 2.0;\r\n      intervalos[i + 2].max = New[0].Gene[i + 2] +\r\n          (New[0].Gene[i + 2] - New[0].Gene[i + 1]) / 2.0;\r\n    }\r\n\r\n    /* the remainder of the population is randomly generated out of a the intervals */\r\n    for (i = 1; i < long_poblacion; i++) {\r\n      for (j = 0; j < n_genes; j++) {\r\n        New[i].Gene[j] = intervalos[j].min +\r\n            (intervalos[j].max - intervalos[j].min) * Randomize.Rand();\r\n      }\r\n\r\n      New[i].n_e = 1;\r\n    }\r\n  }\r\n\r\n  /* Selection based on the Baker's Estocastic Universal Sampling */\r\n  void Select() {\r\n    double expected, factor, perf, ptr, sum, rank_max, rank_min;\r\n    int i, j, k, best, temp;\r\n\r\n    rank_min = 0.75;\r\n\r\n    /* we assign the ranking to each element:\r\n         The best: ranking = long_poblacion-1\r\n      The worse: ranking = 0 */\r\n    for (i = 0; i < long_poblacion; i++) {\r\n      Old[i].n_e = 0;\r\n    }\r\n\r\n    /* we look for the best ordered non element */\r\n    for (i = 0; i < long_poblacion - 1; i++) {\r\n      best = -1;\r\n      perf = 0.0;\r\n      for (j = 0; j < long_poblacion; j++) {\r\n        if ( (Old[j].n_e == 0) && (best == -1 || Old[j].Perf < perf)) {\r\n          perf = Old[j].Perf;\r\n          best = j;\r\n        }\r\n      }\r\n\r\n      /* we assign the ranking */\r\n      Old[best].n_e = long_poblacion - 1 - i;\r\n    }\r\n\r\n    /* we normalize the ranking */\r\n    rank_max = 2.0 - rank_min;\r\n    factor = (rank_max - rank_min) / (double) (long_poblacion - 1);\r\n\r\n    /* we assign the number of replicas of each chormosome according to the select probability */\r\n    k = 0;\r\n    ptr = Randomize.Rand();\r\n    for (sum = i = 0; i < long_poblacion; i++) {\r\n      expected = rank_min + Old[i].n_e * factor;\r\n      for (sum += expected; sum >= ptr; ptr++) {\r\n        sample[k++] = i;\r\n      }\r\n    }\r\n\r\n    /* we complete the population if necessary */\r\n    if (k != long_poblacion) {\r\n      for (; k < long_poblacion; k++) {\r\n        sample[k] = Randomize.RandintClosed(0, long_poblacion - 1);\r\n      }\r\n    }\r\n\r\n    /* we shuffle the selected chromosomes */\r\n    for (i = 0; i < long_poblacion; i++) {\r\n      j = Randomize.RandintClosed(i, long_poblacion - 1);\r\n      temp = sample[j];\r\n      sample[j] = sample[i];\r\n      sample[i] = temp;\r\n    }\r\n\r\n    /* we create the new population */\r\n    for (i = 0; i < long_poblacion; i++) {\r\n      k = sample[i];\r\n      for (j = 0; j < n_genes; j++) {\r\n        New[i].Gene[j] = Old[k].Gene[j];\r\n      }\r\n\r\n      New[i].Perf = Old[k].Perf;\r\n      New[i].n_e = 0;\r\n    }\r\n  }\r\n\r\n  private double T_producto_logico(double x, double y) {\r\n    if (x < y) {\r\n      return (x);\r\n    }\r\n    else {\r\n      return (y);\r\n    }\r\n  }\r\n\r\n  private double S_suma_logica(double x, double y) {\r\n    if (x > y) {\r\n      return (x);\r\n    }\r\n    else {\r\n      return (y);\r\n    }\r\n  }\r\n\r\n  private double Promedio1(double x, double y, double p) {\r\n    return (p * x + (1 - p) * y);\r\n  }\r\n\r\n  /** Max-Min-Aritmetical Crossover */\r\n  public void Max_Min_Crossover() {\r\n    int mom, dad, i, j, temp;\r\n    int[] indice = new int[4];\r\n    double temp1, temp2;\r\n\r\n    for (mom = 0; mom < last; mom += 2) {\r\n      dad = mom + 1;\r\n\r\n      for (i = 0; i < n_genes; i++) {\r\n\r\n        temp1 = New[mom].Gene[i];\r\n        temp2 = New[dad].Gene[i];\r\n\r\n        /* we obtain 4 offsprings: appling the t-norma, the\r\n             t-conorma and 2 the average function */\r\n        C[0].Gene[i] = T_producto_logico(temp1, temp2);\r\n        C[1].Gene[i] = S_suma_logica(temp1, temp2);\r\n        C[2].Gene[i] = Promedio1(temp1, temp2, a);\r\n        C[3].Gene[i] = Promedio1(temp1, temp2, 1.0 - a);\r\n      }\r\n\r\n      /* Evaluation of the 4 offsprings */\r\n      C[0].Perf = fun_adap.eval(C[0].Gene);\r\n      C[1].Perf = fun_adap.eval(C[1].Gene);\r\n      C[2].Perf = fun_adap.eval(C[2].Gene);\r\n      C[3].Perf = fun_adap.eval(C[3].Gene);\r\n\r\n      /* we order the offsprings by means of the bubble method */\r\n      for (i = 0; i < 4; i++) {\r\n        indice[i] = i;\r\n      }\r\n\r\n      for (i = 0; i < 4; i++) {\r\n        for (j = 0; j < 3 - i; j++) {\r\n          if (C[indice[j + 1]].Perf < C[indice[j]].Perf) {\r\n            temp = indice[j];\r\n            indice[j] = indice[j + 1];\r\n            indice[j + 1] = temp;\r\n          }\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < n_genes; i++) {\r\n        New[mom].Gene[i] = C[indice[0]].Gene[i];\r\n        New[dad].Gene[i] = C[indice[1]].Gene[i];\r\n      }\r\n\r\n      /* we update the fitness of the offsprings */\r\n      New[mom].Perf = C[indice[0]].Perf;\r\n      New[dad].Perf = C[indice[1]].Perf;\r\n      New[mom].n_e = 0;\r\n      New[dad].n_e = 0;\r\n\r\n      Trials += 2;\r\n    }\r\n  }\r\n\r\n  private double delta(long t, double y, long n_generaciones) {\r\n    double r, potencia, subtotal, sub;\r\n\r\n    r = Randomize.Rand();\r\n    sub = 1.0 - (double) t / (double) n_generaciones;\r\n    potencia = Math.pow(sub, (double) b);\r\n    subtotal = Math.pow(r, potencia);\r\n    return (y * (1.0 - subtotal));\r\n  }\r\n\r\n  /** Mutation Non Uniform */\r\n  public void Mutacion_No_Uniforme(long Gen, long n_generaciones) {\r\n    int posiciones, i, j;\r\n    double nval, m;\r\n\r\n    posiciones = n_genes * long_poblacion;\r\n\r\n    if (prob_mutacion > 0) {\r\n      while (Mu_next < posiciones) {\r\n\r\n        /* we determinate the chromosome and the gene */\r\n        i = Mu_next / n_genes;\r\n        j = Mu_next % n_genes;\r\n\r\n        /* we mutate the gene */\r\n        if (Randomize.Rand() < 0.5) {\r\n          nval = New[i].Gene[j] +\r\n              delta(Gen, intervalos[j].max - New[i].Gene[j], n_generaciones);\r\n        }\r\n        else {\r\n          nval = New[i].Gene[j] -\r\n              delta(Gen, New[i].Gene[j] - intervalos[j].min, n_generaciones);\r\n        }\r\n\r\n        New[i].Gene[j] = nval;\r\n        New[i].n_e = 1;\r\n\r\n        /* we calculate the next position */\r\n        if (prob_mutacion < 1) {\r\n          m = Randomize.Rand();\r\n          Mu_next += (int) (Math.log(m) / Math.log(1.0 - prob_mutacion));\r\n          Mu_next++;\r\n        }\r\n        else {\r\n          Mu_next += 1;\r\n        }\r\n      }\r\n\r\n      Mu_next -= posiciones;\r\n    }\r\n  }\r\n\r\n  /** Fitness Function */\r\n  void Evaluate() {\r\n    double performance;\r\n    int i, j;\r\n\r\n    for (i = 0; i < long_poblacion; i++) {\r\n      /* if the chromosome aren't evaluated, it's evaluate */\r\n      if (New[i].n_e == 1) {\r\n        New[i].Perf = fun_adap.eval(New[i].Gene);\r\n        performance = New[i].Perf;\r\n        New[i].n_e = 0;\r\n        Trials++; /* we increment the number of evaluated chromosomes */\r\n\r\n      }\r\n      else {\r\n        performance = New[i].Perf;\r\n      }\r\n\r\n      /* we calculate the position of the best individual */\r\n      if (i == 0) {\r\n        Best_current_perf = performance;\r\n        Best_guy = 0;\r\n      }\r\n      else if (performance < Best_current_perf) {\r\n        Best_current_perf = performance;\r\n        Best_guy = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  /* Elitist selection */\r\n  void Elitist() {\r\n    int i, k, found;\r\n\r\n    /* if the best individual of the old population aren't in the new population, we remplace the last individual for this */\r\n    for (i = 0, found = 0; i < long_poblacion && (found == 0); i++) {\r\n      for (k = 0, found = 1; (k < n_genes) && (found == 1); k++) {\r\n        if (New[i].Gene[k] != Old[Best_guy].Gene[k]) {\r\n          found = 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (found == 0) {\r\n      for (k = 0; k < n_genes; k++) {\r\n        New[long_poblacion - 1].Gene[k] = Old[Best_guy].Gene[k];\r\n      }\r\n\r\n      New[long_poblacion - 1].Perf = Old[Best_guy].Perf;\r\n      New[long_poblacion - 1].n_e = 0;\r\n    }\r\n  }\r\n\r\n  /** Returns the best solution*/\r\n  public double[] solucion() {\r\n    return (New[Best_guy].Gene);\r\n  }\r\n\r\n  /** Returns the fitness of the best solution */\r\n  public double solucion_ec() {\r\n    return (New[Best_guy].Perf);\r\n  }\r\n}\r\n\r\n","binary":"false","copies":"1","sample_repo_name":"SCI2SUGR/KEEL","sample_ref":"refs/heads/master","sample_path":"src/keel/Algorithms/RE_SL_Methods/mogulSC/AG_Tun.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9571ca46e359f64c247873cfe75f226df6e434fd","size":"1270","content":"/*\n * This file is part of Blue Power. Blue Power is free software: you can redistribute it and/or modify it under the terms of the GNU General Public\n * License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Blue Power is\n * distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n * PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along\n * with Blue Power. If not, see <http://www.gnu.org/licenses/>\n */\npackage com.bluepowermod.client.gui;\n\nimport net.minecraft.entity.player.InventoryPlayer;\nimport net.minecraft.util.ResourceLocation;\n\nimport com.bluepowermod.container.ContainerCPU;\nimport com.bluepowermod.reference.Refs;\nimport com.bluepowermod.tile.tier3.TileCPU;\n\npublic class GuiCPU extends GuiContainerBaseBP {\n\n    private final TileCPU cpu;\n    private static final ResourceLocation resLoc = new ResourceLocation(Refs.MODID + \":textures/gui/cpugui.png\");\n\n    public GuiCPU(InventoryPlayer invPlayer, TileCPU cpu) {\n\n        super(new ContainerCPU(invPlayer, cpu), resLoc);\n        this.cpu = cpu;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"Qmunity/BluePower","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/bluepowermod/client/gui/GuiCPU.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"703ee61ab62346bbef906dd9a9922fd39b807d5c","size":"9217","content":"/*\r\n * Copyright (c) 2008-2016 Haulmont.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n */\r\npackage com.haulmont.cuba.web.controllers;\r\n\r\nimport com.haulmont.cuba.client.ClientConfig;\r\nimport com.haulmont.cuba.core.app.DataService;\r\nimport com.haulmont.cuba.core.entity.FileDescriptor;\r\nimport com.haulmont.cuba.core.global.Configuration;\r\nimport com.haulmont.cuba.core.global.FileTypesHelper;\r\nimport com.haulmont.cuba.core.global.LoadContext;\r\nimport com.haulmont.cuba.core.sys.AppContext;\r\nimport com.haulmont.cuba.core.sys.SecurityContext;\r\nimport com.haulmont.cuba.core.sys.remoting.ClusterInvocationSupport;\r\nimport com.haulmont.cuba.security.app.UserSessionService;\r\nimport com.haulmont.cuba.security.global.NoUserSessionException;\r\nimport com.haulmont.cuba.security.global.UserSession;\r\nimport org.apache.commons.io.IOUtils;\r\nimport org.apache.commons.lang.StringUtils;\r\nimport org.apache.http.HttpEntity;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.HttpStatus;\r\nimport org.apache.http.client.HttpClient;\r\nimport org.apache.http.client.methods.HttpGet;\r\nimport org.apache.http.conn.HttpClientConnectionManager;\r\nimport org.apache.http.impl.client.HttpClientBuilder;\r\nimport org.apache.http.impl.conn.BasicHttpClientConnectionManager;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestMethod;\r\nimport org.springframework.web.servlet.ModelAndView;\r\n\r\nimport javax.annotation.Resource;\r\nimport javax.inject.Inject;\r\nimport javax.servlet.ServletOutputStream;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.Iterator;\r\nimport java.util.UUID;\r\n\r\n/**\r\n * Handles file download requests to the web client.\r\n * <p/> This controller is deployed in Spring context defined by <code>cuba.dispatcherSpringContextConfig</code>\r\n * app property.\r\n *\r\n */\r\n@Controller\r\npublic class FileDownloadController {\r\n\r\n    private Logger log = LoggerFactory.getLogger(FileDownloadController.class);\r\n\r\n    @Inject\r\n    protected DataService dataService;\r\n\r\n    @Inject\r\n    protected UserSessionService userSessionService;\r\n\r\n    @Resource(name = ClusterInvocationSupport.NAME)\r\n    protected ClusterInvocationSupport clusterInvocationSupport;\r\n\r\n    protected String fileDownloadContext;\r\n\r\n    @Inject\r\n    public void setConfiguration(Configuration configuration) {\r\n        fileDownloadContext = configuration.getConfig(ClientConfig.class).getFileDownloadContext();\r\n    }\r\n\r\n    @RequestMapping(value = \"/download\", method = RequestMethod.GET)\r\n    public ModelAndView download(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        UserSession userSession = getSession(request, response);\r\n        if (userSession == null) {\r\n            error(response);\r\n            return null;\r\n        }\r\n\r\n        AppContext.setSecurityContext(new SecurityContext(userSession));\r\n        try {\r\n            UUID fileId;\r\n            try {\r\n                fileId = UUID.fromString(request.getParameter(\"f\"));\r\n            } catch (Exception e) {\r\n                log.error(e.toString());\r\n                error(response);\r\n                return null;\r\n            }\r\n\r\n            FileDescriptor fd = dataService.load(new LoadContext<>(FileDescriptor.class).setId(fileId));\r\n            if (fd == null) {\r\n                log.warn(\"Unable to find file with id \" + fileId);\r\n                error(response);\r\n                return null;\r\n            }\r\n\r\n            String fileName;\r\n            try {\r\n                fileName = URLEncoder.encode(fd.getName(), StandardCharsets.UTF_8.name());\r\n            } catch (UnsupportedEncodingException e) {\r\n                log.error(e.toString());\r\n                error(response);\r\n                return null;\r\n            }\r\n\r\n            response.setHeader(\"Cache-Control\", \"no-cache\");\r\n            response.setHeader(\"Pragma\", \"no-cache\");\r\n            response.setDateHeader(\"Expires\", 0);\r\n            response.setHeader(\"Content-Type\", getContentType(fd));\r\n            response.setHeader(\"Pragma\", \"no-cache\");\r\n\r\n            boolean attach = Boolean.valueOf(request.getParameter(\"a\"));\r\n            response.setHeader(\"Content-Disposition\", (attach ? \"attachment\" : \"inline\")\r\n                    + \"; filename=\" + fileName);\r\n\r\n            writeResponse(response, userSession, fd);\r\n\r\n        } finally {\r\n            AppContext.setSecurityContext(null);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private void writeResponse(HttpServletResponse response, UserSession userSession, FileDescriptor fd)\r\n            throws IOException {\r\n        InputStream is = null;\r\n        ServletOutputStream os = response.getOutputStream();\r\n        try {\r\n            for (Iterator<String> iterator = clusterInvocationSupport.getUrlList().iterator(); iterator.hasNext(); ) {\r\n                String url = iterator.next() + fileDownloadContext +\r\n                        \"?s=\" + userSession.getId() +\r\n                        \"&f=\" + fd.getId().toString();\r\n\r\n                HttpClientConnectionManager connectionManager = new BasicHttpClientConnectionManager();\r\n                HttpClient httpClient = HttpClientBuilder.create()\r\n                        .setConnectionManager(connectionManager)\r\n                        .build();\r\n\r\n                HttpGet httpGet = new HttpGet(url);\r\n\r\n                try {\r\n                    HttpResponse httpResponse = httpClient.execute(httpGet);\r\n                    int httpStatus = httpResponse.getStatusLine().getStatusCode();\r\n                    if (httpStatus == HttpStatus.SC_OK) {\r\n                        HttpEntity httpEntity = httpResponse.getEntity();\r\n                        if (httpEntity != null) {\r\n                            is = httpEntity.getContent();\r\n                            IOUtils.copy(is, os);\r\n                            os.flush();\r\n                            break;\r\n                        } else {\r\n                            log.debug(\"Unable to download file from \" + url + \"\\nHttpEntity is null\");\r\n                            if (iterator.hasNext())\r\n                                log.debug(\"Trying next URL\");\r\n                            else\r\n                                error(response);\r\n                        }\r\n                    } else {\r\n                        log.debug(\"Unable to download file from \" + url + \"\\n\" + httpResponse.getStatusLine());\r\n                        if (iterator.hasNext()) {\r\n                            log.debug(\"Trying next URL\");\r\n                        } else {\r\n                            error(response);\r\n                        }\r\n                    }\r\n                } catch (IOException ex) {\r\n                    log.debug(\"Unable to download file from \" + url + \"\\n\" + ex);\r\n                    if (iterator.hasNext()) {\r\n                        log.debug(\"Trying next URL\");\r\n                    } else {\r\n                        error(response);\r\n                    }\r\n                } finally {\r\n                    IOUtils.closeQuietly(is);\r\n\r\n                    connectionManager.shutdown();\r\n                }\r\n            }\r\n        } finally {\r\n            IOUtils.closeQuietly(os);\r\n        }\r\n    }\r\n\r\n    protected UserSession getSession(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        UUID sessionId;\r\n        try {\r\n            sessionId = UUID.fromString(request.getParameter(\"s\"));\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n\r\n        AppContext.setSecurityContext(new SecurityContext(sessionId));\r\n        try {\r\n            UserSession userSession = userSessionService.getUserSession(sessionId);\r\n            return userSession;\r\n        } catch (NoUserSessionException e) {\r\n            return null;\r\n        } finally {\r\n            AppContext.setSecurityContext(null);\r\n        }\r\n    }\r\n\r\n    protected String getContentType(FileDescriptor fd) {\r\n        if (StringUtils.isEmpty(fd.getExtension())) {\r\n            return FileTypesHelper.DEFAULT_MIME_TYPE;\r\n        }\r\n\r\n        return FileTypesHelper.getMIMEType(\".\" + fd.getExtension().toLowerCase());\r\n    }\r\n\r\n    private void error(HttpServletResponse response) throws IOException {\r\n        if (!response.isCommitted())\r\n            response.sendError(HttpServletResponse.SC_NOT_FOUND);\r\n    }\r\n}","binary":"false","copies":"1","sample_repo_name":"cuba-platform/cuba","sample_ref":"refs/heads/master","sample_path":"modules/web/src/com/haulmont/cuba/web/controllers/FileDownloadController.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"7915abb0013a440ed1f9beeb7d85e2736538649b","size":"801","content":"package org.crococryptfile.ui.gui.pages;\r\n\r\nimport java.awt.Dimension;\r\nimport java.util.HashMap;\r\n\r\nimport org.crococryptfile.ui.gui.Page;\r\nimport org.crococryptfile.ui.gui.PageActionparameters;\r\nimport org.crococryptfile.ui.gui.PageLauncher;\r\nimport org.crococryptfile.ui.resources._T;\r\n\r\npublic class JCEPolicyError extends Page{\r\n\t@Override\r\n\tprotected void generate(HashMap<String, String> params){\r\n\t\tparams.put(\"title\", _T.JCEPolicyError_title.val());\r\n\t\tparams.put(\"text\", _T.JCEPolicyError_text.val());\r\n\t}\r\n\t\r\n\t@Override\r\n\tprotected void action(PageLauncher pl, Object action, PageActionparameters params) {\r\n\t\tif(params == null || action == null || !action.equals(\"ok\")) return;\r\n\t\t\r\n\t\tpl.exit();\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic Dimension getSize() {\r\n\t\treturn new Dimension(400, 200);\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"fhissen/CrococryptFile","sample_ref":"refs/heads/master","sample_path":"CrococryptFile/main/org/crococryptfile/ui/gui/pages/JCEPolicyError.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9d1dcd5442fbd56dab134867e05092792870fb33","size":"11040","content":"/*\n*    This file is part of GPSLogger for Android.\n*\n*    GPSLogger for Android is free software: you can redistribute it and/or modify\n*    it under the terms of the GNU General Public License as published by\n*    the Free Software Foundation, either version 2 of the License, or\n*    (at your option) any later version.\n*\n*    GPSLogger for Android is distributed in the hope that it will be useful,\n*    but WITHOUT ANY WARRANTY; without even the implied warranty of\n*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*    GNU General Public License for more details.\n*\n*    You should have received a copy of the GNU General Public License\n*    along with GPSLogger for Android.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\npackage com.mendhak.gpslogger.loggers.gpx;\n\nimport android.location.Location;\nimport com.mendhak.gpslogger.BuildConfig;\nimport com.mendhak.gpslogger.common.Maths;\nimport com.mendhak.gpslogger.common.RejectionHandler;\nimport com.mendhak.gpslogger.common.Strings;\nimport com.mendhak.gpslogger.common.slf4j.Logs;\nimport com.mendhak.gpslogger.loggers.FileLogger;\nimport com.mendhak.gpslogger.loggers.Files;\nimport org.slf4j.Logger;\n\nimport java.io.*;\nimport java.util.Date;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\n\npublic class Gpx10FileLogger implements FileLogger {\n    protected final static Object lock = new Object();\n\n    private final static ThreadPoolExecutor EXECUTOR = new ThreadPoolExecutor(1, 1, 60, TimeUnit.SECONDS,\n            new LinkedBlockingQueue<Runnable>(128), new RejectionHandler());\n    private File gpxFile = null;\n    private final boolean addNewTrackSegment;\n    protected final String name = \"GPX\";\n\n    public Gpx10FileLogger(File gpxFile, boolean addNewTrackSegment) {\n        this.gpxFile = gpxFile;\n        this.addNewTrackSegment = addNewTrackSegment;\n    }\n\n\n    public void write(Location loc) throws Exception {\n        long time = loc.getTime();\n        if (time <= 0) {\n            time = System.currentTimeMillis();\n        }\n        String dateTimeString = Strings.getIsoDateTime(new Date(time));\n\n        Gpx10WriteHandler writeHandler = new Gpx10WriteHandler(dateTimeString, gpxFile, loc, addNewTrackSegment);\n        EXECUTOR.execute(writeHandler);\n    }\n\n    public void annotate(String description, Location loc) throws Exception {\n\n        long time = loc.getTime();\n        if (time <= 0) {\n            time = System.currentTimeMillis();\n        }\n        String dateTimeString = Strings.getIsoDateTime(new Date(time));\n\n        Gpx10AnnotateHandler annotateHandler = new Gpx10AnnotateHandler(description, gpxFile, loc, dateTimeString);\n        EXECUTOR.execute(annotateHandler);\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n\n\n}\n\nclass Gpx10AnnotateHandler implements Runnable {\n    private static final Logger LOG = Logs.of(Gpx10AnnotateHandler.class);\n    String description;\n    File gpxFile;\n    Location loc;\n    String dateTimeString;\n\n    public Gpx10AnnotateHandler(String description, File gpxFile, Location loc, String dateTimeString) {\n        this.description = description;\n        this.gpxFile = gpxFile;\n        this.loc = loc;\n        this.dateTimeString = dateTimeString;\n    }\n\n    @Override\n    public void run() {\n\n        synchronized (Gpx10FileLogger.lock) {\n            if (!gpxFile.exists()) {\n                return;\n            }\n\n            if (!gpxFile.exists()) {\n                return;\n            }\n\n            int startPosition = 339;\n\n            String wpt = getWaypointXml(loc, dateTimeString, description);\n\n            try {\n\n                //write to a temp file, delete original file, move temp to original\n                File gpxTempFile = new File(gpxFile.getAbsolutePath() + \".tmp\");\n\n                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(gpxFile));\n                BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(gpxTempFile));\n\n                int written = 0;\n                int readSize;\n                byte[] buffer = new byte[startPosition];\n                while ((readSize = bis.read(buffer)) > 0) {\n                    bos.write(buffer, 0, readSize);\n                    written += readSize;\n\n                    System.out.println(written);\n\n                    if (written == startPosition) {\n                        bos.write(wpt.getBytes());\n                        buffer = new byte[20480];\n                    }\n\n                }\n\n                bis.close();\n                bos.close();\n\n                gpxFile.delete();\n                gpxTempFile.renameTo(gpxFile);\n\n                LOG.debug(\"Finished annotation to GPX10 File\");\n            } catch (Exception e) {\n                LOG.error(\"Gpx10FileLogger.annotate\", e);\n            }\n\n        }\n    }\n\n    String getWaypointXml(Location loc, String dateTimeString, String description) {\n\n        StringBuilder waypoint = new StringBuilder();\n\n        waypoint.append(\"\\n<wpt lat=\\\"\")\n                .append(String.valueOf(loc.getLatitude()))\n                .append(\"\\\" lon=\\\"\")\n                .append(String.valueOf(loc.getLongitude()))\n                .append(\"\\\">\");\n\n        if (loc.hasAltitude()) {\n            waypoint.append(\"<ele>\").append(String.valueOf(loc.getAltitude())).append(\"</ele>\");\n        }\n\n        waypoint.append(\"<time>\").append(dateTimeString).append(\"</time>\");\n        waypoint.append(\"<name>\").append(description).append(\"</name>\");\n\n        waypoint.append(\"<src>\").append(loc.getProvider()).append(\"</src>\");\n        waypoint.append(\"</wpt>\\n\");\n\n        return waypoint.toString();\n    }\n}\n\n\nclass Gpx10WriteHandler implements Runnable {\n    private static final Logger LOG = Logs.of(Gpx10WriteHandler.class);\n    String dateTimeString;\n    Location loc;\n    private File gpxFile = null;\n    private boolean addNewTrackSegment;\n\n    public Gpx10WriteHandler(String dateTimeString, File gpxFile, Location loc, boolean addNewTrackSegment) {\n        this.dateTimeString = dateTimeString;\n        this.addNewTrackSegment = addNewTrackSegment;\n        this.gpxFile = gpxFile;\n        this.loc = loc;\n    }\n\n\n    @Override\n    public void run() {\n        synchronized (Gpx10FileLogger.lock) {\n\n            try {\n                if (!gpxFile.exists()) {\n                    gpxFile.createNewFile();\n\n                    FileOutputStream initialWriter = new FileOutputStream(gpxFile, true);\n                    BufferedOutputStream initialOutput = new BufferedOutputStream(initialWriter);\n\n                    StringBuilder initialXml = new StringBuilder();\n                    initialXml.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\");\n                    initialXml.append(\"<gpx version=\\\"1.0\\\" creator=\\\"GPSLogger \" + BuildConfig.VERSION_NAME + \" - http://gpslogger.mendhak.com/\\\" \");\n                    initialXml.append(\"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \");\n                    initialXml.append(\"xmlns=\\\"http://www.topografix.com/GPX/1/0\\\" \");\n                    initialXml.append(\"xsi:schemaLocation=\\\"http://www.topografix.com/GPX/1/0 \");\n                    initialXml.append(\"http://www.topografix.com/GPX/1/0/gpx.xsd\\\">\");\n                    initialXml.append(\"<time>\").append(dateTimeString).append(\"</time>\").append(\"<trk></trk></gpx>\");\n                    initialOutput.write(initialXml.toString().getBytes());\n                    initialOutput.flush();\n                    initialOutput.close();\n\n                    //New file, so new segment.\n                    addNewTrackSegment = true;\n                }\n\n                int offsetFromEnd = (addNewTrackSegment) ? 12 : 21;\n                long startPosition = gpxFile.length() - offsetFromEnd;\n                String trackPoint = getTrackPointXml(loc, dateTimeString);\n\n                RandomAccessFile raf = new RandomAccessFile(gpxFile, \"rw\");\n                raf.seek(startPosition);\n                raf.write(trackPoint.getBytes());\n                raf.close();\n                Files.addToMediaDatabase(gpxFile, \"text/plain\");\n                LOG.debug(\"Finished writing to GPX10 file\");\n\n            } catch (Exception e) {\n                LOG.error(\"Gpx10FileLogger.write\", e);\n            }\n\n        }\n\n    }\n\n    String getTrackPointXml(Location loc, String dateTimeString) {\n\n        StringBuilder track = new StringBuilder();\n\n        if (addNewTrackSegment) {\n            track.append(\"<trkseg>\");\n        }\n\n        track.append(\"<trkpt lat=\\\"\")\n                .append(String.valueOf(loc.getLatitude()))\n                .append(\"\\\" lon=\\\"\")\n                .append(String.valueOf(loc.getLongitude()))\n                .append(\"\\\">\");\n\n        if (loc.hasAltitude()) {\n            track.append(\"<ele>\").append(String.valueOf(loc.getAltitude())).append(\"</ele>\");\n        }\n\n        track.append(\"<time>\").append(dateTimeString).append(\"</time>\");\n\n        if (loc.hasBearing()) {\n            track.append(\"<course>\").append(String.valueOf(loc.getBearing())).append(\"</course>\");\n        }\n\n        if (loc.hasSpeed()) {\n            track.append(\"<speed>\").append(String.valueOf(loc.getSpeed())).append(\"</speed>\");\n        }\n\n        if (loc.getExtras() != null) {\n            String geoidheight = loc.getExtras().getString(\"GEOIDHEIGHT\");\n\n            if (!Strings.isNullOrEmpty(geoidheight)) {\n                track.append(\"<geoidheight>\").append(geoidheight).append(\"</geoidheight>\");\n            }\n        }\n\n        track.append(\"<src>\").append(loc.getProvider()).append(\"</src>\");\n\n\n        if (loc.getExtras() != null) {\n\n            int sat = Maths.getBundledSatelliteCount(loc);\n\n            if(sat > 0){\n                track.append(\"<sat>\").append(String.valueOf(sat)).append(\"</sat>\");\n            }\n\n\n            String hdop = loc.getExtras().getString(\"HDOP\");\n            String pdop = loc.getExtras().getString(\"PDOP\");\n            String vdop = loc.getExtras().getString(\"VDOP\");\n            String ageofdgpsdata = loc.getExtras().getString(\"AGEOFDGPSDATA\");\n            String dgpsid = loc.getExtras().getString(\"DGPSID\");\n\n            if (!Strings.isNullOrEmpty(hdop)) {\n                track.append(\"<hdop>\").append(hdop).append(\"</hdop>\");\n            }\n\n            if (!Strings.isNullOrEmpty(vdop)) {\n                track.append(\"<vdop>\").append(vdop).append(\"</vdop>\");\n            }\n\n            if (!Strings.isNullOrEmpty(pdop)) {\n                track.append(\"<pdop>\").append(pdop).append(\"</pdop>\");\n            }\n\n            if (!Strings.isNullOrEmpty(ageofdgpsdata)) {\n                track.append(\"<ageofdgpsdata>\").append(ageofdgpsdata).append(\"</ageofdgpsdata>\");\n            }\n\n            if (!Strings.isNullOrEmpty(dgpsid)) {\n                track.append(\"<dgpsid>\").append(dgpsid).append(\"</dgpsid>\");\n            }\n        }\n\n\n        track.append(\"</trkpt>\\n\");\n\n        track.append(\"</trkseg></trk></gpx>\");\n\n        return track.toString();\n    }\n\n}\n\n\n","binary":"false","copies":"1","sample_repo_name":"mendhak/gpslogger","sample_ref":"refs/heads/master","sample_path":"gpslogger/src/main/java/com/mendhak/gpslogger/loggers/gpx/Gpx10FileLogger.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"da57db2409550c5190518e021594406a587208b8","size":"1739","content":"/*\n * Cerberus  Copyright (C) 2013  vertigo17\n * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n *\n * This file is part of Cerberus.\n *\n * Cerberus is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Cerberus is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Cerberus.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage org.cerberus.crud.factory.impl;\n\nimport org.cerberus.crud.entity.Selenium;\nimport org.cerberus.crud.factory.IFactorySelenium;\nimport org.openqa.selenium.WebDriver;\nimport org.springframework.stereotype.Service;\n\n/**\n * @author bcivel\n */\n@Service\npublic class FactorySelenium implements IFactorySelenium {\n\n    @Override\n    public Selenium create(String host, String port, String browser, String version, String platform, String login, String ip, WebDriver driver, long wait) {\n        Selenium newSelenium = new Selenium();\n        newSelenium.setHost(host == null ? \"localhost\" : host);\n        newSelenium.setPort(port);\n        newSelenium.setBrowser(browser);\n        newSelenium.setVersion(version);\n        newSelenium.setPlatform(platform);\n        newSelenium.setLogin(login.startsWith(\"/\") ? login.substring(1) : login);\n        newSelenium.setIp(ip);\n        newSelenium.setDefaultWait(wait);\n\n        return newSelenium;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"vertigo17/Cerberus","sample_ref":"refs/heads/master","sample_path":"source/src/main/java/org/cerberus/crud/factory/impl/FactorySelenium.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"aff08e2a0c04223e0733776485de611e3be187bf","size":"1927","content":"/*\n * Copyright 2000-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage jetbrains.buildServer.clouds.azure.asm.web;\n\nimport jetbrains.buildServer.clouds.azure.asm.connector.AzureApiConnector;\nimport org.jdeferred.DonePipe;\nimport org.jdeferred.Promise;\nimport org.jdeferred.impl.DeferredObject;\nimport org.jdom.Content;\nimport org.jdom.Element;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;\n\n/**\n * Handles list of networks request.\n */\npublic class NetworksHandler implements ResourceHandler {\n    @Override\n    public Promise<Content, Throwable, Void> handle(@NotNull AzureApiConnector connector) {\n        return connector.listVirtualNetworksAsync().then(new DonePipe<List<String>, Content, Throwable, Void>() {\n            @Override\n            public Promise<Content, Throwable, Void> pipeDone(List<String> networksList) {\n                Element virtualNetworksElement = new Element(\"VirtualNetworks\");\n                for (String networkName : networksList) {\n                    final Element vn = new Element(\"VirtualNetwork\");\n                    vn.setAttribute(\"name\", networkName);\n                    vn.setAttribute(\"label\", networkName);\n                    virtualNetworksElement.addContent(vn);\n                }\n\n                return new DeferredObject<Content, Throwable, Void>().resolve(virtualNetworksElement);\n            }\n        });\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"JetBrains/teamcity-azure-plugin","sample_ref":"refs/heads/master","sample_path":"plugin-azure-server-asm/src/main/java/jetbrains/buildServer/clouds/azure/asm/web/NetworksHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"87be6fc44fe8490744ed60e822d6831320b69f7f","size":"1687","content":"/*\n * Copyright 2016 requery.io\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage io.requery.query.function;\n\nimport io.requery.meta.Attribute;\nimport io.requery.meta.QueryAttribute;\n\npublic class Count extends Function<Integer> {\n\n    private Attribute<?,?>[] attributes;\n    private Class<?> entityClass;\n\n    private Count(Attribute<?,?>[] attributes) {\n        super(\"count\", Integer.class);\n        this.attributes = attributes;\n    }\n\n    private Count(Class<?> entityClass) {\n        super(\"count\", Integer.class);\n        this.entityClass = entityClass;\n    }\n\n    public static Count count(QueryAttribute<?,?>... attributes) {\n        return new Count(attributes);\n    }\n\n    public static Count count(Attribute<?,?>... attributes) {\n        return new Count(attributes);\n    }\n\n    public static Count count(Class<?> entityClass) {\n        return new Count(entityClass);\n    }\n\n    public Attribute<?, ?>[] getAttributes() {\n        return attributes;\n    }\n\n    @Override\n    public Object[] arguments() {\n        if(entityClass != null) {\n            return new Object[] { entityClass };\n        } else {\n            return attributes;\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"requery/requery","sample_ref":"refs/heads/master","sample_path":"requery/src/main/java/io/requery/query/function/Count.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ab1d63884a2ad31a146e5c864eb778857beaff01","size":"2746","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\npackage ims.assessment.forms.dynamicassessments;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic final class ConfigFlags extends ims.framework.FormConfigFlags implements Serializable\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\r\n\tpublic final STALE_OBJECT_MESSAGEClass STALE_OBJECT_MESSAGE;\r\n\r\n\tpublic ConfigFlags(ims.framework.ConfigFlag configFlags)\r\n\t{\r\n\t\tsuper(configFlags);\r\n\r\n\t\tSTALE_OBJECT_MESSAGE = new STALE_OBJECT_MESSAGEClass(configFlags);\r\n\t}\r\n\r\n\tpublic final class STALE_OBJECT_MESSAGEClass implements Serializable\r\n\t{\r\n\t\tprivate static final long serialVersionUID = 1L;\r\n\t\tprivate final ims.framework.ConfigFlag configFlags;\r\n\r\n\t\tpublic STALE_OBJECT_MESSAGEClass(ims.framework.ConfigFlag configFlags)\r\n\t\t{\r\n\t\t\tthis.configFlags = configFlags;\r\n\t\t}\r\n\r\n\t\tpublic String getValue()\r\n\t\t{\r\n\t\t\treturn (String)configFlags.get(\"STALE_OBJECT_MESSAGE\");\r\n\t\t}\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Assessment/src/ims/assessment/forms/dynamicassessments/ConfigFlags.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"9df641f45567b4d9c829428b1e445d8e2c48c595","size":"4001","content":"// Catalano Android Imaging Library\r\n// The Catalano Framework\r\n//\r\n// Copyright \u00a9 Diego Catalano, 2012-2016\r\n// diego.catalano at live.com\r\n//\r\n// Copyright \u00a9 Andrew Kirillov, 2007-2008\r\n// andrew.kirillov at gmail.com\r\n//\r\n//    This library is free software; you can redistribute it and/or\r\n//    modify it under the terms of the GNU Lesser General Public\r\n//    License as published by the Free Software Foundation; either\r\n//    version 2.1 of the License, or (at your option) any later version.\r\n//\r\n//    This library is distributed in the hope that it will be useful,\r\n//    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n//    Lesser General Public License for more details.\r\n//\r\n//    You should have received a copy of the GNU Lesser General Public\r\n//    License along with this library; if not, write to the Free Software\r\n//    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\r\n//\r\n\r\npackage Catalano.Imaging.Filters;\r\n\r\nimport Catalano.Core.IntRange;\r\nimport Catalano.Imaging.FastBitmap;\r\nimport Catalano.Imaging.IApplyInPlace;\r\n\r\n/**\r\n * Color filtering.\r\n * <p> The filter filters pixels inside/outside of specified RGB color range - it keeps pixels with colors inside/outside of specified range and fills the rest with specified color</p>.\r\n * \r\n * <p><li>Supported types: RGB.\r\n * <br><li>Coordinate System: Independent.\r\n * \r\n * @author Diego Catalano\r\n */\r\npublic class ColorFiltering implements IApplyInPlace{\r\n    \r\n    private IntRange red, green, blue;\r\n\r\n    /**\r\n     * Get range from red channel.\r\n     * @return Red range.\r\n     */\r\n    public IntRange getRed() {\r\n        return red;\r\n    }\r\n\r\n    /**\r\n     * Set range of the red channel.\r\n     * @param red Red range.\r\n     */\r\n    public void setRed(IntRange red) {\r\n        this.red = red;\r\n    }\r\n\r\n    /**\r\n     * Get range from green channel.\r\n     * @return Green range.\r\n     */\r\n    public IntRange getGreen() {\r\n        return green;\r\n    }\r\n\r\n    /**\r\n     * Set range of the green channel.\r\n     * @param green Green range.\r\n     */\r\n    public void setGreen(IntRange green) {\r\n        this.green = green;\r\n    }\r\n\r\n    /**\r\n     * Get range of the blue channel.\r\n     * @return Blue range.\r\n     */\r\n    public IntRange getBlue() {\r\n        return blue;\r\n    }\r\n\r\n    /**\r\n     * Set range of the blue channel.\r\n     * @param blue Blue range.\r\n     */\r\n    public void setBlue(IntRange blue) {\r\n        this.blue = blue;\r\n    }\r\n\r\n    /**\r\n     * Initialize a new instance of the ColorFiltering class.\r\n     */\r\n    public ColorFiltering() {}\r\n\r\n    /**\r\n     * Initialize a new instance of the ColorFiltering class.\r\n     * @param red Range of red color component.\r\n     * @param green Range of green color component.\r\n     * @param blue Range of blue color component.\r\n     */\r\n    public ColorFiltering(IntRange red, IntRange green, IntRange blue) {\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n    }\r\n    \r\n    @Override\r\n    public void applyInPlace(FastBitmap fastBitmap){\r\n        \r\n        if(fastBitmap.isRGB()){\r\n            int r,g,b;\r\n            int size = fastBitmap.getSize();\r\n            for (int i = 0; i < size; i++) {\r\n                r = fastBitmap.getRed(i);\r\n                g = fastBitmap.getGreen(i);\r\n                b = fastBitmap.getBlue(i);\r\n\r\n                if (\r\n                        (r >= red.getMin()) && (r <= red.getMax()) && \r\n                        (g >= green.getMin()) && (g <= green.getMax()) && \r\n                        (b >= blue.getMin()) && (b <= blue.getMax())\r\n                ){\r\n                    fastBitmap.setRGB(i, r, g, b);\r\n                }\r\n                else{\r\n                    fastBitmap.setRGB(i, 0, 0, 0);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            throw new IllegalArgumentException(\"Color filtering only works in RGB images.\");\r\n        }\r\n    }\r\n}","binary":"false","copies":"1","sample_repo_name":"DiegoCatalano/Catalano-Framework","sample_ref":"refs/heads/master","sample_path":"Catalano.Android.Image/src/Catalano/Imaging/Filters/ColorFiltering.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f25afb3b63ed9573760ac3b01e976368e67d7b49","size":"5417","content":"/**\n * This Java Class is part of the Impro-Visor Application\n *\n * Copyright (C) 2011 Robert Keller and Harvey Mudd College\n *\n * Impro-Visor is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Impro-Visor is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * merchantability or fitness for a particular purpose.  See the\n * GNU General Public License for more details.\n *\n\n * You should have received a copy of the GNU General Public License\n * along with Impro-Visor; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\npackage imp.roadmap.cykparser;\n\nimport imp.roadmap.brickdictionary.ChordBlock;\nimport java.util.ArrayList;\n\n/** SubstituteList\n * A class describing a list of possible chords to replace a chord of a given\n * key and quality\n * \n * @author Xanda Schofield\n */\npublic class SubstituteList {\n    \n    // Data Members //\n    private ArrayList<String> names; // a list containing first the quality of\n                                     // each substitute chord\n    \n    private ArrayList<Long> keys;    // a list carrying keys corresponding to\n                                     // chord qualities in names\n   \n   /** Default constructor for a SubstituteList\n     * \n     * Constructs an empty SubstituteList\n     */\n    public SubstituteList() {\n        names = new ArrayList<String>();  \n        keys = new ArrayList<Long>();\n    }\n    \n    /** getNames\n     * Gets the list of all chord qualities contained in the SubstituteList\n     * @return an ArrayList of Strings describing the chord names\n     */\n    public ArrayList<String> getNames() {\n        return names;\n    }\n    \n    /** getKeys\n     * Gets the list of all chord keys pertaining the the chord qualities listed\n     * in the SubstituteList\n     * @return an ArrayList of longs describing the keys of the SubstituteList's\n     *         described chords\n     */\n    public ArrayList<Long> getKeys() {\n        return keys;\n    }\n    \n    /** getName\n     * Gets the ith chord quality in the SubstituteList\n     * @param i, the index of the chord\n     * @return a String of the chord quality\n     */\n    public String getName(int i) {\n        return names.get(i);\n    }\n    \n    /** getKey\n     * Gets the ith chord key in the SubstituteList\n     * @param i, the index of the chord\n     * @return a String of the chord quality\n     */\n    public long getKey(int i) {\n        return keys.get(i);\n    }\n    \n    /** length\n     * Returns the length of the SubstituteList\n     * @return an int of the SubstituteList's size; \n     */\n    public int length() {\n        assert(keys.size() == names.size());\n        return keys.size();\n    }\n    \n    /** add / 2\n     * Adds a single chord the appropriate difference away to a SubstituteList\n     * @param c, a Chord\n     * @param diff, the transposition required of the Chord\n     */\n    public void add(ChordBlock c, long diff) {\n        names.add(c.getSymbol());\n        keys.add(modKeys(c.getKey() + diff));\n    }\n    \n    /** addAll / 1\n     * Adds all chords as described by a SubstituteList to itself\n     * \n     * @param l, a filled in and appropriately transposed SubstituteList\n     */\n    public void addAll(SubstituteList l)\n    {\n        names.addAll(l.getNames());\n        keys.addAll(l.getKeys());\n    }\n    \n    /** hasMode / 1\n     * Checks if a given mode is contained in the list of chords\n     * \n     * @param mode, a String describing a mode (as a chord quality)\n     * @return whether mode is in the list of chord qualities\n     */\n    public boolean hasMode(String mode)\n    {\n        String tempMode = mode.toLowerCase();\n        ArrayList<String> tempList = new ArrayList<String>();\n        String temp;\n        for(String n : names) {\n            temp = n.toLowerCase();\n            tempList.add(temp);\n        }\n        return tempList.contains(tempMode);\n    }\n    \n    /** isEmpty\n     * Describes is a SubstituteList is empty\n     * @return a boolean describing whether the SubstituteRule hasMode no chords\n     */\n    public boolean isEmpty() {\n        if(names.isEmpty() || keys.isEmpty())\n            return true;\n        else\n            return false;\n    }\n    \n    /** nonEmpty\n     * Describes is a SubstituteList is nonempty\n     * @return a boolean describing whether the SubstituteRule hasMode any chords\n     */\n    public boolean nonEmpty() {\n        return !isEmpty();\n    }\n    \n   /** modKeys\n     * Converts a calculated key into a number between 0 and 11, inclusive\n     * @param i, the key's value as a long without applying a modulus\n     * @return the correct key as a long between 0 and 11\n     */\n    private long modKeys(long i) {\n        return (i + BinaryProduction.TOTAL_SEMITONES)\n                % BinaryProduction.TOTAL_SEMITONES;\n    }\n \n    public String toString()\n      {\n        StringBuilder buffer = new StringBuilder();\n        \n        buffer.append(\"(\");\n        for( String name: names )\n          {\n            buffer.append(name);\n            buffer.append(\" \");\n          }\n        buffer.append(\")\");\n        \n        return buffer.toString();\n      }\n    // end of SubstituteList class \n}\n","binary":"false","copies":"1","sample_repo_name":"Impro-Visor/Impro-Visor","sample_ref":"refs/heads/master","sample_path":"src/imp/roadmap/cykparser/SubstituteList.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"614ea059d63f44c9c71f9438f2746d510fdf766d","size":"4013","content":"package com.github.czyzby.autumn.processor.impl;\n\nimport com.badlogic.gdx.utils.Disposable;\nimport com.badlogic.gdx.utils.reflect.Field;\nimport com.github.czyzby.autumn.annotation.Dispose;\nimport com.github.czyzby.autumn.context.Context;\nimport com.github.czyzby.autumn.context.ContextDestroyer;\nimport com.github.czyzby.autumn.context.ContextInitializer;\nimport com.github.czyzby.autumn.context.error.ContextInitiationException;\nimport com.github.czyzby.autumn.processor.AbstractAnnotationProcessor;\nimport com.github.czyzby.kiwi.util.common.Exceptions;\nimport com.github.czyzby.kiwi.util.gdx.asset.lazy.Lazy;\nimport com.github.czyzby.kiwi.util.gdx.collection.disposable.DisposableArray;\nimport com.github.czyzby.kiwi.util.gdx.reflection.Reflection;\n\n/** Disposes of {@link Disposable} fields and components.\n *\n * @author MJ */\npublic class DisposeAnnotationProcessor extends AbstractAnnotationProcessor<Dispose> {\n    private final DisposableArray<Disposable> disposables = DisposableArray.newArray();\n\n    @Override\n    public Class<Dispose> getSupportedAnnotationType() {\n        return Dispose.class;\n    }\n\n    @Override\n    public boolean isSupportingFields() {\n        return true;\n    }\n\n    @Override\n    public void processField(final Field field, final Dispose annotation, final Object component, final Context context,\n            final ContextInitializer initializer, final ContextDestroyer contextDestroyer) {\n        disposables.add(new DisposableField(field, component));\n    }\n\n    @Override\n    public boolean isSupportingTypes() {\n        return true;\n    }\n\n    @Override\n    public void processType(final Class<?> type, final Dispose annotation, final Object component,\n            final Context context, final ContextInitializer initializer, final ContextDestroyer contextDestroyer) {\n        if (component instanceof Disposable) {\n            disposables.add((Disposable) component);\n        } else {\n            throw new ContextInitiationException(\n                    \"Dispose annotation should annotate only disposable components and fields. \" + type\n                            + \" is annotated, but does not seem to implement Disposable interface.\");\n        }\n    }\n\n    @Override\n    public void doAfterScanning(final ContextInitializer initializer, final Context context,\n            final ContextDestroyer destroyer) {\n        destroyer.addAction(new DisposingAction(disposables));\n    }\n\n    /** Disposes of selected disposable objects.\n     *\n     * @author MJ */\n    public static class DisposingAction implements Runnable {\n        private final DisposableArray<Disposable> disposables;\n\n        public DisposingAction(final DisposableArray<Disposable> disposables) {\n            this.disposables = disposables;\n        }\n\n        @Override\n        public void run() {\n            disposables.dispose();\n            disposables.clear();\n        }\n    }\n\n    /** Allows to dispose of a field's value.\n     *\n     * @author MJ */\n    public static class DisposableField implements Disposable {\n        private final Field field;\n        private final Object fieldOwner;\n\n        public DisposableField(final Field field, final Object fieldOwner) {\n            this.field = field;\n            this.fieldOwner = fieldOwner;\n        }\n\n        @Override\n        public void dispose() {\n            try {\n                final Object value = Reflection.getFieldValue(field, fieldOwner);\n                if (value instanceof Disposable) {\n                    ((Disposable) value).dispose();\n                } else if (value instanceof Lazy<?>) {\n                    final Lazy<?> lazy = (Lazy<?>) value;\n                    if (lazy.isInitialized() && lazy.get() instanceof Disposable) {\n                        ((Disposable) lazy.get()).dispose();\n                    }\n                }\n            } catch (final Exception exception) {\n                Exceptions.ignore(exception); // Ignored. Closing the application, invalid objects can occur.\n            }\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"czyzby/gdx-lml","sample_ref":"refs/heads/master","sample_path":"autumn/src/main/java/com/github/czyzby/autumn/processor/impl/DisposeAnnotationProcessor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"430e74b8b844b4435fc57467959ebb9e1bc3324e","size":"1347","content":"/*\n * Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.wso2.carbon.mss.internal.router;\n\nimport com.google.common.collect.ImmutableMap;\nimport org.wso2.carbon.mss.ServiceContext;\n\nimport java.util.Map;\n\n/**\n * BasicHandlerContext returns an empty runtime arguments.\n */\npublic class BasicServiceContext implements ServiceContext {\n    private final MicroserviceMetadata httpResourceHandler;\n\n    public BasicServiceContext(MicroserviceMetadata httpResourceHandler) {\n        this.httpResourceHandler = httpResourceHandler;\n    }\n\n    @Override\n    public Map<String, String> getRuntimeArguments() {\n        return ImmutableMap.of();\n    }\n\n    @Override\n    public MicroserviceMetadata getHttpResourceHandler() {\n        return httpResourceHandler;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"wso2/product-mss","sample_ref":"refs/heads/master","sample_path":"carbon-mss/components/org.wso2.carbon.mss/src/main/java/org/wso2/carbon/mss/internal/router/BasicServiceContext.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1c72856bedbbe6078bb1e9a336b84fc30893cc29","size":"419","content":"package ameba.inject;\n\nimport javax.inject.Provider;\n\n/**\n * @author icode\n */\npublic class DelegateProvider<T> implements Provider<T> {\n    private T target;\n\n    private DelegateProvider(T target) {\n        this.target = target;\n    }\n\n    public static <T> DelegateProvider<T> create(T target) {\n        return new DelegateProvider<>(target);\n    }\n\n    @Override\n    public T get() {\n        return target;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"icode/ameba","sample_ref":"refs/heads/master","sample_path":"src/main/java/ameba/inject/DelegateProvider.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"edc83e02341395cc56fccdc3685afd367e9a3fcc","size":"171","content":"/**\n * \n */\npackage jframe.umeng.service.impl;\n\n/**\n * @author dzh\n * @date Mar 27, 2016 8:59:34 PM\n * @since 1.0\n */\npublic class TestUmengServiceImpl {\n    \n    \n    \n}\n","binary":"false","copies":"1","sample_repo_name":"dzh/jframe","sample_ref":"refs/heads/master","sample_path":"jframe-plugin/jframe-umeng/src/test/java/jframe/umeng/service/impl/TestUmengServiceImpl.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"14ed5095419f78586b5e98decfacd103e61e151a","size":"2959","content":"/*\n * Copyright (c) 2016. Ian Michell\n */\n\npackage com.pungwe.cms.core.block.system;\n\nimport com.pungwe.cms.config.TestConfig;\nimport com.pungwe.cms.core.config.BaseApplicationConfig;\nimport com.pungwe.cms.core.element.RenderedElement;\nimport com.pungwe.cms.core.element.basic.HeaderElement;\nimport com.pungwe.cms.core.element.basic.PlainTextElement;\nimport com.pungwe.cms.test.AbstractWebTest;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration({TestConfig.class, BaseApplicationConfig.class})\n@WebAppConfiguration(\"src/main/resources\")\npublic class PageTitleBlockTest extends AbstractWebTest {\n\n    @Autowired\n    PageTitleBlock pageTitleBlock;\n\n    @Test\n    public void testEmptyTitle() throws Exception {\n        List<RenderedElement> renderedElementList = new ArrayList<>();\n        pageTitleBlock.build(renderedElementList, pageTitleBlock.getDefaultSettings(), new HashMap<>());\n        assertTrue(renderedElementList.isEmpty());\n    }\n\n    @Test\n    public void testWithTitle() throws Exception {\n        List<RenderedElement> renderedElementList = new ArrayList<>();\n        Map<String, Object> variables = new HashMap<>();\n        variables.put(\"title\", \"Title\");\n        pageTitleBlock.build(renderedElementList, pageTitleBlock.getDefaultSettings(), variables);\n        assertFalse(renderedElementList.isEmpty());\n        assertEquals(HeaderElement.class, renderedElementList.get(0).getClass());\n        assertEquals(1, ((HeaderElement) renderedElementList.get(0)).getLevel());\n        assertEquals(\"Title\", ((PlainTextElement) ((HeaderElement) renderedElementList.get(0)).getContent().get(0)).getText());\n    }\n\n    @Test\n    public void testWithTitleLevel2() throws Exception {\n        List<RenderedElement> renderedElementList = new ArrayList<>();\n        Map<String, Object> settings = new HashMap<>();\n        settings.put(\"header_level\", 2);\n        Map<String, Object> variables = new HashMap<>();\n        variables.put(\"title\", \"Title\");\n        pageTitleBlock.build(renderedElementList, settings, variables);\n        assertFalse(renderedElementList.isEmpty());\n        assertEquals(HeaderElement.class, renderedElementList.get(0).getClass());\n        assertEquals(2, ((HeaderElement)renderedElementList.get(0)).getLevel());\n        assertEquals(\"Title\", ((PlainTextElement)((HeaderElement) renderedElementList.get(0)).getContent().get(0)).getText());\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"thunderbird/pungwecms","sample_ref":"refs/heads/master","sample_path":"core/src/test/java/com/pungwe/cms/core/block/system/PageTitleBlockTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"05079f8d2dad0465f174cd5cb0d45a9ce19c9799","size":"3239","content":"/*\n * Copyright (c) 2011-2016, Peter Abeles. All Rights Reserved.\n *\n * This file is part of BoofCV (http://boofcv.org).\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage boofcv.alg.sfm.overhead;\n\nimport boofcv.alg.interpolate.InterpolatePixelS;\nimport boofcv.alg.interpolate.TypeInterpolate;\nimport boofcv.core.image.FactoryGImageGray;\nimport boofcv.core.image.GImageGray;\nimport boofcv.core.image.border.BorderType;\nimport boofcv.factory.interpolate.FactoryInterpolation;\nimport boofcv.struct.image.ImageGray;\nimport boofcv.struct.image.Planar;\nimport georegression.struct.point.Point2D_F32;\n\n/**\n * Implementation of {@link CreateSyntheticOverheadView} for {@link Planar}.\n *\n * @author Peter Abeles\n */\npublic class CreateSyntheticOverheadViewPL<T extends ImageGray>\n\t\textends CreateSyntheticOverheadView<Planar<T>>\n{\n\t// computes interpolated pixel value.\n\t// have one for each band so that you don't need to constantly change the image it's set to\n\tprivate InterpolatePixelS<T> interp[];\n\n\t// local variables\n\tprivate GImageGray output[];\n\n\t/**\n\t * Constructor which allows the interpolator for each band to be specified\n\t *\n\t * @param interp Interpolator for each band\n\t */\n\tpublic CreateSyntheticOverheadViewPL(InterpolatePixelS<T> interp[]) {\n\t\tthis.interp = interp;\n\t\toutput = new GImageGray[interp.length];\n\t}\n\n\t/**\n\t * Constructor which allows the type of interpolation to be specified.\n\t *\n\t * @param type Type of interpolation used\n\t * @param numBands Number of bands in the image.\n\t * @param imageType Image of each band\n\t */\n\tpublic CreateSyntheticOverheadViewPL(TypeInterpolate type , int numBands , Class<T> imageType ) {\n\t\tthis.interp = new InterpolatePixelS[numBands];\n\t\tfor( int i = 0; i < numBands; i++ ) {\n\t\t\tinterp[i] = FactoryInterpolation.createPixelS(0, 255, type, BorderType.EXTENDED, imageType);\n\t\t}\n\t\toutput = new GImageGray[interp.length];\n\t}\n\n\t/**\n\t * Computes overhead view of input image.  All pixels in input image are assumed to be on the ground plane.\n\t *\n\t * @param input (Input) Camera image.\n\t * @param output (Output) Image containing overhead view.\n\t */\n\tpublic void process(Planar<T> input, Planar<T> output) {\n\n\t\tint N = input.getNumBands();\n\t\tfor( int i = 0; i < N; i++ ) {\n\t\t\tthis.output[i] = FactoryGImageGray.wrap(output.getBand(i),this.output[i]);\n\t\t\tinterp[i].setImage(input.getBand(i));\n\t\t}\n\n\t\tint indexMap = 0;\n\t\tfor( int i = 0; i < output.height; i++ ) {\n\t\t\tint indexOut = output.startIndex + i*output.stride;\n\t\t\tfor( int j = 0; j < output.width; j++ , indexOut++,indexMap++ ) {\n\t\t\t\tPoint2D_F32 p = mapPixels[indexMap];\n\t\t\t\tif( p != null ) {\n\t\t\t\t\tfor( int k = 0; k < N; k++ ) {\n\t\t\t\t\t\tthis.output[k].set(indexOut, interp[k].get( p.x, p.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"lessthanoptimal/BoofCV","sample_ref":"refs/heads/master","sample_path":"main/sfm/src/boofcv/alg/sfm/overhead/CreateSyntheticOverheadViewPL.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"2341fac07d963226d3a14c195398d8182f7404c3","size":"1649","content":"package com.constellio.app.ui.handlers;\n\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.constellio.app.ui.application.ConstellioUI;\nimport com.constellio.app.ui.pages.base.BaseViewImpl;\nimport com.constellio.app.ui.util.ComponentTreeUtils;\nimport com.vaadin.server.DefaultErrorHandler;\nimport com.vaadin.server.ErrorEvent;\nimport com.vaadin.shared.ui.label.ContentMode;\nimport com.vaadin.ui.Label;\nimport com.vaadin.ui.UI;\n\n@SuppressWarnings(\"serial\")\npublic class ConstellioErrorHandler extends DefaultErrorHandler {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ConstellioErrorHandler.class);\n\n\t@Override\n\tpublic void error(ErrorEvent event) {\n\t\tThrowable throwable = event.getThrowable();\n\t\tLOGGER.error(throwable.getMessage(), throwable);\n\t\t\n\t\tUI ui = UI.getCurrent();\n\t\tBaseViewImpl view = ComponentTreeUtils.getFirstChild(ui, BaseViewImpl.class);\n\t\tif (view != null) {\n\t\t\tif (ConstellioUI.getCurrent().isProductionMode()) {\n\t\t\t\tview.navigateTo().home();\n\t\t\t} else {\n\t\t\t\tview.removeAllComponents();\n\n\t\t\t\tString indent = \"&nbsp;&nbsp;&nbsp;&nbsp;\";\n\t\t\t\tString cause = \"<b>An exception occured:</b><br/>\";\n\t\t\t\tString[] stackFrames = ExceptionUtils.getStackFrames(throwable);\n\t\t\t\tboolean first = true;\n\t\t\t\tfor (String stackFrame : stackFrames) {\n\t\t\t\t\tif (first) {\n\t\t\t\t\t\tcause += indent;\n\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcause += indent + indent;\n\t\t\t\t\t}\n\t\t\t\t\tcause += stackFrame + \"<br/>\";\n\t\t\t\t}\n\t\t\t\tLabel label = new Label(cause, ContentMode.HTML);\n\t\t\t\tlabel.setSizeFull();\n\n\t\t\t\tview.addComponent(label);\n\t\t\t\tdoDefault(event);\n\t\t\t}\n\t\t}\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"doculibre/constellio","sample_ref":"refs/heads/master","sample_path":"app/src/com/constellio/app/ui/handlers/ConstellioErrorHandler.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"20f0d33e6f6c1759f71165f2ff9a46abcf5ebf5d","size":"7308","content":"/*\n * #%L\n * SciJava Common shared library for SciJava software.\n * %%\n * Copyright (C) 2009 - 2016 Board of Regents of the University of\n * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck\n * Institute of Molecular Cell Biology and Genetics.\n * %%\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * \n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n * #L%\n */\n\npackage org.scijava.display;\n\nimport java.util.List;\n\nimport org.scijava.display.event.DisplayCreatedEvent;\nimport org.scijava.display.event.DisplayDeletedEvent;\nimport org.scijava.event.EventService;\nimport org.scijava.object.ObjectService;\nimport org.scijava.plugin.PluginInfo;\nimport org.scijava.plugin.PluginService;\nimport org.scijava.service.SciJavaService;\n\n/**\n * Interface for service that tracks available {@link Display}s.\n * \n * @author Barry DeZonia\n * @author Curtis Rueden\n * @author Grant Harris\n */\npublic interface DisplayService extends SciJavaService {\n\n\tEventService getEventService();\n\n\tObjectService getObjectService();\n\n\tPluginService getPluginService();\n\n\t/** Gets the currently active display (of any Display type). */\n\tDisplay<?> getActiveDisplay();\n\n\t/** Gets the most recently active display (of the specified Display type). */\n\t<D extends Display<?>> D getActiveDisplay(Class<D> displayClass);\n\n\t/**\n\t * Set the active display.\n\t * \n\t * @param display\n\t */\n\tvoid setActiveDisplay(Display<?> display);\n\n\t/** Gets the list of known display plugins. */\n\tList<PluginInfo<Display<?>>> getDisplayPlugins();\n\n\t/**\n\t * Gets the display plugin of the given class, or null if none.\n\t */\n\t<D extends Display<?>> PluginInfo<Display<?>> getDisplayPlugin(\n\t\tClass<D> pluginClass);\n\n\t/**\n\t * Gets the display plugin of the given class name, or null if none.\n\t * \n\t * @throws ClassCastException if the plugin found is not a display plugin.\n\t */\n\tPluginInfo<Display<?>> getDisplayPlugin(String className);\n\n\t/**\n\t * Gets the list of display plugins of the given type (e.g.,\n\t * {@code ImageDisplay.class}).\n\t */\n\t<DT extends Display<?>> List<PluginInfo<DT>> getDisplayPluginsOfType(\n\t\tClass<DT> type);\n\n\t/** Gets a list of all available displays. */\n\tList<Display<?>> getDisplays();\n\n\t/**\n\t * Gets a list of all available displays of the given type (e.g.,\n\t * {@code ImageDisplay.class}).\n\t */\n\t<DT extends Display<?>> List<DT> getDisplaysOfType(Class<DT> type);\n\n\t/** Gets a display by its name. */\n\tDisplay<?> getDisplay(String name);\n\n\t/** Gets a list of displays currently visualizing the given object. */\n\tList<Display<?>> getDisplays(Object o);\n\n\t/**\n\t * Checks whether the given name is already taken by an existing display.\n\t * \n\t * @param name The name to check.\n\t * @return true if the name is available, false if already taken.\n\t */\n\tboolean isUniqueName(String name);\n\n\t/**\n\t * Creates a display for the given object, publishing a\n\t * {@link DisplayCreatedEvent} to notify interested parties. In particular:\n\t * <ul>\n\t * <li>Visible UIs will respond to this event by showing the display.</li>\n\t * <li>The {@link ObjectService} will add the new display to its index, until\n\t * a corresponding {@link DisplayDeletedEvent} is later published.</li>\n\t * </ul>\n\t * <p>\n\t * To create a {@link Display} without publishing an event, see\n\t * {@link #createDisplayQuietly}.\n\t * </p>\n\t * \n\t * @param o The object for which a display should be created. The object is\n\t *          then added to the display.\n\t * @return Newly created {@code Display<?>} containing the given object. The\n\t *         Display is typed with ? rather than T matching the Object because\n\t *         it is possible for the Display to be a collection of some other\n\t *         sort of object than the one being added. For example, ImageDisplay\n\t *         is a {@code Display<DataView>} with the DataView wrapping a\n\t *         Dataset, yet the ImageDisplay supports adding Datasets directly,\n\t *         taking care of wrapping them in a DataView as needed.\n\t */\n\tDisplay<?> createDisplay(Object o);\n\n\t/**\n\t * Creates a display for the given object, publishing a\n\t * {@link DisplayCreatedEvent} to notify interested parties. In particular:\n\t * <ul>\n\t * <li>Visible UIs will respond to this event by showing the display.</li>\n\t * <li>The {@link ObjectService} will add the new display to its index, until\n\t * a corresponding {@link DisplayDeletedEvent} is later published.</li>\n\t * </ul>\n\t * <p>\n\t * To create a {@link Display} without publishing an event, see\n\t * {@link #createDisplayQuietly}.\n\t * </p>\n\t * \n\t * @param name The name to be assigned to the display.\n\t * @param o The object for which a display should be created. The object is\n\t *          then added to the display.\n\t * @return Newly created {@code Display<?>} containing the given object. The\n\t *         Display is typed with ? rather than T matching the Object because\n\t *         it is possible for the Display to be a collection of some other\n\t *         sort of object than the one being added. For example, ImageDisplay\n\t *         is a {@code Display<DataView>} with the DataView wrapping a\n\t *         Dataset, yet the ImageDisplay supports adding Datasets directly,\n\t *         taking care of wrapping them in a DataView as needed.\n\t */\n\tDisplay<?> createDisplay(String name, Object o);\n\n\t/**\n\t * Creates a display for the given object, without publishing a\n\t * {@link DisplayCreatedEvent}. Hence, the display will not be automatically\n\t * shown or tracked.\n\t * \n\t * @param o The object for which a display should be created. The object is\n\t *          then added to the display.\n\t * @return Newly created {@code Display<?>} containing the given object. The\n\t *         Display is typed with ? rather than T matching the Object because\n\t *         it is possible for the Display to be a collection of some other\n\t *         sort of object than the one being added. For example, ImageDisplay\n\t *         is a {@code Display<DataView>} with the DataView wrapping a\n\t *         Dataset, yet the ImageDisplay supports adding Datasets directly,\n\t *         taking care of wrapping them in a DataView as needed.\n\t */\n\tDisplay<?> createDisplayQuietly(Object o);\n\n}\n","binary":"false","copies":"1","sample_repo_name":"scijava/scijava-common","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/scijava/display/DisplayService.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ab9c5cda857335d3a01b3efbb4b236e2939f3d9b","size":"2233","content":"package com.eftimoff.idcardreader.components.idcard.constructor.bulgaria;\n\nimport com.eftimoff.idcardreader.R;\nimport com.eftimoff.idcardreader.components.idcard.constructor.EnumIdCardConstructor;\nimport com.eftimoff.idcardreader.models.IdCard;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\n\npublic class BulgarianIdCardConstructor extends EnumIdCardConstructor {\n\n    private static final String DATE_FORMATTER = \"ddMMyyyy\";\n    private final DateFormat dateFormat;\n\n    public BulgarianIdCardConstructor() {\n        dateFormat = new SimpleDateFormat(DATE_FORMATTER);\n    }\n\n    @Override\n    public int name() {\n        return R.string.constructor_bulgarian_old;\n    }\n\n    @Override\n    public String parseIdNumber(final String text) {\n        return text;\n    }\n\n    @Override\n    public String parseFirstName(final String text) {\n        return text;\n    }\n\n    @Override\n    public String parseLastName(final String text) {\n        return text;\n    }\n\n    @Override\n    public String parseMiddleName(final String text) {\n        return text;\n    }\n\n    @Override\n    public IdCard.Gender parseGender(final String text) {\n        if (text.equalsIgnoreCase(\"M\") || text.equalsIgnoreCase(\"\u041c\")) {\n            return IdCard.Gender.MALE;\n        }\n        return IdCard.Gender.FEMALE;\n    }\n\n    @Override\n    public String parsePersonalNumber(final String text) {\n        return text;\n    }\n\n    @Override\n    public long parseDateOfBirth(final String text) {\n        return parseDateQuietly(text);\n    }\n\n    @Override\n    public long parseExpirationDate(final String text) {\n        return parseDateQuietly(text);\n    }\n\n    @Override\n    protected int parseHeight(final String text) {\n        return 0;\n    }\n\n    @Override\n    protected long parseIdCreatedDate(final String text) {\n        return 0;\n    }\n\n    @Override\n    protected String parseAddress(final String text) {\n        return null;\n    }\n\n    @Override\n    protected String parsePlaceOfBirth(final String text) {\n        return null;\n    }\n\n    private long parseDateQuietly(final String text) {\n        try {\n            return dateFormat.parse(text).getTime() / 1000;\n        } catch (Exception e) {\n            return 0;\n        }\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"geftimov/android-id-card-reader","sample_ref":"refs/heads/master","sample_path":"ocr-library/src/main/java/com/eftimoff/idcardreader/components/idcard/constructor/bulgaria/BulgarianIdCardConstructor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"07de5fc6a4f9aed3fd3baf31781cd14eea494275","size":"5262","content":"/**\n * Licensed to JumpMind Inc under one or more contributor\n * license agreements.  See the NOTICE file distributed\n * with this work for additional information regarding\n * copyright ownership.  JumpMind Inc licenses this file\n * to you under the GNU General Public License, version 3.0 (GPLv3)\n * (the \"License\"); you may not use this file except in compliance\n * with the License.\n *\n * You should have received a copy of the GNU General Public License,\n * version 3.0 (GPLv3) along with this library; if not, see\n * <http://www.gnu.org/licenses/>.\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\npackage org.jumpmind.metl.core.runtime.component;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.commons.io.IOUtils;\nimport org.jumpmind.exception.IoException;\nimport org.jumpmind.metl.core.runtime.ControlMessage;\nimport org.jumpmind.metl.core.runtime.Message;\nimport org.jumpmind.metl.core.runtime.flow.ISendMessageCallback;\nimport org.jumpmind.metl.core.runtime.resource.IDirectory;\nimport org.jumpmind.properties.TypedProperties;\n\npublic class TextFileReader extends AbstractFileReader {\n\n    public static final String TYPE = \"Text File Reader\";\n\n    public static final String SETTING_ROWS_PER_MESSAGE = \"text.rows.per.message\";\n\n    public final static String SETTING_ENCODING = \"encoding\";\n\n    public static final String SETTING_HEADER_LINES_TO_SKIP = \"text.header.lines.to.skip\";\n\n    int textRowsPerMessage = 1000;\n\n    int textHeaderLinesToSkip;\n\n    String encoding = \"UTF-8\";\n    \n    @Override\n    protected void start() {\n    \tinit();\n        TypedProperties properties = getTypedProperties();\n        textHeaderLinesToSkip = properties.getInt(SETTING_HEADER_LINES_TO_SKIP, textHeaderLinesToSkip);\n        textRowsPerMessage = properties.getInt(SETTING_ROWS_PER_MESSAGE, textRowsPerMessage);\n        encoding = properties.get(SETTING_ENCODING, encoding);\n    }\n\n    @Override\n    public void handle(Message inputMessage, ISendMessageCallback callback, boolean unitOfWorkBoundaryReached) {    \t\n\t\tif ((PER_UNIT_OF_WORK.equals(runWhen) && inputMessage instanceof ControlMessage)\n\t\t\t\t|| (PER_MESSAGE.equals(runWhen) && !(inputMessage instanceof ControlMessage))) {\n\t\t\tList<String> files = getFilesToRead(inputMessage);\n    \t\tprocessFiles(files, inputMessage, callback, unitOfWorkBoundaryReached);\n    \t}\n    }\n\n    private void processFiles(List<String> files, Message inputMessage, ISendMessageCallback callback, boolean unitOfWorkLastMessage) {\n        int linesInMessage = 0;\n        ArrayList<String> payload = new ArrayList<String>();\n\n        filesRead.addAll(files);\n\n        for (String file : files) {\n            Map<String, Serializable> headers = new HashMap<>(1);\n            headers.put(\"source.file.path\", file);\n            InputStream inStream = null;\n            BufferedReader reader = null;\n            int currentFileLinesRead = 0;\n            String currentLine;\n            try {\n                info(\"Reading file: %s\", file);\n                IDirectory resource = (IDirectory) getResourceReference();\n                String filePath = resolveParamsAndHeaders(file, inputMessage);\n                inStream = resource.getInputStream(filePath, mustExist);\n                if (inStream != null) {\n                    reader = new BufferedReader(new InputStreamReader(inStream, encoding));\n    \n                    while ((currentLine = reader.readLine()) != null) {\n                        currentFileLinesRead++;\n                        if (linesInMessage == textRowsPerMessage) {\n                            callback.sendTextMessage(headers, payload);\n                            linesInMessage = 0;\n                            payload = new ArrayList<String>();\n                        }\n                        if (currentFileLinesRead > textHeaderLinesToSkip) {\n                            getComponentStatistics().incrementNumberEntitiesProcessed(threadNumber);\n                            payload.add(currentLine);\n                            linesInMessage++;\n                        }\n                    }\n                    if (payload.size() > 0) {\n                        callback.sendTextMessage(headers, payload);\n                    }\n                    linesInMessage = 0;\n                } else {\n                    info(\"File %s didn't exist, but Must Exist setting was false.  Continuing\",file);\n                }\n            } catch (IOException e) {\n                throw new IoException(\"Error reading from file \" + e.getMessage());\n            } finally {\n                // Closes the reader and the inStream.\n                IOUtils.closeQuietly(reader);\n            }\n\n            if (controlMessageOnEof) {\n            \tcallback.sendControlMessage(headers);\n            }\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"JumpMind/metl","sample_ref":"refs/heads/master","sample_path":"metl-core/src/main/java/org/jumpmind/metl/core/runtime/component/TextFileReader.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6f3d5e1a85e4ae96caf7260b688ae8cc6086d1fc","size":"10150","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.emergency.forms.dischargedetails_outcome;\r\n\r\nimport ims.framework.delegates.*;\r\n\r\nabstract public class Handlers implements ims.framework.UILogic, IFormUILogicCode\r\n{\r\n\tabstract protected void bindcmbGPLetterStatusLookup();\r\n\tabstract protected void defaultcmbGPLetterStatusLookupValue();\r\n\tabstract protected void bindcmbOutcomeLookup();\r\n\tabstract protected void defaultcmbOutcomeLookupValue();\r\n\tabstract protected void bindcmbCategoryLookup();\r\n\tabstract protected void defaultcmbCategoryLookupValue();\r\n\tabstract protected void onFormModeChanged();\r\n\tabstract protected void onMessageBoxClosed(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onFormOpen(Object[] args) throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onFormDialogClosed(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnRemoveBedRequestClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnUndoClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnBookAppointmentClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnCancelClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnSaveClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnEditClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnNewClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnMarkAsDeceasedClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onBtnEDClinicDetailsClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void oncmbGPLetterStatusValueSet(Object value);\r\n\tabstract protected void onBtnPrintDischargeClick() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void oncmbOutcomeValueSet(Object value);\r\n\tabstract protected void onCmbOutcomeValueChanged() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void onChkEnterDischargeOutcomeValueChanged() throws ims.framework.exceptions.PresentationLogicException;\r\n\tabstract protected void oncmbCategoryValueSet(Object value);\r\n\r\n\tpublic final void setContext(ims.framework.UIComponentEngine engine, GenForm form)\r\n\t{\r\n\t\tthis.engine = engine;\r\n\t\tthis.form = form;\r\n\r\n\t\tthis.form.setFormModeChangedEvent(new FormModeChanged()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle()\r\n\t\t\t{\r\n\t\t\t\tonFormModeChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.setMessageBoxClosedEvent(new MessageBoxClosed()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle(int messageBoxId, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonMessageBoxClosed(messageBoxId, result);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.setFormOpenEvent(new FormOpen()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle(Object[] args) throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tbindLookups();\r\n\t\t\t\tonFormOpen(args);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.setFormDialogClosedEvent(new FormDialogClosed()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle(ims.framework.FormName formName, ims.framework.enumerations.DialogResult result) throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonFormDialogClosed(formName, result);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnRemoveBedRequest().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnRemoveBedRequestClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnUndo().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnUndoClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnBookAppointment().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnBookAppointmentClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnCancel().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnCancelClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnSave().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnSaveClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnEdit().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnEditClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnNew().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnNewClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnMarkAsDeceased().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnMarkAsDeceasedClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnEDClinicDetails().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnEDClinicDetailsClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.cmbGPLetterStatus().setValueSetEvent(new ComboBoxValueSet()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle(Object value)\r\n\t\t\t{\r\n\t\t\t\toncmbGPLetterStatusValueSet(value);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.btnPrintDischarge().setClickEvent(new Click()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonBtnPrintDischargeClick();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.cmbOutcome().setValueSetEvent(new ComboBoxValueSet()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle(Object value)\r\n\t\t\t{\r\n\t\t\t\toncmbOutcomeValueSet(value);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.cmbOutcome().setValueChangedEvent(new ValueChanged()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonCmbOutcomeValueChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.chkEnterDischargeOutcome().setValueChangedEvent(new ValueChanged()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle() throws ims.framework.exceptions.PresentationLogicException\r\n\t\t\t{\r\n\t\t\t\tonChkEnterDischargeOutcomeValueChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.form.cmbCategory().setValueSetEvent(new ComboBoxValueSet()\r\n\t\t{\r\n\t\t\tprivate static final long serialVersionUID = 1L;\r\n\t\t\tpublic void handle(Object value)\r\n\t\t\t{\r\n\t\t\t\toncmbCategoryValueSet(value);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tprotected void bindLookups()\r\n\t{\r\n\t\tbindcmbGPLetterStatusLookup();\r\n\t\tbindcmbOutcomeLookup();\r\n\t\tbindcmbCategoryLookup();\r\n\t}\r\n\tprotected void rebindAllLookups()\r\n\t{\r\n\t\tbindcmbGPLetterStatusLookup();\r\n\t\tbindcmbOutcomeLookup();\r\n\t\tbindcmbCategoryLookup();\r\n\t}\r\n\tprotected void defaultAllLookupValues()\r\n\t{\r\n\t\tdefaultcmbGPLetterStatusLookupValue();\r\n\t\tdefaultcmbOutcomeLookupValue();\r\n\t\tdefaultcmbCategoryLookupValue();\r\n\t}\r\n\r\n\tpublic void free()\r\n\t{\r\n\t\tthis.engine = null;\r\n\t\tthis.form = null;\r\n\t}\r\n\tprotected ims.framework.UIComponentEngine engine;\r\n\tprotected GenForm form;\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/Emergency/src/ims/emergency/forms/dischargedetails_outcome/Handlers.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"305cabf5ae6adeff0bea5b9685866e832db5e8c5","size":"1589","content":"package org.develnext.jphp.ext.javafx.support.event;\n\nimport javafx.event.EventHandler;\nimport org.develnext.jphp.ext.javafx.support.EventProvider;\nimport org.develnext.jphp.ext.javafx.support.tray.notification.TrayNotification;\n\npublic class TrayNotificationEventProvider extends EventProvider<TrayNotification> {\n    public TrayNotificationEventProvider() {\n        setHandler(\"click\", new Handler() {\n            @Override\n            public void set(TrayNotification target, EventHandler eventHandler) {\n                target.setOnClick(eventHandler);\n            }\n\n            @Override\n            public EventHandler get(TrayNotification target) {\n                return target.getOnClick();\n            }\n        });\n\n        setHandler(\"show\", new Handler() {\n            @Override\n            public void set(TrayNotification target, EventHandler eventHandler) {\n                target.setOnShown(eventHandler);\n            }\n\n            @Override\n            public EventHandler get(TrayNotification target) {\n                return target.getOnShown();\n            }\n        });\n\n        setHandler(\"hide\", new Handler() {\n            @Override\n            public void set(TrayNotification target, EventHandler eventHandler) {\n                target.setOnDismiss(eventHandler);\n            }\n\n            @Override\n            public EventHandler get(TrayNotification target) {\n                return target.getOnDismissed();\n            }\n        });\n    }\n\n    @Override\n    public Class<TrayNotification> getTargetClass() {\n        return TrayNotification.class;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"jphp-compiler/develnext","sample_ref":"refs/heads/master","sample_path":"jphp-gui-ext/src/main/java/org/develnext/jphp/ext/javafx/support/event/TrayNotificationEventProvider.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"99c2e852ab74663c4c732b6e79ad5537eaf5ae5d","size":"2136","content":"/*******************************************************************************\r\n * Copyright (c) 2014 Bruno Medeiros and other Contributors.\r\n * All rights reserved. This program and the accompanying materials\r\n * are made available under the terms of the Eclipse Public License v1.0\r\n * which accompanies this distribution, and is available at\r\n * http://www.eclipse.org/legal/epl-v10.html\r\n *\r\n * Contributors:\r\n *     Bruno Medeiros - initial API and implementation\r\n *******************************************************************************/\r\npackage melnorme.utilbox.core;\r\n\r\nimport java.lang.annotation.Retention;\r\nimport java.lang.annotation.RetentionPolicy;\r\n\r\nimport melnorme.utilbox.misc.MiscUtil;\r\n\r\n/**\r\n * Utility markers and flags for commented code, or conditional blocks.\r\n */\r\npublic class DevelopmentCodeMarkers {\r\n\t\r\n\t// Marker for commented out buggy code\r\n\tpublic static final boolean BUGS_MODE = false; \r\n\t\r\n\t// Marker for non-implemented or non-working functionality\r\n\tpublic static final boolean UNIMPLEMENTED_FUNCTIONALITY = false;\r\n\t\r\n\t// Marker for disabled functionality\r\n\tpublic static final boolean DISABLED_FUNCTIONALITY = false;\r\n\t\r\n\t// Flag indicating we are running in tests mode\r\n\tpublic static boolean TESTS_MODE = false;\r\n\t\r\n\t// Flag indicating we are running in tests lightweight/quick mode\r\n\tpublic static final boolean TESTS_LITE_MODE = MiscUtil.getSystemProperty(\"\" + \"TestsLiteMode\", false); \r\n\t\r\n\t/**\r\n\t * Marker interface for test code that has a requirement on external, runtime dependencies,\r\n\t * such a program on the PATH, a system file, an unspecified runtime OSGI dependency, etc.\r\n\t */\r\n\tpublic static interface Tests_HasExternalDependencies {\r\n\t\t\r\n\t}\r\n\t\r\n\t/** Marker interface for code that uses reflection to access internal API (private fields, methods, etc.),\r\n\t * Such code is not safe and is likely to break, but in certain circumstances may be the only resort to \r\n\t * achieve some purpose. The @Deprecated tag is used to generate warnings in IDEs */\r\n\t@Retention(RetentionPolicy.CLASS)\r\n\t@Deprecated\r\n\tpublic @interface UsesReflectionToAccessInternalAPI {\r\n\t\t\r\n\t}\r\n\t\r\n}","binary":"false","copies":"1","sample_repo_name":"GoClipse/goclipse","sample_ref":"refs/heads/master","sample_path":"plugin_tooling/src-util/melnorme/utilbox/core/DevelopmentCodeMarkers.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b08efdc52dff59490dc276238288e94405d4fb01","size":"2055","content":"package com.officedrop.redis.failover;\n\nimport redis.clients.jedis.Protocol;\n\n/**\n * User: Maur\u00edcio Linhares\n * Date: 12/18/12\n * Time: 5:17 PM\n */\npublic class HostConfiguration {\n\n    private final String host;\n    private final int port;\n    private final int timeout;\n    private final int database;\n\n    public HostConfiguration(String host, int port) {\n        this( host, port, Protocol.DEFAULT_TIMEOUT, Protocol.DEFAULT_DATABASE );\n    }\n\n    public HostConfiguration(String host, int port, int timeout) {\n        this( host, port, timeout, Protocol.DEFAULT_DATABASE );\n    }\n\n    public HostConfiguration(String host, int port, int timeout, int database) {\n\n        if ( host == null || host.trim().isEmpty() ) {\n            throw new IllegalArgumentException(\"'host' can not be null\");\n        }\n\n        this.port = port;\n        this.timeout = timeout;\n        this.host = host;\n        this.database = database;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public int getTimeout() {\n        return this.timeout;\n    }\n\n    public int getDatabase() {\n        return this.database;\n    }\n\n    public String asHost() {\n        return String.format(\"%s:%s\", this.getHost(), this.getPort());\n    }\n\n\n    @Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (!(o instanceof HostConfiguration)) return false;\n\n        HostConfiguration that = (HostConfiguration) o;\n\n        if (port != that.port) return false;\n        if (database != that.database) return false;\n        if (!host.equals(that.host)) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = host.hashCode();\n        result = 31 * result + port;\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"HostConfiguration{\" +\n                \"host='\" + host + '\\'' +\n                \", port=\" + port +\n                \", timeout=\" + timeout +\n                '}';\n    }\n\n}","binary":"false","copies":"1","sample_repo_name":"officedrop/jedis_failover","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/officedrop/redis/failover/HostConfiguration.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b433bed63507fd1a6e4289f34f36361aa6818051","size":"2139","content":"package org.minicastle.asn1;\n\nimport java.io.IOException;\n\npublic class DERGeneralString \n    extends ASN1Object implements DERString\n{\n    private String string;\n\n    public static DERGeneralString getInstance(\n        Object obj) \n    {\n        if (obj == null || obj instanceof DERGeneralString) \n        {\n            return (DERGeneralString) obj;\n        }\n        if (obj instanceof ASN1OctetString) \n        {\n            return new DERGeneralString(((ASN1OctetString) obj).getOctets());\n        }\n        if (obj instanceof ASN1TaggedObject) \n        {\n            return getInstance(((ASN1TaggedObject) obj).getObject());\n        }\n        throw new IllegalArgumentException(\"illegal object in getInstance: \"\n                + obj.getClass().getName());\n    }\n\n    public static DERGeneralString getInstance(\n        ASN1TaggedObject obj, \n        boolean explicit) \n    {\n        return getInstance(obj.getObject());\n    }\n\n    public DERGeneralString(byte[] string) \n    {\n        char[] cs = new char[string.length];\n        for (int i = 0; i != cs.length; i++)\n        {\n            cs[i] = (char)(string[i] & 0xff);\n        }\n        this.string = new String(cs);\n    }\n\n    public DERGeneralString(String string) \n    {\n        this.string = string;\n    }\n    \n    public String getString() \n    {\n        return string;\n    }\n\n    public String toString()\n    {\n        return string;\n    }\n\n    public byte[] getOctets() \n    {\n        char[] cs = string.toCharArray();\n        byte[] bs = new byte[cs.length];\n        for (int i = 0; i != cs.length; i++) \n        {\n            bs[i] = (byte) cs[i];\n        }\n        return bs;\n    }\n    \n    void encode(DEROutputStream out) \n        throws IOException \n    {\n        out.writeEncoded(GENERAL_STRING, this.getOctets());\n    }\n    \n    public int hashCode() \n    {\n        return this.getString().hashCode();\n    }\n    \n    boolean asn1Equals(DERObject o)\n    {\n        if (!(o instanceof DERGeneralString)) \n        {\n            return false;\n        }\n        DERGeneralString s = (DERGeneralString) o;\n        return this.getString().equals(s.getString());\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"AcademicTorrents/AcademicTorrents-Downloader","sample_ref":"refs/heads/master","sample_path":"frostwire-merge/org/minicastle/asn1/DERGeneralString.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"944804d8fb55b217e129e30b7dafd9916d4b7733","size":"1360","content":"package apple.coregraphics;\n\n\nimport java.io.*;\nimport java.nio.*;\nimport java.util.*;\nimport com.google.j2objc.annotations.*;\nimport com.google.j2objc.runtime.*;\nimport com.google.j2objc.runtime.block.*;\nimport apple.audiotoolbox.*;\nimport apple.corefoundation.*;\nimport apple.coregraphics.*;\nimport apple.coreservices.*;\nimport apple.foundation.*;\nimport apple.uikit.*;\n\n\n/**\n * @since Available in iOS 2.0 and later.\n */\n@Library(\"CoreGraphics/CoreGraphics.h\")\n@Mapping(\"CGBitmapInfo\")\npublic final class CGBitmapInfo extends ObjCEnum {\n    \n    @GlobalConstant(\"kCGBitmapAlphaInfoMask\")\n    public static final long AlphaInfoMask = 31L;\n    @GlobalConstant(\"kCGBitmapFloatComponents\")\n    public static final long FloatComponents = 256L;\n    @GlobalConstant(\"kCGBitmapByteOrderMask\")\n    public static final long ByteOrderMask = 28672L;\n    @GlobalConstant(\"kCGBitmapByteOrderDefault\")\n    public static final long ByteOrderDefault = 0L;\n    @GlobalConstant(\"kCGBitmapByteOrder16Little\")\n    public static final long ByteOrder16Little = 4096L;\n    @GlobalConstant(\"kCGBitmapByteOrder32Little\")\n    public static final long ByteOrder32Little = 8192L;\n    @GlobalConstant(\"kCGBitmapByteOrder16Big\")\n    public static final long ByteOrder16Big = 12288L;\n    @GlobalConstant(\"kCGBitmapByteOrder32Big\")\n    public static final long ByteOrder32Big = 16384L;\n\n\n}\n","binary":"false","copies":"1","sample_repo_name":"Sellegit/j2objc","sample_ref":"refs/heads/master","sample_path":"runtime/src/main/java/apple/coregraphics/CGBitmapInfo.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"190a335ca55af57624eeb9e47a3a844f2096a680","size":"29562","content":"/*******************************************************************************\n * Copyright (c) 2014 Open Door Logistics (www.opendoorlogistics.com)\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the GNU Lesser Public License v3\n * which accompanies this distribution, and is available at http://www.gnu.org/licenses/lgpl.txt\n ******************************************************************************/\npackage com.opendoorlogistics.studio.tables.grid;\n\nimport gnu.trove.list.array.TIntArrayList;\nimport gnu.trove.list.array.TLongArrayList;\n\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Point;\nimport java.awt.event.ActionEvent;\nimport java.awt.image.BufferedImage;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.concurrent.Callable;\n\nimport javax.swing.DefaultCellEditor;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JTable;\nimport javax.swing.JTextField;\nimport javax.swing.event.ChangeEvent;\nimport javax.swing.event.ListSelectionEvent;\nimport javax.swing.event.TableColumnModelEvent;\nimport javax.swing.event.TableColumnModelListener;\nimport javax.swing.event.TableModelEvent;\nimport javax.swing.table.JTableHeader;\nimport javax.swing.table.TableColumn;\n\nimport net.sf.jasperreports.swing.JRViewer;\n\nimport com.opendoorlogistics.api.tables.ODLColumnType;\nimport com.opendoorlogistics.api.tables.ODLDatastore;\nimport com.opendoorlogistics.api.tables.ODLDatastoreUndoable;\nimport com.opendoorlogistics.api.tables.ODLTable;\nimport com.opendoorlogistics.api.tables.ODLTableAlterable;\nimport com.opendoorlogistics.api.tables.ODLTableDefinition;\nimport com.opendoorlogistics.api.tables.ODLTableReadOnly;\nimport com.opendoorlogistics.api.tables.TableFlags;\nimport com.opendoorlogistics.codefromweb.PackTableColumn;\nimport com.opendoorlogistics.core.tables.ColumnValueProcessor;\nimport com.opendoorlogistics.core.tables.utils.DatastoreCopier;\nimport com.opendoorlogistics.core.tables.utils.SortColumn;\nimport com.opendoorlogistics.core.tables.utils.TableUtils;\nimport com.opendoorlogistics.studio.internalframes.HasInternalFrames;\nimport com.opendoorlogistics.studio.internalframes.HasInternalFrames.FramePlacement;\nimport com.opendoorlogistics.studio.internalframes.ODLInternalFrame;\nimport com.opendoorlogistics.studio.tables.grid.GridEditPermissions.Permission;\nimport com.opendoorlogistics.studio.tables.grid.adapter.RowStyler;\nimport com.opendoorlogistics.studio.tables.grid.adapter.SwingAdapter;\nimport com.opendoorlogistics.utils.ui.SimpleAction;\n\npublic class ODLGridTable extends GridTable {\n\t/**\n\t * \n\t */\n\tprivate static final long serialVersionUID = 4204113069098514992L;\n\t//private final HasInternalFrames owner;\n\tprivate final ODLDatastoreUndoable<? extends ODLTableAlterable> globalDs;\n\tprivate final PreferredColumnWidths preferredColumnWidths;\n\n\tpublic ODLGridTable(ODLDatastore<? extends ODLTableReadOnly> ds, int tableId, boolean enableListeners,\n\t\t\tRowStyler rowStyler, ODLDatastoreUndoable<? extends ODLTableAlterable> globalDs, GridEditPermissions permissions\n\t\t\t) {\n\t\tthis(ds, tableId, enableListeners, rowStyler,globalDs, permissions, null);\n\t}\n\n\tpublic ODLGridTable(ODLDatastore<? extends ODLTableReadOnly> ds, int tableId, boolean enableListeners,\n\t\t\tRowStyler rowStyler,\n\t\t\tODLDatastoreUndoable<? extends ODLTableAlterable> globalDs, GridEditPermissions permissions,\n\t\t\tPreferredColumnWidths pcw) {\n\t\tsuper(new SwingAdapter(ds, tableId, enableListeners, permissions.get(Permission.setValues) == false,rowStyler), permissions);\n\t\tthis.preferredColumnWidths = pcw;\n\t\tthis.globalDs = globalDs;\n\t\tmyCellRenderer = new ODLCellRenderer();\n\t//\tthis.owner = owner;\n\n\t\t// replace editor to disable default validation as we do it later on\n\t\tfor (final ODLColumnType type : ODLColumnType.values()) {\n\t\t\tClass<?> cls = ColumnValueProcessor.getJavaClass(type);\n\t\t\tsetDefaultEditor(cls, new DefaultCellEditor(new JTextField()) {\n\t\t\t\t@Override\n\t\t\t\tpublic Object getCellEditorValue() {\n\t\t\t\t\t// ensure always of correct type or null..\n\t\t\t\t\treturn ColumnValueProcessor.convertToMe(type, super.getCellEditorValue());\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// do best first guess widths for the columns\n\t\tODLTableReadOnly table = getTable();\n\t\tfor (int i = 0; i < getColumnCount(); i++) {\n\t\t\tint width = -1;\n\t\t\tif (preferredColumnWidths != null && table != null && i > 0) {\n\t\t\t\twidth = preferredColumnWidths.get(tableId, table.getColumnImmutableId(i - 1));\n\t\t\t}\n\n\t\t\tif (width == -1) {\n\t\t\t\tPackTableColumn.packColumn(this, i, 2, i == 0 ? 30 : 0);\n\t\t\t} else {\n\t\t\t\tTableColumn col = getColumnModel().getColumn(i);\n\t\t\t\tcol.setPreferredWidth(width);\n\n\t\t\t}\n\t\t}\n\n\t\t// add listener to save when columns are resized\n\t\tgetColumnModel().addColumnModelListener(new TableColumnModelListener() {\n\n\t\t\t@Override\n\t\t\tpublic void columnSelectionChanged(ListSelectionEvent e) {\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void columnRemoved(TableColumnModelEvent e) {\n\t\t\t\tsaveColumnSizes();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void columnMoved(TableColumnModelEvent e) {\n\t\t\t\tsaveColumnSizes();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void columnMarginChanged(ChangeEvent e) {\n\t\t\t\tsaveColumnSizes();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void columnAdded(TableColumnModelEvent e) {\n\t\t\t\tsaveColumnSizes();\n\t\t\t}\n\t\t});\n\n\t\tupdateActions();\n\t}\n\n\tprivate void saveColumnSizes() {\n\t\tsaveColumnSizes(preferredColumnWidths,false);\n\t}\n\t\n\t\n\tprivate void saveColumnSizes(PreferredColumnWidths pcw, boolean saveCol0) {\n\t\tif(pcw!=null && getTable()!=null){\n\t\t\t\n\t\t\tif(saveCol0 && getColumnCount()>0){\n\t\t\t\tpcw.set(((SwingAdapter) getModel()).getTableId(), -1,  getColumnModel().getColumn(0).getWidth());\n\t\t\t}\n\t\t\t\n\t\t\tfor (int i = 1; i < getColumnCount(); i++) {\n\t\t\t\tint width = getColumnModel().getColumn(i).getWidth();\n\t\t\t\tint id = getTable().getColumnImmutableId(i - 1);\n\t\t\t\tpcw.set(((SwingAdapter) getModel()).getTableId(), id, width);\n\t\t\t}\n\t\t\t\t\n\t\t}\n\n\n\t}\n\t\n\t\n\tpublic void replaceData(ODLDatastore<? extends ODLTableReadOnly> ds, int tableId, RowStyler rowStyler) {\n\n\t\t// update the adapter\n\t\t((SwingAdapter) getModel()).replaceData(ds, tableId, getPermissions().get(Permission.setValues) == false, rowStyler);\n\n\t\t// revalidate etc...\n\t\ttableChanged(new TableModelEvent(getModel(), -1, Integer.MAX_VALUE, TableModelEvent.ALL_COLUMNS, TableModelEvent.UPDATE));\n\n\t\tupdateActions();\n\t}\n\n\t@Override\n\tpublic void tableChanged(TableModelEvent e) {\n\t\t\n\t\t// save column widths before anything changed\n\t\tPreferredColumnWidths tmpWidths = new PreferredColumnWidths();\n\t\tsaveColumnSizes(tmpWidths, true);\n\t\t\n\t\tsuper.tableChanged(e);\n\n\t\t// do automatic resizing of images. Get table using the model as\n\t\t// datastore reference not saved yet\n\t\tif (getModel() != null && SwingAdapter.class.isInstance(getModel())) {\n\t\t\tODLTableReadOnly odlTable = ((SwingAdapter) getModel()).getTable();\n\n\t\t\tif (odlTable != null) {\n\t\t\t\tint[] minColsSizes = new int[getColumnCount()];\n\t\t\t\tint[] maxColsSizes = new int[getColumnCount()];\n\t\t\t\tArrays.fill(maxColsSizes, Integer.MAX_VALUE);\n\n\t\t\t\t// Init min and max sizes based on previous sizes..\n\t\t\t\tint savedWidth = tmpWidths.get(odlTable.getImmutableId(), -1);\n\t\t\t\tif(savedWidth!=-1){\n\t\t\t\t\tminColsSizes[0] = savedWidth;\n\t\t\t\t\tmaxColsSizes[0] = savedWidth;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < odlTable.getColumnCount() && (i+1)<minColsSizes.length; i++) {\n\t\t\t\t\tsavedWidth = tmpWidths.get(odlTable.getImmutableId(), odlTable.getColumnImmutableId(i));\n\t\t\t\t\tif(savedWidth!=-1){\n\t\t\t\t\t\tminColsSizes[i+1] = savedWidth;\n\t\t\t\t\t\tmaxColsSizes[i+1] = savedWidth;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// get image cols\n\t\t\t\tTIntArrayList imageCols = new TIntArrayList();\n\t\t\t\tfor (int i = 0; i < odlTable.getColumnCount(); i++) {\n\t\t\t\t\tif (odlTable.getColumnType(i) == ODLColumnType.IMAGE) {\n\t\t\t\t\t\timageCols.add(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// get first and last changed row\n\t\t\t\tint minRow = 0;\n\t\t\t\tint lastRow = getRowCount() - 1;\n\t\t\t\tif (e.getFirstRow() != -1 && e.getFirstRow() != Integer.MAX_VALUE && e.getFirstRow() < odlTable.getRowCount() - 1) {\n\t\t\t\t\tminRow = e.getFirstRow();\n\t\t\t\t}\n\t\t\t\tif (e.getLastRow() != -1 && e.getLastRow() != Integer.MAX_VALUE && e.getLastRow() < odlTable.getRowCount() - 1) {\n\t\t\t\t\tlastRow = e.getLastRow();\n\t\t\t\t}\n\n\t\t\t\t// Make min sizes wider based on image size\n\t\t\t\tint nbImage = imageCols.size();\n\t\t\t\tif (nbImage > 0) {\n\t\t\t\t\tfor (int row = minRow; row <= lastRow; row++) {\n\t\t\t\t\t\tint height = DEFAULT_ROW_HEIGHT;\n\n\t\t\t\t\t\tif (row < odlTable.getRowCount()) {\n\t\t\t\t\t\t\tfor (int i = 0; i < nbImage; i++) {\n\t\t\t\t\t\t\t\tint col = imageCols.get(i);\n\t\t\t\t\t\t\t\tBufferedImage img = (BufferedImage) odlTable.getValueAt(row, col);\n\t\t\t\t\t\t\t\tif (img != null) {\n\t\t\t\t\t\t\t\t\theight = Math.max(height, img.getHeight());\n\n\t\t\t\t\t\t\t\t\t// keep a track of minimum column sizes\n\t\t\t\t\t\t\t\t\tint viewerCol = col + 1;\n\t\t\t\t\t\t\t\t\tminColsSizes[viewerCol] = Math.max(minColsSizes[viewerCol], img.getWidth());\n\t\t\t\t\t\t\t\t\tmaxColsSizes[viewerCol] = Math.max(maxColsSizes[viewerCol], img.getWidth());\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// change row height if needed\n\n\t\t\t\t\t\tif (getRowHeight(row) != height) {\n\t\t\t\t\t\t\tfinal int finalRow = row;\n\t\t\t\t\t\t\tfinal int finalHeight = height;\n\t\t\t\t\t\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\tsetRowHeight(finalRow, finalHeight);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tsetRowHeight(DEFAULT_ROW_HEIGHT);\n\t\t\t\t}\n\n\t\t\t\tfor (int col = 0; col < minColsSizes.length; col++) {\n\t\t\t\t\t\n\t\t\t\t\t// resize if the current width is less than the min width\n\t\t\t\t\tint currentWidth =getColumnModel().getColumn(col).getWidth(); \n\t\t\t\t\tif ( currentWidth< minColsSizes[col]) {\n\t\t\t\t\t\tfinal int finalCol = col;\n\t\t\t\t\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\tgetColumnModel().getColumn(finalCol).setPreferredWidth( minColsSizes[finalCol]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse if(currentWidth > maxColsSizes[col]){\n\t\t\t\t\t\tfinal int finalCol = col;\n\t\t\t\t\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\tgetColumnModel().getColumn(finalCol).setPreferredWidth( maxColsSizes[finalCol]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tupdateActions();\n\t}\n\n\tprotected void initSubclassActions(GridEditPermissions permissions) {\n\t\tsuper.initSubclassActions(permissions);\n\n\t\t// add separator\n\t\tif (actions.size() > 0 && actions.get(actions.size() - 1) != null) {\n\t\t\tactions.add(null);\n\t\t}\n\n\t\tactions.add(new SimpleAction(\"Insert column to the left\", \"Insert column to the left\", \"insert-table-column-to-left.png\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tinsertCols(true);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void updateEnabledState() {\n\t\t\t\tsetEnabled(getPermissions().get(Permission.alterStructure));\n\t\t\t}\n\t\t});\n\n\t\tactions.add(new SimpleAction(\"Insert column to the right\", \"Insert column to the right\", \"insert-table-column-to-right.png\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tinsertCols(false);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void updateEnabledState() {\n\t\t\t\tsetEnabled(getPermissions().get(Permission.alterStructure));\n\t\t\t}\n\t\t});\n\n\t\tactions.add(new SimpleAction(\"Delete column(s)\", \"Delete selected col(s)\", \"deletecolumns.png\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tdeleteColumns();\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void updateEnabledState() {\n\t\t\t\tsetEnabled(getPermissions().get(Permission.alterStructure));\n\t\t\t}\n\t\t});\n\n\t\tactions.add(new SimpleAction(\"Rename column\", \"Rename column\", \"table-column-rename.png\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tfinal int col = getValidSingleColumnODLFrame();\n\t\t\t\tif (col != -1) {\n\t\t\t\t\tfinal String s = getColumnNameDialog(getTable().getColumnName(col));\n\t\t\t\t\tif (s != null) {\n\t\t\t\t\t\trunTransaction(new Callable<Boolean>() {\n\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\t\t\t\t\tODLTableAlterable table = getAlterableTable();\n\t\t\t\t\t\t\t\tif (!DatastoreCopier.modifyColumnWithoutTransaction(col, col, s, table.getColumnType(col), table.getColumnFlags(col), table)) {\n\t\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(ODLGridTable.this.getParent(), \"Could not rename column; named already used.\");\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void updateEnabledState() {\n\t\t\t\tsetEnabled(getPermissions().get(Permission.alterStructure));\n\t\t\t}\n\n\t\t});\n\n\t\tactions.add(new SimpleAction(\"Move column left\", \"Move column left\", \"arrow-left-2.png\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tfinal int col = getValidSingleColumnODLFrame();\n\t\t\t\tif (col > 0) {\n\t\t\t\t\trunTransaction(new Callable<Boolean>() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\t\t\t\tODLTableAlterable table = getAlterableTable();\n\t\t\t\t\t\t\tDatastoreCopier.modifyColumnWithoutTransaction(col, col - 1, table.getColumnName(col), table.getColumnType(col), table.getColumnFlags(col), table);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void updateEnabledState() {\n\t\t\t\tsetEnabled(getPermissions().get(Permission.alterStructure));\n\t\t\t}\n\t\t});\n\n\t\tactions.add(new SimpleAction(\"Move column right\", \"Move column right\", \"arrow-right-2.png\") {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\t@Override\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tfinal int col = getValidSingleColumnODLFrame();\n\t\t\t\tif (col != -1 && col < getTable().getColumnCount() - 1) {\n\n\t\t\t\t\trunTransaction(new Callable<Boolean>() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\t\t\t\tODLTableAlterable table = getAlterableTable();\n\t\t\t\t\t\t\tDatastoreCopier.modifyColumnWithoutTransaction(col, col + 1, table.getColumnName(col), table.getColumnType(col), table.getColumnFlags(col), table);\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void updateEnabledState() {\n\t\t\t\tsetEnabled(getPermissions().get(Permission.alterStructure));\n\t\t\t}\n\t\t});\n\n\t}\n\n\t@Override\n\tpublic String getSelectedAsTabbedText() {\n\n\t\tList<List<Point>> pointsTable = selectionManager.getSelectedPoints();\n\n\t\tStringBuilder builder = new StringBuilder();\n\t\tif (pointsTable.size() > 0) {\n\t\t\t// create hashset of all selected points\n\t\t\tHashSet<Point> selected = new HashSet<>();\n\t\t\tfor (List<Point> list : pointsTable) {\n\t\t\t\tselected.addAll(list);\n\t\t\t}\n\n\t\t\t// get correct y range\n\t\t\tPoint min = new Point(pointsTable.get(0).get(0));\n\t\t\tPoint max = new Point(min);\n\t\t\tmax.y = pointsTable.get(pointsTable.size() - 1).get(0).y;\n\n\t\t\t// now update x range from all rows\n\t\t\tfor (List<Point> row : pointsTable) {\n\t\t\t\tint x1 = row.get(0).x;\n\t\t\t\tif (x1 < min.x) {\n\t\t\t\t\tmin.x = x1;\n\t\t\t\t}\n\t\t\t\tint x2 = row.get(row.size() - 1).x;\n\t\t\t\tif (x2 > max.x) {\n\t\t\t\t\tmax.x = x2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// loop over all\n\t\t\tfor (int row = min.y; row <= max.y; row++) {\n\t\t\t\tfor (int col = min.x; col <= max.x; col++) {\n\t\t\t\t\tif (selected.contains(new Point(col, row))) {\n\t\t\t\t\t\t\n\t\t\t\t\t\t// get the actual value, remembering to -1 from the column\n\t\t\t\t\t\tString s = TableUtils.getValueAsString(getTable(), row, col - 1);\n\t\t\t\t\t\tif (s != null) {\n\t\t\t\t\t\t\tbuilder.append(s);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (col < max.x) {\n\t\t\t\t\t\tbuilder.append(\"\\t\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (row < max.y) {\n\t\t\t\t\tbuilder.append(System.lineSeparator());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn builder.toString();\n\t}\n\n\t// private void showCustomReport() {\n\t// ODLTableReadOnly table = getTable();\n\t// if (table != null) {\n\t// try {\n\t// File file = ReportFileBrowsers.chooseJRXMLFile(PrefKey.LAST_GRID_VIEW_JRXML, this);\n\t// if(file==null){\n\t// return;\n\t// }\n\t// JasperPrint printable = new SingleLevelReportBuilder().buildSingleTablePrintable(table, JRXmlLoader.load(file),null);\n\t// boolean isPortrait = printable.getPageHeight() > printable.getPageWidth();\n\t// JRViewer viewer = new JRViewer(printable);\n\t// showReportViewer(isPortrait, viewer);\n\t// } catch (Throwable e) {\n\t// ExecutionReportImpl report = new ExecutionReportImpl();\n\t// report.setFailed(e);\n\t// report.setFailed(\"An error occurred when generating the report using custom jrxml file.\");\n\t// ExecutionReportDialog.show((JFrame) SwingUtilities.getWindowAncestor(this), \"Error generating report\", report);\n\t// }\n\t// }\n\t// }\n\n\t// private void showReport(boolean portrait) {\n\t// ODLTableReadOnly table = getTable();\n\t// if (table != null) {\n\t// try {\n\t// JRViewer viewer = new SingleLevelReportBuilder().buildSingleTableViewable(table, portrait ? OrientationEnum.PORTRAIT\n\t// : OrientationEnum.LANDSCAPE, false,null);\n\t// showReportViewer(portrait, viewer);\n\t// } catch (Throwable e) {\n\t// JOptionPane.showMessageDialog(getParent(), \"An error occurred when generating the report.\");\n\t// }\n\t// }\n\t// }\n\n//\tprivate void showReportViewer(boolean portrait, JRViewer viewer) {\n//\t\tODLInternalFrame internalFrame = new ODLInternalFrame(\"Report of \" + getTableName());\n//\t\tinternalFrame.setContentPane(viewer);\n//\t\tinternalFrame.setPreferredSize(portrait ? new Dimension(600, 800) : new Dimension(800, 600));\n//\t\tinternalFrame.pack();\n//\t\tinternalFrame.setVisible(true);\n//\t\towner.addInternalFrame(internalFrame, FramePlacement.AUTOMATIC);\n//\t}\n\n\tprivate class ImageRenderer extends JPanel {\n\t\tprivate BufferedImage image;\n\n\t\t@Override\n\t\tprotected void paintComponent(Graphics g) {\n\t\t\tsuper.paintComponent(g);\n\t\t\tg.drawImage(image, 0, 0, null);\n\t\t}\n\n\t}\n\n\tprotected class ODLCellRenderer extends CellRenderer {\n\t\tprivate final Color afterTable = new Color(230, 230, 230);\n\t\tprivate final ImageRenderer imageRenderer = new ImageRenderer();\n\t\tprivate final JLabel colourLabel = createLabel();\n\n\t\tpublic ODLCellRenderer() {\n\t\t\tsuper(false);\n\t\t}\n\n\t\t@Override\n\t\tpublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\n\t\t\tJLabel ret = prepareLabel(value, isSelected, hasFocus, row, column);\n\n\t\t\tODLTableReadOnly odlTable = getTable();\n\t\t\tif (odlTable != null && column > 0) {\n\n\t\t\t\tif (odlTable.getColumnType(column - 1) == ODLColumnType.IMAGE && value != null) {\n\t\t\t\t\t// display image differently\n\t\t\t\t\tif (isSelected) {\n\t\t\t\t\t\tret.setText(\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\timageRenderer.image = (BufferedImage) value;\n\t\t\t\t\t\treturn imageRenderer;\n\t\t\t\t\t}\n\t\t\t\t} else if (odlTable.getColumnType(column - 1) == ODLColumnType.COLOUR && !isSelected && colourLabel != null && value != null) {\n\t\t\t\t\t// display colour differently\n\t\t\t\t\tret = colourLabel;\n\t\t\t\t\tret.setText(value.toString());\n\t\t\t\t\tColor col = (Color) getTable().getValueAt(row, column - 1);\n\t\t\t\t\t// ret.setForeground(col);\n\t\t\t\t\tif (col.getRed() + col.getGreen() + col.getBlue() < 382) {\n\t\t\t\t\t\tret.setForeground(Color.WHITE);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tret.setForeground(Color.BLACK);\n\t\t\t\t\t}\n\t\t\t\t\tret.setBackground(col);\n\t\t\t\t}\n\t\t\t\telse if(!isSelected){\n\t\t\t\t\t// check for different colour\n\t\t\t\t\tColor rowColor = ((SwingAdapter)getModel()).getRowColour(row);\n\t\t\t\t\tif(rowColor!=null){\n\t\t\t\t\t\tret.setForeground(rowColor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// linked rows appear in italics\n\t\t\tif(odlTable!=null && ret.getFont()!=null){\n\t\t\t\tif((odlTable.getRowFlags(odlTable.getRowId(row))& TableFlags.FLAG_LINKED_EXCEL_READ_ONLY_DATA) == TableFlags.FLAG_LINKED_EXCEL_READ_ONLY_DATA  ){\n\t\t\t\t\tret.setFont(ret.getFont().deriveFont(Font.ITALIC));\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// set anything after the last row to be grey\n\t\t\tif (isSelected == false && row >= getTable().getRowCount()) {\n\t\t\t\tret.setBackground(afterTable);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\n\t}\n\n\tint getLastFilledRowNumber() {\n\t\tODLTableReadOnly table = getTable();\n\t\tif (table != null) {\n\t\t\treturn table.getRowCount() - 1;\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate ODLTableReadOnly getTable() {\n\t\tif(getModel()!=null && SwingAdapter.class.isInstance(getModel())){\t\t\t\n\t\t\treturn ((SwingAdapter) getModel()).getTable();\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate ODLTable getWritableTable() {\n\t\treturn (ODLTable) getTable();\n\t}\n\n\tprivate ODLTableAlterable getAlterableTable() {\n\t\treturn (ODLTableAlterable) getTable();\n\t}\n\n\t@Override\n\tprotected void startTransaction() {\n\t\tif (globalDs != null) {\n\t\t\tglobalDs.startTransaction();\n\t\t}\n\t}\n\n\t@Override\n\tprotected void endTransaction() {\n\t\tif (globalDs != null) {\n\t\t\tif (globalDs.isInTransaction()) {\n\t\t\t\tglobalDs.endTransaction();\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings(\"rawtypes\")\n\t@Override\n\tprotected void rollbackTransaction() {\n\t\tif (globalDs != null) {\n\t\t\tglobalDs.rollbackTransaction();\n\t\t}\n\t}\n\n\t// @SuppressWarnings(\"rawtypes\")\n\t// @Override\n\t// protected void undo() {\n\t// if (globalDs != null) {\n\t// globalDs.undo();\n\t// }\n\t// }\n\t//\n\t// @SuppressWarnings(\"rawtypes\")\n\t// @Override\n\t// protected void redo() {\n\t// if (globalDs != null) {\n\t// globalDs.redo();\n\t// }\n\t// }\n\n\t@Override\n\tpublic void pasteTabbedText(final String s) {\n\t\trunTransaction(new Callable<Boolean>() {\n\n\t\t\t@Override\n\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\tint lastRow = Integer.MAX_VALUE;\n\t\t\t\tif (getPermissions().get(Permission.createRows) == false) {\n\t\t\t\t\tlastRow = getTable().getRowCount() - 1;\n\t\t\t\t}\n\t\t\t\tPasteLogic.paste(s, selectionManager.getSelectedPoints(), lastRow, getModel());\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tprotected void deleteColumns() {\n\n\t\tfinal List<Integer> list = selectionManager.getSelectedColumns();\n\t\tif (list.size() == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\trunTransaction(new Callable<Boolean>() {\n\n\t\t\t@Override\n\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\tODLTableAlterable table = getAlterableTable();\n\t\t\t\tfor (int i = list.size() - 1; i >= 0; i--) {\n\t\t\t\t\tint col = list.get(i);\n\t\t\t\t\ttable.deleteColumn(col - 1);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t}\n\n\t// @Override\n\t// protected List<List<Point>> getSelectedPoints() {\n\t//\n\t// List<List<Point>> pointsTable = new ArrayList<>();\n\t// switch (selectionState) {\n\t// case ROW:\n\t// case ROW_EXT:\n\t// int nbCols = getModel().getColumnCount();\n\t// for (int row : rowHeaderSel.getSelectedRows()) {\n\t// ArrayList<Point> pointsRow = new ArrayList<>();\n\t//\n\t// // ignore first column as its the row number\n\t// for (int i = 1; i < nbCols; i++) {\n\t// pointsRow.add(new Point(i, row));\n\t// }\n\t// if (pointsRow.size() > 0) {\n\t// pointsTable.add(pointsRow);\n\t// }\n\t// }\n\t// break;\n\t//\n\t// case SHEET:\n\t// case SHEET_EXT:\n\t// pointsTable = sheetSel.getSelectedPoints();\n\t// break;\n\t//\n\t// default:\n\t// throw new RuntimeException();\n\t// }\n\t//\n\t// return pointsTable;\n\t// }\n\n\t@Override\n\tprotected void insertCols(boolean toLeft) {\n\t\tList<Integer> list = PasteLogic.getOrderedDistinctColumns(PasteLogic.toSingleList(selectionManager.getSelectedPoints()));\n\t\tif (list.size() > 1) {\n\t\t\tshowMoreThanOneSelectedColumnWarning();\n\t\t\treturn;\n\t\t}\n\n\t\tfinal ODLTableAlterable table = getAlterableTable();\n\t\tint col = table.getColumnCount();\n\t\tif (list.size() == 0) {\n\t\t\ttoLeft = false;\n\t\t} else {\n\t\t\tcol = list.get(0);\n\t\t}\n\n\t\tfinal String s = getColumnNameDialog(\"New column\");\n\t\tif (s == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal boolean finalToleft = toLeft;\n\t\tfinal int finalCol = col;\n\t\tboolean inserted = runTransaction(new Callable<Boolean>() {\n\n\t\t\t@Override\n\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\treturn table.insertColumn(-1, finalToleft ? finalCol - 1 : finalCol, s, ODLColumnType.STRING, 0, false);\n\t\t\t}\n\t\t});\n\n\t\tif (!inserted) {\n\t\t\tJOptionPane.showMessageDialog(getParent(), \"Could not insert column; named already used.\");\n\t\t}\n\t}\n\n\t/**\n\t * Get the single selected column index in the ODL frame. Report error if incorrect columns selected.\n\t * \n\t * @return\n\t */\n\tprivate int getValidSingleColumnODLFrame() {\n\t\tList<Integer> list = selectionManager.getSelectedColumns();\n\t\tif (list.size() == 0) {\n\t\t\tJOptionPane.showMessageDialog(getParent(), \"No column selected\");\n\t\t\treturn -1;\n\t\t} else if (list.size() > 1) {\n\t\t\tshowMoreThanOneSelectedColumnWarning();\n\t\t\treturn -1;\n\t\t}\n\n\t\tint ret = list.get(0);\n\t\tret--;\n\t\tif (ret < 0 || ret >= getTable().getColumnCount()) {\n\t\t\tJOptionPane.showMessageDialog(getParent(), \"Invalid column selected\");\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tprivate void showMoreThanOneSelectedColumnWarning() {\n\t\tJOptionPane.showMessageDialog(getParent(), \"Only one column should be selected\");\n\t}\n\n\tprivate String getColumnNameDialog(String current) {\n\t\tString s = JOptionPane.showInputDialog(getParent(), \"Enter new column name\", current);\n\t\treturn s;\n\t}\n\n\t@Override\n\tprotected void insertDeleteRows(final boolean inserting) {\n\t\tfinal List<List<Point>> selected = selectionManager.getSelectedPoints();\n\t\tif (selected == null || selected.size() == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\trunTransaction(new Callable<Boolean>() {\n\n\t\t\t@Override\n\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\tODLTable table = getWritableTable();\n\t\t\t\tfor (int i = selected.size() - 1; i >= 0; i--) {\n\t\t\t\t\tList<Point> rowList = selected.get(i);\n\t\t\t\t\tint row = rowList.get(0).y;\n\t\t\t\t\tif (inserting) {\n\t\t\t\t\t\ttable.insertEmptyRow(row, -1);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (row < table.getRowCount()) {\n\t\t\t\t\t\t\ttable.deleteRow(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\n\t}\n\n\t@Override\n\tpublic String getTableName() {\n\t\treturn ((SwingAdapter) getModel()).getTableName();\n\t}\n\n\t@Override\n\tprotected void sort(final SortColumn[] sortCols) {\n\t\trunTransaction(new Callable<Boolean>() {\n\n\t\t\t@Override\n\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\tODLTable table = getWritableTable();\n\t\t\t\tSortColumn[] conv = new SortColumn[sortCols.length];\n\t\t\t\tfor (int i = 0; i < conv.length; i++) {\n\t\t\t\t\tconv[i] = new SortColumn(sortCols[i].getIndx() - 1, sortCols[i].isAscending());\n\t\t\t\t}\n\t\t\t\tTableUtils.sort(table, conv);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t}\n\n\t// public void setBestFit(){\n\t// // do columns\n\t// int colSum=0;\n\t// for(int i =0 ;i<getColumnCount() ; i++){\n\t// PackTableColumn.packColumn(this,i, 6);\n\t// colSum += getColumnModel().getColumn(i).getPreferredWidth();\n\t// }\n\t//\n\t// // how many rows are there really? (Swing adapter adds 'virtual rows').\n\t// int nbRows=0;\n\t// ODLTableReadOnly table = getTable();\n\t// if(table!=null){\n\t// nbRows = table.getRowCount();\n\t// }\n\t//\n\t// // will never want more than 100 on-screen anyway\n\t// nbRows = Math.min(100, nbRows);\n\t//\n\t// // count the height\n\t// long rowSum = getTableHeader().getHeight();\n\t// for(int i =0 ; i< nbRows; i++){\n\t// rowSum += getRowHeight(i);\n\t// }\n\t// // include extra one for a bit of padding..\n\t// rowSum += getRowHeight();\n\t//\n\t// // never do more than 600?\n\t// rowSum = Math.min(rowSum, 600);\n\t//\n\t// setPreferredSize(new Dimension(colSum,(int) rowSum));\n\t// repaint();\n\t// }\n\n\t@Override\n\tprotected void copyTable() {\n\t\tif (getTable() != null) {\n\t\t\tString name = getTable().getName();\n\t\t\tfinal String s = JOptionPane.showInputDialog(getParent(), \"Enter new table name\", \"Copy of \" + name);\n\t\t\tif (s != null) {\n\t\t\t\trunTransaction(new Callable<Boolean>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic Boolean call() throws Exception {\n\t\t\t\t\t\tif (DatastoreCopier.copyTable(getTable(), globalDs, s) == null) {\n\t\t\t\t\t\t\tthrow new RuntimeException(\"Could not copy the table.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// ODLTableReadOnly copy =DatastoreCopier.copyTable(copyThis,\n\t\t\t\t// copyInto) DatastoreCopier.copyTableIntoSameDatastore(ds,\n\t\t\t\t// table.getImmutableId(), name);\n\t\t\t\t// if (copy != null) {\n\t\t\t\t// launcher.launchTableGrid(copy.getImmutableId());\n\t\t\t\t// } else {\n\t\t\t\t// showTableNameError();\n\t\t\t\t// }\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic GridEditPermissions getPermissions() {\n\t\tif(defaultPermissions!=null && getTable()!=null){\t\t\t\n\t\t\tGridEditPermissions ret= GridEditPermissions.and(defaultPermissions,((SwingAdapter)getModel()).getPermissions());\n\t\t\treturn ret;\n\t\t}\n\t\treturn new GridEditPermissions();\n\t}\n\t\n\tpublic long [] getRowIds(boolean selectedOnly){\n\t\tODLTableReadOnly table = getTable();\n\t\tint n = table.getRowCount();\n\t\tTLongArrayList tmp = new TLongArrayList();\n\t\t\n\t\tfor(int row = 0 ; row < n ; row++){\n\t\t\tif(!selectedOnly || selectionManager.isRowSelected(row)){\n\t\t\t\ttmp.add(table.getRowId(row));\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn tmp.toArray();\n\t}\n\t\n\t@Override\n\tprotected void setHeaderRenderer() {\n\t\tclass IsItalic{\n\t\t\tboolean isItalic(int col){\n\t\t\t\tODLTableDefinition table = getTable();\n\t\t\t\tcol--;\n\t\t\t\tif(col>=0 && col < table.getColumnCount()){\n\t\t\t\t\treturn (table.getColumnFlags(col)& TableFlags.FLAG_LINKED_EXCEL_READ_ONLY_DATA) == TableFlags.FLAG_LINKED_EXCEL_READ_ONLY_DATA;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tIsItalic isItalic = new IsItalic();\n\t\t\n\t\tJTableHeader header = getTableHeader();\n\t\tif (showFilters) {\n\t\t\theader.setDefaultRenderer(new FilterHeaderRender() {\n\t\t\t\t@Override\n\t\t\t\tpublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\t\treturn super.getTableCellRendererComponent(table, value, selectionManager != null ? selectionManager.isCellSelected(row, column) : isSelected, hasFocus, row, column);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getColumnIsItalics(int col) {\n\t\t\t\t\treturn isItalic.isItalic(col);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\theader.setDefaultRenderer(new HeaderCellRenderer() {\n\t\t\t\t@Override\n\t\t\t\tpublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n\t\t\t\t\treturn super.getTableCellRendererComponent(table, value, selectionManager != null ? selectionManager.isCellSelected(row, column) : isSelected, hasFocus, row, column);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tprotected boolean getColumnIsItalics(int col) {\n\t\t\t\t\treturn isItalic.isItalic(col);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"PGWelch/com.opendoorlogistics","sample_ref":"refs/heads/master","sample_path":"com.opendoorlogistics.studio/src/com/opendoorlogistics/studio/tables/grid/ODLGridTable.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b64b92c3c035cd0b5e6d5e5d38ff38121da0d9b0","size":"1000","content":"/*\n *     Copyright 2016-2026 TinyZ\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.ogcs.okra.example.benchmark;\n\n/**\n * @author : TinyZ.\n * @email : tinyzzh815@gmail.com\n * @date : 2016/5/19\n * @since 1.0\n */\npublic class ServerMain {\n\n    public static void main(String[] args) throws InterruptedException {\n        // server\n        BenchmarkServer server = new BenchmarkServer(9005);\n        server.start();\n        System.out.println(\"Bootstrap successful.\");\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"ogcs/Okra","sample_ref":"refs/heads/master","sample_path":"okra-examples/src/main/java/org/ogcs/okra/example/benchmark/ServerMain.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"9b678521afc4ab2a30ae264dda6b2e1c8b259df2","size":"8207","content":"package com.ext.portlet.model;\n\nimport com.liferay.portal.kernel.bean.AutoEscape;\nimport com.liferay.portal.model.BaseModel;\nimport com.liferay.portal.model.CacheModel;\nimport com.liferay.portal.service.ServiceContext;\n\nimport com.liferay.portlet.expando.model.ExpandoBridge;\n\nimport java.io.Serializable;\n\nimport java.util.Date;\n\n/**\n * The base model interface for the DiscussionMessage service. Represents a row in the &quot;xcolab_DiscussionMessage&quot; database table, with each column mapped to a property of this class.\n *\n * <p>\n * This interface and its corresponding implementation {@link com.ext.portlet.model.impl.DiscussionMessageModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.ext.portlet.model.impl.DiscussionMessageImpl}.\n * </p>\n *\n * @author Brian Wing Shun Chan\n * @see DiscussionMessage\n * @see com.ext.portlet.model.impl.DiscussionMessageImpl\n * @see com.ext.portlet.model.impl.DiscussionMessageModelImpl\n * @generated\n */\npublic interface DiscussionMessageModel extends BaseModel<DiscussionMessage> {\n    /*\n     * NOTE FOR DEVELOPERS:\n     *\n     * Never modify or reference this interface directly. All methods that expect a discussion message model instance should use the {@link DiscussionMessage} interface instead.\n     */\n\n    /**\n     * Returns the primary key of this discussion message.\n     *\n     * @return the primary key of this discussion message\n     */\n    public long getPrimaryKey();\n\n    /**\n     * Sets the primary key of this discussion message.\n     *\n     * @param primaryKey the primary key of this discussion message\n     */\n    public void setPrimaryKey(long primaryKey);\n\n    /**\n     * Returns the pk of this discussion message.\n     *\n     * @return the pk of this discussion message\n     */\n    public long getPk();\n\n    /**\n     * Sets the pk of this discussion message.\n     *\n     * @param pk the pk of this discussion message\n     */\n    public void setPk(long pk);\n\n    /**\n     * Returns the message ID of this discussion message.\n     *\n     * @return the message ID of this discussion message\n     */\n    public long getMessageId();\n\n    /**\n     * Sets the message ID of this discussion message.\n     *\n     * @param messageId the message ID of this discussion message\n     */\n    public void setMessageId(long messageId);\n\n    /**\n     * Returns the subject of this discussion message.\n     *\n     * @return the subject of this discussion message\n     */\n    @AutoEscape\n    public String getSubject();\n\n    /**\n     * Sets the subject of this discussion message.\n     *\n     * @param subject the subject of this discussion message\n     */\n    public void setSubject(String subject);\n\n    /**\n     * Returns the body of this discussion message.\n     *\n     * @return the body of this discussion message\n     */\n    @AutoEscape\n    public String getBody();\n\n    /**\n     * Sets the body of this discussion message.\n     *\n     * @param body the body of this discussion message\n     */\n    public void setBody(String body);\n\n    /**\n     * Returns the thread ID of this discussion message.\n     *\n     * @return the thread ID of this discussion message\n     */\n    public long getThreadId();\n\n    /**\n     * Sets the thread ID of this discussion message.\n     *\n     * @param threadId the thread ID of this discussion message\n     */\n    public void setThreadId(long threadId);\n\n    /**\n     * Returns the category ID of this discussion message.\n     *\n     * @return the category ID of this discussion message\n     */\n    public long getCategoryId();\n\n    /**\n     * Sets the category ID of this discussion message.\n     *\n     * @param categoryId the category ID of this discussion message\n     */\n    public void setCategoryId(long categoryId);\n\n    /**\n     * Returns the category group ID of this discussion message.\n     *\n     * @return the category group ID of this discussion message\n     */\n    public long getCategoryGroupId();\n\n    /**\n     * Sets the category group ID of this discussion message.\n     *\n     * @param categoryGroupId the category group ID of this discussion message\n     */\n    public void setCategoryGroupId(long categoryGroupId);\n\n    /**\n     * Returns the author ID of this discussion message.\n     *\n     * @return the author ID of this discussion message\n     */\n    public long getAuthorId();\n\n    /**\n     * Sets the author ID of this discussion message.\n     *\n     * @param authorId the author ID of this discussion message\n     */\n    public void setAuthorId(long authorId);\n\n    /**\n     * Returns the create date of this discussion message.\n     *\n     * @return the create date of this discussion message\n     */\n    public Date getCreateDate();\n\n    /**\n     * Sets the create date of this discussion message.\n     *\n     * @param createDate the create date of this discussion message\n     */\n    public void setCreateDate(Date createDate);\n\n    /**\n     * Returns the version of this discussion message.\n     *\n     * @return the version of this discussion message\n     */\n    public long getVersion();\n\n    /**\n     * Sets the version of this discussion message.\n     *\n     * @param version the version of this discussion message\n     */\n    public void setVersion(long version);\n\n    /**\n     * Returns the deleted of this discussion message.\n     *\n     * @return the deleted of this discussion message\n     */\n    public Date getDeleted();\n\n    /**\n     * Sets the deleted of this discussion message.\n     *\n     * @param deleted the deleted of this discussion message\n     */\n    public void setDeleted(Date deleted);\n\n    /**\n     * Returns the responses count of this discussion message.\n     *\n     * @return the responses count of this discussion message\n     */\n    public int getResponsesCount();\n\n    /**\n     * Sets the responses count of this discussion message.\n     *\n     * @param responsesCount the responses count of this discussion message\n     */\n    public void setResponsesCount(int responsesCount);\n\n    /**\n     * Returns the last activity date of this discussion message.\n     *\n     * @return the last activity date of this discussion message\n     */\n    public Date getLastActivityDate();\n\n    /**\n     * Sets the last activity date of this discussion message.\n     *\n     * @param lastActivityDate the last activity date of this discussion message\n     */\n    public void setLastActivityDate(Date lastActivityDate);\n\n    /**\n     * Returns the last activity author ID of this discussion message.\n     *\n     * @return the last activity author ID of this discussion message\n     */\n    public long getLastActivityAuthorId();\n\n    /**\n     * Sets the last activity author ID of this discussion message.\n     *\n     * @param lastActivityAuthorId the last activity author ID of this discussion message\n     */\n    public void setLastActivityAuthorId(long lastActivityAuthorId);\n\n    @Override\n    public boolean isNew();\n\n    @Override\n    public void setNew(boolean n);\n\n    @Override\n    public boolean isCachedModel();\n\n    @Override\n    public void setCachedModel(boolean cachedModel);\n\n    @Override\n    public boolean isEscapedModel();\n\n    @Override\n    public Serializable getPrimaryKeyObj();\n\n    @Override\n    public void setPrimaryKeyObj(Serializable primaryKeyObj);\n\n    @Override\n    public ExpandoBridge getExpandoBridge();\n\n    @Override\n    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);\n\n    @Override\n    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);\n\n    @Override\n    public void setExpandoBridgeAttributes(ServiceContext serviceContext);\n\n    @Override\n    public Object clone();\n\n    @Override\n    public int compareTo(\n        com.ext.portlet.model.DiscussionMessage discussionMessage);\n\n    @Override\n    public int hashCode();\n\n    @Override\n    public CacheModel<com.ext.portlet.model.DiscussionMessage> toCacheModel();\n\n    @Override\n    public com.ext.portlet.model.DiscussionMessage toEscapedModel();\n\n    @Override\n    public com.ext.portlet.model.DiscussionMessage toUnescapedModel();\n\n    @Override\n    public String toString();\n\n    @Override\n    public String toXmlString();\n}\n","binary":"false","copies":"1","sample_repo_name":"CCI-MIT/XCoLab","sample_ref":"refs/heads/master","sample_path":"services/plansProposalsFacade/plansProposalsFacade-portlet-service/src/main/java/com/ext/portlet/model/DiscussionMessageModel.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6f2f71189d14f129408275625db27cc2faed19d6","size":"4931","content":"//#############################################################################\r\n//#                                                                           #\r\n//#  Copyright (C) <2015>  <IMS MAXIMS>                                       #\r\n//#                                                                           #\r\n//#  This program is free software: you can redistribute it and/or modify     #\r\n//#  it under the terms of the GNU Affero General Public License as           #\r\n//#  published by the Free Software Foundation, either version 3 of the       #\r\n//#  License, or (at your option) any later version.                          # \r\n//#                                                                           #\r\n//#  This program is distributed in the hope that it will be useful,          #\r\n//#  but WITHOUT ANY WARRANTY; without even the implied warranty of           #\r\n//#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #\r\n//#  GNU Affero General Public License for more details.                      #\r\n//#                                                                           #\r\n//#  You should have received a copy of the GNU Affero General Public License #\r\n//#  along with this program.  If not, see <http://www.gnu.org/licenses/>.    #\r\n//#                                                                           #\r\n//#  IMS MAXIMS provides absolutely NO GUARANTEE OF THE CLINICAL SAFTEY of    #\r\n//#  this program.  Users of this software do so entirely at their own risk.  #\r\n//#  IMS MAXIMS only ensures the Clinical Safety of unaltered run-time        #\r\n//#  software that it builds, deploys and maintains.                          #\r\n//#                                                                           #\r\n//#############################################################################\r\n//#EOH\r\n// This code was generated by Barbara Worwood using IMS Development Environment (version 1.80 build 5589.25814)\r\n// Copyright (C) 1995-2015 IMS MAXIMS. All rights reserved.\r\n// WARNING: DO NOT MODIFY the content of this file\r\n\r\npackage ims.oncology.vo.lookups;\r\n\r\nimport ims.framework.cn.data.TreeModel;\r\nimport ims.framework.cn.data.TreeNode;\r\nimport ims.vo.LookupInstanceCollection;\r\nimport ims.vo.LookupInstVo;\r\n\r\npublic class OncCarePlanStatusCollection extends LookupInstanceCollection implements ims.vo.ImsCloneable, TreeModel\r\n{\r\n\tprivate static final long serialVersionUID = 1L;\r\n\tpublic void add(OncCarePlanStatus value)\r\n\t{\r\n\t\tsuper.add(value);\r\n\t}\r\n\tpublic int indexOf(OncCarePlanStatus instance)\r\n\t{\r\n\t\treturn super.indexOf(instance);\r\n\t}\r\n\tpublic boolean contains(OncCarePlanStatus instance)\r\n\t{\r\n\t\treturn indexOf(instance) >= 0;\r\n\t}\r\n\tpublic OncCarePlanStatus get(int index)\r\n\t{\r\n\t\treturn (OncCarePlanStatus)super.getIndex(index);\r\n\t}\r\n\tpublic void remove(OncCarePlanStatus instance)\r\n\t{\r\n\t\tif(instance != null)\r\n\t\t{\r\n\t\t\tint index = indexOf(instance);\r\n\t\t\tif(index >= 0)\r\n\t\t\t\tremove(index);\r\n\t\t}\r\n\t}\r\n\tpublic Object clone()\r\n\t{\r\n\t\tOncCarePlanStatusCollection newCol = new OncCarePlanStatusCollection();\r\n\t\tOncCarePlanStatus item;\r\n\t\tfor (int i = 0; i < super.size(); i++)\r\n\t\t{\r\n\t\t\titem = this.get(i);\r\n\t\t\tnewCol.add(new OncCarePlanStatus(item.getID(), item.getText(), item.isActive(), item.getParent(), item.getImage(), item.getColor(), item.getOrder()));\r\n\t\t}\r\n\t\tfor (int i = 0; i < newCol.size(); i++)\r\n\t\t{\r\n\t\t\titem = newCol.get(i);\r\n\t\t\tif (item.getParent() != null)\r\n\t\t\t{\r\n\t\t\t\tint parentIndex = this.indexOf(item.getParent());\r\n\t\t\t\tif(parentIndex >= 0)\r\n\t\t\t\t\titem.setParent(newCol.get(parentIndex));\r\n\t\t\t\telse\r\n\t\t\t\t\titem.setParent((OncCarePlanStatus)item.getParent().clone());\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn newCol;\r\n\t}\r\n\tpublic OncCarePlanStatus getInstance(int instanceId)\r\n\t{\r\n\t\treturn (OncCarePlanStatus)super.getInstanceById(instanceId);\r\n\t}\r\n\tpublic TreeNode[] getRootNodes()\r\n\t{\r\n\t\tLookupInstVo[] roots = super.getRoots();\r\n\t\tTreeNode[] nodes = new TreeNode[roots.length];\r\n\t\tSystem.arraycopy(roots, 0, nodes, 0, roots.length);\r\n\t\treturn nodes;\r\n\t}\r\n\tpublic OncCarePlanStatus[] toArray()\r\n\t{\r\n\t\tOncCarePlanStatus[] arr = new OncCarePlanStatus[this.size()];\r\n\t\tsuper.toArray(arr);\r\n\t\treturn arr;\r\n\t}\r\n\tpublic static OncCarePlanStatusCollection buildFromBeanCollection(java.util.Collection beans)\r\n\t{\r\n\t\tOncCarePlanStatusCollection coll = new OncCarePlanStatusCollection();\r\n\t\tif(beans == null)\r\n\t\t\treturn coll;\r\n\t\tjava.util.Iterator iter = beans.iterator();\r\n\t\twhile(iter.hasNext())\r\n\t\t{\r\n\t\t\tcoll.add(OncCarePlanStatus.buildLookup((ims.vo.LookupInstanceBean)iter.next()));\r\n\t\t}\r\n\t\treturn coll;\r\n\t}\r\n\tpublic static OncCarePlanStatusCollection buildFromBeanCollection(ims.vo.LookupInstanceBean[] beans)\r\n\t{\r\n\t\tOncCarePlanStatusCollection coll = new OncCarePlanStatusCollection();\r\n\t\tif(beans == null)\r\n\t\t\treturn coll;\r\n\t\tfor(int x = 0; x < beans.length; x++)\r\n\t\t{\r\n\t\t\tcoll.add(OncCarePlanStatus.buildLookup(beans[x]));\r\n\t\t}\r\n\t\treturn coll;\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"IMS-MAXIMS/openMAXIMS","sample_ref":"refs/heads/master","sample_path":"Source Library/openmaxims_workspace/ValueObjects/src/ims/oncology/vo/lookups/OncCarePlanStatusCollection.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"42c7f2e34577e9b804621078000e0d0c9f3d9408","size":"1743","content":"package com.cleveroad.example;\n\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.cleveroad.audiovisualization.AudioVisualization;\nimport com.cleveroad.audiovisualization.DbmHandler;\nimport com.cleveroad.audiovisualization.GLAudioVisualizationView;\n\n/**\n * Fragment with audio visualization view.\n */\npublic class AudioVisualizationFragment extends Fragment {\n\n\tpublic static AudioVisualizationFragment newInstance() {\n\t\treturn new AudioVisualizationFragment();\n\t}\n\n\tprivate AudioVisualization audioVisualization;\n\n\t@Nullable\n\t@Override\n\tpublic View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n\t\treturn new GLAudioVisualizationView.Builder(getContext())\n\t\t\t\t.setBubbleSize(R.dimen.bubble_size)\n\t\t\t\t.setRandomizeBubbleSize(true)\n\t\t\t\t.setWaveHeight(R.dimen.wave_height)\n\t\t\t\t.setFooterHeight(R.dimen.footer_height)\n\t\t\t\t.setWavesCount(7)\n\t\t\t\t.setLayersCount(4)\n\t\t\t\t.setBackgroundColorRes(R.color.av_color_bg)\n\t\t\t\t.setLayerColors(R.array.av_colors)\n\t\t\t\t.build();\n\t}\n\n\t@Override\n\tpublic void onViewCreated(View view, @Nullable Bundle savedInstanceState) {\n\t\tsuper.onViewCreated(view, savedInstanceState);\n\t\taudioVisualization = (AudioVisualization) view;\n\t\taudioVisualization.linkTo(DbmHandler.Factory.newVisualizerHandler(0));\n\t}\n\n\t@Override\n\tpublic void onResume() {\n\t\tsuper.onResume();\n\t\taudioVisualization.onResume();\n\t}\n\n\t@Override\n\tpublic void onPause() {\n\t\taudioVisualization.onPause();\n\t\tsuper.onPause();\n\t}\n\n\t@Override\n\tpublic void onDestroyView() {\n\t\taudioVisualization.release();\n\t\tsuper.onDestroyView();\n\t}\n}","binary":"false","copies":"1","sample_repo_name":"Cleveroad/CRAudioVisualizationView","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/com/cleveroad/example/AudioVisualizationFragment.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4548b5effedfc2b3ab2a6438bc39b56859c8f982","size":"4069","content":"/*\n * Copyright (C) 2014 OpenSilk Productions LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.opensilk.music.library;\n\nimport android.graphics.drawable.Drawable;\nimport android.os.Parcel;\nimport android.os.Parcelable;\nimport android.support.annotation.NonNull;\n\n/**\n * Information collected by querying ProviderInfos, used in Navigation Drawer\n *\n * Created by drew on 6/14/14.\n */\npublic class LibraryProviderInfo implements Parcelable, Comparable<LibraryProviderInfo> {\n\n    /**\n     * Manifest attribute android:label\n     */\n    public final String title;\n    /**\n     * Manifest attribute android:description\n     */\n    public final String description;\n    /**\n     * Manifest attribute android:authority\n     */\n    public final String authority;\n    /**\n     * Manifest attribute android:icon\n     */\n    public transient Drawable icon;\n    /**\n     * Internal use, true if plugin shows in drawer\n     */\n    public transient boolean isActive = true;\n\n\n    public LibraryProviderInfo(\n            @NonNull String title,\n            @NonNull String description,\n            @NonNull String authority\n    ) {\n        this.title = title;\n        this.description = description;\n        this.authority = authority;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public String getAuthority() {\n        return authority;\n    }\n\n    public Drawable getIcon() {\n        return icon;\n    }\n\n    public boolean isActive() {\n        return isActive;\n    }\n\n    public void setActive(boolean isActive) {\n        this.isActive = isActive;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        LibraryProviderInfo that = (LibraryProviderInfo) o;\n        if (title != null ? !title.equals(that.title) : that.title != null) return false;\n        if (description != null ? !description.equals(that.description) : that.description != null)\n            return false;\n        return !(authority != null ? !authority.equals(that.authority) : that.authority != null);\n\n    }\n\n    @Override\n    public int hashCode() {\n        int result = title != null ? title.hashCode() : 0;\n        result = 31 * result + (description != null ? description.hashCode() : 0);\n        result = 31 * result + (authority != null ? authority.hashCode() : 0);\n        return result;\n    }\n\n    @Override\n    public String toString() {\n        return title;\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n        dest.writeString(title);\n        dest.writeString(description);\n        dest.writeString(authority);\n    }\n\n    private static LibraryProviderInfo readParcel(Parcel in) {\n        return new LibraryProviderInfo(\n                in.readString(),\n                in.readString(),\n                in.readString()\n        );\n    }\n\n    public static final Creator<LibraryProviderInfo> CREATOR = new Creator<LibraryProviderInfo>() {\n        @Override\n        public LibraryProviderInfo createFromParcel(Parcel source) {\n            return readParcel(source);\n        }\n\n        @Override\n        public LibraryProviderInfo[] newArray(int size) {\n            return new LibraryProviderInfo[size];\n        }\n    };\n\n    @Override\n    public int compareTo(@NonNull LibraryProviderInfo another) {\n        return this.title.compareTo(another.title);\n    }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"OpenSilk/Orpheus","sample_ref":"refs/heads/master","sample_path":"core-library/src/main/java/org/opensilk/music/library/LibraryProviderInfo.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"dded9745c86f40e9193582a5d723bcd8299a3c08","size":"1179","content":"package algs.model.gametree.debug;\n\nimport algs.debug.Formatter;\nimport algs.debug.IGraphEntity;\nimport algs.debug.ISelectFont;\n\n/**\n * This node is used when depicting debugging information about the score \n * assigned to a node.\n * \n * @author George Heineman\n * @version 1.0, 6/15/08\n * @since 1.0\n */\npublic class ScoreNode implements IGraphEntity, ISelectFont {\n\t/** Store private score associated with node. */\n\tprivate int score;\n\t\n\t/** \n\t * Construct a ScoreNode in the visualization to represent scored node.\n\t * \n\t * @param sc   score\n\t */\n\tpublic ScoreNode (int sc) {\n\t\tthis.score = sc;\n\t}\n\t\n\t/** \n\t * Return the score for this node.\n\t * @return integer score associated with node. \n\t */\n\tpublic int score() { return score; }\n\t\n\t/** Label for this node encodes the score. */\n\tpublic String nodeLabel() {\n\t\treturn Formatter.convert(score);\n\t}\n\t\n\t/** To properly draw Infinity symbols in symbol font. */\n\tpublic String fontName() {\n// When formatting becomes available again\n//\t\t\n//\t\tif (Formatter.isSymbol(score)) {\n//\t\t\treturn \"Symbol\";\n//\t\t}\n\t\t\n\t\treturn null;  // nothing special.\n\t}\n\n\t/** Default font size to use is ok. */\n\tpublic int fontSize() {\n\t\treturn 0;\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"heineman/algorithms-nutshell-2ed","sample_ref":"refs/heads/master","sample_path":"JavaCode/src/algs/model/gametree/debug/ScoreNode.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"587a505432a92316b034b4dce97fb0f32c1a009c","size":"1669","content":"/**\n * Copyright (c) 2016 Lemur Consulting Ltd.\n * <p/>\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * <p/>\n * http://www.apache.org/licenses/LICENSE-2.0\n * <p/>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage uk.co.flax.harahachibu.health;\n\nimport com.codahale.metrics.health.HealthCheck;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport uk.co.flax.harahachibu.services.DiskSpaceChecker;\nimport uk.co.flax.harahachibu.services.DiskSpaceCheckerException;\n\n/**\n * Generic disk checker health check.\n * <p>\n * Created by mlp on 19/04/16.\n */\npublic class DiskSpaceCheckerHealthCheck extends HealthCheck {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(DiskSpaceCheckerHealthCheck.class);\n\n\tprivate final DiskSpaceChecker checker;\n\n\tpublic DiskSpaceCheckerHealthCheck(DiskSpaceChecker checker) {\n\t\tthis.checker = checker;\n\t}\n\n\t@Override\n\tprotected Result check() throws Exception {\n\t\ttry {\n\t\t\tif (checker.isSpaceAvailable()) {\n\t\t\t\treturn Result.healthy();\n\t\t\t} else {\n\t\t\t\treturn Result.unhealthy(\"DiskSpaceChecker returns no space available\");\n\t\t\t}\n\t\t} catch (DiskSpaceCheckerException e) {\n\t\t\tLOGGER.warn(\"DiskSpaceChecker threw exception during healthcheck: {}\", e.getMessage());\n\t\t\treturn Result.unhealthy(e);\n\t\t}\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"flaxsearch/harahachibu","sample_ref":"refs/heads/master","sample_path":"harahachibu/src/main/java/uk/co/flax/harahachibu/health/DiskSpaceCheckerHealthCheck.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"1a941c57e10b85fecb8edd1662f9c6fa8ba8fb04","size":"1542","content":"/*\nXOWA: the XOWA Offline Wiki Application\nCopyright (C) 2012 gnosygnu@gmail.com\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\npackage gplx.xowa.addons.bldrs.exports.splits.metas; import gplx.*; import gplx.xowa.*; import gplx.xowa.addons.*; import gplx.xowa.addons.bldrs.*; import gplx.xowa.addons.bldrs.exports.*; import gplx.xowa.addons.bldrs.exports.splits.*;\r\npublic class Split_page_itm {\r\n\tprivate final    Split_page_list[] lists_ary;\r\n\tpublic Split_page_itm(boolean fsdb, int page_id) {\r\n\t\tthis.page_id = page_id;\r\n\t\tthis.lists_ary = new Split_page_list[Split_page_list_type_.Tid_max];\r\n\t}\r\n\tpublic int Page_id() {return page_id;} private final    int page_id;\r\n\tpublic Split_page_list Get_by_or_null(byte type) {return lists_ary[type];}\r\n\tpublic Split_page_list Get_by_or_make(byte type) {\r\n\t\tSplit_page_list rv = lists_ary[type];\r\n\t\tif (rv == null) {\r\n\t\t\trv = new Split_page_list(type);\r\n\t\t\tlists_ary[type] = rv;\r\n\t\t}\r\n\t\treturn rv;\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"gnosygnu/xowa","sample_ref":"refs/heads/master","sample_path":"400_xowa/src/gplx/xowa/addons/bldrs/exports/splits/metas/Split_page_itm.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6dfdd1dffb44e1edf9320ec05b1429862b71ada2","size":"3699","content":"/*\n * Copyright 2013-2015 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.cloud.netflix.ribbon;\n\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.cloud.context.named.NamedContextFactory;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\nimport com.netflix.client.IClient;\nimport com.netflix.client.IClientConfigAware;\nimport com.netflix.client.config.IClientConfig;\nimport com.netflix.loadbalancer.ILoadBalancer;\n\n/**\n * A factory that creates client, load balancer and client configuration instances. It\n * creates a Spring ApplicationContext per client name, and extracts the beans that it\n * needs from there.\n *\n * @author Spencer Gibb\n * @author Dave Syer\n */\npublic class SpringClientFactory extends NamedContextFactory<RibbonClientSpecification> {\n\n\tstatic final String NAMESPACE = \"ribbon\";\n\n\tpublic SpringClientFactory() {\n\t\tsuper(RibbonClientConfiguration.class, NAMESPACE, \"ribbon.client.name\");\n\t}\n\n\t/**\n\t * Get the rest client associated with the name.\n\t * @throws RuntimeException if any error occurs\n\t */\n\tpublic <C extends IClient<?, ?>> C getClient(String name, Class<C> clientClass) {\n\t\treturn getInstance(name, clientClass);\n\t}\n\n\t/**\n\t * Get the load balancer associated with the name.\n\t * @throws RuntimeException if any error occurs\n\t */\n\tpublic ILoadBalancer getLoadBalancer(String name) {\n\t\treturn getInstance(name, ILoadBalancer.class);\n\t}\n\n\t/**\n\t * Get the client config associated with the name.\n\t * @throws RuntimeException if any error occurs\n\t */\n\tpublic IClientConfig getClientConfig(String name) {\n\t\treturn getInstance(name, IClientConfig.class);\n\t}\n\n\t/**\n\t * Get the load balancer context associated with the name.\n\t * @throws RuntimeException if any error occurs\n\t */\n\tpublic RibbonLoadBalancerContext getLoadBalancerContext(String serviceId) {\n\t\treturn getInstance(serviceId, RibbonLoadBalancerContext.class);\n\t}\n\n\tstatic <C> C instantiateWithConfig(Class<C> clazz, IClientConfig config) {\n\t\treturn instantiateWithConfig(null, clazz, config);\n\t}\n\n\tstatic <C> C instantiateWithConfig(AnnotationConfigApplicationContext context,\n\t\t\t\t\t\t\t\t\t\tClass<C> clazz, IClientConfig config) {\n\t\tC result = null;\n\t\tif (IClientConfigAware.class.isAssignableFrom(clazz)) {\n\t\t\tIClientConfigAware obj = (IClientConfigAware) BeanUtils.instantiate(clazz);\n\t\t\tobj.initWithNiwsConfig(config);\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tC value = (C) obj;\n\t\t\tresult = value;\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tif (clazz.getConstructor(IClientConfig.class) != null) {\n\t\t\t\t\tresult = clazz.getConstructor(IClientConfig.class)\n\t\t\t\t\t\t\t.newInstance(config);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresult = BeanUtils.instantiate(clazz);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable ex) {\n\t\t\t\t// NOPMD\n\t\t\t}\n\t\t}\n\t\tif (context != null) {\n\t\t\tcontext.getAutowireCapableBeanFactory().autowireBean(result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic <C> C getInstance(String name, Class<C> type) {\n\t\tC instance = super.getInstance(name, type);\n\t\tif (instance != null) {\n\t\t\treturn instance;\n\t\t}\n\t\tIClientConfig config = getInstance(name, IClientConfig.class);\n\t\treturn instantiateWithConfig(getContext(name), type, config);\n\t}\n\n}\n\n","binary":"false","copies":"1","sample_repo_name":"spring-cloud/spring-cloud-netflix","sample_ref":"refs/heads/master","sample_path":"spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/ribbon/SpringClientFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d0fb264b0f5dc710de73d2be81ecd9bc65b50f7f","size":"823","content":"package com.microsoft.bingads.v10.bulk.entities;\n\nimport com.microsoft.bingads.v10.bulk.BulkFileReader;\nimport com.microsoft.bingads.v10.bulk.BulkFileWriter;\nimport com.microsoft.bingads.v10.bulk.BulkOperation;\nimport com.microsoft.bingads.v10.bulk.BulkServiceManager;\n\n/**\n * Represents a campaign level callout ad extension. This class exposes properties\n * that can be read and written as fields of the Campaign Callout Ad Extension\n * record in a bulk file.\n * <p/>\n * For more information, see Campaign Callout Ad Extension at\n * <a href=\"http://go.microsoft.com/fwlink/?LinkID=730545\">http://go.microsoft.com/fwlink/?LinkID=730545</a>\n *\n * @see BulkServiceManager\n * @see BulkOperation\n * @see BulkFileReader\n * @see BulkFileWriter\n */\npublic class BulkCampaignCalloutAdExtension extends BulkCampaignAdExtension {\n}\n","binary":"false","copies":"1","sample_repo_name":"BingAds/BingAds-Java-SDK","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/microsoft/bingads/v10/bulk/entities/BulkCampaignCalloutAdExtension.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"93411bb85d7ff59b88fb231715ab49609d43e406","size":"4400","content":"package com.sensepost.yeti.controllers;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Queue;\nimport javax.swing.SwingWorker;\nimport javax.swing.table.DefaultTableModel;\nimport com.sensepost.yeti.models.CertModel;\nimport com.sensepost.yeti.results.CertResult;\nimport com.sensepost.yeti.helpers.CertHelper;\nimport com.sensepost.yeti.common.ConfigSettings;\nimport com.sensepost.yeti.common.Log;\nimport com.sensepost.yeti.common.NetworkTools;\nimport com.sensepost.yeti.gui.CertDisplayResults;\nimport com.sensepost.yeti.gui.CertInit;\nimport com.sensepost.yeti.gui.DisplayResultIFace;\nimport com.sensepost.yeti.persistence.DataStore;\n\n/**\n *\n * @author willemm\n */\npublic class CertController extends BaseController {\n\n    private ArrayList<certWorker> workers = null;\n    private final Queue<String> targets = new LinkedList<>();\n\n    public CertController(WorkflowController parent, CertModel dataModel) {\n        setName(\"CertScraping\");\n        setWorkflowController(parent);\n\n        DisplayResultIFace displayResults = new CertDisplayResults(this);\n        displayResults.setModel((DefaultTableModel) dataModel);\n        setDisplayResults(displayResults);\n\n        workers = new ArrayList<>();\n    }\n\n    public synchronized void addTargets(ArrayList<String> targets) {\n        targets.addAll(targets);\n    }\n\n    private synchronized void addResult(CertResult result) {\n        ((CertModel) (getDisplayResults().getModel())).addRow(result);\n    }\n\n    private synchronized String popTarget() {\n        return (String) targets.poll();\n    }\n\n    @Override\n    public boolean startJob() {\n        CertInit frmInit = new CertInit();\n        frmInit.setVisible(true);\n        if (!frmInit.cancelled) {\n            targets.addAll(frmInit.getTargets());\n            setTotalRequests(targets.size());\n\n            for (int idx = 0; idx <= ConfigSettings.getCertThreadCount(); idx++) {\n                String target = this.popTarget();\n                if (target == null) {\n                    break;\n                }\n                certWorker certRunner = new certWorker(target);\n                getExecutor().execute(certRunner);\n                workers.add(certRunner);\n            }\n        }\n        return !frmInit.cancelled;\n    }\n\n    private synchronized void workerDone(certWorker worker) {\n        int currentWorkerIdx = workers.indexOf(worker);\n        workers.remove(currentWorkerIdx);\n        Log.debug(\"certExtraction: Done removing worker\");\n    }\n\n    @Override\n    protected void addResult(Object result) {\n        ((CertModel) (getDisplayResults().getModel())).addRow(result);\n    }\n\n    @Override\n    protected void addResults(ArrayList<Object> results) {\n        throw new UnsupportedOperationException(\"Not supported yet.\");\n    }\n\n    @Override\n    public void saveData() {\n        DataStore.addCertHosts(((CertModel) (getDisplayResults().getModel())).getData());\n    }\n\n    class certWorker extends SwingWorker<Object, Object> {\n\n        private String targets = \"\";\n\n        public certWorker(String target) {\n            super();\n            targets = target;\n        }\n\n        @Override\n        protected String doInBackground() throws Exception {\n            while (!targets.isEmpty() && (targets != null)) {\n                if (getCancelledValue()) {\n                    Log.debug(\"certExtraction: Job cancelled, stopping\");\n                    break;\n                }\n                try {\n                    List<String[]> results = CertHelper.checkCert(targets);\n                    for (String[] strArr : results) {\n                        CertResult cResult = new CertResult(strArr[0]);\n                        cResult.setHostName(strArr[1]);\n                        cResult.setDomainName(NetworkTools.getDomainFromHost(cResult.getHostName()));\n                        addResult(cResult);\n                        Log.debug(\"Found: \" + cResult.getHostName() + \" on: \" + cResult.getIpAddress());\n                    }\n                } catch (IOException ex) {\n                    Log.debug(\"Exception: [\" + this.targets + \"] : \" + ex.toString());\n                }\n                updateProgress(1);\n                targets = popTarget();\n            }\n            return \"Done\";\n        }\n\n        @Override\n        protected void done() {\n            workerDone(this);\n        }\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"sensepost/yeti","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/sensepost/yeti/controllers/CertController.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"8d4b8f70adae775759e7ee31a010fab5a14ee5a1","size":"463","content":"package {{package}};\r\n\r\nimport com.badlogic.gdx.ApplicationListener;\r\nimport com.badlogic.gdx.backends.gwt.GwtApplication;\r\nimport com.badlogic.gdx.backends.gwt.GwtApplicationConfiguration;\r\n\r\npublic class {{web-class-name}} extends GwtApplication {\r\n\r\n\tpublic GwtApplicationConfiguration getConfig () {\r\n\t\treturn new GwtApplicationConfiguration(800, 600);\r\n\t}\r\n\r\n\tpublic ApplicationListener createApplicationListener () {\r\n\t\treturn new {{class-name}}();\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"oakes/Nightcode","sample_ref":"refs/heads/master","sample_path":"src/clojure/leiningen/new/game_java/WebLauncher.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c4f7319f49571277171f45d806919ac6fba2f0fa","size":"4355","content":"package io.xdevs23.cornowser.browser.browser.modules.ui;\n\nimport android.animation.Animator;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewPropertyAnimator;\n\nimport io.xdevs23.cornowser.browser.CornBrowser;\n\npublic class OmniboxAnimations {\n\n    public static final int\n            DEFAULT_ANIMATION_DURATION = 420\n            ;\n\n    public static int\n            oh   = 0,\n            cy   = 0,\n            ny   = 0,\n            opos = 0;\n\n\n    public static boolean isBottom() {\n        return OmniboxControl.isBottom();\n    }\n\n    public static boolean isTop() {\n        return !isBottom();\n    }\n\n    public static int getOmniboxPositionInt() {\n        return OmniboxControl.getOmniboxPositionInt();\n    }\n\n    protected static int getOmniHeight() {\n        return OmniboxControl.getOmniboxHeight();\n    }\n\n    protected static ViewPropertyAnimator omniboxAnimate() {\n        return CornBrowser.omnibox.animate().setDuration(DEFAULT_ANIMATION_DURATION);\n    }\n\n    protected static ViewPropertyAnimator webAnimate() {\n        return CornBrowser.publicWebRenderLayout.animate().setDuration(DEFAULT_ANIMATION_DURATION);\n    }\n\n    public static void moveOmni(int posY) {\n        if(isBottom()) return;\n        float mov = (float) posY;\n        CornBrowser.omnibox.bringToFront();\n        CornBrowser.omnibox.setTranslationY(mov);\n        CornBrowser.publicWebRenderLayout.setTranslationY(\n                mov + CornBrowser.omnibox.getHeight()\n        );\n    }\n\n    public static void animateOmni(int posY) {\n        float mov = (float) posY;\n        if(mov > 0) CornBrowser.omnibox.bringToFront();\n        if(posY == 0 && isTop()) opos = 0; cy = 0; ny = 0;\n        omniboxAnimate().translationY(mov + (isBottom() ? CornBrowser.omnibox.getHeight() : 0))\n                // This listener is to fix glitches\n                .setListener(new Animator.AnimatorListener() {\n            @Override\n            public void onAnimationStart(Animator animation) {\n                CornBrowser.omnibox.bringToFront();\n            }\n\n            @Override\n            public void onAnimationEnd(Animator animation) {\n                CornBrowser.omnibox.bringToFront();\n            }\n\n            @Override\n            public void onAnimationCancel(Animator animation) {\n                // Not necessary\n            }\n\n            @Override\n            public void onAnimationRepeat(Animator animation) {\n                // Not necessary\n            }\n        });\n        if(isTop())\n            CornBrowser.publicWebRenderLayout\n                .setTranslationY((mov + CornBrowser.omnibox.getHeight()));\n    }\n\n    public static void resetOmni() {\n        CornBrowser.omnibox.bringToFront();\n        animateOmni(0);\n        if(isTop()) CornBrowser.publicWebRenderLayout.setTranslationY(getOmniHeight());\n        else        CornBrowser.publicWebRenderLayout.setTranslationY(0);\n    }\n\n    // Main listener for controlling omnibox show/hide animations\n\n    public static final View.OnTouchListener\n            mainOnTouchListener = new View.OnTouchListener() {\n\n\n        @Override\n        public boolean onTouch(View view, MotionEvent motionEvent) {\n            switch(motionEvent.getAction()) {\n                case MotionEvent.ACTION_DOWN:\n                    CornBrowser.getTabSwitcher().hideSwitcher();\n                    oh = CornBrowser.omnibox.getHeight();\n                    if(-opos <= oh / 2) cy = (int)motionEvent.getRawY();\n                    else cy = (int)motionEvent.getRawY() - opos;\n                    break;\n                case MotionEvent.ACTION_UP:\n                    if(-opos > oh / 2) {\n                        animateOmni( (isBottom() ? 0 : -oh) );\n                        opos =       (isBottom() ? 0 : -oh)  ;\n                    } else {\n                        animateOmni( (isBottom() ? -oh : 0) );\n                        opos =       (isBottom() ? -oh : 0)  ;\n                    }\n                    break;\n                case MotionEvent.ACTION_MOVE:\n                    ny = ((int)motionEvent.getRawY()) - cy;\n                    opos = ny;\n                    if(opos > 0  ) opos = 0;\n                    if(opos < -oh) opos = -oh;\n\n                    moveOmni(opos);\n                    break;\n                default: break;\n            }\n            return false;\n        }\n\n    };\n\n}\n","binary":"false","copies":"1","sample_repo_name":"xdevs23/Cornowser","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/io/xdevs23/cornowser/browser/browser/modules/ui/OmniboxAnimations.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"37959d12f8650e0c3b28ffc02d5aa100a4fcabb8","size":"4005","content":"/**\n * Copyright 2010-2014 Ralph Schaer <ralphschaer@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage ch.ralscha.extdirectspring.filter;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.core.convert.ConversionService;\n\n/**\n * Base class for all filter implementation.\n *\n * @see BooleanFilter\n * @see DateFilter\n * @see ListFilter\n * @see NumericFilter\n * @see StringFilter\n */\npublic class Filter {\n\tprivate final String field;\n\n\tprivate final String rawComparison;\n\n\tprivate final Comparison comparison;\n\n\tpublic Filter(String field, String rawComparison, Comparison comparison) {\n\t\tthis.field = field;\n\t\tthis.rawComparison = rawComparison;\n\t\tthis.comparison = comparison;\n\t}\n\n\tpublic String getField() {\n\t\treturn field;\n\t}\n\n\tpublic String getRawComparison() {\n\t\treturn rawComparison;\n\t}\n\n\tpublic Comparison getComparison() {\n\t\treturn comparison;\n\t}\n\n\tpublic String getOperator() {\n\t\treturn rawComparison;\n\t}\n\n\t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n\tpublic static Filter createFilter(Map<String, Object> jsonData,\n\t\t\tConversionService conversionService) {\n\t\tString type = (String) jsonData.get(\"type\");\n\t\tObject source = jsonData.get(\"value\");\n\t\tString rawComparison = extractRawComparison(jsonData);\n\t\tComparison comparisonFromJson = Comparison.fromString(rawComparison);\n\n\t\tString property = (String) jsonData.get(\"property\");\n\t\tif (property == null) {\n\t\t\tproperty = (String) jsonData.get(\"field\");\n\t\t}\n\n\t\tif (type == null) {\n\t\t\tif (property != null) {\n\t\t\t\t// a filter from store.filter, create a Filter depending on the\n\t\t\t\t// type of the value\n\t\t\t\tif (source instanceof Number) {\n\t\t\t\t\treturn new NumericFilter(property, (Number) source, rawComparison,\n\t\t\t\t\t\t\tcomparisonFromJson);\n\t\t\t\t}\n\t\t\t\telse if (source instanceof Boolean) {\n\t\t\t\t\treturn new BooleanFilter(property, (Boolean) source, rawComparison,\n\t\t\t\t\t\t\tcomparisonFromJson);\n\t\t\t\t}\n\t\t\t\telse if (source instanceof List) {\n\t\t\t\t\treturn new ListFilter(property, (List<?>) source, rawComparison,\n\t\t\t\t\t\t\tcomparisonFromJson);\n\t\t\t\t}\n\t\t\t\treturn new StringFilter(property,\n\t\t\t\t\t\tsource != null ? source.toString() : null, rawComparison,\n\t\t\t\t\t\tcomparisonFromJson);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\tif (type.equals(\"numeric\") || type.equals(\"int\") || type.equals(\"float\")\n\t\t\t\t|| type.equals(\"number\")) {\n\t\t\tNumber value = conversionService.convert(source, Number.class);\n\t\t\treturn new NumericFilter(property, value, rawComparison, comparisonFromJson);\n\t\t}\n\t\telse if (type.equals(\"string\")) {\n\t\t\treturn new StringFilter(property, (String) source, rawComparison,\n\t\t\t\t\tcomparisonFromJson);\n\t\t}\n\t\telse if (type.equals(\"date\")) {\n\t\t\treturn new DateFilter(property, (String) source, rawComparison,\n\t\t\t\t\tcomparisonFromJson);\n\t\t}\n\t\telse if (type.equals(\"list\") || type.equals(\"combo\")) {\n\t\t\tif (source instanceof String) {\n\t\t\t\tString[] values = ((String) source).split(\",\");\n\t\t\t\treturn new ListFilter(property, Arrays.asList(values), rawComparison,\n\t\t\t\t\t\tcomparisonFromJson);\n\t\t\t}\n\t\t\treturn new ListFilter(property, (List<String>) source, rawComparison,\n\t\t\t\t\tcomparisonFromJson);\n\t\t}\n\t\telse if (type.equals(\"boolean\")) {\n\t\t\treturn new BooleanFilter(property, (Boolean) source, rawComparison,\n\t\t\t\t\tcomparisonFromJson);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate static String extractRawComparison(Map<String, Object> jsonData) {\n\t\tString comparison = (String) jsonData.get(\"comparison\");\n\t\tif (comparison != null) {\n\t\t\treturn comparison;\n\t\t}\n\t\treturn (String) jsonData.get(\"operator\");\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"ralscha/extdirectspring","sample_ref":"refs/heads/master","sample_path":"src/main/java/ch/ralscha/extdirectspring/filter/Filter.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"bfe44e34675b40d522d7524ba8882de6c37d8e35","size":"2531","content":"\n\n /*\n  * Copyright (C) 2015 Stephan Grotz - stephan@myopentrader.org\n  *\n  * This program is free software: you can redistribute it and/or modify\n  * it under the terms of the GNU General Public License as published by\n  * the Free Software Foundation, either version 3 of the License, or\n  * (at your option) any later version.\n  *\n  * This program is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  * GNU General Public License for more details.\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  *\n  */\n  \n  \n  package org.mot.common.tools;\n\nimport org.apache.commons.configuration.Configuration;\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.DatabaseConfiguration;\nimport org.apache.commons.configuration.PropertiesConfiguration;\nimport org.apache.commons.dbcp2.BasicDataSource;\nimport org.mot.common.db.DatabaseConnectionFactory;\n\npublic class PropertiesFactory {\n\n\tprivate static PropertiesFactory instance; \n\tprivate String configDir;\n\tprivate DatabaseConnectionFactory dcf;\n\t\n\t\n\tprivate PropertiesFactory() {\n\t\t\n\t}\n\t\n\tpublic static PropertiesFactory getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new PropertiesFactory();\n\t\t}\n\t\treturn instance;\n\t}\n\n\t\n\tpublic String getConfigDir() {\n\t\treturn configDir;\n\t}\n\n\t\n\tpublic void setConfigDir(String configDir) {\n\t\tthis.configDir = configDir;\n\t}\n\t\n\t\n\tpublic Configuration getConfiguration(String filename) {\n\t\tConfiguration config = null;\n\t\t\n\t\tif (dcf.isDatabaseConfigurationEnabled()) {\n\t\t\t// If set to true, get the properties from the database\n\t\t\tconfig = this.getDatabaseConfiguration();\n\t\t} else {\n\t\t\tconfig = this.getFileConfiguration(filename);\n\t\t}\n\t\t\n\t\treturn config;\n\t}\n\t\n\t\n\tprivate Configuration getDatabaseConfiguration() {\n\t\tConfiguration config = null;\n\t\t\n\t\tBasicDataSource bds = dcf.getDataSource();\t\n\t\tconfig = new DatabaseConfiguration(bds, \"configuration\", \"property\", \"value\");\n\t\t\n\t\treturn config;\n\t}\n\t\n\t\n\tprivate Configuration getFileConfiguration(String filename) {\n\t\tConfiguration config = null;\n\t\t\n\t\t// Read the properties from file\n\t\ttry {\n\t\t\tconfig = new PropertiesConfiguration(this.getConfigDir() + \"/\" + filename);\n\t\t\n\t\t} catch (ConfigurationException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn config;\n\t}\n\t\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"sgrotz/myopentrader","sample_ref":"refs/heads/master","sample_path":"MyOpenTraderCommon/src/main/java/org/mot/common/tools/PropertiesFactory.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"fbea250d1df833c3f52f785bd47e7e499e620248","size":"2893","content":"/*\r\n * Copyright 2015 Network New Technologies Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\npackage com.networknt.light.rule.menu;\r\n\r\nimport com.networknt.light.rule.Rule;\r\nimport com.networknt.light.server.DbService;\r\nimport com.networknt.light.util.ServiceLocator;\r\nimport com.orientechnologies.orient.core.record.impl.ODocument;\r\nimport com.tinkerpop.blueprints.Vertex;\r\nimport com.tinkerpop.blueprints.impls.orient.OrientGraph;\r\nimport com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Created by husteve on 10/29/2014.\r\n *\r\n * AccessLevel R [owner]\r\n *\r\n */\r\npublic class DelMenuRule extends AbstractMenuRule implements Rule {\r\n    public boolean execute (Object ...objects) throws Exception {\r\n        Map<String, Object> inputMap = (Map<String, Object>) objects[0];\r\n        Map<String, Object> data = (Map<String, Object>) inputMap.get(\"data\");\r\n        Map<String, Object> user = (Map<String, Object>) inputMap.get(\"user\");\r\n        String rid = (String)data.get(\"@rid\");\r\n        String error = null;\r\n\r\n        String host = (String)user.get(\"host\");\r\n        if(host != null && !host.equals(data.get(\"host\"))) {\r\n            error = \"User can only delete menu for host: \" + host;\r\n            inputMap.put(\"responseCode\", 403);\r\n        } else {\r\n            OrientGraph graph = ServiceLocator.getInstance().getGraph();\r\n            try {\r\n                Vertex menu = DbService.getVertexByRid(graph, rid);\r\n                if(menu == null) {\r\n                    error = \"Menu with @rid \" + rid + \" cannot be found\";\r\n                    inputMap.put(\"responseCode\", 404);\r\n                } else {\r\n                    Map eventMap = getEventMap(inputMap);\r\n                    Map<String, Object> eventData = (Map<String, Object>)eventMap.get(\"data\");\r\n                    inputMap.put(\"eventMap\", eventMap);\r\n                    eventData.put(\"host\", menu.getProperty(\"host\"));// unique key\r\n                }\r\n            } catch (Exception e) {\r\n                logger.error(\"Exception:\", e);\r\n                throw e;\r\n            } finally {\r\n                graph.shutdown();\r\n            }\r\n        }\r\n        if(error != null) {\r\n            inputMap.put(\"result\", error);\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"networknt/light","sample_ref":"refs/heads/master","sample_path":"rule/src/main/java/com/networknt/light/rule/menu/DelMenuRule.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"e43d52898e1315b664e70ed67e6a22af5d6d969e","size":"12048","content":"package com.constellio.app.ui.application;\n\nimport static com.constellio.app.ui.i18n.i18n.$;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.security.Principal;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.joda.time.LocalDateTime;\n\nimport com.constellio.app.modules.rm.ui.builders.UserToVOBuilder;\nimport com.constellio.app.modules.rm.ui.contextmenu.RMRecordContextMenuHandler;\nimport com.constellio.app.services.factories.AppLayerFactory;\nimport com.constellio.app.services.factories.ConstellioFactories;\nimport com.constellio.app.services.sso.SSOServices;\nimport com.constellio.app.ui.entities.RecordVO.VIEW_MODE;\nimport com.constellio.app.ui.entities.UserVO;\nimport com.constellio.app.ui.framework.components.contextmenu.RecordContextMenuHandler;\nimport com.constellio.app.ui.framework.components.resource.ConstellioResourceHandler;\nimport com.constellio.app.ui.handlers.ConstellioErrorHandler;\nimport com.constellio.app.ui.i18n.i18n;\nimport com.constellio.app.ui.pages.base.ConstellioHeader;\nimport com.constellio.app.ui.pages.base.EnterViewListener;\nimport com.constellio.app.ui.pages.base.InitUIListener;\nimport com.constellio.app.ui.pages.base.MainLayoutImpl;\nimport com.constellio.app.ui.pages.base.SessionContext;\nimport com.constellio.app.ui.pages.base.SessionContextProvider;\nimport com.constellio.app.ui.pages.base.UIContext;\nimport com.constellio.app.ui.pages.base.VaadinSessionContext;\nimport com.constellio.app.ui.pages.login.LoginViewImpl;\nimport com.constellio.app.ui.pages.setup.ConstellioSetupViewImpl;\nimport com.constellio.data.utils.ImpossibleRuntimeException;\nimport com.constellio.data.utils.TimeProvider;\nimport com.constellio.model.entities.records.wrappers.User;\nimport com.constellio.model.entities.security.global.UserCredential;\nimport com.constellio.model.entities.security.global.UserCredentialStatus;\nimport com.constellio.model.services.factories.ModelLayerFactory;\nimport com.constellio.model.services.records.RecordServices;\nimport com.constellio.model.services.records.RecordServicesException;\nimport com.constellio.model.services.users.UserServices;\nimport com.vaadin.annotations.Theme;\nimport com.vaadin.event.UIEvents.PollListener;\nimport com.vaadin.navigator.Navigator;\nimport com.vaadin.navigator.View;\nimport com.vaadin.navigator.ViewChangeListener;\nimport com.vaadin.server.Page;\nimport com.vaadin.server.Page.BrowserWindowResizeEvent;\nimport com.vaadin.server.Page.BrowserWindowResizeListener;\nimport com.vaadin.server.RequestHandler;\nimport com.vaadin.server.Responsive;\nimport com.vaadin.server.VaadinRequest;\nimport com.vaadin.server.VaadinService;\nimport com.vaadin.server.VaadinSession;\nimport com.vaadin.ui.UI;\n\n@SuppressWarnings(\"serial\")\n@Theme(\"constellio\")\npublic class ConstellioUI extends UI implements SessionContextProvider, UIContext {\n\n\tprivate SessionContext sessionContext;\n\tprivate MainLayoutImpl mainLayout;\n\n\tprivate List<RecordContextMenuHandler> recordContextMenuHandlers = new ArrayList<>();\n\t\n\tprivate Map<String, Object> uiContext = new HashMap<>();\n\n\tpublic final RequestHandler requestHandler = new ConstellioResourceHandler();\n\n\tprivate SSOServices ssoServices;\n\n\t@Override\n\tprotected void init(VaadinRequest request) {\n\t\tgetSession().addRequestHandler(requestHandler);\n\n\t\tssoServices = SSOServices.getInstance();\n\n\t\tPage.getCurrent().setTitle($(\"ConstellioUI.pageTitle\"));\n\n\t\t// Important to allow update of components in current UI from another Thread\n\t\tUI.getCurrent().setPollInterval(1000);\n\n\t\tConstellioFactories constellioFactories = ConstellioFactories.getInstance();\n\t\tAppLayerFactory appLayerFactory = constellioFactories.getAppLayerFactory();\n\n\t\taddRecordContextMenuHandler(new RMRecordContextMenuHandler(constellioFactories));\n\n\t\tList<InitUIListener> initUIListeners = appLayerFactory.getInitUIListeners();\n\t\tfor (InitUIListener initUIListener : initUIListeners) {\n\t\t\tinitUIListener.beforeInitialize(this);\n\t\t}\n\n\t\tResponsive.makeResponsive(this);\n\t\t//\t\taddStyleName(ValoTheme.UI_WITH_MENU);\n\t\taddStyleName(\"ui-with-top-menu\");\n\n\t\t// Some views need to be aware of browser resize events so a\n\t\t// BrowserResizeEvent gets fired to the event but on every occasion.\n\t\tPage.getCurrent().addBrowserWindowResizeListener(\n\t\t\t\tnew BrowserWindowResizeListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void browserWindowResized(final BrowserWindowResizeEvent event) {\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tif (getErrorHandler() == null) {\n\t\t\tsetErrorHandler(new ConstellioErrorHandler());\n\t\t}\n\n\t\tif (sessionContext == null) {\n\t\t\tsessionContext = new VaadinSessionContext();\n\t\t}\n\t\tVaadinSession.getCurrent().setLocale(i18n.getLocale());\n\t\tsessionContext.setCurrentLocale(i18n.getLocale());\n\n\t\tupdateContent();\n\n\t\tfor (InitUIListener initUIListener : initUIListeners) {\n\t\t\tinitUIListener.afterInitialize(this);\n\t\t}\n\t}\n\n\t@Override\n\tpublic void detach() {\n\t\tsuper.detach();\n\t\tgetSession().removeRequestHandler(requestHandler);\n\t}\n\n\tprivate UserVO ssoAuthenticate() {\n\t\tUserVO currentUserVO;\n\n\t\tConstellioFactories constellioFactories = getConstellioFactories();\n\t\tModelLayerFactory modelLayerFactory = constellioFactories.getModelLayerFactory();\n\t\tUserServices userServices = modelLayerFactory.newUserServices();\n\t\tRecordServices recordServices = modelLayerFactory.newRecordServices();\n\n\t\tPrincipal userPrincipal = sessionContext.getUserPrincipal();\n\t\tif (userPrincipal != null) {\n\t\t\tString username = userPrincipal.getName();\n\n\t\t\tUserCredential userCredential = userServices.getUserCredential(username);\n\t\t\tif (userCredential != null && userCredential.getStatus() == UserCredentialStatus.ACTIVE) {\n\t\t\t\tList<String> collections = userCredential != null ? userCredential.getCollections() : new ArrayList<String>();\n\n\t\t\t\tString lastCollection = null;\n\t\t\t\tUser userInLastCollection = null;\n\t\t\t\tLocalDateTime lastLogin = null;\n\n\t\t\t\tfor (String collection : collections) {\n\t\t\t\t\tUser userInCollection = userServices.getUserInCollection(username, collection);\n\t\t\t\t\tif (userInLastCollection == null) {\n\t\t\t\t\t\tif (userInCollection != null) {\n\t\t\t\t\t\t\tlastCollection = collection;\n\t\t\t\t\t\t\tuserInLastCollection = userInCollection;\n\t\t\t\t\t\t\tlastLogin = userInCollection.getLastLogin();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (lastLogin == null && userInCollection.getLastLogin() != null) {\n\t\t\t\t\t\t\tlastCollection = collection;\n\t\t\t\t\t\t\tuserInLastCollection = userInCollection;\n\t\t\t\t\t\t\tlastLogin = userInCollection.getLastLogin();\n\t\t\t\t\t\t} else if (lastLogin != null && userInCollection.getLastLogin() != null && userInCollection.getLastLogin()\n\t\t\t\t\t\t\t\t.isAfter(lastLogin)) {\n\t\t\t\t\t\t\tlastCollection = collection;\n\t\t\t\t\t\t\tuserInLastCollection = userInCollection;\n\t\t\t\t\t\t\tlastLogin = userInCollection.getLastLogin();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (userInLastCollection != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\trecordServices.update(userInLastCollection\n\t\t\t\t\t\t\t\t.setLastLogin(TimeProvider.getLocalDateTime())\n\t\t\t\t\t\t\t\t.setLastIPAddress(sessionContext.getCurrentUserIPAddress()));\n\t\t\t\t\t} catch (RecordServicesException e) {\n\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tmodelLayerFactory.newLoggingServices().login(userInLastCollection);\n\t\t\t\t\tcurrentUserVO = new UserToVOBuilder()\n\t\t\t\t\t\t\t.build(userInLastCollection.getWrappedRecord(), VIEW_MODE.DISPLAY, sessionContext);\n\t\t\t\t\tsessionContext.setCurrentUser(currentUserVO);\n\t\t\t\t\tsessionContext.setCurrentCollection(lastCollection);\n\t\t\t\t\tsessionContext.setForcedSignOut(false);\n\t\t\t\t} else {\n\t\t\t\t\tcurrentUserVO = null;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentUserVO = null;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentUserVO = null;\n\t\t}\n\t\treturn currentUserVO;\n\t}\n\n\tpublic void updateContent() {\n\t\tif (isSetupRequired()) {\n\t\t\tConstellioSetupViewImpl setupView = new ConstellioSetupViewImpl();\n\t\t\tsetContent(setupView);\n\t\t\taddStyleName(\"setupview\");\n\t\t} else {\n\t\t\tConstellioFactories constellioFactories = getConstellioFactories();\n\t\t\tAppLayerFactory appLayerFactory = constellioFactories.getAppLayerFactory();\n\n\t\t\tUserVO currentUserVO = sessionContext.getCurrentUser();\n\t\t\tif (currentUserVO == null && ssoServices.isEnabled() && !sessionContext.isForcedSignOut()) {\n\t\t\t\tcurrentUserVO = ssoAuthenticate();\n\t\t\t}\n\t\t\tif (currentUserVO != null) {\n\t\t\t\t// Authenticated user\n\t\t\t\tmainLayout = new MainLayoutImpl(appLayerFactory);\n\n\t\t\t\tsetContent(mainLayout);\n\n\t\t\t\tNavigator navigator = getNavigator();\n\t\t\t\tnavigator.addViewChangeListener(new ViewChangeListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean beforeViewChange(ViewChangeEvent event) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void afterViewChange(ViewChangeEvent event) {\n\t\t\t\t\t\tView oldView = event.getOldView();\n\t\t\t\t\t\tif (oldView instanceof PollListener) {\n\t\t\t\t\t\t\tremovePollListener((PollListener) oldView);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tView newView = event.getNewView();\n\t\t\t\t\t\tConstellioFactories constellioFactories = ConstellioFactories.getInstance();\n\t\t\t\t\t\tAppLayerFactory appLayerFactory = constellioFactories.getAppLayerFactory();\n\t\t\t\t\t\tList<EnterViewListener> enterViewListeners = appLayerFactory.getEnterViewListeners();\n\t\t\t\t\t\tfor (EnterViewListener enterViewListener : enterViewListeners) {\n\t\t\t\t\t\t\tenterViewListener.enterView(newView);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//\t\t\t\t\t\tif (enterViewListeners.isEmpty() && !isProductionMode()) {\n\t\t\t\t\t\t//\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tConstellioSerializationUtils.validateSerializable(event.getOldView());\n\t\t\t\t\t\t//\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tLOGGER.warn(e.getMessage(), e);\n\t\t\t\t\t\t//\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tConstellioSerializationUtils.validateSerializable(event.getNewView());\n\t\t\t\t\t\t//\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t//\t\t\t\t\t\t\t\tLOGGER.warn(e.getMessage(), e);\n\t\t\t\t\t\t//\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tremoveStyleName(\"setupview\");\n\t\t\t\tremoveStyleName(\"loginview\");\n\t\t\t\tnavigator.navigateTo(navigator.getState());\n\t\t\t} else {\n\t\t\t\tremoveStyleName(\"setupview\");\n\t\t\t\tLoginViewImpl loginView = new LoginViewImpl();\n\t\t\t\tsetContent(loginView);\n\t\t\t\taddStyleName(\"loginview\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate boolean isSetupRequired() {\n\t\tConstellioFactories constellioFactories = getConstellioFactories();\n\t\treturn constellioFactories.getAppLayerFactory().getCollectionsManager().getCollectionCodesExcludingSystem().isEmpty();\n\t}\n\n\tpublic ConstellioHeader getHeader() {\n\t\treturn mainLayout.getHeader();\n\t}\n\n\tpublic SessionContext getSessionContext() {\n\t\treturn sessionContext;\n\t}\n\n\tpublic void setSessionContext(SessionContext sessionContext) {\n\t\tthis.sessionContext = sessionContext;\n\t}\n\n\t@Override\n\tpublic ConstellioFactories getConstellioFactories() {\n\t\treturn ConstellioFactories.getInstance();\n\t}\n\n\tpublic static SessionContext getCurrentSessionContext() {\n\t\treturn getCurrent().getSessionContext();\n\t}\n\n\tpublic boolean isProductionMode() {\n\t\tVaadinService service = VaadinService.getCurrent();\n\t\treturn service.getDeploymentConfiguration().isProductionMode();\n\t}\n\n\tpublic Navigation navigate() {\n\t\treturn new Navigation();\n\t}\n\n\tpublic CoreViews navigateTo() {\n\t\treturn navigateTo(CoreViews.class);\n\t}\n\n\tpublic <T extends CoreViews> T navigateTo(Class<T> navigatorClass) {\n\t\ttry {\n\t\t\treturn navigatorClass.getConstructor(Navigator.class).newInstance(getNavigator());\n\t\t} catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) {\n\t\t\tthrow new ImpossibleRuntimeException(\"The navigator does not provide a valid constructor\");\n\t\t}\n\t}\n\n\tpublic void addRecordContextMenuHandler(RecordContextMenuHandler recordContextMenuHandler) {\n\t\tthis.recordContextMenuHandlers.add(recordContextMenuHandler);\n\t}\n\n\tpublic void removeRecordContextMenuHandler(RecordContextMenuHandler recordContextMenuHandler) {\n\t\tthis.recordContextMenuHandlers.remove(recordContextMenuHandler);\n\t}\n\n\tpublic List<RecordContextMenuHandler> getRecordContextMenuHandlers() {\n\t\treturn recordContextMenuHandlers;\n\t}\n\n\tpublic static ConstellioUI getCurrent() {\n\t\treturn (ConstellioUI) UI.getCurrent();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic <T> T getAttribute(String key) {\n\t\treturn (T) uiContext.get(key);\n\t}\n\n\t@Override\n\tpublic <T> void setAttribute(String key, T value) {\n\t\tuiContext.put(key, value);\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"doculibre/constellio","sample_ref":"refs/heads/master","sample_path":"app/src/com/constellio/app/ui/application/ConstellioUI.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"d61263cc65a1cbab94bd9accab253edee02b36a3","size":"1126","content":"package jetbrains.buildServer.deployer.agent.cargo;\n\nimport jetbrains.buildServer.RunBuildException;\nimport jetbrains.buildServer.agent.*;\nimport jetbrains.buildServer.deployer.common.DeployerRunnerConstants;\nimport org.jetbrains.annotations.NotNull;\n\npublic class CargoDeployerRunner implements AgentBuildRunner {\n\n  @NotNull\n  @Override\n  public BuildProcess createBuildProcess(@NotNull AgentRunningBuild runningBuild, @NotNull final BuildRunnerContext context) throws RunBuildException {\n\n    final String username = context.getRunnerParameters().get(DeployerRunnerConstants.PARAM_USERNAME);\n    final String password = context.getRunnerParameters().get(DeployerRunnerConstants.PARAM_PASSWORD);\n    final String target = context.getRunnerParameters().get(DeployerRunnerConstants.PARAM_TARGET_URL);\n    final String sourcePath = context.getRunnerParameters().get(DeployerRunnerConstants.PARAM_SOURCE_PATH);\n\n    return new CargoBuildProcessAdapter(target, username, password, context, sourcePath);\n  }\n\n  @NotNull\n  @Override\n  public AgentBuildRunnerInfo getRunnerInfo() {\n    return new CargoDeployerRunnerInfo();\n  }\n\n\n}\n","binary":"false","copies":"1","sample_repo_name":"JetBrains/teamcity-deployer-plugin","sample_ref":"refs/heads/master","sample_path":"deploy-runner-agent/src/main/java/jetbrains/buildServer/deployer/agent/cargo/CargoDeployerRunner.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"c61d60552cd073305f881e3be8b008fe23b7beed","size":"4109","content":"/*******************************************************************************\n * JANNLab Neural Network Framework for Java\n * Copyright (C) 2012-2013 Sebastian Otte\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n ******************************************************************************/\n\npackage de.jannlab.examples.math;\n\nimport java.util.Collection;\n\n\n/**\n * This class provides some static method for statistical\n * analysis of Vector2f instances.\n * <br></br>\n * @author Sebastian Otte\n */\npublic class Vector2fTools {\n\t\n    /**\n     * Compute the mean vector of a given Collection of\n     * vectors.\n     * <br></br>\n     * @param points Collection of Vector2f instances.\n     * @return The mean vector.\n     */\n    public static Vector2f mean(Collection<Vector2f> points) {\n        //\n        Vector2f result = new Vector2f();\n        //\n        // sum all vectors.\n        //\n        for (Vector2f p : points) {\n            Vector2f.add(result, p, result);\n        }\n        //\n        // divide by the number of vectors.\n        //\n        final float size = points.size();\n        final float ilength = (size > 0.0f)?(1.0f / size):(0.0f);\n        //\n        Vector2f.mul(result, ilength, result);\n        //\n        return result;\n    }    \n    \n    /**\n     * This methods uses the PCA (principle component analysis)\n     * to compute the angle of the main axis (in relation to the x-axis)\n     * of a given point cloud.\n     * <br></br>\n     * @param points A Collection of Vector2f instances.\n     * @return The angle of the main axis.\n     */\n    public static float pcaAngle(Collection<Vector2f> points) {\n        //\n        final float size = points.size();\n        if (size < 2) return 0.0f;\n        //\n        // determin mean vector.\n        //\n        final Vector2f mean = mean(points); \n        //\n        double cov00 = 0.0; \n        double cov01 = 0.0; \n        //double cov10 = 0.0; \n        double cov11 = 0.0; \n        //\n        // determine the covariance matrix of the point cloud.\n        //\n        for (Vector2f p : points) {\n            final float x = mean.x - p.x;\n            final float y = mean.y - p.y;\n            //\n            cov00 += (x * x);\n            cov01 += (x * y);\n            //cov10 += (y * x);\n            cov11 += (y * y);\n        }\n        //\n        final double in  = (size > 0.0f)?(1.0f / size):(0.0f);\n        //\n        cov00 *= (in);\n        cov01 *= (in);\n        //cov10 *= (in);\n        cov11 *= (in);\n        //\n        // compute angle.\n        //\n        final double covd = (cov00 - cov11);\n        if (covd == 0.0) return 0.0f;\n        final double theta = 0.5 * Math.atan(\n            (2.0 * cov01) / covd\n        );\n        /*\n        //\n        // compute eigenvalues.\n        //\n        final double term1   = (cov00 + cov11) * 0.5;\n        final double term2t  = (4.0 * cov01 * cov01) + (covd * covd);\n        final double term2   = Math.sqrt(term2t)  * 0.5;\n        final double lambda1 = term1 + term2;\n        final double lambda2 = term1 - term2;\n\n        System.out.println(Math.toDegrees(theta));\n        System.out.println(lambda1);\n        System.out.println(lambda2);\n        */\n        return (float)theta;\n    }\n\n    /*\n    public static void main(String[] args) {\n        \n        \n        List<Vector2f> list = new LinkedList<Vector2f>();\n        \n        list.add(new Vector2f(1, 0));\n        list.add(new Vector2f(2, 0));\n        list.add(new Vector2f(7, 7));\n        \n        pca(list);\n    }\n    */\n\t\t\t\n}\n","binary":"false","copies":"1","sample_repo_name":"JANNLab/JANNLab","sample_ref":"refs/heads/master","sample_path":"examples/de/jannlab/examples/math/Vector2fTools.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4f47756019774f140ab14c2e30fe88d264cbb15a","size":"4725","content":"/**\n * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies\n *\n * Please see distribution for license.\n */\npackage com.opengamma.analytics.financial.interestrate.market.calculator;\n\nimport com.opengamma.analytics.financial.interestrate.AbstractInstrumentDerivativeVisitor;\nimport com.opengamma.analytics.financial.interestrate.annuity.derivative.Annuity;\nimport com.opengamma.analytics.financial.interestrate.annuity.derivative.AnnuityCouponFixed;\nimport com.opengamma.analytics.financial.interestrate.market.description.IMarketBundle;\nimport com.opengamma.analytics.financial.interestrate.market.description.MultipleCurrencyCurveSensitivityMarket;\nimport com.opengamma.analytics.financial.interestrate.payments.derivative.CouponFixed;\nimport com.opengamma.analytics.financial.interestrate.payments.derivative.CouponIbor;\nimport com.opengamma.analytics.financial.interestrate.payments.derivative.CouponOIS;\nimport com.opengamma.analytics.financial.interestrate.payments.derivative.Payment;\nimport com.opengamma.analytics.financial.interestrate.payments.market.CouponFixedDiscountingMarketMethod;\nimport com.opengamma.analytics.financial.interestrate.payments.market.CouponIborDiscountingMarketMethod;\nimport com.opengamma.analytics.financial.interestrate.payments.market.CouponOISDiscountingMarketMethod;\nimport com.opengamma.analytics.financial.interestrate.swap.derivative.Swap;\nimport com.opengamma.analytics.financial.interestrate.swap.derivative.SwapFixedCoupon;\nimport com.opengamma.util.ArgumentChecker;\n\n/**\n * Calculator of the present value curve sensitivity as multiple currency interest rate curve sensitivity.\n */\npublic final class PresentValueCurveSensitivityMarketCalculator extends AbstractInstrumentDerivativeVisitor<IMarketBundle, MultipleCurrencyCurveSensitivityMarket> {\n\n  /**\n   * The unique instance of the calculator.\n   */\n  private static final PresentValueCurveSensitivityMarketCalculator INSTANCE = new PresentValueCurveSensitivityMarketCalculator();\n\n  /**\n   * Gets the calculator instance.\n   * @return The calculator.\n   */\n  public static PresentValueCurveSensitivityMarketCalculator getInstance() {\n    return INSTANCE;\n  }\n\n  /**\n   * Constructor.\n   */\n  private PresentValueCurveSensitivityMarketCalculator() {\n  }\n\n  /**\n   * The methods used by the different instruments.\n   */\n  private static final CouponFixedDiscountingMarketMethod METHOD_CPN_FIXED = CouponFixedDiscountingMarketMethod.getInstance();\n  private static final CouponIborDiscountingMarketMethod METHOD_CPN_IBOR = CouponIborDiscountingMarketMethod.getInstance();\n  private static final CouponOISDiscountingMarketMethod METHOD_CPN_ON = CouponOISDiscountingMarketMethod.getInstance();\n\n  // -----     Payment/Coupon     ------\n\n  @Override\n  public MultipleCurrencyCurveSensitivityMarket visitCouponFixed(final CouponFixed payment, final IMarketBundle market) {\n    return METHOD_CPN_FIXED.presentValueMarketSensitivity(payment, market);\n  }\n\n  @Override\n  public MultipleCurrencyCurveSensitivityMarket visitCouponIbor(final CouponIbor payment, final IMarketBundle market) {\n    return METHOD_CPN_IBOR.presentValueMarketSensitivity(payment, market);\n  }\n\n  @Override\n  public MultipleCurrencyCurveSensitivityMarket visitCouponOIS(final CouponOIS payment, final IMarketBundle market) {\n    return METHOD_CPN_ON.presentValueMarketSensitivity(payment, market);\n  }\n\n  // -----     Annuity     ------\n\n  @Override\n  public MultipleCurrencyCurveSensitivityMarket visitGenericAnnuity(final Annuity<? extends Payment> annuity, final IMarketBundle market) {\n    ArgumentChecker.notNull(annuity, \"Annuity\");\n    ArgumentChecker.notNull(market, \"Market\");\n    MultipleCurrencyCurveSensitivityMarket cs = visit(annuity.getNthPayment(0), market);\n    for (int loopp = 1; loopp < annuity.getNumberOfPayments(); loopp++) {\n      cs = cs.plus(visit(annuity.getNthPayment(loopp), market));\n    }\n    return cs;\n  }\n\n  @Override\n  public MultipleCurrencyCurveSensitivityMarket visitFixedCouponAnnuity(final AnnuityCouponFixed annuity, final IMarketBundle market) {\n    return visitGenericAnnuity(annuity, market);\n  }\n\n  // -----     Swap     ------\n\n  @Override\n  public MultipleCurrencyCurveSensitivityMarket visitSwap(final Swap<?, ?> swap, final IMarketBundle market) {\n    final MultipleCurrencyCurveSensitivityMarket sensitivity1 = visit(swap.getFirstLeg(), market);\n    final MultipleCurrencyCurveSensitivityMarket sensitivity2 = visit(swap.getSecondLeg(), market);\n    return sensitivity1.plus(sensitivity2);\n  }\n\n  @Override\n  public MultipleCurrencyCurveSensitivityMarket visitFixedCouponSwap(final SwapFixedCoupon<?> swap, final IMarketBundle market) {\n    return visitSwap(swap, market);\n  }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"charles-cooper/idylfin","sample_ref":"refs/heads/master","sample_path":"src/com/opengamma/analytics/financial/interestrate/market/calculator/PresentValueCurveSensitivityMarketCalculator.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"71d4ee310493299d5e700c585b8ddd6194495cf2","size":"11836","content":"/*\n * Overchan Android (Meta Imageboard Client)\n * Copyright (C) 2014-2016  miku-nyan <https://github.com/miku-nyan>\n *     \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\npackage nya.miku.wishmaster.api.models;\n\nimport java.io.Serializable;\n\nimport nya.miku.wishmaster.api.ChanModule;\n\nimport com.esotericsoftware.kryo.serializers.TaggedFieldSerializer.Tag;\n\n/**\n * \u041c\u043e\u0434\u0435\u043b\u044c \u0434\u043e\u0441\u043a\u0438 (\u0444\u043e\u0440\u0443\u043c\u0430) \u043d\u0430 \u0438\u043c\u0438\u0434\u0436\u0431\u043e\u0440\u0434\u0435\n * @author miku-nyan\n *\n */\npublic class BoardModel implements Serializable {\n    private static final long serialVersionUID = 1L;\n    \n    /** \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438\u043c\u0438\u0434\u0436\u0431\u043e\u0440\u0434\u044b (\u0442\u043e, \u0447\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 {@link ChanModule#getChanName()} \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u0430\u043d\u043d\u043e\u0439 \u0438\u043c\u0438\u0434\u0436\u0431\u043e\u0440\u0434\u044b). */\n    @Tag(0) public String chan;\n    /** \u041a\u043e\u0434 \u0434\u043e\u0441\u043a\u0438 (\u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435), \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \"b\", \"s\", \"int\". */\n    @Tag(1) public String boardName;\n    /** \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u0441\u043a\u0438 (\u043f\u043e\u043b\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435), \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \"\u0411\u0440\u0435\u0434\", \"\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\", \"International\". */\n    @Tag(2) public String boardDescription;\n    /** \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0434\u043e\u0441\u043a\u0430 (\u0432 \u0441\u043b\u0443\u0447\u0430\u0435 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043e\u0441\u043e\u043a \u043f\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c). \u041c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c null. */\n    @Tag(3) public String boardCategory;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043a\u043e\u043d\u0442\u0435\u043d\u0442 18+ \u0438\u043b\u0438 \u0434\u043e\u0441\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0435\u043c\u043e\u0434\u0435\u0440\u0438\u0440\u0443\u0435\u043c\u043e\u0439. */\n    @Tag(4) public boolean nsfw;\n    \n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432\u0441\u0435 (\u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0435) \u0438\u043c\u0435\u043d\u0430 \u0444\u0430\u0439\u043b\u043e\u0432 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u043f\u0440\u0435\u0432\u044c\u044e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b. */\n    @Tag(5) public boolean uniqueAttachmentNames;\n    \n    /** \u0427\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0439 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \"GMT+3\", \"US/Eastern\". */\n    @Tag(6) public String timeZoneId;\n    \n    /** \u0418\u043c\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0435 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \"\u0410\u043d\u043e\u043d\u0438\u043c\". */\n    @Tag(7) public String defaultUserName;\n    /** \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0442\u043e\u0432 \u0434\u043e \u0431\u0430\u043c\u043f \u043b\u0438\u043c\u0438\u0442\u0430 (\u043f\u043e\u0441\u043b\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u043e\u0432\u044b\u0435 \u043f\u043e\u0441\u0442\u044b \u0431\u0435\u0437 \u0441\u0430\u0436\u0438 \u043d\u0435 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u044e\u0442 \u0442\u0440\u0435\u0434 \u043d\u0430\u0432\u0435\u0440\u0445). */\n    @Tag(8) public int bumpLimit;\n    \n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u0430\u044f \u0434\u043e\u0441\u043a\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f. */\n    @Tag(9) public boolean readonlyBoard;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u044d\u0442\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u0444\u0430\u0439\u043b, \u0447\u0442\u043e\u0431\u044b \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0442\u0440\u0435\u0434. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(10) public boolean requiredFileForNewThread;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0441\u0432\u043e\u0438 \u043f\u043e\u0441\u0442\u044b. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(11) public boolean allowDeletePosts;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 \u0441\u0432\u043e\u0438\u0445 \u043f\u043e\u0441\u0442\u0430\u0445. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(12) public boolean allowDeleteFiles;\n    /** \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043e \u043b\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u0440\u0430\u0442\u043e\u0440\u0443), \u043e\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\n     *  {@link #REPORT_NOT_ALLOWED}, {@link #REPORT_SIMPLE}, {@link #REPORT_WITH_COMMENT} */\n    @Tag(31) public int allowReport;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043c\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(13) public boolean allowNames;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u0435\u043c\u044b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0439. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(14) public boolean allowSubjects;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u043e\u0441\u0442\u044b \u0441 \u0441\u0430\u0436\u0435\u0439 (\u043d\u0435 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u044f \u0442\u0440\u0435\u0434). \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(15) public boolean allowSage;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c e-mail \u0430\u0434\u0440\u0435\u0441 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(16) public boolean allowEmails;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043f\u043e\u0441\u0442\u0430 \u0441 \u0441\u0430\u0436\u0435\u0439 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c e-mail. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(17) public boolean ignoreEmailIfSage;\n    \n    @Deprecated @Tag(18) public boolean allowWatermark;\n    \n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u0441\u0442 \u0441 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u043c (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \"\u041e\u041f \u0442\u0440\u0435\u0434\u0430\").\n     *  \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(19) public boolean allowCustomMark;\n    /** \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043c\u043e\u0434\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 (\u0442\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #allowCustomMark} \u0440\u0430\u0432\u043d\u043e true), \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \"\u041e\u041f \u0442\u0440\u0435\u0434\u0430\". */\n    @Tag(32) public String customMarkDescription;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u0441\u0442\u0438\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u0444\u0430\u0439\u043b\u044b, \u043d\u043e \u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u043e\u0431\u043e\u0439\u0442\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 \u0432 \u0445\u0432\u043e\u0441\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0431\u0430\u0439\u0442\n     *  (\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u044b\u0445 \u0445\u044d\u0448). \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(20) public boolean allowRandomHash;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u043e\u0441\u043a\u0435 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u043d\u0430\u0447\u043e\u043a (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u0439).\n     *  \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(21) public boolean allowIcons;\n    /** \u041c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c\u0438 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u043a\u043e\u0432. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #allowIcons} \u0440\u0430\u0432\u043d\u043e true, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c null. */\n    @Tag(22) public String[] iconDescriptions;\n    /** \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0430\u0439\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u0438\u0442\u044c \u043a \u043f\u043e\u0441\u0442\u0443. \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false.\n     *  \u0415\u0441\u043b\u0438 {@link #requiredFileForNewThread} \u0440\u0430\u0432\u043d\u043e true, \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0443\u043b\u044f. */\n    @Tag(23) public int attachmentsMaxCount;\n    /** \u041c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432 (\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0439) \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u043c\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: [\"jpg\", \"png\", \"gif\"].\n     *  \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 null \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u044f\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u0444\u0430\u0439\u043b\u044b.\n     *  \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(24) public String[] attachmentsFormatFilters;\n    /** \u0422\u0438\u043f \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0432 \u0442\u0435\u043b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u0441\u0442\u0430,\n     *  \u043e\u0434\u043d\u043e \u0438\u0437 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: {@link #MARK_NOMARK}, {@link #MARK_WAKABAMARK}, {@link #MARK_BBCODE}.\n     *  \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #readonlyBoard} \u0440\u0430\u0432\u043d\u043e false. */\n    @Tag(30) public int markType;\n    \n    /** \u041d\u043e\u043c\u0435\u0440 \u043f\u0435\u0440\u0432\u043e\u0439 (\u043d\u0443\u043b\u0435\u0432\u043e\u0439) \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435. */\n    @Tag(25) public int firstPage;\n    /** \u041d\u043e\u043c\u0435\u0440 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435.\n     *  \u0415\u0441\u043b\u0438 \u043d\u0435 \u0443\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u0438\u043b\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u043c\u0438\u0434\u0436\u0431\u043e\u0440\u0434\u043e\u0439, \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 {@link #LAST_PAGE_UNDEFINED}. */\n    @Tag(26) public int lastPage;\n    \n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0432\u0441\u0435\u0439 \u0434\u043e\u0441\u043a\u0435. */\n    @Tag(27) public boolean searchAllowed;\n    /** \u0414\u043e\u043b\u0436\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c true, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430. */\n    @Tag(28) public boolean catalogAllowed;\n    /** \u041c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f\u043c\u0438 \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u043f\u043e\u043a\u0430\u0437\u0430 \u043a\u0430\u0442\u0430\u043b\u043e\u0433\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: [\"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0431\u0430\u043c\u043f\u0430\u043c\", \"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\"].\n     *  \u0422\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u043b\u0438 {@link #catalogAllowed} \u0440\u0430\u0432\u043d\u043e true, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c null. */\n    @Tag(29) public String[] catalogTypeDescriptions;\n    \n    /** \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0435\u0441\u043b\u0438 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043d\u043e\u043c\u0435\u0440 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d. */\n    public static final int LAST_PAGE_UNDEFINED = Integer.MAX_VALUE;\n    \n    /** \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043f\u043e\u0441\u0442\u0430 - \u0431\u0435\u0437 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 */\n    public static final int MARK_NOMARK = 0;\n    /** \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043f\u043e\u0441\u0442\u0430 - \u043c\u043e\u0434\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 wakabamark.<br>\n     *  *italic* **bold** %%spoiler%% strike^H^H^H^H^H^H */\n    public static final int MARK_WAKABAMARK = 1;\n    /** \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043f\u043e\u0441\u0442\u0430 - BBCode.<br>\n     *  [i]italic[/i] [b]bold[/b] [u]underline[/u] [spoiler]spoiler[/spoiler] [s]strike[/s] */\n    public static final int MARK_BBCODE = 2;\n    /** \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043f\u043e\u0441\u0442\u0430 - 4chan.<br>\n     *  *italic* **bold** __underline__ [spoiler]spoiler[/spoiler] */\n    public static final int MARK_4CHAN = 3;\n    \n    /** \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f */\n    public static final int REPORT_NOT_ALLOWED = 0;\n    /** \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u043f\u0440\u0438 \u0440\u0435\u043f\u043e\u0440\u0442\u0435 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u043c\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f */\n    public static final int REPORT_SIMPLE = 1;\n    /** \u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0435\u0441\u043b\u0438 \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u0439 \u0434\u043e\u0441\u043a\u0435 \u043f\u0440\u0438 \u0440\u0435\u043f\u043e\u0440\u0442\u0435 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 */\n    public static final int REPORT_WITH_COMMENT = 2;\n    \n}\n","binary":"false","copies":"1","sample_repo_name":"miku-nyan/Overchan-Android","sample_ref":"refs/heads/master","sample_path":"src/nya/miku/wishmaster/api/models/BoardModel.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"381d47de7e25e0197a1dcb04107ebc2a7492ab0d","size":"5494","content":"/*\n * eGov suite of products aim to improve the internal efficiency,transparency,\n *    accountability and the service delivery of the government  organizations.\n *\n *     Copyright (C) <2015>  eGovernments Foundation\n *\n *     The updated version of eGov suite of products as by eGovernments Foundation\n *     is available at http://www.egovernments.org\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program. If not, see http://www.gnu.org/licenses/ or\n *     http://www.gnu.org/licenses/gpl.html .\n *\n *     In addition to the terms of the GPL license to be adhered to in using this\n *     program, the following additional terms are to be complied with:\n *\n *         1) All versions of this program, verbatim or modified must carry this\n *            Legal Notice.\n *\n *         2) Any misrepresentation of the origin of the material is prohibited. It\n *            is required that all modified versions of this material be marked in\n *            reasonable ways as different from the original version.\n *\n *         3) This license does not grant any rights to any user of the program\n *            with regards to rights under trademark law for use of the trade names\n *            or trademarks of eGovernments Foundation.\n *\n *   In case of any queries, you can reach eGovernments Foundation at contact@egovernments.org.\n */\n\npackage org.egov.infra.web.struts.interceptors;\n\nimport com.opensymphony.xwork2.ActionInvocation;\nimport com.opensymphony.xwork2.ValidationAware;\nimport com.opensymphony.xwork2.interceptor.AbstractInterceptor;\nimport org.egov.infra.validation.exception.ValidationError;\nimport org.egov.infra.validation.exception.ValidationException;\nimport org.egov.infra.web.struts.actions.BaseFormAction;\nimport org.egov.infra.web.struts.annotation.ValidationErrorPage;\nimport org.egov.infra.web.struts.annotation.ValidationErrorPageExt;\nimport org.egov.infra.web.struts.annotation.ValidationErrorPageForward;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.List;\n\npublic class ValidationInterceptor extends AbstractInterceptor {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t@Override\n\tpublic String intercept(final ActionInvocation invocation) throws Exception {\n\t\tString form = \"edit\";\n\t\tMethod actionMethod = null;\n\t\tfinal Object action = invocation.getAction();\n\t\tboolean isInvokeAndForward = false;\n\t\ttry {\n\t\t\tfinal String method = invocation.getProxy().getMethod();\n\t\t\tif (\"create\".equals(method)) {\n\t\t\t\tform = \"new\";\n\t\t\t}\n\t\t\tfinal Method m = action.getClass().getMethod(method);\n\n\t\t\tif (m.isAnnotationPresent(ValidationErrorPage.class)) {\n\t\t\t\tform = m.getAnnotation(ValidationErrorPage.class).value();\n\t\t\t} else if (m.isAnnotationPresent(ValidationErrorPageExt.class)) {\n\t\t\t\tfinal ValidationErrorPageExt validationErrorPageExt = m.getAnnotation(ValidationErrorPageExt.class);\n\t\t\t\tform = validationErrorPageExt.action();\n\t\t\t\tif (validationErrorPageExt.makeCall()) {\n\t\t\t\t\tactionMethod = action.getClass().getMethod(validationErrorPageExt.toMethod());\n\t\t\t\t}\n\t\t\t} else if (m.isAnnotationPresent(ValidationErrorPageForward.class)) {\n\t\t\t\tfinal ValidationErrorPageForward forwarder = m.getAnnotation(ValidationErrorPageForward.class);\n\t\t\t\tactionMethod = action.getClass().getDeclaredMethod(forwarder.forwarderMethod());\n\t\t\t\tisInvokeAndForward = true;\n\t\t\t}\n\t\t\tfinal ValidationAware validationAwareAction = (ValidationAware) invocation.getAction();\n\t\t\tif (validationAwareAction.hasErrors()) {\n\t\t\t\tif (isInvokeAndForward) {\n\t\t\t\t\treturn (String) actionMethod.invoke(action);\n\t\t\t\t} else {\n\t\t\t\t\tthis.invokeActionMethod(actionMethod, action);\n\t\t\t\t\treturn form;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn invocation.invoke();\n\t\t} catch (final ValidationException e) {\n\t\t\tif (BaseFormAction.class.isAssignableFrom(invocation.getAction().getClass())) {\n\t\t\t\tthis.transformValidationErrors(invocation, e);\n\t\t\t\tif (isInvokeAndForward) {\n\t\t\t\t\treturn (String) actionMethod.invoke(action);\n\t\t\t\t} else {\n\t\t\t\t\tthis.invokeActionMethod(actionMethod, action);\n\t\t\t\t\treturn form;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tprivate void invokeActionMethod(final Method actionMethod, final Object action) throws IllegalAccessException, InvocationTargetException, RuntimeException {\n\t\tif (actionMethod != null) {\n\t\t\tactionMethod.setAccessible(true);\n\t\t\tactionMethod.invoke(action);\n\t\t}\n\t}\n\n\tprivate void transformValidationErrors(final ActionInvocation invocation, final ValidationException e) {\n\t\tfinal BaseFormAction action = (BaseFormAction) invocation.getAction();\n\t\tfinal List<ValidationError> errors = e.getErrors();\n\t\tfor (final ValidationError error : errors) {\n\t\t\tif (error.getArgs() == null || error.getArgs().length == 0) {\n\t\t\t\taction.addFieldError(\"model.\" + error.getKey(), action.getText(error.getMessage(), error.getMessage()));\n\t\t\t} else {\n\t\t\t\taction.addFieldError(\"model.\" + error.getKey(), action.getText(error.getMessage(), error.getMessage(), error.getArgs()));\n\t\t\t}\n\t\t}\n\t}\n\n}","binary":"false","copies":"1","sample_repo_name":"egovernments/eGov","sample_ref":"refs/heads/master","sample_path":"egov/egov-egi/src/main/java/org/egov/infra/web/struts/interceptors/ValidationInterceptor.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"4f49c5ccf33b131cc87ce9f973127aefd8a7402b","size":"1112","content":"package ca.uhn.fhir.rest.server;\n\n/*\n * #%L\n * HAPI FHIR - Core Library\n * %%\n * Copyright (C) 2014 - 2015 University Health Network\n * %%\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * #L%\n */\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hl7.fhir.instance.model.IBaseResource;\n\npublic interface IServerConformanceProvider<T extends IBaseResource> {\n\n\t/**\n\t * Actually create and return the conformance statement\n\t * \n\t * See the class documentation for an important note if you are extending this class\n\t */\n\tpublic abstract T getServerConformance(HttpServletRequest theRequest);\n\n}\n","binary":"false","copies":"1","sample_repo_name":"gajen0981/FHIR-Server","sample_ref":"refs/heads/master","sample_path":"hapi-fhir-base/src/main/java/ca/uhn/fhir/rest/server/IServerConformanceProvider.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"fc1b5f6ec720ff67b713f130781ea0539ce7d684","size":"5030","content":"/**\n * Copyright 2011-2015 John Ericksen\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.androidtransfuse.module;\n\nimport org.androidtransfuse.adapter.ASTMethod;\nimport org.androidtransfuse.adapter.ASTParameter;\nimport org.androidtransfuse.adapter.ASTType;\nimport org.androidtransfuse.adapter.classes.ASTClassFactory;\nimport org.androidtransfuse.analysis.AnalysisContext;\nimport org.androidtransfuse.analysis.InjectionPointFactory;\nimport org.androidtransfuse.analysis.SimpleAnalysisContextFactory;\nimport org.androidtransfuse.analysis.targets.MockAnalysisClass;\nimport org.androidtransfuse.bootstrap.Bootstrap;\nimport org.androidtransfuse.bootstrap.Bootstraps;\nimport org.androidtransfuse.model.ConstructorInjectionPoint;\nimport org.androidtransfuse.model.FieldInjectionPoint;\nimport org.androidtransfuse.model.InjectionNode;\nimport org.androidtransfuse.model.MethodInjectionPoint;\nimport org.androidtransfuse.util.TransfuseInjectionException;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport javax.inject.Inject;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.TypeVariable;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\n\n/**\n * @author John Ericksen\n */\n@Bootstrap\npublic class InjectionPointFactoryTest {\n\n    private AnalysisContext emptyContext;\n    @Inject\n    private ASTClassFactory astClassFactory;\n    @Inject\n    private SimpleAnalysisContextFactory contextFactory;\n    @Inject\n    private InjectionPointFactory injectionPointFactory;\n\n    @Before\n    public void setUp() {\n        Bootstraps.inject(this);\n        emptyContext = contextFactory.buildContext();\n    }\n\n    @Test\n    public void testConstructorInjectionPointBuild() {\n        Constructor<?>[] constructors = MockAnalysisClass.class.getConstructors();\n        Constructor constructor = constructors[0];\n\n        ConstructorInjectionPoint constructorInjectionPoint = injectionPointFactory.buildInjectionPoint(astClassFactory.getType(MockAnalysisClass.class), astClassFactory.getConstructor(constructor, false, false), emptyContext);\n\n        TypeVariable[] typeParameters = constructor.getTypeParameters();\n        List<InjectionNode> injectionNodes = constructorInjectionPoint.getInjectionNodes();\n        for (int i = 0; i < typeParameters.length; i++) {\n\n            InjectionNode injectionNode = injectionNodes.get(i);\n            TypeVariable typeParameter = typeParameters[i];\n            assertEquals(typeParameter.getName(), injectionNode.getClassName());\n        }\n\n        assertEquals(1, constructorInjectionPoint.getThrowsTypes().size());\n        assertEquals(astClassFactory.getType(TransfuseInjectionException.class), constructorInjectionPoint.getThrowsTypes().get(0));\n    }\n\n    @Test\n    public void testMethodInjectionPointBuild() {\n        Method[] methods = MockAnalysisClass.class.getDeclaredMethods();\n        Method method = methods[0];\n\n        List<ASTParameter> astParameters = astClassFactory.getParameters(method);\n        ASTType containingType = astClassFactory.getType(MockAnalysisClass.class);\n        ASTMethod astMethod = astClassFactory.getMethod(method);\n\n        MethodInjectionPoint methodInjectionPoint = injectionPointFactory.buildInjectionPoint(containingType, containingType, astMethod, emptyContext);\n\n\n        List<InjectionNode> injectionNodes = methodInjectionPoint.getInjectionNodes();\n        for (int i = 0; i < astParameters.size(); i++) {\n\n            InjectionNode injectionNode = injectionNodes.get(i);\n            ASTParameter typeParameter = astParameters.get(i);\n            assertEquals(typeParameter.getASTType().getName(), injectionNode.getClassName());\n        }\n\n        assertEquals(1, methodInjectionPoint.getThrowsTypes().size());\n        assertEquals(astClassFactory.getType(TransfuseInjectionException.class), methodInjectionPoint.getThrowsTypes().get(0));\n    }\n\n    @Test\n    public void testParameterInjectionPointBuild() {\n        Field[] fields = MockAnalysisClass.class.getDeclaredFields();\n        Field field = fields[0];\n\n        ASTType containingType = astClassFactory.getType(MockAnalysisClass.class);\n\n        FieldInjectionPoint fieldInjectionPoint = injectionPointFactory.buildInjectionPoint(containingType, containingType, astClassFactory.getField(field), emptyContext);\n\n        InjectionNode injectionNode = fieldInjectionPoint.getInjectionNode();\n\n        assertEquals(field.getType().getName(), injectionNode.getClassName());\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"johncarl81/transfuse","sample_ref":"refs/heads/master","sample_path":"transfuse/src/test/java/org/androidtransfuse/module/InjectionPointFactoryTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ac321d7775e3b41454a8f915df16deffe53aef0c","size":"846","content":"package com.tw.go.task.check_mk;\n\nimport org.json.JSONObject;\n\npublic abstract class CheckMkJob{\n    protected ICheckMkClient checkMkClient;\n    protected String Action;\n    protected String Parameters;\n    public CheckMkJob(ICheckMkClient checkMkClient)\n    {\n        this.checkMkClient = checkMkClient;\n    }\n    public ICheckMkClient getCheckMkClient() {\n        return checkMkClient;\n    }\n\n    protected JSONObject ExecuteWebRequest(JSONObject requestObject) throws Exception {\n        String url = getCheckMkClient().CreateRequestUrl(Action,Parameters);\n        String urlParameters= getCheckMkClient().CreateUrlParameters(requestObject);\n        String result = getCheckMkClient().ExecuteJob(url,urlParameters);\n        return new JSONObject(result);\n    }\n\n    public abstract String Execute(JSONObject requestObject) throws Exception;\n}\n","binary":"false","copies":"1","sample_repo_name":"Haufe-Lexware/gocd-plugins","sample_ref":"refs/heads/master","sample_path":"check_mk-plugin/src/com/tw/go/task/check_mk/CheckMkJob.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"e959316f2a8616f608c046ca65e935609b922f05","size":"2367","content":"/*\n * SonarQube Runner - API\n * Copyright (C) 2011-2016 SonarSource SA\n * mailto:contact AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\npackage org.sonar.runner.api;\n\nimport org.junit.Test;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class IssueTest {\n\n  @Test\n  public void increase_coverage() {\n    Issue issue = Issue.builder()\n      .setAssigneeLogin(\"assignee\")\n      .setAssigneeName(\"assigneeName\")\n      .setComponentKey(\"comp\")\n      .setEndLine(10)\n      .setEndLineOffset(11)\n      .setKey(\"key\")\n      .setMessage(\"msg\")\n      .setNew(true)\n      .setResolution(\"resolution\")\n      .setRuleKey(\"ruleKey\")\n      .setRuleName(\"ruleName\")\n      .setSeverity(\"severity\")\n      .setStartLine(1)\n      .setStartLineOffset(2)\n      .setStatus(\"status\")\n      .build();\n\n    assertThat(issue.getAssigneeLogin()).isEqualTo(\"assignee\");\n    assertThat(issue.getAssigneeName()).isEqualTo(\"assigneeName\");\n    assertThat(issue.getComponentKey()).isEqualTo(\"comp\");\n    assertThat(issue.getEndLine()).isEqualTo(10);\n    assertThat(issue.getEndLineOffset()).isEqualTo(11);\n    assertThat(issue.getKey()).isEqualTo(\"key\");\n    assertThat(issue.getMessage()).isEqualTo(\"msg\");\n    assertThat(issue.isNew()).isTrue();\n    assertThat(issue.getResolution()).isEqualTo(\"resolution\");\n    assertThat(issue.getRuleKey()).isEqualTo(\"ruleKey\");\n    assertThat(issue.getRuleName()).isEqualTo(\"ruleName\");\n    assertThat(issue.getSeverity()).isEqualTo(\"severity\");\n    assertThat(issue.getStartLine()).isEqualTo(1);\n    assertThat(issue.getStartLineOffset()).isEqualTo(2);\n    assertThat(issue.getStatus()).isEqualTo(\"status\");\n  }\n\n}\n","binary":"false","copies":"1","sample_repo_name":"SonarSource/sonar-runner","sample_ref":"refs/heads/master","sample_path":"sonar-runner-api/src/test/java/org/sonar/runner/api/IssueTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"80a3dae815b9672d9a51a4a808ed5bd00c55aa4e","size":"586","content":"package io.dwak.sleepcyclealarm.dagger.component;\n\nimport dagger.Component;\nimport io.dwak.sleepcyclealarm.dagger.module.PresenterModule;\nimport io.dwak.sleepcyclealarm.dagger.scope.ViewScope;\nimport io.dwak.sleepcyclealarm.ui.options.OptionsPresenterTest;\nimport io.dwak.sleepcyclealarm.ui.times.WakeUpTimesViewTest;\n\n@ViewScope\n@Component(modules = PresenterModule.class, dependencies = InteractorComponent.class)\npublic interface TestPresenterComponent extends PresenterComponent {\n    void inject(WakeUpTimesViewTest view);\n\n    void inject(OptionsPresenterTest optionsViewTest);\n}\n","binary":"false","copies":"1","sample_repo_name":"burntcookie90/Sleep-Cycle-Alarm","sample_ref":"refs/heads/master","sample_path":"mobile/src/test/java/io/dwak/sleepcyclealarm/dagger/component/TestPresenterComponent.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"5a520ee51c50d0dceff8efd1c31e064a083a1412","size":"2640","content":"import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\n/**\n * Dean Attali<br>\n * March 15, 2006<br><br>\n *\n * The frame that shows up when a blank tile is places to choose a letter for it\n *\n * @author Dean Attali\n * @version 1 March 2006\n */\n\npublic class LetterSelectFrame extends JFrame implements ActionListener, WindowFocusListener\n{\n\tprivate JComboBox comboBox;\t\t// The combo box that lists all the letter\n\tprivate Location loc;\t\t\t// The location of the letter on the board\n\tprivate Letter blankLetter;\t\t// A reference to the blank letter\n\tprivate GameEngine game;\t\t// The game engine\n\tprivate int selected; \t\t\t// An integer representation of the chosen letter\n\n\t/**\n\t * Sets up the frame and the GUI\n\t */\n\tpublic LetterSelectFrame()\n\t{\n\t\tsuper(\"Scrabble\");\n\t\tsetPreferredSize(new Dimension(180, 150));\n\t\tsetResizable(false);\n\t\tsetLayout(new FlowLayout());\n\t\tsetVisible(false);\n\n\t\tString[] letters = new String[26];\n\t\tfor(int i=0;i<26;i++)\n\t\t{\n\t\t\tletters[i]=String.valueOf((char)(65+i));\n\t\t}\n\t\tcomboBox=new JComboBox(letters);\n\n\t\tJLabel label1 = new JLabel(\"Choose the letter to\");\n\t\tJLabel label2 = new JLabel(\"use for this blank tile\");\n\n\t\tlabel1.setFont(new Font(\"SansSerif\", Font.BOLD, 16));\n\t\tlabel2.setFont(new Font(\"SansSerif\", Font.BOLD, 16));\n\n\t\tJButton chooseButton = new JButton(\"Choose\");\n\t\tchooseButton.setFont(new Font(\"SansSerif\", Font.BOLD, 14));\n\t\tchooseButton.addActionListener(this);\n\n\t\tgetContentPane().add(label1);\n\t\tgetContentPane().add(label2);\n\t\tgetContentPane().add(comboBox);\n\t\tgetContentPane().add(chooseButton);\n\n\t\taddWindowFocusListener(this);\n\t\tpack();\n\t}\n\n\t/**\n\t * When a blank letter is played, this method is called to wait for a letter selection\n\t * @param loc\t\t\tThe location of the letter on the board\n\t * @param blankLetter\tThe letter\n\t * @param g\t\t\t\tThe game engine\n\t */\n\tpublic void getLetter(Location loc, Letter blankLetter, GameEngine g)\n\t{\n\t\tsetVisible(true);\n\t\ttoFront();\n\t\tthis.loc=loc;\n\t\tthis.blankLetter = blankLetter;\n\t\tgame = g;\n\t\tcomboBox.setSelectedIndex(0);\n\t\tDimension dim = Toolkit.getDefaultToolkit().getScreenSize();\n\t\tsetLocation((dim.width-getSize().width)/2,(dim.height-getSize().height)/2);\n\t}\n\t\n\t// When the Choose button is pressed, inform the game engine what letter is selected\n\tpublic void actionPerformed(ActionEvent e)\n\t{\n\t\tselected = comboBox.getSelectedIndex();\n\t\tgame.blankLetterSelected(selected, loc, blankLetter);\n\t\tsetVisible(false);\n\t}\n\n\t// If the frame loses focus, close it\n\tpublic void windowLostFocus(WindowEvent e)\n\t{\n\t\tgame.blankLetterSelected(-1, loc, blankLetter);\n\t\tsetVisible(false);\n\t}\n\n\tpublic void windowGainedFocus(WindowEvent e) {}\n}","binary":"false","copies":"1","sample_repo_name":"daattali/daattali.github.io","sample_ref":"refs/heads/master","sample_path":"files/java/Scrabble/LetterSelectFrame.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3dde683f660486a593fefa6b178df2b25a08c120","size":"29920","content":"package org.openbaton.sdk.api.util;\n\n\nimport com.google.gson.*;\nimport com.mashape.unirest.http.JsonNode;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.config.RequestConfig;\nimport org.apache.http.client.entity.UrlEncodedFormEntity;\nimport org.apache.http.client.methods.*;\nimport org.apache.http.config.Registry;\nimport org.apache.http.config.RegistryBuilder;\nimport org.apache.http.conn.socket.ConnectionSocketFactory;\nimport org.apache.http.conn.ssl.NoopHostnameVerifier;\nimport org.apache.http.conn.ssl.SSLConnectionSocketFactory;\nimport org.apache.http.conn.ssl.TrustSelfSignedStrategy;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\nimport org.apache.http.message.BasicHeader;\nimport org.apache.http.message.BasicNameValuePair;\nimport org.apache.http.ssl.SSLContexts;\nimport org.apache.http.util.EntityUtils;\nimport org.openbaton.catalogue.nfvo.VNFPackage;\nimport org.openbaton.sdk.api.exception.SDKException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.lang.reflect.Array;\nimport java.net.HttpURLConnection;\nimport java.nio.charset.StandardCharsets;\nimport java.security.KeyManagementException;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n\n/**\n * OpenBaton api request request abstraction for all requester. Shares common data and methods.\n */\npublic abstract class RestRequest {\n    private Logger log = LoggerFactory.getLogger(this.getClass());\n    protected final String baseUrl;\n\n//\tprotected final String url;\n\n    protected Gson mapper;\n    private String username;\n    private String password;\n    private String projectId;\n    private boolean sslEnabled;\n    private String authStr = \"openbatonOSClient\" + \":\" + \"secret\";\n    private String encoding = Base64.encodeBase64String(authStr.getBytes());\n    private final String provider;\n    private String token = null;\n    private String bearerToken = null;\n\n    private CloseableHttpClient httpClient;\n    private RequestConfig config = RequestConfig.custom()\n            .setConnectionRequestTimeout(10000).setConnectTimeout(10000).build();\n\n    /**\n     * Create a request with a given url path\n     */\n    public RestRequest(String username, String password, String projectId, boolean sslEnabled, final String nfvoIp, String nfvoPort, String path, String version) {\n        if (sslEnabled) {\n            this.baseUrl = \"https://\" + nfvoIp + \":\" + nfvoPort + \"/api/v\" + version + path;\n            this.provider = \"https://\" + nfvoIp + \":\" + nfvoPort + \"/oauth/token\";\n        } else {\n            this.baseUrl = \"http://\" + nfvoIp + \":\" + nfvoPort + \"/api/v\" + version + path;\n            this.provider = \"http://\" + nfvoIp + \":\" + nfvoPort + \"/oauth/token\";\n        }\n        this.username = username;\n        this.password = password;\n        this.projectId = projectId;\n\n        GsonBuilder builder = new GsonBuilder();\n        /*builder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {\n            public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {\n                return new Date(json.getAsJsonPrimitive().getAsLong());\n            }\n        });*/\n        this.mapper = builder.setPrettyPrinting().create();\n\n        if (sslEnabled)\n            this.httpClient = getHttpClientForSsl();\n        else\n            this.httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config)\n                    .setConnectionManager(new PoolingHttpClientConnectionManager()).build();\n\n    }\n\n    /**\n     * Does the POST Request\n     *\n     * @param id\n     * @return String\n     * @throws SDKException\n     */\n    public String requestPost(final String id) throws SDKException {\n        CloseableHttpResponse response = null;\n        HttpPost httpPost = null;\n        try {\n            log.debug(\"baseUrl: \" + baseUrl);\n            log.debug(\"id: \" + baseUrl + \"/\" + id);\n\n            try {\n                checkToken();\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n                throw new SDKException(\"Could not get token\", e);\n            }\n\n            // call the api here\n            log.debug(\"Executing post on: \" + this.baseUrl + \"/\" + id);\n            httpPost = new HttpPost(this.baseUrl + \"/\" + id);\n            httpPost.setHeader(new BasicHeader(\"accept\", \"application/json\"));\n            httpPost.setHeader(new BasicHeader(\"Content-Type\", \"application/json\"));\n            httpPost.setHeader(new BasicHeader(\"project-id\", projectId));\n            if (token != null)\n                httpPost.setHeader(new BasicHeader(\"authorization\", bearerToken.replaceAll(\"\\\"\", \"\")));\n\n            response = httpClient.execute(httpPost);\n\n            // check response status\n            checkStatus(response, HttpURLConnection.HTTP_CREATED);\n            // return the response of the request\n            String result = \"\";\n            if (response.getEntity() != null)\n                result = EntityUtils.toString(response.getEntity());\n            response.close();\n            log.trace(\"received: \" + result);\n\n            httpPost.releaseConnection();\n            return result;\n        } catch (IOException e) {\n            // catch request exceptions here\n            log.error(e.getMessage(), e);\n            if (httpPost != null)\n                httpPost.releaseConnection();\n            throw new SDKException(\"Could not http-post or open the object properly\", e);\n        } catch (SDKException e) {\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                token = null;\n                if (httpPost != null)\n                    httpPost.releaseConnection();\n                return requestPost(id);\n            } else {\n                if (httpPost != null)\n                    httpPost.releaseConnection();\n                throw new SDKException(\"Status is \" + response.getStatusLine().getStatusCode());\n            }\n        }\n    }\n\n    /**\n     * Executes a http post with to a given url, while serializing the object content as json\n     * and returning the response\n     *\n     * @param object the object content to be serialized as json\n     * @return a string containing the response content\n     */\n    public Serializable requestPost(final Serializable object) throws SDKException {\n        return requestPost(\"\", object);\n    }\n\n\n    public Serializable requestPost(final String id, final Serializable object) throws SDKException {\n        CloseableHttpResponse response = null;\n        HttpPost httpPost = null;\n        try {\n            log.trace(\"Object is: \" + object);\n            String fileJSONNode = mapper.toJson(object);\n            log.trace(\"sending: \" + fileJSONNode.toString());\n            log.debug(\"baseUrl: \" + baseUrl);\n            log.debug(\"id: \" + baseUrl + \"/\" + id);\n\n            try {\n                checkToken();\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n                throw new SDKException(\"Could not get token\", e);\n            }\n\n            // call the api here\n            log.debug(\"Executing post on: \" + this.baseUrl + \"/\" + id);\n            httpPost = new HttpPost(this.baseUrl + \"/\" + id);\n            httpPost.setHeader(new BasicHeader(\"accept\", \"application/json\"));\n            httpPost.setHeader(new BasicHeader(\"Content-Type\", \"application/json\"));\n            httpPost.setHeader(new BasicHeader(\"project-id\", projectId));\n            if (token != null)\n                httpPost.setHeader(new BasicHeader(\"authorization\", bearerToken.replaceAll(\"\\\"\", \"\")));\n            httpPost.setEntity(new StringEntity(fileJSONNode));\n\n            response = httpClient.execute(httpPost);\n\n            // check response status\n            checkStatus(response, HttpURLConnection.HTTP_CREATED);\n            // return the response of the request\n            String result = \"\";\n            if (response.getEntity() != null)\n                result = EntityUtils.toString(response.getEntity());\n\n            if (response.getStatusLine().getStatusCode() != HttpURLConnection.HTTP_NO_CONTENT) {\n                JsonParser jsonParser = new JsonParser();\n                JsonElement jsonElement = jsonParser.parse(result);\n                result = mapper.toJson(jsonElement);\n                log.trace(\"received: \" + result);\n\n                log.trace(\"Casting it into: \" + object.getClass());\n                return mapper.fromJson(result, object.getClass());\n            }\n            response.close();\n            httpPost.releaseConnection();\n            return null;\n        } catch (IOException e) {\n            // catch request exceptions here\n            log.error(e.getMessage(), e);\n            if (httpPost != null)\n                httpPost.releaseConnection();\n            throw new SDKException(\"Could not http-post or open the object properly\", e);\n        } catch (SDKException e) {\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                token = null;\n                if (httpPost != null)\n                    httpPost.releaseConnection();\n                return requestPost(id);\n            } else {\n                if (httpPost != null)\n                    httpPost.releaseConnection();\n                throw new SDKException(\"Status is \" + response.getStatusLine().getStatusCode());\n            }\n        }\n    }\n\n    /**\n     * Used to upload tar files to the NFVO for creating VNFPackages.\n     *\n     * @param f the tar file containing the VNFPackage\n     * @return the created VNFPackage object\n     * @throws SDKException\n     */\n    public VNFPackage requestPostPackage(final File f) throws SDKException {\n        CloseableHttpResponse response = null;\n        HttpPost httpPost = null;\n\n        try {\n            try {\n                checkToken();\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n                throw new SDKException(\"Could not get token\", e);\n            }\n            log.debug(\"Executing post on \" + baseUrl);\n            httpPost = new HttpPost(this.baseUrl);\n            httpPost.setHeader(new BasicHeader(\"accept\", \"multipart/form-data\"));\n            httpPost.setHeader(new BasicHeader(\"project-id\", projectId));\n            if (token != null)\n                httpPost.setHeader(new BasicHeader(\"authorization\", bearerToken.replaceAll(\"\\\"\", \"\")));\n\n            MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create();\n            multipartEntityBuilder.addBinaryBody(\"file\", f);\n            httpPost.setEntity(multipartEntityBuilder.build());\n\n\n            response = httpClient.execute(httpPost);\n        } catch (ClientProtocolException e) {\n            httpPost.releaseConnection();\n            throw new SDKException(\"Could not create VNFPackage from file \" + f.getName(), e);\n        } catch (IOException e) {\n            httpPost.releaseConnection();\n            throw new SDKException(\"Could not create VNFPackage from file \" + f.getName(), e);\n        }\n\n        // check response status\n        checkStatus(response, HttpURLConnection.HTTP_OK);\n        // return the response of the request\n        String result = \"\";\n        if (response.getEntity() != null)\n            try {\n                result = EntityUtils.toString(response.getEntity());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n        if (response.getStatusLine().getStatusCode() != HttpURLConnection.HTTP_NO_CONTENT) {\n            JsonParser jsonParser = new JsonParser();\n            JsonElement jsonElement = jsonParser.parse(result);\n            result = mapper.toJson(jsonElement);\n            log.debug(\"Uploaded the VNFPackage\");\n            log.trace(\"received: \" + result);\n\n            log.trace(\"Casting it into: \" + VNFPackage.class);\n            httpPost.releaseConnection();\n            return mapper.fromJson(result, VNFPackage.class);\n        }\n        httpPost.releaseConnection();\n        return null;\n    }\n\n    private void checkToken() throws IOException, SDKException {\n        if (!(this.username == null || this.password == null))\n            if (token == null && (!this.username.equals(\"\") || !this.password.equals(\"\"))) {\n                getAccessToken();\n            }\n    }\n\n    private JsonNode getJsonNode(Serializable object) throws IOException {\n        return new JsonNode(mapper.toJson(object));\n    }\n\n    /**\n     * Executes a http delete with to a given id\n     *\n     * @param id the id path used for the api request\n     */\n    public void requestDelete(final String id) throws SDKException {\n        CloseableHttpResponse response = null;\n        HttpDelete httpDelete = null;\n        try {\n            log.debug(\"baseUrl: \" + baseUrl);\n            log.debug(\"id: \" + baseUrl + \"/\" + id);\n\n            try {\n                checkToken();\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n                throw new SDKException(\"Could not get token\", e);\n            }\n\n            // call the api here\n            log.info(\"Executing delete on: \" + this.baseUrl + \"/\" + id);\n            httpDelete = new HttpDelete(this.baseUrl + \"/\" + id);\n            httpDelete.setHeader(new BasicHeader(\"project-id\", projectId));\n            if (token != null)\n                httpDelete.setHeader(new BasicHeader(\"authorization\", bearerToken.replaceAll(\"\\\"\", \"\")));\n\n            response = httpClient.execute(httpDelete);\n\n            // check response status\n            checkStatus(response, HttpURLConnection.HTTP_NO_CONTENT);\n            httpDelete.releaseConnection();\n            // return the response of the request\n\n        } catch (IOException e) {\n            // catch request exceptions here\n            log.error(e.getMessage(), e);\n            if (httpDelete != null)\n                httpDelete.releaseConnection();\n            throw new SDKException(\"Could not http-delete\", e);\n        } catch (SDKException e) {\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                token = null;\n                if (httpDelete != null)\n                    httpDelete.releaseConnection();\n                requestDelete(id);\n                return;\n            }\n            if (httpDelete != null)\n                httpDelete.releaseConnection();\n            throw new SDKException(\"Could not http-delete or the api response was wrong\", e);\n        }\n    }\n\n\n    /**\n     * Executes a http get with to a given id\n     *\n     * @param id the id path used for the api request\n     * @return a string containing he response content\n     */\n    public Object requestGet(final String id, Class type) throws SDKException {\n        String url = this.baseUrl;\n        if (id != null) {\n            url += \"/\" + id;\n            return requestGetWithStatus(url, null, type);\n        } else return requestGetAll(url, type, null);\n    }\n\n    protected Object requestGetAll(String url, Class type) throws SDKException {\n        url = this.baseUrl + \"/\" + url;\n        return requestGetAll(url, type, null);\n    }\n\n    private Object requestGetAll(String url, Class type, final Integer httpStatus) throws SDKException {\n        CloseableHttpResponse response = null;\n        HttpGet httpGet = null;\n        try {\n            try {\n                checkToken();\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n                throw new SDKException(\"Could not get token\", e);\n            }\n\n            // call the api here\n            log.debug(\"Executing get on: \" + url);\n            httpGet = new HttpGet(url);\n            httpGet.setHeader(new BasicHeader(\"project-id\", projectId));\n            if (token != null)\n                httpGet.setHeader(new BasicHeader(\"authorization\", bearerToken.replaceAll(\"\\\"\", \"\")));\n\n            response = httpClient.execute(httpGet);\n\n            // check response status\n            if (httpStatus != null) {\n                checkStatus(response, httpStatus);\n            } else {\n                checkStatus(response, HttpURLConnection.HTTP_OK);\n            }\n            // return the response of the request\n            String result = \"\";\n            if (response.getEntity() != null)\n                result = EntityUtils.toString(response.getEntity());\n            response.close();\n            httpGet.releaseConnection();\n            log.trace(\"result is: \" + result);\n\n            Class<?> aClass = Array.newInstance(type, 3).getClass();\n            log.trace(\"class is: \" + aClass);\n            Object[] o = (Object[]) mapper.fromJson(result, aClass);\n            log.trace(\"deserialized is: \" + o);\n\n            return o;\n        } catch (IOException e) {\n            // catch request exceptions here\n            log.error(e.getMessage(), e);\n            if (httpGet != null)\n                httpGet.releaseConnection();\n            throw new SDKException(\"Could not http-get\", e);\n        } catch (SDKException e) {\n            if (response != null) {\n                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                    token = null;\n                    if (httpGet != null)\n                        httpGet.releaseConnection();\n                    return requestGetAll(url, type, httpStatus);\n                } else {\n                    log.error(e.getMessage(), e);\n                    if (httpGet != null)\n                        httpGet.releaseConnection();\n                    throw new SDKException(\"Could not authorize\", e);\n                }\n            } else {\n                log.error(e.getMessage(), e);\n                if (httpGet != null)\n                    httpGet.releaseConnection();\n                throw e;\n            }\n        }\n    }\n\n\n    /**\n     * Executes a http get with to a given id, and possible executed an http (accept) status check of the response if an httpStatus is delivered.\n     * If httpStatus is null, no check will be executed.\n     *\n     * @param url        the id path used for the api request\n     * @param httpStatus the http status to be checked.\n     * @param type\n     * @return a string containing the response content\n     */\n    private Object requestGetWithStatus(final String url, final Integer httpStatus, Class type) throws SDKException {\n        CloseableHttpResponse response = null;\n        HttpGet httpGet = null;\n        try {\n            try {\n                checkToken();\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n                throw new SDKException(\"Could not get token\", e);\n            }\n\n            // call the api here\n            log.debug(\"Executing get on: \" + url);\n            httpGet = new HttpGet(url);\n            httpGet.setHeader(new BasicHeader(\"project-id\", projectId));\n            if (token != null)\n                httpGet.setHeader(new BasicHeader(\"authorization\", bearerToken.replaceAll(\"\\\"\", \"\")));\n\n            response = httpClient.execute(httpGet);\n\n            // check response status\n            if (httpStatus != null) {\n                checkStatus(response, httpStatus);\n            } else {\n                checkStatus(response, HttpURLConnection.HTTP_OK);\n            }\n            // return the response of the request\n            String result = \"\";\n            if (response.getEntity() != null)\n                result = EntityUtils.toString(response.getEntity());\n            response.close();\n            httpGet.releaseConnection();\n            log.trace(\"result is: \" + result);\n\n            JsonParser jsonParser = new JsonParser();\n            JsonElement jsonElement = jsonParser.parse(result);\n            result = mapper.toJson(jsonElement);\n            log.trace(\"result is: \" + result);\n            Class<?> aClass = Array.newInstance(type, 1).getClass();\n            log.trace(\"class is: \" + aClass);\n\n            return mapper.fromJson(result, type);\n        } catch (IOException e) {\n            // catch request exceptions here\n            log.error(e.getMessage(), e);\n            if (httpGet != null)\n                httpGet.releaseConnection();\n            throw new SDKException(\"Could not http-get\", e);\n        } catch (SDKException e) {\n            if (response != null) {\n                if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                    token = null;\n                    if (httpGet != null)\n                        httpGet.releaseConnection();\n                    return requestGetWithStatus(url, httpStatus, type);\n                } else {\n                    log.error(e.getMessage(), e);\n                    if (httpGet != null)\n                        httpGet.releaseConnection();\n                    throw new SDKException(\"Could not authorize\", e);\n                }\n            } else {\n                log.error(e.getMessage(), e);\n                if (httpGet != null)\n                    httpGet.releaseConnection();\n                throw e;\n            }\n        } finally {\n            if (httpGet != null)\n                httpGet.releaseConnection();\n        }\n    }\n\n    /**\n     * Executes a http get with to a given url, in contrast to the normal get it uses an http (accept) status check of the response\n     *\n     * @param url the url path used for the api request\n     * @return a string containing the response content\n     */\n    public Object requestGetWithStatusAccepted(String url, Class type) throws SDKException {\n        url = this.baseUrl + \"/\" + url;\n        return requestGetWithStatus(url, new Integer(HttpURLConnection.HTTP_ACCEPTED), type);\n    }\n\n    /**\n     * Executes a http put with to a given id, while serializing the object content as json\n     * and returning the response\n     *\n     * @param id     the id path used for the api request\n     * @param object the object content to be serialized as json\n     * @return a string containing the response content\n     */\n    public Serializable requestPut(final String id, final Serializable object) throws SDKException {\n        CloseableHttpResponse response = null;\n        HttpPut httpPut = null;\n        try {\n            log.trace(\"Object is: \" + object);\n            String fileJSONNode = mapper.toJson(object);\n\n            try {\n                checkToken();\n            } catch (IOException e) {\n                log.error(e.getMessage(), e);\n                throw new SDKException(\"Could not get token\", e);\n            }\n\n            // call the api here\n            log.debug(\"Executing put on: \" + this.baseUrl + \"/\" + id);\n            httpPut = new HttpPut(this.baseUrl + \"/\" + id);\n            httpPut.setHeader(new BasicHeader(\"accept\", \"application/json\"));\n            httpPut.setHeader(new BasicHeader(\"Content-Type\", \"application/json\"));\n            httpPut.setHeader(new BasicHeader(\"project-id\", projectId));\n            if (token != null)\n                httpPut.setHeader(new BasicHeader(\"authorization\", bearerToken.replaceAll(\"\\\"\", \"\")));\n            httpPut.setEntity(new StringEntity(fileJSONNode));\n\n            response = httpClient.execute(httpPut);\n\n            // check response status\n            checkStatus(response, HttpURLConnection.HTTP_ACCEPTED);\n            // return the response of the request\n            String result = \"\";\n            if (response.getEntity() != null)\n                result = EntityUtils.toString(response.getEntity());\n\n            if (response.getStatusLine().getStatusCode() != HttpURLConnection.HTTP_NO_CONTENT) {\n                response.close();\n                httpPut.releaseConnection();\n                JsonParser jsonParser = new JsonParser();\n                JsonElement jsonElement = jsonParser.parse(result);\n                result = mapper.toJson(jsonElement);\n                log.trace(\"received: \" + result);\n\n                log.trace(\"Casting it into: \" + object.getClass());\n                return mapper.fromJson(result, object.getClass());\n            }\n            response.close();\n            httpPut.releaseConnection();\n            return null;\n        } catch (IOException e) {\n            // catch request exceptions here\n            log.error(e.getMessage(), e);\n            if (httpPut != null)\n                httpPut.releaseConnection();\n            throw new SDKException(\"Could not http-put or the api response was wrong or open the object properly\", e);\n        } catch (SDKException e) {\n            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) {\n                token = null;\n                if (httpPut != null)\n                    httpPut.releaseConnection();\n                return requestPut(id, object);\n            } else {\n                if (httpPut != null)\n                    httpPut.releaseConnection();\n                throw new SDKException(\"Could not http-put or the api response was wrong or open the object properly\", e);\n            }\n        } finally {\n            if (httpPut != null)\n                httpPut.releaseConnection();\n        }\n    }\n\n    /**\n     * Check wether a json repsonse has the right http status. If not, an SDKException is thrown.\n     *\n     * @param httpResponse the http response\n     * @param httpStatus   the (desired) http status of the repsonse\n     */\n    private void checkStatus(CloseableHttpResponse httpResponse, final int httpStatus) throws SDKException {\n        if (httpResponse.getStatusLine().getStatusCode() != httpStatus) {\n            System.out.println(\"Status expected: \" + httpStatus + \" obtained: \" + httpResponse.getStatusLine().getStatusCode());\n            throw new SDKException(\"Received wrong API HTTPStatus\");\n        }\n    }\n\n    private void getAccessToken() throws IOException, SDKException {\n\n        HttpPost httpPost = new HttpPost(provider);\n\n        httpPost.setHeader(\"Authorization\", \"Basic \" + encoding);\n        List<BasicNameValuePair> parametersBody = new ArrayList<>();\n        parametersBody.add(new BasicNameValuePair(\"grant_type\", \"password\"));\n        parametersBody.add(new BasicNameValuePair(\"username\", this.username));\n        parametersBody.add(new BasicNameValuePair(\"password\", this.password));\n\n        log.debug(\"Username is: \" + username);\n        log.debug(\"Password is: \" + password);\n\n        httpPost.setEntity(new UrlEncodedFormEntity(parametersBody, StandardCharsets.UTF_8));\n\n        CloseableHttpResponse response = null;\n        log.debug(\"httpPost is: \" + httpPost.toString());\n        response = httpClient.execute(httpPost);\n        String responseString = null;\n        responseString = EntityUtils.toString(response.getEntity());\n        int statusCode = response.getStatusLine().getStatusCode();\n        response.close();\n        httpPost.releaseConnection();\n        log.trace(statusCode + \": \" + responseString);\n\n        if (statusCode != 200) {\n            ParseComError error = new Gson().fromJson(responseString, ParseComError.class);\n            log.error(\"Status Code [\" + statusCode + \"]: Error signing-in [\" + error.error + \"] - \" + error.error_description);\n            throw new SDKException(\"Status Code [\" + statusCode + \"]: Error signing-in [\" + error.error + \"] - \" + error.error_description);\n        }\n        JsonObject jobj = new Gson().fromJson(responseString, JsonObject.class);\n        log.trace(\"JsonTokeAccess is: \" + jobj.toString());\n        try {\n            String token = jobj.get(\"value\").getAsString();\n            log.trace(token);\n            bearerToken = \"Bearer \" + token;\n            this.token = token;\n        } catch (NullPointerException e) {\n            String error = jobj.get(\"error\").getAsString();\n            if (error.equals(\"invalid_grant\")) {\n                throw new SDKException(\"Error during authentication: \" + jobj.get(\"error_description\").getAsString(), e);\n            }\n        }\n\n    }\n\n    private CloseableHttpClient getHttpClientForSsl() {\n        SSLContext sslContext = null;\n        try {\n            sslContext = SSLContexts.custom().loadTrustMaterial(null,\n                    new TrustSelfSignedStrategy()).build();\n        } catch (NoSuchAlgorithmException e) {\n            log.error(\"Could not initialize the HttpClient for SSL connections\");\n            log.error(e.getMessage(), e);\n        } catch (KeyManagementException e) {\n            log.error(\"Could not initialize the HttpClient for SSL connections\");\n            log.error(e.getMessage(), e);\n        } catch (KeyStoreException e) {\n            log.error(\"Could not initialize the HttpClient for SSL connections\");\n            log.error(e.getMessage(), e);\n        }\n\n        // necessary to trust self signed certificates\n        SSLConnectionSocketFactory sslConnectionSocketFactory = new SSLConnectionSocketFactory(sslContext,\n                new String[]{\"TLSv1\"}, null, new NoopHostnameVerifier());\n\n        Registry<ConnectionSocketFactory> socketFactoryRegistry = RegistryBuilder\n                .<ConnectionSocketFactory>create().register(\"https\", sslConnectionSocketFactory)\n                .build();\n\n        return HttpClientBuilder.create().setDefaultRequestConfig(config)\n                .setConnectionManager(new PoolingHttpClientConnectionManager(socketFactoryRegistry))\n                .setSSLSocketFactory(sslConnectionSocketFactory).build();\n    }\n\n\n    private class ParseComError implements Serializable {\n        String error_description;\n        String error;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"openbaton/openbaton-client","sample_ref":"refs/heads/master","sample_path":"sdk/src/main/java/org/openbaton/sdk/api/util/RestRequest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"cfc4fc3645e39220c4dc25f373ba1bae17bafb32","size":"635","content":"package machine_specific_tests.approvaltests.tests;\n\nimport javax.swing.JButton;\n\nimport org.approvaltests.Approvals;\nimport org.approvaltests.reporters.ClipboardReporter;\nimport org.approvaltests.reporters.DiffReporter;\nimport org.approvaltests.reporters.UseReporter;\nimport org.junit.Test;\n\nimport machine_specific_tests.MachineSpecificTest;\n\n@UseReporter({DiffReporter.class, ClipboardReporter.class})\npublic class ApprovalsTest extends MachineSpecificTest\n{\n  @Test\n  public void testApproveComponent() throws Exception\n  {\n    JButton b = new JButton(\"Approval Tests Rule\");\n    b.setSize(150, 20);\n    Approvals.verify(b);\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"approvals/ApprovalTests.Java","sample_ref":"refs/heads/master","sample_path":"java/machine_specific_tests/approvaltests/tests/ApprovalsTest.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"14b4a33eac5ab266cf0025b1fad44093634f31af","size":"828","content":"package me.tatarka.bindingcollectionadapter.sample;\n\nimport android.databinding.BaseObservable;\nimport android.databinding.Bindable;\nimport android.view.View;\n\n/**\n * Created by evan on 6/14/15.\n */\npublic class ItemViewModel extends BaseObservable {\n    public final boolean checkable;\n    @Bindable\n    private int index;\n    @Bindable\n    private boolean checked;\n\n    public ItemViewModel(int index, boolean checkable) {\n        this.index = index;\n        this.checkable = checkable;\n    }\n\n    public int getIndex() {\n        return index;\n    }\n\n    public boolean isChecked() {\n        return checked;\n    }\n    \n    public boolean onToggleChecked(View v) {\n        if (!checkable) {\n            return false;\n        }\n        checked = !checked;\n        notifyPropertyChanged(BR.checked);\n        return true;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"evant/binding-collection-adapter","sample_ref":"refs/heads/master","sample_path":"app/src/main/java/me/tatarka/bindingcollectionadapter/sample/ItemViewModel.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"3a70c53aac02b93f6510bf2b351851ece086690c","size":"5930","content":"/*   1:    */ package com.gmail.tirexgta.ttoolsex.listeners;\r\n/*   2:    */ \r\n/*   3:    */ import com.gmail.tirexgta.ttoolsex.DispensersManager;\r\n/*   4:    */ import com.gmail.tirexgta.ttoolsex.Main;\r\n/*   5:    */ import java.util.HashMap;\r\n/*   6:    */ import org.bukkit.ChatColor;\r\n/*   7:    */ import org.bukkit.Location;\r\n/*   8:    */ import org.bukkit.Material;\r\n/*   9:    */ import org.bukkit.Server;\r\n/*  10:    */ import org.bukkit.block.Block;\r\n/*  11:    */ import org.bukkit.block.Dispenser;\r\n/*  12:    */ import org.bukkit.entity.Player;\r\n/*  13:    */ import org.bukkit.event.EventHandler;\r\n/*  14:    */ import org.bukkit.event.EventPriority;\r\n/*  15:    */ import org.bukkit.event.Listener;\r\n/*  16:    */ import org.bukkit.event.block.Action;\r\n/*  17:    */ import org.bukkit.event.block.BlockBreakEvent;\r\n/*  18:    */ import org.bukkit.event.block.BlockDispenseEvent;\r\n/*  19:    */ import org.bukkit.event.player.PlayerInteractEvent;\r\n/*  20:    */ import org.bukkit.inventory.Inventory;\r\n/*  21:    */ import org.bukkit.inventory.ItemStack;\r\n/*  22:    */ import org.bukkit.plugin.PluginManager;\r\n/*  23:    */ \r\n/*  24:    */ public class DispensersListener\r\n/*  25:    */   implements Listener\r\n/*  26:    */ {\r\n/*  27:    */   Main plugin;\r\n/*  28: 25 */   public HashMap<Player, String> hasTypedCommand = new HashMap();\r\n/*  29:    */   \r\n/*  30:    */   public DispensersListener(Main plugin)\r\n/*  31:    */   {\r\n/*  32: 30 */     this.plugin = plugin;\r\n/*  33: 31 */     this.plugin.getServer().getPluginManager().registerEvents(this, this.plugin);\r\n/*  34:    */   }\r\n/*  35:    */   \r\n/*  36:    */   @EventHandler(ignoreCancelled=true)\r\n/*  37:    */   public void onPlayerInteract(PlayerInteractEvent event)\r\n/*  38:    */   {\r\n/*  39: 37 */     Block block = event.getClickedBlock();\r\n/*  40: 38 */     if ((event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) && (block.getType().equals(Material.DISPENSER)))\r\n/*  41:    */     {\r\n/*  42: 40 */       Player player = event.getPlayer();\r\n/*  43: 41 */       if (this.hasTypedCommand.get(player) != null) {\r\n/*  44: 42 */         if (((String)this.hasTypedCommand.get(player)).equalsIgnoreCase(\"add\"))\r\n/*  45:    */         {\r\n/*  46: 44 */           event.setCancelled(true);\r\n/*  47: 45 */           Location location = block.getLocation();\r\n/*  48: 46 */           if (!this.plugin.dispensersManager.isUnlimitedDispenser(location))\r\n/*  49:    */           {\r\n/*  50: 48 */             this.plugin.dispensersManager.addDispenser(location);\r\n/*  51: 49 */             player.sendMessage(ChatColor.BLUE + \"Dodano nieskonczony dispenser!\");\r\n/*  52: 50 */             this.hasTypedCommand.remove(player);\r\n/*  53:    */           }\r\n/*  54:    */           else\r\n/*  55:    */           {\r\n/*  56: 54 */             player.sendMessage(ChatColor.RED + \"Ten dispenser jest juz nieskonczony!\");\r\n/*  57: 55 */             this.hasTypedCommand.remove(player);\r\n/*  58:    */           }\r\n/*  59:    */         }\r\n/*  60: 58 */         else if (((String)this.hasTypedCommand.get(player)).equalsIgnoreCase(\"delete\"))\r\n/*  61:    */         {\r\n/*  62: 60 */           event.setCancelled(true);\r\n/*  63: 61 */           Location location = block.getLocation();\r\n/*  64: 62 */           if (this.plugin.dispensersManager.isUnlimitedDispenser(location))\r\n/*  65:    */           {\r\n/*  66: 64 */             this.plugin.dispensersManager.delDispenser(location);\r\n/*  67: 65 */             player.sendMessage(ChatColor.BLUE + \"Usunieto nieskonczony dispenser!\");\r\n/*  68: 66 */             this.hasTypedCommand.remove(player);\r\n/*  69: 67 */             Dispenser dispenser = (Dispenser)event.getClickedBlock().getState();\r\n/*  70: 68 */             dispenser.getInventory().clear();\r\n/*  71:    */           }\r\n/*  72:    */           else\r\n/*  73:    */           {\r\n/*  74: 72 */             player.sendMessage(ChatColor.RED + \"Ten dispenser nie jest nieskonczony!\");\r\n/*  75: 73 */             this.hasTypedCommand.remove(player);\r\n/*  76:    */           }\r\n/*  77:    */         }\r\n/*  78: 77 */         else if (!player.hasPermission(\"tools.dispensers.open\"))\r\n/*  79:    */         {\r\n/*  80: 79 */           event.setCancelled(true);\r\n/*  81:    */         }\r\n/*  82:    */       }\r\n/*  83:    */     }\r\n/*  84:    */   }\r\n/*  85:    */   \r\n/*  86:    */   @EventHandler(priority=EventPriority.HIGHEST, ignoreCancelled=true)\r\n/*  87:    */   public void onBlockDispense(BlockDispenseEvent event)\r\n/*  88:    */   {\r\n/*  89: 87 */     Location location = event.getBlock().getLocation();\r\n/*  90: 88 */     if (this.plugin.dispensersManager.isUnlimitedDispenser(location))\r\n/*  91:    */     {\r\n/*  92: 90 */       Dispenser dispenser = (Dispenser)event.getBlock().getState();\r\n/*  93: 91 */       ItemStack item = event.getItem();\r\n/*  94: 92 */       dispenser.getInventory().addItem(new ItemStack[] { item.clone() });\r\n/*  95:    */     }\r\n/*  96:    */   }\r\n/*  97:    */   \r\n/*  98:    */   @EventHandler(priority=EventPriority.HIGH, ignoreCancelled=true)\r\n/*  99:    */   public void onBlockBreak(BlockBreakEvent event)\r\n/* 100:    */   {\r\n/* 101: 99 */     Location location = event.getBlock().getLocation();\r\n/* 102:100 */     if (event.getBlock().getType().equals(Material.DISPENSER))\r\n/* 103:    */     {\r\n/* 104:102 */       Player player = event.getPlayer();\r\n/* 105:103 */       if (this.plugin.dispensersManager.isUnlimitedDispenser(location))\r\n/* 106:    */       {\r\n/* 107:105 */         event.setCancelled(true);\r\n/* 108:106 */         player.sendMessage(ChatColor.RED + \"Nie mozesz znisczyc nieskonczonego dispenser'a!\");\r\n/* 109:    */       }\r\n/* 110:    */     }\r\n/* 111:    */   }\r\n/* 112:    */ }\r\n\r\n\r\r\n/* Location:           C:\\Users\\Nala_Alan\\Desktop\\Inne\\Pluginy\\---- 3GILDIE ----\\Tirex\\TToolsEX.jar\r\r\n * Qualified Name:     com.gmail.tirexgta.ttoolsex.listeners.DispensersListener\r\r\n * JD-Core Version:    0.7.0.1\r\r\n */","binary":"false","copies":"1","sample_repo_name":"Kondi60PL/Pluginy-Minecraft-Bukkit","sample_ref":"refs/heads/master","sample_path":"Wszystkie pluginy [1]/Tirex/TToolsEX.src/com/gmail/tirexgta/ttoolsex/listeners/DispensersListener.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"736b5d3e9880574e281199387334e5b82a411460","size":"3640","content":"package org.opensky.libadsb.msgs;\n\nimport java.io.Serializable;\n\nimport org.opensky.libadsb.tools;\nimport org.opensky.libadsb.exceptions.BadFormatException;\n\n/**\n *  This file is part of org.opensky.libadsb.\n *\n *  org.opensky.libadsb is free software: you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation, either version 3 of the License, or\n *  (at your option) any later version.\n *\n *  org.opensky.libadsb is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with org.opensky.libadsb.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Decoder for Mode S all-call replies\n * @author Matthias Sch\u00e4fer (schaefer@opensky-network.org)\n */\npublic class AllCallReply extends ModeSReply implements Serializable {\n\n\tprivate static final long serialVersionUID = -1156158096293306435L;\n\t\n\tprivate byte capabilities;\n\tprivate byte[] interrogator; // 3 bytes\n\t\n\t/**\n\t * @param raw_message raw all-call reply as hex string\n\t * @throws BadFormatException if message is not all-call reply or \n\t * contains wrong values.\n\t */\n\tpublic AllCallReply(String raw_message) throws BadFormatException {\n\t\tthis(new ModeSReply(raw_message));\n\t}\n\t\n\t/**\n\t * @param reply Mode S reply containing this all-call reply\n\t * @throws BadFormatException if message is not all-call reply or \n\t * contains wrong values.\n\t */\n\tpublic AllCallReply(ModeSReply reply) throws BadFormatException {\n\t\tsuper(reply);\n\t\tsetType(subtype.ALL_CALL_REPLY);\n\t\t\n\t\tif (getDownlinkFormat() != 11) {\n\t\t\tthrow new BadFormatException(\"Message is not an all-call reply!\");\n\t\t}\n\t\t\n\t\tcapabilities = getFirstField();\n\t\t\n\t\t// extract interrogator ID\n\t\tinterrogator = tools.xor(calcParity(), getParity());\n\t}\n\n\t/**\n\t * @return The emitter's capabilities (see ICAO Annex 10 V4, 3.1.2.5.2.2.1)\n\t */\n\tpublic byte getCapabilities() {\n\t\treturn capabilities;\n\t}\n\n\t/**\n\t * Some receivers already subtract the crc checksum\n\t * from the parity field right after reception.\n\t * In that case, use {@link #getParity()} to get the interrogator ID.<br><br>\n\t * Note: Use {@link #hasValidInterrogatorID()} to check the validity of this field.\n\t * @return the interrogator ID as a 3-byte array\n\t */\n\tpublic byte[] getInterrogatorID() {\n\t\treturn interrogator;\n\t}\n\t\n\t/**\n\t * Note: this can be used as an accurate check whether the all call reply\n\t * has been received correctly without knowing the interrogator in advance.\n\t * @return true if the interrogator ID is conformant with Annex 10 V4\n\t */\n\tpublic boolean hasValidInterrogatorID() {\n\t\tassert(interrogator.length == 3);\n\t\t\n\t\t// 3.1.2.3.3.2\n\t\t// the first 17 bits have to be zero\n\t\tif (interrogator[0] != 0 ||\n\t\t\t\tinterrogator[1] != 0 ||\n\t\t\t\t(interrogator[2]&0x80) != 0)\n\t\t\treturn false;\n\t\t\n\t\tint cl = (interrogator[2]>>4)&0x7;\n\t\t\n\t\t// 3.1.2.5.2.1.3\n\t\t// code label is only defined for 0-4\n\t\tif (cl>4) return false;\n\t\t\n\t\t// Note: seems to be used by ACAS\n//\t\tint ii = interrogator[2]&0xF;\n//\t\t// 3.1.2.5.2.1.2.4\n//\t\t// surveillance identifier of 0 shall never be used\n//\t\tif (cl>0 && ii==0) return false;\n\t\t\n\t\treturn true;\n\t}\n\t\n\tpublic String toString() {\n\t\treturn super.toString()+\"\\n\"+\n\t\t\t\t\"All-call Reply:\\n\"+\n\t\t\t\t\"\\tCapabilities:\\t\\t\"+getCapabilities()+\"\\n\"+\n\t\t\t\t\"\\tValid Interrogator ID:\\t\\t\"+hasValidInterrogatorID()+\"\\n\"+\n\t\t\t\t\"\\tInterrogator:\\t\\t\"+tools.toHexString(getInterrogatorID());\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"openskynetwork/java-adsb","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/opensky/libadsb/msgs/AllCallReply.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"6d3fa11fcf3250fe00496872f4214ed670070cb9","size":"10721","content":"/*\n * Copyright 2014 Martin W. Kirst\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.github.nitram509.jmacaroons;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport static com.github.nitram509.jmacaroons.CaveatPacket.Type;\nimport static com.github.nitram509.jmacaroons.CryptoTools.*;\nimport static com.github.nitram509.jmacaroons.MacaroonsConstants.*;\nimport static com.github.nitram509.jmacaroons.util.ArrayTools.appendToArray;\nimport static com.github.nitram509.jmacaroons.util.ArrayTools.containsElement;\n\npublic class MacaroonsVerifier {\n\n  private String[] predicates = new String[0];\n  private List<Macaroon> boundMacaroons = new ArrayList<>( 3 );\n  private GeneralCaveatVerifier[] generalCaveatVerifiers = new GeneralCaveatVerifier[0];\n  private final Macaroon macaroon;\n\n  public MacaroonsVerifier(Macaroon macaroon) {\n    this.macaroon = macaroon;\n  }\n\n  /**\n   * @param secret secret secret this secret will be enhanced, in case it's shorter than {@link com.github.nitram509.jmacaroons.MacaroonsConstants#MACAROON_SUGGESTED_SECRET_LENGTH}\n   * @throws com.github.nitram509.jmacaroons.MacaroonValidationException     when the macaroon isn't valid\n   * @throws com.github.nitram509.jmacaroons.GeneralSecurityRuntimeException when the runtime doesn't provide sufficient crypto support\n   */\n  public void assertIsValid(String secret) throws MacaroonValidationException, GeneralSecurityRuntimeException {\n    try {\n      assertIsValid(generate_derived_key(secret));\n    } catch (InvalidKeyException | NoSuchAlgorithmException e) {\n      throw new GeneralSecurityRuntimeException(e);\n    }\n  }\n\n  /**\n   * @param secret secret this secret will be used as it is (be sure that has suggested length {@link com.github.nitram509.jmacaroons.MacaroonsConstants#MACAROON_SUGGESTED_SECRET_LENGTH})\n   * @throws com.github.nitram509.jmacaroons.MacaroonValidationException     when the macaroon isn't valid\n   * @throws com.github.nitram509.jmacaroons.GeneralSecurityRuntimeException when the runtime doesn't provide sufficient crypto support\n   */\n  public void assertIsValid(byte[] secret) throws MacaroonValidationException, GeneralSecurityRuntimeException {\n    try {\n      VerificationResult result = isValid_verify_raw(macaroon, secret);\n      if (result.fail) {\n        String msg = result.failMessage != null ? result.failMessage : \"This macaroon isn't valid.\";\n        throw new MacaroonValidationException(msg, macaroon);\n      }\n    } catch (InvalidKeyException | NoSuchAlgorithmException e) {\n      throw new GeneralSecurityRuntimeException(e);\n    }\n  }\n\n  /**\n   * @param secret secret this secret will be enhanced, in case it's shorter than {@link com.github.nitram509.jmacaroons.MacaroonsConstants#MACAROON_SUGGESTED_SECRET_LENGTH}\n   * @return true/false if the macaroon is valid\n   * @throws com.github.nitram509.jmacaroons.GeneralSecurityRuntimeException\n   */\n  public boolean isValid(String secret) throws GeneralSecurityRuntimeException {\n    try {\n      return isValid(generate_derived_key(secret));\n    } catch (InvalidKeyException | NoSuchAlgorithmException e) {\n      throw new GeneralSecurityRuntimeException(e);\n    }\n  }\n\n  /**\n   * @param secret secret this secret will be used as it is (be sure that has suggested length {@link com.github.nitram509.jmacaroons.MacaroonsConstants#MACAROON_SUGGESTED_SECRET_LENGTH})\n   * @return true/false if the macaroon is valid\n   * @throws com.github.nitram509.jmacaroons.GeneralSecurityRuntimeException\n   */\n  public boolean isValid(byte[] secret) throws GeneralSecurityRuntimeException {\n    try {\n      return !isValid_verify_raw(macaroon, secret).fail;\n    } catch (InvalidKeyException | NoSuchAlgorithmException e) {\n      throw new GeneralSecurityRuntimeException(e);\n    }\n  }\n\n  private VerificationResult isValid_verify_raw(Macaroon M, byte[] secret) throws NoSuchAlgorithmException, InvalidKeyException {\n    VerificationResult vresult = macaroon_verify_inner(M, secret);\n    if (!vresult.fail) {\n      vresult.fail = !Arrays.equals(vresult.csig, getMacaroon().signatureBytes);\n      if (vresult.fail) {\n        vresult = new VerificationResult(\"Verification failed. Signature doesn't match. Maybe the key was wrong OR some caveats aren't satisfied.\");\n      }\n    }\n    return vresult;\n  }\n\n  private VerificationResult macaroon_verify_inner(Macaroon M, byte[] key) throws InvalidKeyException, NoSuchAlgorithmException {\n    byte[] csig = macaroon_hmac(key, M.identifier);\n    if (M.caveatPackets != null) {\n      CaveatPacket[] caveatPackets = M.caveatPackets;\n      for (int i = 0; i < caveatPackets.length; i++) {\n        CaveatPacket caveat = caveatPackets[i];\n        if (caveat == null) continue;\n        if (caveat.type == Type.cl) continue;\n        if (!(caveat.type == Type.cid && caveatPackets[Math.min(i + 1, caveatPackets.length - 1)].type == Type.vid)) {\n          if (containsElement(predicates, caveat.getValueAsText()) || verifiesGeneral(caveat.getValueAsText())) {\n            csig = macaroon_hmac(csig, caveat.rawValue);\n          }\n        } else {\n          i++;\n          CaveatPacket caveat_vid = caveatPackets[i];\n          Macaroon boundMacaroon = findBoundMacaroon(caveat.getValueAsText());\n          if (boundMacaroon == null) {\n            String msg = \"Couldn't verify 3rd party macaroon, because no discharged macaroon was provided to the verifier.\";\n            return new VerificationResult(msg);\n          }\n          if (!macaroon_verify_inner_3rd(boundMacaroon, caveat_vid, csig)) {\n            String msg = \"Couldn't verify 3rd party macaroon, identifier= \" + boundMacaroon.identifier;\n            return new VerificationResult(msg);\n          }\n          byte[] data = caveat.rawValue;\n          byte[] vdata = caveat_vid.rawValue;\n          csig = macaroon_hash2(csig, vdata, data);\n        }\n      }\n    }\n    return new VerificationResult(csig);\n  }\n\n  private boolean macaroon_verify_inner_3rd(Macaroon M, CaveatPacket C, byte[] sig) throws InvalidKeyException, NoSuchAlgorithmException {\n    if (M == null) return false;\n    byte[] enc_plaintext = new byte[MACAROON_SECRET_TEXT_ZERO_BYTES + MACAROON_HASH_BYTES];\n    byte[] enc_ciphertext = new byte[MACAROON_SECRET_BOX_ZERO_BYTES + MACAROON_HASH_BYTES + SECRET_BOX_OVERHEAD];\n\n    byte[] vid_data = C.rawValue;\n    assert vid_data.length == VID_NONCE_KEY_SZ;\n    /**\n     * the nonce is in the first MACAROON_SECRET_NONCE_BYTES\n     * of the vid; the ciphertext is in the rest of it.\n     */\n    byte[] enc_nonce = new byte[MACAROON_SECRET_NONCE_BYTES];\n    System.arraycopy(vid_data, 0, enc_nonce, 0, MACAROON_SECRET_NONCE_BYTES);\n\n    /* fill in the ciphertext */\n    System.arraycopy(vid_data, MACAROON_SECRET_NONCE_BYTES, enc_ciphertext, MACAROON_SECRET_BOX_ZERO_BYTES, vid_data.length - MACAROON_SECRET_NONCE_BYTES);\n    boolean valid = 0 == macaroon_secretbox_open(sig, enc_nonce, enc_ciphertext, enc_plaintext);\n\n    byte[] key = new byte[MACAROON_HASH_BYTES];\n    System.arraycopy(enc_plaintext, MACAROON_SECRET_TEXT_ZERO_BYTES, key, 0, MACAROON_HASH_BYTES);\n    VerificationResult vresult = macaroon_verify_inner(M, key);\n\n    byte[] data = getMacaroon().signatureBytes;\n    byte[] csig = macaroon_bind(data, vresult.csig);\n\n    return valid && Arrays.equals(csig, M.signatureBytes);\n  }\n\n  private Macaroon findBoundMacaroon(String identifier) {\n    for (Macaroon boundMacaroon : boundMacaroons) {\n      if (identifier.equals(boundMacaroon.identifier)) {\n        return boundMacaroon;\n      }\n    }\n    return null;\n  }\n\n  private boolean verifiesGeneral(String caveat) {\n    boolean found = false;\n    for (GeneralCaveatVerifier verifier : this.generalCaveatVerifiers) {\n      found |= verifier.verifyCaveat(caveat);\n    }\n    return found;\n  }\n\n  /**\n   * Caveats like these are called \"exact caveats\" because there is exactly one way\n   * to satisfy them.  Either the given caveat matches, or it doesn't.  At\n   * verification time, the verifier will check each caveat in the macaroon against\n   * the list of satisfied caveats provided to satisfyExact(String).\n   * When it finds a match, it knows that the caveat holds and it can move onto the next caveat in\n   * the macaroon.\n   *\n   * @param caveat caveat\n   * @return this {@link com.github.nitram509.jmacaroons.MacaroonsVerifier}\n   */\n  public MacaroonsVerifier satisfyExact(String caveat) {\n    if (caveat != null) {\n      this.predicates = appendToArray(this.predicates, caveat);\n    }\n    return this;\n  }\n\n  /**\n   * Binds a prepared macaroon.\n   *\n   * @param preparedMacaroon preparedMacaroon\n   * @return this {@link com.github.nitram509.jmacaroons.MacaroonsVerifier}\n   */\n  public MacaroonsVerifier satisfy3rdParty(Macaroon preparedMacaroon) {\n    if (preparedMacaroon != null) {\n      this.boundMacaroons.add(preparedMacaroon);\n    }\n    return this;\n  }\n\n  /**\n   * Another technique for informing the verifier that a caveat is satisfied\n   * allows for expressive caveats. Whereas exact caveats are checked\n   * by simple byte-wise equality, general caveats are checked using\n   * an application-provided callback that returns true if and only if the caveat\n   * is true within the context of the request.\n   * There's no limit on the contents of a general caveat,\n   * so long as the callback understands how to determine whether it is satisfied.\n   * This technique is called \"general caveats\".\n   *\n   * @param verifier verifier\n   * @return this {@link com.github.nitram509.jmacaroons.MacaroonsVerifier}\n   */\n  public MacaroonsVerifier satisfyGeneral(GeneralCaveatVerifier verifier) {\n    if (verifier != null) {\n      this.generalCaveatVerifiers = appendToArray(this.generalCaveatVerifiers, verifier);\n    }\n    return this;\n  }\n\n  public Macaroon getMacaroon() {\n    return macaroon;\n  }\n\n  private static class VerificationResult {\n    byte[] csig = null;\n    boolean fail = false;\n    String failMessage = null;\n\n    private VerificationResult(byte[] csig) {\n      this.csig = csig;\n    }\n\n    private VerificationResult(String failMessage) {\n      this.failMessage = failMessage;\n      this.fail = true;\n    }\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"nitram509/jmacaroons","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/github/nitram509/jmacaroons/MacaroonsVerifier.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"65febd71c8a7364fe1b8e3a66176d8658a0e5166","size":"3384","content":"package com.cloud.ha;\n\nimport com.cloud.agent.AgentManager;\nimport com.cloud.agent.api.Answer;\nimport com.cloud.agent.api.CheckOnHostCommand;\nimport com.cloud.host.Host;\nimport com.cloud.host.HostVO;\nimport com.cloud.host.Status;\nimport com.cloud.host.dao.HostDao;\nimport com.cloud.hypervisor.Hypervisor;\nimport com.cloud.resource.ResourceManager;\nimport com.cloud.utils.component.AdapterBase;\n\nimport javax.inject.Inject;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class KvmInvestigator extends AdapterBase implements Investigator {\n\n    private final Logger logger = LoggerFactory.getLogger(KvmInvestigator.class);\n\n    @Inject\n    HostDao hostDao;\n    @Inject\n    AgentManager agentMgr;\n    @Inject\n    ResourceManager resourceMgr;\n\n    @Override\n    public boolean isVmAlive(final com.cloud.vm.VirtualMachine vm, final Host host) throws UnknownVM {\n        final Status status = isAgentAlive(host);\n        if (status == null) {\n            throw new UnknownVM();\n        }\n        if (status == Status.Up) {\n            return true;\n        } else {\n            throw new UnknownVM();\n        }\n    }\n\n    @Override\n    public Status isAgentAlive(final Host agent) {\n        if (agent.getHypervisorType() != Hypervisor.HypervisorType.KVM) {\n            return null;\n        }\n        Status hostStatus = null;\n        Status neighbourStatus = null;\n        final CheckOnHostCommand cmd = new CheckOnHostCommand(agent);\n\n        try {\n            final Answer answer = agentMgr.easySend(agent.getId(), cmd);\n            if (answer != null) {\n                hostStatus = answer.getResult() ? Status.Down : Status.Up;\n            }\n        } catch (final Exception e) {\n            logger.debug(\"Failed to send command to host: \" + agent.getId());\n        }\n        if (hostStatus == null) {\n            hostStatus = Status.Disconnected;\n        }\n\n        final List<HostVO> neighbors = resourceMgr.listHostsInClusterByStatus(agent.getClusterId(), Status.Up);\n        for (final HostVO neighbor : neighbors) {\n            if (neighbor.getId() == agent.getId() || neighbor.getHypervisorType() != Hypervisor.HypervisorType.KVM) {\n                continue;\n            }\n            logger.debug(\"Investigating host:\" + agent.getId() + \" via neighbouring host:\" + neighbor.getId());\n            try {\n                final Answer answer = agentMgr.easySend(neighbor.getId(), cmd);\n                if (answer != null) {\n                    neighbourStatus = answer.getResult() ? Status.Down : Status.Up;\n                    logger.debug(\"Neighbouring host:\" + neighbor.getId() + \" returned status:\" + neighbourStatus\n                            + \" for the investigated host:\" + agent.getId());\n                    if (neighbourStatus == Status.Up) {\n                        break;\n                    }\n                }\n            } catch (final Exception e) {\n                logger.debug(\"Failed to send command to host: \" + neighbor.getId());\n            }\n        }\n        if (neighbourStatus == Status.Up && (hostStatus == Status.Disconnected || hostStatus == Status.Down)) {\n            hostStatus = Status.Disconnected;\n        }\n        if (neighbourStatus == Status.Down && (hostStatus == Status.Disconnected || hostStatus == Status.Down)) {\n            hostStatus = Status.Down;\n        }\n        return hostStatus;\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"MissionCriticalCloud/cosmic","sample_ref":"refs/heads/master","sample_path":"cosmic-core/plugins/hypervisor/kvm/src/main/java/com/cloud/ha/KvmInvestigator.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"83ab8a55560001df6b180216e7a9fbf217c5fb48","size":"2733","content":"/**\n * Copyright 2010-2014 Ralph Schaer <ralphschaer@gmail.com>\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n *\n */\npackage ch.ralscha.extdirectspring.util;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.databind.JsonSerializer;\nimport com.fasterxml.jackson.databind.SerializerProvider;\n\nimport ch.ralscha.extdirectspring.bean.api.Action;\nimport ch.ralscha.extdirectspring.bean.api.ActionDoc;\n\npublic class MapActionSerializer extends JsonSerializer<Map<String, List<Action>>> {\n\n\t@Override\n\tpublic void serialize(Map<String, List<Action>> value, JsonGenerator jgen,\n\t\t\tSerializerProvider provider) throws IOException {\n\t\tif (null != value) {\n\t\t\tjgen.writeStartObject();\n\t\t\tfor (Entry<String, List<Action>> entry : value.entrySet()) {\n\t\t\t\tString key = entry.getKey();\n\t\t\t\tjgen.writeArrayFieldStart(key);\n\t\t\t\tList<Action> actions = entry.getValue();\n\t\t\t\tfor (Action action : actions) {\n\t\t\t\t\t// PrettyPrinter is not set the generator is on one line\n\t\t\t\t\t// mode\n\t\t\t\t\tif (jgen.getPrettyPrinter() != null && action instanceof ActionDoc) {// insertion\n\t\t\t\t\t\t// of\n\t\t\t\t\t\t// doc\n\t\t\t\t\t\t// here\n\t\t\t\t\t\tActionDoc actionDoc = (ActionDoc) action;\n\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t/**\");\n\t\t\t\t\t\tif (actionDoc.isDeprecated()) {\n\t\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t* @deprecated\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t* \" + actionDoc.getName() + \": \"\n\t\t\t\t\t\t\t\t+ actionDoc.getMethodComment());\n\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t* @author: \" + actionDoc.getAuthor());\n\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t* @version: \" + actionDoc.getVersion());\n\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t*\");\n\t\t\t\t\t\tfor (Entry<String, String> entry2 : actionDoc.getParameters()\n\t\t\t\t\t\t\t\t.entrySet()) {\n\t\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t* @param: [\" + entry2.getKey() + \"] \"\n\t\t\t\t\t\t\t\t\t+ entry2.getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t* @return\");\n\t\t\t\t\t\tfor (Entry<String, String> entry2 : actionDoc.getReturnMethod()\n\t\t\t\t\t\t\t\t.entrySet()) {\n\t\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t*\\t [\" + entry2.getKey() + \"] \"\n\t\t\t\t\t\t\t\t\t+ entry2.getValue());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjgen.writeRaw(\"\\n\\t*/\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tjgen.writeObject(action);\n\t\t\t\t}\n\t\t\t\tjgen.writeEndArray();\n\t\t\t}\n\t\t\tjgen.writeEndObject();\n\t\t}\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"ralscha/extdirectspring","sample_ref":"refs/heads/master","sample_path":"src/main/java/ch/ralscha/extdirectspring/util/MapActionSerializer.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"a8aef4752fe2399aa7205202bb49b5304a20be52","size":"1411","content":"//Dstl (c) Crown Copyright 2015\npackage uk.gov.dstl.baleen.consumers.utils;\n\nimport java.util.UUID;\n\nimport org.apache.uima.jcas.tcas.DocumentAnnotation;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport uk.gov.dstl.baleen.core.utils.IdentityUtils;\nimport uk.gov.dstl.baleen.exceptions.BaleenException;\n\n/**\n * Helper functions for writing consumers.\n *\n */\npublic class ConsumerUtils {\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ConsumerUtils.class);\n\n\tprivate ConsumerUtils() {\n\t\t// Singleton\n\t}\n\n\t/** Get a usable unique url\n\t * @param da document annotation\n\t * @param contentHashAsId true if should use the hash, false will use the source url\n\t * @return hash, source or if all else fails a UUID\n\t */\n\tpublic static String getExternalId(DocumentAnnotation da, boolean contentHashAsId) {\n\t\tif (contentHashAsId) {\n\t\t\treturn da.getHash();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn IdentityUtils.hashStrings(da.getSourceUri());\n\t\t\t} catch (BaleenException e) {\n\t\t\t\tLOGGER.warn(\"Generating a random id, unable to hash string\", e);\n\t\t\t\treturn UUID.randomUUID().toString();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Lower-case the first letter of a string, leaving the rest in it's\n\t * original case\n\t *\n\t * @param s\n\t *            String to convert to camel-case\n\t * @return Camel-cased string\n\t */\n\tpublic static String toCamelCase(String s) {\n\t\treturn s.substring(0, 1).toLowerCase() + s.substring(1);\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"dstl/baleen","sample_ref":"refs/heads/master","sample_path":"baleen/baleen-consumers/src/main/java/uk/gov/dstl/baleen/consumers/utils/ConsumerUtils.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"daa038cff5889c115ea4d3477c856ab70e121772","size":"8001","content":"package org.tigris.subversion.subclipse.ui.compare;\n\nimport java.lang.reflect.InvocationTargetException;\n\nimport org.eclipse.compare.CompareConfiguration;\nimport org.eclipse.compare.CompareEditorInput;\nimport org.eclipse.compare.ITypedElement;\nimport org.eclipse.compare.internal.BufferedResourceNode;\nimport org.eclipse.compare.structuremergeviewer.DiffNode;\nimport org.eclipse.compare.structuremergeviewer.IDiffElement;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.team.ui.ISaveableWorkbenchPart;\nimport org.eclipse.ui.IPropertyListener;\nimport org.eclipse.ui.IWorkbenchPartSite;\nimport org.tigris.subversion.subclipse.core.ISVNLocalResource;\nimport org.tigris.subversion.subclipse.core.ISVNRemoteResource;\nimport org.tigris.subversion.subclipse.core.SVNException;\nimport org.tigris.subversion.subclipse.core.commands.GetRemoteResourceCommand;\nimport org.tigris.subversion.subclipse.core.resources.LocalResourceStatus;\nimport org.tigris.subversion.subclipse.ui.Policy;\nimport org.tigris.subversion.subclipse.ui.internal.Utils;\nimport org.tigris.subversion.svnclientadapter.ISVNClientAdapter;\nimport org.tigris.subversion.svnclientadapter.ISVNInfo;\nimport org.tigris.subversion.svnclientadapter.SVNClientException;\nimport org.tigris.subversion.svnclientadapter.SVNRevision;\nimport org.tigris.subversion.svnclientadapter.SVNUrl;\n\npublic class SVNLocalBaseCompareInput extends CompareEditorInput implements ISaveableWorkbenchPart {\n\tprivate Object fRoot;\n\tprivate final SVNRevision remoteRevision;\n\tprivate boolean readOnly;\n\t\n\tprivate SVNLocalResourceNode[] localResourceNodes;\n\tprivate ResourceEditionNode[] remoteResourceNodes;\n\t\n\tpublic SVNLocalBaseCompareInput(ISVNLocalResource[] resources, SVNRevision revision, boolean readOnly) throws SVNException, SVNClientException {\n\t\tsuper(new CompareConfiguration());\n        this.remoteRevision = revision;\n        this.readOnly = readOnly;\n        \n        localResourceNodes = new SVNLocalResourceNode[resources.length];\n        remoteResourceNodes = new ResourceEditionNode[resources.length];\n        for (int i = 0; i < resources.length; i++) {\n        \tlocalResourceNodes[i] = new SVNLocalResourceNode(resources[i]);\n        \tISVNRemoteResource remoteResource = null;\n        \tLocalResourceStatus status = resources[i].getStatus();\n            if (status != null && status.isCopied()) {\n            \tISVNClientAdapter svnClient = null;\n            \ttry {\n\t            \tsvnClient = resources[i].getRepository().getSVNClient();\n\t            \tISVNInfo info = svnClient.getInfoFromWorkingCopy(resources[i].getFile());\n\t            \tSVNUrl copiedFromUrl = info.getCopyUrl();\n\t            \tif (copiedFromUrl != null) {\n\t            \t\tGetRemoteResourceCommand getRemoteResourceCommand = new GetRemoteResourceCommand(resources[i].getRepository(), copiedFromUrl, SVNRevision.HEAD);\n\t            \t\tgetRemoteResourceCommand.run(null);\n\t            \t\tremoteResource = getRemoteResourceCommand.getRemoteResource();\n\t            \t}\n            \t}\n            \tfinally {\n            \t\tresources[i].getRepository().returnSVNClient(svnClient);\n            \t}\n            }\n            if (remoteResource == null) remoteResource = resources[i].getRemoteResource(revision);\n            remoteResourceNodes[i] = new ResourceEditionNode(remoteResource);\n            remoteResourceNodes[i].setLocalResource(localResourceNodes[i]);\n            localResourceNodes[i].setRemoteResource(remoteResourceNodes[i]);\n        }\n\t}\n\n\t/**\n\t * Constructor which allows \n\t * @throws SVNException\n\t * creates a SVNLocalCompareInput, defaultin to read/write.  \n\t */\n\tpublic SVNLocalBaseCompareInput(ISVNLocalResource[] resources, SVNRevision revision) throws SVNException, SVNClientException {\n\t\tthis(resources, revision, false);\n\t}\n\t\n\tprivate void initLabels() {\n\t\tCompareConfiguration cc = getCompareConfiguration();\n\t\tcc.setLeftEditable(! readOnly);\n\t\tcc.setRightEditable(false);\n\t\tString title;\n\t\tString leftLabel;\n\t\tString rightLabel;\n\t\tif (localResourceNodes.length > 1) {\n\t\t\ttitle = Policy.bind(\"SVNLocalBaseCompareInput.0\") + remoteRevision; //$NON-NLS-1$\n\t\t\tleftLabel = Policy.bind(\"SVNLocalBaseCompareInput.1\"); //$NON-NLS-1$\n\t\t\trightLabel = remoteRevision.toString();\n\t\t} else {\n\t\t\ttitle = Policy.bind(\"SVNCompareRevisionsInput.compareResourceAndVersions\", new Object[] {localResourceNodes[0].getName()}); //$NON-NLS-1$\n\t\t\tleftLabel = Policy.bind(\"SVNCompareRevisionsInput.workspace\", new Object[] {localResourceNodes[0].getName()}); //$NON-NLS-1$\n\t\t\trightLabel = Policy.bind(\"SVNCompareRevisionsInput.repository\", new Object[] {localResourceNodes[0].getName()}); //$NON-NLS-1$\n\t\t}\n\t\tsetTitle(title);\t\t\t\n\t\tcc.setLeftLabel(leftLabel);\t\t\n\t\tcc.setRightLabel(rightLabel);\n\t}\n\n\tprotected Object prepareInput(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n\t\tinitLabels();\n\t\tMultipleSelectionNode left = new MultipleSelectionNode(localResourceNodes);\n\t\tMultipleSelectionNode right = new MultipleSelectionNode(remoteResourceNodes);\n        Object differences = new StatusAwareDifferencer().findDifferences(false, monitor,null,null,left,right);\n        if (differences instanceof DiffNode) {\n        \tDiffNode diffNode = (DiffNode)differences;\n        \tif (!diffNode.hasChildren()) {\n        \t\treturn null;\n        \t}\n        }\n        fRoot = differences;\n        return differences;\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.ISaveablePart#doSave(org.eclipse.core.runtime.IProgressMonitor)\n\t */\n\tpublic void doSave(IProgressMonitor monitor) {\n\t\ttry {\n\t\t\tsaveChanges(monitor);\n\t\t} catch (CoreException e) {\n\t\t\tUtils.handle(e);\n\t\t}\n\t}\n\t\n\tpublic void saveChanges(IProgressMonitor pm) throws CoreException {\n\t\tsuper.saveChanges(pm);\n\t\tif (fRoot instanceof DiffNode) {\n\t\t\ttry {\n\t\t\t\tcommit(pm, (DiffNode) fRoot);\n\t\t\t} finally {\t\t\n\t\t\t\tsetDirty(false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static void commit(IProgressMonitor pm, DiffNode node) throws CoreException {\n\t\tITypedElement left= node.getLeft();\n\t\tif (left instanceof BufferedResourceNode)\n\t\t\t((BufferedResourceNode) left).commit(pm);\n\t\t\t\n\t\tITypedElement right= node.getRight();\n\t\tif (right instanceof BufferedResourceNode)\n\t\t\t((BufferedResourceNode) right).commit(pm);\n\n\t\tIDiffElement[] children= node.getChildren();\n\t\tif (children != null) {\n\t\t\tfor (int i= 0; i < children.length; i++) {\n\t\t\t\tIDiffElement element= children[i];\n\t\t\t\tif (element instanceof DiffNode)\n\t\t\t\t\tcommit(pm, (DiffNode) element);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.ISaveablePart#doSaveAs()\n\t */\n\tpublic void doSaveAs() {\n\t\t// noop\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.ISaveablePart#isDirty()\n\t */\n\tpublic boolean isDirty() {\n\t\treturn isSaveNeeded();\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.ISaveablePart#isSaveAsAllowed()\n\t */\n\tpublic boolean isSaveAsAllowed() {\n\t\treturn false;\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.ISaveablePart#isSaveOnCloseNeeded()\n\t */\n\tpublic boolean isSaveOnCloseNeeded() {\n\t\treturn true;\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.IWorkbenchPart#addPropertyListener(org.eclipse.ui.IPropertyListener)\n\t */\n\tpublic void addPropertyListener(IPropertyListener listener) {\n\t\t\n\t}\n\t\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.IWorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)\n\t */\n\tpublic void createPartControl(Composite parent) {\n\t\tcreateContents(parent);\n\t}\n\t\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.IWorkbenchPart#dispose()\n\t */\n\tpublic void dispose() {\n\t}\n\t\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.IWorkbenchPart#getSite()\n\t */\n\tpublic IWorkbenchPartSite getSite() {\n\t\treturn null;\n\t}\n\t\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.IWorkbenchPart#getTitleToolTip()\n\t */\n\tpublic String getTitleToolTip() {\n\t\treturn null;\n\t}\n\t\n\t\n\t/* (non-Javadoc)\n\t * @see org.eclipse.ui.IWorkbenchPart#removePropertyListener(org.eclipse.ui.IPropertyListener)\n\t */\n\tpublic void removePropertyListener(IPropertyListener listener) {\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"apicloudcom/APICloud-Studio","sample_ref":"refs/heads/master","sample_path":"org.tigris.subversion.subclipse.ui/src/org/tigris/subversion/subclipse/ui/compare/SVNLocalBaseCompareInput.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"53f37a53f40517367a5d72086fc877693cf3fa9a","size":"2557","content":"/*\n * #%L\n * Alfresco Repository\n * %%\n * Copyright (C) 2005 - 2016 Alfresco Software Limited\n * %%\n * This file is part of the Alfresco software. \n * If the software was purchased under a paid Alfresco license, the terms of \n * the paid license agreement will prevail.  Otherwise, the software is \n * provided under the following open source license terms:\n * \n * Alfresco is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * Alfresco is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n * \n * You should have received a copy of the GNU Lesser General Public License\n * along with Alfresco. If not, see <http://www.gnu.org/licenses/>.\n * #L%\n */\npackage org.alfresco.repo.security.permissions.impl;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.Collection;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport org.alfresco.repo.security.permissions.PermissionEntry;\r\nimport org.alfresco.service.cmr.repository.NodeRef;\r\n\r\n/**\r\n * A simple object representation of a node permission entry\r\n * \r\n * @author andyh\r\n */\r\npublic final class SimpleNodePermissionEntry extends AbstractNodePermissionEntry implements Serializable\r\n{\r\n    /**\r\n     * Comment for <code>serialVersionUID</code>\r\n     */\r\n    private static final long serialVersionUID = 8157870444595023347L;\r\n\r\n    /*\r\n     * The node \r\n     */\r\n    private NodeRef nodeRef;\r\n    \r\n    /*\r\n     * Are permissions inherited?\r\n     */\r\n    private boolean inheritPermissions;\r\n    \r\n    /*\r\n     * The set of permission entries.\r\n     */\r\n    private List<? extends PermissionEntry> permissionEntries;\r\n    \r\n    \r\n    public SimpleNodePermissionEntry(NodeRef nodeRef, boolean inheritPermissions, List<? extends PermissionEntry> permissionEntries)\r\n    {\r\n        super();\r\n        this.nodeRef = nodeRef;\r\n        this.inheritPermissions = inheritPermissions;\r\n        this.permissionEntries = permissionEntries;\r\n    }\r\n\r\n    public NodeRef getNodeRef()\r\n    {\r\n        return nodeRef;\r\n    }\r\n\r\n    public boolean inheritPermissions()\r\n    {\r\n        return inheritPermissions;\r\n    }\r\n\r\n    public List<? extends PermissionEntry> getPermissionEntries()\r\n    {\r\n       return permissionEntries;\r\n    }\r\n\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"Alfresco/community-edition","sample_ref":"refs/heads/master","sample_path":"projects/repository/source/java/org/alfresco/repo/security/permissions/impl/SimpleNodePermissionEntry.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"ffd5b8fe5fb9cbad379ae16a5a9ab4ff8d9777d8","size":"1487","content":"//\n\n//\n\npackage com.cloud.hypervisor.kvm.resource.wrapper;\n\nimport com.cloud.agent.api.Answer;\nimport com.cloud.agent.api.NetworkRulesSystemVmCommand;\nimport com.cloud.hypervisor.kvm.resource.LibvirtComputingResource;\nimport com.cloud.resource.CommandWrapper;\nimport com.cloud.resource.ResourceWrapper;\n\nimport org.libvirt.Connect;\nimport org.libvirt.LibvirtException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@ResourceWrapper(handles = NetworkRulesSystemVmCommand.class)\npublic final class LibvirtNetworkRulesSystemVmCommandWrapper\n        extends CommandWrapper<NetworkRulesSystemVmCommand, Answer, LibvirtComputingResource> {\n\n    private static final Logger s_logger = LoggerFactory.getLogger(LibvirtNetworkRulesSystemVmCommandWrapper.class);\n\n    @Override\n    public Answer execute(final NetworkRulesSystemVmCommand command,\n                          final LibvirtComputingResource libvirtComputingResource) {\n        boolean success = false;\n        try {\n            final LibvirtUtilitiesHelper libvirtUtilitiesHelper = libvirtComputingResource.getLibvirtUtilitiesHelper();\n\n            final Connect conn = libvirtUtilitiesHelper.getConnectionByVmName(command.getVmName());\n            success = libvirtComputingResource.configureDefaultNetworkRulesForSystemVm(conn, command.getVmName());\n        } catch (final LibvirtException e) {\n            s_logger.trace(\"Ignoring libvirt error.\", e);\n        }\n\n        return new Answer(command, success, \"\");\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"MissionCriticalCloud/cosmic","sample_ref":"refs/heads/master","sample_path":"cosmic-core/plugins/hypervisor/kvm/src/main/java/com/cloud/hypervisor/kvm/resource/wrapper/LibvirtNetworkRulesSystemVmCommandWrapper.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"fc1f7e0cca5f7f3d6f21a273b1460498ffb930d1","size":"3225","content":"// Copyright 2015 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage dfp.axis.v201605.productservice;\n\nimport com.google.api.ads.common.lib.auth.OfflineCredentials;\nimport com.google.api.ads.common.lib.auth.OfflineCredentials.Api;\nimport com.google.api.ads.dfp.axis.factory.DfpServices;\nimport com.google.api.ads.dfp.axis.utils.v201605.StatementBuilder;\nimport com.google.api.ads.dfp.axis.v201605.Product;\nimport com.google.api.ads.dfp.axis.v201605.ProductPage;\nimport com.google.api.ads.dfp.axis.v201605.ProductServiceInterface;\nimport com.google.api.ads.dfp.lib.client.DfpSession;\nimport com.google.api.client.auth.oauth2.Credential;\n\n/**\n * This example gets all products. Products are created automatically from product templates.\n *\n * Credentials and properties in {@code fromFile()} are pulled from the\n * \"ads.properties\" file. See README for more info.\n */\npublic class GetAllProducts {\n\n  public static void runExample(DfpServices dfpServices, DfpSession session) throws Exception {\n    // Get the ProductService.\n    ProductServiceInterface productService =\n        dfpServices.get(session, ProductServiceInterface.class);\n\n    // Create a statement to select all products.\n    StatementBuilder statementBuilder = new StatementBuilder()\n        .orderBy(\"id ASC\")\n        .limit(StatementBuilder.SUGGESTED_PAGE_LIMIT);\n\n    // Default for total result set size.\n    int totalResultSetSize = 0;\n\n    do {\n      // Get products by statement.\n      ProductPage page =\n          productService.getProductsByStatement(statementBuilder.toStatement());\n\n      if (page.getResults() != null) {\n        totalResultSetSize = page.getTotalResultSetSize();\n        int i = page.getStartIndex();\n        for (Product product : page.getResults()) {\n          System.out.printf(\n              \"%d) Product with ID %d and name '%s' was found.%n\", i++,\n              product.getId(), product.getName());\n        }\n      }\n\n      statementBuilder.increaseOffsetBy(StatementBuilder.SUGGESTED_PAGE_LIMIT);\n    } while (statementBuilder.getOffset() < totalResultSetSize);\n\n    System.out.printf(\"Number of results found: %d%n\", totalResultSetSize);\n  }\n\n  public static void main(String[] args) throws Exception {\n    // Generate a refreshable OAuth2 credential.\n    Credential oAuth2Credential = new OfflineCredentials.Builder()\n        .forApi(Api.DFP)\n        .fromFile()\n        .build()\n        .generateCredential();\n\n    // Construct a DfpSession.\n    DfpSession session = new DfpSession.Builder()\n        .fromFile()\n        .withOAuth2Credential(oAuth2Credential)\n        .build();\n\n    DfpServices dfpServices = new DfpServices();\n\n    runExample(dfpServices, session);\n  }\n}\n","binary":"false","copies":"1","sample_repo_name":"googleads/googleads-java-lib","sample_ref":"refs/heads/master","sample_path":"examples/dfp_axis/src/main/java/dfp/axis/v201605/productservice/GetAllProducts.java","sample_mode":"33261","sample_symlink_target":null}
{"id":"ed127abba414438b4b63bc110d652498690a9cfc","size":"2128","content":"package com.aol.cyclops.util.function;\n\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\n\n//#http://java.dzone.com/articles/whats-wrong-java-8-currying-vs\npublic class Uncurry extends UncurryConsumer{\n\n\t\n\tpublic static <T1,R> Function<T1,R> uncurry(Function<T1,Supplier<R>> func){\n\t\treturn  (t1) ->func.apply(t1).get();\n\t}\n\tpublic static <T1,T2,R> BiFunction<T1,T2,R> uncurry2(Function<T2,Function<T1,R>> biFunc){\n\t\treturn  (t2 , t1) -> biFunc.apply(t1).apply(t2);\n\t}\n\t\n\tpublic static <T1,T2,T3,R> TriFunction<T1,T2,T3,R>   uncurry3(Function<T1,Function<T2,Function<T3,R>>> triFunc){\n\t\treturn   (t1, t2, t3) -> triFunc.apply(t1).apply(t2).apply(t3);\n\t}\n\tpublic static <T1,T2,T3,T4,R> QuadFunction<T1,T2,T3,T4,R> uncurry4(Function<T1,Function<T2,Function<T3,Function<T4,R>>>> quadFunc){\n\t\treturn   (t1, t2, t3, t4) -> quadFunc.apply(t1).apply(t2).apply(t3).apply(t4);\n\t}\n\tpublic static <T1,T2,T3,T4,T5,R>  QuintFunction<T1,T2,T3,T4,T5,R> uncurry5(Function<T1,Function<T2,Function<T3,Function<T4,Function<T5,R>>>>>  pentFunc){\n\t\treturn   (t1, t2, t3, t4, t5) -> pentFunc.apply(t1).apply(t2).apply(t3).apply(t4).apply(t5);\n\t}\n\tpublic static <T1,T2,T3,T4,T5,T6,R> HexFunction<T1,T2,T3,T4,T5,T6,R>  uncurry6(Function<T1,Function<T2,Function<T3,Function<T4,Function<T5,Function<T6,R>>>>>> hexFunc){\n\t\treturn   (t1, t2 , t3, t4, t5 , t6) -> hexFunc.apply(t1).apply(t2).apply(t3).apply(t4).apply(t5).apply(t6);\n\t}\n\tpublic static <T1,T2,T3,T4,T5,T6,T7,R> HeptFunction<T1,T2,T3,T4,T5,T6,T7,R>  uncurry7(Function<T1,Function<T2,Function<T3,Function<T4,Function<T5,Function<T6,Function<T7,R>>>>>>> heptFunc){\n\t\treturn   (t1,t2,t3, t4,t5, t6, t7) -> heptFunc.apply(t1).apply(t2).apply(t3).apply(t4).apply(t5).apply(t6).apply(t7);\n\t}\n\tpublic static <T1,T2,T3,T4,T5,T6,T7,T8,R> OctFunction<T1,T2,T3,T4,T5,T6,T7,T8,R>  uncurry8(Function<T1,Function<T2,Function<T3,Function<T4,Function<T5,Function<T6,Function<T7,Function<T8,R>>>>>>>> octFunc){\n\t\treturn   (t1,t2,t3, t4,t5, t6, t7,t8) -> octFunc.apply(t1).apply(t2).apply(t3).apply(t4).apply(t5).apply(t6).apply(t7).apply(t8);\n\t}\n\t\n}\n","binary":"false","copies":"1","sample_repo_name":"aol/cyclops-react","sample_ref":"refs/heads/master","sample_path":"src/main/java/com/aol/cyclops/util/function/Uncurry.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"b8af7cd6c57aee7ad22ee2c15dd31d3f94abcdfa","size":"18125","content":"package org.bds.test;\n\nimport java.io.File;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.bds.util.Gpr;\nimport org.junit.Test;\n\nimport junit.framework.Assert;\n\n/**\n * Test cases that require BDS code execution and check results\n *\n * Note: These test cases requires that the BDS code is correctly parsed, compiled and executes.\n *\n * @author pcingola\n *\n */\npublic class TestCasesRun2 extends TestCasesBase {\n\n\t@Test\n\tpublic void test100() {\n\t\tGpr.debug(\"Test\");\n\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"s\", 1);\n\t\texpectedValues.put(\"s2\", -1);\n\n\t\trunAndCheck(\"test/run_100.bds\", expectedValues);\n\t}\n\n\t@Test\n\tpublic void test101() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"a\", 1);\n\t\texpectedValues.put(\"b\", 3);\n\t\texpectedValues.put(\"c\", 5);\n\n\t\trunAndCheck(\"test/run_101.bds\", expectedValues);\n\t}\n\n\t@Test\n\tpublic void test102() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"a\", 1);\n\t\texpectedValues.put(\"b\", 3);\n\t\texpectedValues.put(\"c\", 5);\n\t\texpectedValues.put(\"d\", 0);\n\n\t\trunAndCheck(\"test/run_102.bds\", expectedValues);\n\t}\n\n\t@Test\n\tpublic void test103() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"is\", \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\");\n\t\texpectedValues.put(\"is2\", \"[1, 3, 5, 7, 9]\");\n\t\texpectedValues.put(\"rs\", \"[1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0]\");\n\n\t\trunAndCheck(\"test/run_103.bds\", expectedValues);\n\t}\n\n\t@Test\n\tpublic void test104() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_104.bds\", \"isRun\", \"true\");\n\t}\n\n\t@Test\n\tpublic void test105() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_105.bds\", \"isRun\", \"false\");\n\t}\n\n\t@Test\n\tpublic void test106() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"str1\", \"l[1] : '2'\");\n\t\texpectedValues.put(\"str2\", \"m{'Hello'} : 'Bye'\");\n\n\t\trunAndCheck(\"test/run_106.bds\", expectedValues);\n\t}\n\n\t@Test\n\tpublic void test107() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"paramName\", \"parameter_value\");\n\t\texpectedValues.put(\"file1\", \"/path/to/file_1.txt\");\n\t\texpectedValues.put(\"file2\", \"/path/to/file_2.txt\");\n\t\texpectedValues.put(\"file3\", \"/path/to/file_3.txt\");\n\t\texpectedValues.put(\"file4\", \"/path/to/file_4.txt\");\n\t\texpectedValues.put(\"file5\", \"/path/to/file_5.txt\");\n\n\t\trunAndCheck(\"test/run_107.bds\", expectedValues);\n\t}\n\n\t@Test\n\tpublic void test108() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"paramName\", \"parameter_value\");\n\t\texpectedValues.put(\"file1\", \"/path/to/file_1.txt\");\n\t\texpectedValues.put(\"file2\", \"/path/to/file_2.txt\");\n\t\texpectedValues.put(\"file3\", \"/path/to/file_3.NEW.txt\");\n\t\texpectedValues.put(\"file4\", \"/path/to/file_4.txt\");\n\t\texpectedValues.put(\"file5\", \"/path/to/file_5.NEW.txt\");\n\n\t\trunAndCheck(\"test/run_108.bds\", expectedValues);\n\t}\n\n\tpublic void test109() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_109.bds\", \"r1\", \"4027146782649399912\");\n\t}\n\n\tpublic void test110() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_110.bds\", \"runOk\", \"true\");\n\t}\n\n\tpublic void test111() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_111.bds\", \"runOk\", \"false\");\n\t}\n\n\tpublic void test112() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_112.bds\", \"runOk\", \"false\");\n\t}\n\n\t@Test\n\tpublic void test113_parallel_function_calls() {\n\t\tGpr.debug(\"Test\");\n\t\tString stdout = runAndReturnStdout(\"test/run_113.bds\");\n\n\t\tSet<String> linesPar = new HashSet<String>();\n\t\tfor (String line : stdout.split(\"\\n\")) {\n\t\t\tif (line.startsWith(\"Par:\")) {\n\t\t\t\tif (linesPar.contains(line)) throw new RuntimeException(\"Line repeated (this should never happen): '\" + line + \"'\");\n\t\t\t\tlinesPar.add(line);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Test\n\tpublic void test114_parallel_function_task_calls() {\n\t\tGpr.debug(\"Test\");\n\t\tString stdout = runAndReturnStdout(\"test/run_114.bds\");\n\n\t\tSet<String> linesPar = new HashSet<String>();\n\t\tfor (String line : stdout.split(\"\\n\"))\n\t\t\tif (line.startsWith(\"TASK\")) linesPar.add(line);\n\n\t\t// Check\n\t\tAssert.assertTrue(\"There should be 5 tasks\", linesPar.size() == 5);\n\t}\n\n\t@Test\n\tpublic void test115_task_dependency_using_taskId() {\n\t\tGpr.debug(\"Test\");\n\t\tString stdout = runAndReturnStdout(\"test/run_115.bds\");\n\t\tAssert.assertEquals(\"Hi 1\\nBye 1\\nHi 2\\nBye 2\\n\", stdout);\n\t}\n\n\t@Test\n\tpublic void test116_lineWrap_backslashId() {\n\t\tGpr.debug(\"Test\");\n\t\tString stdout = runAndReturnStdout(\"test/run_116.bds\");\n\t\tAssert.assertEquals(\"hi bye\\nThe answer\\t\\tis: 42\", stdout);\n\t}\n\n\t@Test\n\tpublic void test117_serial_parallel_tasks() {\n\t\tGpr.debug(\"Test\");\n\t\tString expectedStdout = \"Iter 1, Task 1: End\\n\" //\n\t\t\t\t+ \"Iter 1, Task 2: Start\\n\" //\n\t\t\t\t+ \"Iter 1, Task 2: End\\n\" //\n\t\t\t\t+ \"Iter 5, Task 1: End\\n\" //\n\t\t\t\t+ \"Iter 5, Task 2: Start\\n\" //\n\t\t\t\t+ \"Iter 5, Task 2: End\\n\" //\n\t\t\t\t;;\n\n\t\tString stdout = runAndReturnStdout(\"test/run_117.bds\");\n\n\t\tif (stdout.indexOf(expectedStdout) < 0) {\n\t\t\tString msg = \"Cannot find desired output:\\n\" //\n\t\t\t\t\t+ \"---------- Expected output ----------\\n\" //\n\t\t\t\t\t+ expectedStdout //\n\t\t\t\t\t+ \"-------------- STDOUT --------------\\n\" //\n\t\t\t\t\t+ stdout //\n\t\t\t\t\t;\n\t\t\tSystem.err.println(msg);\n\t\t\tthrow new RuntimeException(msg);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void test118_dependency_using_path() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheckExit(\"test/run_118.bds\", 0);\n\t}\n\n\t@Test\n\tpublic void test119_task_dependency() {\n\t\tGpr.debug(\"Test\");\n\n\t\t// Delete input file\n\t\tString inFile = \"tmp_in.txt\";\n\t\t(new File(inFile)).delete();\n\n\t\tString expectedStdout1 = \"Creating tmp_in.txt\\n\" //\n\t\t\t\t+ \"Running task\\n\" //\n\t\t\t\t+ \"Creating tmp_out.txt\\n\" //\n\t\t\t\t+ \"Done\\n\" //\"\n\t\t\t\t;\n\n\t\tString expectedStdout2 = \"Running task\\n\" //\n\t\t\t\t+ \"Done\\n\" //\"\n\t\t\t\t;\n\n\t\tif (verbose) System.out.println(\"First run:\");\n\t\trunAndCheckStdout(\"test/run_119.bds\", expectedStdout1);\n\n\t\tif (verbose) System.out.println(\"\\n\\nSecond run:\");\n\t\trunAndCheckStdout(\"test/run_119.bds\", expectedStdout2);\n\t}\n\n\t@Test\n\tpublic void test120_split_empty_string() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_120.bds\", \"len\", \"0\");\n\t}\n\n\t@Test\n\tpublic void test121_split_fail_regex() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_121.bds\", \"len\", \"1\");\n\t}\n\n\t@Test\n\tpublic void test122_nestest_break_continue() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_122.bds\", \"out\", \"5\\t7\");\n\t}\n\n\t@Test\n\tpublic void test123_literals_sys_task() {\n\t\tGpr.debug(\"Test\");\n\n\t\tString output = \"print_quote        |\\\\t|\\n\" //\n\t\t\t\t+ \"print_quote        |\\\\t|    variable:$hi\\n\" //\n\t\t\t\t+ \"print_double       |\\t|\\n\" //\n\t\t\t\t+ \"print_double       |\\t|    variable:Hello\\n\" //\n\t\t\t\t+ \"print_double_esc   |\\\\t|\\n\" //\n\t\t\t\t+ \"print_double_esc   |\\\\t|   variable:Hello\\n\" //\n\t\t// Note: This result may change if we use a different sysShell in bds.config\n\t\t\t\t+ \"sys                |\\\\t|\\n\" //\n\t\t\t\t+ \"sys                |\\\\t|    variable:Hello\\n\" //\n\t\t// Note: This result may change if we use a different taskShell in bds.config\n\t\t\t\t+ \"task               |\\\\t|\\n\" //\n\t\t\t\t+ \"task               |\\\\t|    variable:Hello\\n\" //\n\t\t\t\t;\n\n\t\trunAndCheckStdout(\"test/run_123.bds\", output);\n\t}\n\n\t@Test\n\tpublic void test124_quiet_mode() {\n\t\tGpr.debug(\"Test\");\n\t\tString output = \"print 0\\n\" //\n\t\t\t\t+ \"print 1\\n\" //\n\t\t\t\t+ \"print 2\\n\" //\n\t\t\t\t+ \"print 3\\n\" //\n\t\t\t\t+ \"print 4\\n\" //\n\t\t\t\t+ \"print 5\\n\" //\n\t\t\t\t+ \"print 6\\n\" //\n\t\t\t\t+ \"print 7\\n\" //\n\t\t\t\t+ \"print 8\\n\" //\n\t\t\t\t+ \"print 9\\n\" //\n\t\t\t\t;\n\n\t\t// Run and capture stdout\n\t\tString args[] = { \"-quiet\" };\n\t\tString stdout = runAndReturnStdout(\"test/run_124.bds\", args);\n\t\tif (verbose) System.err.println(\"STDOUT: \" + stdout);\n\n\t\t// Check that sys and task outputs are not there\n\t\tAssert.assertTrue(\"Print output should be in STDOUT\", stdout.contains(output));\n\t\tAssert.assertTrue(\"Task output should NOT be in STDOUT\", !stdout.contains(\"task\"));\n\t\tAssert.assertTrue(\"Sys output should NOT be in STDOUT\", !stdout.contains(\"sys\"));\n\t}\n\n\t@Test\n\tpublic void test125_automatic_help() {\n\t\tGpr.debug(\"Test\");\n\t\tString output = \"Command line options 'run_125.bds' :\\n\" //\n\t\t\t\t+ \"\\t-mean <int>                                  : Help for argument 'mean' should be printed here\\n\" //\n\t\t\t\t+ \"\\t-min <int>                                   : Help for argument 'min' should be printed here\\n\" //\n\t\t\t\t+ \"\\t-num <int>                                   : Number of times 'hi' should be printed\\n\" //\n\t\t\t\t+ \"\\t-salutation <string>                         : Salutation to use\\n\" //\n\t\t\t\t+ \"\\t-someVeryLongCommandLineArgumentName <bool>  : This command line argument has a really long name\\n\" //\n\t\t\t\t+ \"\\t-useTab <bool>                               : Use tab before printing line\\n\" //\n\t\t\t\t+ \"\\n\" //\n\t\t\t\t;\n\n\t\trunAndCheckHelp(\"test/run_125.bds\", output);\n\t}\n\n\t@Test\n\tpublic void test125b_automatic_help_unsorted() {\n\t\tGpr.debug(\"Test\");\n\t\tString output = \"Command line options 'run_125b.bds' :\\n\" //\n\t\t\t\t+ \"\\t-useTab <bool>                               : Use tab before printing line\\n\" //\n\t\t\t\t+ \"\\t-someVeryLongCommandLineArgumentName <bool>  : This command line argument has a really long name\\n\" //\n\t\t\t\t+ \"\\t-salutation <string>                         : Salutation to use\\n\" //\n\t\t\t\t+ \"\\t-num <int>                                   : Number of times 'hi' should be printed\\n\" //\n\t\t\t\t+ \"\\t-min <int>                                   : Help for argument 'min' should be printed here\\n\" //\n\t\t\t\t+ \"\\t-mean <int>                                  : Help for argument 'mean' should be printed here\\n\" //\n\t\t\t\t+ \"\\n\" //\n\t\t\t\t;\n\n\t\trunAndCheckHelp(\"test/run_125b.bds\", output);\n\t}\n\n\t/**\n\t * Show help when there are no arguments\n\t */\n\t@Test\n\tpublic void test125c_automatic_help() {\n\t\tGpr.debug(\"Test\");\n\t\tString output = \"Command line options 'run_125c.bds' :\\n\" //\n\t\t\t\t+ \"\\t-mean <int>                                  : Help for argument 'mean' should be printed here\\n\" //\n\t\t\t\t+ \"\\t-min <int>                                   : Help for argument 'min' should be printed here\\n\" //\n\t\t\t\t+ \"\\t-num <int>                                   : Number of times 'hi' should be printed\\n\" //\n\t\t\t\t+ \"\\t-salutation <string>                         : Salutation to use\\n\" //\n\t\t\t\t+ \"\\t-someVeryLongCommandLineArgumentName <bool>  : This command line argument has a really long name\\n\" //\n\t\t\t\t+ \"\\t-useTab <bool>                               : Use tab before printing line\\n\" //\n\t\t\t\t+ \"\\n\" //\n\t\t\t\t;\n\n\t\trunAndCheckHelp(\"test/run_125c.bds\", output);\n\t}\n\n\t/**\n\t * Task dependent on output from a scheduled task\n\t */\n\t@Test\n\tpublic void test126_task_dependency_scheduled() {\n\t\tGpr.debug(\"Test\");\n\n\t\tString expectedOutput = \"IN: \" + Gpr.HOME + \"/zzz/in.txt\\n\" //\n\t\t\t\t+ \"OUT: \" + Gpr.HOME + \"/zzz/out.txt\\n\" //\n\t\t\t\t+ \"OUT_0: \" + Gpr.HOME + \"/zzz/out_0.txt\\n\" //\n\t\t\t\t+ \"    OUT_0_0: \" + Gpr.HOME + \"/zzz/out_0_0.txt\\n\" //\n\t\t\t\t+ \"    OUT_0_1: \" + Gpr.HOME + \"/zzz/out_0_1.txt\\n\" //\n\t\t\t\t+ \"    OUT_0_2: \" + Gpr.HOME + \"/zzz/out_0_2.txt\\n\" //\n\t\t\t\t+ \"OUT_1: \" + Gpr.HOME + \"/zzz/out_1.txt\\n\" //\n\t\t\t\t+ \"    OUT_1_0: \" + Gpr.HOME + \"/zzz/out_1_0.txt\\n\" //\n\t\t\t\t+ \"    OUT_1_1: \" + Gpr.HOME + \"/zzz/out_1_1.txt\\n\" //\n\t\t\t\t+ \"    OUT_1_2: \" + Gpr.HOME + \"/zzz/out_1_2.txt\\n\" //\n\t\t\t\t+ \"OUT_2: \" + Gpr.HOME + \"/zzz/out_2.txt\\n\" //\n\t\t\t\t+ \"    OUT_2_0: \" + Gpr.HOME + \"/zzz/out_2_0.txt\\n\" //\n\t\t\t\t+ \"    OUT_2_1: \" + Gpr.HOME + \"/zzz/out_2_1.txt\\n\" //\n\t\t\t\t+ \"    OUT_2_2: \" + Gpr.HOME + \"/zzz/out_2_2.txt\\n\" //\n\t\t\t\t;\n\n\t\tString stdout = runAndReturnStdout(\"test/run_126.bds\");\n\t\tif (verbose) {\n\t\t\tSystem.err.println(\"STDOUT:\" //\n\t\t\t\t\t+ \"\\n----------------------------------------\\n\" //\n\t\t\t\t\t+ stdout //\n\t\t\t\t\t+ \"\\n----------------------------------------\" //\n\t\t\t);\n\t\t}\n\n\t\t// Check that task output lines\n\t\tfor (String out : expectedOutput.split(\"\\n\")) {\n\t\t\tAssert.assertTrue(\"Expected output line not found: '\" + out + \"'\", stdout.contains(out));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void test127_interpolate_variable_with_underscores() {\n\t\tGpr.debug(\"Test\");\n\n\t\tString output = \"bwa parameters\\n\" //\n\t\t\t\t+ \"bwa parameters\\n\" //\n\t\t\t\t+ \"bwa parameters\\n\" //\n\t\t\t\t+ \"bwa parameters\\n\" //\n\t\t\t\t;\n\n\t\trunAndCheckStdout(\"test/run_127.bds\", output);\n\t}\n\n\t@Test\n\tpublic void test128_task_local_variables() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheckStdout(\"test/run_128.bds\", \"TEST\\n\");\n\t}\n\n\t@Test\n\tpublic void test129_chdir_sys() {\n\t\tGpr.debug(\"Test\");\n\t\tString out = runAndReturnStdout(\"test/run_129.bds\");\n\t\tAssert.assertTrue(out.contains(\"FILE_01\\n\"));\n\t\tAssert.assertTrue(out.contains(\"FILE_02\\n\"));\n\t}\n\n\t@Test\n\tpublic void test130_chdir_task() {\n\t\tGpr.debug(\"Test\");\n\t\tString out = runAndReturnStdout(\"test/run_130.bds\");\n\t\tAssert.assertTrue(out.contains(\"FILE_01\\n\"));\n\t\tAssert.assertTrue(out.contains(\"FILE_02\\n\"));\n\t}\n\n\t@Test\n\tpublic void test131_chdir_fileMethods() {\n\t\tGpr.debug(\"Test\");\n\t\tString out = \"\"//\n\t\t\t\t+ \"chdir_test_file_01.txt\\tread:FILE_01\\n\" //\n\t\t\t\t+ \"chdir_test_file_01.txt\\treadLines:[FILE_01]\\n\" //\n\t\t\t\t+ \"chdir_test_file_01.txt\\texists:true\\n\" //\n\t\t\t\t+ \"chdir_test_file_01.txt\\tisDir:false\\n\" //\n\t\t\t\t+ \"chdir_test_file_01.txt\\tisEmpty:false\\n\" //\n\t\t\t\t+ \"chdir_test_file_01.txt\\tisFile:true\\n\" //\n\t\t\t\t+ \"chdir_test_file_01.txt\\tcanRead:true\\n\" //\n\t\t\t\t+ \"chdir_test_file_01.txt\\tcanWrite:true\\n\" //\n\t\t\t\t+ \"\\n\" //\n\t\t\t\t+ \"----------\\n\" //\n\t\t\t\t+ \"chdir_test_file_02.txt\\tread:FILE_02\\n\" //\n\t\t\t\t+ \"chdir_test_file_02.txt\\treadLines:[FILE_02]\\n\" //\n\t\t\t\t+ \"chdir_test_file_02.txt\\texists:true\\n\" //\n\t\t\t\t+ \"chdir_test_file_02.txt\\tisDir:false\\n\" //\n\t\t\t\t+ \"chdir_test_file_02.txt\\tisEmpty:false\\n\" //\n\t\t\t\t+ \"chdir_test_file_02.txt\\tisFile:true\\n\" //\n\t\t\t\t+ \"chdir_test_file_02.txt\\tcanRead:true\\n\" //\n\t\t\t\t+ \"chdir_test_file_02.txt\\tcanWrite:true\\n\" //\n\t\t\t\t;\n\n\t\tString outreal = runAndReturnStdout(\"test/run_131.bds\");\n\t\tAssert.assertEquals(out, outreal);\n\t}\n\n\t/**\n\t * Make sure taskId contains 'taskName' parameter\n\t */\n\t@Test\n\tpublic void test132_taskName() {\n\t\tGpr.debug(\"Test\");\n\t\tString out = runAndReturnStdout(\"test/run_132.bds\");\n\t\tAssert.assertTrue(out.contains(\"run_132.mytask\"));\n\t}\n\n\t/**\n\t * Make sure taskId contains 'taskName' parameter\n\t * In this test 'taskName' is not safe to be used with as file name, so it has to be sanitized\n\t */\n\t@Test\n\tpublic void test133_taskName_unsafe() {\n\t\tGpr.debug(\"Test\");\n\t\tString out = runAndReturnStdout(\"test/run_133.bds\");\n\t\tAssert.assertTrue(out.contains(\"run_133.mytask_unsafe_with_spaces\"));\n\t}\n\n\t/**\n\t * Show help when there are no arguments\n\t */\n\t@Test\n\tpublic void test134_automatic_help_sections() {\n\t\tGpr.debug(\"Test\");\n\t\tString output = \"This program does blah\\n\" //\n\t\t\t\t+ \"Actually, a lot of blah blah\\n\" //\n\t\t\t\t+ \"    and even more blah\\n\" //\n\t\t\t\t+ \"    or blah\\n\" //\n\t\t\t\t+ \"\\t-quiet <bool>     : Be very quiet\\n\" //\n\t\t\t\t+ \"\\t-verbose <bool>   : Be verbose\\n\" //\n\t\t\t\t+ \"Options related to database\\n\" //\n\t\t\t\t+ \"\\t-dbName <string>  : Database name\\n\" //\n\t\t\t\t+ \"\\t-dbPort <int>     : Database port\\n\" //\n\t\t\t\t+ \"\\n\" //\n\t\t\t\t;\n\n\t\trunAndCheckHelp(\"test/run_134.bds\", output);\n\t}\n\n\t@Test\n\tpublic void test135() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"l\", \"[1, 2, 3, 99]\");\n\t\texpectedValues.put(\"lc1\", \"[1, 2, 3]\");\n\t\texpectedValues.put(\"lc2\", \"[1, 2, 3]\");\n\t\texpectedValues.put(\"lc3\", \"[1, 2, 3]\");\n\n\t\trunAndCheck(\"test/run_135.bds\", expectedValues);\n\t}\n\n\t@Test\n\tpublic void test136() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"l\", \"[1, 99, 2, 3]\");\n\t\texpectedValues.put(\"l2\", \"[3, 2, 99, 1]\");\n\t\texpectedValues.put(\"l3\", \"[3, 2, 99, 1, 99]\");\n\t\texpectedValues.put(\"l3count\", \"2\");\n\t\texpectedValues.put(\"l3idx\", \"2\");\n\t\texpectedValues.put(\"l4\", \"[3, 2, 1, 99]\");\n\t\texpectedValues.put(\"l5\", \"[3, 2, 1, 99]\");\n\n\t\trunAndCheck(\"test/run_136.bds\", expectedValues);\n\t}\n\n\t@Test\n\tpublic void test137() {\n\t\tGpr.debug(\"Test\");\n\t\tHashMap<String, Object> expectedValues = new HashMap<String, Object>();\n\t\texpectedValues.put(\"l\", \"[1, 2, 3]\");\n\t\texpectedValues.put(\"has2\", \"true\");\n\t\texpectedValues.put(\"has7\", \"false\");\n\n\t\trunAndCheck(\"test/run_137.bds\", expectedValues);\n\t}\n\n\t/**\n\t * Cos(x)\n\t */\n\t@Test\n\tpublic void test138() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_138.bds\", \"hasErr\", \"false\");\n\t}\n\n\t/**\n\t * Sin(x)\n\t */\n\t@Test\n\tpublic void test139() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_139.bds\", \"hasErr\", \"false\");\n\t}\n\n\t@Test\n\tpublic void test140_list_nonvariable() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_140.bds\", \"i\", \"2\");\n\t}\n\n\t@Test\n\tpublic void test141_map_nonvariable() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_141.bds\", \"i\", \"42\");\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\t@Test\n\tpublic void test142_dirPath() {\n\t\tGpr.debug(\"Test\");\n\t\tList<String> dir2 = (List<String>) runAndGet(\"test/run_142.bds\", \"dir2\");\n\n\t\tAssert.assertEquals(10, dir2.size());\n\n\t\tfor (String f : dir2) {\n\t\t\tif (debug) System.out.println(f);\n\t\t\tAssert.assertTrue(\"Path must be canonical\", f.startsWith(\"/\"));\n\t\t\tAssert.assertTrue(\"Path must be canonical\", f.endsWith(\".bds\"));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void test143_pathAbsolute() {\n\t\tGpr.debug(\"Test\");\n\t\trunAndCheck(\"test/run_143.bds\", \"fileBase\", \"tmp_run_143_link.txt\");\n\t}\n\n\t@Test\n\tpublic void test144_dollar_sign_in_task() {\n\t\tGpr.debug(\"Test\");\n\n\t\t// We want to execute an inline perl script within a task\n\t\t// E.g.:\n\t\t//     task perl -e 'use English; print \"PID: \\$PID\\n\";'\n\t\t//\n\t\t// Here $PID is a perl variable and should not be interpreted\n\t\t// by bds. We need a way to escape such variables.\n\t\tString bdsFile = \"test/run_144.bds\";\n\n\t\tString stdout = runAndReturnStdout(bdsFile);\n\n\t\t// Parse STDOUT\n\t\tString lines[] = stdout.split(\"\\n\");\n\t\tAssert.assertEquals(\"No lines found?\", 3, lines.length);\n\n\t\tfor (String line : lines) {\n\t\t\tString fields[] = line.split(\":\");\n\t\t\tAssert.assertEquals(\"Cannot parse line:\\n\" + line, 2, fields.length);\n\n\t\t\tint positiveNumber = Gpr.parseIntSafe(fields[1]);\n\t\t\tAssert.assertTrue(\"Positive number expected: '\" + fields[1] + \"'\", positiveNumber > 0);\n\t\t}\n\t}\n\n}\n","binary":"false","copies":"1","sample_repo_name":"pcingola/BigDataScript","sample_ref":"refs/heads/master","sample_path":"src/org/bds/test/TestCasesRun2.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"926599c3258046ba1ba0c0d29a861f2f6a410dce","size":"1629","content":"package io.freefair.android.ui.datetime;\r\n\r\nimport android.annotation.TargetApi;\r\nimport android.app.TimePickerDialog;\r\nimport android.content.Context;\r\nimport android.text.format.DateFormat;\r\nimport android.util.AttributeSet;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.TimePicker;\r\n\r\nimport java.util.Calendar;\r\nimport java.util.GregorianCalendar;\r\n\r\npublic class TimeEditText extends EditText implements View.OnClickListener\r\n{\r\n\tpublic TimeEditText(Context context) {\r\n\t\tsuper(context);\r\n\t\tinit();\r\n\t}\r\n\r\n\tpublic TimeEditText(Context context, AttributeSet attrs) {\r\n\t\tsuper(context, attrs);\r\n\t\tinit();\r\n\t}\r\n\r\n\tpublic TimeEditText(Context context, AttributeSet attrs, int defStyleAttr) {\r\n\t\tsuper(context, attrs, defStyleAttr);\r\n\t\tinit();\r\n\t}\r\n\r\n\t@TargetApi(21)\r\n\tpublic TimeEditText(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n\t\tsuper(context, attrs, defStyleAttr, defStyleRes);\r\n\t\tinit();\r\n\t}\r\n\r\n\tprivate void init()\r\n\t{\r\n\t\tthis.setOnClickListener(this);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onClick(View v) {\r\n\t\tCalendar calendar = Calendar.getInstance();\r\n\t\tTimePickerDialog timePickerDialog = new TimePickerDialog(this.getContext(), new TimePickerDialog.OnTimeSetListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onTimeSet(TimePicker view, int hourOfDay, int minute) {\r\n\t\t\t\tGregorianCalendar cal = new GregorianCalendar(0, 0, 0, hourOfDay, minute);\r\n\t\t\t\tTimeEditText.this.setText(DateFormat.getTimeFormat(getContext()).format(cal.getTime()));\r\n\t\t\t}\r\n\t\t},calendar.get(Calendar.HOUR_OF_DAY),calendar.get(Calendar.MINUTE), true);\r\n\t\ttimePickerDialog.show();\r\n\t}\r\n}\r\n","binary":"false","copies":"1","sample_repo_name":"freefair/android-library","sample_ref":"refs/heads/master","sample_path":"playground/src/main/java/io/freefair/android/ui/datetime/TimeEditText.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"18b262004977aa60de01d1c0d9248fdfa9dd2310","size":"10185","content":"package loon.utils;\n\nimport java.util.Arrays;\n\npublic class FloatArray {\n\t\n\tpublic float[] items;\n\tpublic int length;\n\tpublic boolean ordered;\n\n\tpublic FloatArray() {\n\t\tthis(true, CollectionUtils.INITIAL_CAPACITY);\n\t}\n\n\tpublic FloatArray(int capacity) {\n\t\tthis(true, capacity);\n\t}\n\n\tpublic FloatArray(boolean ordered, int capacity) {\n\t\tthis.ordered = ordered;\n\t\titems = new float[capacity];\n\t}\n\n\tpublic FloatArray(FloatArray array) {\n\t\tthis.ordered = array.ordered;\n\t\tlength = array.length;\n\t\titems = new float[length];\n\t\tSystem.arraycopy(array.items, 0, items, 0, length);\n\t}\n\n\tpublic FloatArray(float[] array) {\n\t\tthis(true, array, 0, array.length);\n\t}\n\n\tpublic FloatArray(boolean ordered, float[] array, int startIndex, int count) {\n\t\tthis(ordered, count);\n\t\tlength = count;\n\t\tSystem.arraycopy(array, startIndex, items, 0, count);\n\t}\n\n\tpublic void unshift(float value) {\n\t\tif (length > 0) {\n\t\t\tfloat[] items = this.items;\n\t\t\tfloat[] newItems = new float[length + 1];\n\t\t\tnewItems[0] = value;\n\t\t\tSystem.arraycopy(items, 0, newItems, 1, length);\n\t\t\tthis.length = newItems.length;\n\t\t\tthis.items = newItems;\n\t\t} else {\n\t\t\tadd(value);\n\t\t}\n\t}\n\n\tpublic void push(float value) {\n\t\tadd(value);\n\t}\n\n\tpublic void add(float value) {\n\t\tfloat[] items = this.items;\n\t\tif (length == items.length) {\n\t\t\titems = relength(MathUtils.max(8, (int) (length * 1.75f)));\n\t\t}\n\t\titems[length++] = value;\n\t}\n\n\tpublic void addAll(FloatArray array) {\n\t\taddAll(array, 0, array.length);\n\t}\n\n\tpublic void addAll(FloatArray array, int offset, int length) {\n\t\tif (offset + length > array.length)\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"offset + length must be <= length: \" + offset + \" + \"\n\t\t\t\t\t\t\t+ length + \" <= \" + array.length);\n\t\taddAll(array.items, offset, length);\n\t}\n\n\tpublic void addAll(float... array) {\n\t\taddAll(array, 0, array.length);\n\t}\n\n\tpublic void addAll(float[] array, int offset, int length) {\n\t\tfloat[] items = this.items;\n\t\tint lengthNeeded = length + length;\n\t\tif (lengthNeeded > items.length) {\n\t\t\titems = relength(MathUtils.max(8, (int) (lengthNeeded * 1.75f)));\n\t\t}\n\t\tSystem.arraycopy(array, offset, items, length, length);\n\t\tlength += length;\n\t}\n\n\tpublic float get(int index) {\n\t\tif (index >= length) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn items[index];\n\t}\n\n\tpublic void set(int index, float value) {\n\t\tif (index >= length) {\n\t\t\tint size = length;\n\t\t\tfor (int i = size; i < index + 1; i++) {\n\t\t\t\tadd(0);\n\t\t\t}\n\t\t\titems[index] = value;\n\t\t\treturn;\n\t\t}\n\t\titems[index] = value;\n\t}\n\n\tpublic void incr(int index, float value) {\n\t\tif (index >= length)\n\t\t\tthrow new IndexOutOfBoundsException(\"index can't be >= length: \"\n\t\t\t\t\t+ index + \" >= \" + length);\n\t\titems[index] += value;\n\t}\n\n\tpublic void mul(int index, float value) {\n\t\tif (index >= length)\n\t\t\tthrow new IndexOutOfBoundsException(\"index can't be >= length: \"\n\t\t\t\t\t+ index + \" >= \" + length);\n\t\titems[index] *= value;\n\t}\n\n\tpublic void insert(int index, float value) {\n\t\tif (index > length) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index can't be > length: \"\n\t\t\t\t\t+ index + \" > \" + length);\n\t\t}\n\t\tfloat[] items = this.items;\n\t\tif (length == items.length)\n\t\t\titems = relength(MathUtils.max(8, (int) (length * 1.75f)));\n\t\tif (ordered)\n\t\t\tSystem.arraycopy(items, index, items, index + 1, length - index);\n\t\telse\n\t\t\titems[length] = items[index];\n\t\tlength++;\n\t\titems[index] = value;\n\t}\n\n\tpublic void swap(int first, int second) {\n\t\tif (first >= length)\n\t\t\tthrow new IndexOutOfBoundsException(\"first can't be >= length: \"\n\t\t\t\t\t+ first + \" >= \" + length);\n\t\tif (second >= length)\n\t\t\tthrow new IndexOutOfBoundsException(\"second can't be >= length: \"\n\t\t\t\t\t+ second + \" >= \" + length);\n\t\tfloat[] items = this.items;\n\t\tfloat firstValue = items[first];\n\t\titems[first] = items[second];\n\t\titems[second] = firstValue;\n\t}\n\n\tpublic boolean contains(float value) {\n\t\tint i = length - 1;\n\t\tfloat[] items = this.items;\n\t\twhile (i >= 0)\n\t\t\tif (items[i--] == value)\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tpublic int indexOf(float value) {\n\t\tfloat[] items = this.items;\n\t\tfor (int i = 0, n = length; i < n; i++)\n\t\t\tif (items[i] == value)\n\t\t\t\treturn i;\n\t\treturn -1;\n\t}\n\n\tpublic int lastIndexOf(float value) {\n\t\tfloat[] items = this.items;\n\t\tfor (int i = length - 1; i >= 0; i--)\n\t\t\tif (items[i] == value)\n\t\t\t\treturn i;\n\t\treturn -1;\n\t}\n\n\tpublic boolean removeValue(float value) {\n\t\tfloat[] items = this.items;\n\t\tfor (int i = 0, n = length; i < n; i++) {\n\t\t\tif (items[i] == value) {\n\t\t\t\tremoveIndex(i);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic float removeIndex(int index) {\n\t\tif (index >= length) {\n\t\t\tthrow new IndexOutOfBoundsException(\"index can't be >= length: \"\n\t\t\t\t\t+ index + \" >= \" + length);\n\t\t}\n\t\tfloat[] items = this.items;\n\t\tfloat value = items[index];\n\t\tlength--;\n\t\tif (ordered) {\n\t\t\tSystem.arraycopy(items, index + 1, items, index, length - index);\n\t\t} else {\n\t\t\titems[index] = items[length];\n\t\t}\n\t\treturn value;\n\t}\n\n\tpublic void removeRange(int start, int end) {\n\t\tif (end >= length) {\n\t\t\tthrow new IndexOutOfBoundsException(\"end can't be >= length: \"\n\t\t\t\t\t+ end + \" >= \" + length);\n\t\t}\n\t\tif (start > end) {\n\t\t\tthrow new IndexOutOfBoundsException(\"start can't be > end: \"\n\t\t\t\t\t+ start + \" > \" + end);\n\t\t}\n\t\tfloat[] items = this.items;\n\t\tint count = end - start + 1;\n\t\tif (ordered) {\n\t\t\tSystem.arraycopy(items, start + count, items, start, length\n\t\t\t\t\t- (start + count));\n\t\t} else {\n\t\t\tint lastIndex = this.length - 1;\n\t\t\tfor (int i = 0; i < count; i++)\n\t\t\t\titems[start + i] = items[lastIndex - i];\n\t\t}\n\t\tlength -= count;\n\t}\n\n\tpublic boolean removeAll(FloatArray array) {\n\t\tint length = this.length;\n\t\tint startlength = length;\n\t\tfloat[] items = this.items;\n\t\tfor (int i = 0, n = array.length; i < n; i++) {\n\t\t\tfloat item = array.get(i);\n\t\t\tfor (int ii = 0; ii < length; ii++) {\n\t\t\t\tif (item == items[ii]) {\n\t\t\t\t\tremoveIndex(ii);\n\t\t\t\t\tlength--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn length != startlength;\n\t}\n\n\tpublic float pop() {\n\t\treturn items[--length];\n\t}\n\n\tpublic float shift() {\n\t\treturn removeIndex(0);\n\t}\n\n\tpublic float peek() {\n\t\treturn items[length - 1];\n\t}\n\n\tpublic float first() {\n\t\tif (length == 0) {\n\t\t\tthrow new IllegalStateException(\"Array is empty.\");\n\t\t}\n\t\treturn items[0];\n\t}\n\n\tpublic void clear() {\n\t\tlength = 0;\n\t}\n\n\tpublic float[] shrink() {\n\t\tif (items.length != length)\n\t\t\trelength(length);\n\t\treturn items;\n\t}\n\n\tpublic float[] ensureCapacity(int additionalCapacity) {\n\t\tint lengthNeeded = length + additionalCapacity;\n\t\tif (lengthNeeded > items.length)\n\t\t\trelength(MathUtils.max(8, lengthNeeded));\n\t\treturn items;\n\t}\n\n\tprotected float[] relength(int newlength) {\n\t\tfloat[] newItems = new float[newlength];\n\t\tfloat[] items = this.items;\n\t\tSystem.arraycopy(items, 0, newItems, 0,\n\t\t\t\tMathUtils.min(length, newItems.length));\n\t\tthis.items = newItems;\n\t\treturn newItems;\n\t}\n\n\tpublic void sort() {\n\t\tArrays.sort(items, 0, length);\n\t}\n\n\tpublic void reverse() {\n\t\tfloat[] items = this.items;\n\t\tfor (int i = 0, lastIndex = length - 1, n = length / 2; i < n; i++) {\n\t\t\tint ii = lastIndex - i;\n\t\t\tfloat temp = items[i];\n\t\t\titems[i] = items[ii];\n\t\t\titems[ii] = temp;\n\t\t}\n\t}\n\n\tpublic void shuffle() {\n\t\tfloat[] items = this.items;\n\t\tfor (int i = length - 1; i >= 0; i--) {\n\t\t\tint ii = MathUtils.random(i);\n\t\t\tfloat temp = items[i];\n\t\t\titems[i] = items[ii];\n\t\t\titems[ii] = temp;\n\t\t}\n\t}\n\n\tpublic void truncate(int newlength) {\n\t\tif (length > newlength)\n\t\t\tlength = newlength;\n\t}\n\n\tpublic float random() {\n\t\tif (length == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn items[MathUtils.random(0, length - 1)];\n\t}\n\n\tpublic float[] toArray() {\n\t\tfloat[] array = new float[length];\n\t\tSystem.arraycopy(items, 0, array, 0, length);\n\t\treturn array;\n\t}\n\n\tpublic boolean equals(Object object) {\n\t\tif (object == this)\n\t\t\treturn true;\n\t\tif (!(object instanceof FloatArray))\n\t\t\treturn false;\n\t\tFloatArray array = (FloatArray) object;\n\t\tint n = length;\n\t\tif (n != array.length)\n\t\t\treturn false;\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tif (items[i] != array.items[i])\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tpublic String toString(String separator) {\n\t\tif (length == 0)\n\t\t\treturn \"\";\n\t\tfloat[] items = this.items;\n\t\tStringBuilder buffer = new StringBuilder(32);\n\t\tbuffer.append(items[0]);\n\t\tfor (int i = 1; i < length; i++) {\n\t\t\tbuffer.append(separator);\n\t\t\tbuffer.append(items[i]);\n\t\t}\n\t\treturn buffer.toString();\n\t}\n\n\tstatic public FloatArray with(float... array) {\n\t\treturn new FloatArray(array);\n\t}\n\n\tpublic FloatArray splice(int begin, int end) {\n\t\tFloatArray longs = new FloatArray(slice(begin, end));\n\t\tif (end - begin >= length) {\n\t\t\titems = new float[0];\n\t\t\tlength = 0;\n\t\t\treturn longs;\n\t\t} else {\n\t\t\tremoveRange(begin, end - 1);\n\t\t}\n\t\treturn longs;\n\t}\n\n\tpublic static float[] slice(float[] array, int begin, int end) {\n\t\tif (begin > end) {\n\t\t\tthrow new RuntimeException();\n\t\t}\n\t\tif (begin < 0) {\n\t\t\tbegin = array.length + begin;\n\t\t}\n\t\tif (end < 0) {\n\t\t\tend = array.length + end;\n\t\t}\n\t\tint elements = end - begin;\n\t\tfloat[] ret = new float[elements];\n\t\tSystem.arraycopy(array, begin, ret, 0, elements);\n\t\treturn ret;\n\t}\n\n\tpublic static float[] slice(float[] array, int begin) {\n\t\treturn slice(array, begin, array.length);\n\t}\n\n\tpublic FloatArray slice(int size) {\n\t\treturn new FloatArray(slice(this.items, size, this.length));\n\t}\n\n\tpublic FloatArray slice(int begin, int end) {\n\t\treturn new FloatArray(slice(this.items, begin, end));\n\t}\n\n\tpublic static float[] concat(float[] array, float[] other) {\n\t\treturn concat(array, array.length, other, other.length);\n\t}\n\n\tpublic static float[] concat(float[] array, int alen, float[] other, int blen) {\n\t\tfloat[] ret = new float[alen + blen];\n\t\tSystem.arraycopy(array, 0, ret, 0, alen);\n\t\tSystem.arraycopy(other, 0, ret, alen, blen);\n\t\treturn ret;\n\t}\n\n\tpublic FloatArray concat(FloatArray o) {\n\t\treturn new FloatArray(concat(this.items, this.length, o.items, o.length));\n\t}\n\n\tpublic String toString(char split) {\n\t\tif (length == 0) {\n\t\t\treturn \"[]\";\n\t\t}\n\t\tfloat[] items = this.items;\n\t\tStringBuilder buffer = new StringBuilder(\n\t\t\t\tCollectionUtils.INITIAL_CAPACITY);\n\t\tbuffer.append('[');\n\t\tbuffer.append(items[0]);\n\t\tfor (int i = 1; i < length; i++) {\n\t\t\tbuffer.append(split);\n\t\t\tbuffer.append(items[i]);\n\t\t}\n\t\tbuffer.append(']');\n\t\treturn buffer.toString();\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn toString(',');\n\t}\n}\n","binary":"false","copies":"1","sample_repo_name":"cping/LGame","sample_ref":"refs/heads/master","sample_path":"Java/Loon-Neo/src/loon/utils/FloatArray.java","sample_mode":"33188","sample_symlink_target":null}
{"id":"f4057c8014c4e8a995829268a693867ab12e77d3","size":"7792","content":"/*\n * Copyright 2015-2016 the original author or authors.\n * Copyright 2015-2016 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\npackage org.lastaflute.web.ruts.process;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.dbflute.optional.OptionalThing;\nimport org.dbflute.util.DfTypeUtil;\nimport org.dbflute.util.DfTypeUtil.ParseDateException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * @author jflute\n */\npublic class JsonDebugChallenge {\n\n    // ===================================================================================\n    //                                                                          Definition\n    //                                                                          ==========\n    private static final Logger logger = LoggerFactory.getLogger(JsonDebugChallenge.class);\n\n    // ===================================================================================\n    //                                                                           Attribute\n    //                                                                           =========\n    protected final String propertyName;\n    protected final Class<?> propertyType;\n    protected final Object mappedValue; // null allowed\n    protected final Integer elementIndex; // null allowed, exists if the property is on bean in list\n\n    // ===================================================================================\n    //                                                                         Constructor\n    //                                                                         ===========\n    public JsonDebugChallenge(String propertyName, Class<?> propertyType, Object mappedValue, Integer elementIndex) {\n        this.propertyName = propertyName;\n        this.propertyType = propertyType;\n        this.mappedValue = filterMappedValue(propertyType, mappedValue);\n        this.elementIndex = elementIndex;\n    }\n\n    protected Object filterMappedValue(Class<?> propertyType, Object mappedValue) {\n        if (mappedValue == null) {\n            return null;\n        }\n        final Class<?> valueType = mappedValue.getClass();\n        if (propertyType.isAssignableFrom(valueType)) {\n            return mappedValue;\n        }\n        try {\n            if (mappedValue instanceof String) {\n                final String plainStr = (String) mappedValue;\n                try {\n                    if (LocalDate.class.isAssignableFrom(propertyType)) {\n                        return DfTypeUtil.toLocalDate(plainStr, \"yyyy-MM-dd\");\n                    } else if (LocalDateTime.class.isAssignableFrom(propertyType)) {\n                        return DfTypeUtil.toLocalDateTime(plainStr, \"yyyy-MM-dd'T'HH:mm:ss\");\n                    } else if (LocalTime.class.isAssignableFrom(propertyType)) {\n                        return DfTypeUtil.toLocalTime(plainStr, \"HH:mm:ss\");\n                    }\n                } catch (ParseDateException ignored) {}\n            } else if (mappedValue instanceof Double) { // Gson converts to double if \"20\" when map\n                final Double plainDouble = (Double) mappedValue;\n                if (Integer.class.isAssignableFrom(propertyType)) {\n                    if (((double) plainDouble.intValue()) == plainDouble.doubleValue()) { // no digits\n                        return Integer.valueOf(plainDouble.intValue());\n                    }\n                } else if (Long.class.isAssignableFrom(propertyType)) {\n                    if (((double) plainDouble.longValue()) == plainDouble.doubleValue()) { // no digits\n                        return Long.valueOf(plainDouble.longValue());\n                    }\n                } else if (BigDecimal.class.isAssignableFrom(propertyType)) {\n                    try {\n                        return new BigDecimal(plainDouble.toString()); // to avoid long digits\n                    } catch (RuntimeException ignored) { // just in case\n                        return new BigDecimal(plainDouble); // allow long digits\n                    }\n                }\n            }\n        } catch (RuntimeException continued) { // just in case\n            String msg = \"Cannot filter the mapped value: mappedValue={}, valueType={}\";\n            logger.debug(msg, mappedValue, valueType, continued);\n        }\n        return mappedValue;\n    }\n\n    // ===================================================================================\n    //                                                                   Challenge Display\n    //                                                                   =================\n    public String toChallengeDisp() {\n        final StringBuilder sb = new StringBuilder();\n        sb.append(\"\\n \").append(toTypeAssignableMark()).append(\" \");\n        sb.append(propertyType.getSimpleName()).append(\" \").append(propertyName);\n        if (mappedValue != null) {\n            final Class<?> valueType = getValueType().get();\n            if (isNestedProperty(valueType)) {\n                sb.append(\" = ... (unknown if assignable)\"); // nested is unsupported about challenge for now (so difficult)\n            } else {\n                sb.append(\" = (\").append(valueType.getSimpleName()).append(\") \\\"\").append(mappedValue).append(\"\\\"\");\n            }\n        } else {\n            sb.append(\" = null\");\n        }\n        return sb.toString();\n    }\n\n    public String toTypeAssignableMark() {\n        return getValueType().map(valueType -> {\n            if (isNestedProperty(valueType)) {\n                return \"?\";\n            } else {\n                return isAssignableFrom(valueType) ? \"o\" : \"x\";\n            }\n        }).orElse(\"v\");\n    }\n\n    protected boolean isNestedProperty(Class<?> valueType) {\n        return List.class.isAssignableFrom(valueType) || Map.class.isAssignableFrom(valueType);\n    }\n\n    protected boolean isAssignableFrom(Class<?> valueType) {\n        return propertyType.isAssignableFrom(valueType);\n    }\n\n    // ===================================================================================\n    //                                                                            Accessor\n    //                                                                            ========\n    public String getPropertyName() {\n        return propertyName;\n    }\n\n    public Class<?> getPropertyType() {\n        return propertyType;\n    }\n\n    public OptionalThing<Object> getMappedValue() {\n        return OptionalThing.ofNullable(mappedValue, () -> {\n            throw new IllegalStateException(\"Not found the mapped value: property=\" + propertyName);\n        });\n    }\n\n    public OptionalThing<Class<?>> getValueType() {\n        return OptionalThing.ofNullable(mappedValue != null ? mappedValue.getClass() : null, () -> {\n            throw new IllegalStateException(\"Not found the mapped value: property=\" + propertyName);\n        });\n    }\n\n    public OptionalThing<Integer> getElementIndex() {\n        return OptionalThing.ofNullable(elementIndex, () -> {\n            throw new IllegalStateException(\"Not found the element index: property=\" + propertyName);\n        });\n    }\n}\n","binary":"false","copies":"1","sample_repo_name":"lastaflute/lastaflute","sample_ref":"refs/heads/master","sample_path":"src/main/java/org/lastaflute/web/ruts/process/JsonDebugChallenge.java","sample_mode":"33188","sample_symlink_target":null}