[{content: "# Demonstrate various import statement syntaxes\n\nimport os\nimport sys\nfrom __future__ import (absolute_import, division, print_function)\n\nimport Queue as queue\n\nfrom .. import truc  # Ignore module containing relative path\n\nimport time\nfrom datetime import datetime, timedelta\n\nfrom hashlib import md5 as mda\n\n\n\"\"\" Coverage.py API \"\"\"\ntry:\nimport coverage\nexcept ImportError:\npass\n\ncov = coverage.Coverage()\ncov.start()\n\n# .. call your code ..\nq = queue.Queue()\nfor item in range(1, 10):\nq.put(item)\n\ncov.stop()\ncov.save()\n\ncov.html_report()\n\n\n# haslib API\nm = mda()\nm.update(\"Nobody inspects\")\nm.update(\" the spammish repetition\")\nm.digest()\n\n\n# Example of function\n\nimport struct, socket\n\ndef address_in_network(ip, net):\n\"\"\"This function allows you to check if an IP belongs to a network subnet\nExample: returns True if ip = 192.168.1.1 and net = 192.168.1.0/24\nreturns False if ip = 192.168.1.1 and net = 192.168.100.0/24\n:rtype: bool\n\"\"\"\nfull_path = os.path.join(root, \"file.txt\")\n\nipaddr = struct.unpack('=L', socket.inet_aton(ip))[0]\nnetaddr, bits = net.split('/')\nnetmask = struct.unpack('=L', socket.inet_aton(dotted_netmask(int(bits))))[0]\nnetwork = struct.unpack('=L', socket.inet_aton(netaddr))[0] & netmask\nreturn (ipaddr & netmask) == (network & netmask)\n\n\n\n\"\"\" Main \"\"\"\nif __name__ == '__main__':\n\nprint(time.strptime(\"30 Nov 00\", \"%d %b %y\"))\nmax_end_time = datetime.utcnow() + timedelta(seconds=timeout)\n\nif sys.version_info[0] >= 3:\nimport http.server  # Imports could be define inline\nimport socketserver\n\n"}]

