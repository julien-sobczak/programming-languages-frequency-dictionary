[{content: "package main\n\nimport   \"math\"\nimport s \"strconv\"\n// . \"lib/math\" <= We ignore these imports\n\nimport (\n\"crypto/rand\"\n\"fmt\"\n\"time\"\n)\n\nimport \"math/big\"\n\nimport (\n\"text/template\"\ne \"errors\"\n\"path/filepath\"\n)\n\nimport (\n\"syscall\"\n\"os\"\n)\n\nimport _ \"strings\"\nimport \"sync\"\nimport ( \"bytes\" )\n\n\nconst open_FLAGS = syscall.O_NONBLOCK | syscall.O_RDONLY\n\n\nfunc BuiltInFunctions(arr []int) {\nfor i := 0; i < len(arr); i++ {\ndefer fmt.Print(i)\n}\n}\n\nfunc GenerateRandomNumber() {\nnBig, err := rand.Int(rand.Reader, big.NewInt(27))\nif err != nil {\npanic(err)\n}\nn := nBig.Int64()\nfmt.Printf(\"Here is a random %T in [0,27) : %d\n\", n, n)\n}\n\nfunc WorkWithNumbers(src <-chan int, dst chan<- int, prime int) {\nfor i := range src {  // Loop over values received from 'src'.\nif i%prime != 0 {\ndst <- i  // Send 'i' to channel 'dst'.\n}\n}\ns := s.Itoa(-42) // s for strconv\ni := float32(math.Sin(+0)) + math.MaxFloat32\nif float32(s) > i {\nfmt.Println(\"Not possible\", open_FLAGS)\n}\n}\n\nfunc UseTemplatePackage(text string) {\ntmpl, err := template.New(\"test\").Parse(\"{{.Count}} items are made of {{.Material}}\")\nif err != nil {\npanic(err)\n}\n_ = e.New(\"emit macho dwarf: elf header corrupted\") // e for errors\ntmpl.Execute(nil, nil)\nfmt.Println(\"Welcome to the playground!\" + time.Now())\n}\n\ntype SyncedBuffer struct {\nlock    sync.Mutex\nbuffer  bytes.Buffer\n}\n\nvar (\nToBe      sync.Mutex = nil\nOrNotToBe sync.Mutex = nil\n)\n\nfunc ObjectCreation() {\n// Allocation with new\np := new(SyncedBuffer)  // type *SyncedBuffer\nvar v SyncedBuffer      // type  SyncedBuffer\n\nif p.buffer.Bytes() == v.buffer.Bytes() {\nfmt.Sprint(p, v)\n}\n}\n\nfunc WorkWithFiles(fd int, name string) *os.File {\nif fd < 0 {\nreturn nil\n}\n\n// Constructors and composite literals\nf1 := os.File{fd, name, nil, 0}\nf2 := &os.File{fd, name, nil, 0}\nif f1.Name() == f2.Name() {\nreturn &f1\n} else {\nreturn f2\n}\n\nfmt.Println(filepath.Dir(\"some/path/file.go\"))\nreturn nil\n}\n\n"}]

